
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> # This R script will run on our backend. You can write arbitrary code here!
> 
> # Many standard libraries are already installed, such as randomForest
> #library(randomForest)
> #library(Hmisc)
> # The train and test data is stored in the ../input directory
> #train <- read.csv("../input/train.csv")
> #test  <- read.csv("../input/test.csv")
> 
> # We can inspect the train data. The results of this are printed in the log tab below
> #summary(train)
> #describe(train)
> #str(train)
> #describe(train$Cabin)
> #class(train$Cabin)
> #head(train)
> # Here we will plot the passenger survival by class
> #train$Survived <- factor(train$Survived, levels=c(1,0))
> #levels(train$Survived) <- c("Survived", "Died")
> #train$Pclass <- as.factor(train$Pclass)
> #levels(train$Pclass) <- c("1st Class", "2nd Class", "3rd Class")
> 
> #png("1_survival_by_class.png", width=800, height=600)
> #mosaicplot(train$Pclass ~ train$Survived, main="Passenger Survival by Class",
> #           color=c("#8dd3c7", "#fb8072"), shade=FALSE,  xlab="", ylab="",
> #          off=c(0), cex.axis=1.4)
> #dev.off()
> 
> 
> #########################################################################################################
> ############## Logistic Regression Model on Titanic Dataset ############################################
> 
> # Load dataset
> train <- read.csv("../input/train.csv")
> test  <- read.csv("../input/test.csv")
> #gender <- read.csv("../input/gender_submission.csv")
> Survived<-c(0,1,0,0,1,0,1,0,1,0,0,0,1,0,1,1,0,0,1,1,0,0,1,0,1,0,1,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,1,1,0,0,0,1,1,0,0,1,1,0,0,0,0,
+ 0,1,0,0,0,1,0,1,1,0,0,1,1,0,1,0,1,0,0,1,0,1,0,0,0,0,0,0,1,1,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,1,
+ 0,0,1,0,1,1,0,1,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,1,0,1,1,0,1,0,0,1,0,0,1,1,0,0,
+ 0,0,0,1,1,0,1,1,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,1,0,0,1,0,0,1,0,1,0,0,0,0,1,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,
+ 0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,1,0,0,0,1,1,0,1,0,0,0,0,1,0,1,1,1,0,
+ 0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,
+ 1,0,1,0,1,0,1,1,0,0,0,1,0,1,0,0,1,0,1,1,0,1,1,0,1,1,0,0,1,0,0,1,1,1,0,0,0,0,0,1,1,0,1,0,0,0,0,0,1,0,0,0,1,0,1,0,0,
+ 1,0,1,0,0,0,0,0,1,1,1,1,1,0,1,0,0,0)
> 
> gender <- as.data.frame(Survived)
>  
>                     
> ##########################################################################################
> # Recode dependent variable (survied) as dummy variable
> test$Survived <- gender$Survived
> test$Survived <- as.factor(test$Survived)
> train$Survived <- as.factor(train$Survived)
> #############################################################################################
> # remove redundant variables from train and test data
> train1 <- subset(train, select=c(Survived,Pclass,Sex,Age,SibSp,Parch,Embarked))
> test1 <- subset(test,   select=c(Survived,Pclass,Sex,Age,SibSp,Parch,Embarked))
> 
> # create dataset to check the distribution of the predictors
> dataset <- rbind(train1,test1)
> ##############################################################################################
> # Check the structure of dataset
> str(dataset)
'data.frame':	1309 obs. of  7 variables:
 $ Survived: Factor w/ 2 levels "0","1": 1 2 2 2 1 1 1 1 2 2 ...
 $ Pclass  : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Sex     : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age     : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp   : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch   : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Embarked: Factor w/ 4 levels "","C","Q","S": 4 2 4 4 4 3 4 4 4 2 ...
> # Pclass
> hist(dataset$Pclass)
> table(dataset$Pclass)

  1   2   3 
323 277 709 
> # recode Pclass as dummy variable
> dataset$Pclass <- as.factor(dataset$Pclass)
> plot(dataset$Pclass)
> # SibSp
> hist(dataset$SibSp) # Skewed distribution
> table(dataset$SibSp) # frequency distribution

  0   1   2   3   4   5   8 
891 319  42  20  22   6   9 
> 
> # Make the necessary replacements for coarse classification of SibSp variable  
> 
> dataset$SibSp_cat <- rep(NA,length(dataset$SibSp))
> 
> dataset$SibSp_cat[which(dataset$SibSp == 0)] <- "No Sibling"
> dataset$SibSp_cat[which(dataset$SibSp == 1)] <- "One Sibling"
> dataset$SibSp_cat[which(dataset$SibSp >= 2 & dataset$SibSp <=8)] <- "2+ Sibling"
> 
> dataset$SibSp_cat <- as.factor(dataset$SibSp_cat)
> plot(dataset$SibSp_cat)
> 
> dataset <- subset(dataset,select = -c(SibSp))
> 
> 
> # Check the structure of dataset
> str(dataset)
'data.frame':	1309 obs. of  7 variables:
 $ Survived : Factor w/ 2 levels "0","1": 1 2 2 2 1 1 1 1 2 2 ...
 $ Pclass   : Factor w/ 3 levels "1","2","3": 3 1 3 1 3 3 1 3 3 2 ...
 $ Sex      : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age      : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ Parch    : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Embarked : Factor w/ 4 levels "","C","Q","S": 4 2 4 4 4 3 4 4 4 2 ...
 $ SibSp_cat: Factor w/ 3 levels "2+ Sibling","No Sibling",..: 3 3 2 3 2 2 2 1 2 3 ...
> # Parch
> hist(dataset$Parch) # Skewed distribution
> table(dataset$Parch) # frequency distribution

   0    1    2    3    4    5    6    9 
1002  170  113    8    6    6    2    2 
> 
> # Make the necessary replacements for coarse classification of Parch variable
> dataset$Parch_cat <- rep(NA,length(dataset$Parch))
> 
> dataset$Parch_cat[which(dataset$Parch == 0)] <- "No Family"
> dataset$Parch_cat[which(dataset$Parch == 1)] <- "One Family"
> dataset$Parch_cat[which(dataset$Parch == 2)] <- "Two Family"
> dataset$Parch_cat[which(dataset$Parch > 2 & dataset$Parch <=9)] <- "2+ Family"
> 
> dataset$Parch_cat <- as.factor(dataset$Parch_cat)
> plot(dataset$Parch_cat)
> 
> dataset <- subset(dataset,select = -c(Parch))
> #
> str(dataset)
'data.frame':	1309 obs. of  7 variables:
 $ Survived : Factor w/ 2 levels "0","1": 1 2 2 2 1 1 1 1 2 2 ...
 $ Pclass   : Factor w/ 3 levels "1","2","3": 3 1 3 1 3 3 1 3 3 2 ...
 $ Sex      : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age      : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ Embarked : Factor w/ 4 levels "","C","Q","S": 4 2 4 4 4 3 4 4 4 2 ...
 $ SibSp_cat: Factor w/ 3 levels "2+ Sibling","No Sibling",..: 3 3 2 3 2 2 2 1 2 3 ...
 $ Parch_cat: Factor w/ 4 levels "2+ Family","No Family",..: 2 2 2 2 2 2 2 3 4 2 ...
> ##############################################################################################
> # check for missing and unique values (train & test data)
> sapply(dataset,function(x)sum(is.na(x)))
 Survived    Pclass       Sex       Age  Embarked SibSp_cat Parch_cat 
        0         0         0       263         0         0         0 
> sapply(dataset,function(x) length(unique(x)))
 Survived    Pclass       Sex       Age  Embarked SibSp_cat Parch_cat 
        2         3         2        99         4         3         4 
> 
> # Visual plot for missing values
> library(Amelia)
Loading required package: Rcpp
## 
## Amelia II: Multiple Imputation
## (Version 1.7.6, built: 2019-11-24)
## Copyright (C) 2005-2020 James Honaker, Gary King and Matthew Blackwell
## Refer to http://gking.harvard.edu/amelia/ for more information
## 
> missmap(dataset, main= "Missing values vs observed")
> 
> # Replace missing value with mean (age variable)
> library(gam)
Error in library(gam) : there is no package called ‘gam’
Execution halted
