
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## ----packages, warning=F, message=F----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(dplyr)           # Manipulation df

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> library(ggplot2)         # Visualisation
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library(stringr)         # Manipulation carcts
> library(magrittr)        # Outil %>%
> library(randomForest)    # Algorithme
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:ggplot2’:

    margin

The following object is masked from ‘package:dplyr’:

    combine

> 
> 
> ## ---- message=F------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train <- read.csv('../input/train.csv', stringsAsFactors = F)
> test <- read.csv('../input/test.csv', stringsAsFactors = F)
> 
> 
> ## ---- message=F------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full <- bind_rows(train,test)
> 
> 
> ## ---- message=F------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> NA_finder <- function(df){
+   
+   NA_sum_t <- data.frame(VarPos = c(1:ncol(df)),
+                          VarName = rep(0),
+                          SumNA = rep(0),
+                          SumEmpty = rep(0),
+                          SumSpaces = rep(0))
+   
+   for(i in 1:ncol(df)){
+     if(sum(is.na(df[,i])) > 0){
+       NA_sum_t[i,'SumNA'] <- sum(is.na(df[,i]))
+       NA_sum_t[i, 'VarName'] <- names(df)[i]
+     } else if(length(which(df[,i] == '')) > 0){
+       NA_sum_t[i,'SumEmpty'] <- length(which(df[,i] == ''))
+       NA_sum_t[i, 'VarName'] <- names(df)[i]
+     } else if(length(which(df[,i] == ' ')) > 0){
+       NA_sum_t[i,'SumSpaces'] <- length(which(df[,i] == ' '))
+       NA_sum_t[i, 'VarName'] <- names(df)[i]
+     }
+   }
+   
+   NA_sum_res <- NA_sum_t %>%
+     filter(SumNA > 0 | SumEmpty > 0 | SumSpaces > 0) %>%
+     arrange(VarPos)
+   
+   return(NA_sum_res)
+   
+ }
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> NA_finder(full)
  VarPos  VarName SumNA SumEmpty SumSpaces
1      2 Survived   418        0         0
2      6      Age   263        0         0
3     10     Fare     1        0         0
4     11    Cabin     0     1014         0
5     12 Embarked     0        2         0
> 
> 
> ## ---- message = F----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> split_name <- str_split(full$Name,'[.*,]') # Decomposition Name en 3 parties
> 
> full['Surname'] <- rep(0) # Creation variable Nom de famille
> full['Fstname'] <- rep(0) # Creaation variable Prenom
> full['Title']   <- rep(0) # Creaation variable Titre
> 
>  # Creation variables
> 
> for(i in 1:1309){
+   full[i,'Surname'] <- split_name[[i]][1]
+ }
> for(i in 1:1309){
+   full[i,'Fstname'] <- split_name[[i]][3]
+ }
> for(i in 1:1309){
+   full[i,'Title'] <- split_name[[i]][2]
+ }
> 
> full$Title <- gsub('(.*\\s)',"",full$Title) # Suppression des espaces dans les titres
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> table(full$Sex,full$Title) # Repartition selon le titre
        
         Capt Col Countess Don Dona  Dr Jonkheer Lady Major Master Miss Mlle
  female    0   0        1   0    1   1        0    1     0      0  260    2
  male      1   4        0   1    0   7        1    0     2     61    0    0
        
         Mme  Mr Mrs  Ms Rev Sir
  female   1   0 197   2   0   0
  male     0 757   0   0   8   1
> 
> table(full$Pclass, full$Title) # Repartition selon la classe
   
    Capt Col Countess Don Dona  Dr Jonkheer Lady Major Master Miss Mlle Mme  Mr
  1    1   4        1   1    1   6        1    1     2      5   60    2   1 159
  2    0   0        0   0    0   2        0    0     0     11   50    0   0 150
  3    0   0        0   0    0   0        0    0     0     45  150    0   0 448
   
    Mrs  Ms Rev Sir
  1  77   0   0   1
  2  55   1   8   0
  3  65   1   0   0
> 
> 
> ## ---- message=F------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> special_titls <- c( "Don","Mme","Major","Lady","Sir","Mlle",
+                     "Col","Capt","Countess","Jonkheer","Dona") 
> 
> for(i in 1:nrow(full)){
+   if(full[i,'Title'] == 'Ms'){
+     full[i, 'Title'] <- 'Miss'
+   } else if(full[i,'Title'] == 'Rev'){
+     full[i, 'Title'] <- 'Mr'
+   } else if(full[i,'Title'] == 'Dr' & full[i,'Sex'] == 'male'){
+     full[i, 'Title'] <- 'Mr'
+   } else if(full[i,'Title'] == 'Dr' & full[i,'Sex'] == 'female'){
+     full[i, 'Title'] <- 'Mrs'
+   } else if(full[i,'Title'] %in% special_titls){
+     full[i, 'Title'] <- 'Special'
+   }
+ }
> 
> 
> 
> ## ---- message=F------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full <- full %>%
+         mutate(FamNr = SibSp + Parch )
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full[which(is.na(full$Fare)),c('PassengerId','Pclass','Embarked','FamNr')]
     PassengerId Pclass Embarked FamNr
1044        1044      3        S     0
> 
> 
> ## ---- message = F----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> p3Sou <- full %>% filter(Pclass == 3 & Embarked == 'S' & FamNr == 1)
> full[1044, 'Fare'] <- median(p3Sou$Fare, na.rm = T)
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> # Recherche des tickets identiques
> 
> for(i in 1:nrow(full)){
+   full$Perptick[i] <- 0
+   for(j in 1:nrow(full)){
+     if(full[j, 'Ticket'] == full[i, 'Ticket']){
+       full[i, 'Perptick'] <- full[i, 'Perptick'] + 1
+     } 
+   }
+ }
> 
> 
> 
> ## ---- message=F------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Variable du prix a l'unite
> 
> full$Fare_unit <- round(full$Fare / full$Perptick, 2)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full$Deck <- sapply(X = full$Cabin, FUN = function(x){str_split(x, '[[:digit:]]')[[1]][1]}) 
> full[which(full$Deck == 'F G'),'Deck'] <- 'F'
> full[which(full$Deck == 'F E'),'Deck'] <- 'F'
> full[which(full$Deck == 'T'),'Deck'] <- 'A'
> 
> for(i in 1:1309){
+   if(full[i,'Deck'] == ''){
+     full[i,'Deck'] <- 'Unk'
+   }
+ }
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Prix des tickets des embarcations inconnues
> 
> full[which(full$Embarked == ''), c('PassengerId','Pclass','Ticket','Fare_unit')]
    PassengerId Pclass Ticket Fare_unit
62           62      1 113572        40
830         830      1 113572        40
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> ggplot(filter(full, Pclass == 1 & Embarked != ''), aes(x = factor(Embarked), y = Fare_unit)) +
+   geom_boxplot() +
+   geom_hline(aes(yintercept = 40), col = 'red', linetype = 'dashed') +
+   labs(x = 'Port', y = 'Prix (en £)', title = 'Prix du ticket selon les ports') +
+   coord_cartesian(ylim = c(5,60))
> 
> 
> 
> 
> ## ---- message = F----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> full[which(full$Embarked == ''), 'Embarked'] <- 'C'
> 
> 
> 
> ## ---- message=F------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> full$Age <- round(full$Age, 0) # Arrondi pour les valeurs estimees
> age_unk <- full[which(is.na(full$Age)),] # Df age inconnu
> age_k <- full[-which(is.na(full$Age)),] # Df age connu
> 
> age_k_surv <- age_k[which(age_k$PassengerId %in% c(1:891)),] # age connu et donnees survie
> 
> 
> 
> ## ---- message=F,echo = T---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> youngs <- filter(age_k_surv, Age < 20) # Passagers de moins de vingt ans
> 
> ggplot(youngs, aes(x = Age, fill = factor(Survived))) +
+   geom_histogram(position = 'dodge') +
+   geom_hline(aes(yintercept = 5), col = 'red', linetype = 'dashed') +
+   scale_y_continuous(breaks = c(0:15)) +
+   scale_fill_discrete(name = 'A survecu?', labels = c('Non','Oui')) +
+   facet_wrap( ~ Sex) +
+   labs(title = 'Survie des jeunes passagers') 
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
>   
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> ggplot(youngs, aes(x = Age, fill = factor(Survived))) +
+   geom_histogram(position = 'dodge', binwidth = 5) + # intervalle de 5
+   geom_hline(aes(yintercept = 5), col = 'red', linetype = 'dashed') +
+   scale_fill_discrete(name = 'A survecu?', labels = c('Non','Oui')) +
+   facet_wrap( ~ Sex) +
+   labs(title = 'Survie des jeunes passagers') 
>   
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(age_k, aes(x = Title, y = Age, group = Title)) +
+   geom_boxplot() +
+   geom_hline(aes(yintercept = 14), col = 'red', linetype = 'dashed')
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(filter(age_k, Title == 'Miss'), aes(x = factor(FamNr), y = Age, group = FamNr)) +
+   geom_boxplot() +
+   geom_hline(aes(yintercept = 14), col = 'red', linetype = 'dashed')
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> ggplot(filter(age_k, Title == 'Miss' & FamNr == 0), aes(x = factor(Perptick), y = Age, group = Perptick)) +
+   geom_boxplot() +
+   geom_hline(aes(yintercept = 14), col = 'red', linetype = 'dashed')
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> ggplot(filter(age_k, Title == 'Miss' & FamNr == 0), aes(x = factor(Perptick))) +
+   geom_bar(fill = 'blue', alpha = 0.5) 
> 
> 
> 
> ## ---- results=F------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> age_TitFam_Med <- age_k %>% 
+   group_by(Title, FamNr) %>%
+   summarise(Age_median = median(Age)) %>%
+   ungroup()
`summarise()` regrouping output by 'Title' (override with `.groups` argument)
> 
> 
> 
> ## ---- results=F------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> age_unk <- left_join(age_unk, age_TitFam_Med, by = c("Title","FamNr"))
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> filter(NA_finder(age_unk), VarName == 'Age_median')
  VarPos    VarName SumNA SumEmpty SumSpaces
1     20 Age_median    10        0         0
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> age_unk[which(is.na(age_unk$Age_median)),c("PassengerId","Name","SibSp",
+                                            "Parch","Title","Perptick","Age_median")]
    PassengerId                              Name SibSp Parch  Title Perptick
36          181      Sage, Miss. Constance Gladys     8     2   Miss       11
42          202               Sage, Mr. Frederick     8     2     Mr       11
64          325          Sage, Mr. George John Jr     8     2     Mr       11
162         793           Sage, Miss. Stella Anna     8     2   Miss       11
171         847          Sage, Mr. Douglas Bullen     8     2     Mr       11
174         864 Sage, Miss. Dorothy Edith "Dolly"     8     2   Miss       11
215        1080                   Sage, Miss. Ada     8     2   Miss       11
249        1231             Betros, Master. Seman     0     0 Master        1
250        1234             Sage, Mr. John George     1     9     Mr       11
254        1257    Sage, Mrs. John (Annie Bullen)     1     9    Mrs       11
    Age_median
36          NA
42          NA
64          NA
162         NA
171         NA
174         NA
215         NA
249         NA
250         NA
254         NA
> 
> 
> 
> ## ---- results=F------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> for(i in 1 : nrow(age_unk)){
+   
+   if(is.na(age_unk$Age_median)[i] & age_unk$Parch[i] == 0){
+     age_unk[i,"Age_median"] <- 14
+   } else if(is.na(age_unk$Age_median)[i] & age_unk$Parch[i] == 2){
+     age_unk[i,"Age_median"] <- 16
+   } else if(is.na(age_unk$Age_median)[i] & age_unk$Parch[i] == 9){
+     age_unk[i,"Age_median"] <- 40
+   }
+   
+ }
> 
> for(i in 1 : nrow(age_unk)){
+   age_unk[i, "Age"] <- round(age_unk[i,"Age_median"],0)
+ }
> 
> full_bind <- bind_rows(age_k,age_unk[,c(1:19)])
> 
> full <- full_bind[order(full_bind$PassengerId),]
> 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> for(i in 1:nrow(full)){
+   if(full[i,"Age"] < 3){
+     full$Aclass[i] <- "Baby"
+   } else if(full[i,"Age"] >= 3 & full[i,"Age"] < 15){
+     full$Aclass[i] <- "Child"
+   } else if(full[i,"Age"] >= 15 & full[i,"Age"] < 60){
+     full$Aclass[i] <- "Adult"
+   } else {
+     full$Aclass[i] <- "Old"
+   }
+ } 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> NA_finder(full)
  VarPos  VarName SumNA SumEmpty SumSpaces
1      2 Survived   418        0         0
2     11    Cabin     0     1014         0
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> cat_vars <- c('Aclass','Pclass','Sex','Embarked','Title','FamNr','Deck')
> 
> 
> full[cat_vars] <- lapply(full[cat_vars], function(x) as.factor(x))
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> train_cl <- full[1:891,]
> test_cl <- full[892:1309,]
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> set.seed(459) # graine pour creation aleatoire
> 
> random_for <- randomForest(factor(Survived) ~ Aclass + Pclass + Sex + Embarked + 
+                                               Title + FamNr + Deck + Perptick,  
+                                               data = train_cl)  # Modele
> 
> prev_age <- predict(random_for, test_cl) # Previsions
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> solution <- data.frame(PassengerID = test_cl$PassengerId, Survived = prev_age)
> 
> # Laisser en com - write.csv(solution, file = 'sub_titanic.csv', row.names = F)
> 
> 
> 
> proc.time()
   user  system elapsed 
 37.497   0.311  38.018 
