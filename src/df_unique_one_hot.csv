index,Name,Accuracy,Functions,Packages,Runtime,Functions_by_users,Copy_of,most_similar,index_of_similarity,raw_json,packs,string_packs,code,forest,neural,caret,mice,base,glmnet,mass,car,xgboost,rpart,caretEnsemble,e1071,rann,amelia
0,prabhulingayya-titanic-prediction-using-logistic-regression,0.746,"['as.factor', 'gsub', 'is.na', 'mean', 'nrow', 'rbind', 'rep', 'round', 'summary', 'which', 'binomial', 'glm', 'predict', 'read.csv', 'str', 'write.csv']",['base'],0.344872951507568,"['gsub', 'rbind', 'nrow', 'predict', 'write.csv', 'mean', 'read.csv', 'binomial', 'as.factor', 'summary', 'which', 'round', 'rep', 'str', 'is.na', 'glm']",[],"['cnusapbo-titanic-r-code', 'joelweiss-titanic-data-r', 'goblin-titanic-test', 'garciparedes-titanic-getting-started', 'jacekpardyak-mytitanicscript', 'alma123-titanic', 'tsfitz-titanic', 'fpsawicki-eda-and-prediction-on-titanic-dataset', 'mustfkeskin-titanic-xgboost', 'econdata-titanic-datasets-ml-with-r-journey-to-top-1']","[0.9988202265519232, 0.5657821282835571, 0.4979576347946317, 0.3897911766565797, 0.3863840900846755, 0.3767906743505642, 0.37005216678140546, 0.3639732168396007, 0.3375602115842577, 0.30711875923594495]","{'package:base': ['as.factor', 'gsub', 'is.na', 'mean', 'nrow', 'rbind', 'rep', 'round', 'summary', 'which'], 'package:stats': ['binomial', 'glm', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""as.factor"", ""gsub"", ""is.na"", ""mean"", ""nrow"", ""rbind"", ""rep"", ""round"", ""summary"", ""which""], ""package:stats"": [""binomial"", ""glm"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase asfactor gsub isna mean nrow rbind rep round summary which packagestats binomial glm predict packageutils readcsv str writecsv,"training <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
test$Survived <- rep(NA, nrow(test))
data <- rbind(training, test)
str(data)
summary(data)
data$Embarked <- as.factor(data$Embarked)
data$Pclass <- as.factor(data$Pclass)
data$Sex <- as.factor(data$Sex)
data$Survived <- as.factor(data$Survived)
data$N_Family <- data$SibSp + data$Parch + 1
data$individual_price <- data$Fare/data$N_Family
data$individual_price[1044] <- mean(data$individual_price[which(data$Pclass == 3 & is.na(data$Fare) == FALSE)])
data$Embarked[which(data$Embarked == """")] <- ""S""
data$Title <- gsub(""(.*, )|(\\..*)"", """", data$Name)
data$Title[data$Title == ""Ms""] <- ""Miss""
data$Age[data$Title == ""Dr"" & is.na(data$Age) == TRUE] <- mean(data$Age[data$Title == ""Dr"" & is.na(data$Age) == FALSE])
data$Age[data$Title == ""Master"" & is.na(data$Age) == TRUE] <- mean(data$Age[data$Title == ""Master"" & is.na(data$Age) == FALSE])
data$Age[data$Title == ""Miss"" & is.na(data$Age) == TRUE] <- mean(data$Age[data$Title == ""Miss"" & is.na(data$Age) == FALSE])
data$Age[data$Title == ""Mr"" & is.na(data$Age) == TRUE] <- mean(data$Age[data$Title == ""Mr"" & is.na(data$Age) == FALSE])
data$Age[data$Title == ""Mrs"" & is.na(data$Age) == TRUE] <- mean(data$Age[data$Title == ""Mrs"" & is.na(data$Age) == FALSE])
tr_data <- data[1:891, ]
te_data <- data[892:1309, ]
model_logistic = glm(Survived ~ Pclass + Sex + Age + N_Family, family = binomial(link = ""logit""), data = tr_data)
summary(model_logistic)
mean(tr_data$Survived == round(predict(model_logistic, tr_data, type = ""response"")))
te_data$Survived <- round(predict(model_logistic, te_data, type = ""response""))
write.csv(te_data[, 1:2], file = ""Titanic_sol.csv"", row.names = F)",0,0,0,0,1,0,0,0,0,0,0,0,0,0
1,erskumars-titanic-survival-eda-and-survival-rate-prediction,0.7490000000000001,"['as.data.frame', 'as.numeric', 'c', 'colnames', 'data.frame', 'duplicated', 'factor', 'gsub', 'ifelse', 'is.na', 'length', 'library', 'ncol', 'nrow', 'paste0', 'print', 'prop.table', 'return', 'sapply', 'seq', 'subset', 'sum', 'summary', 'table', 'which', 'funs', 'summarise_all', 'aes', 'geom_bar', 'geom_boxplot', 'geom_text', 'ggplot', 'labs', 'position_dodge', 'scale_y_continuous', 'rpart', 'median', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['dplyr', 'ggplot2', 'rpart', 'randomForest', 'base']",2.1178131103515603,"['labs', 'nrow', 'geom_text', 'median', 'which', 'is.na', 'duplicated', 'subset', 'geom_boxplot', 'print', 'ncol', 'prop.table', 'summarise_all', 'rpart', 'summary', 'sapply', 'str', 'gsub', 'factor', 'colnames', 'position_dodge', 'geom_bar', 'length', 'read.csv', 'paste0', 'table', 'return', 'as.data.frame', 'scale_y_continuous', 'c', 'aes', 'as.numeric', 'ifelse', 'sum', 'funs', 'predict', 'seq', 'write.csv', 'data.frame', 'ggplot', 'head', 'library']",[],"['erskumars-titanic-survival-eda-and-survival-rate-prediction', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'devanshugupta27-predicting-the-titanic-survival-rate', 'liudj2008-fork-of-titanic', 'liudj2008-titanic', 'ezhilvelme-titanic-neural-network-c-4-2', 'tobybot11-toby-s-titanic-analysis', 'jacekpardyak-mytitanicscript', 'annafreydenzon-titanic-machine-learning-from-disaster']","[0.9999999999999998, 0.4321551529106232, 0.4321551529106232, 0.4256770990479181, 0.415972810957442, 0.41561145287783335, 0.40030060716677573, 0.3993499308708529, 0.39469430042459935, 0.39327874021202414]","{'package:base': ['as.data.frame', 'as.numeric', 'c', 'colnames', 'data.frame', 'duplicated', 'factor', 'gsub', 'ifelse', 'is.na', 'length', 'library', 'ncol', 'nrow', 'paste0', 'print', 'prop.table', 'return', 'sapply', 'seq', 'subset', 'sum', 'summary', 'table', 'which'], 'package:dplyr': ['funs', 'summarise_all'], 'package:ggplot2': ['aes', 'geom_bar', 'geom_boxplot', 'geom_text', 'ggplot', 'labs', 'position_dodge', 'scale_y_continuous'], 'package:rpart': ['rpart'], 'package:stats': ['median', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""package:base"": [""as.data.frame"", ""as.numeric"", ""c"", ""colnames"", ""data.frame"", ""duplicated"", ""factor"", ""gsub"", ""ifelse"", ""is.na"", ""length"", ""library"", ""ncol"", ""nrow"", ""paste0"", ""print"", ""prop.table"", ""return"", ""sapply"", ""seq"", ""subset"", ""sum"", ""summary"", ""table"", ""which""], ""package:dplyr"": [""funs"", ""summarise_all""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""geom_boxplot"", ""geom_text"", ""ggplot"", ""labs"", ""position_dodge"", ""scale_y_continuous""], ""package:rpart"": [""rpart""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",packagebase asdataframe asnumeric c colnames dataframe duplicated factor gsub ifelse isna length library ncol nrow paste0 print proptable return sapply seq subset sum summary table which packagedplyr funs summariseall packageggplot2 aes geombar geomboxplot geomtext ggplot labs positiondodge scaleycontinuous packagerpart rpart packagestats median predict packageutils head readcsv str writecsv,"library(dplyr)
library(ggplot2)
library(rpart)
library(randomForest)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
summary(train)
nrow(train)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
summary(test)
nrow(test)
train %>% summarise_all(funs(sum(is.na(.))))
test %>% summarise_all(funs(sum(is.na(.))))
sapply(train, function(x) length(which(x == """")))
sapply(test, function(x) length(which(x == """")))
sum(is.na(train$Age))
sum(is.na(test$Age))
train$Age[which(is.na(train$Age))] <- median(train$Age, na.rm = T)
test$Age[which(is.na(test$Age))] <- median(test$Age, na.rm = T)
sum(duplicated(train$PassengerId))
sum(duplicated(test$PassengerId))
train$Age <- gsub("".00"", """", train$Age)
train$Survived <- factor(train$Survived)
train$Sex <- factor(train$Sex)
train$SibSp <- factor(train$SibSp)
train$Pclass <- factor(train$Pclass)
train$Embarked <- factor(train$Embarked)
train$Age_Category <- sapply(train$Age, function(x) {
    if (x >= 0 & x <= 12) {
        return(""Child"")
    }
    else if (x > 12 & x <= 24) {
        return(""Very Young"")
    }
    else if (x > 24 & x <= 36) {
        return(""Young"")
    }
    else if (x > 36 & x <= 48) {
        return(""Middle Aged"")
    }
    else if (x > 48) {
        return(""Old"")
    }
    else {
        return(""NA"")
    }
})
test$Age <- gsub("".00"", """", test$Age)
test$Sex <- factor(test$Sex)
test$SibSp <- factor(test$SibSp)
test$Pclass <- factor(test$Pclass)
test$Embarked <- factor(test$Embarked)
test$Age_Category <- sapply(test$Age, function(x) {
    if (x >= 0 & x <= 12) {
        return(""Child"")
    }
    else if (x > 12 & x <= 24) {
        return(""Very Young"")
    }
    else if (x > 24 & x <= 36) {
        return(""Young"")
    }
    else if (x > 36 & x <= 48) {
        return(""Middle Aged"")
    }
    else if (x > 48) {
        return(""Old"")
    }
    else {
        return(""NA"")
    }
})
ncol(train)
summary(train$Fare)
ggplot(train, aes(y = train$Fare, x = train$Pclass)) + geom_boxplot(fill = ""steelblue"") + labs(x = ""Class"", y = ""Fare"", title = ""Class wise Fare distribution"")
prop.table(table(train$Survived))
ggplot(train, aes(x = train$Survived)) + geom_bar(fill = ""orange"") + labs(x = ""Survived"", y = ""Passenger Count"") + scale_y_continuous(""Survived"", breaks = seq(0, 500, by = 50)) + geom_text(aes(y = prop.table(..count..) * 100 + 0.5, label = paste0(prop.table(..count..) * 100, ""%"")), stat = ""count"", position = position_dodge(0.9), size = 4, vjust = -0.9)
ggplot(train, aes(x = train$Sex, fill = train$Survived)) + geom_bar(position = ""fill"")
ggplot(train, aes(x = train$Pclass, fill = train$Survived)) + geom_bar(position = ""fill"")
train$Age <- as.numeric(train$Age)
summary(train$Age)
data <- subset(train, train$Survived == 1)
ggplot(data, aes(x = data$Sex, fill = data$Pclass)) + geom_bar(position = ""dodge"")
ggplot(train, aes(x = train$Age_Category, fill = train$Survived)) + geom_bar(position = ""fill"")
Adults <- subset(train, Age > 12)
ggplot(Adults, aes(x = Adults$Sex, fill = Adults$Survived)) + geom_bar(position = ""fill"")
str(train$SibSp)
ggplot(train, aes(x = train$SibSp, fill = train$Survived)) + geom_bar(position = ""fill"")
ggplot(train, aes(x = factor(train$Parch), fill = train$Survived)) + geom_bar(position = ""fill"")
fit <- rpart(Survived ~ Age_Category + Sex + Pclass + SibSp, data = train)
print(predict(fit, head(train)))
print(head(train$Survived))
val <- as.data.frame(predict(fit, test))
colnames(val) <- c(""NotSurvived"", ""Survived"")
val$score <- ifelse(val$NotSurvived > val$Survived, 0, 1)
new <- data.frame(PassengerId = test$PassengerId, Survived = val$score)
write.csv(new, ""predict_survival.csv"", row.names = F)
nrow(new)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
2,paulocressoni-titanic-using-stepwise-linear-regression,0.7559999999999999,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.factor', 'as.numeric', 'c', 'data.frame', 'gsub', 'is.na', 'library', 'mean', 'round', 'sub', 'summary', 'stepAIC', 'lm', 'predict', 'read.csv', 'write.csv']","['MASS', 'ggplot2', 'ggthemes', 'base']",0.9562289714813228,"['gsub', 'as.numeric', 'predict', 'sub', 'mean', 'write.csv', 'data.frame', 'stepAIC', 'read.csv', 'lm', 'as.factor', 'user defined', 'library', 'as.character', 'round', 'summary', 'c', 'is.na']",[],"['annafreydenzon-titanic-machine-learning-from-disaster', 'nithishthirmul-titanic-data-test1', 'ezhilvelme-titanic-neural-network-c-4-2', 'liudj2008-fork-of-titanic', 'liudj2008-titanic', 'jacekpardyak-mytitanicscript', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'antonov-logistic-regression-for-titanic']","[0.5025714535073201, 0.4914360717345071, 0.471708446905735, 0.46533235616821783, 0.46392335637382054, 0.4606588131184794, 0.45865733527266533, 0.45865733527266533, 0.444338742987808, 0.382965415757331]","{'character(0)': ['fill_age_by_title'], 'package:base': ['as.character', 'as.factor', 'as.numeric', 'c', 'data.frame', 'gsub', 'is.na', 'library', 'mean', 'round', 'sub', 'summary'], 'package:MASS': ['stepAIC'], 'package:stats': ['lm', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""fill_age_by_title""], ""package:base"": [""as.character"", ""as.factor"", ""as.numeric"", ""c"", ""data.frame"", ""gsub"", ""is.na"", ""library"", ""mean"", ""round"", ""sub"", ""summary""], ""package:MASS"": [""stepAIC""], ""package:stats"": [""lm"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 fillagebytitle packagebase ascharacter asfactor asnumeric c dataframe gsub isna library mean round sub summary packageMASS stepAIC packagestats lm predict packageutils readcsv writecsv,"library(""MASS"")
library(""ggplot2"")
library(""ggthemes"")
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
train$Pclass <- as.factor(train$Pclass)
train$Name <- as.character(train$Name)
train$SibSp <- as.factor(train$SibSp)
train$Parch <- as.factor(train$Parch)
train$Cabin <- as.character(train$Cabin)
test$Pclass <- as.factor(test$Pclass)
test$Name <- as.character(test$Name)
test$SibSp <- as.factor(test$SibSp)
test$Parch <- as.factor(test$Parch)
test$Cabin <- as.character(test$Cabin)
train$FamilyName <- sub(""^(.*),.*"", ""\\1"", train$Name)
test$FamilyName <- sub(""^(.*),.*"", ""\\1"", test$Name)
train$Title <- as.character(gsub(""(.*, )|(\\..*)"", """", train$Name))
test$Title <- as.character(gsub(""(.*, )|(\\..*)"", """", test$Name))
rare_titles <- c(""Capt"", ""Col"", ""Don"", ""Dona"", ""Dr"", ""Jonkheer"", ""Lady"", ""Major"", ""Rev"", ""the Countess"", ""Sir"")
train$Title[train$Title == ""Mlle""] <- ""Miss""
train$Title[train$Title == ""Ms""] <- ""Miss""
train$Title[train$Title == ""Mme""] <- ""Miss""
train$Title[train$Title %in% rare_titles] <- ""Rare Title""
train$Title <- as.factor(train$Title)
test$Title[test$Title == ""Mlle""] <- ""Miss""
test$Title[test$Title == ""Ms""] <- ""Miss""
test$Title[test$Title == ""Mme""] <- ""Miss""
test$Title[test$Title %in% rare_titles] <- ""Rare Title""
test$Title <- as.factor(test$Title)
fill_age_by_title <- function(title, dataset) {
    mean(dataset$Age[dataset$Title == title & !is.na(dataset$Age)])
}
train$Age[is.na(train$Age) & train$Title == ""Master""] <- round(fill_age_by_title(""Master"", train))
train$Age[is.na(train$Age) & train$Title == ""Miss""] <- round(fill_age_by_title(""Miss"", train))
train$Age[is.na(train$Age) & train$Title == ""Mr""] <- round(fill_age_by_title(""Mr"", train))
train$Age[is.na(train$Age) & train$Title == ""Mrs""] <- round(fill_age_by_title(""Mrs"", train))
train$Age[is.na(train$Age) & train$Title == ""Rare Title""] <- round(fill_age_by_title(""Rare Title"", train))
test$Age[is.na(test$Age) & test$Title == ""Master""] <- round(fill_age_by_title(""Master"", test))
test$Age[is.na(test$Age) & test$Title == ""Miss""] <- round(fill_age_by_title(""Miss"", test))
test$Age[is.na(test$Age) & test$Title == ""Mr""] <- round(fill_age_by_title(""Mr"", test))
test$Age[is.na(test$Age) & test$Title == ""Mrs""] <- round(fill_age_by_title(""Mrs"", test))
test$Age[is.na(test$Age) & test$Title == ""Rare Title""] <- round(fill_age_by_title(""Rare Title"", test))
train$FamilySize <- as.factor(as.numeric(as.character(train$Parch)) + as.numeric(as.character(train$SibSp)))
test$FamilySize <- as.factor(as.numeric(as.character(test$Parch)) + as.numeric(as.character(test$SibSp)))
train$Age <- as.factor(train$Age)
test$Age <- as.factor(test$Age)
train$Fare[is.na(train$Fare)] <- 0
test$Fare[is.na(test$Fare)] <- 0
fit <- lm(Survived ~ Sex + Pclass + Age + FamilySize + Fare + Embarked + Title, data = train)
step <- stepAIC(fit, direction = ""both"")
step$anova
model <- lm(Survived ~ Sex + Pclass + FamilySize + Fare + Title, data = train)
summary(model)
test$Survived <- round(predict(model, test))
test$Survived[test$Survived < 0] <- 0
test$Survived[test$Survived > 1] <- 1
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = ""gender_submission.csv"", row.names = F)",0,0,0,0,0,0,1,0,0,0,0,0,0,0
3,abhayjindal-exploring-survival-on-the-titanic,0.7440000000000001,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",25.7182919979095,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic', 'datascikrid-exploring-survival-on-the-titanic', 'anishmayaramka-the-titanic-datset', 'aturner-exploring-survival-on-the-titanic']","[0.9991891736418617, 0.9991891736418617, 0.9991891736418617, 0.9991891736418617, 0.9991891736418617, 0.9991891736418617, 0.9991891736418617, 0.9991891736418617, 0.9991891736418617, 0.9991891736418617]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""abhay_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
4,jonmak-identify-travel-groups-in-titanic,0.7340000000000001,"['user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.factor', 'as.integer', 'as.logical', 'as.numeric', 'c', 'data.frame', 'grepl', 'gsub', 'ifelse', 'is.na', 'library', 'list', 'match', 'max', 'mean', 'merge', 'sapply', 'strsplit', 'substr', 'sum', 'system', 'train', 'trainControl', 'fread', 'aes', 'facet_grid', 'geom_bar', 'geom_density', 'geom_jitter', 'geom_line', 'geom_violin', 'ggplot', 'scale_x_continuous', 'poly', 'predict', 'str_extract_all', 'write.csv']","['ggplot2', 'readr', 'data.table', 'stringr', 'caret', 'base']",16.105898141861,"['list', 'mean', 'as.logical', 'merge', 'geom_jitter', 'as.character', 'is.na', 'scale_x_continuous', 'poly', 'as.factor', 'sapply', 'gsub', 'match', 'as.integer', 'max', 'geom_bar', 'train', 'c', 'fread', 'aes', 'str_extract_all', 'as.numeric', 'ifelse', 'sum', 'geom_violin', 'predict', 'write.csv', 'facet_grid', 'geom_line', 'data.frame', 'grepl', 'strsplit', 'ggplot', 'geom_density', 'substr', 'user defined', 'library', 'trainControl', 'system']",[],"['somtom-titanic-random-icebergs', 'rtreit-kaggle-titanic-tutorial', 'peggy88-titanic-data-eda-by-peggy', 'emj777-decision-tree-titanic-r', 'dsvijayaraghavan-vra-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'waithira-titanic-analysis-with-r']","[0.6239748114808571, 0.2672313419911298, 0.1705844796712395, 0.15048909084006873, 0.1103361700644944, 0.10630386943882347, 0.10630386943882347, 0.10550110723200941, 0.10550110723200941, 0.10353025452078385]","{'character(0)': ['`:=`'], 'package:base': ['as.character', 'as.factor', 'as.integer', 'as.logical', 'as.numeric', 'c', 'data.frame', 'grepl', 'gsub', 'ifelse', 'is.na', 'library', 'list', 'match', 'max', 'mean', 'merge', 'sapply', 'strsplit', 'substr', 'sum', 'system'], 'package:caret': ['train', 'trainControl'], 'package:data.table': ['fread'], 'package:ggplot2': ['aes', 'facet_grid', 'geom_bar', 'geom_density', 'geom_jitter', 'geom_line', 'geom_violin', 'ggplot', 'scale_x_continuous'], 'package:stats': ['poly', 'predict'], 'package:stringr': ['str_extract_all'], 'package:utils': ['write.csv']}","{""character(0)"": [""`:=`""], ""package:base"": [""as.character"", ""as.factor"", ""as.integer"", ""as.logical"", ""as.numeric"", ""c"", ""data.frame"", ""grepl"", ""gsub"", ""ifelse"", ""is.na"", ""library"", ""list"", ""match"", ""max"", ""mean"", ""merge"", ""sapply"", ""strsplit"", ""substr"", ""sum"", ""system""], ""package:caret"": [""train"", ""trainControl""], ""package:data.table"": [""fread""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""geom_bar"", ""geom_density"", ""geom_jitter"", ""geom_line"", ""geom_violin"", ""ggplot"", ""scale_x_continuous""], ""package:stats"": [""poly"", ""predict""], ""package:stringr"": [""str_extract_all""], ""package:utils"": [""write.csv""]}",character0  packagebase ascharacter asfactor asinteger aslogical asnumeric c dataframe grepl gsub ifelse isna library list match max mean merge sapply strsplit substr sum system packagecaret train trainControl packagedatatable fread packageggplot2 aes facetgrid geombar geomdensity geomjitter geomline geomviolin ggplot scalexcontinuous packagestats poly predict packagestringr strextractall packageutils writecsv,"system(""ls ../input"")
library(ggplot2)
library(readr)
library(data.table)
library(stringr)
library(caret)
dt1 <- fread(""../input/train.csv"")
dt2 <- fread(""../input/test.csv"")
dt <- merge(dt1, dt2, all = T)
dt$Survived <- as.factor(dt$Survived)
name_split <- strsplit(dt$Name, "", "", fixed = TRUE)
first_name_split <- strsplit(sapply(name_split, ""[["", 2), "". "", fixed = T)
dt$surname <- sapply(name_split, ""[["", 1)
dt$surname <- sapply(strsplit(dt$surname, ""-"", fixed = T), ""[["", 1)
dt$title <- sapply(first_name_split, ""[["", 1)
dt_firstname <- sapply(first_name_split, ""[["", 2)
re1 <- ""\\(([^()]+)\\)""
dt <- dt[grepl(""("", Name, fixed = T), `:=`(""b_name"", gsub(re1, ""\\1"", str_extract_all(Name, re1)))]
dt <- dt[!is.na(b_name), `:=`(""b_surname"", sapply(strsplit(b_name, "" ""), tail, 1))]
re2 = ""\\\""([^\""\""]+)\\\""""
dt <- dt[grepl(""\"""", Name, fixed = T), `:=`(""nickname"", gsub(re2, ""\\1"", str_extract_all(Name, re2)))]
dt <- dt[!is.na(Cabin), `:=`(""CabinBLK"", substr(Cabin, start = 1, stop = 1))]
dt[CabinBLK == """", ""CabinBLK""] <- ""Unknown""
dt$CabinBLK <- as.factor(dt$CabinBLK)
dt$fam_size <- dt$SibSp + dt$Parch + 1
dt$FamGrp <- as.integer("""")
dt$FamGrpSize <- as.integer(1)
dt[, ""Alone""] <- ifelse(dt$fam_size > 1, ""Alone"", ""Group"")
mask1 <- dt$fam_size > 1
dt <- dt[mask1, `:=`(""Grp1"", .GRP), by = c(""Embarked"", ""Pclass"", ""surname"")]
dt <- dt[mask1, `:=`(""Grp1Size"", .N), by = ""Grp1""]
dt <- dt[mask1, `:=`(""FamGrp"", Grp1)]
dt <- dt[mask1, `:=`(""FamGrpSize"", .N), by = ""FamGrp""]
mask2 <- as.logical(mask1 * (dt$FamGrpSize < dt$fam_size))
dt <- dt[mask2, `:=`(""Grp2"", .GRP), by = ""Ticket""]
dt <- dt[mask2, `:=`(""Grp2Size"", .N), by = ""Grp2""]
dt$Grp2 <- dt$Grp2 + as.integer(1000)
dt <- dt[mask2 & Grp2Size >= fam_size, `:=`(""FamGrp"", Grp2)]
dt <- dt[, `:=`(""FamGrpSize"", .N), by = ""FamGrp""]
mask3 <- as.logical(mask1 * (dt$FamGrpSize < dt$fam_size))
dt <- dt[mask3 & Cabin != """", `:=`(""Grp3"", .GRP), by = ""Cabin""]
dt$Grp3 <- dt$Grp3 + as.integer(2000)
dt <- dt[mask3 & Cabin != """", `:=`(""Grp3Size"", .N), by = ""Grp3""]
dt <- dt[mask3 & Cabin != """" & Grp3Size >= fam_size, `:=`(""FamGrp"", Grp3)]
dt <- dt[, `:=`(""FamGrpSize"", .N), by = ""FamGrp""]
mask4 <- as.logical(mask1 * (dt$FamGrpSize < dt$fam_size))
cousins <- dt[mask4 & (surname %in% dt$b_surname) & !surname %in% c(""Richards"")]
match <- dt[!(PassengerId %in% cousins$PassengerId) & mask1, list(FamGrp = FamGrp[1]), by = ""b_surname""]
cousins <- merge(cousins, match, by.x = ""surname"", by.y = ""b_surname"", all.x = T)
dt <- merge(dt, cousins[, list(PassengerId = PassengerId, Grp4 = FamGrp.y)], by = ""PassengerId"", all.x = T)
dt <- dt[!is.na(Grp4), `:=`(""FamGrp"", Grp4)]
dt <- dt[, `:=`(""FamGrpSize"", .N), by = ""FamGrp""]
mask5 <- as.logical(mask1 * (dt$FamGrpSize < dt$fam_size))
cousins2 <- dt[mask5]
match <- dt[!(PassengerId %in% cousins2$PassengerId) & mask1, list(FamGrp = FamGrp[1]), by = ""surname""]
cousins2 <- merge(cousins2, match, by = ""surname"", all.x = T)
dt <- merge(dt, cousins2[, list(PassengerId = PassengerId, Grp5 = FamGrp.y)], by = ""PassengerId"", all.x = T)
dt <- dt[!is.na(Grp5), `:=`(""FamGrp"", Grp5)]
dt <- dt[, `:=`(""FamGrpSize"", .N), by = ""FamGrp""]
mask6 <- as.logical(mask1 * (dt$FamGrpSize < dt$fam_size))
cousins3 <- dt[mask6]
cousins3$TicHead <- substr(cousins3$Ticket, start = 1, stop = 3)
cousins3 <- cousins3[, `:=`(""Grp6"", .GRP), by = TicHead]
cousins3$Grp6 <- cousins3$Grp6 + as.integer(3000)
dt <- merge(dt, cousins3[, c(""PassengerId"", ""Grp6"")], by = ""PassengerId"", all.x = T)
dt <- dt[!is.na(Grp6), `:=`(""FamGrp"", Grp6)]
dt <- dt[, `:=`(""FamGrpSize"", .N), by = ""FamGrp""]
impute <- dt[!is.na(Age), list(`mean age` = mean(Age)), by = c(""title"")]
impute$`mean age` <- as.numeric(impute$`mean age`)
dt[is.na(Age), ""Age""] <- sapply(dt[is.na(Age)]$title, function(x) impute$`mean age`[match(x, impute$title)])
dt[, ""LadyCount""] <- sapply(dt$FamGrp, function(x) {
    dt[FamGrp == x, sum(Age > 12, Sex == ""female"")]
})
dt[, ""KidsCount""] <- sapply(dt$FamGrp, function(x) {
    dt[FamGrp == x, sum(Age <= 12)]
})
dt[, ""GrownManCount""] <- sapply(dt$FamGrp, function(x) {
    dt[FamGrp == x, sum(Sex == ""male"" & Age >= 18)]
})
dt[, ""ElderlyCount""] <- sapply(dt$FamGrp, function(x) {
    dt[FamGrp == x, sum(Age >= 55)]
})
Fam <- dt[mask1 & !is.na(dt$Survived)]
Fam$FamGrpSize <- as.integer(Fam$FamGrpSize)
g1 <- ggplot(Fam) + geom_density(aes(x = FamGrpSize, fill = Survived), adjust = 2, alpha = 0.5) + scale_x_continuous(breaks = c(1:max(Fam$FamGrpSize)))
g2 <- ggplot(Fam, aes(x = Survived, y = Age, fill = Survived)) + geom_violin() + geom_jitter(aes(color = Sex))
dt_g3 <- dt[!is.na(Survived), list(Count = .N), by = c(""Alone"", ""Sex"", ""Survived"")]
g3 <- ggplot(dt_g3, aes(x = Alone, y = Count, fill = Survived)) + geom_bar(position = ""fill"", stat = ""identity"") + facet_grid(Sex ~ .)
g4 <- ggplot(dt[!is.na(Age) & !is.na(Survived)], aes(x = Age, fill = Survived)) + geom_density(alpha = 0.5) + facet_grid(Sex ~ Alone)
Kids <- dt[FamGrpSize > 1 & !is.na(Survived), list(SurvivalRate = mean(as.numeric(as.character(Survived)))), by = c(""KidsCount"")]
g5 <- ggplot(Kids, aes(x = KidsCount, y = SurvivalRate)) + geom_line()
ManvKidsMrs <- dt[FamGrpSize > 1 & !is.na(Survived), list(SurvivalRate = mean(as.numeric(as.character(Survived)))), by = c(""GrownManCount"")]
g6 <- ggplot(ManvKidsMrs, aes(x = GrownManCount, y = SurvivalRate)) + geom_line()
Lady <- dt[FamGrpSize > 1 & !is.na(Survived), list(SurvivalRate = mean(as.numeric(as.character(Survived)))), by = c(""LadyCount"")]
g7 <- ggplot(Lady, aes(x = LadyCount, y = SurvivalRate)) + geom_line()
Elderly <- dt[FamGrpSize > 1 & !is.na(Survived), list(SurvivalRate = mean(as.numeric(as.character(Survived)))), by = c(""ElderlyCount"")]
g8 <- ggplot(Elderly, aes(x = ElderlyCount, y = SurvivalRate)) + geom_line()
train_set <- dt[PassengerId %in% dt1$PassengerId]
test_set <- dt[PassengerId %in% dt2$PassengerId]
train_control <- trainControl(method = ""cv"", number = 5)
RF <- train(Survived ~ poly(Age, 2) + Sex + Pclass + poly(FamGrpSize, 2) + poly(LadyCount, 3) + poly(KidsCount, 2) + poly(GrownManCount, 2) + poly(ElderlyCount, 2), data = train_set, trControl = train_control, method = ""rf"")
test_fit <- predict(RF, newdata = test_set)
submission = data.frame(PassengerId = test_set$PassengerId, Survived = test_fit)
write.csv(submission, ""submission.csv"", row.names = F)",0,0,1,0,0,0,0,1,0,0,0,0,0,0
5,jenioai-titanic-data-analysis-rf-prediction-0-81818,0.763,"['user defined', 'user defined', 'user defined', 'apply', 'as.integer', 'as.numeric', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'list', 'mean', 'paste0', 'print', 'rep', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'suppressMessages', 'table', 'tapply', 'legend', 'mosaicplot', 'plot', 'hcl', 'importance', 'randomForest', 'varImpPlot', 'aggregate', 'cor', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['randomForest', 'base']",3.5781230926513703,"['list', 'mean', 'median', 'hcl', 'cor', 'is.na', 'print', 'summary', 'sapply', 'round', 'rep', 'mosaicplot', 'importance', 'varImpPlot', 'str', 'set.seed', 'gsub', 'factor', 'as.integer', 'colnames', 'aggregate', 'apply', 'read.csv', 'paste0', 'suppressMessages', 'table', 'randomForest', 'row.names', 'c', 'as.numeric', 'sum', 'plot', 'legend', 'predict', 'reorder', 'write.csv', 'data.frame', 'strsplit', 'tapply', 'user defined', 'library']",[],"['delasupreme-titanic-data-analysis-rf-prediction-0-81818', 'pranaytiwari-titanic-data-analysis-rf-prediction-0-81818', 'imendoza-titanic-rf-prediction', 'vincentlugat-titanic-data-analysis-rf-prediction-0-81818', 'ashutoshds-titanic-rf-prediction-0-81818', 'kapillehar-titanic-rf-prediction-0-81818', 'vikasht34-titanic-rf-prediction-0-81818', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n']","[0.9801339202416555, 0.9801339202416555, 0.9801339202416555, 0.9800726515992314, 0.8381112118012799, 0.8185926607440859, 0.8185926607440859, 0.6764882441506178, 0.6759936545395816, 0.6759936545395816]","{'character(0)': ['aes', 'bind_rows', 'coord_flip', 'corrplot', 'dense_rank', 'desc', 'dollar_format', 'element_blank', 'facet_grid', 'facet_wrap', 'geom_bar', 'geom_density', 'geom_histogram', 'geom_jitter', 'geom_text', 'geom_vline', 'ggplot', 'ggtitle', 'labs', 'mutate', 'revalue', 'scale_fill_discrete', 'scale_x_continuous', 'theme', 'theme_few', 'xlab', 'ylab'], 'package:base': ['apply', 'as.integer', 'as.numeric', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'list', 'mean', 'paste0', 'print', 'rep', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'suppressMessages', 'table', 'tapply'], 'package:graphics': ['legend', 'mosaicplot', 'plot'], 'package:grDevices': ['hcl'], 'package:randomForest': ['importance', 'randomForest', 'varImpPlot'], 'package:stats': ['aggregate', 'cor', 'median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""character(0)"": [""aes"", ""bind_rows"", ""coord_flip"", ""corrplot"", ""dense_rank"", ""desc"", ""dollar_format"", ""element_blank"", ""facet_grid"", ""facet_wrap"", ""geom_bar"", ""geom_density"", ""geom_histogram"", ""geom_jitter"", ""geom_text"", ""geom_vline"", ""ggplot"", ""ggtitle"", ""labs"", ""mutate"", ""revalue"", ""scale_fill_discrete"", ""scale_x_continuous"", ""theme"", ""theme_few"", ""xlab"", ""ylab""], ""package:base"": [""apply"", ""as.integer"", ""as.numeric"", ""c"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""library"", ""list"", ""mean"", ""paste0"", ""print"", ""rep"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""summary"", ""suppressMessages"", ""table"", ""tapply""], ""package:graphics"": [""legend"", ""mosaicplot"", ""plot""], ""package:grDevices"": [""hcl""], ""package:randomForest"": [""importance"", ""randomForest"", ""varImpPlot""], ""package:stats"": [""aggregate"", ""cor"", ""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",character0 aes bindrows coordflip corrplot denserank desc dollarformat elementblank facetgrid facetwrap geombar geomdensity geomhistogram geomjitter geomtext geomvline ggplot ggtitle labs mutate revalue scalefilldiscrete scalexcontinuous theme themefew xlab ylab packagebase apply asinteger asnumeric c colnames dataframe factor gsub isna library list mean paste0 print rep round rownames sapply setseed strsplit sum summary suppressMessages table tapply packagegraphics legend mosaicplot plot packagegrDevices hcl packagerandomForest importance randomForest varImpPlot packagestats aggregate cor median predict reorder packageutils readcsv str writecsv,"suppressMessages(library(""ggplot2""))
suppressMessages(library(""ggthemes""))
suppressMessages(library(""scales""))
suppressMessages(library(""dplyr""))
suppressMessages(library(""randomForest""))
suppressMessages(library(""corrplot""))
suppressMessages(library(""plyr""))
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
summary(full)
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram(bins = 30) + theme_few() + xlab(""Age"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Age vs Survived"")
ggplot(full[1:891, ], aes(Sex, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + theme_few() + xlab(""Sex"") + ylab(""Count"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Sex vs Survived"")
tapply(full[1:891, ]$Survived, full[1:891, ]$Sex, mean)
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram(bins = 30) + theme_few() + xlab(""Age"") + ylab(""Count"") + facet_grid(. ~ Sex) + scale_fill_discrete(name = ""Survived"") + theme_few() + ggtitle(""Age vs Sex vs Survived"")
tapply(full[1:891, ]$Survived, full[1:891, ]$Pclass, mean)
ggplot(full[1:891, ], aes(Pclass, fill = factor(Survived))) + geom_bar(stat = ""count"") + theme_few() + xlab(""Pclass"") + facet_grid(. ~ Sex) + ylab(""Count"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Pclass vs Sex vs Survived"")
ggplot(full[1:891, ], aes(x = Age, y = Sex)) + geom_jitter(aes(colour = factor(Survived))) + theme_few() + theme(legend.title = element_blank()) + facet_wrap(~Pclass) + labs(x = ""Age"", y = ""Sex"", title = ""Pclass vs Sex vs Age vs Survived"") + scale_fill_discrete(name = ""Survived"") + scale_x_continuous(name = ""Age"", limits = c(0, 81))
ggplot(full[1:891, ], aes(x = Fare, y = Pclass)) + geom_jitter(aes(colour = factor(Survived))) + theme_few() + theme(legend.title = element_blank()) + labs(x = ""Age"", y = ""Pclass"", title = ""Fare vs Pclass"") + scale_fill_discrete(name = ""Survived"") + scale_x_continuous(name = ""Fare"", limits = c(0, 270), breaks = c(0, 40, 80, 120, 160, 200, 240, 280))
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
officer <- c(""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"")
royalty <- c(""Dona"", ""Lady"", ""the Countess"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% royalty] <- ""Royalty""
full$Title[full$Title %in% officer] <- ""Officer""
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
ggplot(full[1:891, ], aes(Title, fill = factor(Survived))) + geom_bar(stat = ""count"") + xlab(""Title"") + ylab(""Count"") + scale_fill_discrete(name = "" Survived"") + ggtitle(""Title vs Survived"") + theme_few()
tapply(full[1:891, ]$Survived, full[1:891, ]$Title, mean)
full$Fsize <- full$SibSp + full$Parch + 1
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + xlab(""Family Size"") + ylab(""Count"") + theme_few() + scale_fill_discrete(name = ""Survived"") + ggtitle(""Family Size vs Survived"")
tapply(full[1:891, ]$Survived, full[1:891, ]$Fsize, mean)
full$FsizeD[full$Fsize == 1] <- ""Alone""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""Small""
full$FsizeD[full$Fsize > 4] <- ""Big""
tapply(full[1:891, ]$Survived, full[1:891, ]$FsizeD, mean)
mosaicplot(table(full$FsizeD, full$Survived), main = ""FsizeD vs Survived"", ylab = ""Survived"", xlab = ""FsizeD"", col = hcl(c(50, 120)), )
tapply(full$Embarked, full$Pclass, median, na.rm = TRUE)
full[c(62, 830), ""Embarked""]
full$Embarked[c(62, 830)] <- ""S""
ggplot(full[1:891, ], aes(Pclass, fill = factor(Survived))) + geom_bar(stat = ""count"") + theme_few() + xlab(""Pclass"") + ylab(""Count"") + facet_wrap(~Embarked) + scale_fill_discrete(name = ""Survived"") + ggtitle(""Embarked vs Pclass vs Survived"")
full[1044, ]
ggplot(full[full$Pclass == ""3"", ], aes(x = Fare)) + geom_density(fill = ""lightgrey"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""darkred"", linetype = ""dashed"", lwd = 1) + xlab(""Fare"") + ggtitle(""Pclass = 3"") + ylab(""Density"") + scale_x_continuous(labels = dollar_format()) + theme_few()
tapply(full$Fare, full$Pclass, median, na.rm = TRUE)
full$Fare[1044] <- median(full[full$Pclass == ""3"", ]$Fare, na.rm = TRUE)
tapply(full$Age, full$Pclass, median, na.rm = TRUE)
tapply(full$Age, full$Title, median, na.rm = TRUE)
title.age <- aggregate(full$Age, by = list(full$Title), FUN = function(x) median(x, na.rm = T))
full[is.na(full$Age), ""Age""] <- apply(full[is.na(full$Age), ], 1, function(x) title.age[title.age[, 1] == x[""Title""], 2])
sum(is.na(full$Age))
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
ggplot(full[1:891, ][full[1:891, ]$Child == ""Child"", ], aes(Sex, fill = factor(Survived))) + geom_bar(stat = ""count"") + xlab(""Sex"") + ylab(""Count"") + facet_wrap(~Pclass) + scale_fill_discrete(name = ""Survived"") + ggtitle(""Child vs Sex vs Pclass vs Survived"") + theme_few()
tapply(full[1:891, ]$Survived, full[1:891, ]$Child, mean)
table(full$Child, full$Survived)
corr_data <- full[1:891, ]
corr_data$Embarked <- revalue(corr_data$Embarked, c(S = 1, Q = 2, C = 3))
corr_data$Sex <- revalue(corr_data$Sex, c(male = 1, female = 2))
corr_data$Title <- revalue(corr_data$Title, c(Mr = 1, Master = 2, Officer = 3, Mrs = 4, Royalty = 5, Miss = 6))
corr_data$FsizeD <- revalue(corr_data$FsizeD, c(Small = 1, Alone = 2, Big = 3))
corr_data$Child <- revalue(corr_data$Child, c(Adult = 1, Child = 2))
corr_data$FsizeD <- as.numeric(corr_data$FsizeD)
corr_data$Child <- as.numeric(corr_data$Child)
corr_data$Sex <- as.numeric(corr_data$Sex)
corr_data$Embarked <- as.numeric(corr_data$Embarked)
corr_data$Title <- as.numeric(corr_data$Title)
corr_data$Pclass <- as.numeric(corr_data$Pclass)
corr_data$Survived <- as.numeric(corr_data$Survived)
corr_data <- corr_data[, c(""Survived"", ""Pclass"", ""Sex"", ""FsizeD"", ""Fare"", ""Embarked"", ""Title"", ""Child"")]
str(corr_data)
mcorr_data <- cor(corr_data)
corrplot(mcorr_data, method = ""circle"")
full$Child <- factor(full$Child)
full$Sex <- factor(full$Sex)
full$Embarked <- factor(full$Embarked)
full$Title <- factor(full$Title)
full$Pclass <- factor(full$Pclass)
full$FsizeD <- factor(full$FsizeD)
full1 <- full[, -9]
full_mod <- full1[, -10]
train <- full_mod[1:891, ]
test <- full_mod[892:1309, ]
library(""randomForest"")
set.seed(123)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Fare + Embarked + Title + FsizeD + Child, data = train)
rf.fitted = predict(rf_model)
ans_rf = rep(NA, 891)
for (i in 1:891) {
    ans_rf[i] = as.integer(rf.fitted[[i]]) - 1
}
table(ans_rf)
print(rf_model)
mean(ans_rf == train$Survived)
varImpPlot(rf_model, main = ""RF_MODEL"")
prediction <- predict(rf_model, test)
solution <- data.frame(Survived = prediction, PassengerID = test$PassengerId)
write.csv(solution, file = ""rf_model_sol.csv"", row.names = F)
plot(rf_model, ylim = c(0, 0.36), main = ""RF_MODEL"")
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()",1,0,0,0,0,0,0,0,0,0,0,0,0,0
6,rayuga-exploring-survival-on-the-titanic,0.7440000000000001,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",24.554289102554307,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']","['dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic', 'datascikrid-exploring-survival-on-the-titanic', 'anishmayaramka-the-titanic-datset', 'aturner-exploring-survival-on-the-titanic', 'srikarnamburu-exploring-survival-on-the-titanic', 'metal32-exploring-survival-on-the-titanic', 'fertueros-exploring-survival-on-the-titanic', 'ambikanair-exploring-survival-on-the-titanic', 'kogamstk-exploring-survival-on-the-titanic', 'ryukojin-exploring-survival-on-the-titanic', 'grapple-exploring-survival-on-the-titanic', 'datadatum-exploring-survival-on-the-titanic', 'chdhatri-exploring-survival-on-the-titanic', 'juturu97-exploring-survival-on-the-titanic', 'vibhasg-exploring-survival-on-the-titanic', 'odujokod-exploring-survival-on-the-titanic', 'rivinwita-exploring-survival-on-the-titanic-test', 'pengelinliu-exploring-survival-on-the-titanic-peng', 'dylanmj-exploring-survival-on-the-titanic', 'alexandrakp-exploring-survival-on-the-titanic', 'petrodatatoenergy-exploring-survival-on-the-titanic', 'abhinavralhan-exploring-survival-on-the-titanic', 'felixhalim-exploring-survival-on-the-titanic', 'phoanghuong86-exploring-survival-on-the-titanic', 'mchatham-exploring-survival-on-the-titanic01', 'shridhar1991-exploring-survival-on-the-titanic', 'leedongkyu-exploring-survival-on-the-titanic', 'krietallo64-exploring-survival-on-the-titanic', 'dataninja2014-exploring-survival-on-the-titanic', 'dasbeste-exploring-survival-on-the-titanic', 'daiearth22-exploring-survival-on-the-titanic', 'virgodata-exploring-survival-on-the-titanic', 'prachimalusare-exploring-survival-on-the-titanic', 'rmenendezm-exploring-survival-on-the-titanic', 'sidhere-exploring-survival-on-the-titanic', 'chemalytics-exploring-survival-on-the-titanic', 'z888888861-exploring-survival-on-the-titanic', 'chauhanheta-exploring-survival-on-the-titanic', 'trvrmgn-exploring-survival-on-the-titanic', 'anishmayaramka-the-titanic-problem', 'hemantkhurana-exploring-survival-on-the-titanic', 'giannismo-exploring-survival-on-the-titanic', 'mrisdal-exploring-survival-on-the-titanic', 'mtknowlt-exploring-survival-on-the-titanic', 'jenioai-exploring-survival-on-the-titanic', 'gauravsatav-exploring-survival-on-the-titanic', 'ludejun-exploring-survival-on-the-titanic', 'yizhouwang-exploring-survival-on-the-titanic', 'arfinul-exploring-survival-on-the-titanicc', 'fermm92-exploring-survival-on-the-titanic', 'swatishukla-exploring-survival-on-the-titanic', 'nefise-exploring-survival-on-the-titanic', 'curtaincall-exploring-survival-on-the-titanic', 'gpellis-exploring-survival-on-the-titanic-with-r-notebook', 'tabouzid-exploring-survival-on-the-titanic', 'archeryue-exploring-survival-on-the-titanic', 'bryan1201-exploring-survival-on-the-titanic-by-bryan1201', 'contactsheetal-exploring-survival-on-the-titanic', 'dheerajgoudborlla-exploring-survival-on-the-titanic', 'dineshary-exploring-survival-on-the-titanic', 'pantelisvlachas-exploring-survival-on-the-titanic', 'tessacooper-exploring-survival-on-the-titanic3', 'kanhuachary-exploring-survival-on-the-titanic', 'foreman3-exploring-survival-on-the-titanic', 'gravc91-exploring-survival-on-the-titanic-forked', 'tessacooper-exploring-survival-on-the-titanic', 'johngunawan-exploring-survival-on-the-titanic', 'pcminers-exploring-survival-on-the-titanic', 'jamcarwal-exploring-survival-on-the-titanic', 'shikharparashar-exploring-survival-on-the-titanic']","['mohankanni-exploring-survival-on-the-titanic', 'mira5b-exploring-survival-on-the-titanic', 'kyanyoga-exploring-survival-on-the-titanic', 'wendyzhang1020-exploring-survival-on-the-titanic', 'tjbaur-exploring-survival-on-the-titanic', 'oldflag-exploring-survival-on-the-titanic-inr-frommegan', 'bonesaw98616-exploring-survival-on-the-titanic', 'birudvora-test-titanic', 'mac4vity-exploring-survival-on-the-titanic', 'oreddo-exploring-survival-on-the-titanic']","[0.9999223102572843, 0.9999082947975734, 0.9998880450505403, 0.9998452817816588, 0.9998108156917839, 0.9997329727732573, 0.999713177028438, 0.9995511894352215, 0.9994806919838781, 0.9994696970152622]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
7,ezhilvelme-titanic-neural-network-c-4-2,0.7490000000000001,"['compute', 'as.factor', 'c', 'data.frame', 'gsub', 'ifelse', 'is.na', 'library', 'scale', 'table', 'bind_rows', 'neuralnet', 'median', 'model.matrix', 'read.csv', 'write.csv']","['dplyr', 'ggplot2', 'neuralnet', 'base']",5.067597981294,"['gsub', 'neuralnet', 'ifelse', 'write.csv', 'median', 'bind_rows', 'data.frame', 'model.matrix', 'scale', 'read.csv', 'table', 'as.factor', 'library', 'compute', 'c', 'is.na']",[],"['brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'annafreydenzon-titanic-machine-learning-from-disaster', 'nithishthirmul-titanic-data-test1', 'paulocressoni-titanic-using-stepwise-linear-regression', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'devanshugupta27-predicting-the-titanic-survival-rate', 'tobybot11-toby-s-titanic-analysis']","[0.5658840970531664, 0.5658840970531664, 0.5291120371290049, 0.5169102339163526, 0.471708446905735, 0.45691798033651265, 0.4550973409473072, 0.4420481365379918, 0.43830929572150873, 0.41636513113688767]","{'c(""package:neuralnet"", ""package:dplyr"")': ['compute'], 'package:base': ['as.factor', 'c', 'data.frame', 'gsub', 'ifelse', 'is.na', 'library', 'scale', 'table'], 'package:dplyr': ['bind_rows'], 'package:neuralnet': ['neuralnet'], 'package:stats': ['median', 'model.matrix'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:neuralnet"", ""package:dplyr"")"": [""compute""], ""package:base"": [""as.factor"", ""c"", ""data.frame"", ""gsub"", ""ifelse"", ""is.na"", ""library"", ""scale"", ""table""], ""package:dplyr"": [""bind_rows""], ""package:neuralnet"": [""neuralnet""], ""package:stats"": [""median"", ""model.matrix""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackageneuralnet packagedplyr compute packagebase asfactor c dataframe gsub ifelse isna library scale table packagedplyr bindrows packageneuralnet neuralnet packagestats median modelmatrix packageutils readcsv writecsv,"library(dplyr)
library(ggplot2)
library(neuralnet)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
train <- bind_rows(train, test)
train$Title <- gsub(""(.*, )|(\\..*)"", """", train$Name)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
train$Title[train$Title == ""Mlle""] <- ""Miss""
train$Title[train$Title == ""Ms""] <- ""Miss""
train$Title[train$Title == ""Mme""] <- ""Mrs""
train$Title[train$Title %in% rare_title] <- ""RareTitle""
train$family <- train$SibSp + train$Parch + 1
train$Fare[is.na(train$Fare)] <- median(train$Fare, na.rm = TRUE)
train$Age[is.na(train$Age)] <- median(train$Age, na.rm = TRUE)
train$Parch[is.na(train$Parch)] <- median(train$Parch, na.rm = TRUE)
train$SibSp[is.na(train$SibSp)] <- median(train$SibSp, na.rm = TRUE)
train$Embarked[is.na(train$Embarked)] <- ""S""
train$Title <- as.factor(train$Title)
train$family <- as.factor(train$family)
train$Sex <- as.factor(train$Sex)
train$Embarked <- as.factor(train$Embarked)
train$Parch <- as.factor(train$Parch)
train$SibSp <- as.factor(train$SibSp)
train$Survived <- as.factor(train$Survived)
scale_fare <- scale(train$Fare, center = TRUE, scale = TRUE)
train$Fare <- scale_fare[, 1]
test <- train[892:1309, ]
train <- train[1:891, ]
m_train <- model.matrix(~Survived + family + Sex + Age + Fare + Title, data = train)
nn <- neuralnet(Survived1 ~ family2 + family3 + family4 + family5 + family6 + family7 + family8 + family11 + Sexmale + Age + Fare + TitleMiss + TitleMr + TitleMrs + TitleRareTitle, data = m_train, hidden = c(4, 2), linear.output = FALSE, stepmax = 1e+06)
m_test <- model.matrix(~family + Sex + Age + Fare + Title, data = test)
write.csv(m_train, file = ""designmatrix_train.csv"", row.names = F)
write.csv(m_test, file = ""designmatrix_test.csv"", row.names = F)
prediction <- compute(nn, m_test[, 2:16])
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction$net.result)
solution$Survived <- ifelse(solution$Survived > 0.5, 1, 0)
write.csv(solution, file = ""solution.csv"", row.names = F)
table(solution$Survived)",0,1,0,0,0,0,0,0,0,0,0,0,0,0
8,artsyanka-kernel1-titanic-r,0.701,"['as.character', 'as.numeric', 'c', 'cbind', 'colnames', 'factor', 'ifelse', 'is.na', 'library', 'mean', 'scale', 'set.seed', 'summary', 'table', 'randomForest', 'ave', 'predict', 'read.csv', 'write.csv']","['caTools', 'randomForest', 'base']",0.717785120010376,"['mean', 'ave', 'as.character', 'is.na', 'summary', 'set.seed', 'factor', 'colnames', 'read.csv', 'table', 'randomForest', 'scale', 'c', 'as.numeric', 'ifelse', 'predict', 'write.csv', 'library', 'cbind']",[],"['thilakshasilva-predicting-titanic-survival-using-five-algorithms', 'piyushjhamb-predicting-titanic-survival', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'seajaye-titanic-logistic-regression-0-78947', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'nithishthirmul-titanic-data-test1', 'amodi8-titanic-exploring-survival-using-machine-learning', 'turntrout-titanic-data-exploration']","[0.09903837589370747, 0.09903837589370747, 0.0772255278501924, 0.07679490623664059, 0.06013225901746587, 0.058952530591017197, 0.058952530591017197, 0.058321529923124706, 0.057526151616153404, 0.05741587183607415]","{'package:base': ['as.character', 'as.numeric', 'c', 'cbind', 'colnames', 'factor', 'ifelse', 'is.na', 'library', 'mean', 'scale', 'set.seed', 'summary', 'table'], 'package:randomForest': ['randomForest'], 'package:stats': ['ave', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.character"", ""as.numeric"", ""c"", ""cbind"", ""colnames"", ""factor"", ""ifelse"", ""is.na"", ""library"", ""mean"", ""scale"", ""set.seed"", ""summary"", ""table""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""ave"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase ascharacter asnumeric c cbind colnames factor ifelse isna library mean scale setseed summary table packagerandomForest randomForest packagestats ave predict packageutils readcsv writecsv,"dataset_train = read.csv(""../input/train.csv"")
dataset_test = read.csv(""../input/test.csv"")
dataset_train$Survived = factor(dataset_train$Survived, levels = c(0, 1))
dataset_train$Sex = factor(dataset_train$Sex, levels = c(""female"", ""male""), labels = c(0, 1))
dataset_test$Sex = factor(dataset_test$Sex, levels = c(""female"", ""male""), labels = c(0, 1))
dataset_train$Age = ifelse(is.na(dataset_train$Age), ave(dataset_train$Age, FUN = function(x) mean(x, na.rm = TRUE)), dataset_train$Age)
dataset_test$Age = ifelse(is.na(dataset_test$Age), 29.69912, dataset_test$Age)
dataset_test$Fare = ifelse(is.na(dataset_test$Fare), ave(dataset_train$Fare, FUN = function(x) mean(x, na.rm = TRUE)), dataset_test$Fare)
dataset_train_short = dataset_train[, c(3, 6, 7, 8, 10, 5, 2)]
dataset_test_short = dataset_test[, c(2, 5, 6, 7, 9, 4)]
library(caTools)
set.seed(123)
summary(dataset_train_short)
dataset_train_short[c(-6, -7)] = scale(dataset_train_short[c(-6, -7)])
dataset_test_short[c(-6)] = scale(dataset_test_short[c(-6)])
library(randomForest)
set.seed(123)
classifier = randomForest(x = dataset_train_short[c(-6, -7)], y = dataset_train_short$Survived, ntree = 500)
y_pred = predict(classifier, newdata = dataset_test_short, type = ""class"")
y_pred_train = predict(classifier, newdata = dataset_train_short[-7], type = ""class"")
cm_train = table(dataset_train_short[, 7], y_pred_train)
train_accuracy = (cm_train[1, 1] + cm_train[2, 2])/(cm_train[1, 1] + cm_train[2, 2] + cm_train[1, 2] + cm_train[2, 1])
outputFile = cbind(dataset_test$PassengerId, as.numeric(as.character(y_pred)))
colnames(outputFile) <- c(""PassengerId"", ""Survived"")
write.csv(outputFile, ""titanicPrediction1.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
9,mkgiitr-titanic-survival-prediction,0.7440000000000001,"['filter', 'complete', 'apply', 'as.factor', 'c', 'class', 'data.frame', 'factor', 'getwd', 'gsub', 'is.na', 'lapply', 'length', 'library', 'list.files', 'max', 'mean', 'min', 'names', 'paste', 'return', 'sapply', 'set.seed', 'strsplit', 'sum', 't', 'table', 'unique', 'bind_rows', 'aes', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_hline', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'par', 'mice', 'randomForest', 'dollar_format', 'median', 'predict', 'sd', 'read.csv', 'str', 'write.csv']","['tidyverse', 'tidyverse', 'ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",24.201274156570395,"['labs', 'complete', 'mean', 'median', 'lapply', 'min', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'class', 't', 'as.factor', 'filter', 'sapply', 'mice', 'str', 'hist', 'geom_hline', 'set.seed', 'gsub', 'factor', 'unique', 'max', 'geom_bar', 'apply', 'length', 'sd', 'read.csv', 'table', 'par', 'return', 'getwd', 'randomForest', 'scale_y_continuous', 'c', 'aes', 'paste', 'geom_vline', 'sum', 'predict', 'write.csv', 'dollar_format', 'list.files', 'bind_rows', 'data.frame', 'strsplit', 'ggplot', 'geom_density', 'library']",[],"['hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'tetyama-trial-titanic', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'mira5b-exploring-survival-on-the-titanic', 'mohankanni-exploring-survival-on-the-titanic', 'kyanyoga-exploring-survival-on-the-titanic', 'oldflag-exploring-survival-on-the-titanic-inr-frommegan', 'wendyzhang1020-exploring-survival-on-the-titanic']","[0.896395615414318, 0.895913943078311, 0.895913943078311, 0.8956877645172554, 0.8939263173084974, 0.8891742066406005, 0.8888906367997377, 0.888860176411836, 0.8887223234067667, 0.8886273350351879]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'c(""package:mice"", ""package:tidyr"")': ['complete'], 'package:base': ['apply', 'as.factor', 'c', 'class', 'data.frame', 'factor', 'getwd', 'gsub', 'is.na', 'lapply', 'length', 'library', 'list.files', 'max', 'mean', 'min', 'names', 'paste', 'return', 'sapply', 'set.seed', 'strsplit', 'sum', 't', 'table', 'unique'], 'package:dplyr': ['bind_rows'], 'package:ggplot2': ['aes', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_hline', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'par'], 'package:mice': ['mice'], 'package:randomForest': ['randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'sd'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""c(""package:mice"", ""package:tidyr"")"": [""complete""], ""package:base"": [""apply"", ""as.factor"", ""c"", ""class"", ""data.frame"", ""factor"", ""getwd"", ""gsub"", ""is.na"", ""lapply"", ""length"", ""library"", ""list.files"", ""max"", ""mean"", ""min"", ""names"", ""paste"", ""return"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""t"", ""table"", ""unique""], ""package:dplyr"": [""bind_rows""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_hline"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""par""], ""package:mice"": [""mice""], ""package:randomForest"": [""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""sd""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter cpackagemice packagetidyr complete packagebase apply asfactor c class dataframe factor getwd gsub isna lapply length library listfiles max mean min names paste return sapply setseed strsplit sum t table unique packagedplyr bindrows packageggplot2 aes geombar geomboxplot geomdensity geomhline geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist par packagemice mice packagerandomForest randomForest packagescales dollarformat packagestats median predict sd packageutils readcsv str writecsv,"library(tidyverse)
list.files(path = ""../input"")
library(tidyverse)
library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
list.files(path = ""../input"")
getwd()
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
var_summ <- function(x) {
    if (class(x) == ""numeric"") {
        var_type = class(x)
        n <- length(x)
        n_miss <- sum(is.na(x))
        mean <- mean(x, na.rm = T)
        std <- sd(x, na.rm = T)
        min <- min(x, na.rm = T)
        max <- max(x, na.rm = T)
        return(c(var_type = var_type, n = n, n_miss = n_miss, mean = mean, std = std, min = min, max = max))
    }
    else {
        var_type = class(x)
        n = length(x)
        n_miss = sum(is.na(x))
        return(c(n = n, n_miss = n_miss))
    }
}
num_var <- sapply(full, is.numeric)
num_data <- t(data.frame(apply(full[num_var], 2, var_summ)))
num_data
cat_data <- data.frame(apply(full[!num_var], 2, var_summ))
cat_data
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Capt"", ""Col"", ""Don"", ""Dona"", ""Dr"", ""Jonkheer"", ""Lady"", ""Major"", ""Mlle"", ""Mme"", ""Ms"", ""Rev"", ""Sir"", ""the Countess"")
full$Title[full$Title %in% rare_title] <- ""rare_title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
full$Fsize <- full$Parch + full$SibSp + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""Singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""Small""
full$FsizeD[full$Fsize > 4] <- ""Large""
table(full$Survive, full$FsizeD)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]][1]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
table(full$Deck)
unique(full$Embarked)
table(full$Embarked)
full[c(62, 830), ]
embarked_value <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embarked_value, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[is.na(full$Fare), ]
full[1044, ]
ggplot(full[full$Pclass == 3 & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == 3 & full$Embarked == ""S"", ]$Fare, na.rm = T)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(101)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
rf_model
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
table(solution$Survived)
write.csv(solution, ""rf_model_solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
10,woliveira-hello-titanic,0.758,"['c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'list.files', 'mean', 'nrow', 'round', 'sample', 'set.seed', 'sum', 'summary', 'table', 'bind_rows', 'glimpse', 'group_by', 'n', 'select', 'summarise', 'aes', 'geom_bar', 'ggplot', 'randomForest', 'predict', 'read.csv', 'write.csv']","['ggplot2', 'dplyr', 'randomForest', 'ggplot2', 'readr', 'base']",1.4109179973602302,"['summarise', 'nrow', 'mean', 'glimpse', 'is.na', 'summary', 'round', 'n', 'set.seed', 'gsub', 'factor', 'geom_bar', 'read.csv', 'table', 'randomForest', 'group_by', 'c', 'aes', 'sample', 'sum', 'predict', 'write.csv', 'list.files', 'bind_rows', 'data.frame', 'ggplot', 'library', 'select']",[],"['rafaelmdourado-hello-titanic-programmers', 'lucasantevere-hello-titanic', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'msantos68-exploring-survival-on-the-titanic', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'tetyama-trial-titanic', 'venkatko-titanic-survival1', 'researchbigd-titanic-forkedfrommeganscript']","[0.9989470176977518, 0.9952313285284695, 0.7286662823139939, 0.7276851345379843, 0.7266547638243428, 0.7265839499546093, 0.7265839499546093, 0.7245731989078141, 0.724383997750028, 0.7234104239143385]","{'package:base': ['c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'list.files', 'mean', 'nrow', 'round', 'sample', 'set.seed', 'sum', 'summary', 'table'], 'package:dplyr': ['bind_rows', 'glimpse', 'group_by', 'n', 'select', 'summarise'], 'package:ggplot2': ['aes', 'geom_bar', 'ggplot'], 'package:randomForest': ['randomForest'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""c"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""library"", ""list.files"", ""mean"", ""nrow"", ""round"", ""sample"", ""set.seed"", ""sum"", ""summary"", ""table""], ""package:dplyr"": [""bind_rows"", ""glimpse"", ""group_by"", ""n"", ""select"", ""summarise""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""ggplot""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase c dataframe factor gsub isna library listfiles mean nrow round sample setseed sum summary table packagedplyr bindrows glimpse groupby n select summarise packageggplot2 aes geombar ggplot packagerandomForest randomForest packagestats predict packageutils readcsv writecsv,"library(ggplot2)
library(dplyr)
library(randomForest)
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
train$isTrain <- T
test$isTrain <- F
full <- bind_rows(train, test)
glimpse(full)
summary(full)
full$isFemale <- F
full$isFemale[full$Sex == ""female""] <- T
ggplot(full[full$isTrain, ], aes(x = isFemale, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"")
full$underTen <- F
full$underTen[full$Age > 0 & full$Age < 10] <- T
ggplot(full[full$isTrain, ], aes(x = underTen, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"")
full$Fare <- round(full$Fare)
full[full$isTrain, ] %>% group_by(Survived) %>% summarise(TotalFare = sum(Fare), count = n(), Mean = mean(Fare))
full$FamilySize <- full$SibSp + full$Parch + 1
ggplot(full[full$isTrain, ], aes(FamilySize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"")
full$FamilySizeFactor[full$FamilySize == 1] <- ""alone""
full$FamilySizeFactor[full$FamilySize < 5 & full$FamilySize > 1] <- ""small""
full$FamilySizeFactor[full$FamilySize > 4] <- ""large""
full$FamilySizeFactor <- factor(full$FamilySizeFactor)
ggplot(full[full$isTrain, ], aes(Pclass, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"")
full$Pclass <- factor(full$Pclass)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full <- full %>% select(PassengerId, Survived, Title, Pclass, FamilySizeFactor, Fare, underTen, isFemale, isTrain)
summary(full)
full$Fare[is.na(full$Fare)] <- 14
full$Title <- factor(full$Title)
summary(full)
set.seed(42)
totalrows <- nrow(full[full$isTrain, ])
trainrows <- sample(c(T, F), totalrows, replace = T, prob = c(0.8, 0.2))
trainningSet <- full[full$isTrain, ][trainrows, ]
testingSet <- full[full$isTrain, ][!trainrows, ]
model <- randomForest(factor(Survived) ~ Title + Pclass + FamilySizeFactor + Fare + underTen + isFemale, data = trainningSet, ntree = 50)
predicted <- predict(model, testingSet)
glimpse(predicted)
confusion_matrix <- table(testingSet$Survived, predicted)
confusion_matrix
TP <- confusion_matrix[2, 2]
TN <- confusion_matrix[1, 1]
acc <- (TP + TN)/(nrow(testingSet))
acc
final <- predict(model, full[!full$isTrain, ])
solution <- data.frame(PassengerId = full[!full$isTrain, ]$PassengerId, Survived = final)
write.csv(solution, file = ""out.csv"", row.names = F)
library(ggplot2)
library(readr)
list.files(""../input"")",1,0,0,0,0,0,0,0,0,0,0,0,0,0
13,balakesavan-titanicbalakesavan20160921,0.77,"['as.data.frame', 'as.numeric', 'c', 'colnames', 'ifelse', 'is.na', 'library', 'mean', 'summary', 'which', 'confusionMatrix', 'binomial', 'glm', 'predict', 'read.csv', 'write.csv']","['caret', 'base']",1.67651009559631,"['colnames', 'as.numeric', 'ifelse', 'confusionMatrix', 'mean', 'predict', 'write.csv', 'read.csv', 'binomial', 'summary', 'which', 'library', 'as.data.frame', 'c', 'is.na', 'glm']",[],"['prabhulingayya-titanic-prediction-using-logistic-regression', 'cnusapbo-titanic-r-code', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic', 'arjunmalhotra-titanic', 'jacekpardyak-mytitanicscript', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'antonov-logistic-regression-for-titanic', 'klashgari-titanic']","[0.09013728602561581, 0.09003094444888107, 0.0849984131645616, 0.0849984131645616, 0.08337052716949724, 0.07961544483004022, 0.07737663242452891, 0.07737663242452891, 0.07729242136418364, 0.07478963758672398]","{'package:base': ['as.data.frame', 'as.numeric', 'c', 'colnames', 'ifelse', 'is.na', 'library', 'mean', 'summary', 'which'], 'package:caret': ['confusionMatrix'], 'package:stats': ['binomial', 'glm', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.data.frame"", ""as.numeric"", ""c"", ""colnames"", ""ifelse"", ""is.na"", ""library"", ""mean"", ""summary"", ""which""], ""package:caret"": [""confusionMatrix""], ""package:stats"": [""binomial"", ""glm"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase asdataframe asnumeric c colnames ifelse isna library mean summary which packagecaret confusionMatrix packagestats binomial glm predict packageutils readcsv writecsv,"library(caret)
trainData1 <- (read.csv(""../input/train.csv""))
testData1 <- (read.csv(""../input/test.csv""))
summary(trainData1)
trainData1$Age[which(is.na(trainData1$Age))] <- mean(as.numeric(trainData1$Age[which(!is.na(trainData1$Age))]))
trainData1$Age <- as.numeric(trainData1$Age)
testData1$Age[which(is.na(testData1$Age))] <- mean(as.numeric(testData1$Age[which(!is.na(testData1$Age))]))
testData1$Age <- as.numeric(testData1$Age)
modelTitanic14 <- glm(Survived ~ (Pclass + Sex + Age + SibSp)^2, data = trainData1, family = binomial(""logit""))
summary(modelTitanic14)
predTitanic <- as.data.frame(predict(modelTitanic14, testData1, type = ""response""))
colnames(predTitanic) <- c(""Survived"")
predTitanic$Survived[predTitanic$Survived > 0.5] <- 1
predTitanic$Survived[predTitanic$Survived != 1] <- 0
predTitanic[""PassengerId""] <- testData1$PassengerId
write.csv(predTitanic, ""predTitanic.csv"", row.names = F, col.names = T)
predTitanicTrain <- as.data.frame(predict(modelTitanic14, trainData1, type = ""response""))
colnames(predTitanicTrain) <- c(""Survived"")
predTitanicTrain[""PassengerId""] <- trainData1$PassengerId
predTitanicTrain01 <- predTitanicTrain
predTitanicTrain01$Survived <- ifelse(predTitanicTrain01$Survived > 0.5, 1, 0)
conMatTitanic <- confusionMatrix(trainData1$Survived, predTitanicTrain01$Survived, positive = ""1"")
conMatTitanic",0,0,1,0,0,0,0,1,0,0,0,0,0,0
14,francoisolivier-fork-of-titanic-20,0.754,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.factor', 'c', 'data.frame', 'is.na', 'library', 'order', 'print', 'return', 'set.seed', 'randomForest', 'varImpPlot', 'median', 'predict', 'read.csv', 'write.csv']","['ggplot2', 'randomForest', 'base']",8.593281030654909,"['predict', 'write.csv', 'order', 'print', 'median', 'data.frame', 'read.csv', 'randomForest', 'as.factor', 'user defined', 'library', 'return', 'varImpPlot', 'c', 'is.na', 'set.seed']",[],"['fredman-titanic-barebones-benchmark-r', 'johno883-john-orr-titanic-random-forest', 'francoisolivier-titanic-20', 'areebaatif-titanic', 'zhxiangxyang-titanic', 'econdata-machine-learning-on-titanic-dataset', 'panda1023-svm-example-for-titanic', 'yinpatt-patrick-s-titanic', 'diegosiebra-rf-titanic-prediction-th3one', 'manskj-machine-learning-and-titanic']","[0.9611258794100505, 0.9090130522680895, 0.8988970317180829, 0.8988970317180829, 0.8988970317180829, 0.8940757468080639, 0.8864274689554033, 0.815930017914613, 0.8085490730549473, 0.6273833570573364]","{'character(0)': ['extractFeatures'], 'package:base': ['as.factor', 'c', 'data.frame', 'is.na', 'library', 'order', 'print', 'return', 'set.seed'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""extractFeatures""], ""package:base"": [""as.factor"", ""c"", ""data.frame"", ""is.na"", ""library"", ""order"", ""print"", ""return"", ""set.seed""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 extractFeatures packagebase asfactor c dataframe isna library order print return setseed packagerandomForest randomForest varImpPlot packagestats median predict packageutils readcsv writecsv,"library(ggplot2)
library(randomForest)
set.seed(69)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
extractFeatures <- function(data) {
    features <- c(""Pclass"", ""Age"", ""Sex"", ""Parch"", ""SibSp"", ""Fare"", ""Embarked"")
    fea <- data[, features]
    fea$Age[is.na(fea$Age)] <- median(fea$Age, na.rm = TRUE)
    fea$Fare[is.na(fea$Fare)] <- median(fea$Fare, na.rm = TRUE)
    fea$Embarked[fea$Embarked == """"] = ""S""
    fea$Sex <- as.factor(fea$Sex)
    fea$Embarked <- as.factor(fea$Embarked)
    return(fea)
}
rf <- randomForest(extractFeatures(train), as.factor(train$Survived), ntree = 5000, mtry = 4, importance = TRUE)
print(rf)
varImpPlot(rf)
rf$importance
rf$importance[order(rf$importance[, 1], decreasing = TRUE), ]
submission <- data.frame(PassengerId = test$PassengerId)
submission$Survived <- predict(rf, extractFeatures(test))
write.csv(submission, file = ""1_random_forest_r_submission.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
15,zahoorahmad-titanic-2nd-degree-families-and-majority-voting,0.797,"['summarize', 'filter', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.data.frame', 'as.factor', 'as.numeric', 'as.ordered', 'c', 'cat', 'cbind', 'colnames', 'data.frame', 'factor', 'ifelse', 'is.na', 'length', 'library', 'max', 'mean', 'nrow', 'paste', 'print', 'prop.table', 'range', 'rbind', 'rm', 'round', 'rownames', 'rowSums', 'sapply', 'seq', 'set.seed', 'strsplit', 'sub', 'substring', 'sum', 'summary', 'table', 'unique', 'which', 'train', 'trainControl', 'corrplot.mixed', 'arrange', 'group_by', 'left_join', 'n', 'select', 'summarise', 'aes', 'element_text', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_label', 'ggplot', 'labs', 'scale_fill_manual', 'scale_x_continuous', 'scale_x_discrete', 'scale_y_continuous', 'theme', 'theme_grey', 'xlab', 'hist', 'par', 'grid.arrange', 'cut2', 'kable', 'varImpPlot', 'cor', 'lm', 'median', 'predict', 'read.csv', 'str', 'write.csv']","['Hmisc', 'knitr', 'ggplot2', 'dplyr', 'caret', 'randomForest', 'gridExtra', 'ROCR', 'corrplot', 'base']",14.275346994400001,"['as.ordered', 'theme', 'lm', 'range', 'set.seed', 'scale_fill_manual', 'grid.arrange', 'length', 'read.csv', 'table', 'par', 'paste', 'sum', 'library', 'facet_grid', 'summarise', 'as.character', 'is.na', 'sub', 'scale_x_continuous', 'geom_boxplot', 'print', 'prop.table', 'left_join', 'filter', 'varImpPlot', 'colnames', 'arrange', 'unique', 'as.data.frame', 'aes', 'rbind', 'predict', 'write.csv', 'data.frame', 'rownames', 'ggplot', 'cbind', 'select', 'geom_label', 'mean', 'element_text', 'which', 'cor', 'kable', 'str', 'max', 'geom_bar', 'rm', 'substring', 'scale_y_continuous', 'train', 'corrplot.mixed', 'strsplit', 'user defined', 'trainControl', 'labs', 'nrow', 'median', 'cat', 'as.factor', 'summary', 'round', 'sapply', 'n', 'geom_histogram', 'hist', 'xlab', 'rowSums', 'factor', 'summarize', 'group_by', 'scale_x_discrete', 'c', 'theme_grey', 'as.numeric', 'ifelse', 'seq', 'geom_density', 'cut2']",[],"['zahoorahmad-titanic-2nd-degree-families-and-majority-voting', 'ushasri-titanic-2nd-degree-families-and-majority-voting', 'erikbruin-titanic-2nd-degree-families-and-majority-voting', 'harsh2-exploring-the-titanic-dataset', 'ravikrishnareddy-titanic-survival-prediction', 'maza91-titanic-logistic-regression', 'domini-titanic-data-exploration-and-modelling', 'djohnbar-titanic-rf', 'djohnbar-fork-of-titanic-rf-w-titles', 'aeintngon-titanic-exploratory-analysis']","[0.9999999999999999, 0.9999999999999999, 0.999330334203471, 0.9697038119098774, 0.7758378373114984, 0.7507775855376154, 0.7275465773385232, 0.7192288941382368, 0.7067280979742279, 0.7002918233638228]","{'c(""package:dplyr"", ""package:Hmisc"")': ['summarize'], 'c(""package:dplyr"", ""package:stats"")': ['filter'], 'character(0)': ['pretty_breaks', 'set'], 'package:base': ['as.character', 'as.data.frame', 'as.factor', 'as.numeric', 'as.ordered', 'c', 'cat', 'cbind', 'colnames', 'data.frame', 'factor', 'ifelse', 'is.na', 'length', 'library', 'max', 'mean', 'nrow', 'paste', 'print', 'prop.table', 'range', 'rbind', 'rm', 'round', 'rownames', 'rowSums', 'sapply', 'seq', 'set.seed', 'strsplit', 'sub', 'substring', 'sum', 'summary', 'table', 'unique', 'which'], 'package:caret': ['train', 'trainControl'], 'package:corrplot': ['corrplot.mixed'], 'package:dplyr': ['arrange', 'group_by', 'left_join', 'n', 'select', 'summarise'], 'package:ggplot2': ['aes', 'element_text', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_label', 'ggplot', 'labs', 'scale_fill_manual', 'scale_x_continuous', 'scale_x_discrete', 'scale_y_continuous', 'theme', 'theme_grey', 'xlab'], 'package:graphics': ['hist', 'par'], 'package:gridExtra': ['grid.arrange'], 'package:Hmisc': ['cut2'], 'package:knitr': ['kable'], 'package:randomForest': ['varImpPlot'], 'package:stats': ['cor', 'lm', 'median', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:Hmisc"")"": [""summarize""], ""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""character(0)"": [""pretty_breaks"", ""set""], ""package:base"": [""as.character"", ""as.data.frame"", ""as.factor"", ""as.numeric"", ""as.ordered"", ""c"", ""cat"", ""cbind"", ""colnames"", ""data.frame"", ""factor"", ""ifelse"", ""is.na"", ""length"", ""library"", ""max"", ""mean"", ""nrow"", ""paste"", ""print"", ""prop.table"", ""range"", ""rbind"", ""rm"", ""round"", ""rownames"", ""rowSums"", ""sapply"", ""seq"", ""set.seed"", ""strsplit"", ""sub"", ""substring"", ""sum"", ""summary"", ""table"", ""unique"", ""which""], ""package:caret"": [""train"", ""trainControl""], ""package:corrplot"": [""corrplot.mixed""], ""package:dplyr"": [""arrange"", ""group_by"", ""left_join"", ""n"", ""select"", ""summarise""], ""package:ggplot2"": [""aes"", ""element_text"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_label"", ""ggplot"", ""labs"", ""scale_fill_manual"", ""scale_x_continuous"", ""scale_x_discrete"", ""scale_y_continuous"", ""theme"", ""theme_grey"", ""xlab""], ""package:graphics"": [""hist"", ""par""], ""package:gridExtra"": [""grid.arrange""], ""package:Hmisc"": [""cut2""], ""package:knitr"": [""kable""], ""package:randomForest"": [""varImpPlot""], ""package:stats"": [""cor"", ""lm"", ""median"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packageHmisc summarize cpackagedplyr packagestats filter character0 prettybreaks set packagebase ascharacter asdataframe asfactor asnumeric asordered c cat cbind colnames dataframe factor ifelse isna length library max mean nrow paste print proptable range rbind rm round rownames rowSums sapply seq setseed strsplit sub substring sum summary table unique which packagecaret train trainControl packagecorrplot corrplotmixed packagedplyr arrange groupby leftjoin n select summarise packageggplot2 aes elementtext facetgrid geombar geomboxplot geomdensity geomhistogram geomlabel ggplot labs scalefillmanual scalexcontinuous scalexdiscrete scaleycontinuous theme themegrey xlab packagegraphics hist par packagegridExtra gridarrange packageHmisc cut2 packageknitr kable packagerandomForest varImpPlot packagestats cor lm median predict packageutils readcsv str writecsv,"knitr::opts_chunk$set(echo = TRUE)
library(Hmisc)
library(knitr)
library(ggplot2)
library(dplyr)
library(caret)
library(randomForest)
library(gridExtra)
library(ROCR)
library(corrplot)
train <- read.csv(""../input/train.csv"", stringsAsFactors = F, na.strings = c(""NA"", """"))
test <- read.csv(""../input/test.csv"", stringsAsFactors = F, na.strings = c(""NA"", """"))
str(train)
test$Survived <- NA
all <- rbind(train, test)
sapply(all, function(x) {
    sum(is.na(x))
})
all$Sex <- as.factor(all$Sex)
all$Survived <- as.factor(all$Survived)
all$Pclass <- as.ordered(all$Pclass)
ggplot(all[!is.na(all$Survived), ], aes(x = Survived, fill = Survived)) + geom_bar(stat = ""count"") + labs(x = ""How many people died and survived on the Titanic?"") + geom_label(stat = ""count"", aes(label = ..count..), size = 7) + theme_grey(base_size = 18)
p1 <- ggplot(all, aes(x = Sex, fill = Sex)) + geom_bar(stat = ""count"", position = ""dodge"") + theme_grey() + labs(x = ""All data"") + geom_label(stat = ""count"", aes(label = ..count..)) + scale_fill_manual(""legend"", values = c(female = ""pink"", male = ""green""))
p2 <- ggplot(all[!is.na(all$Survived), ], aes(x = Sex, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"") + theme_grey() + labs(x = ""Training data only"") + geom_label(stat = ""count"", aes(label = ..count..))
grid.arrange(p1, p2, nrow = 1)
p3 <- ggplot(all, aes(x = Pclass, fill = Pclass)) + geom_bar(stat = ""count"", position = ""dodge"") + labs(x = ""Pclass, All data"") + geom_label(stat = ""count"", aes(label = ..count..)) + theme(legend.position = ""none"") + theme_grey()
p4 <- ggplot(all[!is.na(all$Survived), ], aes(x = Pclass, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"") + labs(x = ""Training data only"") + theme(legend.position = ""none"") + theme_grey()
p5 <- ggplot(all[!is.na(all$Survived), ], aes(x = Pclass, fill = Survived)) + geom_bar(stat = ""count"", position = ""stack"") + labs(x = ""Training data only"", y = ""Count"") + facet_grid(. ~ Sex) + theme(legend.position = ""none"") + theme_grey()
p6 <- ggplot(all[!is.na(all$Survived), ], aes(x = Pclass, fill = Survived)) + geom_bar(stat = ""count"", position = ""fill"") + labs(x = ""Training data only"", y = ""Percent"") + facet_grid(. ~ Sex) + theme(legend.position = ""none"") + theme_grey()
grid.arrange(p3, p4, p5, p6, ncol = 2)
all$PclassSex[all$Pclass == ""1"" & all$Sex == ""male""] <- ""P1Male""
all$PclassSex[all$Pclass == ""2"" & all$Sex == ""male""] <- ""P2Male""
all$PclassSex[all$Pclass == ""3"" & all$Sex == ""male""] <- ""P3Male""
all$PclassSex[all$Pclass == ""1"" & all$Sex == ""female""] <- ""P1Female""
all$PclassSex[all$Pclass == ""2"" & all$Sex == ""female""] <- ""P2Female""
all$PclassSex[all$Pclass == ""3"" & all$Sex == ""female""] <- ""P3Female""
all$PclassSex <- as.factor(all$PclassSex)
all$Surname <- sapply(all$Name, function(x) {
    strsplit(x, split = ""[,.]"")[[1]][1]
})
all$Surname <- sapply(all$Surname, function(x) {
    strsplit(x, split = ""[-]"")[[1]][1]
})
all$Title <- sapply(all$Name, function(x) {
    strsplit(x, split = ""[,.]"")[[1]][2]
})
all$Title <- sub("" "", """", all$Title)
kable(table(all$Sex, all$Title))
all$Title[all$Title %in% c(""Mlle"", ""Ms"")] <- ""Miss""
all$Title[all$Title == ""Mme""] <- ""Mrs""
all$Title[!(all$Title %in% c(""Master"", ""Miss"", ""Mr"", ""Mrs""))] <- ""Rare Title""
all$Title <- as.factor(all$Title)
kable(table(all$Sex, all$Title))
ggplot(all[!is.na(all$Survived), ], aes(x = Title, fill = Survived)) + geom_bar(stat = ""count"", position = ""stack"") + labs(x = ""Title"") + theme_grey()
all$Fsize <- all$SibSp + all$Parch + 1
ggplot(all[!is.na(all$Survived), ], aes(x = Fsize, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_grey()
all$FsizeName <- paste(as.character(all$Fsize), all$Surname, sep = """")
SizeCheck <- all %>% group_by(FsizeName, Fsize) %>% summarise(NumObs = n())
SizeCheck$NumFam <- SizeCheck$NumObs/SizeCheck$Fsize
SizeCheck$modulo <- SizeCheck$NumObs%%SizeCheck$Fsize
SizeCheck <- SizeCheck[SizeCheck$modulo != 0, ]
sum(SizeCheck$NumObs)
kable(SizeCheck[SizeCheck$FsizeName %in% c(""3Davies"", ""5Hocking"", ""6Richards"", ""2Wilkes"", ""3Richards"", ""4Hocking""), ])
kable(all[all$FsizeName == ""3Davies"", c(2, 3, 14, 5, 6, 7, 8, 17, 9, 15)])
all$FsizeName[c(550, 1222)] <- ""2Davies""
all$SibSp[550] <- 0
all$Parch[1222] <- 1
all$Fsize[c(550, 1222)] <- 2
kable(all[all$FsizeName == ""2Davies"", c(2, 3, 14, 5, 6, 7, 8, 17, 9, 15)])
kable(all[all$Ticket %in% c(""29104"", ""29105"", ""29106""), c(2, 3, 4, 5, 6, 7, 8, 9, 15)])
NC <- all[all$FsizeName %in% SizeCheck$FsizeName, ]
NC$Name <- sub(""\\s$"", """", NC$Name)
NC$Maiden <- sub("".*[^\\)]$"", """", NC$Name)
NC$Maiden <- sub("".*\\s(.*)\\)$"", ""\\1"", NC$Maiden)
NC$Maiden[NC$Title != ""Mrs""] <- """"
NC$Maiden <- sub(""^\\("", """", NC$Maiden)
NC$Maiden[NC$Name == ""Andersen-Jensen, Miss. Carla Christine Nielsine""] <- ""Jensen""
NC$Maiden2[NC$Maiden %in% NC$Surname] <- NC$Maiden[NC$Maiden %in% NC$Surname]
NC$Combi[!is.na(NC$Maiden2)] <- paste(NC$Surname[!is.na(NC$Maiden2)], NC$Maiden[!is.na(NC$Maiden2)])
labels1 <- NC[!is.na(NC$Combi), c(""Surname"", ""Combi"")]
labels2 <- NC[!is.na(NC$Combi), c(""Maiden"", ""Combi"")]
colnames(labels2) <- c(""Surname"", ""Combi"")
labels1 <- rbind(labels1, labels2)
NC$Combi <- NULL
NC <- left_join(NC, labels1, by = ""Surname"")
CombiMaxF <- NC[!is.na(NC$Combi), ] %>% group_by(Combi) %>% summarise(MaxF = max(Fsize))
NC <- left_join(NC, CombiMaxF, by = ""Combi"")
NC$FsizeCombi[!is.na(NC$Combi)] <- paste(as.character(NC$Fsize[!is.na(NC$Combi)]), NC$Combi[!is.na(NC$Combi)], sep = """")
FamMaid <- NC[!is.na(NC$FsizeCombi), ] %>% group_by(FsizeCombi, MaxF, Fsize) %>% summarise(NumObs = n())
FamMaidWrong <- FamMaid[FamMaid$MaxF != FamMaid$NumObs, ]
kable(unique(NC[!is.na(NC$Combi) & NC$FsizeCombi %in% FamMaidWrong$FsizeCombi, c(""Combi"", ""MaxF"")]))
NC$MaxF <- NULL
FamMale <- NC[is.na(NC$Combi), ] %>% group_by(Surname) %>% summarise(MaxF = max(Fsize))
NC <- left_join(NC, FamMale, by = ""Surname"")
NCMale <- NC[is.na(NC$Combi), ] %>% group_by(Surname, FsizeName, MaxF) %>% summarise(count = n()) %>% group_by(Surname, MaxF) %>% filter(n() > 1) %>% summarise(NumFsizes = n())
NC$Combi[NC$Surname %in% NCMale$Surname] <- NC$Surname[NC$Surname %in% NCMale$Surname]
kable(NCMale[, c(1, 2)])
kable(all[all$Surname == ""Vander Planke"", c(2, 3, 4, 5, 6, 7, 8, 9, 15)])
NC <- NC[(NC$FsizeCombi %in% FamMaidWrong$FsizeCombi) | (NC$Surname %in% NCMale$Surname), ]
NC1 <- NC %>% group_by(Combi) %>% summarise(Favg = mean(Fsize))
kable(NC1)
NC <- left_join(NC, NC1, by = ""Combi"")
NC$Favg <- round(NC$Favg)
NC <- NC[, c(""PassengerId"", ""Favg"")]
all <- left_join(all, NC, by = ""PassengerId"")
all$Fsize[!is.na(all$Favg)] <- all$Favg[!is.na(all$Favg)]
all$Ticket2 <- sub(""..$"", ""xx"", all$Ticket)
rest <- all %>% select(PassengerId, Title, Age, Ticket, Ticket2, Surname, Fsize) %>% filter(Fsize == ""1"") %>% group_by(Ticket2, Surname) %>% summarise(count = n())
rest <- rest[rest$count > 1, ]
rest1 <- all[(all$Ticket2 %in% rest$Ticket2 & all$Surname %in% rest$Surname & all$Fsize == ""1""), c(""PassengerId"", ""Surname"", ""Title"", ""Age"", ""Ticket"", ""Ticket2"", ""Fsize"", ""SibSp"", ""Parch"")]
rest1 <- left_join(rest1, rest, by = c(""Surname"", ""Ticket2""))
rest1 <- rest1[!is.na(rest1$count), ]
rest1 <- rest1 %>% arrange(Surname, Ticket2)
kable(rest1[1:12, ])
all <- left_join(all, rest1)
for (i in 1:nrow(all)) {
    if (!is.na(all$count[i])) {
        all$Fsize[i] <- all$count[i]
    }
}
kable(all[all$Ticket == ""1601"", c(""Survived"", ""Pclass"", ""Title"", ""Surname"", ""Age"", ""Ticket"", ""SibSp"", ""Parch"", ""Fsize"")])
TicketGroup <- all %>% select(Ticket) %>% group_by(Ticket) %>% summarise(Tsize = n())
all <- left_join(all, TicketGroup, by = ""Ticket"")
ggplot(all[!is.na(all$Survived), ], aes(x = Tsize, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Ticket Size"") + theme_grey()
all$Group <- all$Fsize
for (i in 1:nrow(all)) {
    all$Group[i] <- max(all$Group[i], all$Tsize[i])
}
all$GroupSize[all$Group == 1] <- ""solo""
all$GroupSize[all$Group == 2] <- ""duo""
all$GroupSize[all$Group >= 3 & all$Group <= 4] <- ""group""
all$GroupSize[all$Group >= 5] <- ""large group""
all$GroupSize <- as.factor(all$GroupSize)
g1 <- ggplot(all[!is.na(all$Survived), ], aes(x = Group, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Final Group Sizes"") + theme_grey()
g2 <- ggplot(all[!is.na(all$Survived), ], aes(x = GroupSize, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"") + labs(x = ""Final Group Categories"") + theme_grey() + scale_x_discrete(limits = c(""solo"", ""duo"", ""group"", ""large group""))
grid.arrange(g2, g1)
all$count <- NULL
all$Name <- NULL
rm(CombiMaxF)
rm(FamMaid)
rm(FamMaidWrong)
rm(FamMale)
rm(labels1)
rm(labels2)
rm(NC)
rm(NC1)
rm(NCMale)
rm(rest)
rm(SizeCheck)
rm(TicketGroup)
rm(p1)
rm(p2)
rm(p3)
rm(p4)
rm(p5)
rm(p6)
kable(all[which(is.na(all$Embarked)), c(""Surname"", ""Title"", ""Survived"", ""Pclass"", ""Age"", ""SibSp"", ""Parch"", ""Ticket"", ""Fare"", ""Cabin"", ""Embarked"", ""Group"")])
all$FarePP <- all$Fare/all$Tsize
tab2 <- all[(!is.na(all$Embarked) & !is.na(all$Fare)), ] %>% group_by(Embarked, Pclass) %>% summarise(FarePP = median(FarePP))
kable(tab2)
all$Embarked[all$Ticket == ""113572""] <- ""C""
all$Embarked <- as.factor(all$Embarked)
kable(all[which(is.na(all$Fare)), c(""Surname"", ""Title"", ""Survived"", ""Pclass"", ""Age"", ""SibSp"", ""Parch"", ""Ticket"", ""Fare"", ""Cabin"", ""Embarked"", ""Group"")])
all$FarePP[1044] <- 7.8
tab3 <- all[(!is.na(all$FarePP)), ] %>% group_by(Pclass) %>% summarise(MedianFarePP = median(FarePP))
all <- left_join(all, tab3, by = ""Pclass"")
all$FarePP[which(all$FarePP == 0)] <- all$MedianFarePP[which(all$FarePP == 0)]
ggplot(all, aes(x = FarePP)) + geom_histogram(binwidth = 5, fill = ""blue"") + theme_grey() + scale_x_continuous(breaks = seq(0, 150, by = 10))
all$FareBins <- cut2(all$FarePP, g = 5)
ggplot(all[!is.na(all$Survived), ], aes(x = FareBins, fill = Survived)) + geom_bar(stat = ""count"") + theme_grey() + facet_grid(. ~ Pclass) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(all[(!is.na(all$Survived) & !is.na(all$Age)), ], aes(x = Age, fill = Survived)) + geom_density(alpha = 0.5, aes(fill = factor(Survived))) + labs(title = ""Survival density and Age"") + scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) + theme_grey()
ggplot(all[!is.na(all$Age), ], aes(x = Title, y = Age, fill = Pclass)) + geom_boxplot() + scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) + theme_grey()
set.seed(12000)
AgeLM <- lm(Age ~ Pclass + Sex + SibSp + Parch + Embarked + Title + GroupSize, data = all[!is.na(all$Age), ])
summary(AgeLM)
all$AgeLM <- predict(AgeLM, all)
par(mfrow = c(1, 2))
hist(all$Age[!is.na(all$Age)], main = ""Original data, non-missing"", xlab = ""Age"", col = ""green"")
hist(all$AgeLM[is.na(all$Age)], main = ""LM NA predictions"", xlab = ""Age"", col = ""orange"", xlim = range(0:80))
all[(is.na(all$Age) & all$AgeLM < 18), c(""Sex"", ""SibSp"", ""Parch"", ""Title"", ""Pclass"", ""Survived"", ""AgeLM"")]
indexMissingAge <- which(is.na(all$Age))
indexAgeSurvivedNotNA <- which(!is.na(all$Age) & (!is.na(all$Survived)))
all$Age[indexMissingAge] <- all$AgeLM[indexMissingAge]
all$Cabin[is.na(all$Cabin)] <- ""U""
all$Cabin <- substring(all$Cabin, 1, 1)
all$Cabin <- as.factor(all$Cabin)
ggplot(all[(!is.na(all$Survived) & all$Cabin != ""U""), ], aes(x = Cabin, fill = Survived)) + geom_bar(stat = ""count"") + theme_grey() + facet_grid(. ~ Pclass) + labs(title = ""Survivor split by class and Cabin"")
c1 <- round(prop.table(table(all$Survived[(!is.na(all$Survived) & all$Cabin != ""U"")], all$Cabin[(!is.na(all$Survived) & all$Cabin != ""U"")]), 2) * 100)
kable(c1)
ggplot(all[all$Age < 14.5 & !is.na(all$Survived), ], aes(x = Pclass, fill = Survived)) + geom_bar(stat = ""count"") + theme_grey(base_size = 18)
all$IsChildP12 <- ""No""
all$IsChildP12[all$Age <= 14.5 & all$Pclass %in% c(""1"", ""2"")] <- ""Yes""
all$IsChildP12 <- as.factor(all$IsChildP12)
d1 <- ggplot(all[!is.na(all$Survived), ], aes(x = Embarked, fill = Survived)) + geom_bar(stat = ""count"") + theme_grey() + labs(x = ""Embarked"", y = ""Count"")
d2 <- ggplot(all[!is.na(all$Survived), ], aes(x = Embarked, fill = Survived)) + geom_bar(stat = ""count"", position = ""fill"") + theme_grey() + labs(x = ""Embarked"", y = ""Percent"")
grid.arrange(d1, d2, nrow = 1)
ggplot(all[indexAgeSurvivedNotNA, ], aes(x = Age, fill = Survived)) + geom_histogram(aes(fill = factor(Survived))) + labs(title = ""Survival density, known-ages, and Embarked"") + scale_x_continuous(breaks = scales::pretty_breaks(n = 5)) + theme_grey() + facet_grid(. ~ Embarked)
tab1 <- rbind(table(all$Embarked[!is.na(all$Survived)]), table(all$Embarked[indexAgeSurvivedNotNA]))
tab1 <- cbind(tab1, (rowSums(tab1)))
tab1 <- rbind(tab1, tab1[1, ] - tab1[2, ])
tab1 <- rbind(tab1, round((tab1[3, ]/tab1[1, ]) * 100))
rownames(tab1) <- c(""All"", ""With Age"", ""Missing Age"", ""Percent Missing"")
colnames(tab1) <- c(""C"", ""Q"", ""S"", ""Total"")
kable(tab1)
TicketSurvivors <- all %>% group_by(Ticket) %>% summarize(Tsize = length(Survived), NumNA = sum(is.na(Survived)), SumSurvived = sum(as.numeric(Survived) - 1, na.rm = T))
all <- left_join(all, TicketSurvivors)
all$AnySurvivors[all$Tsize == 1] <- ""other""
all$AnySurvivors[all$Tsize >= 2] <- ifelse(all$SumSurvived[all$Tsize >= 2] >= 1, ""survivors in group"", ""other"")
all$AnySurvivors <- as.factor(all$AnySurvivors)
kable(x = table(all$AnySurvivors), col.names = c(""AnySurvivors"", ""Frequency""))
all$IsSolo[all$SibSp == 0] <- ""Yes""
all$IsSolo[all$SibSp != 0] <- ""No""
all$IsSolo <- as.factor(all$IsSolo)
ggplot(all[!is.na(all$Survived), ], aes(x = IsSolo, fill = Survived)) + geom_bar(stat = ""count"") + theme_grey(base_size = 18)
all$PassengerId <- NULL
all$SibSp <- NULL
all$Parch <- NULL
all$Ticket <- NULL
all$Fare <- NULL
all$Cabin <- NULL
all$Surname <- NULL
all$Fsize <- NULL
all$FsizeName <- NULL
all$Favg <- NULL
all$Tsize <- NULL
all$Ticket2 <- NULL
all$AgeLM <- NULL
all$Child <- NULL
all$HasParch <- NULL
all$MedianFarePP <- NULL
rm(tab1)
rm(tab2)
rm(tab3)
rm(AgeLM)
rm(c1)
rm(d1)
rm(d2)
trainClean <- all[!is.na(all$Survived), ]
testClean <- all[is.na(all$Survived), ]
set.seed(2017)
caret_matrix <- train(x = trainClean[, c(""PclassSex"", ""GroupSize"", ""FarePP"", ""AnySurvivors"", ""IsChildP12"")], y = trainClean$Survived, data = trainClean, method = ""rf"", trControl = trainControl(method = ""cv"", number = 5))
caret_matrix
caret_matrix$results
varImpPlot(caret_matrix$finalModel, main = "" Variable importance"")
solution_rf <- predict(caret_matrix, testClean)
set.seed(2017)
caret_svm <- train(Survived ~ PclassSex + FarePP + AnySurvivors + IsChildP12 + IsSolo, data = trainClean, method = ""svmRadial"", preProcess = c(""center"", ""scale""), trControl = trainControl(method = ""cv"", number = 5))
caret_svm
caret_svm$results
solution_svm <- predict(caret_svm, testClean)
set.seed(2017)
caret_boost <- train(Survived ~ PclassSex + GroupSize + FareBins + AnySurvivors + IsChildP12, data = trainClean, method = ""gbm"", preProcess = c(""center"", ""scale""), trControl = trainControl(method = ""cv"", number = 7), verbose = FALSE)
print(caret_boost)
solution_boost <- predict(caret_boost, testClean)
testClean$RF <- as.numeric(solution_rf) - 1
testClean$SVM <- as.numeric(solution_svm) - 1
testClean$Boost <- as.numeric(solution_boost) - 1
corrplot.mixed(cor(testClean[, c(""RF"", ""SVM"", ""Boost"")]), order = ""hclust"", tl.col = ""black"")
testClean$Sum <- testClean$RF + testClean$SVM + testClean$Boost
testClean$Majority <- ifelse(testClean$Sum <= 1, 0, 1)
testClean$DisagreeSVM <- ifelse(testClean$RF == testClean$Boost & testClean$SVM != testClean$RF, testClean$RF, testClean$SVM)
trainClean$RF <- predict(caret_matrix, trainClean)
trainClean$SVM <- predict(caret_svm, trainClean)
trainClean$Boost <- predict(caret_boost, trainClean)
f1 <- ggplot(trainClean[trainClean$Survived != trainClean$RF, ], aes(x = PclassSex, fill = RF)) + geom_bar(stat = ""count"") + labs(title = ""FP and FN, RF model"") + theme_grey() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + theme(legend.position = ""none"") + xlab("""")
f2 <- ggplot(trainClean[trainClean$Survived != trainClean$SVM, ], aes(x = PclassSex, fill = SVM)) + geom_bar(stat = ""count"") + labs(title = ""FP and FN, SVM model"") + theme_grey() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + theme(legend.position = ""none"") + xlab("""")
f3 <- ggplot(trainClean[trainClean$Survived != trainClean$Boost, ], aes(x = PclassSex, fill = Boost)) + geom_bar(stat = ""count"") + labs(title = ""FP and FN, GBM model"") + theme_grey() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + theme(legend.position = ""none"") + xlab("""")
grid.arrange(f1, f2, f3, nrow = 1)
testClean$Select <- ifelse(testClean$Pclass != 3, testClean$SVM, testClean$Boost)
submission_select <- data.frame(PassengerId = test$PassengerId, Survived = testClean$Select)
write.csv(submission_select, file = ""Titanic_select.csv"", row.names = F)
cat(""Total number of Male passengers in P1 in the test set is"", length(testClean$Survived[testClean$PclassSex == ""P1Male""]))
p1m_surv <- as.data.frame(sapply(testClean[testClean$PclassSex == ""P1Male"", c(""RF"", ""SVM"", ""Boost"")], function(x) {
    sum(x)
}))
kable(x = p1m_surv, col.names = c(""Predicted number of survivors""))
p1m1 <- ggplot(all[indexAgeSurvivedNotNA, ] %>% filter(PclassSex == ""P1Male""), aes(x = Age, fill = Survived)) + geom_density(alpha = 0.5, aes(fill = factor(Survived))) + labs(title = ""Survival density and Age P1 Male"") + theme_grey()
all$P1AgeMale[indexAgeSurvivedNotNA = T & all$PclassSex == ""P1Male"" & all$Age < 40] <- ""Under40""
all$P1AgeMale[indexAgeSurvivedNotNA = T & all$PclassSex == ""P1Male"" & all$Age >= 40] <- ""Over40""
p1m2 <- ggplot(all[!is.na(all$Survived) & !is.na(all$P1AgeMale), ], aes(x = P1AgeMale, fill = Survived)) + geom_bar(stat = ""count"", position = ""fill"") + theme(legend.position = ""none"")
grid.arrange(p1m1, p1m2, widths = c(2, 1))
ggplot(all[!is.na(all$Survived), ], aes(x = IsSolo, fill = Survived)) + geom_bar(stat = ""count"", position = ""fill"") + facet_grid(. ~ Pclass + Sex)",1,0,1,0,0,0,0,1,0,0,0,0,0,0
16,mcliff-exploring-survival-on-the-titanic,0.754,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.data.frame', 'as.factor', 'c', 'ceiling', 'data.frame', 'factor', 'integer', 'is.na', 'library', 'max', 'names', 'nrow', 'paste', 'print', 'rep', 'return', 'sample', 'substring', 'summary', 'confusionMatrix', 'preProcess', 'train', 'bind_rows', 'mutate', 'select', 'dummy.data.frame', 'fct_recode', 'aes', 'geom_bar', 'geom_density', 'ggplot', 'labs', 'scale_x_continuous', 'pretty_breaks', 'lm', 'predict', 'read.csv', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'randomForest', 'forcats', 'caret', 'dummies', 'base']",22.366392850875894,"['fct_recode', 'labs', 'nrow', 'dummy.data.frame', 'is.na', 'names', 'confusionMatrix', 'scale_x_continuous', 'print', 'lm', 'as.factor', 'summary', 'rep', 'integer', 'factor', 'max', 'geom_bar', 'preProcess', 'read.csv', 'return', 'substring', 'as.data.frame', 'train', 'c', 'aes', 'mutate', 'sample', 'paste', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'ggplot', 'geom_density', 'pretty_breaks', 'user defined', 'ceiling', 'library', 'select']",[],"['rhyando-r-embulan-titanic-notebook', 'rhyando-r-embulan-titanic', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic', 'jacekpardyak-mytitanicscript', 'anweshaghosh-titanic-forkofmultiplescripts-r']","[0.8212631346519738, 0.8191217665401987, 0.09370286243596627, 0.09370286243596627, 0.09258483121509005, 0.09258483121509005, 0.08904445222747616, 0.08904445222747616, 0.08197042556904566, 0.07843481923585303]","{'character(0)': ['getMissingRows', 'norm01'], 'package:base': ['as.data.frame', 'as.factor', 'c', 'ceiling', 'data.frame', 'factor', 'integer', 'is.na', 'library', 'max', 'names', 'nrow', 'paste', 'print', 'rep', 'return', 'sample', 'substring', 'summary'], 'package:caret': ['confusionMatrix', 'preProcess', 'train'], 'package:dplyr': ['bind_rows', 'mutate', 'select'], 'package:dummies': ['dummy.data.frame'], 'package:forcats': ['fct_recode'], 'package:ggplot2': ['aes', 'geom_bar', 'geom_density', 'ggplot', 'labs', 'scale_x_continuous'], 'package:scales': ['pretty_breaks'], 'package:stats': ['lm', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""getMissingRows"", ""norm01""], ""package:base"": [""as.data.frame"", ""as.factor"", ""c"", ""ceiling"", ""data.frame"", ""factor"", ""integer"", ""is.na"", ""library"", ""max"", ""names"", ""nrow"", ""paste"", ""print"", ""rep"", ""return"", ""sample"", ""substring"", ""summary""], ""package:caret"": [""confusionMatrix"", ""preProcess"", ""train""], ""package:dplyr"": [""bind_rows"", ""mutate"", ""select""], ""package:dummies"": [""dummy.data.frame""], ""package:forcats"": [""fct_recode""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""geom_density"", ""ggplot"", ""labs"", ""scale_x_continuous""], ""package:scales"": [""pretty_breaks""], ""package:stats"": [""lm"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 getMissingRows norm01 packagebase asdataframe asfactor c ceiling dataframe factor integer isna library max names nrow paste print rep return sample substring summary packagecaret confusionMatrix preProcess train packagedplyr bindrows mutate select packagedummies dummydataframe packageforcats fctrecode packageggplot2 aes geombar geomdensity ggplot labs scalexcontinuous packagescales prettybreaks packagestats lm predict packageutils readcsv writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""randomForest"")
library(""forcats"")
library(""caret"")
library(""dummies"")
getMissingRows <- function(total_data, column.with.gaps) {
    missingrows <- integer(0)
    count <- 0
    for (i in 1:nrow(total_data)) {
        if (is.na(total_data[i, column.with.gaps])) {
            count <- count + 1
            missingrows[count] <- i
        }
    }
    print(paste(column.with.gaps, ""has"", count, ""record(s) with a missing value""))
    return(missingrows)
}
raw_train <- read.csv(""../input/train.csv"")
raw_test <- read.csv(""../input/test.csv"")
testPassengerId <- raw_test$PassengerId
combine <- bind_rows(raw_train, raw_test)
summary(combine)
names(combine)
combine <- select(combine, -Name, -Ticket) %>% mutate(Pclass = factor(Pclass), Embarked = factor(Embarked), Sex = fct_recode(Sex, `0` = ""male"", `1` = ""female""), family = SibSp + Parch)
names(combine)
combine$Cabin[is.na(combine$Cabin)] <- ""X""
combine$Cabin <- substring(combine$Cabin, 1, 1)
combine$Cabin <- as.factor(combine$Cabin)
ggplot(combine[(!is.na(combine$Survived) & combine$Cabin != ""X""), ], aes(x = Cabin, fill = Survived)) + geom_bar(stat = ""count"") + labs(title = ""Survival rate by Cabin assignment"")
combine <- select(combine, -Cabin)
ggplot(combine[(!is.na(combine$Survived) & !is.na(combine$Age)), ], aes(x = Age, fill = Survived)) + geom_density(alpha = 0.5, aes(fill = factor(Survived))) + labs(title = ""Survival/Age Density plot"") + scale_x_continuous(breaks = scales::pretty_breaks(n = 10))
ageMissingRows <- getMissingRows(combine, ""Age"")
idx_na <- is.na(combine$Age)
age_train <- combine[!idx_na, ]
age_test <- combine[idx_na, ]
cvidx <- rep(1:5, each = ceiling(nrow(age_train)/5))
cvidx <- sample(cvidx, nrow(age_train))
norm01 <- function(x) x/max(x, na.rm = TRUE)
age_train <- select(age_train, PassengerId, Age, Survived, Pclass, Sex, SibSp, Parch, Fare, Embarked) %>% mutate(cvidx = cvidx, SibSp = norm01(SibSp), Parch = norm01(Parch), Fare = norm01(Fare))
age_test <- select(age_test, PassengerId, Age, Survived, Pclass, Sex, SibSp, Parch, Fare, Embarked) %>% mutate(SibSp = norm01(SibSp), Parch = norm01(Parch), Fare = norm01(Fare))
modelAgePSS <- lm(Age ~ Pclass + SibSp + Fare, data = age_train)
age_test$Age <- predict(modelAgePSS, newdata = age_test)
combine[combine$PassengerId %in% age_test$PassengerId, ""Age""] <- age_test$Age
ageMissingRows <- getMissingRows(combine, ""Age"")
ggplot(combine[(!is.na(combine$Survived) & !is.na(combine$Age)), ], aes(x = Age, fill = Survived)) + geom_density(alpha = 0.5, aes(fill = factor(Survived))) + labs(title = ""Survival/Age Density plot"") + scale_x_continuous(breaks = scales::pretty_breaks(n = 10))
names(combine)
FareMissingRows <- getMissingRows(combine, ""Fare"")
idx_na <- is.na(combine$Fare)
fare_train <- combine[!idx_na, ]
fare_test <- combine[idx_na, ]
fare_train <- select(fare_train, PassengerId, Age, Survived, Pclass, Sex, SibSp, Parch, Fare, Embarked) %>% mutate(SibSp = norm01(SibSp), Parch = norm01(Parch))
fare_test <- select(fare_test, PassengerId, Age, Survived, Pclass, Sex, SibSp, Parch, Fare, Embarked)
modelFarePSS <- lm(Fare ~ Age, data = fare_train)
fare_test$Fare <- predict(modelFarePSS, newdata = fare_test)
combine[combine$PassengerId %in% fare_test$PassengerId, ""Fare""] <- fare_test$Fare
FareMissingRows <- getMissingRows(combine, ""Fare"")
combine <- dummy.data.frame(combine)
combine <- select(combine, -PassengerId, -SibSp, -Parch) %>% mutate(Survived = factor(Survived))
names(combine)
combine <- as.data.frame(combine)
idx_na <- is.na(combine$Survived)
train <- combine[!idx_na, ]
test <- combine[idx_na, ]
summary(train)
summary(test)
threshold <- 0.6
pcaTransform <- preProcess(train[-1], method = c(""center"", ""scale"", ""pca""), thresh = threshold)
pc_train <- predict(pcaTransform, train[, -1])
pc_test <- predict(pcaTransform, test[, -1])
pc_train$Survived <- train$Survived
model <- train(Survived ~ ., data = pc_train)
pred_train <- predict(model, newdata = pc_train[, -7])
confusionMatrix(pred_train, train$Survived)
pred_test <- predict(model, newdata = pc_test)
solution <- data.frame(PassengerID = testPassengerId, Survived = pred_test)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,1,0,0,0,0,1,0,0,0,0,0,0
17,francoisolivier-titanic-20,0.7559999999999999,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.factor', 'c', 'data.frame', 'is.na', 'library', 'return', 'row.names', 'set.seed', 'aes', 'coord_flip', 'element_text', 'geom_bar', 'ggplot', 'ggsave', 'ggtitle', 'theme', 'theme_light', 'xlab', 'ylab', 'importance', 'randomForest', 'median', 'predict', 'reorder', 'read.csv', 'write.csv']","['ggplot2', 'randomForest', 'base']",1.21174216270447,"['median', 'element_text', 'coord_flip', 'theme', 'is.na', 'ggsave', 'as.factor', 'importance', 'theme_light', 'xlab', 'set.seed', 'geom_bar', 'read.csv', 'randomForest', 'return', 'row.names', 'c', 'aes', 'ylab', 'reorder', 'predict', 'write.csv', 'ggtitle', 'data.frame', 'ggplot', 'user defined', 'library']",[],"['johno883-john-orr-titanic-random-forest', 'econdata-machine-learning-on-titanic-dataset', 'yinpatt-patrick-s-titanic', 'francoisolivier-fork-of-titanic-20', 'fredman-titanic-barebones-benchmark-r', 'diegosiebra-rf-titanic-prediction-th3one', 'panda1023-svm-example-for-titanic', 'manskj-machine-learning-and-titanic', 'alma123-titanic', 'lich070192-titanic-test']","[0.9987838251035478, 0.9945317933598672, 0.9162212636542444, 0.8988970317180829, 0.8979974989573385, 0.8829555809809544, 0.8277987800640991, 0.5909428597743258, 0.4685422240311237, 0.15944697229985424]","{'character(0)': ['extractFeatures'], 'package:base': ['as.factor', 'c', 'data.frame', 'is.na', 'library', 'return', 'row.names', 'set.seed'], 'package:ggplot2': ['aes', 'coord_flip', 'element_text', 'geom_bar', 'ggplot', 'ggsave', 'ggtitle', 'theme', 'theme_light', 'xlab', 'ylab'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""extractFeatures""], ""package:base"": [""as.factor"", ""c"", ""data.frame"", ""is.na"", ""library"", ""return"", ""row.names"", ""set.seed""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""element_text"", ""geom_bar"", ""ggplot"", ""ggsave"", ""ggtitle"", ""theme"", ""theme_light"", ""xlab"", ""ylab""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 extractFeatures packagebase asfactor c dataframe isna library return rownames setseed packageggplot2 aes coordflip elementtext geombar ggplot ggsave ggtitle theme themelight xlab ylab packagerandomForest importance randomForest packagestats median predict reorder packageutils readcsv writecsv,"library(ggplot2)
library(randomForest)
set.seed(1)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
extractFeatures <- function(data) {
    features <- c(""Pclass"", ""Age"", ""Sex"", ""Parch"", ""SibSp"", ""Fare"", ""Embarked"")
    fea <- data[, features]
    fea$Age[is.na(fea$Age)] <- -1
    fea$Fare[is.na(fea$Fare)] <- median(fea$Fare, na.rm = TRUE)
    fea$Embarked[fea$Embarked == """"] = ""S""
    fea$Sex <- as.factor(fea$Sex)
    fea$Embarked <- as.factor(fea$Embarked)
    return(fea)
}
rf <- randomForest(extractFeatures(train), as.factor(train$Survived), ntree = 100, importance = TRUE)
submission <- data.frame(PassengerId = test$PassengerId)
submission$Survived <- predict(rf, extractFeatures(test))
write.csv(submission, file = ""1_random_forest_r_submission.csv"", row.names = FALSE)
imp <- importance(rf, type = 1)
featureImportance <- data.frame(Feature = row.names(imp), Importance = imp[, 1])
p <- ggplot(featureImportance, aes(x = reorder(Feature, Importance), y = Importance)) + geom_bar(stat = ""identity"", fill = ""#53cfff"") + coord_flip() + theme_light(base_size = 20) + xlab("""") + ylab(""Importance"") + ggtitle(""Random Forest Feature Importance\n"") + theme(plot.title = element_text(size = 18))
ggsave(""2_feature_importance.png"", p)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
18,paulbisto-r-titanic-script-practice,0.758,"['as.data.frame', 'as.factor', 'is.na', 'library', 'names', 'nrow', 'rbind', 'summary', 'table', 'aes', 'facet_grid', 'facet_wrap', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_jitter', 'ggplot', 'ggtitle', 'randomForest', 'as.formula', 'median', 'predict', 'head', 'read.csv', 'str', 'tail', 'write.csv']","['ggplot2', 'randomForest', 'base']",3.0290641784668,"['nrow', 'as.formula', 'facet_wrap', 'median', 'geom_jitter', 'is.na', 'names', 'geom_boxplot', 'as.factor', 'summary', 'str', 'geom_bar', 'read.csv', 'table', 'randomForest', 'as.data.frame', 'aes', 'tail', 'rbind', 'predict', 'write.csv', 'ggtitle', 'ggplot', 'geom_density', 'head', 'library', 'facet_grid']",[],"['predact-easy-r-titanic-predictive-model', 'suraj915-titanic-suraj', 'utkarsh1997-kaggle-titanic-rf', 'pavani2018-titanicr-random-forests', 'pradeeptripathi-prediction-of-titanic-survival-using-r', 'pradeeptripathi-prediction-of-titanic-survival-using-random-forest', 'lokesharun-titanic', 'acrespop-titanic1', 'mailakshdeep-titanic-survival-prediction-r', 'hisnibs-titanic-enhancing-the-training-data-and-kis']","[0.9830643240199534, 0.9740289818085214, 0.9573997138530091, 0.9408706299096873, 0.9343472079672943, 0.9341979359650269, 0.8940320253248307, 0.8151947183882293, 0.8124805441548573, 0.7342574813483289]","{'package:base': ['as.data.frame', 'as.factor', 'is.na', 'library', 'names', 'nrow', 'rbind', 'summary', 'table'], 'package:ggplot2': ['aes', 'facet_grid', 'facet_wrap', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_jitter', 'ggplot', 'ggtitle'], 'package:randomForest': ['randomForest'], 'package:stats': ['as.formula', 'median', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'tail', 'write.csv']}","{""package:base"": [""as.data.frame"", ""as.factor"", ""is.na"", ""library"", ""names"", ""nrow"", ""rbind"", ""summary"", ""table""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""facet_wrap"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_jitter"", ""ggplot"", ""ggtitle""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""as.formula"", ""median"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""tail"", ""write.csv""]}",packagebase asdataframe asfactor isna library names nrow rbind summary table packageggplot2 aes facetgrid facetwrap geombar geomboxplot geomdensity geomjitter ggplot ggtitle packagerandomForest randomForest packagestats asformula median predict packageutils head readcsv str tail writecsv,"titanic.train <- read.csv(""../input/train.csv"")
titanic.test <- read.csv(""../input/test.csv"")
head(titanic.train)
tail(titanic.train)
summary(titanic.train)
str(titanic.train)
head(titanic.test)
tail(titanic.test)
summary(titanic.test)
str(titanic.test)
titanic.train$IsTrainSet <- TRUE
titanic.test$IsTrainSet <- FALSE
names(titanic.train)
names(titanic.test)
titanic.test$Survived <- NA
titanic.full <- rbind(titanic.train, titanic.test)
table(titanic.full$IsTrainSet)
summary(titanic.full)
table(titanic.full$Embarked)
titanic.full[titanic.full$Embarked == """", ]
titanic.full[titanic.full$Embarked == """", ""Embarked""] <- ""S""
titanic.full[titanic.full$Embarked == """", ]
titanic.full[titanic.full$PassengerId == 62 | titanic.full$PassengerId == 830, ]
table(is.na(titanic.full$Age))
median(titanic.full$Age, na.rm = TRUE)
titanic.full[is.na(titanic.full$Age), ""Age""] <- median(titanic.full$Age, na.rm = TRUE)
table(titanic.full$Age)
titanic.full[is.na(titanic.full$Fare), ]
median(titanic.full$Fare, na.rm = TRUE)
titanic.full[is.na(titanic.full$Fare), ""Fare""] <- median(titanic.full$Fare, na.rm = TRUE)
titanic.full$Cabin <- NULL
str(titanic.full)
titanic.full$PassengerId <- as.factor(titanic.full$PassengerId)
titanic.full$Pclass <- as.factor(titanic.full$Pclass)
titanic.train <- titanic.full[titanic.full$IsTrainSet == TRUE, ]
titanic.test <- titanic.full[titanic.full$IsTrainSet == FALSE, ]
titanic.train$Survived <- as.factor(titanic.train$Survived)
str(titanic.train)
library(ggplot2)
g <- ggplot(data = titanic.train, aes(x = Sex, fill = Survived)) + geom_bar()
g
g <- ggplot(data = titanic.train, aes(x = Pclass, fill = Survived)) + geom_bar()
g
g <- ggplot(data = titanic.train, aes(x = Embarked, fill = Survived)) + geom_bar(position = ""dodge"")
g
table(titanic.train$Embarked, titanic.train$Survived)
g <- ggplot(data = titanic.train, aes(x = SibSp, fill = Survived)) + geom_bar()
g
g <- ggplot(data = titanic.train, aes(x = SibSp, fill = Survived)) + geom_bar() + facet_grid(~Sex)
g
g <- ggplot(data = titanic.train, aes(x = SibSp, fill = Survived)) + geom_bar() + facet_wrap(~Pclass)
g
g <- ggplot(data = titanic.train, aes(x = Age)) + geom_density()
g
g <- ggplot(data = titanic.train, aes(x = Fare)) + geom_density() + facet_grid(~Pclass)
g
g <- ggplot(titanic.train, aes(x = Pclass, y = Fare)) + geom_boxplot()
g
g <- ggplot(titanic.train, aes(x = Pclass, y = Fare, color = Pclass)) + geom_boxplot() + geom_jitter()
g
g <- ggplot(titanic.train, aes(x = Pclass, y = Fare, color = Survived)) + geom_boxplot() + geom_jitter() + ggtitle(""Titanic Survival by Class"")
g
library(randomForest)
survived.equation <- ""Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked""
survived.formula <- as.formula(survived.equation)
titanic.model <- randomForest(formula = survived.formula, data = titanic.train, ntree = 500, mtry = 3, nodesize = 0.01 * nrow(titanic.train))
Survived <- predict(titanic.model, newdata = titanic.test)
PassengerID <- titanic.test$PassengerId
output.df <- as.data.frame(PassengerID)
output.df$Survived <- Survived
write.csv(output.df, ""titanic_kaggle_submission.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
19,prasadsawant1107-predicting-survival-on-titanic,0.758,"['c', 'data.frame', 'factor', 'grepl', 'is.na', 'library', 'sum', 'bind_rows', 'aes', 'geom_bar', 'ggplot', 'scale_x_continuous', 'plot', 'text', 'rpart', 'predict', 'read.csv', 'write.csv']","['ggplot2', 'dplyr', 'rpart', 'base']",1.73822903633118,"['factor', 'sum', 'scale_x_continuous', 'plot', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'grepl', 'geom_bar', 'ggplot', 'read.csv', 'rpart', 'library', 'text', 'c', 'aes', 'is.na']",[],"['allanwbrooks-exploring-survival-on-the-titanic', 'researchbigd-titanic-forkedfrommeganscript', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'tetyama-trial-titanic', 'msantos68-exploring-survival-on-the-titanic', 'atuljjoshi05-titanic-random-forest', 'binilkuriachan-titanic-random-forest']","[0.7157400220971936, 0.7061756311353079, 0.7045387374939792, 0.7033649586115676, 0.7027255121584526, 0.7027255121584526, 0.7008111686720665, 0.6981348475586416, 0.6971954071025566, 0.6971954071025566]","{'package:base': ['c', 'data.frame', 'factor', 'grepl', 'is.na', 'library', 'sum'], 'package:dplyr': ['bind_rows'], 'package:ggplot2': ['aes', 'geom_bar', 'ggplot', 'scale_x_continuous'], 'package:graphics': ['plot', 'text'], 'package:rpart': ['rpart'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""c"", ""data.frame"", ""factor"", ""grepl"", ""is.na"", ""library"", ""sum""], ""package:dplyr"": [""bind_rows""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""ggplot"", ""scale_x_continuous""], ""package:graphics"": [""plot"", ""text""], ""package:rpart"": [""rpart""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase c dataframe factor grepl isna library sum packagedplyr bindrows packageggplot2 aes geombar ggplot scalexcontinuous packagegraphics plot text packagerpart rpart packagestats predict packageutils readcsv writecsv,"library(""ggplot2"")
library(""dplyr"")
library(""rpart"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
ggplot(full[1:891, ], aes(x = Age, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"")
full$AgeGroup[full$Age > 0 & full$Age <= 10] <- ""0-10""
full$AgeGroup[full$Age > 10 & full$Age <= 20] <- ""10-20""
full$AgeGroup[full$Age > 20 & full$Age <= 30] <- ""20-30""
full$AgeGroup[full$Age > 30 & full$Age <= 40] <- ""30-40""
full$AgeGroup[full$Age > 40 & full$Age <= 50] <- ""40-50""
full$AgeGroup[full$Age > 50 & full$Age <= 60] <- ""50-60""
full$AgeGroup[full$Age > 60 & full$Age <= 70] <- ""60-70""
full$AgeGroup[full$Age > 70 & full$Age <= 80] <- ""70-80""
full$AgeGroup[full$Age > 80 & full$Age <= 90] <- ""80-90""
full$AgeGroup[full$Age > 90 & full$Age <= 100] <- ""90-100""
full$AgeGroup[full$Age == """"] <- ""Unknown""
ggplot(full[1:891, ], aes(x = AgeGroup, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"")
full$AgeType[full$Age > 0 & full$Age <= 10] <- ""Child""
full$AgeType[full$Age > 10 & full$Age <= 120] <- ""Adult""
full$AgeType[(is.na(full$Age)) & grepl(""Master."", full$Name)] <- ""Child""
full$AgeType[(is.na(full$Age)) & grepl(""Miss."", full$Name) & (full$Parch > 0)] <- ""Child""
full$AgeType[(is.na(full$Age)) & grepl(""Miss."", full$Name) & (full$Parch == 0)] <- ""Adult""
full$AgeType[(is.na(full$Age)) & grepl(""Ms."", full$Name) & (full$Parch > 0)] <- ""Child""
full$AgeType[(is.na(full$Age)) & grepl(""Ms."", full$Name) & (full$Parch == 0)] <- ""Adult""
full$AgeType[(is.na(full$Age)) & grepl(""Mlle."", full$Name) & (full$Parch > 0)] <- ""Child""
full$AgeType[(is.na(full$Age)) & grepl(""Mlle."", full$Name) & (full$Parch == 0)] <- ""Adult""
full$AgeType[(is.na(full$Age)) & grepl(""Mrs."", full$Name)] <- ""Adult""
full$AgeType[(is.na(full$Age)) & grepl(""Mr."", full$Name)] <- ""Adult""
full$AgeType[(is.na(full$Age)) & grepl(""Dr."", full$Name)] <- ""Adult""
full$AgeType[(is.na(full$Age)) & grepl(""Rev."", full$Name)] <- ""Adult""
full$AgeType[(is.na(full$Age)) & grepl(""Mme."", full$Name)] <- ""Adult""
full$AgeType[(is.na(full$Age)) & grepl(""Major."", full$Name)] <- ""Adult""
full$AgeType[(is.na(full$Age)) & grepl(""Col."", full$Name)] <- ""Adult""
full$AgeType[(is.na(full$Age)) & grepl(""Capt."", full$Name)] <- ""Adult""
full$AgeType[(is.na(full$Age)) & grepl(""Dona."", full$Name)] <- ""Adult""
full$AgeType[(is.na(full$Age)) & grepl(""Jonkheer."", full$Name)] <- ""Adult""
full$AgeType[(is.na(full$Age)) & grepl(""Countess."", full$Name)] <- ""Adult""
ggplot(full[1:891, ], aes(x = AgeType, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"")
full$familySize <- full$SibSp + full$Parch
ggplot(full[1:891, ], aes(x = familySize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11))
missFamilySize <- sum(is.na(full$familySize))
missFamilySize
ggplot(full[1:891, ], aes(x = Pclass, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11))
missEmb <- sum(is.na(full$Embarked))
missEmb
full$Name[is.na(full$Embarked)]
ggplot(full[1:891, ], aes(x = Embarked, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"")
missGen <- sum(is.na(full$Sex))
missGen
ggplot(full[1:891, ], aes(x = Sex, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"")
train <- full[1:891, ]
test <- full[892:1309, ]
survival_model <- rpart(factor(Survived) ~ AgeType + familySize + Pclass + Embarked + Sex, data = train)
plot(survival_model, margin = 0.1)
text(survival_model, use.n = TRUE, pretty = TRUE, cex = 0.8)
predict_survival <- predict(survival_model, test, type = ""class"")
solution <- data.frame(PassengerID = test$PassengerId, Survived = predict_survival)
write.csv(solution, file = ""survival_model_solution.csv"", row.names = F)",0,0,0,0,0,0,0,0,0,1,0,0,0,0
22,alma123-titanic,0.737,"['plot', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'abs', 'as.character', 'as.factor', 'as.numeric', 'c', 'data.frame', 'gsub', 'ifelse', 'is.na', 'lapply', 'library', 'list', 'mean', 'merge', 'names', 'paste', 'rbind', 'return', 'round', 'row.names', 'set.seed', 'substr', 'summary', 'toupper', 'unlist', 'aes', 'coord_flip', 'element_text', 'geom_bar', 'ggplot', 'ggtitle', 'theme', 'theme_light', 'xlab', 'ylab', 'abline', 'slot', 'importance', 'randomForest', 'performance', 'prediction', 'aggregate', 'lm', 'predict', 'reorder', 'read.csv', 'write.csv']","['ggplot2', 'randomForest', 'ROCR', 'base']",4.5197851657867405,"['unlist', 'list', 'mean', 'lapply', 'merge', 'element_text', 'coord_flip', 'as.character', 'theme', 'slot', 'is.na', 'names', 'lm', 'as.factor', 'summary', 'round', 'importance', 'set.seed', 'gsub', 'theme_light', 'xlab', 'aggregate', 'geom_bar', 'toupper', 'read.csv', 'performance', 'randomForest', 'return', 'abs', 'c', 'row.names', 'aes', 'ylab', 'rbind', 'paste', 'as.numeric', 'plot', 'ifelse', 'predict', 'reorder', 'write.csv', 'ggtitle', 'data.frame', 'ggplot', 'substr', 'user defined', 'library', 'prediction', 'abline']",[],"['francoisolivier-titanic-20', 'areebaatif-titanic', 'zhxiangxyang-titanic', 'johno883-john-orr-titanic-random-forest', 'econdata-machine-learning-on-titanic-dataset', 'fredman-titanic-barebones-benchmark-r', 'francoisolivier-fork-of-titanic-20', 'diegosiebra-rf-titanic-prediction-th3one', 'yinpatt-patrick-s-titanic', 'panda1023-svm-example-for-titanic']","[0.4685422240311237, 0.4685422240311237, 0.4685422240311237, 0.4680993612706091, 0.4663634135921924, 0.44261325508169613, 0.4409684371748985, 0.43099040495208885, 0.4301143845445826, 0.42082768546895316]","{'c(""package:ROCR"", ""package:graphics"")': ['plot'], 'character(0)': ['extractFeatures'], 'package:base': ['abs', 'as.character', 'as.factor', 'as.numeric', 'c', 'data.frame', 'gsub', 'ifelse', 'is.na', 'lapply', 'library', 'list', 'mean', 'merge', 'names', 'paste', 'rbind', 'return', 'round', 'row.names', 'set.seed', 'substr', 'summary', 'toupper', 'unlist'], 'package:ggplot2': ['aes', 'coord_flip', 'element_text', 'geom_bar', 'ggplot', 'ggtitle', 'theme', 'theme_light', 'xlab', 'ylab'], 'package:graphics': ['abline'], 'package:methods': ['slot'], 'package:randomForest': ['importance', 'randomForest'], 'package:ROCR': ['performance', 'prediction'], 'package:stats': ['aggregate', 'lm', 'predict', 'reorder'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:ROCR"", ""package:graphics"")"": [""plot""], ""character(0)"": [""extractFeatures""], ""package:base"": [""abs"", ""as.character"", ""as.factor"", ""as.numeric"", ""c"", ""data.frame"", ""gsub"", ""ifelse"", ""is.na"", ""lapply"", ""library"", ""list"", ""mean"", ""merge"", ""names"", ""paste"", ""rbind"", ""return"", ""round"", ""row.names"", ""set.seed"", ""substr"", ""summary"", ""toupper"", ""unlist""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""element_text"", ""geom_bar"", ""ggplot"", ""ggtitle"", ""theme"", ""theme_light"", ""xlab"", ""ylab""], ""package:graphics"": [""abline""], ""package:methods"": [""slot""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:ROCR"": [""performance"", ""prediction""], ""package:stats"": [""aggregate"", ""lm"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackageROCR packagegraphics plot character0 extractFeatures packagebase abs ascharacter asfactor asnumeric c dataframe gsub ifelse isna lapply library list mean merge names paste rbind return round rownames setseed substr summary toupper unlist packageggplot2 aes coordflip elementtext geombar ggplot ggtitle theme themelight xlab ylab packagegraphics abline packagemethods slot packagerandomForest importance randomForest packageROCR performance prediction packagestats aggregate lm predict reorder packageutils readcsv writecsv,"library(ggplot2)
library(randomForest)
library(ROCR)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
test$Survived <- NA
Data <- rbind(train, test)
Data$LName <- gsub("",.*$"", """", Data$Name)
Data$Name1 <- gsub("".*,\\s"", """", Data$Name)
Data$Title <- gsub(""\\s.*$"", """", Data$Name1)
Data$Cabin2 <- substr(Data$Cabin, 1, 1)
Data$Ticket2 <- gsub(""\\s?[0-9]\\s?"", """", Data$Ticket)
Data$Ticket2 <- gsub(""\\."", """", Data$Ticket2)
Data$Ticket2 <- gsub(""\\/"", """", Data$Ticket2)
Data$Ticket2 <- toupper(Data$Ticket2)
Data$Title[Data$Title == ""the""] <- ""Countess""
Data$Title <- ifelse(Data$Title == ""Mlle."", ""Miss."", Data$Title)
Data$Title <- ifelse(Data$Title == ""Ms."", ""Miss."", Data$Title)
Data$Title <- ifelse(Data$Title == ""Mme."", ""Mrs."", Data$Title)
Data$Title2 <- Data$Title
Data$Title2 <- ifelse(!Data$Title == ""Miss."" & !Data$Title == ""Mrs."" & !Data$Title == ""Mr."" & !Data$Title == ""Master."", ""Other"", Data$Title2)
Data$Name2 <- gsub(""^.*[[:punct:]]\\s"", """", Data$Name1)
Data$FName <- gsub(""\\s.*"", """", Data$Name2)
Data$Name3 <- paste(Data$FName, Data$LName)
Data$Parch2 <- ifelse(Data$Parch > 5, 5, Data$Parch)
Data$SibSp2 <- ifelse(Data$SibSp > 5, 5, Data$SibSp)
Noble <- c(""Don."", ""Lady."", ""Sir."", ""Countess"", ""Jonkheer."")
Data$Noble <- ifelse(Data$Title %in% Noble, 1, 0)
a <- aggregate(Data$PassengerId, by = list(Data$LName), FUN = c(""length""))
names(a) <- c(""LName"", ""Family"")
Data <- merge(Data, a, by = ""LName"", all = T)
fitage <- lm(Age ~ Pclass + Title2 + SibSp2, data = Data)
summary(fitage)
x <- Data[is.na(Data$Age), ]
x$gAge <- round(predict(fitage, x, se.fit = TRUE)[[1]], 3)
x <- x[c(""PassengerId"", ""gAge"")]
Data <- merge(Data, x, by = ""PassengerId"", all = T)
Data$aAge <- ifelse(is.na(Data$Age), Data$gAge, Data$Age)
Data$AgeCat <- ifelse(Data$aAge <= 5, 1, 0)
Data$AgeCat <- ifelse(Data$aAge > 5 & Data$aAge <= 12, 2, Data$AgeCat)
Data$AgeCat <- ifelse(Data$aAge > 12 & Data$aAge <= 19, 3, Data$AgeCat)
Data$AgeCat <- ifelse(Data$aAge > 19, 4, Data$AgeCat)
Data$Cabin2[Data$Cabin2 == """"] = ""Z""
Data$Ticket2[Data$Ticket2 == """"] = ""Z""
Data$Embarked[Data$Embarked == """"] = ""S""
Data <- Data[c(""PassengerId"", ""Name"", ""Survived"", ""Pclass"", ""Sex"", ""SibSp"", ""SibSp2"", ""Parch"", ""Parch2"", ""Embarked"", ""Title"", ""Title2"", ""Cabin"", ""Cabin2"", ""Ticket"", ""Ticket2"", ""Noble"", ""Family"", ""Age"", ""aAge"", ""Fare"")]
Data$Ticket2 <- ifelse(Data$Ticket2 %in% c(""STONOQ"", ""AQ"", ""LP""), ""Z"", Data$Ticket2)
Data[4:18] <- lapply(Data[4:18], as.factor)
train <- Data[!is.na(Data$Survived), ]
test <- Data[is.na(Data$Survived), ]
test$Survived <- NULL
set.seed(1)
extractFeatures <- function(data) {
    features <- c(""Pclass"", ""Title2"", ""Cabin2"", ""Ticket2"", ""aAge"", ""Family"", ""Sex"", ""Parch2"", ""SibSp2"", ""Fare"", ""Embarked"")
    fea <- data[, features]
    fea$Sex <- as.factor(fea$Sex)
    fea$Embarked <- as.factor(fea$Embarked)
    fea$Title2 <- as.factor(fea$Title2)
    fea$Family <- as.factor(fea$Family)
    fea$Cabin2 <- as.factor(fea$Cabin2)
    fea$SibSp2 <- as.factor(fea$SibSp2)
    fea$Parch2 <- as.factor(fea$Parch2)
    fea$Ticket2 <- as.factor(fea$Ticket2)
    fea$Fare[is.na(fea$Fare)] <- 8.05
    return(fea)
}
rf <- randomForest(extractFeatures(train), as.factor(train$Survived), mtry = 4, ntree = 1000, keep.forest = TRUE, importance = TRUE)
Prob <- predict(rf, extractFeatures(train), type = ""prob"")[, 2]
pred <- prediction(Prob, train$Survived)
perf <- performance(pred, ""tpr"", ""fpr"")
plot(perf, main = ""ROC Curve for Random Forest"", col = 2, lwd = 2)
abline(a = 0, b = 1, lwd = 2, lty = 2, col = ""gray"")
auc <- performance(pred, ""auc"")
auc <- unlist(slot(auc, ""y.values""))
auc
train2 <- train
train2$Ans <- predict(rf, extractFeatures(train2))
train2$Ans <- as.numeric(as.character(train2$Ans))
train2$Res <- abs(train2$Ans - train2$Survived)
mean(train2$Res)
imp <- importance(rf, type = 1)
featureImportance <- data.frame(Feature = row.names(imp), Importance = imp[, 1])
p <- ggplot(featureImportance, aes(x = reorder(Feature, Importance), y = Importance)) + geom_bar(stat = ""identity"", fill = ""#53cfff"") + coord_flip() + theme_light(base_size = 20) + xlab("""") + ylab(""Importance"") + ggtitle(""Random Forest Feature Importance\n"") + theme(plot.title = element_text(size = 18))
p
submission <- data.frame(PassengerId = test$PassengerId)
submission$Survived <- predict(rf, extractFeatures(test))
write.csv(submission, file = ""1_random_forest_r_submission.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
24,xuhuiz0918-initial-eda-and-lm-on-titanic-dataset,0.7609999999999999,"['filter', 'as.factor', 'c', 'factor', 'ifelse', 'is.na', 'levels', 'library', 'max', 'min', 'round', 'sum', 'summary', 'system', 'glimpse', 'mutate', 'select', 'aes', 'facet_grid', 'geom_bar', 'geom_density', 'geom_histogram', 'ggplot', 'ggtitle', 'scale_fill_discrete', 'scale_x_discrete', 'xlab', 'ylab', 'theme_few', 'lm', 'predict', 'read.csv', 'write.csv']","['ggplot2', 'readr', 'dplyr', 'ggthemes', 'base']",1.80184006690979,"['min', 'glimpse', 'is.na', 'levels', 'theme_few', 'scale_fill_discrete', 'lm', 'as.factor', 'summary', 'filter', 'round', 'geom_histogram', 'xlab', 'factor', 'max', 'geom_bar', 'read.csv', 'scale_x_discrete', 'c', 'aes', 'ylab', 'mutate', 'ifelse', 'sum', 'predict', 'write.csv', 'facet_grid', 'ggtitle', 'ggplot', 'geom_density', 'library', 'select', 'system']",[],"['vishnusaiv-titanic-data-analysis', 'divyasshree-titanic-ml-club', 'windowbyryeol-kernel-titanic', 'dleprovost-simple-titanic-exploration', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic']","[0.9910474996417968, 0.868494271993149, 0.5141351714417186, 0.4900218310907871, 0.10071904294175013, 0.10071904294175013, 0.10035029073165959, 0.10035029073165959, 0.09798268363996906, 0.09798268363996906]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'factor', 'ifelse', 'is.na', 'levels', 'library', 'max', 'min', 'round', 'sum', 'summary', 'system'], 'package:dplyr': ['glimpse', 'mutate', 'select'], 'package:ggplot2': ['aes', 'facet_grid', 'geom_bar', 'geom_density', 'geom_histogram', 'ggplot', 'ggtitle', 'scale_fill_discrete', 'scale_x_discrete', 'xlab', 'ylab'], 'package:ggthemes': ['theme_few'], 'package:stats': ['lm', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""factor"", ""ifelse"", ""is.na"", ""levels"", ""library"", ""max"", ""min"", ""round"", ""sum"", ""summary"", ""system""], ""package:dplyr"": [""glimpse"", ""mutate"", ""select""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""geom_bar"", ""geom_density"", ""geom_histogram"", ""ggplot"", ""ggtitle"", ""scale_fill_discrete"", ""scale_x_discrete"", ""xlab"", ""ylab""], ""package:ggthemes"": [""theme_few""], ""package:stats"": [""lm"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c factor ifelse isna levels library max min round sum summary system packagedplyr glimpse mutate select packageggplot2 aes facetgrid geombar geomdensity geomhistogram ggplot ggtitle scalefilldiscrete scalexdiscrete xlab ylab packageggthemes themefew packagestats lm predict packageutils readcsv writecsv,"library(ggplot2)
library(readr)
system(""ls ../input"")
library(dplyr)
library(ggthemes)
Titanic_train <- read.csv(""../input/train.csv"")
Titanic_test <- read.csv(""../input/test.csv"")
glimpse(Titanic_train)
Titanic_train$Pclass <- as.factor(Titanic_train$Pclass)
levels(Titanic_train$Pclass) <- c(""Upper"", ""Middle"", ""Lower"")
glimpse(Titanic_train)
Titanic_train$Sex <- as.factor(Titanic_train$Sex)
levels(Titanic_train$Sex) <- c(""Female"", ""Male"")
glimpse(Titanic_train)
sum(Titanic_train$Survived == 1)
sum(Titanic_train$Survived == 0)
Sex_Distribution <- ggplot(data = Titanic_train, aes(x = Sex)) + geom_bar(fill = ""blue"", width = 0.7) + ylab(""num_of_passenger"") + ggtitle(""Relationship between Sex and passenger numbers"")
Sex_Distribution
sum(Titanic_train$Survived == 1 & Titanic_train$Sex == ""Female"")
sum(Titanic_train$Survived == 1 & Titanic_train$Sex == ""Male"")
sum(Titanic_train$Survived == 0 & Titanic_train$Sex == ""Female"")
sum(Titanic_train$Survived == 0 & Titanic_train$Sex == ""Male"")
Titanic_train1 <- Titanic_train %>% select(Survived, Pclass, Sex, Age) %>% filter(Age >= 0)
Age_Distribution <- ggplot() + geom_density(data = Titanic_train1, aes(x = Age), fill = ""blue"", alpha = 0.5)
Age_Distribution
Age_Sex_Survived <- ggplot(Titanic_train1, aes(Age, fill = factor(Survived))) + geom_histogram(bins = 30) + theme_few() + xlab(""Age"") + ylab(""Count"") + facet_grid(. ~ Sex) + scale_fill_discrete(name = ""Survived"") + theme_few() + ggtitle(""Relationship among Age, Sex and Survived"")
Age_Sex_Survived
max(Titanic_train$Age, na.rm = TRUE)
min(Titanic_train$Age, na.rm = TRUE)
sum(Titanic_train1$Age < 10 & Titanic_train1$Survived == 1)/sum(Titanic_train1$Age < 10)
sum(Titanic_train1$Age >= 10 & Titanic_train1$Age < 30 & Titanic_train1$Survived == 1)/sum(Titanic_train1$Age >= 10 & Titanic_train1$Age < 30)
sum(Titanic_train1$Age >= 30 & Titanic_train1$Age < 50 & Titanic_train1$Survived == 1)/sum(Titanic_train1$Age >= 30 & Titanic_train1$Age < 50)
sum(Titanic_train1$Age >= 50 & Titanic_train1$Survived == 1)/sum(Titanic_train1$Age >= 50)
Pclass_Distribution <- ggplot(data = Titanic_train, aes(x = Pclass)) + geom_bar(fill = ""blue"", width = 0.7) + ylab(""num_of_passenger"") + ggtitle(""Relationship between Pclass and passenger numbers"")
Pclass_Distribution
Pclass_Survived <- ggplot(Titanic_train1, aes(Pclass, fill = factor(Survived))) + geom_bar() + theme_few() + xlab(""Pclass"") + ylab(""num_of_passengers"") + scale_fill_discrete(name = ""Survived"") + theme_few() + ggtitle(""Relationship between Pclass and Survived"")
Pclass_Survived
sum(Titanic_train$Pclass == ""Upper"" & Titanic_train$Survived == 1)/sum(Titanic_train$Pclass == ""Upper"")
sum(Titanic_train$Pclass == ""Middle"" & Titanic_train$Survived == 1)/sum(Titanic_train$Pclass == ""Middle"")
sum(Titanic_train$Pclass == ""Lower"" & Titanic_train$Survived == 1)/sum(Titanic_train$Pclass == ""Lower"")
Titanic_train$FamilySize <- ifelse(Titanic_train$SibSp + Titanic_train$Parch + 1 == 1, ""Single"", ifelse(Titanic_train$SibSp + Titanic_train$Parch + 1 < 4, ""Small"", ""Large""))
FamilySize_Distribution <- ggplot(Titanic_train, aes(FamilySize)) + geom_bar(position = ""dodge"", fill = ""blue"") + scale_x_discrete(limits = c(""Single"", ""Small"", ""Large"")) + ylab(""num_of_passenger"") + ggtitle(""Relationship between Family size and passenger numbers"")
FamilySize_Distribution
Familysize_Survived <- ggplot(Titanic_train, aes(FamilySize, fill = factor(Survived))) + geom_bar() + theme_few() + xlab(""Familysize"") + ylab(""num_of_passengers"") + scale_fill_discrete(name = ""Survived"") + theme_few() + ggtitle(""Relationship between Familysize and Survived"")
Familysize_Survived
sum(Titanic_train$FamilySize == ""Single"" & Titanic_train$Survived == 1)/sum(Titanic_train$FamilySize == ""Single"")
sum(Titanic_train$FamilySize == ""Small"" & Titanic_train$Survived == 1)/sum(Titanic_train$FamilySize == ""Small"")
sum(Titanic_train$FamilySize == ""Large"" & Titanic_train$Survived == 1)/sum(Titanic_train$FamilySize == ""Large"")
Titanic_train_model <- Titanic_train %>% filter(Age >= 0) %>% select(Sex, Age, Pclass, FamilySize, Survived)
Titanic_model <- lm(Survived ~ Sex + Age + Pclass + FamilySize, data = Titanic_train_model)
summary(Titanic_model)
Titanic_test$FamilySize <- ifelse(Titanic_test$SibSp + Titanic_test$Parch + 1 == 1, ""Single"", ifelse(Titanic_test$SibSp + Titanic_test$Parch + 1 < 4, ""Small"", ""Large""))
Titanic_test$Pclass <- as.factor(Titanic_test$Pclass)
levels(Titanic_test$Pclass) <- c(""Upper"", ""Middle"", ""Lower"")
Titanic_test$Sex <- as.factor(Titanic_test$Sex)
levels(Titanic_test$Sex) <- c(""Female"", ""Male"")
submission <- Titanic_test %>% mutate(Survived = round(predict(Titanic_model, Titanic_test))) %>% select(PassengerId, Survived)
submission[is.na(submission)] <- 0
submission
write.csv(submission, file = ""submission.csv"", row.names = F)",0,0,0,0,0,0,0,0,0,0,0,0,0,0
25,jmercer187-fork-of-titanic2,0.7490000000000001,"['as.character', 'as.factor', 'c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'paste', 'rbind', 'sapply', 'set.seed', 'strsplit', 'system', 'randomForest', 'rpart', 'median', 'predict', 'read.csv', 'write.csv']","['ggplot2', 'readr', 'rpart', 'party', 'randomForest', 'base']",5.95377016067505,"['median', 'as.character', 'is.na', 'rpart', 'as.factor', 'sapply', 'set.seed', 'gsub', 'factor', 'read.csv', 'randomForest', 'c', 'rbind', 'paste', 'predict', 'write.csv', 'data.frame', 'strsplit', 'library', 'system']",[],"['ammara-titanic-competition-script-using-rf-2', 'alejandrorivas-titanic-beginners-principiantes-espa-ol', 'ammara-titanic-competition-using-boosting', 'aravind5-titanic', 'yugrao-titanic2', 'yugrao-titanic', 'aravind5-kaggle-titanic', 'mmaguero-titanic-majority-vote-of-ridge-rf-and-gbm', 'byrony-titanic-majority-vote-of-ridge-rf-and-gbm', 'ccheng2016-titanic-survival']","[0.9285357558981081, 0.8956185370414301, 0.8745710232646903, 0.8223729186578673, 0.8223729186578673, 0.8223729186578673, 0.8223729186578673, 0.8205856643717684, 0.8205856643717684, 0.7595388636765474]","{'package:base': ['as.character', 'as.factor', 'c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'paste', 'rbind', 'sapply', 'set.seed', 'strsplit', 'system'], 'package:randomForest': ['randomForest'], 'package:rpart': ['rpart'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.character"", ""as.factor"", ""c"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""library"", ""paste"", ""rbind"", ""sapply"", ""set.seed"", ""strsplit"", ""system""], ""package:randomForest"": [""randomForest""], ""package:rpart"": [""rpart""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase ascharacter asfactor c dataframe factor gsub isna library paste rbind sapply setseed strsplit system packagerandomForest randomForest packagerpart rpart packagestats median predict packageutils readcsv writecsv,"library(ggplot2)
library(readr)
library(rpart)
library(party)
library(randomForest)
system(""ls ../input"")
train <- read.csv(""../input/train.csv"", header = TRUE, stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", header = TRUE, stringsAsFactors = F)
test$Survived <- NA
combi <- rbind(train, test)
combi$Child <- 0
combi$Child[test$Age < 18] <- 1
combi$Fare2 <- ""30+""
combi$Fare2[combi$Fare < 30 & combi$Fare >= 20] <- ""20-30""
combi$Fare2[combi$Fare < 20 & combi$Fare >= 10] <- ""10-20""
combi$Fare2[combi$Fare < 10] <- ""<10""
combi$Title <- gsub(""(.*, )|(\\..*)"", """", combi$Name)
rare.title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
combi$Title[combi$Title == ""Mlle""] <- ""Miss""
combi$Title[combi$Title == ""Ms""] <- ""Miss""
combi$Title[combi$Title == ""Mme""] <- ""Miss""
combi$Title[combi$Title %in% rare.title] <- ""Rare Title""
combi$Surname <- sapply(combi$Name, FUN = function(x) {
    strsplit(x, split = ""[,.]"")[[1]][1]
})
combi$FamilySize <- combi$SibSp + combi$Parch + 1
combi$FamilyUnit <- paste(combi$Surname, as.character(combi$FamilySize), sep = ""_"")
combi$FamilySize2[combi$FamilySize == 1] <- ""singleton""
combi$FamilySize2[combi$FamilySize < 5 & combi$FamilySize > 1] <- ""small""
combi$FamilySize2[combi$FamilySize > 4] <- ""large""
combi$Fare3[combi$Fare <= 5] <- ""0-5""
combi$Fare3[combi$Fare > 5 & combi$Fare <= 11] <- ""6-10""
combi$Fare3[combi$Fare > 11 & combi$Fare <= 15] <- ""11-15""
combi$Fare3[combi$Fare > 15 & combi$Fare <= 20] <- ""16-20""
combi$Fare3[combi$Fare > 20 & combi$Fare <= 25] <- ""21-25""
combi$Fare3[combi$Fare > 25 & combi$Fare <= 30] <- ""26-30""
combi$Fare3[combi$Fare > 30 & combi$Fare <= 40] <- ""31-40""
combi$Fare3[combi$Fare > 40 & combi$Fare <= 60] <- ""41-60""
combi$Fare3[combi$Fare > 60 & combi$Fare <= 100] <- ""60-100""
combi$Fare3[combi$Fare > 100 & combi$Fare <= 200] <- ""101-200""
combi$Fare3[combi$Fare > 200] <- ""200+""
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Embarked + Title + FamilySize, data = combi[!is.na(combi$Age), ], method = ""anova"")
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age), ])
combi$Embarked[c(62, 830)] <- ""C""
combi$Fare[1044] <- median(combi[combi$Pclass == ""3"" & combi$Embarked == ""S"", ]$Fare, na.rm = TRUE)
combi$Fare2[1044] <- ""<10""
combi$Name <- as.factor(combi$Name)
combi$Sex <- as.factor(combi$Sex)
combi$Embarked <- as.factor(combi$Embarked)
combi$Fare3 <- as.factor(combi$Fare2)
combi$Title <- as.factor(combi$Title)
combi$Surname <- as.factor(combi$Surname)
combi$FamilySize <- as.factor(combi$FamilySize)
combi$FamilySize2 <- as.factor(combi$FamilySize2)
train <- combi[1:891, ]
test <- combi[892:1309, ]
set.seed(187)
fit3 <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare3 + Embarked + Title + FamilySize2 + Child, data = train, importance = TRUE, ntree = 2000, mtry = 5)
Prediction <- predict(fit3, test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = ""randoforest6.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
26,ianwells-titanic-simple-rf-with-name-and-age-features,0.7659999999999999,"['missmap', 'as.character', 'as.factor', 'c', 'data.frame', 'factor', 'is.na', 'library', 'log', 'matrix', 'mean', 'names', 'nrow', 'pmax', 'sapply', 'confusionMatrix', 'coalesce', 'group_by', 'inner_join', 'left_join', 'sample_frac', 'select', 'summarise', 'randomForest', 'varImpPlot', 'na.omit', 'predict', 'str_split', 'read.csv', 'write.table']","['Amelia', 'dplyr', 'stringr', 'randomForest', 'caret', 'base']",2.2980711460113503,"['summarise', 'nrow', 'mean', 'str_split', 'as.character', 'is.na', 'names', 'confusionMatrix', 'log', 'na.omit', 'as.factor', 'left_join', 'coalesce', 'sapply', 'varImpPlot', 'missmap', 'factor', 'matrix', 'sample_frac', 'read.csv', 'randomForest', 'group_by', 'c', 'inner_join', 'predict', 'pmax', 'data.frame', 'write.table', 'library', 'select']",[],"['paulocressoni-titanic-using-stepwise-linear-regression', 'sawajid-titanic-test', 'rkumar3147-exploring-survival-on-the-titanic1', 'vizcharlie-exploring-survival-on-the-titanic', 'sudheer464-prediction-1-on-titanic-dataset', 'jerlinraj-titanic-machine-learning-from-disaster', 'jaimisk-titanic-survival-logistic-regression', 'danr87946-titanic-practice', 'amodi8-titanic-exploring-survival-using-machine-learning', 'zhaotianjing-titanic']","[0.222428550030267, 0.2045971712714733, 0.20261741108831635, 0.20261741108831635, 0.19587386433179016, 0.19372110283943672, 0.19315636730119218, 0.19254852677135148, 0.19199656424545875, 0.19154059134659962]","{'package:Amelia': ['missmap'], 'package:base': ['as.character', 'as.factor', 'c', 'data.frame', 'factor', 'is.na', 'library', 'log', 'matrix', 'mean', 'names', 'nrow', 'pmax', 'sapply'], 'package:caret': ['confusionMatrix'], 'package:dplyr': ['coalesce', 'group_by', 'inner_join', 'left_join', 'sample_frac', 'select', 'summarise'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:stats': ['na.omit', 'predict'], 'package:stringr': ['str_split'], 'package:utils': ['read.csv', 'write.table']}","{""package:Amelia"": [""missmap""], ""package:base"": [""as.character"", ""as.factor"", ""c"", ""data.frame"", ""factor"", ""is.na"", ""library"", ""log"", ""matrix"", ""mean"", ""names"", ""nrow"", ""pmax"", ""sapply""], ""package:caret"": [""confusionMatrix""], ""package:dplyr"": [""coalesce"", ""group_by"", ""inner_join"", ""left_join"", ""sample_frac"", ""select"", ""summarise""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:stats"": [""na.omit"", ""predict""], ""package:stringr"": [""str_split""], ""package:utils"": [""read.csv"", ""write.table""]}",packageAmelia missmap packagebase ascharacter asfactor c dataframe factor isna library log matrix mean names nrow pmax sapply packagecaret confusionMatrix packagedplyr coalesce groupby innerjoin leftjoin samplefrac select summarise packagerandomForest randomForest varImpPlot packagestats naomit predict packagestringr strsplit packageutils readcsv writetable,"library(""Amelia"")
library(""dplyr"")
library(""stringr"")
library(""randomForest"")
library(""caret"")
d <- read.csv(""../input/train.csv"")
t <- read.csv(""../input/test.csv"")
d$Pclass <- as.factor(d$Pclass)
t$Pclass <- as.factor(t$Pclass)
d$Fare <- pmax(log(d$Fare), 0)
t$Fare <- pmax(log(t$Fare), 0)
d$FamSize <- d$Parch + d$SibSp + 1
t$FamSize <- t$Parch + t$SibSp + 1
basic.titles <- c(""Mr"", ""Mrs"", ""Master"", ""Miss"", ""Ms"", ""Mlle"", ""Mdm"")
extract.title <- function(n) {
    (str_split(str_split(n, "", "")[[1]][2], ""\\."")[[1]][1])
}
d$Title <- sapply(as.character(d$Name), extract.title)
d$Noble <- !(d$Title %in% basic.titles)
t$Title <- sapply(as.character(t$Name), extract.title)
t$Noble <- !(t$Title %in% basic.titles)
d$Title <- as.factor(d$Title)
t$Title <- as.factor(t$Title)
missmap(d)
titles <- group_by(d, Title)
title.age.avg <- summarise(titles, avg.age = mean(Age, na.rm = TRUE))
d <- inner_join(by = ""Title"", d, title.age.avg)
t <- left_join(by = ""Title"", t, title.age.avg)
d$HadAge <- !is.na(d$Age)
d$InferredAge <- coalesce(d$Age, d$avg.age)
t$HadAge <- !is.na(t$Age)
t$InferredAge <- coalesce(t$Age, t$avg.age)
d.s <- select(d, Survived, InferredAge, HadAge, Pclass, Sex, Parch, Embarked, Fare, SibSp, Noble, FamSize)
d.s.a <- (d.s) %>% na.omit()
d.s.a$Survived <- factor(d.s.a$Survived)
d.s.a$id <- 1:nrow(d.s.a)
train.ix <- sample_frac(d.s.a, 0.8)
d.train <- d.s.a[train.ix$id, ]
d.test <- d.s.a[-train.ix$id, ]
rf <- randomForest(Survived ~ ., select(d.train, Survived, Pclass, Sex, Fare, Noble, SibSp, Parch, HadAge, InferredAge, FamSize), ntree = 50, norm.votes = FALSE)
varImpPlot(rf)
rf <- randomForest(Survived ~ ., select(d.train, Survived, Pclass, Sex, Fare, InferredAge, FamSize), ntree = 50, norm.votes = FALSE)
y.test <- select(d.test, Survived)
p <- predict(rf, select(d.test, Pclass, Sex, Fare, Noble, InferredAge, FamSize))
confusionMatrix(p, y.test$Survived)
df.submit <- data.frame(matrix(nrow = 418, ncol = 2))
names(df.submit) <- c(""PassengerId"", ""Survived"")
df.submit$PassengerId <- t$PassengerId
rf <- randomForest(Survived ~ ., select(d.s.a, Survived, Pclass, Sex, Fare, InferredAge, FamSize), ntree = 50, norm.votes = FALSE)
p2 <- predict(rf, select(t, Pclass, Sex, Fare, InferredAge, FamSize))
df.submit$Survived <- p2
df.submit[153, 2] <- 0
write.table(df.submit, ""submit.csv"", sep = "","", row.names = FALSE, quote = FALSE)",1,0,1,0,0,0,0,1,0,0,0,0,0,1
27,rboimistruk-titanic-survivals-analysis,0.7659999999999999,"['missmap', 'as.data.frame', 'as.factor', 'as.numeric', 'c', 'cbind', 'colnames', 'data.frame', 'factor', 'grepl', 'gsub', 'ifelse', 'is.na', 'library', 'list', 'mean', 'round', 'set.seed', 'summary', 'confusionMatrix', 'createDataPartition', 'resamples', 'train', 'trainControl', 'bind_rows', 'group_by', 'summarise', 'aes', 'element_text', 'facet_grid', 'geom_bar', 'geom_histogram', 'ggplot', 'ggtitle', 'labs', 'scale_fill_discrete', 'stat_function', 'theme', 'grid.arrange', 'kable', 'dotplot', 'randomForest', 'predict', 'sd', 'head', 'read.csv', 'str', 'tail', 'write.csv']","['ggplot2', 'knitr', 'dplyr', 'gridExtra', 'Amelia', 'caret', 'randomForest', 'base']",35.529687881469705,"['summarise', 'labs', 'list', 'mean', 'dotplot', 'element_text', 'theme', 'is.na', 'resamples', 'confusionMatrix', 'scale_fill_discrete', 'as.factor', 'summary', 'round', 'kable', 'geom_histogram', 'str', 'set.seed', 'gsub', 'missmap', 'factor', 'colnames', 'geom_bar', 'grid.arrange', 'sd', 'read.csv', 'randomForest', 'as.data.frame', 'group_by', 'train', 'c', 'aes', 'tail', 'as.numeric', 'ifelse', 'createDataPartition', 'predict', 'write.csv', 'bind_rows', 'ggtitle', 'data.frame', 'grepl', 'ggplot', 'head', 'stat_function', 'library', 'trainControl', 'cbind', 'facet_grid']",[],"['vikramatjob-exploring-survival-on-the-titanic-var2', 'allanwbrooks-exploring-survival-on-the-titanic', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'researchbigd-titanic-forkedfrommeganscript', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'tetyama-trial-titanic', 'msantos68-exploring-survival-on-the-titanic', 'bonesaw98616-exploring-survival-on-the-titanic']","[0.6728002735629607, 0.6646998766949446, 0.6602868992158709, 0.6596920674141731, 0.6596920674141731, 0.6587067595617019, 0.6568941364056377, 0.6556090222151844, 0.655436917240702, 0.654101251810929]","{'package:Amelia': ['missmap'], 'package:base': ['as.data.frame', 'as.factor', 'as.numeric', 'c', 'cbind', 'colnames', 'data.frame', 'factor', 'grepl', 'gsub', 'ifelse', 'is.na', 'library', 'list', 'mean', 'round', 'set.seed', 'summary'], 'package:caret': ['confusionMatrix', 'createDataPartition', 'resamples', 'train', 'trainControl'], 'package:dplyr': ['bind_rows', 'group_by', 'summarise'], 'package:ggplot2': ['aes', 'element_text', 'facet_grid', 'geom_bar', 'geom_histogram', 'ggplot', 'ggtitle', 'labs', 'scale_fill_discrete', 'stat_function', 'theme'], 'package:gridExtra': ['grid.arrange'], 'package:knitr': ['kable'], 'package:lattice': ['dotplot'], 'package:randomForest': ['randomForest'], 'package:stats': ['predict', 'sd'], 'package:utils': ['head', 'read.csv', 'str', 'tail', 'write.csv']}","{""package:Amelia"": [""missmap""], ""package:base"": [""as.data.frame"", ""as.factor"", ""as.numeric"", ""c"", ""cbind"", ""colnames"", ""data.frame"", ""factor"", ""grepl"", ""gsub"", ""ifelse"", ""is.na"", ""library"", ""list"", ""mean"", ""round"", ""set.seed"", ""summary""], ""package:caret"": [""confusionMatrix"", ""createDataPartition"", ""resamples"", ""train"", ""trainControl""], ""package:dplyr"": [""bind_rows"", ""group_by"", ""summarise""], ""package:ggplot2"": [""aes"", ""element_text"", ""facet_grid"", ""geom_bar"", ""geom_histogram"", ""ggplot"", ""ggtitle"", ""labs"", ""scale_fill_discrete"", ""stat_function"", ""theme""], ""package:gridExtra"": [""grid.arrange""], ""package:knitr"": [""kable""], ""package:lattice"": [""dotplot""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""predict"", ""sd""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""tail"", ""write.csv""]}",packageAmelia missmap packagebase asdataframe asfactor asnumeric c cbind colnames dataframe factor grepl gsub ifelse isna library list mean round setseed summary packagecaret confusionMatrix createDataPartition resamples train trainControl packagedplyr bindrows groupby summarise packageggplot2 aes elementtext facetgrid geombar geomhistogram ggplot ggtitle labs scalefilldiscrete statfunction theme packagegridExtra gridarrange packageknitr kable packagelattice dotplot packagerandomForest randomForest packagestats predict sd packageutils head readcsv str tail writecsv,"library(ggplot2)
library(knitr)
library(dplyr)
library(gridExtra)
library(Amelia)
library(caret)
library(randomForest)
full <- read.csv(""../input/train.csv"", stringsAsFactors = T)
test <- read.csv(""../input/test.csv"", stringsAsFactors = T)
full <- bind_rows(full, test)
kable(data.frame(Variable = c(""PassengerId"", ""Survived"", ""Pclass"", ""Name"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Ticket"", ""Fare"", ""Cabin"", ""Embarked""), Definition = c(""PassengerId"", ""Survival"", ""Ticket Class"", ""Name"", ""Sex"", ""Age"", ""# of siblings / spouses aboard"", ""# of parents / children aboard"", ""Ticket number"", ""Passenger fare"", ""Cabin number"", ""Port of Embarkation""), Key = c("""", ""1 = Yes, 0 = No"", ""1 = 1st, 2 = 2nd, <br>3 = 3rd"", """", """", """", """", """", """", """", """", ""C = Cherbourg, <br>Q = Queenstown, <br>S = Southampton""), 
    Notes = c("""", """", ""A proxy for socio-economic status (SES) <br>1st = Upper, 2nd = Middle, 3rd = Lower"", """", """", ""Age is fractional if less than 1. <br>If the age is estimated, is it in the form of xx.5"", ""Sibling = brother, sister, stepbrother, stepsister, <br>Spouse = husband, wife (mistresses and fiancés were ignored)"", ""Parent = mother, father, <br>Child = daughter, son, stepdaughter, stepson, <br>Some children travelled only with a nanny, therefore parch=0 for them"", """", """", """", """")))
str(full)
summary(full)
head(full)
tail(full)
missmap(full, col = c(""white"", ""darkblue""), legend = F, main = ""Missing Values"")
full$Embarked[full$Embarked == """"] <- ""S""
full$Fare[is.na(full$Fare)] <- round(mean(full$Fare, na.rm = T), 0)
full$Pclass <- as.factor(full$Pclass)
full$Survived <- as.factor(full$Survived)
full$Embarked <- as.factor(full$Embarked)
full$Age.old <- full$Age
fit <- train(Age ~ Pclass + Sex + Embarked + SibSp + Parch + Fare, data = full[!is.na(full$Age), ], method = ""rf"", trControl = trainControl(method = ""cv"", number = 10))
new <- cbind(full[is.na(full$Age), ], predict(fit, full[is.na(full$Age), ]))
full$Age[is.na(full$Age)] <- new[, 14]
full$Age <- as.numeric(full$Age)
summary(full$Age)
summary(full$Embarked)
ggplot(data = full[!is.na(full$Survived), ], aes(as.factor(Pclass), fill = as.factor(Survived))) + geom_bar(position = ""fill"") + labs(x = ""Ticket Class"") + ggtitle(""Survivals by the Ticket Class"") + scale_fill_discrete(name = ""Survived"", breaks = c(0, 1), labels = c(""No"", ""Yes"")) + theme(legend.position = ""top"", plot.title = element_text(hjust = 0.5))
ggplot(data = full[!is.na(full$Survived), ], aes(Sex, fill = as.factor(Survived))) + geom_bar(position = ""fill"") + labs(x = ""Sex"") + ggtitle(""Survivals by the sex"") + scale_fill_discrete(name = ""Survived"", breaks = c(0, 1), labels = c(""No"", ""Yes"")) + theme(legend.position = ""top"", plot.title = element_text(hjust = 0.5))
p1 <- ggplot(data = full[!is.na(full$Survived), ], aes(as.factor(SibSp), fill = as.factor(Survived))) + geom_bar(position = ""fill"") + labs(x = ""Number of Siblings"") + ggtitle(""Survivals by the number of siblings/spouses"") + scale_fill_discrete(name = ""Survived"", breaks = c(0, 1), labels = c(""No"", ""Yes"")) + theme(legend.position = ""top"", plot.title = element_text(hjust = 0.5))
p2 <- ggplot(data = full[!is.na(full$Survived), ], aes(as.factor(Parch), fill = as.factor(Survived))) + geom_bar(position = ""fill"") + labs(x = ""Number of Parents/Children"") + ggtitle(""Survivals by the number of Parents/Children"") + scale_fill_discrete(name = ""Survived"", breaks = c(0, 1), labels = c(""No"", ""Yes"")) + theme(legend.position = ""top"", plot.title = element_text(hjust = 0.5))
p3 <- ggplot(data = full[!is.na(full$Survived), ], aes(as.factor(SibSp), fill = as.factor(Survived))) + geom_bar() + labs(x = ""Number of Siblings"") + ggtitle(""Survivals by the number of siblings/spouses"") + scale_fill_discrete(name = ""Survived"", breaks = c(0, 1), labels = c(""No"", ""Yes"")) + theme(legend.position = ""top"", plot.title = element_text(hjust = 0.5))
p4 <- ggplot(data = full[!is.na(full$Survived), ], aes(as.factor(Parch), fill = as.factor(Survived))) + geom_bar() + labs(x = ""Number of Parents/Children"") + ggtitle(""Survivals by the number of Parents/Children"") + scale_fill_discrete(name = ""Survived"", breaks = c(0, 1), labels = c(""No"", ""Yes"")) + theme(legend.position = ""top"", plot.title = element_text(hjust = 0.5))
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
ggplot(data = full[!is.na(full$Survived), ], aes(x = Age, fill = as.factor(Survived))) + geom_histogram(bins = 15, aes(y = ..density..)) + labs(x = ""Number of Siblings"") + ggtitle(""Survivals by age"") + scale_fill_discrete(name = ""Survived"", breaks = c(0, 1), labels = c(""No"", ""Yes"")) + theme(legend.position = ""top"", plot.title = element_text(hjust = 0.5)) + stat_function(fun = dnorm, args = list(mean = mean(full$Age[full$Survived == ""0""]), sd = sd(full$Age[full$Survived == ""0""])), lwd = 1, col = ""red"") + 
    stat_function(fun = dnorm, args = list(mean = mean(full$Age[full$Survived == ""1""]), sd = sd(full$Age[full$Survived == ""1""])), lwd = 1, col = ""darkgreen"")
p5 <- ggplot(data = full[!is.na(full$Survived), ], aes(Embarked, fill = as.factor(Survived))) + geom_bar(position = ""fill"") + labs(x = ""Port of Embarkation"") + ggtitle(""Survivals by port of Embarkation"") + scale_fill_discrete(name = ""Survived"", breaks = c(0, 1), labels = c(""No"", ""Yes"")) + theme(legend.position = ""top"", plot.title = element_text(hjust = 0.5))
p6 <- ggplot(data = full[!is.na(full$Survived), ], aes(Embarked, fill = as.factor(Survived))) + geom_bar() + labs(x = ""Port of Embarkation"") + ggtitle(""Survivals by port of Embarkation"") + scale_fill_discrete(name = ""Survived"", breaks = c(0, 1), labels = c(""No"", ""Yes"")) + theme(legend.position = ""top"", plot.title = element_text(hjust = 0.5))
grid.arrange(p5, p6, ncol = 2)
head(full$Name, n = 10)
full$Title[grepl(""Mr\\."", full$Name, ignore.case = T)] <- ""Mr""
full$Title[grepl(""Miss\\.|Mlle\\.|Ms\\.|Mme\\."", full$Name, ignore.case = T)] <- ""Miss""
full$Title[grepl(""Mrs\\."", full$Name, ignore.case = T)] <- ""Mrs""
full$Title[grepl(""Master\\."", full$Name, ignore.case = T)] <- ""Master""
full$Title[grepl(""Don\\."", full$Name, ignore.case = T)] <- ""Rare""
full$Title[grepl(""Rev\\."", full$Name, ignore.case = T)] <- ""Rare""
full$Title[grepl(""Dr\\."", full$Name, ignore.case = T)] <- ""Rare""
full$Title[grepl(""Capt\\."", full$Name, ignore.case = T)] <- ""Rare""
full$Title[grepl(""Col\\."", full$Name, ignore.case = T)] <- ""Rare""
full$Title[grepl(""Sir\\."", full$Name, ignore.case = T)] <- ""Rare""
full$Title[grepl(""Major\\."", full$Name, ignore.case = T)] <- ""Rare""
full$Title[grepl(""Jonkheer\\."", full$Name, ignore.case = T)] <- ""Rare""
full$Title[grepl(""Countess\\."", full$Name, ignore.case = T)] <- ""Rare""
full$Title[grepl(""Lady\\."", full$Name, ignore.case = T)] <- ""Rare""
full$Title[grepl(""Dona\\."", full$Name, ignore.case = T)] <- ""Rare""
full$Title <- as.factor(full$Title)
summary(full$Title)
ggplot(data = full[!is.na(full$Survived), ], aes(as.factor(Title), fill = as.factor(Survived))) + geom_bar(position = ""fill"") + labs(x = ""Title"") + ggtitle(""Survivals by the Title"") + scale_fill_discrete(name = ""Survived"", breaks = c(0, 1), labels = c(""No"", ""Yes"")) + theme(legend.position = ""top"", plot.title = element_text(hjust = 0.5))
full %>% group_by(Title) %>% summarise(mean.age = mean(Age))
head(full$Ticket)
full$Ticket.n[grepl(""^1"", gsub(""[^0-9\\|]"", """", full$Ticket))] <- 1
full$Ticket.n[grepl(""^2"", gsub(""[^0-9\\|]"", """", full$Ticket))] <- 2
full$Ticket.n[grepl(""^3"", gsub(""[^0-9\\|]"", """", full$Ticket))] <- 3
full$Ticket.n[grepl(""^4"", gsub(""[^0-9\\|]"", """", full$Ticket))] <- 4
full$Ticket.n[grepl(""^5"", gsub(""[^0-9\\|]"", """", full$Ticket))] <- 5
full$Ticket.n[grepl(""^6"", gsub(""[^0-9\\|]"", """", full$Ticket))] <- 6
full$Ticket.n[grepl(""^7"", gsub(""[^0-9\\|]"", """", full$Ticket))] <- 7
full$Ticket.n[grepl(""^8"", gsub(""[^0-9\\|]"", """", full$Ticket))] <- 8
full$Ticket.n[grepl(""^9"", gsub(""[^0-9\\|]"", """", full$Ticket))] <- 9
full$Ticket.n[full$Ticket == ""LINE""] <- ""Line""
full$Ticket.n <- as.factor(full$Ticket.n)
summary(full$Ticket.n)
p7 <- ggplot(data = full[!is.na(full$Survived), ], aes(as.factor(Ticket.n), fill = as.factor(Survived))) + geom_bar(position = ""fill"") + labs(x = ""Ticket Number"") + ggtitle(""Survivals by the Ticket"") + scale_fill_discrete(name = ""Survived"", breaks = c(0, 1), labels = c(""No"", ""Yes"")) + theme(legend.position = ""top"", plot.title = element_text(hjust = 0.5))
p8 <- ggplot(data = full[!is.na(full$Survived), ], aes(as.factor(Ticket.n), fill = as.factor(Survived))) + geom_bar() + labs(x = ""Ticket Number"") + ggtitle(""Survivals by the Ticket"") + scale_fill_discrete(name = ""Survived"", breaks = c(0, 1), labels = c(""No"", ""Yes"")) + theme(legend.position = ""top"", plot.title = element_text(hjust = 0.5))
p9 <- ggplot(data = full[!is.na(full$Survived), ], aes(as.factor(Ticket.n), fill = as.factor(Survived))) + geom_bar() + labs(x = ""Ticket Number"") + ggtitle(""Survivals by the Ticket"") + scale_fill_discrete(name = ""Survived"", breaks = c(0, 1), labels = c(""No"", ""Yes"")) + theme(legend.position = ""top"", plot.title = element_text(hjust = 0.5)) + facet_grid(. ~ Pclass)
grid.arrange(p7, p8, p9, ncol = 3)
full$Age.n[full$Age < 5] <- ""<5""
full$Age.n[full$Age < 10 & full$Age >= 5] <- ""5-10""
full$Age.n[full$Age < 20 & full$Age >= 10] <- ""10-20""
full$Age.n[full$Age < 25 & full$Age >= 20] <- ""20-25""
full$Age.n[full$Age < 28 & full$Age >= 25] <- ""25-27""
full$Age.n[full$Age < 30 & full$Age >= 28] <- ""28-29""
full$Age.n[full$Age < 33 & full$Age >= 30] <- ""30-31""
full$Age.n[full$Age < 35 & full$Age >= 33] <- ""32-34""
full$Age.n[full$Age < 40 & full$Age >= 35] <- ""35-40""
full$Age.n[full$Age < 50 & full$Age >= 40] <- ""40-50""
full$Age.n[full$Age < 100 & full$Age >= 50] <- ""50+""
full$Age.n <- as.factor(full$Age.n)
full$Age.n <- factor(full$Age.n, levels = c(""<5"", ""5-10"", ""10-20"", ""20-25"", ""25-27"", ""28-29"", ""30-31"", ""32-34"", ""35-40"", ""40-50"", ""50+""))
p10 <- ggplot(data = full[!is.na(full$Survived), ], aes(as.factor(Age.n), fill = as.factor(Survived))) + geom_bar(position = ""fill"") + labs(x = ""Age groups"") + ggtitle(""Survivals by the Age groups"") + scale_fill_discrete(name = ""Survived"", breaks = c(0, 1), labels = c(""No"", ""Yes"")) + theme(legend.position = ""top"", plot.title = element_text(hjust = 0.5))
p11 <- ggplot(data = full[!is.na(full$Survived), ], aes(as.factor(Age.n), fill = as.factor(Survived))) + geom_histogram(stat = ""count"") + labs(x = ""Age groups"") + ggtitle(""Survivals by the Age groups"") + scale_fill_discrete(name = ""Survived"", breaks = c(0, 1), labels = c(""No"", ""Yes"")) + theme(legend.position = ""top"", plot.title = element_text(hjust = 0.5))
grid.arrange(p10, p11, ncol = 2)
full$Kid <- ""Adult""
full$Kid[full$Age < 14] <- ""Kid""
full$Kid <- as.factor(full$Kid)
ggplot(data = full[!is.na(full$Survived), ], aes(Kid, fill = as.factor(Survived))) + geom_bar(position = ""fill"") + labs(x = ""Kid or Adult"") + ggtitle(""Survivals by Kid/Adult"") + scale_fill_discrete(name = ""Survived"", breaks = c(0, 1), labels = c(""No"", ""Yes"")) + theme(legend.position = ""top"", plot.title = element_text(hjust = 0.5))
full$FamilySize <- full$SibSp + full$Parch
full$FamilySize <- as.factor(full$FamilySize)
full$Family <- ifelse(as.numeric(full$FamilySize) >= 2, ""Yes"", ""No"")
full$Family <- as.factor(full$Family)
p12 <- ggplot(data = full[!is.na(full$Survived), ], aes(FamilySize, fill = as.factor(Survived))) + geom_bar(position = ""fill"") + labs(x = ""Familty Size"") + ggtitle(""Survivals by Family Size"") + scale_fill_discrete(name = ""Survived"", breaks = c(0, 1), labels = c(""No"", ""Yes"")) + theme(legend.position = ""top"", plot.title = element_text(hjust = 0.5))
p13 <- ggplot(data = full[!is.na(full$Survived), ], aes(as.factor(Family), fill = as.factor(Survived))) + geom_bar(position = ""fill"") + labs(x = ""Family aboard"") + ggtitle(""Survivals by Family Aboard"") + scale_fill_discrete(name = ""Survived"", breaks = c(0, 1), labels = c(""No"", ""Yes"")) + theme(legend.position = ""top"", plot.title = element_text(hjust = 0.5))
grid.arrange(p12, p13, ncol = 2)
train <- full[1:891, ]
test <- full[892:1309, ]
fullIndex <- createDataPartition(train$Survived, p = 0.8, list = FALSE)
data_train <- train[fullIndex, ]
data_val <- train[-fullIndex, ]
control <- trainControl(method = ""cv"", number = 10)
metric <- ""Accuracy""
set.seed(7)
fit.lda <- train(as.factor(Survived) ~ Pclass + Title + Age + Fare, data = data_train, method = ""lda"", metric = metric, trControl = control)
fit.lda
set.seed(7)
fit.cart <- train(as.factor(Survived) ~ Pclass + Title + Age + Fare, data = data_train, method = ""rpart"", metric = metric, trControl = control)
fit.cart
set.seed(7)
fit.knn <- train(as.factor(Survived) ~ Pclass + Title + Age + Fare, data = data_train, method = ""knn"", metric = metric, trControl = control)
fit.knn
set.seed(7)
fit.svm <- train(as.factor(Survived) ~ Pclass + Title + Age + Fare, data = data_train, method = ""svmRadial"", metric = metric, trControl = control)
fit.svm
set.seed(7)
fit.rf <- train(as.factor(Survived) ~ Pclass + Title + Age + Fare, data = data_train, method = ""rf"", metric = metric, trControl = control)
fit.rf
set.seed(7)
fit.glm <- train(as.factor(Survived) ~ Pclass + Title + Age + Fare, data = data_train, method = ""glm"", metric = metric, trControl = control)
fit.glm
results <- resamples(list(lda = fit.lda, cart = fit.cart, knn = fit.knn, svm = fit.svm, rf = fit.rf, glm = fit.glm))
summary(results)
dotplot(results)
set.seed(7)
fit.rf1 <- randomForest(as.factor(Survived) ~ Pclass + Title + Age + Fare + Sex + FamilySize + Ticket.n + Family, data = data_train, ntree = 50)
fit.rf1
(fit.rf1$confusion[1, 1] + fit.rf1$confusion[2, 2])/714
confusionMatrix(predict(fit.rf, data_val), data_val$Survived)
confusionMatrix(predict(fit.svm, data_val), data_val$Survived)
confusionMatrix(predict(fit.cart, data_val), data_val$Survived)
fit.final <- randomForest(as.factor(Survived) ~ Pclass + Title + Age + Fare + Sex + FamilySize + Ticket.n + Family, data = train, ntree = 50)
predictions <- predict(fit.final, test)
x <- cbind(test$PassengerId, as.data.frame(predictions))
colnames(x) <- c(""PassengerID"", ""Survived"")
write.csv(x, ""submission.csv"", row.names = F)",1,0,1,0,0,0,0,1,0,0,0,0,0,1
28,sawajid-titanic-test,0.648,"['data.frame', 'library', 'rep', 'summary', 'read.csv', 'write.csv']","['randomForest', 'base']",0.266913175582886,"['write.csv', 'data.frame', 'read.csv', 'summary', 'library', 'rep']",[],"['zhaotianjing-titanic', 'sudheer464-prediction-1-on-titanic-dataset', 'scout16-titanic-disaster-in-r', 'jerlinraj-titanic-machine-learning-from-disaster', 'mihaque313-first-submission-to-titanic-problem', 'amodi8-titanic-exploring-survival-using-machine-learning', 'stevencahill-titanic-machine-learning-from-disaster', 'acrespop-titanic1', 'ivanbaj-part-2-titanic-encounters-vowpal-wabbit-and-r', 'liudj2008-titanic']","[0.7807151059767842, 0.7471574387017648, 0.6469218328364599, 0.6297644098191341, 0.6086455979533469, 0.5241393142732443, 0.5193010489330236, 0.4409084208319816, 0.41120320603795557, 0.39984369468613745]","{'package:base': ['data.frame', 'library', 'rep', 'summary'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""data.frame"", ""library"", ""rep"", ""summary""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase dataframe library rep summary packageutils readcsv writecsv,"library(randomForest)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
summary(train)
test$Survived <- rep(0, 418)
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = ""submit1.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
29,meggles-titanic-svm-submission-1-0,0.7559999999999999,"['predict', 'filter', 'as.matrix', 'mean', 'cbind', 'discretize', 'as.character', 'as.data.frame', 'as.numeric', 'c', 'gsub', 'ifelse', 'is.na', 'library', 'names', 'nchar', 'options', 'mutate', 'select', 'svm', 'complete', 'mice', 'randomForest', 'read_csv', 'model.matrix', 'str_detect', 'str_locate', 'str_sub', 'write.csv', 'xgboost']","['ggplot2', 'caret', 'readr', 'dplyr', 'mice', 'stringr', 'arules', 'corrplot', 'randomForest', 'e1071', 'xgboost', 'base']",3.1494159698486297,"['complete', 'mean', 'discretize', 'nchar', 'svm', 'as.character', 'is.na', 'names', 'options', 'xgboost', 'filter', 'mice', 'as.matrix', 'gsub', 'str_detect', 'model.matrix', 'str_locate', 'randomForest', 'as.data.frame', 'read_csv', 'c', 'mutate', 'as.numeric', 'ifelse', 'predict', 'write.csv', 'str_sub', 'library', 'cbind', 'select']",[],"['meggles-titanic-svm-submission-1-0', 'zahraatashgahy-r-titanic-1', 'cbrioso-titanic-rf', 'paulocressoni-titanic-using-stepwise-linear-regression', 'kasturimitra-titanic', 'ezhilvelme-titanic-neural-network-c-4-2', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'liudj2008-titanic', 'liudj2008-fork-of-titanic']","[0.9999999999999998, 0.18696333524250347, 0.16659336266540686, 0.134525086247416, 0.13383798077024384, 0.132885116474106, 0.12870403801768443, 0.12870403801768443, 0.12263509525618282, 0.12234691291664845]","{'c(""package:arules"", ""package:stats"")': ['predict'], 'c(""package:dplyr"", ""package:stats"")': ['filter'], 'c(""package:Matrix"", ""package:base"")': ['as.matrix', 'mean'], 'c(""package:mice"", ""package:base"")': ['cbind'], 'package:arules': ['discretize'], 'package:base': ['as.character', 'as.data.frame', 'as.numeric', 'c', 'gsub', 'ifelse', 'is.na', 'library', 'names', 'nchar', 'options'], 'package:dplyr': ['mutate', 'select'], 'package:e1071': ['svm'], 'package:mice': ['complete', 'mice'], 'package:randomForest': ['randomForest'], 'package:readr': ['read_csv'], 'package:stats': ['model.matrix'], 'package:stringr': ['str_detect', 'str_locate', 'str_sub'], 'package:utils': ['write.csv'], 'package:xgboost': ['xgboost']}","{""c(""package:arules"", ""package:stats"")"": [""predict""], ""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""c(""package:Matrix"", ""package:base"")"": [""as.matrix"", ""mean""], ""c(""package:mice"", ""package:base"")"": [""cbind""], ""package:arules"": [""discretize""], ""package:base"": [""as.character"", ""as.data.frame"", ""as.numeric"", ""c"", ""gsub"", ""ifelse"", ""is.na"", ""library"", ""names"", ""nchar"", ""options""], ""package:dplyr"": [""mutate"", ""select""], ""package:e1071"": [""svm""], ""package:mice"": [""complete"", ""mice""], ""package:randomForest"": [""randomForest""], ""package:readr"": [""read_csv""], ""package:stats"": [""model.matrix""], ""package:stringr"": [""str_detect"", ""str_locate"", ""str_sub""], ""package:utils"": [""write.csv""], ""package:xgboost"": [""xgboost""]}",cpackagearules packagestats predict cpackagedplyr packagestats filter cpackageMatrix packagebase asmatrix mean cpackagemice packagebase cbind packagearules discretize packagebase ascharacter asdataframe asnumeric c gsub ifelse isna library names nchar options packagedplyr mutate select packagee1071 svm packagemice complete mice packagerandomForest randomForest packagereadr readcsv packagestats modelmatrix packagestringr strdetect strlocate strsub packageutils writecsv packagexgboost xgboost,"library(""ggplot2"")
library(""caret"")
library(""readr"")
library(""dplyr"")
library(""mice"")
library(""stringr"")
library(""arules"")
library(""corrplot"")
library(""randomForest"")
library(""e1071"")
options(scipen = 999)
train <- read_csv(""../input/train.csv"")
test <- read_csv(""../input/test.csv"")
test_ids <- test$PassengerId
train <- mutate(train, Cabin_Deck = str_sub(Cabin, 1, 1), Ticket_Digit = nchar(Ticket), Ticket_Alpha = str_detect(Ticket, ""[[:alpha:]]""), Family_Size = Parch + SibSp, Name_Family = gsub("",.*$"", """", Name), Title = str_sub(Name, str_locate(Name, "","")[, 1] + 2, str_locate(Name, ""\\."")[, 1] - 1))
train_sub <- select(train, Survived, Pclass, Sex, Age, SibSp, Parch, Fare, Embarked, Cabin_Deck, Ticket_Digit, Ticket_Alpha, Name_Family, Title, Family_Size)
train_mm <- model.matrix(~Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Cabin_Deck + Title + Family_Size + Ticket_Alpha, train_sub)
train_imp <- mice(train_sub, m = 1, method = ""cart"", seed = 5, printFlag = F)
train <- complete(train_imp)
train <- mutate(train, Cabin_Deck_i = ifelse(!is.na(Cabin_Deck), Cabin_Deck, ifelse(Pclass == 1, ""ABCD"", ifelse(Pclass == 2, ""E"", ""F""))))
train_Pclass1 <- filter(train, Pclass == 1)
cuts <- discretize(train_Pclass1$Fare, method = ""cluster"", categories = 4, ordered = T, onlycuts = T)
train <- mutate(train, Cabin_Deck_i2 = ifelse(Cabin_Deck_i != ""ABCD"", Cabin_Deck_i, ifelse(Fare < cuts[2], ""D"", ifelse(Fare < cuts[3], ""C"", ifelse(Fare < cuts[4], ""B"", ""A"")))))
train <- mutate(train, Cabin_Deck_i3 = ifelse(Cabin_Deck_i2 == ""A"", 1, ifelse(Cabin_Deck_i2 == ""B"", 2, ifelse(Cabin_Deck_i2 == ""C"", 3, ifelse(Cabin_Deck_i2 == ""D"", 4, ifelse(Cabin_Deck_i2 == ""E"", 5, ifelse(Cabin_Deck_i2 == ""F"", 6, ifelse(Cabin_Deck_i2 == ""G"", 7, 8))))))))
train <- mutate(train, Embarked = ifelse(is.na(Embarked), ""S"", Embarked))
test <- mutate(test, Cabin_Deck = str_sub(Cabin, 1, 1), Ticket_Digit = nchar(Ticket), Ticket_Alpha = str_detect(Ticket, ""[[:alpha:]]""), Family_Size = Parch + SibSp, Name_Family = gsub("",.*$"", """", Name), Title = str_sub(Name, str_locate(Name, "","")[, 1] + 2, str_locate(Name, ""\\."")[, 1] - 1))
test_sub <- select(test, Pclass, Sex, Age, SibSp, Parch, Fare, Embarked, Cabin_Deck, Ticket_Digit, Ticket_Alpha, Name_Family, Title, Family_Size)
test_mm <- model.matrix(~Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Cabin_Deck + Title + Family_Size + Ticket_Alpha, test_sub)
test_imp <- mice(test_sub, m = 1, method = ""cart"", seed = 5, printFlag = F)
test <- complete(test_imp)
test <- mutate(test, Cabin_Deck_i = ifelse(!is.na(Cabin_Deck), Cabin_Deck, ifelse(Pclass == 1, ""ABCD"", ifelse(Pclass == 2, ""E"", ""F""))))
test_Pclass1 <- filter(test, Pclass == 1)
cuts <- discretize(test_Pclass1$Fare, method = ""cluster"", categories = 4, ordered = T, onlycuts = T)
test <- mutate(test, Cabin_Deck_i2 = ifelse(Cabin_Deck_i != ""ABCD"", Cabin_Deck_i, ifelse(Fare < cuts[2], ""D"", ifelse(Fare < cuts[3], ""C"", ifelse(Fare < cuts[4], ""B"", ""A"")))))
test <- mutate(test, Cabin_Deck_i3 = ifelse(Cabin_Deck_i2 == ""A"", 1, ifelse(Cabin_Deck_i2 == ""B"", 2, ifelse(Cabin_Deck_i2 == ""C"", 3, ifelse(Cabin_Deck_i2 == ""D"", 4, ifelse(Cabin_Deck_i2 == ""E"", 5, ifelse(Cabin_Deck_i2 == ""F"", 6, ifelse(Cabin_Deck_i2 == ""G"", 7, 8))))))))
test <- mutate(test, Embarked = ifelse(is.na(Embarked), ""S"", Embarked))
test <- mutate(test, Cabin_Deck_i2 = ifelse(!(Cabin_Deck_i2 %in% as.character(train$Cabin_Deck_i2)), ""F"", Cabin_Deck_i2), Title = ifelse(!(Title %in% as.character(train$Title)), ifelse(Sex == ""male"", ""Mr."", ""Mrs.""), Title), Ticket_Digit = as.numeric(Ticket_Digit))
train_svm <- select(train, Survived, Pclass, Sex, Age, SibSp, Parch, Fare, Embarked, Ticket_Digit, Ticket_Alpha, Family_Size)
test_svm <- select(test, Pclass, Sex, Age, SibSp, Parch, Fare, Embarked, Ticket_Digit, Ticket_Alpha, Family_Size)
svm_model <- svm(Survived ~ ., data = train_svm)
svm_pred <- predict(svm_model, test_svm)
svm_pred_complete <- as.data.frame(cbind(test_ids, svm_pred))
svm_pred_complete <- svm_pred_complete %>% mutate(svm_pred = ifelse(svm_pred >= 0.5, 1, 0))
mean(svm_pred_complete$svm_pred)
names(svm_pred_complete) <- c(""PassengerId"", ""Survived"")
write.csv(svm_pred_complete, ""titanic_pred.csv"", row.names = F)
train_rf <- train %>% select(Survived, Pclass, Age, SibSp, Parch, Family_Size, Ticket_Digit, Fare)
rf_model <- randomForest(Survived ~ Pclass + Age + SibSp + Parch + Family_Size + Ticket_Digit + Fare, data = train_rf)
test_rf <- test %>% select(Pclass, Age, SibSp, Parch, Family_Size, Ticket_Digit, Fare)
rf_pred <- predict(rf_model, test_rf)
rf_pred_complete <- as.data.frame(cbind(test_ids, rf_pred))
rf_pred_complete <- rf_pred_complete %>% mutate(rf_pred = ifelse(rf_pred >= 0.5, 1, 0))
mean(rf_pred_complete$rf_pred)
names(rf_pred_complete) <- c(""PassengerId"", ""Survived"")
write.csv(rf_pred_complete, ""titanic_pred_rf.csv"", row.names = F)
library(""xgboost"")
xgb_train <- as.matrix(train_rf)
xgb_test <- as.matrix(test_rf)
xgb_model <- xgboost(data = xgb_train, label = xgb_train[, 1], booster = ""gblinear"", max_depth = 7, eta = 0.1, nthread = 2, nrounds = 5, objective = ""binary:logistic"")
xgb_pred <- predict(xgb_model, xgb_test)
xgb_pred_complete <- as.data.frame(cbind(test_ids, xgb_pred))
xgb_pred_complete <- xgb_pred_complete %>% mutate(xgb_pred = ifelse(xgb_pred >= 0.5, 1, 0))
mean(xgb_pred_complete$xgb_pred)
names(xgb_pred_complete) <- c(""PassengerId"", ""Survived"")
write.csv(xgb_pred_complete, ""titanic_pred_xgb.csv"", row.names = F)",1,0,1,1,0,0,0,1,1,0,0,1,0,0
30,nashyegi-who-all-survived-the-titanic,0.773,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.data.frame', 'as.integer', 'c', 'ceiling', 'data.frame', 'factor', 'is.na', 'is.null', 'length', 'levels', 'library', 'list', 'matrix', 'mean', 'names', 'ncol', 'nrow', 'print', 'rbind', 'rep', 'sample', 'seq', 'set.seed', 'substr', 'sum', 'system', 'table', 'which', 'aes', 'geom_bar', 'geom_histogram', 'ggplot', 'randomForest', 'na.omit', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['ggplot2', 'readr', 'randomForest', 'base']",1.93133497238159,"['nrow', 'list', 'mean', 'which', 'is.na', 'levels', 'names', 'print', 'ncol', 'na.omit', 'rep', 'geom_histogram', 'str', 'set.seed', 'factor', 'as.integer', 'matrix', 'geom_bar', 'length', 'read.csv', 'table', 'randomForest', 'as.data.frame', 'c', 'aes', 'rbind', 'is.null', 'sample', 'sum', 'predict', 'write.csv', 'seq', 'data.frame', 'ggplot', 'head', 'substr', 'user defined', 'ceiling', 'library', 'system']",[],"['youhe2482-titanic-a-very-first-step', 'nshrest-titanic-a-very-first-step-54f223', 'xliang-titanic-survival-prediction', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic', 'cdeotte-titanic-deep-net-0-82296']","[0.6316655060516624, 0.6316655060516624, 0.5800083250531682, 0.3232034685439643, 0.3232034685439643, 0.3186789664511639, 0.3186789664511639, 0.29837100992900584, 0.29837100992900584, 0.228509510830309]","{'character(0)': ['grid.layout', 'grid.newpage', 'multiplot', 'pushViewport', 'viewport'], 'package:base': ['as.data.frame', 'as.integer', 'c', 'ceiling', 'data.frame', 'factor', 'is.na', 'is.null', 'length', 'levels', 'library', 'list', 'matrix', 'mean', 'names', 'ncol', 'nrow', 'print', 'rbind', 'rep', 'sample', 'seq', 'set.seed', 'substr', 'sum', 'system', 'table', 'which'], 'package:ggplot2': ['aes', 'geom_bar', 'geom_histogram', 'ggplot'], 'package:randomForest': ['randomForest'], 'package:stats': ['na.omit', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""character(0)"": [""grid.layout"", ""grid.newpage"", ""multiplot"", ""pushViewport"", ""viewport""], ""package:base"": [""as.data.frame"", ""as.integer"", ""c"", ""ceiling"", ""data.frame"", ""factor"", ""is.na"", ""is.null"", ""length"", ""levels"", ""library"", ""list"", ""matrix"", ""mean"", ""names"", ""ncol"", ""nrow"", ""print"", ""rbind"", ""rep"", ""sample"", ""seq"", ""set.seed"", ""substr"", ""sum"", ""system"", ""table"", ""which""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""geom_histogram"", ""ggplot""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""na.omit"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",character0 gridlayout gridnewpage multiplot pushViewport viewport packagebase asdataframe asinteger c ceiling dataframe factor isna isnull length levels library list matrix mean names ncol nrow print rbind rep sample seq setseed substr sum system table which packageggplot2 aes geombar geomhistogram ggplot packagerandomForest randomForest packagestats naomit predict packageutils head readcsv str writecsv,"library(ggplot2)
library(readr)
system(""ls ../input"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
test$Survived <- NA
allData <- rbind(train, test)
head(allData, n = 3)
str(allData)
multiplot <- function(..., plotlist = NULL, file, cols = 1, layout = NULL) {
    library(grid)
    plots <- c(list(...), plotlist)
    numPlots = length(plots)
    if (is.null(layout)) {
        layout <- matrix(seq(1, cols * ceiling(numPlots/cols)), ncol = cols, nrow = ceiling(numPlots/cols))
    }
    if (numPlots == 1) {
        print(plots[[1]])
    }
    else {
        grid.newpage()
        pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
        for (i in 1:numPlots) {
            matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
            print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row, layout.pos.col = matchidx$col))
        }
    }
}
genderImpact <- data.frame(table(allData$Sex, allData$Survived))
names(genderImpact) <- c(""Sex"", ""Survived"", ""Count"")
sexVsSurvivedGraph <- ggplot(genderImpact, aes(x = Sex, y = Count, fill = Survived))
p1 <- sexVsSurvivedGraph + geom_bar(stat = ""identity"")
pClassImpact <- data.frame(table(allData$Pclass, allData$Survived))
names(pClassImpact) <- c(""Pclass"", ""Survived"", ""Count"")
pClassVsSurvivedGraph <- ggplot(pClassImpact, aes(x = Pclass, y = Count, fill = Survived))
p2 <- pClassVsSurvivedGraph + geom_bar(stat = ""identity"")
sibSpImpact <- data.frame(table(allData$SibSp + allData$Parch, allData$Survived))
names(sibSpImpact) <- c(""FamilyMembers"", ""Survived"", ""Count"")
sibSpVsSurvivedGraph <- ggplot(sibSpImpact, aes(x = FamilyMembers, y = Count, fill = Survived))
p3 <- sibSpVsSurvivedGraph + geom_bar(stat = ""identity"")
ageImpact <- data.frame(Age = allData$Age, Survived = allData$Survived)
p4 <- ggplot(ageImpact, aes(Age, fill = factor(Survived))) + geom_histogram()
embarkedImpact <- data.frame(table(allData$Survived, allData$Embarked))
names(embarkedImpact) <- c(""Survived"", ""Embarked"", ""Count"")
embarkVsSurvivedGraph <- ggplot(embarkedImpact, aes(x = Embarked, y = Count, fill = Survived))
p5 <- embarkVsSurvivedGraph + geom_bar(stat = ""identity"")
cabinImpact <- data.frame(table(allData$Survived, substr(allData$Cabin, 0, 1)))
names(cabinImpact) <- c(""Survived"", ""Cabin"", ""Count"")
cabinVsSurvivedGraph <- ggplot(cabinImpact, aes(x = Cabin, y = Count, fill = Survived))
p6 <- cabinVsSurvivedGraph + geom_bar(stat = ""identity"")
multiplot(p1, p2, p3, p4, p5, p6, cols = 2)
age <- allData$Age
n = length(age)
set.seed(123)
for (i in 1:n) {
    if (is.na(age[i])) {
        age[i] = sample(na.omit(allData$Age), 1)
    }
}
f.survived = train$Survived
t.survived = test$Survived
f.age = age[1:891]
t.age = age[892:1309]
f.cabin = substr(allData$Cabin, 0, 1)[1:891]
t.cabin = substr(allData$Cabin, 0, 1)[892:1309]
family <- allData$SibSp + allData$Parch
f.family = family[1:891]
t.family = family[892:1309]
f.pclass = train$Pclass
t.pclass = test$Pclass
f.sex = train$Sex
t.sex = test$Sex
f.embarked = allData$Embarked[1:891]
t.embarked = allData$Embarked[892:1309]
new_train = data.frame(survived = f.survived, age = f.age, sex = f.sex, embarked = f.embarked, family = f.family, cabin = f.cabin, pclass = f.pclass)
library(""randomForest"")
set.seed(123)
fit_rf <- randomForest(factor(survived) ~ age + sex + embarked + family + cabin + pclass, data = new_train)
rf.fitted = predict(fit_rf)
ans_rf = rep(NA, 891)
for (i in 1:891) {
    ans_rf[i] = as.integer(rf.fitted[[i]]) - 1
}
mean(ans_rf == train$Survived)
table(ans_rf)
a = sum(ans_rf == 1 & f.survived == 1)
b = sum(ans_rf == 1 & f.survived == 0)
c = sum(ans_rf == 0 & f.survived == 1)
d = sum(ans_rf == 0 & f.survived == 0)
data.frame(a, b, c, d)
test_data_set <- data.frame(survived = t.survived, age = t.age, sex = t.sex, embarked = t.embarked, family = t.family, cabin = t.cabin, pclass = t.pclass)
levels(test_data_set$survived) <- levels(new_train$survived)
levels(test_data_set$age) <- levels(new_train$age)
levels(test_data_set$sex) <- levels(new_train$sex)
levels(test_data_set$embarked) <- levels(new_train$embarked)
levels(test_data_set$family) <- levels(new_train$family)
levels(test_data_set$cabin) <- levels(new_train$cabin)
levels(test_data_set$pclass) <- levels(new_train$pclass)
rf_predict = predict(fit_rf, newdata = test_data_set)
ans_rf_predict = rep(NA, 418)
for (i in 1:418) {
    ans_rf_predict[i] = as.integer(rf_predict[[i]]) - 1
}
table(ans_rf_predict)
endResult <- data.frame(PassengerId = test$PassengerId, Survived = ans_rf_predict)
write.csv(endResult, file = ""SurvivingTheTitanicResult.csv"", row.names = F)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
31,bubblride-titanic-e1071-c-svc-five-features,0.6629999999999999,"['as.factor', 'ifelse', 'is.na', 'library', 'list.files', 'log', 'options', 'set.seed', 'unname', 'which.max', 'confusionMatrix', 'createDataPartition', 'mutate', 'select', 'svm', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['e1071', 'caret', 'tidyverse', 'base']",2.5577638149261497,"['which.max', 'svm', 'is.na', 'confusionMatrix', 'options', 'log', 'as.factor', 'str', 'set.seed', 'read.csv', 'mutate', 'ifelse', 'createDataPartition', 'predict', 'write.csv', 'list.files', 'unname', 'head', 'library', 'select']",[],"['bubblride-titanic-e1071-c-svc-fares-only', 'bubblride-titanic-e1071-nu-svc', 'seshadrikolluri-predicting-survival-on-titanic', 'mustfkeskin-titanic-xgboost', 'qianbi-titanic-voting-2', 'jaimisk-titanic-survival-logistic-regression', 'rkumar3147-exploring-survival-on-the-titanic1', 'vizcharlie-exploring-survival-on-the-titanic', 'qianbi-titanic-voting', 'samuelh-barebones-titanic-logistic-regression-test']","[0.6051153767373889, 0.6032463547792813, 0.27931393543275884, 0.18754298783320814, 0.15741321550547163, 0.1506971736192056, 0.1439940201246628, 0.1439940201246628, 0.13345414400310424, 0.13049984811793264]","{'package:base': ['as.factor', 'ifelse', 'is.na', 'library', 'list.files', 'log', 'options', 'set.seed', 'unname', 'which.max'], 'package:caret': ['confusionMatrix', 'createDataPartition'], 'package:dplyr': ['mutate', 'select'], 'package:e1071': ['svm'], 'package:stats': ['predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""package:base"": [""as.factor"", ""ifelse"", ""is.na"", ""library"", ""list.files"", ""log"", ""options"", ""set.seed"", ""unname"", ""which.max""], ""package:caret"": [""confusionMatrix"", ""createDataPartition""], ""package:dplyr"": [""mutate"", ""select""], ""package:e1071"": [""svm""], ""package:stats"": [""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",packagebase asfactor ifelse isna library listfiles log options setseed unname whichmax packagecaret confusionMatrix createDataPartition packagedplyr mutate select packagee1071 svm packagestats predict packageutils head readcsv str writecsv,"options(echo = FALSE)
library(e1071)
library(caret)
library(tidyverse)
list.files(path = ""../input"")
df_raw <- read.csv(""../input/train.csv"")
str(df_raw)
df <- df_raw %>% select(PassengerId, Survived, Fare, Pclass, Age, Sex, SibSp, Parch) %>% mutate(x1 = Fare/which.max(Fare), x2 = ifelse(Age <= 25, Age/25, 1 - (Age - 25)/Age), x3 = ifelse(Sex == ""male"", -1, 1), x4 = log(1 + SibSp) - log(1 + Parch), x5 = Parch/which.max(Parch))
set.seed(42)
idx_train <- createDataPartition(df$PassengerId, p = 0.5, list = FALSE, times = 1)
df_train <- df[idx_train, ]
df_valid <- df[-idx_train, ]
model <- svm(x = df_train %>% select(x1, x2, x3, x4, x5), y = as.factor(df_train$Survived), scale = FALSE, na.action = na.omit, type = ""C-classification"", kernel = ""radial"", gamma = 1, cost = 50)
yhat <- predict(model, df_valid %>% select(x1, x2, x3, x4, x5), na.action = na.exclude)
res <- confusionMatrix(as.factor(yhat), as.factor(df_valid$Survived))
acc <- unname(res$overall[1])
acc
df_test <- read.csv(""../input/test.csv"")
df_test <- df_test %>% select(PassengerId, Fare, Pclass, Age, Sex, SibSp, Parch) %>% mutate(x1 = Fare/which.max(Fare), x2 = ifelse(Age <= 25, Age/25, 1 - (Age - 25)/Age), x3 = ifelse(Sex == ""male"", -1, 1), x4 = log(1 + SibSp) - log(1 + Parch), x5 = Parch/which.max(Parch))
df_test[is.na(df_test)] <- 0
head(df_test)
yhat <- predict(model, df_test %>% select(x1, x2, x3, x4, x5))
res <- df_test %>% select(PassengerId) %>% mutate(Survived = yhat)
head(res)
write.csv(res, file = ""my_submission.csv"", row.names = F)",0,0,1,0,0,0,0,1,0,0,0,1,0,0
32,amuthand-a-titanic-unpredicted-disaster-predicted,0.7659999999999999,"['as.factor', 'c', 'colnames', 'data.frame', 'factor', 'getwd', 'gsub', 'ifelse', 'is.na', 'library', 'paste', 'prop.table', 'round', 'row.names', 'set.seed', 'summary', 'table', 'bind_rows', 'aes', 'coord_flip', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_hline', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'theme_grey', 'theme_base', 'theme_few', 'hist', 'legend', 'par', 'plot', 'complete', 'mice', 'importance', 'randomForest', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['dplyr', 'ggplot2', 'ggthemes', 'randomForest', 'mice', 'base']",4.13554692268372,"['labs', 'complete', 'median', 'coord_flip', 'is.na', 'scale_x_continuous', 'geom_boxplot', 'prop.table', 'theme_few', 'theme_base', 'as.factor', 'summary', 'round', 'mice', 'importance', 'hist', 'str', 'geom_hline', 'set.seed', 'gsub', 'factor', 'colnames', 'geom_bar', 'read.csv', 'table', 'par', 'randomForest', 'getwd', 'row.names', 'c', 'aes', 'theme_grey', 'paste', 'ifelse', 'geom_vline', 'plot', 'legend', 'predict', 'reorder', 'write.csv', 'bind_rows', 'data.frame', 'ggplot', 'geom_density', 'library']",[],"['amuthand-a-titanic-unpredicted-disaster-predicted', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'researchbigd-titanic-forkedfrommeganscript', 'msantos68-exploring-survival-on-the-titanic', 'tetyama-trial-titanic', 'mira5b-exploring-survival-on-the-titanic', 'jww001-exploring-survival-on-the-titanicqw']","[0.9999999999999999, 0.8190583815851162, 0.8184113161240284, 0.8184113161240284, 0.817112423591358, 0.8163036340402038, 0.8159132527473901, 0.8131042643034249, 0.8117456335979227, 0.8108626716092768]","{'package:base': ['as.factor', 'c', 'colnames', 'data.frame', 'factor', 'getwd', 'gsub', 'ifelse', 'is.na', 'library', 'paste', 'prop.table', 'round', 'row.names', 'set.seed', 'summary', 'table'], 'package:dplyr': ['bind_rows'], 'package:ggplot2': ['aes', 'coord_flip', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_hline', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'theme_grey'], 'package:ggthemes': ['theme_base', 'theme_few'], 'package:graphics': ['hist', 'legend', 'par', 'plot'], 'package:mice': ['complete', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""as.factor"", ""c"", ""colnames"", ""data.frame"", ""factor"", ""getwd"", ""gsub"", ""ifelse"", ""is.na"", ""library"", ""paste"", ""prop.table"", ""round"", ""row.names"", ""set.seed"", ""summary"", ""table""], ""package:dplyr"": [""bind_rows""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_hline"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""theme_grey""], ""package:ggthemes"": [""theme_base"", ""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""par"", ""plot""], ""package:mice"": [""complete"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase asfactor c colnames dataframe factor getwd gsub ifelse isna library paste proptable round rownames setseed summary table packagedplyr bindrows packageggplot2 aes coordflip geombar geomboxplot geomdensity geomhline geomvline ggplot labs scalexcontinuous themegrey packageggthemes themebase themefew packagegraphics hist legend par plot packagemice complete mice packagerandomForest importance randomForest packagestats median predict reorder packageutils readcsv str writecsv,"library(dplyr)
library(ggplot2)
library(ggthemes)
library(randomForest)
library(mice)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
full <- bind_rows(train, test)
str(train)
str(test)
str(full)
summary(full)
full$Survived <- as.factor((full$Survived))
full$Pclass <- as.factor(full$Pclass)
full$Embarked <- as.factor(full$Embarked)
full$title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$title, full$Survived)
table(full$Sex, full$title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$title[full$title == ""Mlle""] <- ""Miss""
full$title[full$title == ""Ms""] <- ""Miss""
full$title[full$title == ""Mme""] <- ""Mrs""
full$title[full$title %in% rare_title] <- ""Others""
full$title <- as.factor(full$title)
full$Family <- full$Parch + full$SibSp + 1
prop.table(table(full$Family, full$Survived), 1)
ggplot(full[1:891, ], aes(x = Family, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + theme_few()
full$FType <- ""NA""
full$FType <- ifelse(full$Family == 1, ""single"", ifelse(full$Family > 1 & full$Family <= 4, ""small"", ""Large""))
full$FType <- as.factor(full$FType)
prop.table(table(full$FType, full$Survived), 1)
ggplot(full[1:891, ], aes(x = FType, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"")
table(full$Sex, full$Survived)
prop.table(table(full$Sex, full$Survived), 1)
ggplot(full[1:891, ], aes(x = Sex, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"")
prop.table(table(full$Fare, full$Survived), 1)
ggplot(full[1:891, ], aes(x = Fare, fill = Survived)) + geom_density()
prop.table(table(full$Pclass, full$Survived), 1)
ggplot(full[1:891, ], aes(x = Pclass, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"")
full$Embarked <- as.factor(full$Embarked)
prop.table(table(full$Embarked))
ggplot(full, aes(x = Embarked, y = Fare, Fill = factor(Pclass))) + geom_boxplot() + geom_hline(yintercept = 80, colour = ""blue"") + theme_grey()
full[full$Embarked == """", ]$Embarked <- ""C""
full_embarked_s <- full[full$Embarked == ""S"" & full$Pclass == 3, ]
full_embarked_s <- full_embarked_s[!is.na(full_embarked_s$Fare), ]
ggplot(full_embarked_s, aes(x = Fare)) + geom_density(fill = ""lightblue"") + geom_vline(aes(xintercept = median(Fare)), color = ""Red"") + theme_base()
full$Fare[1044] <- median(full[full$Embarked == ""S"" & full$Pclass == 3, ]$Fare, na.rm = T)
set.seed(111)
mice_model <- mice(full[, c(""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Family"", ""title"", ""FType"", ""Embarked"")], method = ""rf"")
mice_output <- complete(mice_model)
par(mfrow = c(1, 2))
hist(mice_output$Age, main = ""Mice Output"")
hist(full$Age, main = ""OriginalData Output"")
full$Age <- mice_output$Age
summary(full)
full$Adulch <- ""NA""
full$Adulch <- ifelse(full$Age >= 18, ""Major"", ""Minor"")
full$Adulch <- as.factor(full$Adulch)
table(full$Adulch, full$Survived)
prop.table(table(full$Adulch, full$Survived), 1)
ggplot(full[1:891, ], aes(x = Adulch, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"")
full$SexAdulCh <- ""NA""
full$SexAdulCh <- paste(full$Sex, full$Adulch)
full$SexAdulCh <- as.factor(full$SexAdulCh)
prop.table(table(full$SexAdulCh, full$Survived), 1)
ggplot(full[1:891, ], aes(x = SexAdulCh, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"")
train1 <- full[1:891, ]
test1 <- full[892:1309, ]
set.seed(112)
str(train1)
rf_model <- randomForest(Survived ~ title + SexAdulCh + Pclass + Fare + Embarked + FType, train1)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
ggplot(varImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + labs(x = ""Variables"") + coord_flip() + theme_few()
Survival_Predicted <- data.frame(PassengerId = test1$PassengerId)
Survival_Predicted$Survived <- predict(rf_model, test1)
getwd()
write.csv(Survival_Predicted, file = ""titanic_random_forest_r_submission.csv"", row.names = FALSE)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
33,tosnaldo10-titanic-challange,0.754,"['as.character', 'as.factor', 'c', 'colnames', 'colSums', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'paste0', 'rbind', 'rep', 'round', 'row.names', 'set.seed', 'table', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'geom_bar', 'geom_text', 'ggplot', 'ggtitle', 'labs', 'xlab', 'ylab', 'theme_few', 'legend', 'mosaicplot', 'plot', 'importance', 'randomForest', 'predict', 'reorder', 'head', 'read.csv', 'str', 'write.csv']","['ggplot2', 'caret', 'dplyr', 'rpart', 'rpart.plot', 'car', 'e1071', 'randomForest', 'ggthemes', 'base']",3.2639632225036603,"['labs', 'geom_text', 'coord_flip', 'as.character', 'dense_rank', 'is.na', 'colSums', 'theme_few', 'as.factor', 'round', 'rep', 'mosaicplot', 'importance', 'str', 'desc', 'set.seed', 'gsub', 'xlab', 'factor', 'colnames', 'geom_bar', 'read.csv', 'paste0', 'table', 'randomForest', 'row.names', 'c', 'aes', 'ylab', 'mutate', 'rbind', 'reorder', 'plot', 'predict', 'legend', 'write.csv', 'ggtitle', 'data.frame', 'ggplot', 'head', 'library']",[],"['mrstepanovic-using-random-forests-to-identify-titanic-survivors', 'maitree-titanic-survival-list-using-random-forest', 'maitree-titanic-survival-list-using-classification', 'lokesharun-titanic', 'skhawaja-titanic-disaster-survival-099', 'paulocressoni-titanic-using-stepwise-linear-regression', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic']","[0.9563219607931239, 0.9231016571844601, 0.9162269429507242, 0.0904990741179077, 0.08891260981094191, 0.0878621073793522, 0.08403259935994185, 0.08403259935994185, 0.08378338029680032, 0.08378338029680032]","{'package:base': ['as.character', 'as.factor', 'c', 'colnames', 'colSums', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'paste0', 'rbind', 'rep', 'round', 'row.names', 'set.seed', 'table'], 'package:dplyr': ['dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'geom_bar', 'geom_text', 'ggplot', 'ggtitle', 'labs', 'xlab', 'ylab'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['legend', 'mosaicplot', 'plot'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['predict', 'reorder'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""package:base"": [""as.character"", ""as.factor"", ""c"", ""colnames"", ""colSums"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""library"", ""paste0"", ""rbind"", ""rep"", ""round"", ""row.names"", ""set.seed"", ""table""], ""package:dplyr"": [""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""geom_bar"", ""geom_text"", ""ggplot"", ""ggtitle"", ""labs"", ""xlab"", ""ylab""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""legend"", ""mosaicplot"", ""plot""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""predict"", ""reorder""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",packagebase ascharacter asfactor c colnames colSums dataframe factor gsub isna library paste0 rbind rep round rownames setseed table packagedplyr denserank desc mutate packageggplot2 aes coordflip geombar geomtext ggplot ggtitle labs xlab ylab packageggthemes themefew packagegraphics legend mosaicplot plot packagerandomForest importance randomForest packagestats predict reorder packageutils head readcsv str writecsv,"library(""ggplot2"")
library(""caret"")
library(""dplyr"")
library(""rpart"")
library(""rpart.plot"")
library(""car"")
library(""e1071"")
library(""randomForest"")
library(""ggthemes"")
train.tit <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test.tit <- read.csv(""../input/test.csv"", stringsAsFactors = F)
test.tit$Survived <- rep(0, 418)
str(test.tit)
combo <- rbind(train.tit, test.tit)
str(combo)
colSums(is.na(combo))
colSums(combo == """")
combo$Embarked[combo$Embarked == """"] = ""S""
table(combo$Embarked)
head(combo$Name)
names <- combo$Name
title <- gsub(""^.*, (.*?)\\..*$"", ""\\1"", names)
combo$title <- title
table(title)
combo$Name <- as.character(combo$Name)
combo$Name[1]
rare_title <- c(""Dona"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
combo$title[combo$title == ""Mlle""] <- ""Miss""
combo$title[combo$title == ""Ms""] <- ""Miss""
combo$title[combo$title == ""Mme""] <- ""Mrs""
combo$title[combo$title == ""Lady""] <- ""Miss""
combo$title[combo$title == ""Dona""] <- ""Miss""
combo$title[combo$title %in% rare_title] <- ""Rare Title""
ggplot(combo[1:891, ], aes(x = title, fill = factor(Survived))) + geom_bar() + ggtitle(""Title V/S Survival rate"") + xlab(""Title"") + ylab(""Total Count"") + labs(fill = ""Survived"")
str(combo)
combo$FamilySize <- combo$SibSp + combo$Parch + 1
combo$FamilySized[combo$FamilySize == 1] <- ""Single""
combo$FamilySized[combo$FamilySize < 5 & combo$FamilySize >= 2] <- ""Small""
combo$FamilySized[combo$FamilySize >= 5] <- ""Big""
combo$FamilySized = as.factor(combo$FamilySized)
ggplot(combo[1:891, ], aes(x = FamilySized, fill = factor(Survived))) + geom_bar() + ggtitle(""Family Size V/S Survival Rate"") + xlab(""FamilySize"") + ylab(""Total Count"") + labs(fill = ""Survived"")
str(combo)
ggplot(combo[1:891, ], aes(x = Pclass, fill = factor(Survived))) + geom_bar() + ggtitle(""Pclass v/s Survival Rate"") + xlab(""Pclass"") + ylab(""Total Count"") + labs(fill = ""Survived"")
ggplot(combo[1:891, ], aes(x = Sex, fill = factor(Survived))) + geom_bar() + ggtitle(""Sex v/s Survival Rate"") + xlab(""Sex"") + ylab(""Total Count"") + labs(fill = ""Survived"")
str(combo)
colSums(is.na(combo))
colSums(combo == """")
combo$Embarked = as.factor(combo$Embarked)
combo$Pclass = as.factor(combo$Pclass)
combo$title = as.factor(combo$title)
combo$Sex = as.factor(combo$Sex)
combo$Embarked = as.factor(combo$Embarked)
train <- combo[1:891, c(""Pclass"", ""title"", ""Sex"", ""Embarked"", ""FamilySized"", ""Survived"")]
test <- combo[892:1309, c(""Pclass"", ""title"", ""Sex"", ""Embarked"", ""FamilySized"", ""Survived"")]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + title + Sex, data = train)
plot(rf_model, ylim = c(0, 0.5))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test.tit$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
mosaicplot(table(train$Pclass, train$Sex, train$Embarked), main = ""Population by Sex"", shade = TRUE)",1,0,1,0,0,0,0,1,0,1,0,1,0,0
34,youhe2482-titanic-a-very-first-step,0.7659999999999999,"['as.factor', 'c', 'cbind', 'data.frame', 'is.na', 'library', 'mean', 'print', 'sapply', 'sum', 'corrplot', 'bind_rows', 'aes', 'facet_grid', 'geom_boxplot', 'geom_hline', 'ggplot', 'randomForest', 'cor', 'predict', 'read.csv', 'write.csv']","['ggplot2', 'readr', 'dplyr', 'corrplot', 'randomForest', 'base']",2.3143119812011697,"['mean', 'cor', 'is.na', 'corrplot', 'geom_boxplot', 'print', 'as.factor', 'sapply', 'geom_hline', 'read.csv', 'randomForest', 'c', 'aes', 'sum', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'ggplot', 'library', 'cbind', 'facet_grid']",[],"['youhe2482-titanic-a-very-first-step', 'nshrest-titanic-a-very-first-step-54f223', 'xliang-titanic-survival-prediction', 'nashyegi-who-all-survived-the-titanic', 'monikapeteva-who-all-survived-the-titanic-3b45d7', 'cdeotte-titanic-deep-net-0-82296', 'peggy88-titanic-data-eda-by-peggy', 'deltaforce126-titanic-randomforest', 'liudj2008-titanic', 'liudj2008-fork-of-titanic']","[0.9999999999999999, 0.9999999999999999, 0.8983394828279658, 0.6316655060516624, 0.6316655060516624, 0.3362886184588951, 0.10333260966045488, 0.09607183817424654, 0.0850765429706927, 0.08454947356209029]","{'package:base': ['as.factor', 'c', 'cbind', 'data.frame', 'is.na', 'library', 'mean', 'print', 'sapply', 'sum'], 'package:corrplot': ['corrplot'], 'package:dplyr': ['bind_rows'], 'package:ggplot2': ['aes', 'facet_grid', 'geom_boxplot', 'geom_hline', 'ggplot'], 'package:randomForest': ['randomForest'], 'package:stats': ['cor', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.factor"", ""c"", ""cbind"", ""data.frame"", ""is.na"", ""library"", ""mean"", ""print"", ""sapply"", ""sum""], ""package:corrplot"": [""corrplot""], ""package:dplyr"": [""bind_rows""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""geom_boxplot"", ""geom_hline"", ""ggplot""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""cor"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase asfactor c cbind dataframe isna library mean print sapply sum packagecorrplot corrplot packagedplyr bindrows packageggplot2 aes facetgrid geomboxplot geomhline ggplot packagerandomForest randomForest packagestats cor predict packageutils readcsv writecsv,"library(ggplot2)
library(readr)
library(dplyr)
library(corrplot)
library(randomForest)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE, header = TRUE, na.strings = c(""NA"", """"))
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE, header = TRUE, na.strings = c(""NA"", """"))
alldata <- bind_rows(train, test)
alldata$Survived <- as.factor(alldata$Survived)
alldata$Pclass <- as.factor(alldata$Pclass)
alldata$Sex <- as.factor(alldata$Sex)
alldata$Embarked <- as.factor(alldata$Embarked)
sapply(alldata, function(x) sum(is.na(x)))
cordata <- cbind(alldata$Pclass, alldata$Sex, alldata$Age, alldata$SibSp, alldata$Parch, alldata$Fare, alldata$Embarked, alldata$Survived)
corrplot(cor(cordata, use = ""complete.obs""), type = ""lower"", addCoef.col = ""grey"")
alldata[is.na(alldata$Fare) == TRUE, ]
mean(alldata$Fare[alldata$Pclass == 3 & alldata$Embarked == ""S""], na.rm = TRUE)
alldata$Fare[1044] <- mean(alldata$Fare[alldata$Pclass == 3 & alldata$Embarked == ""S""], na.rm = TRUE)
alldata[is.na(alldata$Embarked) == TRUE, ]
ggplot(data = alldata, aes(x = Embarked, y = Fare)) + geom_boxplot() + facet_grid(~Pclass) + geom_hline(aes(yintercept = 80), colour = ""#990000"", linetype = ""dashed"")
alldata$Embarked[c(62, 830)] <- ""C""
traindata <- alldata[1:891, ]
testdata <- alldata[892:1309, ]
rf.fit <- randomForest(Survived ~ Pclass + Sex + Fare + Embarked, data = traindata, importance = TRUE, proximity = TRUE)
print(rf.fit)
prediction.rf <- predict(rf.fit, testdata)
solution <- data.frame(PassengerID = testdata$PassengerId, Survived = prediction.rf)
write.csv(solution, file = ""Solution_rf.csv"", row.names = F)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
35,preritsaxena-fork-of-ml-basics-on-titanic-data,0.763,"['plot', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.factor', 'c', 'colnames', 'colSums', 'data.frame', 'is.na', 'levels', 'library', 'names', 'paste', 'set.seed', 'sort', 'sum', 'summary', 'table', 'confusionMatrix', 'sample.split', 'centralImputation', 'hist', 'md.pattern', 'importance', 'randomForest', 'plotcp', 'rpart', 'rpart.control', 'prp', 'predict', 'read.table', 'str', 'write.csv', 'aggr']","['tidyverse', 'dplyr', 'mice', 'VIM', 'DMwR', 'caTools', 'DMwR', 'rpart', 'rpart.plot', 'caret', 'randomForest', 'caret', 'base']",3.7893891334533705,"['md.pattern', 'is.na', 'levels', 'colSums', 'centralImputation', 'sort', 'names', 'confusionMatrix', 'rpart.control', 'plotcp', 'rpart', 'as.factor', 'summary', 'importance', 'hist', 'str', 'set.seed', 'prp', 'colnames', 'aggr', 'table', 'randomForest', 'c', 'paste', 'plot', 'sum', 'predict', 'write.csv', 'data.frame', 'read.table', 'user defined', 'library', 'sample.split']",[],"['sawajid-titanic-test', 'peggy88-titanic-data-eda-by-peggy', 'frank5547-my-solution-to-titanic-for-now', 'liudj2008-titanic', 'tsfitz-titanic', 'liudj2008-fork-of-titanic', 'klashgari-titanic', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'zakhumalo-fork-of-titanic-problem-attempt-1']","[0.24235978961222654, 0.16533815510295025, 0.1634151452607476, 0.12636256554889128, 0.1259734065294539, 0.1256286363389728, 0.11538551055519196, 0.1143261287122052, 0.1143261287122052, 0.10973296172035048]","{'c(""package:colorspace"", ""package:graphics"")': ['plot'], 'character(0)': ['write_to_file'], 'package:base': ['as.factor', 'c', 'colnames', 'colSums', 'data.frame', 'is.na', 'levels', 'library', 'names', 'paste', 'set.seed', 'sort', 'sum', 'summary', 'table'], 'package:caret': ['confusionMatrix'], 'package:caTools': ['sample.split'], 'package:DMwR': ['centralImputation'], 'package:graphics': ['hist'], 'package:mice': ['md.pattern'], 'package:randomForest': ['importance', 'randomForest'], 'package:rpart': ['plotcp', 'rpart', 'rpart.control'], 'package:rpart.plot': ['prp'], 'package:stats': ['predict'], 'package:utils': ['read.table', 'str', 'write.csv'], 'package:VIM': ['aggr']}","{""c(""package:colorspace"", ""package:graphics"")"": [""plot""], ""character(0)"": [""write_to_file""], ""package:base"": [""as.factor"", ""c"", ""colnames"", ""colSums"", ""data.frame"", ""is.na"", ""levels"", ""library"", ""names"", ""paste"", ""set.seed"", ""sort"", ""sum"", ""summary"", ""table""], ""package:caret"": [""confusionMatrix""], ""package:caTools"": [""sample.split""], ""package:DMwR"": [""centralImputation""], ""package:graphics"": [""hist""], ""package:mice"": [""md.pattern""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:rpart"": [""plotcp"", ""rpart"", ""rpart.control""], ""package:rpart.plot"": [""prp""], ""package:stats"": [""predict""], ""package:utils"": [""read.table"", ""str"", ""write.csv""], ""package:VIM"": [""aggr""]}",cpackagecolorspace packagegraphics plot character0 writetofile packagebase asfactor c colnames colSums dataframe isna levels library names paste setseed sort sum summary table packagecaret confusionMatrix packagecaTools samplesplit packageDMwR centralImputation packagegraphics hist packagemice mdpattern packagerandomForest importance randomForest packagerpart plotcp rpart rpartcontrol packagerpartplot prp packagestats predict packageutils readtable str writecsv packageVIM aggr,"library(tidyverse)
library(dplyr)
train <- read.table(""../input/train.csv"", header = TRUE, sep = "","")
test <- read.table(""../input/test.csv"", header = TRUE, sep = "","")
str(train)
summary(train)
i <- 1
write_to_file <- function(pred_vec, type) {
    submit1 <- data.frame(test2$PassengerId, pred_vec)
    colnames(submit1)[1] <- ""PassengerId""
    submit1$Survived <- submit1$pred_vec
    str(submit1)
    table(submit1$Survived)
    submit1$pred_vec <- NULL
    str(submit1)
    filename <- paste(""submission_"", type, i, "".csv"", sep = """")
    write.csv(submit1, filename, row.names = FALSE)
    i <- i + 1
}
sum(is.na(train))
missing <- colSums(is.na(train))
sort(missing, decreasing = TRUE)
library(mice)
md.pattern(train)
library(VIM)
mice_plot <- aggr(train, col = c(""navyblue"", ""yellow""), numbers = TRUE, sortVars = TRUE, labels = names(train), cex.axis = 0.7, gap = 3, ylab = c(""Missing data"", ""Pattern""))
library(DMwR)
train2 <- centralImputation(train)
sum(is.na(train2))
str(train2)
train3 <- train2
train3$Survived <- as.factor(train3$Survived)
str(train3)
hist(train3$Age)
hist(train3$SibSp)
hist(train3$Parch)
hist(train3$Fare)
train4 <- train3[, c(""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Survived"", ""Parch"", ""Fare"", ""Embarked"")]
set.seed(123)
library(caTools)
spl <- sample.split(train4, 0.9)
train5 <- train4[spl == TRUE, ]
valid <- train4[spl == FALSE, ]
sum(is.na(test))
library(DMwR)
test2 <- centralImputation(test)
test3 <- test2[, c(""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked"")]
library(rpart)
model_cart <- rpart(Survived ~ ., data = train5, method = ""class"", control = rpart.control(cp = 0.019, minbucket = 5))
summary(model_cart)
library(rpart.plot)
prp(model_cart, varlen = 10)
plotcp(model_cart)
library(caret)
pred_train <- predict(model_cart, train5, type = ""class"")
confusionMatrix(pred_train, train5$Survived)
pred_valid <- predict(model_cart, newdata = valid, type = ""class"")
confusionMatrix(pred_valid, valid$Survived)
pred_cart <- predict(model_cart, newdata = test3, type = ""class"")
write_to_file(pred_cart, ""CART_new"")
library(randomForest)
model_random <- randomForest(Survived ~ ., data = train5, importance = TRUE, ntree = 55)
summary(model_random)
plot(model_random)
importance(model_random)
library(caret)
pred_rf <- predict(model_random, train5, type = ""class"")
confusionMatrix(pred_rf, train5$Survived)
pred_valid_rf <- predict(model_random, valid)
confusionMatrix(pred_valid_rf, valid$Survived)
levels(test3$Embarked) <- levels(train5$Embarked)
pred_rft <- predict(model_random, test3)
write_to_file(pred_rft, ""RandomF"")",1,0,1,1,0,0,0,1,0,1,0,0,0,0
36,cdeotte-titanic-deep-net-0-82296,0.787,"['abs', 'c', 'cat', 'data.frame', 'ifelse', 'is.na', 'library', 'mean', 'rbind', 'regexpr', 'rep', 'row.names', 'sample', 'set.seed', 'sprintf', 'substring', 'sum', 'which', 'plot', 'compute', 'neuralnet', 'rpart', 'as.formula', 'ave', 'predict', 'head', 'read.csv', 'write.csv']","['rpart', 'neuralnet', 'base']",51.6337149143219,"['sprintf', 'mean', 'as.formula', 'which', 'cat', 'ave', 'is.na', 'rpart', 'compute', 'rep', 'set.seed', 'neuralnet', 'read.csv', 'substring', 'row.names', 'abs', 'c', 'rbind', 'sample', 'ifelse', 'sum', 'plot', 'predict', 'write.csv', 'regexpr', 'data.frame', 'head', 'library']",[],"['deltaforce126-titanic-randomforest', 'peggy88-titanic-data-eda-by-peggy', 'xliang-titanic-survival-prediction', 'ccheng2016-titanic-survival', 'youhe2482-titanic-a-very-first-step', 'nshrest-titanic-a-very-first-step-54f223', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'jacekpardyak-mytitanicscript', 'nashyegi-who-all-survived-the-titanic']","[0.46042416677520387, 0.4427449858305326, 0.3579791239311687, 0.3495438865218611, 0.3362886184588951, 0.3362886184588951, 0.25241974555598606, 0.2523136697863144, 0.2504504082718432, 0.228509510830309]","{'package:base': ['abs', 'c', 'cat', 'data.frame', 'ifelse', 'is.na', 'library', 'mean', 'rbind', 'regexpr', 'rep', 'row.names', 'sample', 'set.seed', 'sprintf', 'substring', 'sum', 'which'], 'package:graphics': ['plot'], 'package:neuralnet': ['compute', 'neuralnet'], 'package:rpart': ['rpart'], 'package:stats': ['as.formula', 'ave', 'predict'], 'package:utils': ['head', 'read.csv', 'write.csv']}","{""package:base"": [""abs"", ""c"", ""cat"", ""data.frame"", ""ifelse"", ""is.na"", ""library"", ""mean"", ""rbind"", ""regexpr"", ""rep"", ""row.names"", ""sample"", ""set.seed"", ""sprintf"", ""substring"", ""sum"", ""which""], ""package:graphics"": [""plot""], ""package:neuralnet"": [""compute"", ""neuralnet""], ""package:rpart"": [""rpart""], ""package:stats"": [""as.formula"", ""ave"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""write.csv""]}",packagebase abs c cat dataframe ifelse isna library mean rbind regexpr rep rownames sample setseed sprintf substring sum which packagegraphics plot packageneuralnet compute neuralnet packagerpart rpart packagestats asformula ave predict packageutils head readcsv writecsv,"train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
test$Survived <- NA
allData <- rbind(train, test)
allData$TicketFreq <- ave(1:1309, allData$Ticket, FUN = length)
train$Title <- substring(train$Name, regexpr("","", train$Name) + 2, regexpr(""[.]"", train$Name) - 1)
train$Surname <- substring(train$Name, 0, regexpr("","", train$Name) - 1)
test$Title <- substring(test$Name, regexpr("","", test$Name) + 2, regexpr(""[.]"", test$Name) - 1)
test$Surname <- substring(test$Name, 0, regexpr("","", test$Name) - 1)
test$Fare[is.na(test$Fare)] = mean(allData$Fare[allData$Pclass == 3], na.rm = T)
library(rpart)
ageFit <- rpart(Age ~ Title + Pclass + Sex + SibSp + Parch + Fare, train)
trainData <- data.frame(Survived = train$Survived)
trainData$Sex <- 0
trainData$Sex[train$Sex == ""female""] <- 1
train$Age[is.na(train$Age)] <- predict(ageFit, train[is.na(train$Age), ])
trainData$Age <- train$Age/80
trainData$FamilySize <- (train$SibSp + train$Parch + 1)/11
trainData$FareAdj <- train$Fare/allData$TicketFreq[1:891]/222
trainData$FamilyOneSurvived <- 0
trainData$FamilyAllDied <- 0
for (i in 1:891) {
    x = which(train$Surname == train$Surname[i] & train$PassengerId != i)
    m <- mean(train$Survived[x])
    if (!is.na(m) & m > 0) 
        trainData$FamilyOneSurvived[i] <- 1
    if (!is.na(m) & m == 0) 
        trainData$FamilyAllDied[i] <- 1
}
write.csv(trainData, ""trainData.csv"", row.names = F)
head(trainData, 10)
testData <- data.frame(Sex = rep(0, 418))
testData$Sex[test$Sex == ""female""] <- 1
test$Age[is.na(test$Age)] <- predict(ageFit, test[is.na(test$Age), ])
testData$Age <- test$Age/80
testData$FamilySize <- (test$SibSp + test$Parch + 1)/11
test$FareAdj <- test$Fare/allData$TicketFreq[892:1309]
testData$FareAdj <- test$Fare/allData$TicketFreq[892:1309]/222
testData$FamilyOneSurvived <- 0
testData$FamilyAllDied <- 0
for (i in 1:418) {
    x = which(train$Surname == test$Surname[i])
    m <- mean(train$Survived[x])
    if (!is.na(m) & m > 0) 
        testData$FamilyOneSurvived[i] <- 1
    if (!is.na(m) & m == 0) 
        testData$FamilyAllDied[i] <- 1
}
test$OneSurvived <- testData$FamilyOneSurvived
test$AllDied <- testData$FamilyAllDied
write.csv(testData, ""testData.csv"", row.names = F)
library(neuralnet)
f <- as.formula(""Survived ~ Sex + Age + FamilySize + FareAdj + FamilyOneSurvived + FamilyAllDied"")
set.seed(8)
fit <- neuralnet(f, trainData, hidden = 5, linear.output = F)
plot(fit)
p <- compute(fit, testData)
p <- ifelse(p[[2]] > 0.5, 1, 0)
submit <- data.frame(PassengerId = 892:1309, Survived = p)
write.csv(submit, ""TitanicDeepNet.csv"", row.names = F)
x = which((test$Sex == ""male"" & p == 1) | (test$Sex == ""female"" & p == 0))
row.names(test) <- 892:1309
test[x, c(""Name"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""FareAdj"", ""OneSurvived"", ""AllDied"")]
set.seed(1)
sum = 0
trials = 10
cat(sprintf(""Beginning %d trials of CV\n"", trials))
for (i in 1:trials) {
    s = sample(1:891, 180)
    fit <- neuralnet(f, trainData[-s, ], hidden = 5, linear.output = F)
    p <- compute(fit, trainData[s, -1])
    p <- ifelse(p[[2]] > 0.5, 1, 0)
    c = sum(abs(p - trainData$Survived[s]))
    cat(sprintf(""  i=%d acc=%f\n"", i, 1 - c/180))
    sum = sum + c
}
cat(sprintf(""Average CV over %d trials = %f"", trials, 1 - sum/(180 * trials)))",0,1,0,0,0,0,0,0,0,1,0,0,0,0
37,shashankseth-basic-eda-and-ml-on-titanic-dataset,0.7490000000000001,"['filter', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.factor', 'c', 'data.frame', 'factor', 'ifelse', 'is.na', 'lapply', 'length', 'library', 'mean', 'nrow', 'prop.table', 'sample', 'set.seed', 'sum', 'summary', 'table', 'unique', 'bind_rows', 'aes', 'geom_bar', 'geom_boxplot', 'ggplot', 'boxplot', 'glm', 'IQR', 'predict', 'quantile', 'read.csv', 'str', 'write.csv']","['ggplot2', 'readr', 'dplyr', 'base']",1.53606295585632,"['nrow', 'mean', 'lapply', 'IQR', 'is.na', 'glm', 'geom_boxplot', 'prop.table', 'as.factor', 'summary', 'filter', 'str', 'boxplot', 'set.seed', 'factor', 'unique', 'geom_bar', 'length', 'read.csv', 'table', 'c', 'aes', 'sample', 'ifelse', 'sum', 'predict', 'write.csv', 'quantile', 'bind_rows', 'data.frame', 'ggplot', 'user defined', 'library']",[],"['researchbigd-titanic-forkedfrommeganscript', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'mira5b-exploring-survival-on-the-titanic', 'mohankanni-exploring-survival-on-the-titanic', 'atuljjoshi05-titanic-random-forest', 'binilkuriachan-titanic-random-forest', 'jww001-exploring-survival-on-the-titanicqw', 'kyanyoga-exploring-survival-on-the-titanic', 'oldflag-exploring-survival-on-the-titanic-inr-frommegan', 'wendyzhang1020-exploring-survival-on-the-titanic']","[0.507563549306809, 0.5030620155097664, 0.5011258439655893, 0.5008175507074365, 0.5008112352560123, 0.5008112352560123, 0.5007284660241963, 0.500621232996279, 0.500543591829309, 0.5002743598950579]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'character(0)': ['remove_outliers'], 'package:base': ['as.factor', 'c', 'data.frame', 'factor', 'ifelse', 'is.na', 'lapply', 'length', 'library', 'mean', 'nrow', 'prop.table', 'sample', 'set.seed', 'sum', 'summary', 'table', 'unique'], 'package:dplyr': ['bind_rows'], 'package:ggplot2': ['aes', 'geom_bar', 'geom_boxplot', 'ggplot'], 'package:graphics': ['boxplot'], 'package:stats': ['glm', 'IQR', 'predict', 'quantile'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""character(0)"": [""remove_outliers""], ""package:base"": [""as.factor"", ""c"", ""data.frame"", ""factor"", ""ifelse"", ""is.na"", ""lapply"", ""length"", ""library"", ""mean"", ""nrow"", ""prop.table"", ""sample"", ""set.seed"", ""sum"", ""summary"", ""table"", ""unique""], ""package:dplyr"": [""bind_rows""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""geom_boxplot"", ""ggplot""], ""package:graphics"": [""boxplot""], ""package:stats"": [""glm"", ""IQR"", ""predict"", ""quantile""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter character0 removeoutliers packagebase asfactor c dataframe factor ifelse isna lapply length library mean nrow proptable sample setseed sum summary table unique packagedplyr bindrows packageggplot2 aes geombar geomboxplot ggplot packagegraphics boxplot packagestats glm IQR predict quantile packageutils readcsv str writecsv,"library(ggplot2)
library(readr)
library(dplyr)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
str(train)
str(test)
full <- bind_rows(train, test)
str(full)
lapply(full, function(x) length(unique(x)))
boxplot(full$Age)
remove_outliers <- function(x, na.rm = TRUE) {
    qnt <- quantile(x, probs = c(0.25, 0.75), na.rm = na.rm)
    H <- 1.5 * IQR(x, na.rm = T)
    y <- x
    y[x < (qnt[1] - H)] <- NA
    y[x > (qnt[2] + H)] <- NA
    y
}
a <- remove_outliers(full$Age)
sum(is.na(a))
full$Age <- a
mean_full <- mean(full$Age, na.rm = T)
full[is.na(full$Age), ""Age""] <- mean_full
full[c(62, 830), ""Embarked""]
full[c(62, 830), ""Fare""]
fare_emb <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(fare_emb, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot()
full$Embarked[c(62, 830)] <- ""C""
length(unique(full$Embarked))
full$FamSize <- full$SibSp + full$Parch + 1
ggplot(full, aes(x = FamSize, fill = factor(Survived))) + geom_bar()
full$FamSizeD[full$FamSize == 1] <- 1
full$FamSizeD[full$FamSize > 1 & full$FamSize <= 4] <- 2
full$FamSizeD[full$FamSize > 4] <- 3
full$Pclass <- as.factor(full$Pclass)
full$Survived <- as.factor(full$Survived)
full$Embarked <- as.factor(full$Embarked)
full$FamSizeD <- as.factor(full$FamSizeD)
train_set <- full[1:891, ]
str(train_set)
test_set <- full[-c(1:891), ]
str(test_set)
set.seed(123)
div <- sample(nrow(train_set), nrow(train_set) * 0.8)
train_set1 <- train_set[div, ]
str(train_set1)
valid_set <- train_set[-div, ]
str(valid_set)
prop.table(table(train_set1$Survived))
prop.table(table(valid_set$Survived))
lr_model1 <- glm(Survived ~ Pclass + Sex + Age + FamSizeD + Embarked, data = train_set1, family = binomial)
summary(lr_model1)
train_pred <- predict(lr_model1, newdata = train_set1, type = ""response"")
table(train_set1$Survived, train_pred > 0.5)
train_acc <- ((371 + 198)/(371 + 62 + 81 + 198)) * 100
train_acc
valid_pred <- predict(lr_model1, newdata = valid_set, type = ""response"")
table(valid_set$Survived, valid_pred > 0.5)
valid_acc <- ((106 + 43)/(106 + 10 + 20 + 43)) * 100
valid_acc
test_pred <- predict(lr_model1, newdata = test_set, type = ""response"")
test_set$Survived <- as.factor(ifelse(test_pred > 0.5, 1, 0))
table(test_set$Survived)
output <- data.frame(PassengerId = test_set$PassengerId, Survived = test_set$Survived)
write.csv(output, file = ""lr_logistic_reg.csv"", row.names = F)",0,0,0,0,0,0,0,0,0,0,0,0,0,0
39,alamgirm-predicting-survival-on-titanic-dataset,0.727,"['as.character', 'attributes', 'c', 'character', 'data.frame', 'factor', 'ifelse', 'lapply', 'length', 'library', 'nrow', 'print', 'regexpr', 'regmatches', 'sample', 'seq_len', 'set.seed', 'sort', 'sub', 'system', 'table', 'trimws', 'unique', 'unlist', 'svm', 'plot', 'complete', 'mice', 'importance', 'randomForest', 'predict', 'read.csv', 'write.csv']","['ggplot2', 'readr', 'mice', 'e1071', 'randomForest', 'base']",3.16960501670837,"['nrow', 'unlist', 'complete', 'lapply', 'svm', 'as.character', 'sub', 'sort', 'print', 'mice', 'importance', 'seq_len', 'set.seed', 'factor', 'unique', 'character', 'length', 'read.csv', 'table', 'randomForest', 'regmatches', 'c', 'sample', 'ifelse', 'plot', 'predict', 'write.csv', 'regexpr', 'data.frame', 'attributes', 'library', 'trimws', 'system']",[],"['liudj2008-fork-of-titanic', 'liudj2008-titanic', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'seajaye-titanic-logistic-regression-0-78947', 'paulocressoni-titanic-using-stepwise-linear-regression', 'nithishthirmul-titanic-data-test1', 'jacekpardyak-mytitanicscript', 'brirush-svm-for-titanic', 'ezhilvelme-titanic-neural-network-c-4-2']","[0.24870762975892902, 0.24861240448141558, 0.21445635322045414, 0.21445635322045414, 0.2034978571504401, 0.20229303791026174, 0.1937549587071921, 0.1923744718150526, 0.190219578859683, 0.18363287936712733]","{'package:base': ['as.character', 'attributes', 'c', 'character', 'data.frame', 'factor', 'ifelse', 'lapply', 'length', 'library', 'nrow', 'print', 'regexpr', 'regmatches', 'sample', 'seq_len', 'set.seed', 'sort', 'sub', 'system', 'table', 'trimws', 'unique', 'unlist'], 'package:e1071': ['svm'], 'package:graphics': ['plot'], 'package:mice': ['complete', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.character"", ""attributes"", ""c"", ""character"", ""data.frame"", ""factor"", ""ifelse"", ""lapply"", ""length"", ""library"", ""nrow"", ""print"", ""regexpr"", ""regmatches"", ""sample"", ""seq_len"", ""set.seed"", ""sort"", ""sub"", ""system"", ""table"", ""trimws"", ""unique"", ""unlist""], ""package:e1071"": [""svm""], ""package:graphics"": [""plot""], ""package:mice"": [""complete"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase ascharacter attributes c character dataframe factor ifelse lapply length library nrow print regexpr regmatches sample seqlen setseed sort sub system table trimws unique unlist packagee1071 svm packagegraphics plot packagemice complete mice packagerandomForest importance randomForest packagestats predict packageutils readcsv writecsv,"library(ggplot2)
library(readr)
system(""ls ../input"")
library(mice)
library(e1071)
library(randomForest)
print(""Building model ..."")
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
factCols <- c(""Name"", ""Sex"", ""Ticket"", ""Cabin"", ""Embarked"")
train[factCols] <- lapply(train[factCols], function(x) {
    x <- trimws(x)
    x <- ifelse(x == """", NA, x)
})
train$Salutation <- lapply(train$Name, function(x) {
    re <- regexpr(""(Jonkheer[.])|(Countess[.])|(Capt[.])|(Col[.])|(Mlle[.])|(Sir[.])|(Lady[.])|(Major[.])|(Ms[.])|(Mr[.])|(Miss[.])|(Mrs[.])|(Master[.])|(Don[.])|(Rev[.])|(Dr[.])|(Mme[.])"", x)
    m <- regmatches(x, re)
    if (attributes(re)[""match.length""] == -1) 
        m <- NA
    as.character(m)
})
train$Salutation <- unlist(lapply(train$Salutation, function(x) {
    y <- sub(""(Mlle[.])"", ""Miss."", x)
    y <- sub(""(Mme[.])|(Ms[.])|(Countess[.])|(Lady[.])"", ""Mrs."", y)
    y <- sub(""(Jonkheer[.])|(Capt[.])|(Col[.])|(Major[.])|(Don[.])|(Rev[.])|(Dr[.])|(Sir[.])"", ""Spl."", y)
    y
}))
salLevels <- sort(unique(train$Salutation))
salLabels <- 1:length(salLevels)
train$Salutation <- factor(train$Salutation, levels = salLevels, labels = salLabels)
train$FamSize <- train$SibSp + train$Parch + 1
train$FSizeFactor <- character(nrow(train))
train$FSizeFactor <- ""med""
train$FSizeFactor[train$FamSize == 1] <- ""small""
train$FSizeFactor[train$FamSize > 4] <- ""big""
famLevels <- c(""small"", ""med"", ""big"")
famLabels <- 1:3
train$FamSize <- factor(train$FSizeFactor, levels = famLevels, labels = famLabels)
train$FSizeFactor <- NULL
train$Survived <- factor(train$Survived, levels = c(0, 1), labels = c(0, 1))
train$Pclass <- factor(train$Pclass, levels = c(1, 2, 3), labels = c(1, 2, 3))
train$Sex <- factor(train$Sex, levels = c(""female"", ""male""), labels = c(0, 1))
train$Embarked <- factor(train$Embarked, levels = c(""C"", ""Q"", ""S""), labels = c(1, 2, 3))
selFeatures <- c(""Survived"", ""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked"", ""Salutation"", ""FamSize"")
sel_train <- train[selFeatures]
imp <- mice(sel_train, printFlag = F)
train_full <- complete(imp, 1)
train_size <- nrow(train_full) * 0.8
set.seed(123)
train_ind <- sample(seq_len(nrow(train_full)), size = train_size)
train_set <- train_full[train_ind, ]
test_set <- train_full[-train_ind, ]
svmModel <- svm(formula = train_set$Survived ~ ., data = train_set[, -1], cost = 1, gamma = 0.5, type = ""C-classification"", kernel = ""radial"")
svmPred <- predict(svmModel, test_set[, -1], type = ""class"")
cm1 <- table(svmPred, test_set[, 1])
print(cm1)
rfModel <- randomForest(x = train_set[, -1], y = train_set[, 1])
rfPred <- predict(rfModel, test_set[, -1], type = ""class"")
cm2 <- table(rfPred, test_set[, 1])
print(cm2)
plot(rfModel)
importance(rfModel)
print(""Testing the model ..."")
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
test[factCols] <- lapply(test[factCols], function(x) {
    x <- trimws(x)
    x <- ifelse(x == """", NA, x)
})
test$Salutation <- lapply(test$Name, function(x) {
    re <- regexpr(""(Jonkheer[.])|(Countess[.])|(Capt[.])|(Col[.])|(Mlle[.])|(Sir[.])|(Lady[.])|(Major[.])|(Ms[.])|(Mr[.])|(Miss[.])|(Mrs[.])|(Master[.])|(Don[.])|(Rev[.])|(Dr[.])|(Mme[.])"", x)
    m <- regmatches(x, re)
    if (attributes(re)[""match.length""] == -1) 
        m <- NA
    as.character(m)
})
test$Salutation <- unlist(lapply(test$Salutation, function(x) {
    y <- sub(""(Mlle[.])"", ""Miss."", x)
    y <- sub(""(Mme[.])|(Ms[.])|(Countess[.])|(Lady[.])"", ""Mrs."", y)
    y <- sub(""(Jonkheer[.])|(Capt[.])|(Col[.])|(Major[.])|(Don[.])|(Rev[.])|(Dr[.])|(Sir[.])"", ""Spl."", y)
    y
}))
test$Salutation <- factor(test$Salutation, levels = salLevels, labels = salLabels)
test$FamSize <- test$SibSp + test$Parch + 1
test$FSizeFactor <- character(nrow(test))
test$FSizeFactor <- ""med""
test$FSizeFactor[test$FamSize == 1] <- ""small""
test$FSizeFactor[test$FamSize > 4] <- ""big""
test$FamSize <- factor(test$FSizeFactor, levels = famLevels, labels = famLabels)
test$FSizeFactor <- NULL
test$Pclass <- factor(test$Pclass, levels = c(1, 2, 3), labels = c(1, 2, 3))
test$Sex <- factor(test$Sex, levels = c(""female"", ""male""), labels = c(0, 1))
test$Embarked <- factor(test$Embarked, levels = c(""C"", ""Q"", ""S""), labels = c(1, 2, 3))
selFeatures <- c(""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked"", ""Salutation"", ""FamSize"")
sel_test <- test[selFeatures]
imp <- mice(sel_test, printFlag = F)
test_full <- complete(imp, 1)
pred_rf <- predict(rfModel, test_full, type = ""class"")
solution <- data.frame(PassengerId = test$PassengerId, Survived = pred_rf)
write.csv(solution, ""gender_submission.csv"", row.names = F, quote = F)",1,0,0,1,0,0,0,0,0,0,0,1,0,0
40,supriya675-titanic-prediction-simplified-for-beginners,0.77,"['as.data.frame', 'as.factor', 'c', 'colnames', 'is.na', 'library', 'nrow', 'rbind', 'sapply', 'set.seed', 'sum', 'table', 'legend', 'plot', 'randomForest', 'as.formula', 'lm', 'median', 'predict', 'head', 'read.csv', 'str', 'tail', 'write.csv']","['randomForest', 'base']",1.0033640861511202,"['nrow', 'as.formula', 'median', 'is.na', 'lm', 'as.factor', 'sapply', 'str', 'set.seed', 'colnames', 'read.csv', 'table', 'randomForest', 'as.data.frame', 'c', 'tail', 'rbind', 'sum', 'plot', 'legend', 'predict', 'write.csv', 'head', 'library']",[],"['pradeeptripathi-prediction-of-titanic-survival-using-r', 'pradeeptripathi-prediction-of-titanic-survival-using-random-forest', 'paulbisto-r-titanic-script-practice', 'suraj915-titanic-suraj', 'predact-easy-r-titanic-predictive-model', 'utkarsh1997-kaggle-titanic-rf', 'lokesharun-titanic', 'pavani2018-titanicr-random-forests', 'mailakshdeep-titanic-survival-prediction-r', 'acrespop-titanic1']","[0.7270543663265192, 0.7268851660736458, 0.7258030492622932, 0.7187860711136922, 0.716623053379933, 0.7119434992996455, 0.6968630537238464, 0.6803240124149524, 0.6365607673736441, 0.6355767863738617]","{'package:base': ['as.data.frame', 'as.factor', 'c', 'colnames', 'is.na', 'library', 'nrow', 'rbind', 'sapply', 'set.seed', 'sum', 'table'], 'package:graphics': ['legend', 'plot'], 'package:randomForest': ['randomForest'], 'package:stats': ['as.formula', 'lm', 'median', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'tail', 'write.csv']}","{""package:base"": [""as.data.frame"", ""as.factor"", ""c"", ""colnames"", ""is.na"", ""library"", ""nrow"", ""rbind"", ""sapply"", ""set.seed"", ""sum"", ""table""], ""package:graphics"": [""legend"", ""plot""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""as.formula"", ""lm"", ""median"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""tail"", ""write.csv""]}",packagebase asdataframe asfactor c colnames isna library nrow rbind sapply setseed sum table packagegraphics legend plot packagerandomForest randomForest packagestats asformula lm median predict packageutils head readcsv str tail writecsv,"library(""randomForest"")
titanic.train <- read.csv(file = ""../input/train.csv"", header = T, stringsAsFactors = F)
titanic.test <- read.csv(file = ""../input/test.csv"", header = T, stringsAsFactors = F)
str(titanic.train)
head(titanic.train)
tail(titanic.train)
str(titanic.test)
head(titanic.test)
tail(titanic.test)
titanic.test$Survived <- NA
titanic.combined <- rbind(titanic.train, titanic.test)
head(titanic.combined)
tail(titanic.combined)
titanic.combined$Family.size <- titanic.combined$SibSp + titanic.combined$Parch + 1
sapply(titanic.combined, function(x) {
    sum(is.na(x))
})
titanic.combined[titanic.combined$Embarked == """", ""Embarked""] <- ""S""
age.formula <- ""Age ~ Pclass + Sex""
age.model <- lm(formula = age.formula, data = titanic.combined)
age.row <- titanic.combined[is.na(titanic.combined$Age), c(""Pclass"", ""Sex"")]
age.predict <- predict(age.model, newdata = age.row)
titanic.combined[is.na(titanic.combined$Age), ""Age""] <- age.predict
fare.median <- median(titanic.combined$Fare, na.rm = T)
titanic.combined[is.na(titanic.combined$Fare), ""Fare""] <- fare.median
titanic.combined$Pclass <- as.factor(titanic.combined$Pclass)
titanic.combined$Sex <- as.factor(titanic.combined$Sex)
titanic.combined$Embarked <- as.factor(titanic.combined$Embarked)
titanic.train <- titanic.combined[1:891, ]
titanic.test <- titanic.combined[892:1309, ]
titanic.train$Survived <- as.factor(titanic.train$Survived)
set.seed(675)
survived.formula <- as.formula(""Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Family.size"")
survive.model <- randomForest(formula = survived.formula, data = titanic.train, ntree = 500, mtry = 3, nodesize = 0.01 * nrow(titanic.test), keep.forest = TRUE)
Survived <- predict(survive.model, newdata = titanic.test)
PassengerId <- titanic.test$PassengerId
output.df <- as.data.frame(PassengerId)
output.df$Survived <- Survived
table(output.df$Survived)
write.csv(output.df, file = ""titanic_submission.csv"", row.names = FALSE)
plot(survive.model, ylim = c(0, 0.4))
legend(""topright"", colnames(survive.model$err.rate), col = 1:3, fill = 1:3)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
42,lucasguarisco-exploring-survival-on-the-titanic,0.742,"['filter', 'apply', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'return', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",23.696639060974107,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'round', 'sapply', 'mosaicplot', 'hist', 'mice', 'geom_hline', 'desc', 'set.seed', 'gsub', 'importance', 'factor', 'colnames', 'geom_bar', 'apply', 'read.csv', 'paste0', 'table', 'par', 'return', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'library']",[],"['lucasguarisco-exploring-survival-on-the-titanic', 'rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic', 'datascikrid-exploring-survival-on-the-titanic', 'anishmayaramka-the-titanic-datset']","[0.9999999999999999, 0.9570766736443186, 0.9570766736443186, 0.9570766736443186, 0.9570766736443186, 0.9570766736443186, 0.9570766736443186, 0.9570766736443186, 0.9570766736443186, 0.9570766736443186]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['apply', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'return', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""apply"", ""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""return"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase apply asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 return round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip geombar geomboxplot geomdensity geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
full$FamilyLevel <- apply(full[, c(""Parch"", ""SibSp"")], 1, function(x) {
    if (x[1] == 0 & x[2] == 0) {
        return(""Lone Wolf"")
    }
    else if (x[1] == 0) {
        return(""Horizontal"")
    }
    else {
        return(""Hierarchy"")
    }
})
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
table(full[1:891, ]$FamilyLevel, full[1:891, ]$Sex, full[1:891, ]$Survived)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"", ""FamilyLevel"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"", ""FamilyLevel"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + FamilyLevel, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
43,ljfernando-titanicsurvival,0.778,"['as.character', 'attach', 'c', 'data.frame', 'factor', 'ifelse', 'is.na', 'length', 'levels', 'library', 'log', 'mean', 'nrow', 'paste', 'print', 'rep', 'sample', 'set.seed', 'sqrt', 'strsplit', 'substr', 'table', 'trimws', 'which', 'barplot', 'par', 'plot', 'dev.off', 'randomForest', 'cor', 'density', 'glm', 'predict', 'var', 'head', 'read.csv', 'write.csv']","['randomForest', 'base']",8.384755849838259,"['nrow', 'dev.off', 'mean', 'which', 'as.character', 'cor', 'density', 'is.na', 'levels', 'glm', 'attach', 'print', 'log', 'rep', 'set.seed', 'barplot', 'factor', 'length', 'read.csv', 'table', 'par', 'randomForest', 'c', 'sample', 'paste', 'ifelse', 'plot', 'predict', 'var', 'write.csv', 'sqrt', 'data.frame', 'strsplit', 'head', 'substr', 'library', 'trimws']",[],"['ravihela-titanic-survival', 'paulocressoni-titanic-using-stepwise-linear-regression', 'nithishthirmul-titanic-data-test1', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'ilijaf-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic']","[0.16943296198539667, 0.07835692923047217, 0.06942354685426617, 0.06634827927030816, 0.06588890083487309, 0.0654988148018137, 0.0654988148018137, 0.06495452544295692, 0.06495452544295692, 0.06290814456295865]","{'package:base': ['as.character', 'attach', 'c', 'data.frame', 'factor', 'ifelse', 'is.na', 'length', 'levels', 'library', 'log', 'mean', 'nrow', 'paste', 'print', 'rep', 'sample', 'set.seed', 'sqrt', 'strsplit', 'substr', 'table', 'trimws', 'which'], 'package:graphics': ['barplot', 'par', 'plot'], 'package:grDevices': ['dev.off'], 'package:randomForest': ['randomForest'], 'package:stats': ['cor', 'density', 'glm', 'predict', 'var'], 'package:utils': ['head', 'read.csv', 'write.csv']}","{""package:base"": [""as.character"", ""attach"", ""c"", ""data.frame"", ""factor"", ""ifelse"", ""is.na"", ""length"", ""levels"", ""library"", ""log"", ""mean"", ""nrow"", ""paste"", ""print"", ""rep"", ""sample"", ""set.seed"", ""sqrt"", ""strsplit"", ""substr"", ""table"", ""trimws"", ""which""], ""package:graphics"": [""barplot"", ""par"", ""plot""], ""package:grDevices"": [""dev.off""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""cor"", ""density"", ""glm"", ""predict"", ""var""], ""package:utils"": [""head"", ""read.csv"", ""write.csv""]}",packagebase ascharacter attach c dataframe factor ifelse isna length levels library log mean nrow paste print rep sample setseed sqrt strsplit substr table trimws which packagegraphics barplot par plot packagegrDevices devoff packagerandomForest randomForest packagestats cor density glm predict var packageutils head readcsv writecsv,"library(randomForest)
tit_train <- read.csv(""../input/train.csv"", header = TRUE)
tit_test <- read.csv(""../input/test.csv"", header = TRUE)
head(tit_train)
names.split <- strsplit(as.character(tit_train$Name), ""[,.]"")
test.names.split <- strsplit(as.character(tit_test$Name), ""[,.]"")
title <- rep(NA, length(names.split))
test.title <- rep(NA, length(test.names.split))
for (i in 1:length(names.split)) {
    title[i] <- trimws(names.split[[i]][2])
}
for (i in 1:length(test.names.split)) {
    test.title[i] <- trimws(test.names.split[[i]][2])
}
table(title)
table(test.title)
respect <- c(""Capt"", ""Col"", ""Don"", ""Dona"", ""Dr"", ""Jonkheer"", ""Lady"", ""Major"", ""Rev"", ""Sir"", ""the Countess"")
tit_train$Title <- title
tit_test$Title <- test.title
tit_train$Title[which(tit_train$Title == ""Mlle"")] <- ""Ms""
tit_test$Title[which(tit_test$Title == ""Mlle"")] <- ""Ms""
tit_train$Title[which(tit_train$Title == ""Mme"")] <- ""Mrs""
tit_test$Title[which(tit_test$Title == ""Mme"")] <- ""Mrs""
tit_train$Title[which(tit_train$Title == ""Don"")] <- ""Sir""
tit_test$Title[which(tit_test$Title == ""Don"")] <- ""Sir""
tit_train$Title[which(tit_train$Title == ""Dona"")] <- ""Lady""
tit_test$Title[which(tit_test$Title == ""Dona"")] <- ""Lady""
tit_test$Title[which(tit_test$Title %in% respect)] <- ""Resp""
tit_train$Title[which(tit_train$Title %in% respect)] <- ""Resp""
tit_train$Title <- factor(tit_train$Title)
tit_test$Title <- factor(tit_test$Title)
levels(tit_test$Title) <- levels(tit_train$Title)
table(Survived = tit_train$Survived, Sex = tit_train$Sex)
barplot(table(tit_train$Survived, tit_train$Sex), legend = c(""Died"", ""Survived""), xlab = ""Sex"", ylab = ""Frequency"", main = ""Female vs Male Survival Rate"", col = c(""darkred"", ""lightblue""))
table(Survived = tit_train$Survived[tit_train$Sex == ""female""], title[tit_train$Sex == ""female""])
tit_train$Sex <- ifelse(tit_train$Sex == ""male"", 1, 0)
tit_test$Sex <- ifelse(tit_test$Sex == ""male"", 1, 0)
marrWom <- rep(0, nrow(tit_train))
marrWom.test <- rep(0, nrow(tit_test))
marrWom <- ifelse(title == ""Mrs"", 1, 0)
marrWom.test <- ifelse(test.title == ""Mrs"", 1, 0)
tit_train$marrWom <- marrWom
tit_test$marrWom <- marrWom.test
isBoy <- rep(0, nrow(tit_train))
isBoy.test <- rep(0, nrow(tit_test))
isBoy <- ifelse(title == ""Master"", 1, 0)
isBoy.test <- ifelse(test.title == ""Master"", 1, 0)
tit_train$isBoy <- isBoy
tit_test$isBoy <- isBoy.test
barplot(table(tit_train$Parch[title == ""Miss""], tit_train$Age[title == ""Miss""]), legend = c(""0 Parents/Children"", ""1 Parent/Child"", ""2 Parents/Children""), xlab = ""Age"", ylab = ""Frequency"", main = ""Ages of those titled 'Miss'"")
barplot(table(tit_train$SibSp[title == ""Miss""], tit_train$Age[title == ""Miss""]), legend = c(""0 Siblings/Spouses"", ""1 Sib/Spouse"", ""2 Sib/Spouse"", ""3 Sib/Spouse"", ""4 Sib/Spouse"", ""5 Sib/Spouse"", ""8 Sib/Spouse""), col = c(""darkslategrey"", ""darkslategray4"", ""darkslategray3"", ""darkslategray1"", ""goldenrod4"", ""goldenrod3"", ""goldenrod1""), xlab = ""Age"", ylab = ""Frequency"", main = ""Ages of those titled 'Miss'"")
mean(tit_train$Age[title == ""Miss"" | title == ""Ms""], na.rm = TRUE)
sqrt(var(c(tit_train$Age[title == ""Miss"" | title == ""Ms""], tit_test$Age[test.title == ""Miss"" | test.title == ""Ms""]), na.rm = TRUE))
youngFem <- rep(0, nrow(tit_train))
youngFem.test <- rep(0, nrow(tit_test))
miss <- c(which(title == ""Miss""), which(title == ""Ms""))
miss.test <- c(which(test.title == ""Miss""), which(test.title == ""Ms""))
for (i in miss) {
    if (is.na(tit_train$Age[i])) {
        if (tit_train$SibSp[i] >= 1 || tit_train$Parch[i] >= 1) 
            youngFem[i] <- 1
    }
    else if (tit_train$Age[i] <= 25) 
        youngFem[i] <- 1
}
for (i in miss.test) {
    if (is.na(tit_test$Age[i])) {
        if (tit_test$SibSp[i] >= 1 || tit_test$Parch[i] >= 1) 
            youngFem.test[i] <- 1
    }
    else if (tit_test$Age[i] <= 25) 
        youngFem.test[i] <- 1
}
tit_train$youngFem <- youngFem
tit_test$youngFem <- youngFem.test
tit_train$famSize <- tit_train$SibSp + tit_train$Parch + 1
tit_test$famSize <- tit_test$SibSp + tit_test$Parch + 1
missing.Fare <- which(is.na(tit_test$Fare))
tit_test[missing.Fare, ]
cor(tit_train$Fare, tit_train$Pclass)
tit_test$Fare[missing.Fare] <- mean(tit_train$Fare[tit_train$Pclass == 3])
par(mfrow = c(2, 2))
plot(density(tit_train$Fare), main = ""Train Fare"")
plot(density(log(tit_train$Fare)), main = ""Train Log(Fare)"")
plot(density(tit_test$Fare), main = ""Test Fare"")
plot(density(log(tit_test$Fare)), main = ""Test Log(Fare)"")
dev.off()
tit_train$Fare <- log(1 + tit_train$Fare)
tit_test$Fare <- log(1 + tit_test$Fare)
levels(tit_train$Embarked)
levels(tit_test$Embarked)
missing.Embarked <- which(tit_train$Embarked == """")
tit_train$Embarked[missing.Embarked] <- ""S""
tit_train[missing.Embarked, ]
table(tit_train$Survived, tit_train$Embarked)
tit_train$Embarked.S <- ifelse(tit_train$Embarked == ""S"", 1, 0)
tit_train$Embarked.Q <- ifelse(tit_train$Embarked == ""Q"", 1, 0)
tit_train$Embarked.C <- ifelse(tit_train$Embarked == ""C"", 1, 0)
tit_test$Embarked.S <- ifelse(tit_test$Embarked == ""S"", 1, 0)
tit_test$Embarked.Q <- ifelse(tit_test$Embarked == ""Q"", 1, 0)
tit_test$Embarked.C <- ifelse(tit_test$Embarked == ""C"", 1, 0)
tit_train$cab <- ifelse(tit_train$Cabin == """" | tit_train$Cabin == ""T"", ""U"", substr(tit_train$Cabin, 1, 1))
tit_test$cab <- ifelse(tit_test$Cabin == """" | tit_test$Cabin == ""T"", ""U"", substr(tit_test$Cabin, 1, 1))
table(tit_train$Survived, tit_train$cab)
tit_train$cab.A <- ifelse(tit_train$cab == ""A"", 1, 0)
tit_train$cab.B <- ifelse(tit_train$cab == ""B"", 1, 0)
tit_train$cab.C <- ifelse(tit_train$cab == ""C"", 1, 0)
tit_train$cab.D <- ifelse(tit_train$cab == ""D"", 1, 0)
tit_train$cab.E <- ifelse(tit_train$cab == ""E"", 1, 0)
tit_train$cab.F <- ifelse(tit_train$cab == ""F"", 1, 0)
tit_train$cab.G <- ifelse(tit_train$cab == ""G"", 1, 0)
tit_train$cab.U <- ifelse(tit_train$cab == ""U"", 1, 0)
tit_test$cab.A <- ifelse(tit_test$cab == ""A"", 1, 0)
tit_test$cab.B <- ifelse(tit_test$cab == ""B"", 1, 0)
tit_test$cab.C <- ifelse(tit_test$cab == ""C"", 1, 0)
tit_test$cab.D <- ifelse(tit_test$cab == ""D"", 1, 0)
tit_test$cab.E <- ifelse(tit_test$cab == ""E"", 1, 0)
tit_test$cab.F <- ifelse(tit_test$cab == ""F"", 1, 0)
tit_test$cab.G <- ifelse(tit_test$cab == ""G"", 1, 0)
tit_test$cab.U <- ifelse(tit_test$cab == ""U"", 1, 0)
attach(tit_train)
K = 5
folds <- sample(1:K, nrow(tit_train), replace = TRUE)
error <- rep(0, 5)
for (i in 1:K) {
    log.fit <- glm(factor(Survived) ~ Pclass + Sex, data = tit_train, subset = which(folds != i), family = binomial)
    log.train.probs <- predict(log.fit, newdata = tit_train[folds == i, ], type = ""response"")
    log.train.preds <- ifelse(log.train.probs >= 0.5, 1, 0)
    error[i] <- mean(log.train.preds != Survived[folds == i])
}
print(paste(""Error rate: "", mean(error)))
print(paste(""Success rate: "", 1 - mean(error)))
set.seed(1)
rf.fit <- randomForest(factor(Survived) ~ Pclass + Sex + famSize + isBoy + youngFem + marrWom + Embarked.S + Embarked.C + Embarked.Q, data = tit_train, mtry = 2, ntree = 15000, nodesize = 1, importance = FALSE)
rf.pred.train <- predict(rf.fit, newdata = tit_train, type = ""class"")
print(paste(""Success rate on training data: "", mean(rf.pred.train == tit_train$Survived)))
rf.pred.out <- predict(rf.fit, newdata = tit_test, type = ""class"")
results <- data.frame(PassengerId = 892:1309, Survived = rf.pred.out)
write.csv(results, ""submission.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
44,delasupreme-titanic-data-analysis-rf-prediction-0-81818,0.763,"['user defined', 'user defined', 'user defined', 'apply', 'as.integer', 'as.numeric', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'list', 'mean', 'paste0', 'print', 'rep', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'suppressMessages', 'table', 'tapply', 'legend', 'mosaicplot', 'plot', 'hcl', 'importance', 'randomForest', 'varImpPlot', 'aggregate', 'cor', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['randomForest', 'base']",4.04074788093567,"['list', 'mean', 'median', 'hcl', 'cor', 'is.na', 'print', 'summary', 'sapply', 'round', 'rep', 'mosaicplot', 'importance', 'varImpPlot', 'str', 'set.seed', 'gsub', 'factor', 'as.integer', 'colnames', 'aggregate', 'apply', 'read.csv', 'paste0', 'suppressMessages', 'table', 'randomForest', 'row.names', 'c', 'as.numeric', 'sum', 'plot', 'legend', 'predict', 'reorder', 'write.csv', 'data.frame', 'strsplit', 'tapply', 'user defined', 'library']",[],"['jenioai-titanic-data-analysis-rf-prediction-0-81818', 'vincentlugat-titanic-data-analysis-rf-prediction-0-81818', 'kapillehar-titanic-rf-prediction-0-81818', 'vikasht34-titanic-rf-prediction-0-81818', 'ashutoshds-titanic-rf-prediction-0-81818', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'libra202ma-exploring-survival-on-the-titanic', 'bonesaw98616-exploring-survival-on-the-titanic']","[0.9801339202416555, 0.960537936220937, 0.8536099705038702, 0.8536099705038702, 0.825311815802906, 0.6597358664178433, 0.659250902397554, 0.659250902397554, 0.6541903708080461, 0.6537671429713466]","{'character(0)': ['aes', 'bind_rows', 'coord_flip', 'corrplot', 'dense_rank', 'desc', 'dollar_format', 'element_blank', 'facet_grid', 'facet_wrap', 'geom_bar', 'geom_density', 'geom_histogram', 'geom_jitter', 'geom_text', 'geom_vline', 'ggplot', 'ggtitle', 'labs', 'mutate', 'revalue', 'scale_fill_discrete', 'scale_x_continuous', 'theme', 'theme_few', 'xlab', 'ylab'], 'package:base': ['apply', 'as.integer', 'as.numeric', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'list', 'mean', 'paste0', 'print', 'rep', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'suppressMessages', 'table', 'tapply'], 'package:graphics': ['legend', 'mosaicplot', 'plot'], 'package:grDevices': ['hcl'], 'package:randomForest': ['importance', 'randomForest', 'varImpPlot'], 'package:stats': ['aggregate', 'cor', 'median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""character(0)"": [""aes"", ""bind_rows"", ""coord_flip"", ""corrplot"", ""dense_rank"", ""desc"", ""dollar_format"", ""element_blank"", ""facet_grid"", ""facet_wrap"", ""geom_bar"", ""geom_density"", ""geom_histogram"", ""geom_jitter"", ""geom_text"", ""geom_vline"", ""ggplot"", ""ggtitle"", ""labs"", ""mutate"", ""revalue"", ""scale_fill_discrete"", ""scale_x_continuous"", ""theme"", ""theme_few"", ""xlab"", ""ylab""], ""package:base"": [""apply"", ""as.integer"", ""as.numeric"", ""c"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""library"", ""list"", ""mean"", ""paste0"", ""print"", ""rep"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""summary"", ""suppressMessages"", ""table"", ""tapply""], ""package:graphics"": [""legend"", ""mosaicplot"", ""plot""], ""package:grDevices"": [""hcl""], ""package:randomForest"": [""importance"", ""randomForest"", ""varImpPlot""], ""package:stats"": [""aggregate"", ""cor"", ""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",character0 aes bindrows coordflip corrplot denserank desc dollarformat elementblank facetgrid facetwrap geombar geomdensity geomhistogram geomjitter geomtext geomvline ggplot ggtitle labs mutate revalue scalefilldiscrete scalexcontinuous theme themefew xlab ylab packagebase apply asinteger asnumeric c colnames dataframe factor gsub isna library list mean paste0 print rep round rownames sapply setseed strsplit sum summary suppressMessages table tapply packagegraphics legend mosaicplot plot packagegrDevices hcl packagerandomForest importance randomForest varImpPlot packagestats aggregate cor median predict reorder packageutils readcsv str writecsv,"suppressMessages(library(""ggplot2""))
suppressMessages(library(""ggthemes""))
suppressMessages(library(""scales""))
suppressMessages(library(""dplyr""))
suppressMessages(library(""randomForest""))
suppressMessages(library(""corrplot""))
suppressMessages(library(""plyr""))
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
summary(full)
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram(bins = 30) + theme_few() + xlab(""Age"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Age vs Survived"")
ggplot(full[1:891, ], aes(Sex, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + theme_few() + xlab(""Sex"") + ylab(""Count"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Sex vs Survived"")
tapply(full[1:891, ]$Survived, full[1:891, ]$Sex, mean)
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram(bins = 30) + theme_few() + xlab(""Age"") + ylab(""Count"") + facet_grid(. ~ Sex) + scale_fill_discrete(name = ""Survived"") + theme_few() + ggtitle(""Age vs Sex vs Survived"")
tapply(full[1:891, ]$Survived, full[1:891, ]$Pclass, mean)
ggplot(full[1:891, ], aes(Pclass, fill = factor(Survived))) + geom_bar(stat = ""count"") + theme_few() + xlab(""Pclass"") + facet_grid(. ~ Sex) + ylab(""Count"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Pclass vs Sex vs Survived"")
ggplot(full[1:891, ], aes(x = Age, y = Sex)) + geom_jitter(aes(colour = factor(Survived))) + theme_few() + theme(legend.title = element_blank()) + facet_wrap(~Pclass) + labs(x = ""Age"", y = ""Sex"", title = ""Pclass vs Sex vs Age vs Survived"") + scale_fill_discrete(name = ""Survived"") + scale_x_continuous(name = ""Age"", limits = c(0, 81))
ggplot(full[1:891, ], aes(x = Fare, y = Pclass)) + geom_jitter(aes(colour = factor(Survived))) + theme_few() + theme(legend.title = element_blank()) + labs(x = ""Age"", y = ""Pclass"", title = ""Fare vs Pclass"") + scale_fill_discrete(name = ""Survived"") + scale_x_continuous(name = ""Fare"", limits = c(0, 270), breaks = c(0, 40, 80, 120, 160, 200, 240, 280))
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
officer <- c(""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"")
royalty <- c(""Dona"", ""Lady"", ""the Countess"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% royalty] <- ""Royalty""
full$Title[full$Title %in% officer] <- ""Officer""
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
ggplot(full[1:891, ], aes(Title, fill = factor(Survived))) + geom_bar(stat = ""count"") + xlab(""Title"") + ylab(""Count"") + scale_fill_discrete(name = "" Survived"") + ggtitle(""Title vs Survived"") + theme_few()
tapply(full[1:891, ]$Survived, full[1:891, ]$Title, mean)
full$Fsize <- full$SibSp + full$Parch + 1
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + xlab(""Family Size"") + ylab(""Count"") + theme_few() + scale_fill_discrete(name = ""Survived"") + ggtitle(""Family Size vs Survived"")
tapply(full[1:891, ]$Survived, full[1:891, ]$Fsize, mean)
full$FsizeD[full$Fsize == 1] <- ""Alone""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""Small""
full$FsizeD[full$Fsize > 4] <- ""Big""
tapply(full[1:891, ]$Survived, full[1:891, ]$FsizeD, mean)
mosaicplot(table(full$FsizeD, full$Survived), main = ""FsizeD vs Survived"", ylab = ""Survived"", xlab = ""FsizeD"", col = hcl(c(50, 120)), )
tapply(full$Embarked, full$Pclass, median, na.rm = TRUE)
full[c(62, 830), ""Embarked""]
full$Embarked[c(62, 830)] <- ""S""
ggplot(full[1:891, ], aes(Pclass, fill = factor(Survived))) + geom_bar(stat = ""count"") + theme_few() + xlab(""Pclass"") + ylab(""Count"") + facet_wrap(~Embarked) + scale_fill_discrete(name = ""Survived"") + ggtitle(""Embarked vs Pclass vs Survived"")
full[1044, ]
ggplot(full[full$Pclass == ""3"", ], aes(x = Fare)) + geom_density(fill = ""lightgrey"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""darkred"", linetype = ""dashed"", lwd = 1) + xlab(""Fare"") + ggtitle(""Pclass = 3"") + ylab(""Density"") + scale_x_continuous(labels = dollar_format()) + theme_few()
tapply(full$Fare, full$Pclass, median, na.rm = TRUE)
full$Fare[1044] <- median(full[full$Pclass == ""3"", ]$Fare, na.rm = TRUE)
tapply(full$Age, full$Pclass, median, na.rm = TRUE)
tapply(full$Age, full$Title, median, na.rm = TRUE)
title.age <- aggregate(full$Age, by = list(full$Title), FUN = function(x) median(x, na.rm = T))
full[is.na(full$Age), ""Age""] <- apply(full[is.na(full$Age), ], 1, function(x) title.age[title.age[, 1] == x[""Title""], 2])
sum(is.na(full$Age))
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
ggplot(full[1:891, ][full[1:891, ]$Child == ""Child"", ], aes(Sex, fill = factor(Survived))) + geom_bar(stat = ""count"") + xlab(""Sex"") + ylab(""Count"") + facet_wrap(~Pclass) + scale_fill_discrete(name = ""Survived"") + ggtitle(""Child vs Sex vs Pclass vs Survived"") + theme_few()
tapply(full[1:891, ]$Survived, full[1:891, ]$Child, mean)
table(full$Child, full$Survived)
corr_data <- full[1:891, ]
corr_data$Embarked <- revalue(corr_data$Embarked, c(S = 1, Q = 2, C = 3))
corr_data$Sex <- revalue(corr_data$Sex, c(male = 1, female = 2))
corr_data$Title <- revalue(corr_data$Title, c(Mr = 1, Master = 2, Officer = 3, Mrs = 4, Royalty = 5, Miss = 6))
corr_data$FsizeD <- revalue(corr_data$FsizeD, c(Small = 1, Alone = 2, Big = 3))
corr_data$Child <- revalue(corr_data$Child, c(Adult = 1, Child = 2))
corr_data$FsizeD <- as.numeric(corr_data$FsizeD)
corr_data$Child <- as.numeric(corr_data$Child)
corr_data$Sex <- as.numeric(corr_data$Sex)
corr_data$Embarked <- as.numeric(corr_data$Embarked)
corr_data$Title <- as.numeric(corr_data$Title)
corr_data$Pclass <- as.numeric(corr_data$Pclass)
corr_data$Survived <- as.numeric(corr_data$Survived)
corr_data <- corr_data[, c(""Survived"", ""Pclass"", ""Sex"", ""FsizeD"", ""Fare"", ""Embarked"", ""Title"", ""Child"")]
str(corr_data)
mcorr_data <- cor(corr_data)
corrplot(mcorr_data, method = ""circle"")
full$Child <- factor(full$Child)
full$Sex <- factor(full$Sex)
full$Embarked <- factor(full$Embarked)
full$Title <- factor(full$Title)
full$Pclass <- factor(full$Pclass)
full$FsizeD <- factor(full$FsizeD)
full1 <- full[, -9]
full_mod <- full1[, -10]
train <- full_mod[1:891, ]
test <- full_mod[892:1309, ]
library(""randomForest"")
set.seed(123)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Fare + Embarked + Title + FsizeD + Child, data = train)
rf.fitted = predict(rf_model)
ans_rf = rep(NA, 891)
for (i in 1:891) {
    ans_rf[i] = as.integer(rf.fitted[[i]]) - 1
}
table(ans_rf)
print(rf_model)
mean(ans_rf == train$Survived)
varImpPlot(rf_model, main = ""RF_MODEL"")
train <- full_mod[1:580, ]
valid <- full_mod[581:891, ]
test <- full_mod[892:1309, ]
set.seed(123)
rf_model_train <- randomForest(factor(Survived) ~ Pclass + Sex + Fare + Embarked + Title + FsizeD + Child, data = train)
rf_model_train.fitted = predict(rf_model_train)
ans_rf_train = rep(NA, 580)
for (i in 1:580) {
    ans_rf_train[i] = as.integer(rf_model_train.fitted[[i]]) - 1
}
table(ans_rf_train)
print(rf_model_train)
mean(ans_rf_train == train$Survived)
set.seed(123)
rf_model_val <- randomForest(factor(Survived) ~ Pclass + Sex + Fare + Embarked + Title + FsizeD + Child, data = valid)
rf_model_val.fitted = predict(rf_model_val)
ans_rf_val = rep(NA, 311)
for (i in 1:311) {
    ans_rf_val[i] = as.integer(rf_model_val.fitted[[i]]) - 1
}
table(ans_rf_val)
print(rf_model_val)
mean(ans_rf_val == valid$Survived)
prediction <- predict(rf_model, test)
solution <- data.frame(Survived = prediction, PassengerID = test$PassengerId)
write.csv(solution, file = ""rf_model_sol.csv"", row.names = F)
plot(rf_model, ylim = c(0, 0.36), main = ""RF_MODEL"")
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()",1,0,0,0,0,0,0,0,0,0,0,0,0,0
45,redroy44-tidy-titanic-script,0.77,"['filter', 'complete', 'as.character', 'as.factor', 'attr', 'c', 'data.frame', 'expand.grid', 'ifelse', 'is.na', 'levels', 'library', 'print', 'round', 'set.seed', 'sum', 'unique', 'confusionMatrix', 'createDataPartition', 'train', 'trainControl', 'bind_rows', 'funs', 'group_by', 'mutate', 'n', 'select', 'slice', 'summarise_each', 'summarize', 'fct_collapse', 'fct_recode', 'ggplot', 'mice', 'read_csv', 'predict', 'str_trim', 'separate', 'write.csv']","['tidyverse', 'forcats', 'stringr', 'caret', 'mice', 'doMC', 'base']",1.4328689177831,"['fct_recode', 'complete', 'str_trim', 'as.character', 'separate', 'is.na', 'levels', 'fct_collapse', 'confusionMatrix', 'print', 'expand.grid', 'as.factor', 'filter', 'round', 'n', 'mice', 'set.seed', 'unique', 'summarize', 'attr', 'summarise_each', 'read_csv', 'group_by', 'train', 'c', 'mutate', 'ifelse', 'sum', 'createDataPartition', 'funs', 'slice', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'ggplot', 'library', 'trainControl', 'select']",[],"['srikantjyrmn-titanic-survivor', 'monfilier-titanic-survival-prediction', 'jasminegoel-playing-with-titanic-dataset-r', 'biohazzzard-titanic-with-tidyverse-and-caret', 'tavoosi-predicting-survival-on-the-titanic-with-rf-lr-nb', 'arpitr-titanic-survival', 'seanangio-predicting-titanic-survival', 'cbrioso-titanic-rf', 'ianwells-titanic-simple-rf-with-name-and-age-features', 'jprukundo-titanic-in-r-with-naive-bayes-of-mlr-package']","[0.74142082512708, 0.7094866478745119, 0.6896624757464074, 0.639098064898518, 0.6292163691273666, 0.26040736635518424, 0.11971453774045801, 0.11665338928176834, 0.11571413047734182, 0.11466465890781252]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'c(""package:mice"", ""package:tidyr"")': ['complete'], 'package:base': ['as.character', 'as.factor', 'attr', 'c', 'data.frame', 'expand.grid', 'ifelse', 'is.na', 'levels', 'library', 'print', 'round', 'set.seed', 'sum', 'unique'], 'package:caret': ['confusionMatrix', 'createDataPartition', 'train', 'trainControl'], 'package:dplyr': ['bind_rows', 'funs', 'group_by', 'mutate', 'n', 'select', 'slice', 'summarise_each', 'summarize'], 'package:forcats': ['fct_collapse', 'fct_recode'], 'package:ggplot2': ['ggplot'], 'package:mice': ['mice'], 'package:readr': ['read_csv'], 'package:stats': ['predict'], 'package:stringr': ['str_trim'], 'package:tidyr': ['separate'], 'package:utils': ['write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""c(""package:mice"", ""package:tidyr"")"": [""complete""], ""package:base"": [""as.character"", ""as.factor"", ""attr"", ""c"", ""data.frame"", ""expand.grid"", ""ifelse"", ""is.na"", ""levels"", ""library"", ""print"", ""round"", ""set.seed"", ""sum"", ""unique""], ""package:caret"": [""confusionMatrix"", ""createDataPartition"", ""train"", ""trainControl""], ""package:dplyr"": [""bind_rows"", ""funs"", ""group_by"", ""mutate"", ""n"", ""select"", ""slice"", ""summarise_each"", ""summarize""], ""package:forcats"": [""fct_collapse"", ""fct_recode""], ""package:ggplot2"": [""ggplot""], ""package:mice"": [""mice""], ""package:readr"": [""read_csv""], ""package:stats"": [""predict""], ""package:stringr"": [""str_trim""], ""package:tidyr"": [""separate""], ""package:utils"": [""write.csv""]}",cpackagedplyr packagestats filter cpackagemice packagetidyr complete packagebase ascharacter asfactor attr c dataframe expandgrid ifelse isna levels library print round setseed sum unique packagecaret confusionMatrix createDataPartition train trainControl packagedplyr bindrows funs groupby mutate n select slice summariseeach summarize packageforcats fctcollapse fctrecode packageggplot2 ggplot packagemice mice packagereadr readcsv packagestats predict packagestringr strtrim packagetidyr separate packageutils writecsv,"library(tidyverse)
library(forcats)
library(stringr)
library(caret)
library(mice)
library(doMC)
set.seed(29082012)
file_train <- ""../input/train.csv""
file_test <- ""../input/test.csv""
train_data <- read_csv(file_train)
test_data <- read_csv(file_test)
full_data = bind_rows(train_data, test_data)
full_data %>% summarise_each(funs(sum(is.na(.)))) %>% print
full_data <- full_data %>% mutate(Sex = as.factor(Sex), Embarked = as.factor(Embarked)) %>% separate(Name, into = c(""Surname"", ""FirstName""), sep = "","") %>% separate(FirstName, into = c(""Title"", ""FirstName""), sep = ""\\."", extra = ""merge"") %>% mutate(Title = as.factor(str_trim(Title)), Survived = as.factor(Survived)) %>% mutate(FamilySize = Parch + SibSp + 1, Pclass = as.factor(Pclass)) %>% mutate(Pclass = fct_recode(Pclass, first = ""1"", second = ""2"", third = ""3"")) %>% mutate(Survived = fct_recode(Survived, 
    no = ""0"", yes = ""1"")) %>% select(-FirstName, -Parch, -SibSp, -Cabin)
imputed_data <- complete(mice(select(full_data, -Survived)))
full_data$Age <- round(imputed_data$Age)
full_data$Fare <- imputed_data$Fare
full_data$Embarked <- imputed_data$Embarked
attr(full_data$Embarked, ""contrasts"") <- NULL
full_data %>% summarise_each(funs(sum(is.na(.)))) %>% print
full_data %>% select(Title) %>% group_by(Title) %>% summarize(count = n()) %>% print()
titles <- full_data %>% select(Title) %>% mutate(Title = fct_collapse(full_data$Title, Sir = c(""Don"", ""Jonkheer"", ""Sir""), Lady = c(""Dona"", ""Lady"", ""the Countess"")))
full_data$Title <- titles$Title
sex_age <- full_data %>% select(Sex, Age)
sex_age <- sex_age %>% mutate(mfc = as.factor(ifelse(Age < 18, ""child"", as.character(Sex))))
levels(sex_age$mfc)
full_data <- full_data %>% mutate(mfc = sex_age$mfc)
family_unique <- full_data %>% select(Surname) %>% unique()
full_data <- full_data %>% mutate(group = as.factor(Surname), ticket_group = as.factor(Ticket)) %>% select(-Ticket, -Surname)
train_data <- full_data %>% filter(!is.na(Survived))
test_data <- full_data %>% filter(is.na(Survived)) %>% select(-Survived)
inTrain <- createDataPartition(train_data$Survived, p = 0.75, list = F)
training <- train_data %>% slice(inTrain)
testing <- train_data %>% slice(-inTrain)
fitControl <- trainControl(method = ""repeatedcv"", number = 10, repeats = 10, classProbs = TRUE)
trGrid <- expand.grid(.alpha = c(0.01, 0.05), .lambda = (1:10) * 0.1)
glmFit <- train(Survived ~ ., data = select(training, -PassengerId), method = ""glmnet"", trControl = fitControl, metric = ""Accuracy"", tuneGrid = trGrid)
glmFit
ggplot(glmFit)
predictions <- predict(glmFit, select(testing, -PassengerId))
confusionMatrix(predictions, testing$Survived)
model <- glmFit
Prediction <- predict(model, newdata = select(test_data, -PassengerId))
submit <- data.frame(PassengerId = test_data$PassengerId, Survived = ifelse(Prediction == ""yes"", 1, 0))
write.csv(submit, file = ""mysubmission.csv"", row.names = FALSE)",0,0,1,1,0,0,0,1,0,0,0,0,0,0
46,timothychenallen-titanic-r-randomforest,0.7509999999999999,"['filter', 'factor', 'grep', 'gsub', 'is.na', 'names', 'require', 'sapply', 'set.seed', 'sum', 'bind_rows', 'mutate', 'select', 'summarize', 'aes', 'geom_boxplot', 'geom_hline', 'ggplot', 'plot', 'importance', 'randomForest', 'median', 'predict', 'read.csv', 'write.csv']","['dplyr', 'caret', 'mice', 'ggplot2', 'randomForest', 'base']",2.84382200241089,"['gsub', 'factor', 'names', 'sum', 'plot', 'predict', 'median', 'write.csv', 'set.seed', 'read.csv', 'grep', 'user defined', 'filter', 'sapply', 'is.na', 'require']",[],"['timothychenallen-titanic-r-randomforest', 'tetyama-trial-titanic', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'venkatko-titanic-survival1', 'jww001-exploring-survival-on-the-titanicqw', 'mira5b-exploring-survival-on-the-titanic', 'bonesaw98616-exploring-survival-on-the-titanic']","[0.9999999999999996, 0.6665089611731595, 0.6654661739888811, 0.6649175365807081, 0.6649175365807081, 0.663680115591672, 0.6632815034405417, 0.6612281576247147, 0.6609055663893799, 0.6606898388247937]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['factor', 'grep', 'gsub', 'is.na', 'names', 'require', 'sapply', 'set.seed', 'sum'], 'package:dplyr': ['bind_rows', 'mutate', 'select', 'summarize'], 'package:ggplot2': ['aes', 'geom_boxplot', 'geom_hline', 'ggplot'], 'package:graphics': ['plot'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""factor"", ""grep"", ""gsub"", ""is.na"", ""names"", ""require"", ""sapply"", ""set.seed"", ""sum""], ""package:dplyr"": [""bind_rows"", ""mutate"", ""select"", ""summarize""], ""package:ggplot2"": [""aes"", ""geom_boxplot"", ""geom_hline"", ""ggplot""], ""package:graphics"": [""plot""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase factor grep gsub isna names require sapply setseed sum packagedplyr bindrows mutate select summarize packageggplot2 aes geomboxplot geomhline ggplot packagegraphics plot packagerandomForest importance randomForest packagestats median predict packageutils readcsv writecsv,"require(dplyr)
require(caret)
require(mice)
require(ggplot2)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
full <- bind_rows(train, test)
sapply(names(full), function(x) sum(is.na(full[[x]])))
sapply(names(full), function(x) sum(full[[x]] == """"))
full[is.na(full$Age), ]$Age <- -1
full %>% filter(Embarked == """") %>% select(Embarked, Fare)
ggplot(full %>% filter(Pclass == 1, Embarked != """")) + geom_boxplot(aes(Embarked, Fare, fill = Embarked)) + geom_hline(yintercept = 80, color = ""red"")
full[full$Embarked == """", ]$Embarked <- ""C""
full %>% filter(is.na(Fare)) %>% select(Embarked, Pclass, Sex)
full %>% filter(Embarked == ""S"", Pclass == 3, Sex == ""male"") %>% select(Fare) %>% summarize(usual_fare = median(Fare, na.rm = TRUE))
full[is.na(full$Fare), ]$Fare <- 8.05
full <- full %>% mutate(Title = gsub(x = Name, pattern = ""^[^,]+, ([^ .]+)[\\. ].*$"", replacement = ""\\1"")) %>% mutate(Surname = gsub(x = full$Name, pattern = ""^([^,]+),.*$"", replacement = ""\\1"")) %>% mutate(Family_size = SibSp + Parch)
full[grep(x = full$Title, pattern = ""Mr|Miss|Mrs|Master"", invert = TRUE), ]$Title <- ""Unusual""
full$Sex <- factor(full$Sex)
full$Embarked <- factor(full$Embarked)
full$Title <- factor(full$Title)
train.clean <- full[1:891, ]
test.clean <- full[892:1309, ]
set.seed(42)
require(randomForest)
rf <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + Family_size, data = train.clean)
plot(rf)
imp <- importance(rf)
imp
test.clean$Survived <- predict(rf, test.clean)
submission <- test.clean %>% select(PassengerId, Survived)
write.csv(submission, ""submission.csv"", row.names = FALSE)",1,0,1,1,0,0,0,1,0,0,0,0,0,0
47,gzanatta-how-i-reached-top-6-on-titanic-competition,0.754,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.factor', 'c', 'colnames', 'data.frame', 'factor', 'library', 'max', 'min', 'rbind', 'sapply', 'set.seed', 'strsplit', 'sub', 'summary', 'table', 'dummyVars', 'preProcess', 'randomForest', 'predict', 'read.csv', 'str', 'write.csv']","['readr', 'randomForest', 'caret', 'base']",12.749526023864698,"['min', 'as.character', 'sub', 'as.factor', 'summary', 'dummyVars', 'sapply', 'str', 'set.seed', 'factor', 'colnames', 'max', 'preProcess', 'read.csv', 'table', 'randomForest', 'c', 'rbind', 'predict', 'write.csv', 'data.frame', 'strsplit', 'user defined', 'library']",[],"['vishnusaiv-titanic-data-analysis', 'xuhuiz0918-initial-eda-and-lm-on-titanic-dataset', 'divyasshree-titanic-ml-club', 'windowbyryeol-kernel-titanic', 'dleprovost-simple-titanic-exploration', 'paulocressoni-titanic-using-stepwise-linear-regression', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic']","[0.057395518631871825, 0.056194033944142276, 0.0532255174373812, 0.0441301171847264, 0.03754996588579847, 0.03313728408118306, 0.03242358810511127, 0.03242358810511127, 0.03202679335989989, 0.03202679335989989]","{'character(0)': ['standard'], 'package:base': ['as.character', 'as.factor', 'c', 'colnames', 'data.frame', 'factor', 'library', 'max', 'min', 'rbind', 'sapply', 'set.seed', 'strsplit', 'sub', 'summary', 'table'], 'package:caret': ['dummyVars', 'preProcess'], 'package:randomForest': ['randomForest'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""character(0)"": [""standard""], ""package:base"": [""as.character"", ""as.factor"", ""c"", ""colnames"", ""data.frame"", ""factor"", ""library"", ""max"", ""min"", ""rbind"", ""sapply"", ""set.seed"", ""strsplit"", ""sub"", ""summary"", ""table""], ""package:caret"": [""dummyVars"", ""preProcess""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",character0 standard packagebase ascharacter asfactor c colnames dataframe factor library max min rbind sapply setseed strsplit sub summary table packagecaret dummyVars preProcess packagerandomForest randomForest packagestats predict packageutils readcsv str writecsv,"library(readr)
library(randomForest)
library(caret)
titanic_train <- read.csv(""../input/train.csv"", header = TRUE, dec = ""."", sep = "","")
titanic_test <- read.csv(""../input/test.csv"", header = TRUE, dec = ""."", sep = "","")
titanic_test$Survived <- NA
titanic_total <- rbind(titanic_train, titanic_test)
str(titanic_total)
titanic_total <- titanic_total[, -c(1, 9, 11)]
impute <- preProcess(titanic_total, method = ""bagImpute"")
titanic_total <- predict(impute, titanic_total)
titanic_total$Survived[892:1309] <- NA
table(titanic_total$Embarked)
titanic_total$Embarked <- as.character(titanic_total$Embarked)
titanic_total$Embarked[titanic_total$Embarked == """"] <- ""S""
table(titanic_total$Embarked)
titanic_total$Family <- 1 + titanic_total$SibSp + titanic_total$Parch
titanic_total$Stage[titanic_total$Age < 18] <- ""Child""
titanic_total$Stage[titanic_total$Age >= 18] <- ""Adult""
titanic_total$Name <- as.character(titanic_total$Name)
titanic_total$Title <- sapply(titanic_total$Name, FUN = function(x) {
    strsplit(x, split = ""[,.]"")[[1]][2]
})
titanic_total$Title <- sub("" "", """", titanic_total$Title)
titanic_total$Title[titanic_total$Title %in% c(""Mme"", ""Mlle"")] <- ""Mlle""
titanic_total$Title[titanic_total$Title %in% c(""Capt"", ""Don"", ""Major"", ""Sir"")] <- ""Sir""
titanic_total$Title[titanic_total$Title %in% c(""Dona"", ""Lady"", ""the Countess"", ""Jonkheer"")] <- ""Lady""
titanic_total <- titanic_total[, -3]
titanic_total$Survived <- as.factor(titanic_total$Survived)
titanic_total$Pclass <- factor(titanic_total$Pclass, ordered = TRUE, levels = c(""1"", ""2"", ""3""))
titanic_total$Embarked <- as.factor(titanic_total$Embarked)
titanic_total$Stage <- as.factor(titanic_total$Stage)
titanic_total$Title <- as.factor(titanic_total$Title)
standard <- function(x) (x - min(x))/(max(x) - min(x))
titanic_total$Age <- standard(titanic_total$Age)
titanic_total$SibSp <- standard(titanic_total$SibSp)
titanic_total$Parch <- standard(titanic_total$Parch)
titanic_total$Family <- standard(titanic_total$Family)
titanic_total$Fare <- standard(titanic_total$Fare)
dummy.vars <- dummyVars(~., data = titanic_total[, -1])
dummy_titanic <- predict(dummy.vars, titanic_total[, -1])
titanic_total <- data.frame(titanic_total[, 1], dummy_titanic)
colnames(titanic_total)[1] <- ""Survived""
str(titanic_total)
titanic_train <- titanic_total[1:891, ]
titanic_test <- titanic_total[892:1309, ]
set.seed(415)
fit_rf <- randomForest(Survived ~ ., data = titanic_train, importance = TRUE, ntree = 2000)
titanic_pred <- predict(fit_rf, newdata = titanic_test)
summary(titanic_pred)
submit <- data.frame(PassengerId = 892:1309, Survived = 0)
submit$Survived <- titanic_pred
write.csv(submit, ""gender_submission.csv"", row.names = FALSE)",1,0,1,0,0,0,0,1,0,0,0,0,0,0
50,divyabudale-conditional-inference-tree-model-titanic,0.7559999999999999,"['summary', 'plot', 'as.character', 'as.data.frame', 'c', 'data.frame', 'factor', 'gsub', 'ifelse', 'is.na', 'library', 'match', 'mean', 'merge', 'nrow', 'order', 'sample', 'set.seed', 'substr', 'table', 'unique', 'bind_rows', 'group_by', 'n', 'summarise', 'gpar', 'ctree', 'lm', 'predict', 'step', 'str_trim', 'read.csv', 'write.csv']","['dplyr', 'stringr', 'party', 'base']",2.2201161384582497,"['summarise', 'step', 'nrow', 'mean', 'str_trim', 'merge', 'as.character', 'is.na', 'ctree', 'lm', 'summary', 'n', 'set.seed', 'gsub', 'factor', 'match', 'unique', 'read.csv', 'table', 'as.data.frame', 'group_by', 'c', 'sample', 'ifelse', 'plot', 'predict', 'write.csv', 'order', 'gpar', 'bind_rows', 'data.frame', 'substr', 'library']",[],"['pliptor-optimal-titanic-for-pclass-only-0-65550', 'pliptor-optimal-titanic-for-gender-only-0-7655', 'cbrioso-titanic-rf', 'paulocressoni-titanic-using-stepwise-linear-regression', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'prabhulingayya-titanic-prediction-using-logistic-regression', 'cnusapbo-titanic-r-code']","[0.6778479973531439, 0.4554769842634797, 0.4083294976139523, 0.05540147541506373, 0.049854259486896965, 0.049854259486896965, 0.04960836005945585, 0.04960836005945585, 0.04741271330442683, 0.04740567066637845]","{'c(""package:stats4"", ""package:base"")': ['summary'], 'c(""package:stats4"", ""package:graphics"")': ['plot'], 'package:base': ['as.character', 'as.data.frame', 'c', 'data.frame', 'factor', 'gsub', 'ifelse', 'is.na', 'library', 'match', 'mean', 'merge', 'nrow', 'order', 'sample', 'set.seed', 'substr', 'table', 'unique'], 'package:dplyr': ['bind_rows', 'group_by', 'n', 'summarise'], 'package:grid': ['gpar'], 'package:party': ['ctree'], 'package:stats': ['lm', 'predict', 'step'], 'package:stringr': ['str_trim'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:stats4"", ""package:base"")"": [""summary""], ""c(""package:stats4"", ""package:graphics"")"": [""plot""], ""package:base"": [""as.character"", ""as.data.frame"", ""c"", ""data.frame"", ""factor"", ""gsub"", ""ifelse"", ""is.na"", ""library"", ""match"", ""mean"", ""merge"", ""nrow"", ""order"", ""sample"", ""set.seed"", ""substr"", ""table"", ""unique""], ""package:dplyr"": [""bind_rows"", ""group_by"", ""n"", ""summarise""], ""package:grid"": [""gpar""], ""package:party"": [""ctree""], ""package:stats"": [""lm"", ""predict"", ""step""], ""package:stringr"": [""str_trim""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackagestats4 packagebase summary cpackagestats4 packagegraphics plot packagebase ascharacter asdataframe c dataframe factor gsub ifelse isna library match mean merge nrow order sample setseed substr table unique packagedplyr bindrows groupby n summarise packagegrid gpar packageparty ctree packagestats lm predict step packagestringr strtrim packageutils readcsv writecsv,"train <- read.csv(""../input/train.csv"", header = TRUE, stringsAsFactors = FALSE)
test <- read.csv(""../input/test.csv"", header = TRUE, stringsAsFactors = FALSE)
library(dplyr)
comb <- bind_rows(train, test)
comb$Title <- gsub(""(.*,)|(\\..*)"", """", comb$Name)
table(comb$Sex, comb$Title)
f <- c(""Dona"", ""Lady"", ""Mlle"", ""Mme"", ""Ms"", ""the Countess"")
m <- c(""Capt"", ""Col"", ""Don"", ""Jonkheer"", ""Major"", ""Rev"", ""Sir"")
library(stringr)
comb$Title <- ifelse(str_trim(comb$Title) %in% f, ""Miss"", str_trim(comb$Title))
comb$Title <- ifelse(str_trim(comb$Title) %in% m, ""Mr"", str_trim(comb$Title))
comb[comb$Title == ""Dr"" & comb$Sex == ""female"", ]$Title <- ""Miss""
comb[comb$Title == ""Dr"" & comb$Sex == ""male"", ]$Title <- ""Mr""
comb$Title <- factor(comb$Title)
comb$Cabin <- substr(comb$Cabin, 1, 1)
table(comb$Cabin, comb$Pclass)
comb[comb$Cabin == ""T"", ]$Cabin <- ""C""
comb$Cabin <- factor(ifelse(comb$Cabin == """", ""O"", comb$Cabin))
table(comb$Embarked)
comb$Embarked <- as.character(comb$Embarked)
comb$Embarked <- factor(ifelse(comb$Embarked == """", ""S"", comb$Embarked))
comb[is.na(comb$Fare), ]
comb[is.na(comb$Fare), ]$Fare <- mean(comb[comb$Pclass == 3 & comb$Cabin == ""O"", ]$Fare, na.rm = TRUE)
comb <- comb[order(comb$Ticket), ]
comb$GroupNum <- factor(match(comb$Ticket, unique(comb$Ticket)))
x <- group_by(comb, GroupNum)
y <- summarise(x, GroupSize = n())
y <- as.data.frame(y)
comb <- merge(x = comb, y = y, by = ""GroupNum"", all = TRUE)
comb$GroupNum <- NULL
comb$GroupSize <- factor(comb$GroupSize)
comb$FamilySize <- factor(comb$SibSp + comb$Parch + 1)
comb$Pclass <- factor(comb$Pclass)
comb$Sex <- factor(comb$Sex)
comb$Survived <- factor(comb$Survived)
comb$PassengerId <- factor(comb$PassengerId)
myformula_age <- Age ~ Pclass + Sex + Fare + Cabin + Embarked + Title
model_age <- step(lm(myformula_age, data = comb), direction = ""backward"")
comb$Age[is.na(comb$Age)] <- predict(model_age, comb[is.na(comb$Age), ])
summary(comb$Age)
comb1 <- comb[order(comb$PassengerId), ]
set.seed(1234)
ind <- sample(2, nrow(comb1), replace = TRUE, prob = c(0.7, 0.3))
train.data <- comb1[1:891, ]
test.data <- comb1[892:1309, ]
library(party)
myformula <- Survived ~ Pclass + Sex + Age + Fare + Cabin + Embarked + Title + GroupSize + FamilySize
fulltree <- ctree(myformula, data = train.data)
plot(fulltree, gp = gpar(fontsize = 10))
Survived <- predict(fulltree, test.data)
PassengerId <- test.data$PassengerId
result <- data.frame(PassengerId, Survived)
write.csv(result, file = ""my_solution.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,0,0,0,0,0
51,bonesaw98616-exploring-survival-on-the-titanic,0.742,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",27.153048992157,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic', 'datascikrid-exploring-survival-on-the-titanic', 'anishmayaramka-the-titanic-datset', 'aturner-exploring-survival-on-the-titanic']","[0.999713177028438, 0.999713177028438, 0.999713177028438, 0.999713177028438, 0.999713177028438, 0.999713177028438, 0.999713177028438, 0.999713177028438, 0.999713177028438, 0.999713177028438]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
rf_model <- randomForest(factor(Survived) ~ Title + Sex + Fare + Age + Pclass, data = train)
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
52,bubblride-titanic-e1071-nu-svc,0.665,"['as.factor', 'is.na', 'library', 'list.files', 'options', 'set.seed', 'unname', 'confusionMatrix', 'createDataPartition', 'mutate', 'select', 'svm', 'predict', 'head', 'read.csv', 'write.csv']","['e1071', 'caret', 'tidyverse', 'base']",2.64489603042603,"['mutate', 'createDataPartition', 'confusionMatrix', 'predict', 'write.csv', 'options', 'list.files', 'unname', 'read.csv', 'head', 'as.factor', 'library', 'svm', 'select', 'is.na', 'set.seed']",[],"['bubblride-titanic-e1071-c-svc-fares-only', 'bubblride-titanic-e1071-c-svc-five-features', 'seshadrikolluri-predicting-survival-on-titanic', 'mustfkeskin-titanic-xgboost', 'rkumar3147-exploring-survival-on-the-titanic1', 'vizcharlie-exploring-survival-on-the-titanic', 'qianbi-titanic-voting-2', 'qianbi-titanic-voting', 'danr87946-titanic-practice', 'hertan-titanic-surviving-dataset-simple-expression']","[0.95475567436889, 0.6032463547792813, 0.3955722046233724, 0.24166355064502243, 0.23814660189464484, 0.23814660189464484, 0.236775487255264, 0.20073708469204612, 0.19799374523893418, 0.19222609401530238]","{'package:base': ['as.factor', 'is.na', 'library', 'list.files', 'options', 'set.seed', 'unname'], 'package:caret': ['confusionMatrix', 'createDataPartition'], 'package:dplyr': ['mutate', 'select'], 'package:e1071': ['svm'], 'package:stats': ['predict'], 'package:utils': ['head', 'read.csv', 'write.csv']}","{""package:base"": [""as.factor"", ""is.na"", ""library"", ""list.files"", ""options"", ""set.seed"", ""unname""], ""package:caret"": [""confusionMatrix"", ""createDataPartition""], ""package:dplyr"": [""mutate"", ""select""], ""package:e1071"": [""svm""], ""package:stats"": [""predict""], ""package:utils"": [""head"", ""read.csv"", ""write.csv""]}",packagebase asfactor isna library listfiles options setseed unname packagecaret confusionMatrix createDataPartition packagedplyr mutate select packagee1071 svm packagestats predict packageutils head readcsv writecsv,"options(echo = FALSE)
library(e1071)
library(caret)
library(tidyverse)
list.files(path = ""../input"")
df <- read.csv(""../input/train.csv"")
set.seed(42)
idx_train <- createDataPartition(df$PassengerId, p = 0.5, list = FALSE, times = 1)
df_train <- df[idx_train, ]
df_valid <- df[-idx_train, ]
model <- svm(x = df_train$Fare, y = as.factor(df_train$Survived), scale = FALSE, na.action = na.omit, type = ""nu-classification"", kernel = ""radial"", gamma = 100, nu = 0.7)
yhat <- predict(model, df_valid$Fare)
res <- confusionMatrix(as.factor(yhat), as.factor(df_valid$Survived))
acc <- unname(res$overall[1])
acc
df_test <- read.csv(""../input/test.csv"")
df_test$Fare[is.na(df_test$Fare)] <- 0
yhat <- predict(model, df_test$Fare)
res <- df_test %>% select(PassengerId) %>% mutate(Survived = yhat)
head(res)
write.csv(res, file = ""my_submission.csv"", row.names = F)",0,0,1,0,0,0,0,1,0,0,0,1,0,0
53,stevencahill-titanic-machine-learning-from-disaster,0.7440000000000001,"['data.frame', 'prop.table', 'rep', 'table', 'head', 'read.csv', 'str', 'write.csv']",['base'],0.31154203414917,"['write.csv', 'prop.table', 'data.frame', 'read.csv', 'table', 'head', 'rep', 'str']",[],"['jerlinraj-titanic-machine-learning-from-disaster', 'sudheer464-prediction-1-on-titanic-dataset', 'scout16-titanic-disaster-in-r', 'amodi8-titanic-exploring-survival-using-machine-learning', 'zhaotianjing-titanic', 'tobybot11-toby-s-titanic-analysis', 'sawajid-titanic-test', 'devanshugupta27-predicting-the-titanic-survival-rate', 'mihaque313-first-submission-to-titanic-problem', 'brirush-randomforest-implementation-of-titanic']","[0.7754444558446093, 0.7050346206682873, 0.6538601940582149, 0.5801215129746786, 0.5655723170281243, 0.5522799105223867, 0.5193010489330236, 0.4389744098860309, 0.4361946809909503, 0.41273593655813734]","{'package:base': ['data.frame', 'prop.table', 'rep', 'table'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""package:base"": [""data.frame"", ""prop.table"", ""rep"", ""table""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",packagebase dataframe proptable rep table packageutils head readcsv str writecsv,"train <- read.csv(file = ""../input/train.csv"", stringsAsFactors = FALSE, header = TRUE)
test <- read.csv(file = ""../input/test.csv"", stringsAsFactors = FALSE, header = TRUE)
str(train)
head(train, n = 10)
prop.table(table(train$Survived)) * 100
prop.table(table(train$Survived, train$Sex), 1) * 100
prop.table(table(train$Survived, train$Pclass), 1) * 100
prop.table(table(train$Pclass, train$Sex, train$Survived), 1) * 100
test$Survived <- rep(0, 418)
test$Survived <- 0
test$Survived[test$Sex == ""female""] <- 1
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = ""TitanicPrediction.csv"", row.names = FALSE)",0,0,0,0,1,0,0,0,0,0,0,0,0,0
54,antonov-logistic-regression-for-titanic,0.7659999999999999,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.factor', 'data.frame', 'exp', 'I', 'is.na', 'library', 'mean', 'options', 'return', 'summary', 'mutate', 'binomial', 'glm', 'na.omit', 'predict', 'sd', 'read.csv', 'write.csv']","['dplyr', 'base']",0.560991048812866,"['exp', 'mean', 'is.na', 'glm', 'options', 'na.omit', 'as.factor', 'summary', 'sd', 'binomial', 'read.csv', 'return', 'mutate', 'predict', 'write.csv', 'data.frame', 'I', 'user defined', 'library']",[],"['jacekpardyak-mytitanicscript', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'paulocressoni-titanic-using-stepwise-linear-regression', 'turntrout-titanic-data-exploration', 'ezhilvelme-titanic-neural-network-c-4-2', 'zahraatashgahy-r-titanic-1', 'anweshaghosh-titanic-forkofmultiplescripts-r']","[0.4283252985304927, 0.4190573965504051, 0.418606845165374, 0.39071971788971344, 0.39071971788971344, 0.382965415757331, 0.37230911479014783, 0.3656171902710504, 0.34511755082037293, 0.3335706533849906]","{'character(0)': ['sigmoid'], 'package:base': ['as.factor', 'data.frame', 'exp', 'I', 'is.na', 'library', 'mean', 'options', 'return', 'summary'], 'package:dplyr': ['mutate'], 'package:stats': ['binomial', 'glm', 'na.omit', 'predict', 'sd'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""sigmoid""], ""package:base"": [""as.factor"", ""data.frame"", ""exp"", ""I"", ""is.na"", ""library"", ""mean"", ""options"", ""return"", ""summary""], ""package:dplyr"": [""mutate""], ""package:stats"": [""binomial"", ""glm"", ""na.omit"", ""predict"", ""sd""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 sigmoid packagebase asfactor dataframe exp I isna library mean options return summary packagedplyr mutate packagestats binomial glm naomit predict sd packageutils readcsv writecsv,"library(""dplyr"")
options(stringsAsFactors = FALSE)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
train$Age[is.na(train$Age)] <- mean(na.omit(train$Age))
train$Fare[is.na(train$Fare)] <- mean(na.omit(train$Fare))
train$Embarked[is.na(train$Embarked)] <- ""S""
train$SibSp[is.na(train$SibSp)] <- 0
train$Parch[is.na(train$Parch)] <- 0
test$Age[is.na(test$Age)] <- mean(na.omit(test$Age))
test$Fare[is.na(test$Fare)] <- mean(na.omit(test$Fare))
test$Embarked[is.na(test$Embarked)] <- ""S""
test$SibSp[is.na(test$SibSp)] <- 0
test$Parch[is.na(test$Parch)] <- 0
train$Age <- (train$Age - mean(train$Age))/sd(train$Age)
test$Age <- (test$Age - mean(test$Age))/sd(test$Age)
train <- mutate(train, Sex = as.factor(Sex), Pclass = as.factor(Pclass), Survived = as.factor(Survived), Embarked = as.factor(Embarked), Family = SibSp + Parch)
test <- mutate(test, Sex = as.factor(Sex), Pclass = as.factor(Pclass), Embarked = as.factor(Embarked), Family = SibSp + Parch)
m_logit <- glm(data = train, Survived ~ Pclass * Fare + Sex * Age * Family + Sex * I(Age^2) + I(Family^2), family = binomial(link = ""logit""), x = TRUE)
summary(m_logit)
pr_logit <- predict(m_logit, test)
pr_test <- pr_logit
sigmoid <- function(x) {
    result <- 1/(1 + exp(-x))
    return(result)
}
pr_test[sigmoid(pr_test) >= 0.6] = 1
pr_test[sigmoid(pr_test) < 0.6] = 0
my_logit <- data.frame(PassengerId = test$PassengerId, Survived = pr_test)
write.csv(my_logit, file = ""my_solution_logit.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,0,0,0,0,0
56,aquilarif-explore-titanic-r,0.746,"['apply', 'as.integer', 'c', 'cut', 'data.frame', 'factor', 'grep', 'gsub', 'is.na', 'lapply', 'length', 'library', 'list', 'list.files', 'mean', 'merge', 'print', 'rep', 'return', 'set.seed', 'substr', 'table', 'unlist', 'bind_rows', 'randomForest', 'varImpPlot', 'aggregate', 'median', 'predict', 'read.csv', 'write.csv']","['ggplot2', 'readr', 'plyr', 'dplyr', 'randomForest', 'base']",1.6500148773193402,"['unlist', 'list', 'mean', 'median', 'lapply', 'merge', 'grep', 'is.na', 'print', 'varImpPlot', 'rep', 'set.seed', 'gsub', 'factor', 'as.integer', 'aggregate', 'cut', 'apply', 'length', 'read.csv', 'table', 'randomForest', 'return', 'c', 'predict', 'write.csv', 'list.files', 'bind_rows', 'data.frame', 'substr', 'library']",[],"['venkatko-titanic-survival1', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'tetyama-trial-titanic', 'abedben-exploring-survival-on-the-titanic', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'birger-titanic-competition-score-0-8134', 'arunkumarramanan-data-science-in-r-and-titanic-survival-prediction', 'msantos68-exploring-survival-on-the-titanic']","[0.8138251470956374, 0.8088096917934745, 0.8086866577174697, 0.8077965353441393, 0.8075172006406962, 0.8073883231513705, 0.8073883231513705, 0.8068159271007919, 0.8058884896085237, 0.8051915964200395]","{'package:base': ['apply', 'as.integer', 'c', 'cut', 'data.frame', 'factor', 'grep', 'gsub', 'is.na', 'lapply', 'length', 'library', 'list', 'list.files', 'mean', 'merge', 'print', 'rep', 'return', 'set.seed', 'substr', 'table', 'unlist'], 'package:dplyr': ['bind_rows'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:stats': ['aggregate', 'median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""apply"", ""as.integer"", ""c"", ""cut"", ""data.frame"", ""factor"", ""grep"", ""gsub"", ""is.na"", ""lapply"", ""length"", ""library"", ""list"", ""list.files"", ""mean"", ""merge"", ""print"", ""rep"", ""return"", ""set.seed"", ""substr"", ""table"", ""unlist""], ""package:dplyr"": [""bind_rows""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:stats"": [""aggregate"", ""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase apply asinteger c cut dataframe factor grep gsub isna lapply length library list listfiles mean merge print rep return setseed substr table unlist packagedplyr bindrows packagerandomForest randomForest varImpPlot packagestats aggregate median predict packageutils readcsv writecsv,"library(ggplot2)
library(readr)
library(plyr)
library(dplyr)
library(""randomForest"")
list.files(""../input"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
officer <- c(""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"")
royalty <- c(""Dona"", ""Lady"", ""the Countess"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% royalty] <- ""Royalty""
full$Title[full$Title %in% officer] <- ""Officer""
full$Embarked[c(62, 830)] <- ""S""
full$Fsize <- full$SibSp + full$Parch + 1
full$Fare[1044] <- median(full[full$Pclass == ""3"", ]$Fare, na.rm = TRUE)
full$FarePP <- full$Fare/full$Fsize
fareClassAvg <- aggregate(x = full$FarePP, by = list(full$Pclass, full$Embarked), FUN = mean)
a <- merge(full, fareClassAvg, by.x = c(""Pclass"", ""Embarked""), by.y = c(""Group.1"", ""Group.2""), all.x = TRUE)
full$meanFareForClass <- a$x
full$FareClass[full$FarePP >= full$meanFareForClass] <- ""High""
full$FareClass[full$FarePP < full$meanFareForClass] <- ""Low""
full$Deck <- lapply(full$Cabin, function(x) {
    if (!is.na(x) && x != """") {
        if (length(grep("" "", x)) > 0) {
            return(substr(x, 1, 1))
        }
        else {
            return(substr(x, 1, 1))
        }
    }
    else {
        return(""X"")
    }
})
title.age <- aggregate(full$Age, by = list(full$Title), FUN = function(x) median(x, na.rm = T))
full[is.na(full$Age), ""Age""] <- apply(full[is.na(full$Age), ], 1, function(x) title.age[title.age[, 1] == x[""Title""], 2])
full$AgeClass <- cut(full$Age, 10, labels = 1:10, ordered_result = TRUE)
full$AgeCat <- lapply(full$Age, function(x) {
    if (x < 10) 
        return(""Child"")
    else if (x > 60) 
        return(""Senior"")
    else if ((x > 10) && (x < 30)) 
        return(""Young"")
    else return(""Adult"")
})
full$Deck <- unlist(full$Deck)
full$Pclass <- factor(full$Pclass)
full$Sex <- factor(full$Sex)
full$Embarked <- factor(full$Embarked)
full$Title <- factor(full$Title)
full$Fsize <- factor(full$Fsize)
full$Deck <- factor(full$Deck)
full$FareClass <- factor(full$FareClass)
full$AgeCat <- unlist(full$AgeCat)
full$AgeCat <- factor(full$AgeCat)
full$FareClass <- factor(full$AgeClass)
a <- full[, -9]
final_mod <- a[, -10]
train <- final_mod[1:891, ]
test <- final_mod[892:1309, ]
set.seed(100)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + FareClass + Embarked + Title + Fare + Age + Fsize + AgeCat, data = train)
rf.fitted = predict(rf_model)
ans_rf = rep(NA, 891)
for (i in 1:891) {
    ans_rf[i] = as.integer(rf.fitted[[i]]) - 1
}
table(ans_rf)
print(rf_model)
mean(ans_rf == train$Survived)
varImpPlot(rf_model, main = ""RF_MODEL"")
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_model_sol.csv"", row.names = F)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
57,yinpatt-patrick-s-titanic,0.7559999999999999,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.factor', 'c', 'data.frame', 'factor', 'is.na', 'levels', 'library', 'return', 'row.names', 'set.seed', 'summary', 'aes', 'coord_flip', 'element_text', 'geom_bar', 'ggplot', 'ggsave', 'ggtitle', 'theme', 'theme_light', 'xlab', 'ylab', 'mosaicplot', 'dev.off', 'png', 'importance', 'randomForest', 'median', 'predict', 'reorder', 'read.csv', 'write.csv']","['randomForest', 'ggplot2', 'randomForest', 'base']",1.2261049747467,"['dev.off', 'median', 'element_text', 'coord_flip', 'theme', 'is.na', 'levels', 'png', 'ggsave', 'as.factor', 'summary', 'mosaicplot', 'importance', 'set.seed', 'theme_light', 'xlab', 'factor', 'geom_bar', 'read.csv', 'randomForest', 'return', 'row.names', 'c', 'aes', 'ylab', 'reorder', 'predict', 'write.csv', 'ggtitle', 'data.frame', 'ggplot', 'user defined', 'library']",[],"['francoisolivier-titanic-20', 'areebaatif-titanic', 'zhxiangxyang-titanic', 'johno883-john-orr-titanic-random-forest', 'econdata-machine-learning-on-titanic-dataset', 'fredman-titanic-barebones-benchmark-r', 'francoisolivier-fork-of-titanic-20', 'diegosiebra-rf-titanic-prediction-th3one', 'panda1023-svm-example-for-titanic', 'manskj-machine-learning-and-titanic']","[0.9162212636542444, 0.9162212636542444, 0.9162212636542444, 0.9132511129350054, 0.9117721189092378, 0.824173333002432, 0.815930017914613, 0.8136239118940944, 0.7537665065827318, 0.577145816522469]","{'character(0)': ['extractFeatures'], 'package:base': ['as.factor', 'c', 'data.frame', 'factor', 'is.na', 'levels', 'library', 'return', 'row.names', 'set.seed', 'summary'], 'package:ggplot2': ['aes', 'coord_flip', 'element_text', 'geom_bar', 'ggplot', 'ggsave', 'ggtitle', 'theme', 'theme_light', 'xlab', 'ylab'], 'package:graphics': ['mosaicplot'], 'package:grDevices': ['dev.off', 'png'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""extractFeatures""], ""package:base"": [""as.factor"", ""c"", ""data.frame"", ""factor"", ""is.na"", ""levels"", ""library"", ""return"", ""row.names"", ""set.seed"", ""summary""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""element_text"", ""geom_bar"", ""ggplot"", ""ggsave"", ""ggtitle"", ""theme"", ""theme_light"", ""xlab"", ""ylab""], ""package:graphics"": [""mosaicplot""], ""package:grDevices"": [""dev.off"", ""png""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 extractFeatures packagebase asfactor c dataframe factor isna levels library return rownames setseed summary packageggplot2 aes coordflip elementtext geombar ggplot ggsave ggtitle theme themelight xlab ylab packagegraphics mosaicplot packagegrDevices devoff png packagerandomForest importance randomForest packagestats median predict reorder packageutils readcsv writecsv,"library(randomForest)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
summary(train)
train$Survived <- factor(train$Survived, levels = c(1, 0))
levels(train$Survived) <- c(""Survived"", ""Died"")
train$Pclass <- as.factor(train$Pclass)
levels(train$Pclass) <- c(""1st Class"", ""2nd Class"", ""3rd Class"")
png(""1_survival_by_class.png"", width = 800, height = 600)
mosaicplot(train$Pclass ~ train$Survived, main = ""Passenger Survival by Class"", color = c(""#8dd3c7"", ""#fb8072""), shade = FALSE, xlab = """", ylab = """", off = c(0), cex.axis = 1.4)
dev.off()
library(ggplot2)
library(randomForest)
set.seed(1)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
extractFeatures <- function(data) {
    features <- c(""Pclass"", ""Age"", ""Sex"", ""Parch"", ""SibSp"", ""Fare"", ""Embarked"")
    fea <- data[, features]
    fea$Age[is.na(fea$Age)] <- -1
    fea$Fare[is.na(fea$Fare)] <- median(fea$Fare, na.rm = TRUE)
    fea$Embarked[fea$Embarked == """"] = ""S""
    fea$Sex <- as.factor(fea$Sex)
    fea$Embarked <- as.factor(fea$Embarked)
    return(fea)
}
rf <- randomForest(extractFeatures(train), as.factor(train$Survived), ntree = 100, importance = TRUE)
submission <- data.frame(PassengerId = test$PassengerId)
submission$Survived <- predict(rf, extractFeatures(test))
write.csv(submission, file = ""1_random_forest_r_submission.csv"", row.names = FALSE)
imp <- importance(rf, type = 1)
featureImportance <- data.frame(Feature = row.names(imp), Importance = imp[, 1])
p <- ggplot(featureImportance, aes(x = reorder(Feature, Importance), y = Importance)) + geom_bar(stat = ""identity"", fill = ""#53cfff"") + coord_flip() + theme_light(base_size = 20) + xlab("""") + ylab(""Importance"") + ggtitle(""Random Forest Feature Importance\n"") + theme(plot.title = element_text(size = 18))
ggsave(""2_feature_importance.png"", p)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
60,dsvijayaraghavan-vra-titanic,0.7490000000000001,"['apply', 'as.factor', 'c', 'colSums', 'data.frame', 'dim', 'gsub', 'ifelse', 'is.na', 'length', 'library', 'list.files', 'mean', 'names', 'sample', 'sum', 'summary', 'table', 'unique', 'bind_rows', 'aes', 'facet_wrap', 'geom_bar', 'geom_histogram', 'ggplot', 'ylab', 'plot', 'randomForest', 'rpart', 'rpart.plot', 'binomial', 'glm', 'predict', 'read.csv', 'str', 'write.csv']","['tidyverse', 'ggplot2', 'dplyr', 'GGally', 'rpart', 'rpart.plot', 'randomForest', 'base']",4.1070089340210005,"['mean', 'facet_wrap', 'is.na', 'glm', 'colSums', 'names', 'rpart', 'as.factor', 'summary', 'geom_histogram', 'str', 'gsub', 'dim', 'unique', 'geom_bar', 'apply', 'length', 'binomial', 'read.csv', 'table', 'randomForest', 'c', 'aes', 'ylab', 'sample', 'ifelse', 'sum', 'plot', 'predict', 'write.csv', 'list.files', 'bind_rows', 'data.frame', 'ggplot', 'rpart.plot', 'library']",[],"['waithira-titanic-analysis-with-r', 'hillabehar-titanic-analysis-with-r', 'shashank74-titanic-disaster-data-exploration-and-modelling', 'yuanwxu-exploring-survival-on-the-titanic', 'hemingwei-titanic-r-solution-from-megan-risdal', 'researchbigd-titanic-forkedfrommeganscript', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'tetyama-trial-titanic', 'msantos68-exploring-survival-on-the-titanic']","[0.9802023170574876, 0.9802023170574876, 0.5126427779085755, 0.4898265756084283, 0.4874985857823055, 0.4873933054391931, 0.4873225064791861, 0.4873225064791861, 0.48574937099322163, 0.4841972402585803]","{'package:base': ['apply', 'as.factor', 'c', 'colSums', 'data.frame', 'dim', 'gsub', 'ifelse', 'is.na', 'length', 'library', 'list.files', 'mean', 'names', 'sample', 'sum', 'summary', 'table', 'unique'], 'package:dplyr': ['bind_rows'], 'package:ggplot2': ['aes', 'facet_wrap', 'geom_bar', 'geom_histogram', 'ggplot', 'ylab'], 'package:graphics': ['plot'], 'package:randomForest': ['randomForest'], 'package:rpart': ['rpart'], 'package:rpart.plot': ['rpart.plot'], 'package:stats': ['binomial', 'glm', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""apply"", ""as.factor"", ""c"", ""colSums"", ""data.frame"", ""dim"", ""gsub"", ""ifelse"", ""is.na"", ""length"", ""library"", ""list.files"", ""mean"", ""names"", ""sample"", ""sum"", ""summary"", ""table"", ""unique""], ""package:dplyr"": [""bind_rows""], ""package:ggplot2"": [""aes"", ""facet_wrap"", ""geom_bar"", ""geom_histogram"", ""ggplot"", ""ylab""], ""package:graphics"": [""plot""], ""package:randomForest"": [""randomForest""], ""package:rpart"": [""rpart""], ""package:rpart.plot"": [""rpart.plot""], ""package:stats"": [""binomial"", ""glm"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase apply asfactor c colSums dataframe dim gsub ifelse isna length library listfiles mean names sample sum summary table unique packagedplyr bindrows packageggplot2 aes facetwrap geombar geomhistogram ggplot ylab packagegraphics plot packagerandomForest randomForest packagerpart rpart packagerpartplot rpartplot packagestats binomial glm predict packageutils readcsv str writecsv,"library(tidyverse)
list.files(path = ""../input"")
library(ggplot2)
library(dplyr)
library(GGally)
library(rpart)
library(rpart.plot)
library(randomForest)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
LT = dim(train)[1]
full <- bind_rows(train, test)
colSums(is.na(full))
colSums(full == """")
full$Embarked[full$Embarked == """"] <- ""S""
apply(full, 2, function(x) length(unique(x)))
factor_variables <- c(""Survived"", ""Pclass"", ""Sex"", ""Embarked"")
for (i in factor_variables) {
    full[, i] <- as.factor(full[, i])
}
str(full)
ggplot(data = full[1:LT, ], aes(x = Sex, fill = Survived)) + geom_bar()
ggplot(data = full[1:LT, ], aes(x = Embarked, fill = Survived)) + geom_bar(position = ""fill"") + ylab(""Frequency"")
t <- table(full[1:LT, ]$Embarked, full[1:LT, ]$Survived)
for (i in 1:dim(t)[1]) {
    t[i, ] <- t[i, ]/sum(t[i, ]) * 100
}
t
ggplot(data = full[1:LT, ], aes(x = Pclass, fill = Survived)) + geom_bar(position = ""fill"") + ylab(""Frequency"")
ggplot(data = full[1:LT, ], aes(x = Embarked, fill = Survived)) + geom_bar(position = ""fill"") + facet_wrap(~Pclass)
ggplot(data = full[1:LT, ], aes(x = SibSp, fill = Survived)) + geom_bar()
ggplot(data = full[1:LT, ], aes(x = Parch, fill = Survived)) + geom_bar()
ggplot(data = full[!(is.na(full[1:LT, ]$Age)), ], aes(x = Age, fill = Survived)) + geom_histogram(binwidth = 3)
ggplot(data = full[1:LT, ], aes(x = Fare, fill = Survived)) + geom_histogram(binwidth = 20, position = ""fill"")
full$Fare[is.na(full$Fare)] <- mean(full$Fare, na.rm = T)
sum(is.na(full$Age))
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked, data = full[!is.na(full$Age), ], method = ""anova"")
full$Age[is.na(full$Age)] <- predict(predicted_age, full[is.na(full$Age), ])
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title == ""Lady""] <- ""Miss""
full$Title[full$Title == ""Dona""] <- ""Miss""
officer <- c(""Capt"", ""Col"", ""Don"", ""Dr"", ""Jonkheer"", ""Major"", ""Rev"", ""Sir"", ""the Countess"")
full$Title[full$Title %in% officer] <- ""Officer""
full$Title <- as.factor(full$Title)
ggplot(data = full[1:LT, ], aes(x = Title, fill = Survived)) + geom_bar(position = ""fill"") + ylab(""Frequency"")
train_im <- full[1:LT, c(""Survived"", ""Pclass"", ""Sex"", ""Age"", ""Fare"", ""SibSp"", ""Parch"", ""Title"")]
ind <- sample(1:dim(train_im)[1], 500)
train1 <- train_im[ind, ]
train2 <- train_im[-ind, ]
model <- glm(Survived ~ ., family = binomial(link = ""logit""), data = train1)
summary(model)
glm(formula = Survived ~ ., family = binomial(link = ""logit""), data = train1)
pred.train <- predict(model, train2)
pred.train <- ifelse(pred.train > 0.5, 1, 0)
mean(pred.train == train2$Survived)
t1 <- table(pred.train, train2$Survived)
presicion <- t1[1, 1]/(sum(t1[1, ]))
recall <- t1[1, 1]/(sum(t1[, 1]))
presicion
recall
F1 <- 2 * presicion * recall/(presicion + recall)
test_im <- full[LT + 1:1309, c(""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Title"")]
pred.test <- predict(model, test_im)[1:418]
pred.test <- ifelse(pred.test > 0.5, 1, 0)
res <- data.frame(test$PassengerId, pred.test)
names(res) <- c(""PassengerId"", ""Survived"")
model_dt <- rpart(Survived ~ ., data = train1, method = ""class"")
rpart.plot(model_dt)
pred.train.dt <- predict(model_dt, train2, type = ""class"")
mean(pred.train.dt == train2$Survived)
t2 <- table(pred.train.dt, train2$Survived)
presicion_dt <- t2[1, 1]/(sum(t2[1, ]))
recall_dt <- t2[1, 1]/(sum(t2[, 1]))
presicion_dt
recall_dt
F1_dt <- 2 * presicion_dt * recall_dt/(presicion_dt + recall_dt)
F1_dt
pred.test.dt <- predict(model_dt, test_im, type = ""class"")[1:418]
res_dt <- data.frame(test$PassengerId, pred.test.dt)
names(res_dt) <- c(""PassengerId"", ""Survived"")
write.csv(res_dt, file = ""gender_submission.csv"", row.names = F)
model_rf <- randomForest(Survived ~ ., data = train1)
plot(model_rf)
pred.train.rf <- predict(model_rf, train2)
mean(pred.train.rf == train2$Survived)
t1 <- table(pred.train.rf, train2$Survived)
presicion <- t1[1, 1]/(sum(t1[1, ]))
recall <- t1[1, 1]/(sum(t1[, 1]))
presicion
recall
F1 <- 2 * presicion * recall/(presicion + recall)
F1
pred.test.rf <- predict(model_rf, test_im)[1:418]
res_rf <- data.frame(test$PassengerId, pred.test.rf)
names(res_rf) <- c(""PassengerId"", ""Survived"")",1,0,0,0,0,0,0,0,0,1,0,0,0,0
61,seanangio-predicting-titanic-survival,0.7390000000000001,"['arrange', 'summarize', 'filter', 'cbind', 'rbind', 'user defined', 'user defined', 'user defined', 'as.data.frame', 'c', 'cut', 'dim', 'droplevels', 'factor', 'ifelse', 'is.na', 'levels', 'library', 'list', 'log', 'mean', 'names', 'nrow', 'prop.table', 'round', 'set.seed', 'subset', 'substr', 'sum', 'summary', 'table', 'vector', 'createDataPartition', 'nearZeroVar', 'train', 'trainControl', 'group_by', 'n', 'select', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_jitter', 'geom_vline', 'ggplot', 'mosaicplot', 'par', 'grid.arrange', 'complete', 'mice', 'formula', 'glm', 'predict', 'step', 'str_extract', 'head', 'read.table', 'str', 'write.csv']","['caret', 'randomForest', 'plyr', 'dplyr', 'ggplot2', 'mice', 'gridExtra', 'stringr', 'knitr', 'base']",2.4557217001915,"['step', 'nrow', 'list', 'nearZeroVar', 'complete', 'mean', 'vector', 'coord_flip', 'geom_jitter', 'is.na', 'levels', 'subset', 'glm', 'droplevels', 'names', 'geom_boxplot', 'prop.table', 'log', 'summary', 'filter', 'round', 'n', 'geom_histogram', 'mosaicplot', 'mice', 'str_extract', 'str', 'set.seed', 'factor', 'arrange', 'dim', 'cut', 'geom_bar', 'summarize', 'grid.arrange', 'table', 'par', 'as.data.frame', 'group_by', 'train', 'c', 'aes', 'rbind', 'ifelse', 'sum', 'createDataPartition', 'geom_vline', 'predict', 'write.csv', 'ggplot', 'geom_density', 'read.table', 'head', 'substr', 'user defined', 'library', 'trainControl', 'cbind', 'select', 'formula', 'facet_grid']",[],"['sausen7-titanic-first-kernel', 'andrecn-random-forest-caret-model-prediction-titanic', 'naveennafee-titanic-survival', 'cnusapbo-titanic-r-code', 'prabhulingayya-titanic-prediction-using-logistic-regression', 'redroy44-tidy-titanic-script', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'tsfitz-titanic']","[0.5990000422377777, 0.43148285643282647, 0.13849129915820393, 0.1233613015059248, 0.122450296063609, 0.11971453774045801, 0.10448394076416861, 0.09636694369835383, 0.09626242455792049, 0.0947709568486208]","{'c(""package:dplyr"", ""package:plyr"")': ['arrange', 'summarize'], 'c(""package:dplyr"", ""package:stats"")': ['filter'], 'c(""package:mice"", ""package:base"")': ['cbind', 'rbind'], 'character(0)': ['set'], 'package:base': ['as.data.frame', 'c', 'cut', 'dim', 'droplevels', 'factor', 'ifelse', 'is.na', 'levels', 'library', 'list', 'log', 'mean', 'names', 'nrow', 'prop.table', 'round', 'set.seed', 'subset', 'substr', 'sum', 'summary', 'table', 'vector'], 'package:caret': ['createDataPartition', 'nearZeroVar', 'train', 'trainControl'], 'package:dplyr': ['group_by', 'n', 'select'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_jitter', 'geom_vline', 'ggplot'], 'package:graphics': ['mosaicplot', 'par'], 'package:gridExtra': ['grid.arrange'], 'package:mice': ['complete', 'mice'], 'package:stats': ['formula', 'glm', 'predict', 'step'], 'package:stringr': ['str_extract'], 'package:utils': ['head', 'read.table', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:plyr"")"": [""arrange"", ""summarize""], ""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""c(""package:mice"", ""package:base"")"": [""cbind"", ""rbind""], ""character(0)"": [""set""], ""package:base"": [""as.data.frame"", ""c"", ""cut"", ""dim"", ""droplevels"", ""factor"", ""ifelse"", ""is.na"", ""levels"", ""library"", ""list"", ""log"", ""mean"", ""names"", ""nrow"", ""prop.table"", ""round"", ""set.seed"", ""subset"", ""substr"", ""sum"", ""summary"", ""table"", ""vector""], ""package:caret"": [""createDataPartition"", ""nearZeroVar"", ""train"", ""trainControl""], ""package:dplyr"": [""group_by"", ""n"", ""select""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_jitter"", ""geom_vline"", ""ggplot""], ""package:graphics"": [""mosaicplot"", ""par""], ""package:gridExtra"": [""grid.arrange""], ""package:mice"": [""complete"", ""mice""], ""package:stats"": [""formula"", ""glm"", ""predict"", ""step""], ""package:stringr"": [""str_extract""], ""package:utils"": [""head"", ""read.table"", ""str"", ""write.csv""]}",cpackagedplyr packageplyr arrange summarize cpackagedplyr packagestats filter cpackagemice packagebase cbind rbind character0 set packagebase asdataframe c cut dim droplevels factor ifelse isna levels library list log mean names nrow proptable round setseed subset substr sum summary table vector packagecaret createDataPartition nearZeroVar train trainControl packagedplyr groupby n select packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomjitter geomvline ggplot packagegraphics mosaicplot par packagegridExtra gridarrange packagemice complete mice packagestats formula glm predict step packagestringr strextract packageutils head readtable str writecsv,"knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(randomForest)
library(plyr)
library(dplyr)
library(ggplot2)
library(mice)
library(gridExtra)
library(stringr)
library(knitr)
training <- read.table(""../input/train.csv"", sep = "","", header = TRUE, na.strings = c("""", ""NA""))
testing <- read.table(""../input/test.csv"", sep = "","", header = TRUE, na.strings = c("""", ""NA""))
str(training)
training$Survived <- factor(training$Survived)
training$Pclass <- factor(training$Pclass)
mosaicplot(table(training$Survived, training$Sex))
round(prop.table(table(training[, c(""Survived"", ""Sex"")])), 2)
mosaicplot(table(training$Survived, training$Pclass))
round(prop.table(table(training[, c(""Survived"", ""Pclass"")])), 2)
mosaicplot(table(training$Survived, training$Embarked))
round(table(training[, c(""Pclass"", ""Embarked"")]), 2)
training$Embarked[is.na(training$Embarked)] <- ""C""
training$Title <- factor(str_extract(training$Name, ""\\w+(?=\\.)""))
cbind(table(training$Title, training$Survived))
levels(training$Title) <- c(levels(training$Title), ""HonM"")
single_ladies <- c(""Mlle"", ""Lady"", ""Ms"")
hon_male <- c(""Sir"", ""Major"", ""Col"", ""Jonkheer"", ""Capt"", ""Don"", ""Col"")
mrs <- c(""Mme"", ""Countess"", ""Dona"")
training$Title[training$Title %in% single_ladies] <- ""Miss""
training$Title[training$Title %in% mrs] <- ""Mrs""
training$Title[training$Title %in% hon_male] <- ""HonM""
training$Title <- droplevels(training$Title)
cbind(table(training$Title, training$Survived))
training %>% filter(Cabin != """") %>% group_by(Pclass) %>% dplyr::summarize(n = n())
training$BerthAssgn <- factor(ifelse(is.na(training$Cabin), 0, 1))
prop.table(table(training$BerthAssgn, training$Survived))
training$Deck <- substr(training$Cabin, 1, 1)
training$Deck[is.na(training$Deck)] <- ""Missing""
training$Deck <- factor(training$Deck)
table(training$Deck, training$Survived)
par(mfrow = c(1, 2))
mosaicplot(table(training$Survived, training$SibSp))
mosaicplot(table(training$Survived, training$Parch))
training$FamilySize <- training$SibSp + training$Parch
ggplot(training, aes(x = FamilySize, fill = Survived)) + geom_histogram(position = ""dodge"")
training$FamCat <- NA
training$FamCat[training$FamilySize == 0] <- ""solo""
training$FamCat[training$FamilySize == 1] <- ""pair""
training$FamCat[training$FamilySize == 2] <- ""trio""
training$FamCat[training$FamilySize == 3] <- ""quartet""
training$FamCat[training$FamilySize >= 4] <- ""large""
training$FamCat <- factor(training$FamCat, levels = c(""solo"", ""pair"", ""trio"", ""quartet"", ""large""), ordered = TRUE)
ggplot(training, aes(x = FamCat, fill = Survived)) + geom_bar(position = ""dodge"")
ggplot(training, aes(y = Fare, x = Survived)) + geom_boxplot() + coord_flip()
summary(subset(training, training$Survived == 0 & training$Fare < 300)$Fare)
summary(subset(training, training$Survived == 1 & training$Fare < 300)$Fare)
ggplot(filter(training, Fare < 400), aes(x = Fare, color = Survived)) + geom_density() + geom_vline(xintercept = 13)
ggplot(filter(training, Fare < 400), aes(x = Fare, color = Pclass)) + geom_density() + geom_vline(xintercept = 13)
training$CheapTix <- factor(ifelse(training$Fare <= 13, 1, 0))
training$FareBin <- cut(training$Fare, breaks = 4, ordered_result = TRUE)
training %>% arrange(Fare) %>% select(Survived, Pclass, Sex, Fare) %>% head(15)
training$Fare[training$Fare == 0] <- 0.01
training$FareLog <- log(training$Fare)
ggplot(training, aes(x = Age, y = Pclass, color = Survived)) + geom_jitter(height = 0.1, alpha = 0.3) + facet_grid(Sex ~ .)
training %>% filter(!is.na(Age)) %>% group_by(Survived) %>% dplyr::summarize(n = n(), survival = n()/(424 + 290))
training %>% group_by(Survived) %>% dplyr::summarize(n = n(), survival = n/nrow(training))
set.seed(417)
tempData <- mice(training[, !names(training) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"")], method = ""pmm"")
mice_output <- complete(tempData)
p1 <- ggplot(training, aes(x = Age)) + geom_histogram()
p2 <- ggplot(mice_output, aes(x = Age)) + geom_histogram()
grid.arrange(p1, p2, ncol = 2)
summary(training$Age)
summary(mice_output$Age)
training$Age <- mice_output$Age
sum(is.na(training$Age))
ggplot(training, aes(x = Age, color = Survived)) + geom_density() + geom_vline(xintercept = 14)
training$Child <- factor(ifelse(training$Age <= 14, 1, 0))
training$AgeBin <- cut(training$Age, breaks = 5, ordered_result = TRUE)
drops <- c(""PassengerId"", ""Ticket"", ""Cabin"", ""Name"")
training <- training[, !(names(training) %in% drops)]
nearZero <- nearZeroVar(training, saveMetrics = TRUE)
nearZero[nearZero$nzv == TRUE, ]
table(training$FareBin)
training <- select(training, -FareBin)
fit.back <- step(glm(Survived ~ ., data = training, family = ""binomial""), direction = ""backward"")
null <- glm(Survived ~ 1, data = training, family = ""binomial"")
full <- glm(Survived ~ ., data = training, family = ""binomial"")
fit.forward <- step(null, scope = list(lower = null, upper = full), direction = ""forward"")
fit.both <- step(glm(Survived ~ ., data = training, family = ""binomial""), direction = ""both"")
summary(fit.back)$call
summary(fit.both)$call
summary(fit.forward)$call
form1 <- formula(Survived ~ Pclass + Age + Title + FamCat + FareLog)
form2 <- formula(Survived ~ Pclass + Age + Title + FamCat + FareLog + BerthAssgn)
set.seed(417)
intrain <- createDataPartition(y = training$Survived, p = 0.6, list = FALSE)
train <- training[intrain, ]
test <- training[-intrain, ]
dim(train)
dim(test)
round(prop.table(table(train$Survived)), 3)
round(prop.table(table(test$Survived)), 3)
ctrl <- trainControl(method = ""repeatedcv"", number = 10, repeats = 5)
methods <- c(""glm"", ""glmnet"", ""rpart"", ""ranger"", ""svmRadial"", ""knn"")
fits <- vector(""list"")
pred <- vector(""list"")
acc <- vector(""list"")
for (m in methods) {
    set.seed(417)
    fits[[m]] <- train(form1, data = train, method = m, trControl = ctrl, tuneLength = 5)
}
for (mod in names(fits)) {
    pred[[mod]] <- predict(fits[[mod]], test)
    acc[[mod]] <- mean(test$Survived == pred[[mod]])
}
acc.df1 <- as.data.frame(acc)
pred.df1 <- as.data.frame(pred)
acc.df1
fits <- vector(""list"")
pred <- vector(""list"")
acc <- vector(""list"")
for (m in methods) {
    set.seed(417)
    fits[[m]] <- train(form2, data = train, method = m, trControl = ctrl, tuneLength = 5)
}
for (mod in names(fits)) {
    pred[[mod]] <- predict(fits[[mod]], test)
    acc[[mod]] <- mean(test$Survived == pred[[mod]])
}
acc.df2 <- as.data.frame(acc)
pred.df2 <- as.data.frame(pred)
acc.df2
acc.all <- rbind(acc.df1, acc.df2)
acc.all
testing$Pclass <- factor(testing$Pclass)
testing$Title <- factor(str_extract(testing$Name, ""\\w+(?=\\.)""))
levels(testing$Title) <- c(levels(testing$Title), ""HonM"")
single_ladies <- c(""Mlle"", ""Lady"", ""Ms"")
hon_male <- c(""Sir"", ""Major"", ""Col"", ""Jonkheer"", ""Capt"", ""Don"", ""Col"")
mrs <- c(""Mme"", ""Countess"", ""Dona"")
testing$Title[testing$Title %in% single_ladies] <- ""Miss""
testing$Title[testing$Title %in% mrs] <- ""Mrs""
testing$Title[testing$Title %in% hon_male] <- ""HonM""
testing$Title <- droplevels(testing$Title)
testing$BerthAssgn <- factor(ifelse(is.na(testing$Cabin), 0, 1))
testing$Deck <- substr(testing$Cabin, 1, 1)
testing$Deck[is.na(testing$Deck)] <- ""Missing""
testing$Deck <- factor(testing$Deck)
testing$FamilySize <- testing$SibSp + testing$Parch
testing$FamCat <- NA
testing$FamCat[testing$FamilySize == 0] <- ""solo""
testing$FamCat[testing$FamilySize == 1] <- ""pair""
testing$FamCat[testing$FamilySize == 2] <- ""trio""
testing$FamCat[testing$FamilySize == 3] <- ""quartet""
testing$FamCat[testing$FamilySize >= 4] <- ""large""
testing$FamCat <- factor(testing$FamCat, levels = c(""solo"", ""pair"", ""trio"", ""quartet"", ""large""), ordered = TRUE)
testing$Fare[is.na(testing$Fare)] <- mean(testing$Fare, na.rm = TRUE)
testing$CheapTix <- factor(ifelse(testing$Fare <= 13, 1, 0))
testing$Fare[testing$Fare == 0] <- 0.01
testing$FareLog <- log(testing$Fare)
set.seed(417)
tempData <- mice(testing[, !names(testing) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"")], method = ""pmm"")
mice_output <- complete(tempData)
testing$Age <- mice_output$Age
testing$Child <- factor(ifelse(testing$Age <= 14, 1, 0))
testing$AgeBin <- cut(testing$Age, breaks = 5, ordered_result = TRUE)
drops <- c(""Ticket"", ""Cabin"", ""Name"")
testing <- testing[, !(names(testing) %in% drops)]
form2
set.seed(417)
fit.best <- train(form2, data = train, method = ""ranger"", trControl = ctrl, tuneLength = 5)
pred.best <- predict(fit.best, test)
table(test$Survived, pred.best)
mean(test$Survived == pred.best)
set.seed(417)
testing$Survived <- predict(fit.best, testing)
submission <- testing[, c(""PassengerId"", ""Survived"")]
write.csv(submission, file = ""submission.csv"", row.names = FALSE)",1,0,1,1,0,0,0,1,0,0,0,0,0,0
62,qianbi-titanic-nnet,0.742,"['c', 'factor', 'gsub', 'ifelse', 'lapply', 'library', 'nrow', 'bind_rows', 'complete', 'mice', 'nnet', 'predict', 'read.csv', 'write.csv']","['dplyr', 'mice', 'nnet', 'base']",3.96976399421692,"['gsub', 'nnet', 'factor', 'ifelse', 'nrow', 'predict', 'complete', 'write.csv', 'bind_rows', 'lapply', 'read.csv', 'library', 'mice', 'c']",[],"['qianbi-titanic-logistic-2', 'qianbi-titanic-svm', 'qianbi-titanic-rpart-2', 'qianbi-titanic-randomforest', 'qianbi-titanic-rpart', 'venkatko-titanic-survival1', 'jasonhit-first-script-for-kaggle-titanic', 'abedben-exploring-survival-on-the-titanic', 'tetyama-trial-titanic', 'hemingwei-titanic-r-solution-from-megan-risdal']","[0.9443364793211587, 0.9343761218567407, 0.9285033283579239, 0.9182003903369538, 0.8775525812821684, 0.8376702666880292, 0.8234217193983798, 0.8205525213164996, 0.8169668553499678, 0.8168379760448035]","{'package:base': ['c', 'factor', 'gsub', 'ifelse', 'lapply', 'library', 'nrow'], 'package:dplyr': ['bind_rows'], 'package:mice': ['complete', 'mice'], 'package:nnet': ['nnet'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""c"", ""factor"", ""gsub"", ""ifelse"", ""lapply"", ""library"", ""nrow""], ""package:dplyr"": [""bind_rows""], ""package:mice"": [""complete"", ""mice""], ""package:nnet"": [""nnet""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase c factor gsub ifelse lapply library nrow packagedplyr bindrows packagemice complete mice packagennet nnet packagestats predict packageutils readcsv writecsv,"library(dplyr)
library(mice)
library(nnet)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE, na.strings = """")
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE, na.strings = """")
full <- bind_rows(train, test)
full$Title <- gsub(""^.*, |\\. .*$"", """", full$Name)
Mr <- c(""Col"", ""Don"", ""Jonkheer"", ""Sir"")
Mrs <- c(""Dona"", ""Lady"", ""Mme"", ""the Countess"")
Miss <- c(""Mlle"", ""Ms"")
full$Title[full$Title %in% Mr] <- ""Mr""
full$Title[full$Title %in% Mrs] <- ""Mrs""
full$Title[full$Title %in% Miss] <- ""Miss""
full$Fsize <- full$SibSp + full$Parch + 1
full$FsizeD[full$Fsize == 1] <- ""Singleton""
full$FsizeD[full$Fsize > 1 & full$Fsize < 5] <- ""Small""
full$FsizeD[full$Fsize > 4] <- ""Large""
factor_var <- c(""Survived"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""FsizeD"")
full[factor_var] <- lapply(full[factor_var], factor)
mice_mod <- mice(full[, c(3, 5:8, 10, 12)], method = ""rf"")
mice_output <- complete(mice_mod)
full[, c(6, 10, 12)] <- mice_output[, c(3, 6, 7)]
full$Child <- factor(ifelse(full$Age <= 12, 1, 0))
train <- full[1:nrow(train), ]
test <- full[(nrow(train) + 1):nrow(full), ]
nn_mod <- nnet(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child, data = train, size = 10, decay = 0.01)
test$Survived <- predict(nn_mod, test, type = ""class"")
write.csv(test[, c(1, 2)], file = ""Titanic_nnet.csv"", row.names = FALSE)",0,0,0,1,0,0,0,0,0,0,0,0,0,0
63,alwortman-titanic-test-script,0.754,"['as.character', 'as.factor', 'c', 'data.frame', 'factor', 'is.na', 'library', 'rbind', 'sapply', 'set.seed', 'strsplit', 'sub', 'tbl_df', 'randomForest', 'rpart', 'median', 'predict', 'read.csv', 'write.csv']","['randomForest', 'rpart', 'rattle', 'rpart.plot', 'RColorBrewer', 'dplyr', 'base']",1.98154592514038,"['median', 'as.character', 'sub', 'is.na', 'rpart', 'as.factor', 'sapply', 'set.seed', 'factor', 'tbl_df', 'read.csv', 'randomForest', 'c', 'rbind', 'predict', 'write.csv', 'data.frame', 'strsplit', 'library']",[],"['ammara-titanic-competition-script-using-rf-2', 'alejandrorivas-titanic-beginners-principiantes-espa-ol', 'jmercer187-fork-of-titanic2', 'ammara-titanic-competition-using-boosting', 'aravind5-titanic', 'yugrao-titanic2', 'yugrao-titanic', 'aravind5-kaggle-titanic', 'mmaguero-titanic-majority-vote-of-ridge-rf-and-gbm', 'byrony-titanic-majority-vote-of-ridge-rf-and-gbm']","[0.7252432559881772, 0.7149351492848994, 0.7125833017613035, 0.6848111423174456, 0.6830754676313462, 0.6830754676313462, 0.6830754676313462, 0.6830754676313462, 0.6507145414948584, 0.6507145414948584]","{'package:base': ['as.character', 'as.factor', 'c', 'data.frame', 'factor', 'is.na', 'library', 'rbind', 'sapply', 'set.seed', 'strsplit', 'sub'], 'package:dplyr': ['tbl_df'], 'package:randomForest': ['randomForest'], 'package:rpart': ['rpart'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.character"", ""as.factor"", ""c"", ""data.frame"", ""factor"", ""is.na"", ""library"", ""rbind"", ""sapply"", ""set.seed"", ""strsplit"", ""sub""], ""package:dplyr"": [""tbl_df""], ""package:randomForest"": [""randomForest""], ""package:rpart"": [""rpart""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase ascharacter asfactor c dataframe factor isna library rbind sapply setseed strsplit sub packagedplyr tbldf packagerandomForest randomForest packagerpart rpart packagestats median predict packageutils readcsv writecsv,"library(randomForest)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(dplyr)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
train$family_size <- train$SibSp + train$Parch + 1
test$family_size <- test$SibSp + test$Parch + 1
test$Survived <- NA
combi <- rbind(train, test)
combi$Name <- as.character(combi$Name)
combi$Title <- sapply(combi$Name, FUN = function(x) {
    strsplit(x, split = ""[,.]"")[[1]][2]
})
combi$Title <- sub("" "", """", combi$Title)
combi$Title[combi$Title %in% c(""Mme"", ""Mlle"")] <- ""Mlle""
combi$Title[combi$Title %in% c(""Capt"", ""Don"", ""Major"", ""Jonkheer"", ""Sir"")] <- ""Sir""
combi$Title[combi$Title %in% c(""Dona"", ""Lady"", ""the Countess"")] <- ""Lady""
combi$Title <- factor(combi$Title)
all_data = combi
all_data$Embarked[c(62, 830)] = ""S""
all_data$Embarked <- factor(combi$Embarked)
all_data$Fare[1044] <- median(combi$Fare, na.rm = TRUE)
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + family_size, data = all_data[!is.na(all_data$Age), ], method = ""anova"")
all_data$Age[is.na(all_data$Age)] <- predict(predicted_age, all_data[is.na(all_data$Age), ])
train <- all_data[1:891, ]
test <- all_data[892:1309, ]
set.seed(111)
my_forest <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title, data = train, importance = TRUE, ntree = 1000)
my_prediction <- predict(my_forest, test)
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = ""my_solution.csv"", row.names = FALSE)
my_solution_df <- tbl_df(my_solution)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
64,vincentlugat-titanic-data-analysis-rf-prediction-0-81818,0.763,"['user defined', 'user defined', 'user defined', 'apply', 'as.integer', 'as.numeric', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'list', 'options', 'paste0', 'print', 'rep', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'suppressMessages', 'table', 'legend', 'mosaicplot', 'plot', 'hcl', 'importance', 'randomForest', 'aggregate', 'cor', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['randomForest', 'base']",3.42411994934082,"['list', 'median', 'hcl', 'cor', 'is.na', 'options', 'print', 'summary', 'sapply', 'round', 'rep', 'mosaicplot', 'importance', 'str', 'set.seed', 'gsub', 'factor', 'as.integer', 'colnames', 'aggregate', 'apply', 'read.csv', 'paste0', 'suppressMessages', 'table', 'randomForest', 'row.names', 'c', 'as.numeric', 'sum', 'plot', 'legend', 'predict', 'reorder', 'write.csv', 'data.frame', 'strsplit', 'user defined', 'library']",[],"['jenioai-titanic-data-analysis-rf-prediction-0-81818', 'delasupreme-titanic-data-analysis-rf-prediction-0-81818', 'pranaytiwari-titanic-data-analysis-rf-prediction-0-81818', 'imendoza-titanic-rf-prediction', 'ashutoshds-titanic-rf-prediction-0-81818', 'kapillehar-titanic-rf-prediction-0-81818', 'vikasht34-titanic-rf-prediction-0-81818', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n']","[0.9800726515992314, 0.960537936220937, 0.960537936220937, 0.960537936220937, 0.7725952653312191, 0.7563312936461319, 0.7563312936461319, 0.6175028149277353, 0.6170979761976463, 0.6170979761976463]","{'character(0)': ['aes', 'bind_rows', 'coord_flip', 'corrplot', 'dense_rank', 'desc', 'dollar_format', 'element_blank', 'facet_grid', 'facet_wrap', 'geom_bar', 'geom_density', 'geom_histogram', 'geom_jitter', 'geom_text', 'geom_vline', 'ggplot', 'ggtitle', 'labs', 'mutate', 'revalue', 'scale_fill_discrete', 'scale_x_continuous', 'theme', 'theme_few', 'xlab', 'ylab'], 'package:base': ['apply', 'as.integer', 'as.numeric', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'list', 'options', 'paste0', 'print', 'rep', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'suppressMessages', 'table'], 'package:graphics': ['legend', 'mosaicplot', 'plot'], 'package:grDevices': ['hcl'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['aggregate', 'cor', 'median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""character(0)"": [""aes"", ""bind_rows"", ""coord_flip"", ""corrplot"", ""dense_rank"", ""desc"", ""dollar_format"", ""element_blank"", ""facet_grid"", ""facet_wrap"", ""geom_bar"", ""geom_density"", ""geom_histogram"", ""geom_jitter"", ""geom_text"", ""geom_vline"", ""ggplot"", ""ggtitle"", ""labs"", ""mutate"", ""revalue"", ""scale_fill_discrete"", ""scale_x_continuous"", ""theme"", ""theme_few"", ""xlab"", ""ylab""], ""package:base"": [""apply"", ""as.integer"", ""as.numeric"", ""c"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""library"", ""list"", ""options"", ""paste0"", ""print"", ""rep"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""summary"", ""suppressMessages"", ""table""], ""package:graphics"": [""legend"", ""mosaicplot"", ""plot""], ""package:grDevices"": [""hcl""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""aggregate"", ""cor"", ""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",character0 aes bindrows coordflip corrplot denserank desc dollarformat elementblank facetgrid facetwrap geombar geomdensity geomhistogram geomjitter geomtext geomvline ggplot ggtitle labs mutate revalue scalefilldiscrete scalexcontinuous theme themefew xlab ylab packagebase apply asinteger asnumeric c colnames dataframe factor gsub isna library list options paste0 print rep round rownames sapply setseed strsplit sum summary suppressMessages table packagegraphics legend mosaicplot plot packagegrDevices hcl packagerandomForest importance randomForest packagestats aggregate cor median predict reorder packageutils readcsv str writecsv,"suppressMessages(library(""ggplot2""))
suppressMessages(library(""ggthemes""))
suppressMessages(library(""scales""))
suppressMessages(library(""dplyr""))
suppressMessages(library(""randomForest""))
suppressMessages(library(""corrplot""))
suppressMessages(library(""plyr""))
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
options(warn = -1)
str(full)
summary(full)
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram(bins = 30) + theme_few() + xlab(""Age"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Age vs Survived"")
ggplot(full[1:891, ], aes(Sex, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + theme_few() + xlab(""Sex"") + ylab(""Count"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Sex vs Survived"")
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram(bins = 30) + theme_few() + xlab(""Age"") + ylab(""Count"") + facet_grid(. ~ Sex) + scale_fill_discrete(name = ""Survived"") + theme_few() + ggtitle(""Age vs Sex vs Survived"")
ggplot(full[1:891, ], aes(Pclass, fill = factor(Survived))) + geom_bar(stat = ""count"") + theme_few() + xlab(""Pclass"") + facet_grid(. ~ Sex) + ylab(""Count"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Pclass vs Sex vs Survived"")
ggplot(full[1:891, ], aes(x = Age, y = Sex)) + geom_jitter(aes(colour = factor(Survived))) + theme_few() + theme(legend.title = element_blank()) + facet_wrap(~Pclass) + labs(x = ""Age"", y = ""Sex"", title = ""Pclass vs Sex vs Age vs Survived"") + scale_fill_discrete(name = ""Survived"") + scale_x_continuous(name = ""Age"", limits = c(0, 81))
ggplot(full[1:891, ], aes(x = Fare, y = Pclass)) + geom_jitter(aes(colour = factor(Survived))) + theme_few() + theme(legend.title = element_blank()) + labs(x = ""Age"", y = ""Pclass"", title = ""Fare vs Pclass"") + scale_fill_discrete(name = ""Survived"") + scale_x_continuous(name = ""Fare"", limits = c(0, 270), breaks = c(0, 40, 80, 120, 160, 200, 240, 280))
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
officer <- c(""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"")
royalty <- c(""Dona"", ""Lady"", ""the Countess"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% royalty] <- ""Royalty""
full$Title[full$Title %in% officer] <- ""Officer""
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
ggplot(full[1:891, ], aes(Title, fill = factor(Survived))) + geom_bar(stat = ""count"") + xlab(""Title"") + ylab(""Count"") + scale_fill_discrete(name = "" Survived"") + ggtitle(""Title vs Survived"") + theme_few()
full$Fsize <- full$SibSp + full$Parch + 1
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + xlab(""Family Size"") + ylab(""Count"") + theme_few() + scale_fill_discrete(name = ""Survived"") + ggtitle(""Family Size vs Survived"")
full$FsizeD[full$Fsize == 1] <- ""Alone""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""Small""
full$FsizeD[full$Fsize > 4] <- ""Big""
mosaicplot(table(full$FsizeD, full$Survived), main = ""FsizeD vs Survived"", ylab = ""Survived"", xlab = ""FsizeD"", col = hcl(c(50, 120)), )
full[c(62, 830), ""Embarked""]
full$Embarked[c(62, 830)] <- ""S""
ggplot(full[1:891, ], aes(Pclass, fill = factor(Survived))) + geom_bar(stat = ""count"") + theme_few() + xlab(""Pclass"") + ylab(""Count"") + facet_wrap(~Embarked) + scale_fill_discrete(name = ""Survived"") + ggtitle(""Embarked vs Pclass vs Survived"")
full[1044, ]
ggplot(full[full$Pclass == ""3"", ], aes(x = Fare)) + geom_density(fill = ""lightgrey"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""darkred"", linetype = ""dashed"", lwd = 1) + xlab(""Fare"") + ggtitle(""Pclass = 3"") + ylab(""Density"") + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"", ]$Fare, na.rm = TRUE)
title.age <- aggregate(full$Age, by = list(full$Title), FUN = function(x) median(x, na.rm = T))
full[is.na(full$Age), ""Age""] <- apply(full[is.na(full$Age), ], 1, function(x) title.age[title.age[, 1] == x[""Title""], 2])
sum(is.na(full$Age))
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
ggplot(full[1:891, ][full[1:891, ]$Child == ""Child"", ], aes(Sex, fill = factor(Survived))) + geom_bar(stat = ""count"") + xlab(""Sex"") + ylab(""Count"") + facet_wrap(~Pclass) + scale_fill_discrete(name = ""Survived"") + ggtitle(""Child vs Sex vs Pclass vs Survived"") + theme_few()
table(full$Child, full$Survived)
corr_data <- full[1:891, ]
corr_data$Embarked <- revalue(corr_data$Embarked, c(S = 1, Q = 2, C = 3))
corr_data$Sex <- revalue(corr_data$Sex, c(male = 1, female = 2))
corr_data$Title <- revalue(corr_data$Title, c(Mr = 1, Master = 2, Officer = 3, Mrs = 4, Royalty = 5, Miss = 6))
corr_data$FsizeD <- revalue(corr_data$FsizeD, c(Small = 1, Alone = 2, Big = 3))
corr_data$Child <- revalue(corr_data$Child, c(Adult = 1, Child = 2))
corr_data$FsizeD <- as.numeric(corr_data$FsizeD)
corr_data$Child <- as.numeric(corr_data$Child)
corr_data$Sex <- as.numeric(corr_data$Sex)
corr_data$Embarked <- as.numeric(corr_data$Embarked)
corr_data$Title <- as.numeric(corr_data$Title)
corr_data$Pclass <- as.numeric(corr_data$Pclass)
corr_data$Survived <- as.numeric(corr_data$Survived)
corr_data <- corr_data[, c(""Survived"", ""Pclass"", ""Sex"", ""FsizeD"", ""Fare"", ""Embarked"", ""Title"", ""Child"")]
str(corr_data)
mcorr_data <- cor(corr_data)
corrplot(mcorr_data, method = ""circle"")
full$Child <- factor(full$Child)
full$Sex <- factor(full$Sex)
full$Embarked <- factor(full$Embarked)
full$Title <- factor(full$Title)
full$Pclass <- factor(full$Pclass)
full$FsizeD <- factor(full$FsizeD)
full1 <- full[, -9]
full_mod <- full1[, -10]
train <- full_mod[1:891, ]
test <- full_mod[892:1309, ]
library(""randomForest"")
set.seed(123)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Fare + Embarked + Title + FsizeD + Child, data = train)
rf.fitted = predict(rf_model)
ans_rf = rep(NA, 891)
for (i in 1:891) {
    ans_rf[i] = as.integer(rf.fitted[[i]]) - 1
}
table(ans_rf)
print(rf_model)
prediction <- predict(rf_model, test)
solution <- data.frame(Survived = prediction, PassengerID = test$PassengerId)
write.csv(solution, file = ""rf_model_sol.csv"", row.names = F)
plot(rf_model, ylim = c(0, 0.36), main = ""RF_MODEL"")
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()",1,0,0,0,0,0,0,0,0,0,0,0,0,0
65,arjunmalhotra-titanic,0.732,"['as.data.frame', 'as.factor', 'ifelse', 'is.na', 'library', 'list.files', 'binomial', 'glm', 'median', 'predict', 'read.csv', 'write.csv']","['ggplot2', 'readr', 'base']",0.688859939575195,"['ifelse', 'predict', 'write.csv', 'median', 'list.files', 'read.csv', 'binomial', 'as.factor', 'library', 'as.data.frame', 'is.na', 'glm']",[],"['danr87946-titanic-practice', 'jerlinraj-titanic-machine-learning-from-disaster', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'scout16-titanic-disaster-in-r', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'jacekpardyak-mytitanicscript', 'stevencahill-titanic-machine-learning-from-disaster', 'amodi8-titanic-exploring-survival-using-machine-learning']","[0.36226306439973566, 0.3455422621220921, 0.3389352050655575, 0.33784868388504763, 0.33758053295476986, 0.3365800648123344, 0.3365800648123344, 0.33204572924426223, 0.32397878529336416, 0.3208290377722796]","{'package:base': ['as.data.frame', 'as.factor', 'ifelse', 'is.na', 'library', 'list.files'], 'package:stats': ['binomial', 'glm', 'median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.data.frame"", ""as.factor"", ""ifelse"", ""is.na"", ""library"", ""list.files""], ""package:stats"": [""binomial"", ""glm"", ""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase asdataframe asfactor ifelse isna library listfiles packagestats binomial glm median predict packageutils readcsv writecsv,"library(ggplot2)
library(readr)
list.files(""../input"")
train <- read.csv(""../input/train.csv"", header = TRUE)
train$Sex <- as.factor(train$Sex)
test <- read.csv(""../input/test.csv"", header = TRUE)
test$Sex <- as.factor(test$Sex)
train.age.median <- median(train$Age, na.rm = TRUE)
test$Age[is.na(test$Age)] <- train.age.median
train.logit_1 <- glm(Survived ~ Pclass + Sex + Age + SibSp, family = binomial(link = ""logit""), data = train)
Survived.Prob <- predict(train.logit_1, newdata = test, type = ""response"")
Survived.Prob.Frame <- as.data.frame(Survived.Prob)
Survived.Predict <- ifelse(Survived.Prob.Frame >= 0.5, 1, 0)
PassengerId <- test$PassengerId
Entry.df <- as.data.frame(PassengerId)
Entry.df$Survived <- Survived.Predict
write.csv(Entry.df, file = ""Kaggle_Titanic_Submission.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,0,0,0,0,0
67,vikramatjob-exploring-survival-on-the-titanic-var2,0.7440000000000001,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'list', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'table', 'resamples', 'train', 'trainControl', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'dotplot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'caret', 'MASS', 'base']",45.871855974197395,"['labs', 'list', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'dotplot', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'resamples', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'summary', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'train', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'library', 'trainControl', 'facet_grid']",[],"['vikramatjob-exploring-survival-on-the-titanic-var1', 'bonesaw98616-exploring-survival-on-the-titanic', 'rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic', 'datascikrid-exploring-survival-on-the-titanic']","[0.9027258265347448, 0.9023636785311894, 0.9009931783632656, 0.9009931783632656, 0.9009931783632656, 0.9009931783632656, 0.9009931783632656, 0.9009931783632656, 0.9009931783632656, 0.9009931783632656]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'list', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'table'], 'package:caret': ['resamples', 'train', 'trainControl'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:lattice': ['dotplot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""list"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""summary"", ""table""], ""package:caret"": [""resamples"", ""train"", ""trainControl""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:lattice"": [""dotplot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library list names nlevels paste paste0 round rownames sapply setseed strsplit sum summary table packagecaret resamples train trainControl packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagelattice dotplot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
library(""caret"")
library(""MASS"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. ""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
full$Fare[1044]
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
factor_vars
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
full[factor_vars]
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
train2 <- train
test2 <- test
control <- trainControl(method = ""cv"", number = 10)
metric <- ""Accuracy""
set.seed(7)
fit.rf <- train(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train2, method = ""rf"", metric = metric, trControl = control)
set.seed(7)
fit.lda <- train(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train2, method = ""lda"", metric = metric, trControl = control)
set.seed(7)
fit.cart <- train(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train2, method = ""rpart"", metric = metric, trControl = control)
set.seed(7)
fit.knn <- train(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train2, method = ""knn"", metric = metric, trControl = control)
set.seed(7)
fit.svm <- train(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train2, method = ""svmRadial"", metric = metric, trControl = control)
results <- resamples(list(lda = fit.lda, rf = fit.rf, cart = fit.cart, knn = fit.knn, svm = fit.svm))
summary(results)
dotplot(results)
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
rf_model
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
importance
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""vikram_rf_mod_Solution.csv"", row.names = F)",1,0,1,1,0,0,1,1,0,0,0,0,0,0
70,johno883-john-orr-titanic-random-forest,0.768,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.factor', 'c', 'data.frame', 'is.na', 'library', 'return', 'row.names', 'set.seed', 'aes', 'coord_flip', 'element_text', 'geom_bar', 'ggplot', 'ggsave', 'ggtitle', 'theme', 'theme_light', 'xlab', 'ylab', 'importance', 'randomForest', 'median', 'predict', 'reorder', 'read.csv', 'write.csv']","['ggplot2', 'randomForest', 'base']",1.42402505874634,"['median', 'element_text', 'coord_flip', 'theme', 'is.na', 'ggsave', 'as.factor', 'importance', 'theme_light', 'xlab', 'set.seed', 'geom_bar', 'read.csv', 'randomForest', 'return', 'row.names', 'c', 'aes', 'ylab', 'reorder', 'predict', 'write.csv', 'ggtitle', 'data.frame', 'ggplot', 'user defined', 'library']",[],"['francoisolivier-titanic-20', 'areebaatif-titanic', 'zhxiangxyang-titanic', 'econdata-machine-learning-on-titanic-dataset', 'yinpatt-patrick-s-titanic', 'francoisolivier-fork-of-titanic-20', 'fredman-titanic-barebones-benchmark-r', 'diegosiebra-rf-titanic-prediction-th3one', 'panda1023-svm-example-for-titanic', 'manskj-machine-learning-and-titanic']","[0.9987838251035478, 0.9987838251035478, 0.9987838251035478, 0.9932749243276986, 0.9132511129350054, 0.9090130522680895, 0.9068692722764723, 0.8827054077321027, 0.8381508461208989, 0.5970126300223187]","{'character(0)': ['extractFeatures'], 'package:base': ['as.factor', 'c', 'data.frame', 'is.na', 'library', 'return', 'row.names', 'set.seed'], 'package:ggplot2': ['aes', 'coord_flip', 'element_text', 'geom_bar', 'ggplot', 'ggsave', 'ggtitle', 'theme', 'theme_light', 'xlab', 'ylab'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""extractFeatures""], ""package:base"": [""as.factor"", ""c"", ""data.frame"", ""is.na"", ""library"", ""return"", ""row.names"", ""set.seed""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""element_text"", ""geom_bar"", ""ggplot"", ""ggsave"", ""ggtitle"", ""theme"", ""theme_light"", ""xlab"", ""ylab""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 extractFeatures packagebase asfactor c dataframe isna library return rownames setseed packageggplot2 aes coordflip elementtext geombar ggplot ggsave ggtitle theme themelight xlab ylab packagerandomForest importance randomForest packagestats median predict reorder packageutils readcsv writecsv,"library(ggplot2)
library(randomForest)
set.seed(1)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
extractFeatures <- function(data) {
    features <- c(""Pclass"", ""Age"", ""Sex"", ""Parch"", ""SibSp"", ""Fare"", ""Embarked"")
    fea <- data[, features]
    fea$Age[is.na(fea$Age)] <- median(fea$Age, na.rm = TRUE)
    fea$Fare[is.na(fea$Fare)] <- median(fea$Fare, na.rm = TRUE)
    fea$Embarked[fea$Embarked == """"] = ""S""
    fea$Sex <- as.factor(fea$Sex)
    fea$Embarked <- as.factor(fea$Embarked)
    return(fea)
}
rf <- randomForest(extractFeatures(train), as.factor(train$Survived), ntree = 100, importance = TRUE)
submission <- data.frame(PassengerId = test$PassengerId)
submission$Survived <- predict(rf, extractFeatures(test))
write.csv(submission, file = ""1_random_forest_r_submission.csv"", row.names = FALSE)
imp <- importance(rf, type = 1)
featureImportance <- data.frame(Feature = row.names(imp), Importance = imp[, 1])
p <- ggplot(featureImportance, aes(x = reorder(Feature, Importance), y = Importance)) + geom_bar(stat = ""identity"", fill = ""#53cfff"") + coord_flip() + theme_light(base_size = 20) + xlab("""") + ylab(""Importance"") + ggtitle(""Random Forest Feature Importance\n"") + theme(plot.title = element_text(size = 18))
ggsave(""2_feature_importance.png"", p)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
71,ablearcher-my-titanic,0.787,"['filter', 'any', 'apply', 'as.data.frame', 'as.factor', 'as.numeric', 'c', 'cbind', 'ceiling', 'floor', 'gsub', 'ifelse', 'is.na', 'length', 'library', 'names', 'nrow', 'paste', 'rbind', 'round', 'row.names', 'set.seed', 'sum', 'table', 'unique', 'which', 'createMultiFolds', 'dummyVars', 'preProcess', 'train', 'trainControl', 'group_by', 'mutate', 'n', 'summarise', 'aes', 'facet_wrap', 'geom_bar', 'geom_line', 'geom_text', 'ggplot', 'labs', 'position_stack', 'scale_y_continuous', 'theme_bw', 'ylim', 'randomForest', 'prp', 'median', 'predict', 'read.csv', 'write.csv']","['ggplot2', 'caret', 'dplyr', 'randomForest', 'rpart', 'rpart.plot', 'base']",17.7939639091492,"['summarise', 'labs', 'nrow', 'createMultiFolds', 'facet_wrap', 'geom_text', 'median', 'which', 'is.na', 'names', 'as.factor', 'dummyVars', 'filter', 'round', 'n', 'set.seed', 'gsub', 'prp', 'unique', 'geom_bar', 'preProcess', 'apply', 'length', 'position_stack', 'theme_bw', 'table', 'randomForest', 'read.csv', 'as.data.frame', 'group_by', 'row.names', 'c', 'train', 'aes', 'any', 'scale_y_continuous', 'mutate', 'rbind', 'paste', 'as.numeric', 'ifelse', 'sum', 'predict', 'write.csv', 'geom_line', 'ggplot', 'ceiling', 'library', 'trainControl', 'cbind', 'ylim', 'floor']",[],"['maza91-titanic-logistic-regression', 'domini-titanic-data-exploration-and-modelling', 'ravikrishnareddy-titanic-survival-prediction', 'harsh2-exploring-the-titanic-dataset', 'djohnbar-titanic-rf', 'zahoorahmad-titanic-2nd-degree-families-and-majority-voting', 'ushasri-titanic-2nd-degree-families-and-majority-voting', 'erikbruin-titanic-2nd-degree-families-and-majority-voting', 'djohnbar-fork-of-titanic-rf-w-titles', 'aeintngon-titanic-exploratory-analysis']","[0.7359164164292843, 0.7089667938378381, 0.6995209347995648, 0.699308334788702, 0.6940871435878067, 0.6929738609079813, 0.6929738609079813, 0.6923308956533324, 0.6828638149933003, 0.6577871458624981]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['any', 'apply', 'as.data.frame', 'as.factor', 'as.numeric', 'c', 'cbind', 'ceiling', 'floor', 'gsub', 'ifelse', 'is.na', 'length', 'library', 'names', 'nrow', 'paste', 'rbind', 'round', 'row.names', 'set.seed', 'sum', 'table', 'unique', 'which'], 'package:caret': ['createMultiFolds', 'dummyVars', 'preProcess', 'train', 'trainControl'], 'package:dplyr': ['group_by', 'mutate', 'n', 'summarise'], 'package:ggplot2': ['aes', 'facet_wrap', 'geom_bar', 'geom_line', 'geom_text', 'ggplot', 'labs', 'position_stack', 'scale_y_continuous', 'theme_bw', 'ylim'], 'package:randomForest': ['randomForest'], 'package:rpart.plot': ['prp'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""any"", ""apply"", ""as.data.frame"", ""as.factor"", ""as.numeric"", ""c"", ""cbind"", ""ceiling"", ""floor"", ""gsub"", ""ifelse"", ""is.na"", ""length"", ""library"", ""names"", ""nrow"", ""paste"", ""rbind"", ""round"", ""row.names"", ""set.seed"", ""sum"", ""table"", ""unique"", ""which""], ""package:caret"": [""createMultiFolds"", ""dummyVars"", ""preProcess"", ""train"", ""trainControl""], ""package:dplyr"": [""group_by"", ""mutate"", ""n"", ""summarise""], ""package:ggplot2"": [""aes"", ""facet_wrap"", ""geom_bar"", ""geom_line"", ""geom_text"", ""ggplot"", ""labs"", ""position_stack"", ""scale_y_continuous"", ""theme_bw"", ""ylim""], ""package:randomForest"": [""randomForest""], ""package:rpart.plot"": [""prp""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase any apply asdataframe asfactor asnumeric c cbind ceiling floor gsub ifelse isna length library names nrow paste rbind round rownames setseed sum table unique which packagecaret createMultiFolds dummyVars preProcess train trainControl packagedplyr groupby mutate n summarise packageggplot2 aes facetwrap geombar geomline geomtext ggplot labs positionstack scaleycontinuous themebw ylim packagerandomForest randomForest packagerpartplot prp packagestats median predict packageutils readcsv writecsv,"library(ggplot2)
library(caret)
library(dplyr)
library(randomForest)
library(rpart)
library(rpart.plot)
train <- read.csv(""../input/train.csv"", header = TRUE, stringsAsFactors = FALSE)
test <- read.csv(""../input/test.csv"", header = TRUE, stringsAsFactors = FALSE)
test$Survived <- NA
all <- rbind(train, test)
all$Survived <- as.factor(all$Survived)
all$MissingData <- apply(all, 1, function(x) any(is.na(x)))
all %>% group_by(MissingData) %>% summarise(n = n()) %>% mutate(share = n/sum(n))
all$LastName <- gsub("", .*"", """", all$Name)
all$Title = gsub("".*, |\\. .*"", """", all$Name)
table(all$Title)
men <- c(""Capt"", ""Col"", ""Don"", ""Dr"", ""Jonkheer"", ""Major"", ""Rev"", ""Sir"")
women <- c(""Dona"", ""Lady"", ""Mme"", ""the Countess"")
girls <- c(""Mlle"", ""Ms"")
all$Title[all$Title %in% men] <- ""Mr""
all$Title[all$Title %in% women] <- ""Mrs""
all$Title[all$Title %in% girls] <- ""Miss""
all$Title <- as.factor(all$Title)
table(all$Pclass)
all$Pclass <- as.factor(all$Pclass)
all %>% filter(!is.na(Survived)) %>% group_by(Pclass, Survived = ifelse(Survived == 1, ""Yes"", ""No"")) %>% summarise(n = n()) %>% mutate(share = n/sum(n)) %>% ggplot(aes(Pclass, share, fill = Survived, label = paste(round(share * 100), ""%"", sep = """"))) + geom_bar(position = ""stack"", stat = ""identity"", color = ""black"") + geom_text(position = position_stack(vjust = 0.5)) + labs(x = ""Ticket class"", y = ""Survival"", title = ""Survival by ticket class"") + scale_y_continuous(labels = scales::percent) + theme_bw()
table(all$Sex)
all$Sex <- as.factor(all$Sex)
all %>% filter(!is.na(Survived)) %>% group_by(Sex, Pclass, Survived = ifelse(Survived == 1, ""Yes"", ""No"")) %>% summarise(n = n()) %>% mutate(share = n/sum(n)) %>% ggplot(aes(Sex, share, fill = Survived, label = paste(round(share * 100), ""%"", sep = """"))) + geom_bar(position = ""stack"", stat = ""identity"", color = ""black"") + geom_text(position = position_stack(vjust = 0.5)) + labs(x = ""Ticket class"", y = ""Survival"", title = ""Survival by ticket class and class"") + scale_y_continuous(labels = scales::percent) + 
    facet_wrap(. ~ Pclass) + theme_bw()
length(which(is.na(all$Age)))
length(which(is.na(all$SibSp)))
length(which(is.na(all$Parch)))
all$FamilySize <- all$SibSp + all$Parch + 1
length(which(is.na(all$Ticket)))
length(which(is.na(all$Fare)))
noFareRow <- which(is.na(all$Fare))
all$Fare[noFareRow] <- median(all$Fare[all$Pclass == all$Pclass[noFareRow] & all$FamilySize == all$FamilySize[noFareRow]], na.rm = TRUE)
all$FarePerson <- apply(all, 1, function(x) as.numeric(x[""Fare""])/nrow(all[all$Ticket == x[""Ticket""], ]))
length(which(is.na(all$Cabin)))
table(all$Cabin == """", all$Pclass)
length(which(is.na(all$Embarked)))
all$Embarked <- as.factor(all$Embarked)
all$Family <- NA
workData <- all[, c(""LastName"", ""Ticket"", ""FamilySize"")]
repeat {
    row <- workData[1, ]
    ticket <- row$Ticket
    lastName <- row$LastName
    famSize <- row$FamilySize
    famData <- workData[workData$LastName == lastName & workData$FamilySize == famSize, ]
    if (!nrow(famData) == row$FamilySize) {
        if (nrow(famData[famData$Ticket == ticket, ]) == famSize) {
            famData <- famData[famData$Ticket == ticket, ]
        }
        else {
            famData <- workData[1, ]
        }
    }
    tickets <- unique(famData$Ticket)
    famData <- workData[workData$Ticket %in% tickets, ]
    famCount <- nrow(famData)
    lastNames <- paste(unique(famData$LastName), collapse = ""/"")
    indices <- row.names(famData)
    if (famCount > 1) 
        all[row.names(all) %in% indices, ""Family""] <- paste(lastNames, famCount, ticket)
    workData <- workData[!row.names(workData) %in% indices, ]
    if (nrow(workData) == 0) {
        break
    }
}
all$FamilyLive <- NA
all$FamilyDied <- NA
for (i in 1:nrow(all)) {
    famData <- all[all$Family == all$Family[i] & all$PassengerId != all$PassengerId[i], ]
    all$FamilyLive[i] <- ifelse(length(which(famData$Survived == 1)) > 0, 1, 0)
    all$FamilyDied[i] <- ifelse(length(which(famData$Survived == 0)) > 0, 1, 0)
}
all$FamilyLive <- as.factor(all$FamilyLive)
all$FamilyDied <- as.factor(all$FamilyDied)
all %>% filter(!is.na(Survived)) %>% group_by(FamilyLive = ifelse(FamilyLive == 1, ""Yes"", ""No""), Survived) %>% summarise(n = n()) %>% mutate(share = n/sum(n)) %>% ggplot(aes(x = FamilyLive, y = share, fill = Survived, label = paste(round(share * 100), ""%"", sep = """"))) + geom_bar(stat = ""identity"", position = ""stack"", color = ""black"") + geom_text(position = position_stack(vjust = 0.5)) + scale_y_continuous(labels = scales::percent)
all %>% filter(!is.na(Survived)) %>% group_by(FamilyDied = ifelse(FamilyDied == 1, ""Yes"", ""No""), Survived) %>% summarise(n = n()) %>% mutate(share = n/sum(n)) %>% ggplot(aes(x = FamilyDied, y = share, fill = Survived, label = paste(round(share * 100), ""%"", sep = """"))) + geom_bar(stat = ""identity"", position = ""stack"", color = ""black"") + geom_text(position = position_stack(vjust = 0.5)) + scale_y_continuous(labels = scales::percent) + theme_bw()
imputeData <- all[, c(""Pclass"", ""Sex"", ""Age"", ""Fare"", ""Embarked"", ""FamilySize"", ""Title"")]
dummies <- predict(dummyVars("" ~ ."", data = imputeData), imputeData)
preprocess <- preProcess(dummies, method = ""bagImpute"")
imputed <- as.data.frame(predict(preprocess, dummies))
all$Age = imputed$Age
all %>% filter(!is.na(Survived)) %>% mutate(bin = paste(floor(Age/10) * 10, ""-"", ceiling((Age + 0.1)/10) * 10)) %>% group_by(bin, Survived) %>% summarise(n = n()) %>% mutate(share = n/sum(n)) %>% ggplot(aes(x = bin, fill = Survived, y = n, label = paste(round(share * 100), ""%"", sep = """"))) + geom_bar(stat = ""identity"", position = ""stack"", color = ""black"") + geom_text(position = position_stack(vjust = 0.5)) + labs(x = ""Age group"", y = ""Count"") + theme_bw()
all$Child <- ifelse(all$Age < 17 & all$Title != ""Mrs"", 1, 0)
ggplot(all[!is.na(all$Survived), ], aes(x = FamilySize, y = as.numeric(ifelse(Survived == 0, 0, 1)))) + geom_bar(aes(y = (..count..)/sum(..count..))) + geom_line(stat = ""summary"", fun.y = ""mean"", color = ""blue"") + labs(y = ""Survival"") + ylim(NA, 1) + facet_wrap(Sex ~ ifelse(Child == 1, ""child"", ""adult"")) + theme_bw()
features <- c(""Sex"", ""Child"", ""FamilyDied"", ""FamilySize"", ""FarePerson"", ""Pclass"")
trainData <- all[!is.na(all$Survived), features]
outcome <- all$Survived[!is.na(all$Survived)]
set.seed(111)
folds <- createMultiFolds(outcome, k = 3, times = 10)
control <- trainControl(method = ""repeatedcv"", number = 3, repeats = 10, index = folds)
rpartModel <- train(x = trainData, y = outcome, method = ""rpart"", tuneLength = 30, trControl = control)
prp(rpartModel$finalModel, type = 0, extra = 1, under = TRUE)
rfModel <- randomForest(x = trainData, y = outcome, importance = TRUE)
testData <- all[is.na(all$Survived), features]
predictions <- as.data.frame(predict(rfModel, testData))
submission <- cbind(all$PassengerId[is.na(all$Survived)], predictions)
names(submission) <- c(""PassengerId"", ""Survived"")
write.csv(submission, ""titanic_20180921_1.csv"", row.names = FALSE)",1,0,1,0,0,0,0,1,0,1,0,0,0,0
72,uvcelokesh-titanic-survivor-analysis-different-perspectives,0.7490000000000001,"['as.factor', 'c', 'colSums', 'data.frame', 'dim', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'sapply', 'set.seed', 'strsplit', 'table', 'bind_rows', 'barplot', 'complete', 'mice', 'randomForest', 'rpart', 'median', 'predict', 'rbinom', 'read.csv', 'str', 'write.csv']","['dplyr', 'rpart', 'randomForest', 'MASS', 'mice', 'base']",3.57413101196289,"['complete', 'median', 'lapply', 'is.na', 'colSums', 'names', 'rpart', 'as.factor', 'sapply', 'mice', 'str', 'set.seed', 'gsub', 'factor', 'dim', 'read.csv', 'table', 'randomForest', 'rbinom', 'c', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'strsplit', 'library', 'barplot']",[],"['joelweiss-titanic-data-r', 'prabhulingayya-titanic-prediction-using-logistic-regression', 'cnusapbo-titanic-r-code', 'goblin-titanic-test', 'jacekpardyak-mytitanicscript', 'garciparedes-titanic-getting-started', 'paulocressoni-titanic-using-stepwise-linear-regression', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'tsfitz-titanic', 'ezhilvelme-titanic-neural-network-c-4-2']","[0.27232539260576627, 0.24949463247388773, 0.24925869922744134, 0.24307470287498995, 0.23559857300792358, 0.21594389260761307, 0.2051842893933847, 0.20353702312594082, 0.18965422295230713, 0.1828507634609451]","{'package:base': ['as.factor', 'c', 'colSums', 'data.frame', 'dim', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'sapply', 'set.seed', 'strsplit', 'table'], 'package:dplyr': ['bind_rows'], 'package:graphics': ['barplot'], 'package:mice': ['complete', 'mice'], 'package:randomForest': ['randomForest'], 'package:rpart': ['rpart'], 'package:stats': ['median', 'predict', 'rbinom'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""as.factor"", ""c"", ""colSums"", ""data.frame"", ""dim"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""sapply"", ""set.seed"", ""strsplit"", ""table""], ""package:dplyr"": [""bind_rows""], ""package:graphics"": [""barplot""], ""package:mice"": [""complete"", ""mice""], ""package:randomForest"": [""randomForest""], ""package:rpart"": [""rpart""], ""package:stats"": [""median"", ""predict"", ""rbinom""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase asfactor c colSums dataframe dim factor gsub isna lapply library names sapply setseed strsplit table packagedplyr bindrows packagegraphics barplot packagemice complete mice packagerandomForest randomForest packagerpart rpart packagestats median predict rbinom packageutils readcsv str writecsv,"library(dplyr)
library(rpart)
library(randomForest)
library(MASS)
library(mice)
train.data <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test.data <- read.csv(""../input/test.csv"", stringsAsFactors = F)
dim(train.data)
str(train.data)
dim(test.data)
str(test.data)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
train.data$Title <- gsub(""(.*, )|(\\..*)"", """", train.data$Name)
train.data$Title[train.data$Title == ""Mlle""] <- ""Miss""
train.data$Title[train.data$Title == ""Ms""] <- ""Miss""
train.data$Title[train.data$Title == ""Mme""] <- ""Mrs""
train.data$Title[train.data$Title %in% rare_title] <- ""Rare Title""
train.data$FamilySize <- train.data$SibSp + train.data$Parch + 1
test.data$Title <- gsub(""(.*, )|(\\..*)"", """", test.data$Name)
test.data$Title[test.data$Title == ""Mlle""] <- ""Miss""
test.data$Title[test.data$Title == ""Ms""] <- ""Miss""
test.data$Title[test.data$Title == ""Mme""] <- ""Mrs""
test.data$Title[test.data$Title %in% rare_title] <- ""Rare Title""
test.data$FamilySize <- test.data$SibSp + test.data$Parch + 1
traintest.data <- bind_rows(train.data, test.data)
dim(traintest.data)
str(traintest.data)
barplot(table(train.data$Survived, train.data$Sex), col = c(""Red"", ""Green""), legend = c(""Dead"", ""Alive""), main = ""Survival By Gender"")
barplot(table(train.data$Survived, train.data$Age), col = c(""Red"", ""Green""), legend = c(""Dead"", ""Alive""), main = ""Survival By Age"")
barplot(table(train.data$Survived, train.data$Embarked), col = c(""Red"", ""Green""), legend = c(""Dead"", ""Alive""), main = ""Survival By Embarked"")
barplot(table(train.data$Survived, train.data$Pclass), col = c(""Red"", ""Green""), legend = c(""Dead"", ""Alive""), main = ""Survival By Class"")
barplot(table(train.data$Survived, train.data$Title), col = c(""Red"", ""Green""), legend = c(""Dead"", ""Alive""), main = ""Survival By Title"")
barplot(table(train.data$Survived, train.data$FamilySize), col = c(""Red"", ""Green""), legend = c(""Dead"", ""Alive""), main = ""Survival By Family Size"")
test.data$SurvivedRandom <- rbinom(418, 1, 0.5)
final.data <- data.frame(PassengerId = test.data$PassengerId, Survived = test.data$SurvivedRandom)
write.csv(final.data, file = ""Output_Random.csv"", row.names = FALSE)
test.data$SurvivedGender <- 0
test.data$SurvivedGender[test.data$Sex == ""female""] <- 1
test.data$SurvivedGender[test.data$Sex == ""female""] <- 1
final.data <- data.frame(PassengerId = test.data$PassengerId, Survived = test.data$SurvivedGender)
write.csv(final.data, file = ""Output_Gender.csv"", row.names = FALSE)
colSums(is.na(test.data))
traintest.data$Fare[1044] <- median(traintest.data$Fare, na.rm = TRUE)
traintest.data$Embarked[c(62, 830)] <- ""C""
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked, data = traintest.data[!is.na(traintest.data$Age), ], method = ""anova"")
traintest.data$Age[is.na(traintest.data$Age)] <- predict(predicted_age, traintest.data[is.na(traintest.data$Age), ])
colSums(is.na(traintest.data))
train.data1 <- traintest.data[1:891, ]
test.data1 <- traintest.data[892:1309, ]
predicted_survival <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize, data = train.data1, method = ""class"")
rpart_prediction <- predict(predicted_survival, newdata = test.data1, type = ""class"")
final.data <- data.frame(PassengerId = test.data1$PassengerId, Survived = rpart_prediction)
write.csv(final.data, file = ""Output_RPart.csv"", row.names = FALSE)
train.data2 <- traintest.data[1:891, ]
test.data2 <- traintest.data[892:1309, ]
train.data2$Title <- factor(train.data2$Title)
train.data2$Sex <- factor(train.data2$Sex)
train.data2$Survived <- factor(train.data$Survived)
train.data2$Survived <- factor(train.data2$Survived)
train.data2$Embarked <- factor(train.data2$Embarked)
test.data2$Title <- factor(test.data2$Title)
test.data2$Sex <- factor(test.data2$Sex)
test.data2$Survived <- factor(test.data2$Survived)
test.data2$Embarked <- factor(test.data2$Embarked)
predicted_survival <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Title + Embarked + FamilySize, data = train.data2)
rf_prediction <- predict(predicted_survival, test.data2)
final.data <- data.frame(PassengerId = test.data2$PassengerId, Survived = rf_prediction)
write.csv(final.data, file = ""Output_RF.csv"", row.names = FALSE)
traintest.data$Child[traintest.data$Age < 18] <- ""Child""
traintest.data$Child[traintest.data$Age >= 18] <- ""Adult""
traintest.data$Mother <- ""Not Mother""
traintest.data$Mother[traintest.data$Sex == ""female"" & traintest.data$Parch > 0 & traintest.data$Age > 18 & traintest.data$Title != ""Miss""] <- ""Mother""
traintest.data$FamilySizeCategory[traintest.data$FamilySize == 1] <- ""Single""
traintest.data$FamilySizeCategory[traintest.data$FamilySize > 1] <- ""Small""
traintest.data$FamilySizeCategory[traintest.data$FamilySize > 4] <- ""Large""
train.data3 <- traintest.data[1:891, ]
test.data3 <- traintest.data[892:1309, ]
train.data3$Title <- factor(train.data3$Title)
train.data3$Sex <- factor(train.data3$Sex)
train.data3$Survived <- factor(train.data3$Survived)
train.data3$Embarked <- factor(train.data3$Embarked)
train.data3$Child <- factor(train.data3$Child)
train.data3$Mother <- factor(train.data3$Mother)
train.data3$FamilySizeCategory <- factor(train.data3$FamilySizeCategory)
test.data3$Title <- factor(test.data3$Title)
test.data3$Sex <- factor(test.data3$Sex)
test.data3$Survived <- factor(test.data3$Survived)
test.data3$Embarked <- factor(test.data3$Embarked)
test.data3$Child <- factor(test.data3$Child)
test.data3$Mother <- factor(test.data3$Mother)
test.data3$FamilySizeCategory <- factor(test.data3$FamilySizeCategory)
predicted_survival <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Title + Embarked + FamilySizeCategory + Child + Mother, data = train.data3)
rf_prediction <- predict(predicted_survival, test.data3)
final.data3 <- data.frame(PassengerId = test.data2$PassengerId, Survived = rf_prediction)
write.csv(final.data3, file = ""Output_RF_FE1.csv"", row.names = FALSE)
train.data <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test.data <- read.csv(""../input/test.csv"", stringsAsFactors = F)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
train.data$Title <- gsub(""(.*, )|(\\..*)"", """", train.data$Name)
train.data$Title[train.data$Title == ""Mlle""] <- ""Miss""
train.data$Title[train.data$Title == ""Ms""] <- ""Miss""
train.data$Title[train.data$Title == ""Mme""] <- ""Mrs""
train.data$Title[train.data$Title %in% rare_title] <- ""Rare Title""
train.data$FamilySize <- train.data$SibSp + train.data$Parch + 1
test.data$Title <- gsub(""(.*, )|(\\..*)"", """", test.data$Name)
test.data$Title[test.data$Title == ""Mlle""] <- ""Miss""
test.data$Title[test.data$Title == ""Ms""] <- ""Miss""
test.data$Title[test.data$Title == ""Mme""] <- ""Mrs""
test.data$Title[test.data$Title %in% rare_title] <- ""Rare Title""
test.data$FamilySize <- test.data$SibSp + test.data$Parch + 1
traintest.data <- bind_rows(train.data, test.data)
traintest.data <- bind_rows(train.data, test.data)
traintest.data$Fare[1044] <- median(traintest.data$Fare, na.rm = TRUE)
traintest.data$Embarked[c(62, 830)] <- ""C""
traintest.data$Child[traintest.data$Age < 18] <- ""Child""
traintest.data$Child[traintest.data$Age >= 18] <- ""Adult""
traintest.data$Mother <- ""Not Mother""
traintest.data$Mother[traintest.data$Sex == ""female"" & traintest.data$Parch > 0 & traintest.data$Age > 18 & traintest.data$Title != ""Miss""] <- ""Mother""
traintest.data$FamilySizeCategory[traintest.data$FamilySize == 1] <- ""Single""
traintest.data$FamilySizeCategory[traintest.data$FamilySize > 1] <- ""Small""
traintest.data$FamilySizeCategory[traintest.data$FamilySize > 4] <- ""Large""
traintest.data$Surname <- sapply(traintest.data$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
traintestcopy <- traintest.data
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""FamilySizeCategory"")
full.data <- traintest.data
full.data[factor_vars] <- lapply(full.data[factor_vars], function(x) as.factor(x))
set.seed(123)
mice_mod <- mice(full.data[, !names(full.data) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
full.data$Age <- mice_output$Age
full.data$Child[full.data$Age < 18] <- ""Child""
full.data$Child[full.data$Age >= 18] <- ""Adult""
train.data3 <- full.data[1:891, ]
test.data3 <- full.data[892:1309, ]
train.data3$Title <- factor(train.data3$Title)
train.data3$Sex <- factor(train.data3$Sex)
train.data3$Survived <- factor(train.data3$Survived)
train.data3$Embarked <- factor(train.data3$Embarked)
train.data3$Child <- factor(train.data3$Child)
train.data3$Mother <- factor(train.data3$Mother)
train.data3$FamilySizeCategory <- factor(train.data3$FamilySizeCategory)
train.data3$Surname <- factor(train.data3$Surname)
test.data3$Title <- factor(test.data3$Title)
test.data3$Sex <- factor(test.data3$Sex)
test.data3$Survived <- factor(test.data3$Survived)
test.data3$Embarked <- factor(test.data3$Embarked)
test.data3$Child <- factor(test.data3$Child)
test.data3$Mother <- factor(test.data3$Mother)
test.data3$FamilySizeCategory <- factor(test.data3$FamilySizeCategory)
test.data3$Surname <- factor(test.data3$Surname)
predicted_survival <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Title + Embarked + FamilySizeCategory + Child + Mother, data = train.data3)
rf_prediction <- predict(predicted_survival, test.data3)
final.data3 <- data.frame(PassengerId = test.data2$PassengerId, Survived = rf_prediction)
write.csv(final.data3, file = ""Output_RF_MICE.csv"", row.names = FALSE)",1,0,0,1,0,0,1,0,0,1,0,0,0,0
73,tavoosi-predicting-survival-on-the-titanic-with-rf-lr-nb,0.77,"['user defined', 'user defined', 'user defined', 'as.data.frame', 'as.factor', 'as.integer', 'as.numeric', 'c', 'cbind', 'cut', 'data.frame', 'factor', 'gsub', 'is.na', 'levels', 'library', 'print', 'seq', 'set.seed', 'subset', 'table', 'confusionMatrix', 'preProcess', 'train', 'trainControl', 'varImp', 'corrplot.mixed', 'bind_rows', 'rename', 'aes', 'geom_bar', 'geom_freqpoly', 'geom_line', 'ggplot', 'labs', 'scale_color_discrete', 'scale_colour_manual', 'scale_fill_discrete', 'scale_x_discrete', 'scale_x_log10', 'theme', 'theme_classic', 'theme_light', 'melt', 'binomial', 'cor', 'predict', 'reorder', 'head', 'read.csv', 'write.csv', 'aggr']","['tidyverse', 'ggthemes', 'corrplot', 'VIM', 'caret', 'RANN', 'reshape2', 'base']",38.3951330184937,"['labs', 'cor', 'rename', 'theme', 'subset', 'is.na', 'levels', 'confusionMatrix', 'scale_color_discrete', 'print', 'melt', 'scale_fill_discrete', 'as.factor', 'set.seed', 'gsub', 'scale_colour_manual', 'factor', 'as.integer', 'theme_light', 'theme_classic', 'cut', 'geom_bar', 'preProcess', 'varImp', 'read.csv', 'binomial', 'aggr', 'table', 'as.data.frame', 'scale_x_log10', 'train', 'c', 'corrplot.mixed', 'aes', 'scale_x_discrete', 'as.numeric', 'reorder', 'predict', 'write.csv', 'seq', 'bind_rows', 'data.frame', 'ggplot', 'head', 'user defined', 'library', 'trainControl', 'cbind', 'geom_freqpoly', 'geom_line']",[],"['srikantjyrmn-titanic-survivor', 'monfilier-titanic-survival-prediction', 'jasminegoel-playing-with-titanic-dataset-r', 'biohazzzard-titanic-with-tidyverse-and-caret', 'redroy44-tidy-titanic-script', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'rboimistruk-titanic-survivals-analysis']","[0.8023446946094221, 0.7654240657740825, 0.7433134951527716, 0.6756646509534514, 0.6292163691273666, 0.11324328599400395, 0.11324328599400395, 0.11277865098583498, 0.11277865098583498, 0.1079675360406571]","{'character(0)': ['set'], 'package:base': ['as.data.frame', 'as.factor', 'as.integer', 'as.numeric', 'c', 'cbind', 'cut', 'data.frame', 'factor', 'gsub', 'is.na', 'levels', 'library', 'print', 'seq', 'set.seed', 'subset', 'table'], 'package:caret': ['confusionMatrix', 'preProcess', 'train', 'trainControl', 'varImp'], 'package:corrplot': ['corrplot.mixed'], 'package:dplyr': ['bind_rows', 'rename'], 'package:ggplot2': ['aes', 'geom_bar', 'geom_freqpoly', 'geom_line', 'ggplot', 'labs', 'scale_color_discrete', 'scale_colour_manual', 'scale_fill_discrete', 'scale_x_discrete', 'scale_x_log10', 'theme', 'theme_classic', 'theme_light'], 'package:reshape2': ['melt'], 'package:stats': ['binomial', 'cor', 'predict', 'reorder'], 'package:utils': ['head', 'read.csv', 'write.csv'], 'package:VIM': ['aggr']}","{""character(0)"": [""set""], ""package:base"": [""as.data.frame"", ""as.factor"", ""as.integer"", ""as.numeric"", ""c"", ""cbind"", ""cut"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""levels"", ""library"", ""print"", ""seq"", ""set.seed"", ""subset"", ""table""], ""package:caret"": [""confusionMatrix"", ""preProcess"", ""train"", ""trainControl"", ""varImp""], ""package:corrplot"": [""corrplot.mixed""], ""package:dplyr"": [""bind_rows"", ""rename""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""geom_freqpoly"", ""geom_line"", ""ggplot"", ""labs"", ""scale_color_discrete"", ""scale_colour_manual"", ""scale_fill_discrete"", ""scale_x_discrete"", ""scale_x_log10"", ""theme"", ""theme_classic"", ""theme_light""], ""package:reshape2"": [""melt""], ""package:stats"": [""binomial"", ""cor"", ""predict"", ""reorder""], ""package:utils"": [""head"", ""read.csv"", ""write.csv""], ""package:VIM"": [""aggr""]}",character0 set packagebase asdataframe asfactor asinteger asnumeric c cbind cut dataframe factor gsub isna levels library print seq setseed subset table packagecaret confusionMatrix preProcess train trainControl varImp packagecorrplot corrplotmixed packagedplyr bindrows rename packageggplot2 aes geombar geomfreqpoly geomline ggplot labs scalecolordiscrete scalecolourmanual scalefilldiscrete scalexdiscrete scalexlog10 theme themeclassic themelight packagereshape2 melt packagestats binomial cor predict reorder packageutils head readcsv writecsv packageVIM aggr,"knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(tidyverse)
library(ggthemes)
library(corrplot)
library(VIM)
library(caret)
library(RANN)
library(reshape2)
train_data = read.csv(""../input/train.csv"", na.strings = """")
test_data = read.csv(""../input/test.csv"", na.strings = """")
full_data <- bind_rows(train_data, test_data)
head(full_data)
ggplot(full_data[1:891, ], aes(x = factor(Survived), fill = factor(Survived))) + geom_bar(position = ""dodge"") + scale_x_discrete() + labs(title = ""Survival on the Titanic"", x = ""Outcome"", y = ""Count"") + scale_fill_discrete(name = ""Outcome"", labels = c(""Died"", ""Survived"")) + theme(legend.position = ""right"") + theme_classic()
ggplot(full_data[1:891, ], aes(x = factor(Sex), fill = factor(Survived))) + geom_bar(position = ""dodge"") + scale_x_discrete() + labs(title = ""Survival by Gender"", x = ""Gender"", y = ""Rate"") + scale_fill_discrete(name = ""Outcome"", labels = c(""Died"", ""Survived"")) + theme(legend.position = ""right"") + theme_classic()
ggplot(full_data[1:891, ], aes(x = factor(Pclass), fill = factor(Survived))) + geom_bar(position = ""dodge"") + scale_x_discrete() + labs(title = ""Survival by Passenger Class"", x = ""Passenger Class"", y = ""Count"") + scale_fill_discrete(name = ""Outcome"", labels = c(""Died"", ""Survived"")) + theme(legend.position = ""right"") + theme_classic()
ggplot(full_data[1:891, ], aes(x = factor(Embarked), fill = factor(Survived))) + geom_bar(position = ""dodge"") + scale_x_discrete() + labs(title = ""Survival by Embarkment"", x = ""Embarkment"", y = ""Count"") + scale_fill_discrete(name = ""Outcome"", labels = c(""Died"", ""Survived"")) + theme(legend.position = ""right"") + theme_classic()
ggplot(full_data[1:891, ]) + geom_freqpoly(aes(x = Age, color = factor(Survived)), binwidth = 1) + theme_classic() + theme(legend.position = ""none"") + labs(title = ""Survival by Age"", x = ""Age"", y = ""Count"")
ggplot(full_data[1:891, ]) + geom_freqpoly(aes(x = Fare, color = factor(Survived)), binwidth = 0.05) + scale_x_log10() + theme_classic() + theme(legend.position = ""none"") + labs(title = ""Survival by Fare (log10)"", x = ""Fare (log10)"", y = ""Count"")
full_data$Sex <- as.numeric(full_data$Sex)
corrplot.mixed(corr = cor(full_data[c(""Survived"", ""Fare"", ""Sex"", ""Pclass"", ""Age"")], use = ""complete.obs""), tl.col = ""black"", upper = ""ellipse"")
full_data$family_size = full_data$SibSp + full_data$Parch + 1
ggplot(full_data[1:891, ], aes(x = factor(family_size), fill = factor(Survived))) + geom_bar(position = ""dodge"") + scale_x_discrete() + labs(title = ""Survival by Family Size on Board"", x = ""Number of family members on board"", y = ""Count"") + scale_fill_discrete(name = ""Outcome"", labels = c(""Died"", ""Survived"")) + theme(legend.position = ""right"") + theme_classic()
full_data$family_size_range = cut(full_data$family_size, c(0, 1, 4, 15), include.lowest = TRUE)
levels(full_data$family_size_range) = c(""1"", ""2-4"", ""5+"")
ggplot(full_data[1:891, ], aes(x = factor(family_size_range), fill = factor(Survived))) + geom_bar(position = ""dodge"") + scale_x_discrete() + labs(title = ""Survival by Family Size on Board"", x = ""Family size"", y = ""Count"") + scale_fill_discrete(name = ""Outcome"", labels = c(""Died"", ""Survived"")) + theme(legend.position = ""right"") + theme_classic()
full_data$Title <- gsub(""(.*, )|(\\..*)"", """", full_data$Name)
table(full_data$Title)
rare_title = c(""Capt"", ""Col"", ""Don"", ""Jonkheer"", ""Lady"", ""Major"", ""Rev"", ""Sir"", ""the Countess"", ""Dr"")
full_data$Title[full_data$Title %in% rare_title] <- ""Rare title""
full_data$Title[full_data$Title == ""Mlle""] <- ""Miss""
full_data$Title[full_data$Title == ""Ms""] <- ""Miss""
full_data$Title[full_data$Title == ""Dona""] <- ""Miss""
full_data$Title[full_data$Title == ""Mme""] <- ""Mrs""
ggplot(full_data[1:891, ], aes(x = Title, fill = factor(Survived))) + geom_bar(position = ""dodge"") + scale_x_discrete() + labs(title = ""Survival by Title"", x = ""Title"", y = ""Count"") + scale_fill_discrete(name = ""Outcome"", labels = c(""Died"", ""Survived"")) + theme(legend.position = ""right"") + theme_classic()
full_data$Cabin_letter <- gsub(""[0-9].*"", """", full_data$Cabin)
full_data$Cabin_letter[full_data$Cabin_letter == ""E""] <- ""EFGT""
full_data$Cabin_letter[full_data$Cabin_letter == ""F""] <- ""EFGT""
full_data$Cabin_letter[full_data$Cabin_letter == ""F E""] <- ""EFGT""
full_data$Cabin_letter[full_data$Cabin_letter == ""F G""] <- ""EFGT""
full_data$Cabin_letter[full_data$Cabin_letter == ""G""] <- ""EFGT""
full_data$Cabin_letter[full_data$Cabin_letter == ""T""] <- ""EFGT""
full_data$Cabin_letter[is.na(full_data$Cabin_letter)] <- ""Blank""
ggplot(full_data[1:891, ], aes(x = factor(Cabin_letter), fill = factor(Survived))) + geom_bar(position = ""dodge"") + scale_x_discrete() + labs(title = ""Survival by Cabin"", x = ""Cabin"", y = ""Count"") + scale_fill_discrete(name = ""Outcome"", labels = c(""Died"", ""Survived"")) + theme_classic()
full_data$cabin_presence[full_data$Cabin_letter == ""Blank""] <- ""No cabin""
full_data$cabin_presence[is.na(full_data$cabin_presence)] <- ""Cabin""
ggplot(full_data[1:891, ], aes(x = factor(cabin_presence), fill = factor(Survived))) + geom_bar(position = ""dodge"") + scale_x_discrete() + labs(title = ""Survival by Cabin"", x = ""Cabin"", y = ""Count"") + scale_fill_discrete(name = ""Outcome"", labels = c(""Died"", ""Survived"")) + theme(legend.position = ""right"") + theme_classic()
full_data$Ticket_number <- gsub(""[^0-9]"", """", full_data$Ticket)
table(full_data$Ticket_number == """")
full_data$Ticket_number[full_data$Ticket_number == """"] <- 0
full_data$Ticket_number <- as.integer(full_data$Ticket_number)
ggplot(full_data[1:891, ]) + geom_freqpoly(aes(x = Ticket_number, color = factor(Survived)), binwidth = 0.1) + scale_x_log10() + scale_color_discrete(name = ""Outcome"", labels = c(""Died"", ""Survived"")) + theme_classic() + labs(title = ""Survival by Ticket number"", x = ""Ticket number"", y = ""Count"")
cor(full_data$Ticket_number, as.numeric(full_data$Survived), use = ""complete.obs"")
full_data_relevant <- subset(full_data, select = c(Survived, Pclass, Sex, Age, Fare, Title, cabin_presence, family_size_range))
full_data_relevant$Survived <- as.factor(full_data_relevant$Survived)
full_data_relevant$Pclass <- factor(full_data_relevant$Pclass, ordered = TRUE)
full_data_relevant$Survived <- as.factor(full_data_relevant$Survived)
full_data_relevant$Title <- as.factor(full_data_relevant$Title)
full_data_relevant$cabin_presence <- as.factor(full_data_relevant$cabin_presence)
aggr(full_data_relevant, sortVars = TRUE, prop = FALSE, cex.axis = 0.6, numbers = TRUE)
md_prediction <- preProcess(full_data_relevant[c(2:8)], method = c(""knnImpute"", ""center"", ""scale""))
print(md_prediction)
full_data_complete <- predict(md_prediction, newdata = full_data_relevant[c(2:8)])
full_data_final <- data.frame(full_data_complete, full_data$Survived)
full_data_final <- cbind(full_data$PassengerId, full_data_final)
full_data_final <- rename(full_data_final, Survived = full_data.Survived, PassengerId = `full_data$PassengerId`)
full_data_final$Survived <- as.factor(full_data_final$Survived)
train <- full_data_final[1:891, ]
test <- full_data_final[892:1309, ]
set.seed(222)
rf_model <- train(Survived ~ ., method = ""rf"", data = train)
print(rf_model)
confusionMatrix(rf_model)
rf_err_model <- as.data.frame(rf_model[[""finalModel""]][[""err.rate""]])
rf_err_model$sequence <- seq(1:500)
rf_err_model <- rename(rf_err_model, Died = ""0"", Survived = ""1"")
rf_err_model <- melt(rf_err_model, id = ""sequence"")
ggplot(rf_err_model, aes(x = sequence, y = value, color = variable)) + geom_line() + scale_colour_manual(values = c(""black"", ""red2"", ""forestgreen"")) + theme_classic() + labs(title = ""Error rate in prediction"", x = ""Sequence"", y = ""Error rate"")
rf_importance <- varImp(rf_model)
ggplot(rf_importance, aes(x = reorder(variable, importance), y = importance)) + geom_bar(stat = ""identity"") + labs(title = ""Importance of predictors"", x = ""Predictors"", y = ""Importance"") + theme_light()
prediction_rf <- predict(rf_model, test)
solution_rf <- data.frame(PassengerID = test$PassengerId, Survived = prediction_rf)
write.csv(solution_rf, file = ""rf_Titanic_Solution.csv"", row.names = F)
fitControl <- trainControl(method = ""cv"", number = 10, savePredictions = TRUE)
set.seed(222)
lr_model <- train(factor(Survived) ~ ., data = train, method = ""glm"", family = binomial(), trControl = fitControl)
print(lr_model)
confusionMatrix(lr_model)
lr_importance <- varImp(lr_model)
ggplot(lr_importance, aes(x = reorder(variable, importance), y = importance)) + geom_bar(stat = ""identity"") + labs(title = ""Importance of predictors"", x = ""Predictors"", y = ""Importance"") + theme_light()
prediction_lr <- predict(lr_model, test)
solution_lr <- data.frame(PassengerID = test$PassengerId, Survived = prediction_lr)
write.csv(solution_lr, file = ""lr_Titanic_Solution.csv"", row.names = F)
train_features <- full_data_final[1:891, -13]
train_response <- full_data_final[1:891, 13]
fitControl <- trainControl(method = ""cv"", number = 10, savePredictions = TRUE)
set.seed(222)
nb_model <- train(Survived ~ ., data = train, method = ""nb"", trControl = fitControl)
print(nb_model)
confusionMatrix(nb_model)
nb_importance <- varImp(nb_model)
ggplot(nb_importance, aes(x = reorder(variable, importance), y = importance)) + geom_bar(stat = ""identity"") + labs(title = ""Importance of predictors"", x = ""Predictors"", y = ""Importance"") + theme_light()
prediction_nb <- predict(nb_model, test)
solution_nb <- data.frame(PassengerID = test$PassengerId, Survived = prediction_nb)
write.csv(solution_nb, file = ""nb_Titanic_Solution.csv"", row.names = F)",0,0,1,0,0,0,0,1,0,0,0,0,1,0
74,fredman-titanic-barebones-benchmark-r,0.7559999999999999,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.factor', 'c', 'data.frame', 'is.na', 'library', 'return', 'set.seed', 'summary', 'system', 'randomForest', 'median', 'predict', 'head', 'read.csv', 'write.csv']","['ggplot2', 'readr', 'randomForest', 'base']",0.974892854690552,"['predict', 'write.csv', 'median', 'data.frame', 'read.csv', 'randomForest', 'as.factor', 'user defined', 'library', 'return', 'summary', 'head', 'c', 'is.na', 'system', 'set.seed']",[],"['francoisolivier-fork-of-titanic-20', 'johno883-john-orr-titanic-random-forest', 'panda1023-svm-example-for-titanic', 'francoisolivier-titanic-20', 'areebaatif-titanic', 'zhxiangxyang-titanic', 'econdata-machine-learning-on-titanic-dataset', 'yinpatt-patrick-s-titanic', 'diegosiebra-rf-titanic-prediction-th3one', 'manskj-machine-learning-and-titanic']","[0.9611258794100505, 0.9068692722764723, 0.9037583935639542, 0.8979974989573385, 0.8979974989573385, 0.8979974989573385, 0.8937469085235961, 0.824173333002432, 0.8101306221358483, 0.6490381961627625]","{'character(0)': ['extractFeatures'], 'package:base': ['as.factor', 'c', 'data.frame', 'is.na', 'library', 'return', 'set.seed', 'summary', 'system'], 'package:randomForest': ['randomForest'], 'package:stats': ['median', 'predict'], 'package:utils': ['head', 'read.csv', 'write.csv']}","{""character(0)"": [""extractFeatures""], ""package:base"": [""as.factor"", ""c"", ""data.frame"", ""is.na"", ""library"", ""return"", ""set.seed"", ""summary"", ""system""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""write.csv""]}",character0 extractFeatures packagebase asfactor c dataframe isna library return setseed summary system packagerandomForest randomForest packagestats median predict packageutils head readcsv writecsv,"library(ggplot2)
library(readr)
system(""ls ../input"")
set.seed(1)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
head(train)
summary(train)
selected_features <- c(""Pclass"", ""Age"", ""Sex"", ""Parch"", ""SibSp"", ""Fare"", ""Embarked"")
extractFeatures <- function(data) {
    features <- c(""Pclass"", ""Age"", ""Sex"", ""Parch"", ""SibSp"", ""Fare"", ""Embarked"")
    fea <- data[, features]
    fea$Age[is.na(fea$Age)] <- -1
    fea$Fare[is.na(fea$Fare)] <- median(fea$Fare, na.rm = TRUE)
    fea$Embarked[fea$Embarked == """"] = ""S""
    fea$Sex <- as.factor(fea$Sex)
    fea$Embarked <- as.factor(fea$Embarked)
    return(fea)
}
library(randomForest)
rf <- randomForest(extractFeatures(train), as.factor(train$Survived), ntree = 100, importance = TRUE)
submission <- data.frame(PassengerId = test$PassengerId)
submission$Survived <- predict(rf, extractFeatures(test))
write.csv(submission, file = ""1_random_forest_r_submission.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
75,oreddo-exploring-survival-on-the-titanic,0.742,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",28.99658203125,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic', 'datascikrid-exploring-survival-on-the-titanic', 'anishmayaramka-the-titanic-datset', 'aturner-exploring-survival-on-the-titanic']","[0.9994696970152622, 0.9994696970152622, 0.9994696970152622, 0.9994696970152622, 0.9994696970152622, 0.9994696970152622, 0.9994696970152622, 0.9994696970152622, 0.9994696970152622, 0.9994696970152622]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, ntree = 300, importance = T, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
prediction[2] = 1
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
76,kabled-life-and-death-on-the-titanic,0.763,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.factor', 'as.integer', 'c', 'data.frame', 'factor', 'grep', 'is.na', 'length', 'library', 'nrow', 'return', 'set.seed', 'substr', 'summary', 'which', 'bind_rows', 'aes', 'geom_bar', 'ggplot', 'ggtitle', 'labs', 'randomForest', 'varImpPlot', 'median', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['ggplot2', 'dplyr', 'stringr', 'randomForest', 'base']",10.9289541244507,"['labs', 'nrow', 'median', 'which', 'grep', 'as.character', 'is.na', 'as.factor', 'summary', 'varImpPlot', 'str', 'set.seed', 'factor', 'as.integer', 'geom_bar', 'length', 'read.csv', 'randomForest', 'return', 'c', 'aes', 'predict', 'write.csv', 'bind_rows', 'ggtitle', 'data.frame', 'ggplot', 'head', 'substr', 'user defined', 'library']",[],"['kabled-life-and-death-on-the-titanic', 'jasonhit-first-script-for-kaggle-titanic', 'venkatko-titanic-survival1', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'lucasguarisco-exploring-survival-on-the-titanic', 'oreddo-exploring-survival-on-the-titanic', 'tjbaur-exploring-survival-on-the-titanic']","[0.9999999999999996, 0.5721101565345368, 0.5714099368214576, 0.56150622412396, 0.5612393326113302, 0.5612393326113302, 0.5587943829816412, 0.5583699576321994, 0.5576864143815993, 0.5573311717527862]","{'character(0)': ['extractT1', 'extractTitle', 'set', 'stri_extract_first_regex'], 'package:base': ['as.character', 'as.factor', 'as.integer', 'c', 'data.frame', 'factor', 'grep', 'is.na', 'length', 'library', 'nrow', 'return', 'set.seed', 'substr', 'summary', 'which'], 'package:dplyr': ['bind_rows'], 'package:ggplot2': ['aes', 'geom_bar', 'ggplot', 'ggtitle', 'labs'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:stats': ['median', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""character(0)"": [""extractT1"", ""extractTitle"", ""set"", ""stri_extract_first_regex""], ""package:base"": [""as.character"", ""as.factor"", ""as.integer"", ""c"", ""data.frame"", ""factor"", ""grep"", ""is.na"", ""length"", ""library"", ""nrow"", ""return"", ""set.seed"", ""substr"", ""summary"", ""which""], ""package:dplyr"": [""bind_rows""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""ggplot"", ""ggtitle"", ""labs""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",character0 extractT1 extractTitle set striextractfirstregex packagebase ascharacter asfactor asinteger c dataframe factor grep isna length library nrow return setseed substr summary which packagedplyr bindrows packageggplot2 aes geombar ggplot ggtitle labs packagerandomForest randomForest varImpPlot packagestats median predict packageutils head readcsv str writecsv,"knitr::opts_chunk$set(echo = TRUE)
library(""ggplot2"")
library(""dplyr"")
library(""stringr"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
ggplot(train, aes(x = Pclass, fill = factor(Survived))) + geom_bar(position = ""dodge"") + labs(x = ""Pclass"") + ggtitle(""Figure 1"", subtitle = ""Survival by Passenger Class"")
head(full$Name, 15)
extractTitle <- function(name) {
    name <- as.character(name)
    if (length(grep(""Miss."", name)) > 0) {
        return(""Miss."")
    }
    else if (length(grep(""Master."", name)) > 0) {
        return(""Master."")
    }
    else if (length(grep(""Mrs."", name)) > 0) {
        return(""Mrs."")
    }
    else if (length(grep(""Mr."", name)) > 0) {
        return(""Mr."")
    }
    else {
        return(""Other"")
    }
}
titles <- NULL
for (i in 1:nrow(full)) {
    titles <- c(titles, extractTitle(full[i, ""Name""]))
}
full$Title <- as.factor(titles)
ggplot(full[1:891, ], aes(x = Title, fill = factor(Survived))) + geom_bar(position = ""dodge"") + labs(x = ""Title"") + ggtitle(""Figure 2"", subtitle = ""Survival by Title"")
full$Fsize <- as.factor(1 + full$SibSp + full$Parch)
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(position = ""dodge"") + labs(x = ""Fsize"") + ggtitle(""Figure 3"", subtitle = ""Survival by Family Size"")
extractT1 <- function(ticket) {
    ticket <- as.character(ticket)
    library(""stringi"")
    temp <- NULL
    if (is.na(stri_extract_first_regex(ticket, ""[0-9]+""))) {
        temp <- 0
    }
    else {
        temp <- stri_extract_first_regex(ticket, ""[0-9]+"")
    }
    temp <- as.integer(substr(temp, 1, 1))
    return(temp)
}
tickets <- NULL
for (i in 1:nrow(full)) {
    tickets <- c(tickets, extractT1(full[i, ""Ticket""]))
}
full$T1 <- as.factor(tickets)
ggplot(full[1:891, ], aes(x = T1, fill = factor(Survived))) + geom_bar(position = ""dodge"") + labs(x = ""T1"") + ggtitle(""Figure 4"", subtitle = ""Survival by T1"")
summary(full$Fare)
which(is.na(full$Fare))
full[1044, ]
full$Fare[1044] <- median(full$Fare[which(full$Fsize == ""1"" & full$Pclass == ""3"" & full$Embarked == ""S"")], na.rm = TRUE)
full$Fare[1044]
full$Embarked <- as.factor(full$Embarked)
summary(full$Embarked)
which(full$Embarked == """")
full$Embarked[c(62, 830)] <- ""S""
full$Embarked <- factor(full$Embarked)
rf.train.1 <- full[1:891, c(""Pclass"", ""Title"", ""Fsize"")]
rf.label <- as.factor(train$Survived)
set.seed(1357)
rf.1 <- randomForest(x = rf.train.1, y = rf.label, importance = TRUE, ntree = 1000)
rf.1
varImpPlot(rf.1)
rf.train.2 <- full[1:891, c(""Pclass"", ""Title"", ""Fsize"", ""Embarked"")]
set.seed(1357)
rf.2 <- randomForest(x = rf.train.2, y = rf.label, importance = TRUE, ntree = 1000)
rf.2
varImpPlot(rf.2)
full$Sex <- as.factor(full$Sex)
rf.train.3 <- full[1:891, c(""Pclass"", ""Title"", ""Fsize"", ""Sex"")]
set.seed(1357)
rf.3 <- randomForest(x = rf.train.3, y = rf.label, importance = TRUE, ntree = 1000)
rf.3
varImpPlot(rf.3)
rf.train.4 <- full[1:891, c(""Pclass"", ""Title"", ""Fsize"", ""Sex"", ""T1"")]
set.seed(1357)
rf.4 <- randomForest(x = rf.train.4, y = rf.label, importance = TRUE, ntree = 1000)
rf.4
varImpPlot(rf.4)
rf.train.5 <- full[1:891, c(""Pclass"", ""Title"", ""Fsize"", ""Sex"", ""T1"", ""Fare"")]
set.seed(1357)
rf.5 <- randomForest(x = rf.train.5, y = rf.label, importance = TRUE, ntree = 1000)
rf.5
varImpPlot(rf.5)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(1357)
rfm <- randomForest(factor(Survived) ~ Pclass + Title + Fsize + Sex + T1, data = train, importance = TRUE, ntree = 1000)
prediction <- predict(rfm, test)
submit <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(submit, file = ""titanic_rf.csv"", row.names = F)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
77,yugrao-exploring-survival-on-the-titanic,0.7440000000000001,"['filter', 'as.factor', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'system', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['readr', 'ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",24.6107130050659,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'facet_grid', 'data.frame', 'strsplit', 'ggplot', 'geom_density', 'write.csv', 'library', 'system']",['yugrao-titanic-n'],"['hemingwei-titanic-r-solution-from-megan-risdal', 'tetyama-trial-titanic', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'vikramatjob-exploring-survival-on-the-titanic-var1', 'birudvora-test-titanic', 'mira5b-exploring-survival-on-the-titanic', 'mhamano-titanic-r-script', 'mohankanni-exploring-survival-on-the-titanic', 'kyanyoga-exploring-survival-on-the-titanic', 'rayuga-exploring-survival-on-the-titanic']","[0.999272422908137, 0.9967815556994365, 0.9932647324851103, 0.9884706950626566, 0.9882799620345237, 0.9880627901704934, 0.9879761263526897, 0.9878603562004347, 0.987826504331152, 0.9877563048119533]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'system', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""system"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c colnames dataframe factor gsub isna lapply library names paste paste0 round rownames sapply setseed strsplit sum system table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""readr"")
library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)
system(""ls ../input"")",1,0,0,1,0,0,0,0,0,0,0,0,0,0
78,zossimov-exploring-survival-on-the-titanic,0.758,"['as.factor', 'c', 'data.frame', 'gsub', 'library', 'ncol', 'nrow', 'table', 'bind_rows', 'rpart', 'predict', 'read.csv', 'str', 'write.csv']","['rpart', 'dplyr', 'base']",0.5544939041137701,"['gsub', 'nrow', 'predict', 'write.csv', 'ncol', 'bind_rows', 'data.frame', 'read.csv', 'table', 'as.factor', 'rpart', 'library', 'str', 'c']",[],"['alediator-exploring-survival-on-the-titanic', 'jasonhit-first-script-for-kaggle-titanic', 'researchbigd-titanic-forkedfrommeganscript', 'venkatko-titanic-survival1', 'qianbi-titanic-rpart-2', 'qianbi-titanic-logistic-2', 'tetyama-trial-titanic', 'abedben-exploring-survival-on-the-titanic', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic']","[0.4726513434085066, 0.3727465907533491, 0.37238280015253816, 0.3612935763716873, 0.35850235909533806, 0.35756617194420703, 0.35482188744414184, 0.3547439711928457, 0.35216545220089757, 0.35207731605981135]","{'package:base': ['as.factor', 'c', 'data.frame', 'gsub', 'library', 'ncol', 'nrow', 'table'], 'package:dplyr': ['bind_rows'], 'package:rpart': ['rpart'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""as.factor"", ""c"", ""data.frame"", ""gsub"", ""library"", ""ncol"", ""nrow"", ""table""], ""package:dplyr"": [""bind_rows""], ""package:rpart"": [""rpart""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase asfactor c dataframe gsub library ncol nrow table packagedplyr bindrows packagerpart rpart packagestats predict packageutils readcsv str writecsv,"library(rpart)
library(dplyr)
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
tree_model <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = ""class"")
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full01 <- full
full01$Sex <- as.factor(full01$Sex)
full01$Embarked <- as.factor(full01$Embarked)
full01$Title <- as.factor(full01$Title)
train_new <- full01[full01$PassengerId %in% train$PassengerId, ]
str(train_new)
test_new <- full01[full01$PassengerId %in% test$PassengerId, ]
str(test_new)
my_tree_five <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title, data = train_new, method = ""class"")
my_prediction <- predict(tree_model, newdata = test, type = ""class"")
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
nrow(my_solution)
ncol(my_solution)
write.csv(my_solution, file = ""tree_basic_Solution.csv"", row.names = FALSE)
my_prediction <- predict(my_tree_five, test_new, type = ""class"")
my_solution <- data.frame(PassengerId = test_new$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = ""tree_title_Solution.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,1,0,0,0,0
81,avikpaul4u-titanic-machine-learning-in-r,0.581,"['plot', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.factor', 'c', 'cbind', 'colnames', 'data.frame', 'diag', 'droplevels', 'ifelse', 'is.na', 'length', 'library', 'list.files', 'mean', 'merge', 'paste0', 'print', 'rbind', 'round', 'sapply', 'set.seed', 'strsplit', 'sub', 'subset', 'sum', 'summary', 'table', 'unique', 'confusionMatrix', 'group_by', 'sample_frac', 'summarise', 'aes', 'facet_wrap', 'geom_bar', 'geom_text', 'ggplot', 'ggtitle', 'labs', 'randomForest', 'varImpPlot', 'performance', 'prediction', 'rpart', 'rpart.plot', 'aggregate', 'glm', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['dplyr', 'ROCR', 'caret', 'ggplot2', 'rpart', 'rpart.plot', 'randomForest', 'base']",2.92051005363464,"['summarise', 'labs', 'mean', 'facet_wrap', 'geom_text', 'merge', 'as.character', 'is.na', 'sub', 'subset', 'glm', 'droplevels', 'confusionMatrix', 'print', 'rpart', 'as.factor', 'summary', 'round', 'sapply', 'varImpPlot', 'str', 'set.seed', 'colnames', 'sample_frac', 'aggregate', 'unique', 'geom_bar', 'length', 'read.csv', 'performance', 'paste0', 'table', 'randomForest', 'group_by', 'c', 'aes', 'diag', 'rbind', 'ifelse', 'plot', 'sum', 'predict', 'write.csv', 'list.files', 'ggtitle', 'data.frame', 'strsplit', 'ggplot', 'rpart.plot', 'head', 'user defined', 'library', 'prediction', 'cbind']",[],"['lashkare-simple-yet-effective-titanic-solution', 'sylphsangeeta-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic', 'maza91-titanic-neural-network-try', 'paulocressoni-titanic-using-stepwise-linear-regression']","[0.9344529852486587, 0.10401875728258922, 0.06294995584774396, 0.06294995584774396, 0.06251088195875046, 0.06251088195875046, 0.05816141056137565, 0.05816141056137565, 0.05417602631078938, 0.05274266759413216]","{'c(""package:ROCR"", ""package:graphics"")': ['plot'], 'character(0)': ['percent'], 'package:base': ['as.character', 'as.factor', 'c', 'cbind', 'colnames', 'data.frame', 'diag', 'droplevels', 'ifelse', 'is.na', 'length', 'library', 'list.files', 'mean', 'merge', 'paste0', 'print', 'rbind', 'round', 'sapply', 'set.seed', 'strsplit', 'sub', 'subset', 'sum', 'summary', 'table', 'unique'], 'package:caret': ['confusionMatrix'], 'package:dplyr': ['group_by', 'sample_frac', 'summarise'], 'package:ggplot2': ['aes', 'facet_wrap', 'geom_bar', 'geom_text', 'ggplot', 'ggtitle', 'labs'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:ROCR': ['performance', 'prediction'], 'package:rpart': ['rpart'], 'package:rpart.plot': ['rpart.plot'], 'package:stats': ['aggregate', 'glm', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""c(""package:ROCR"", ""package:graphics"")"": [""plot""], ""character(0)"": [""percent""], ""package:base"": [""as.character"", ""as.factor"", ""c"", ""cbind"", ""colnames"", ""data.frame"", ""diag"", ""droplevels"", ""ifelse"", ""is.na"", ""length"", ""library"", ""list.files"", ""mean"", ""merge"", ""paste0"", ""print"", ""rbind"", ""round"", ""sapply"", ""set.seed"", ""strsplit"", ""sub"", ""subset"", ""sum"", ""summary"", ""table"", ""unique""], ""package:caret"": [""confusionMatrix""], ""package:dplyr"": [""group_by"", ""sample_frac"", ""summarise""], ""package:ggplot2"": [""aes"", ""facet_wrap"", ""geom_bar"", ""geom_text"", ""ggplot"", ""ggtitle"", ""labs""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:ROCR"": [""performance"", ""prediction""], ""package:rpart"": [""rpart""], ""package:rpart.plot"": [""rpart.plot""], ""package:stats"": [""aggregate"", ""glm"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",cpackageROCR packagegraphics plot character0 percent packagebase ascharacter asfactor c cbind colnames dataframe diag droplevels ifelse isna length library listfiles mean merge paste0 print rbind round sapply setseed strsplit sub subset sum summary table unique packagecaret confusionMatrix packagedplyr groupby samplefrac summarise packageggplot2 aes facetwrap geombar geomtext ggplot ggtitle labs packagerandomForest randomForest varImpPlot packageROCR performance prediction packagerpart rpart packagerpartplot rpartplot packagestats aggregate glm predict packageutils head readcsv str writecsv,"library(dplyr)
library(ROCR)
library(caret)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(randomForest)
list.files(path = ""../input"")
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
train_df <- train
test_df <- test
test$Survived <- """"
fullset <- rbind(train, test)
head(fullset)
str(fullset)
fullset$Cabin <- NULL
train_df$Survived <- as.factor(train_df$Survived)
train_df$Pclass <- as.factor(train_df$Pclass)
ggplot(train_df, aes(x = Pclass, fill = Survived)) + geom_bar(width = 0.3)
ggplot(train_df, aes(x = Sex, fill = Survived)) + geom_bar(width = 0.3)
ggplot(train_df, aes(Sex)) + facet_wrap(~Pclass) + geom_bar(aes(y = (..count..)/sum(..count..), fill = Survived), stat = ""count"") + geom_text(aes(label = scales::percent(round((..count..)/sum(..count..), 2)), y = ((..count..)/sum(..count..))), stat = ""count"", vjust = -0.25) + ggtitle(""Class"") + labs(y = ""percent"")
Imbalance_Check <- aggregate(PassengerId ~ Survived, train_df, length)
colnames(Imbalance_Check)[2] <- ""No_of_passengers""
Imbalance_Check$Contribution <- (Imbalance_Check$No_of_passengers/sum(Imbalance_Check$No_of_passengers)) * 100
Imbalance_Check
summary(fullset)
fullset$Embarked[fullset$Embarked == """"] <- ""S""
summary(fullset$Embarked)
Means_Age <- summarise(group_by(fullset, Pclass, Sex, Embarked), Mean_Age = mean(Age, na.rm = T))
Means_Age$key <- paste0(Means_Age$Pclass, ""_"", Means_Age$Sex, ""_"", Means_Age$Embarked)
head(Means_Age)
fullset$key <- paste0(fullset$Pclass, ""_"", fullset$Sex, ""_"", fullset$Embarked)
fullset <- merge(x = fullset, y = Means_Age[, c(""key"", ""Mean_Age"")], by = ""key"", all.x = T)
fullset$Age <- ifelse(is.na(fullset$Age), fullset$Mean_Age, fullset$Age)
fullset$Mean_Age <- NULL
fullset$key <- NULL
summary(fullset$Age)
fullset$Fare <- ifelse(is.na(fullset$Fare), mean(fullset$Fare, na.rm = T), fullset$Fare)
fullset$Title <- sapply(as.character(fullset$Name), FUN = function(x) {
    strsplit(x, ""[,.]"")[[1]][2]
})
fullset$Title <- sub("" "", """", fullset$Title)
fullset$Title <- as.factor(fullset$Title)
summary(fullset$Title)
fullset$Title <- as.character(fullset$Title)
fullset$Title[fullset$Title %in% c(""Mlle"", ""Ms"")] <- ""Miss""
fullset$Title[fullset$Title == ""Mme""] <- ""Mrs""
fullset$Title[fullset$Title %in% c(""Don"", ""Sir"", ""Jonkheer"", ""Rev"", ""Dr"")] <- ""Sir""
fullset$Title[fullset$Title %in% c(""Dona"", ""Lady"", ""the Countess"")] <- ""Lady""
fullset$Title[fullset$Title %in% c(""Capt"", ""Col"", ""Major"")] <- ""Officer""
fullset$Title <- as.factor(fullset$Title)
summary(fullset$Title)
fullset$FamSize <- fullset$SibSp + fullset$Parch
table(fullset$FamSize)
fullset$FamGroup[fullset$FamSize == 0] <- ""Individual""
fullset$FamGroup[fullset$FamSize < 5 & fullset$FamSize > 0] <- ""small""
fullset$FamGroup[fullset$FamSize > 4] <- ""large""
fullset$FamGroup <- as.factor(fullset$FamGroup)
length(unique(fullset$Ticket))
length(unique(fullset$PassengerId))
Ticket_Count <- data.frame(table(fullset$Ticket))
head(Ticket_Count)
fullset <- merge(fullset, Ticket_Count, by.x = ""Ticket"", by.y = ""Var1"", all.x = T)
fullset$Ticket_Size[fullset$Freq == 1] <- ""Single""
fullset$Ticket_Size[fullset$Freq >= 2 & fullset$Freq < 5] <- ""Small""
fullset$Ticket_Size[fullset$Freq >= 5] <- ""Big""
fullset$Ticket_Size <- as.factor(fullset$Ticket_Size)
fullset$isMinor[fullset$Age < 18] <- ""Minor""
fullset$isMinor[fullset$Age >= 18] <- ""Adult""
fullset$isMinor <- as.factor(fullset$isMinor)
head(fullset)
str(fullset)
fullset$Survived <- as.factor(fullset$Survived)
fullset$Pclass <- as.factor(fullset$Pclass)
train_df <- subset(fullset, !(fullset$Survived == """"))
str(train_df$Survived)
x <- data.frame(Survived = droplevels(train_df$Survived))
train_df$Survived <- NULL
train_df <- cbind(train_df, x)
str(train_df$Survived)
train_val <- sample_frac(train_df, size = 0.8)
test_val <- subset(train_df, !(train_df$PassengerId %in% train_val$PassengerId))
mod <- glm(Survived ~ Pclass + Title + FamGroup + Sex + isMinor + Ticket_Size + Embarked, data = train_val, family = ""binomial"")
summary(mod)
predict_train <- predict(mod, train_val, type = ""response"")
prob_train <- ifelse(predict_train > 0.5, 1, 0)
confusion_matrix_train <- table(prob_train, train_val$Survived)
print(confusion_matrix_train)
Accuracy_train <- sum(diag(confusion_matrix_train))/sum(confusion_matrix_train)
print(Accuracy_train * 100)
pred1 <- prediction(predict(mod), train_val$Survived)
perf1 <- performance(pred1, ""tpr"", ""fpr"")
plot(perf1)
predict_test <- predict(mod, test_val, type = ""response"")
prob_test <- ifelse(predict_test > 0.5, 1, 0)
confusion_matrix_test <- table(prob_test, test_val$Survived)
Accuracy_test <- sum(diag(confusion_matrix_test))/sum(confusion_matrix_test)
print(Accuracy_test * 100)
mymod <- rpart(Survived ~ Pclass + Title + FamGroup + Sex + isMinor + Ticket_Size + Embarked, data = train_val, method = ""class"")
rpart.plot(mymod, fallen.leaves = F, extra = 3)
predict_train_dt = predict(mymod, data = train_val, type = ""class"")
confusionMatrix(predict_train_dt, train_val$Survived)
prediction_test_dt <- predict(mymod, test_val, type = ""class"")
confusionMatrix(prediction_test_dt, test_val$Survived)
set.seed(1234)
mod_rf <- randomForest(Survived ~ Pclass + Title + FamGroup + Sex + isMinor + Ticket_Size + Embarked, data = train_val[, c(""Survived"", ""Pclass"", ""Title"", ""FamGroup"", ""Sex"", ""isMinor"", ""Ticket_Size"", ""Embarked"")], importance = TRUE, ntree = 1000, mtry = 2)
print(mod_rf)
varImpPlot(mod_rf)
set.seed(1234)
mod_rf <- randomForest(Survived ~ Pclass + Title + FamGroup + Sex + isMinor + Ticket_Size, data = train_val[, c(""Survived"", ""Pclass"", ""Title"", ""FamGroup"", ""Sex"", ""isMinor"", ""Ticket_Size"")], importance = TRUE, ntree = 1000, mtry = 2)
print(mod_rf)
set.seed(1234)
mod_rf_val <- randomForest(Survived ~ Pclass + Title + FamGroup + Sex + isMinor + Ticket_Size + Embarked, data = test_val[, c(""Survived"", ""Pclass"", ""Title"", ""FamGroup"", ""Sex"", ""isMinor"", ""Ticket_Size"", ""Embarked"")], importance = TRUE, ntree = 1000, mtry = 2)
print(mod_rf_val)
test_df <- subset(fullset, (fullset$Survived == """"))
prediction_final <- predict(mod_rf, test_df)
submission <- data.frame(PassengerID = test_df$PassengerId, Survived = prediction_final)
write.csv(submission, file = ""Submission.csv"", row.names = F)",1,0,1,0,0,0,0,1,0,1,0,0,0,0
82,alejandrorivas-titanic-beginners-principiantes-espa-ol,0.7440000000000001,"['summary', 'plot', 'user defined', 'user defined', 'user defined', 'as.character', 'as.factor', 'c', 'data.frame', 'factor', 'is.na', 'length', 'library', 'paste', 'prop.table', 'rbind', 'rep', 'sample', 'sapply', 'set.seed', 'strsplit', 'sub', 'sum', 'table', 'which', 'text', 'cforest', 'cforest_unbiased', 'randomForest', 'varImpPlot', 'rpart', 'aggregate', 'median', 'predict', 'read.csv', 'str', 'write.csv']","['rpart', 'rpart.plot', 'RColorBrewer', 'randomForest', 'party', 'base']",54.89250493049621,"['median', 'which', 'cforest', 'as.character', 'is.na', 'sub', 'prop.table', 'rpart', 'as.factor', 'summary', 'text', 'sapply', 'varImpPlot', 'rep', 'str', 'set.seed', 'factor', 'aggregate', 'length', 'read.csv', 'table', 'randomForest', 'c', 'rbind', 'paste', 'sample', 'plot', 'sum', 'predict', 'write.csv', 'data.frame', 'strsplit', 'user defined', 'library', 'cforest_unbiased']",[],"['ammara-titanic-competition-script-using-rf-2', 'jmercer187-fork-of-titanic2', 'ammara-titanic-competition-using-boosting', 'mmaguero-titanic-majority-vote-of-ridge-rf-and-gbm', 'byrony-titanic-majority-vote-of-ridge-rf-and-gbm', 'ccheng2016-titanic-survival', 'lizpund-titanic-competition-kernel', 'aravind5-titanic', 'yugrao-titanic2', 'yugrao-titanic']","[0.9469493749543024, 0.8956185370414301, 0.8922638029486182, 0.8383878742762535, 0.8383878742762535, 0.8274880297184888, 0.8188392677015222, 0.7926860454516997, 0.7926860454516997, 0.7926860454516997]","{'c(""package:stats4"", ""package:base"")': ['summary'], 'c(""package:stats4"", ""package:graphics"")': ['plot'], 'character(0)': ['set'], 'package:base': ['as.character', 'as.factor', 'c', 'data.frame', 'factor', 'is.na', 'length', 'library', 'paste', 'prop.table', 'rbind', 'rep', 'sample', 'sapply', 'set.seed', 'strsplit', 'sub', 'sum', 'table', 'which'], 'package:graphics': ['text'], 'package:party': ['cforest', 'cforest_unbiased'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:rpart': ['rpart'], 'package:stats': ['aggregate', 'median', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:stats4"", ""package:base"")"": [""summary""], ""c(""package:stats4"", ""package:graphics"")"": [""plot""], ""character(0)"": [""set""], ""package:base"": [""as.character"", ""as.factor"", ""c"", ""data.frame"", ""factor"", ""is.na"", ""length"", ""library"", ""paste"", ""prop.table"", ""rbind"", ""rep"", ""sample"", ""sapply"", ""set.seed"", ""strsplit"", ""sub"", ""sum"", ""table"", ""which""], ""package:graphics"": [""text""], ""package:party"": [""cforest"", ""cforest_unbiased""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:rpart"": [""rpart""], ""package:stats"": [""aggregate"", ""median"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagestats4 packagebase summary cpackagestats4 packagegraphics plot character0 set packagebase ascharacter asfactor c dataframe factor isna length library paste proptable rbind rep sample sapply setseed strsplit sub sum table which packagegraphics text packageparty cforest cforestunbiased packagerandomForest randomForest varImpPlot packagerpart rpart packagestats aggregate median predict packageutils readcsv str writecsv,"knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, fig.width = 9.475, fig.height = 5)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
str(train)
table(train$Survived)
prop.table(table(train$Survived))
test$Survived <- rep(0, 418)
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = ""theyallperish.csv"", row.names = FALSE)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
summary(train$Sex)
prop.table(table(train$Sex, train$Survived))
prop.table(table(train$Sex, train$Survived), 1)
test$Survived <- 0
test$Survived[test$Sex == ""female""] <- 1
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = ""theyallperish.csv"", row.names = FALSE)
summary(train$Age)
train$Child <- 0
train$Child[train$Age < 18] <- 1
aggregate(Survived ~ Child + Sex, data = train, FUN = sum)
aggregate(Survived ~ Child + Sex, data = train, FUN = function(x) {
    sum(x)/length(x)
})
train$Fare2 <- ""30+""
train$Fare2[train$Fare < 30 & train$Fare >= 20] <- ""20-30""
train$Fare2[train$Fare < 20 & train$Fare >= 10] <- ""10-20""
train$Fare2[train$Fare < 10] <- ""<10""
aggregate(Survived ~ Fare2 + Pclass + Sex, data = train, FUN = function(x) {
    sum(x)/length(x)
})
test$Survived <- 0
test$Survived[test$Sex == ""female""] <- 1
test$Survived[test$Sex == ""female"" & test$Pclass == 3 & test$Fare >= 20] <- 0
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = ""theyallperish.csv"", row.names = FALSE)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
library(rpart)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = ""class"")
plot(fit)
text(fit)
library(rpart.plot)
library(RColorBrewer)
Prediction <- predict(fit, test, type = ""class"")
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
train$Name[1]
test$Survived <- NA
combi <- rbind(train, test)
combi$Name <- as.character(combi$Name)
combi$Name[1]
strsplit(combi$Name[1], split = ""[,.]"")
strsplit(combi$Name[1], split = ""[,.]"")[[1]]
strsplit(combi$Name[1], split = ""[,.]"")[[1]][2]
combi$Title <- sapply(combi$Name, FUN = function(x) {
    strsplit(x, split = ""[,.]"")[[1]][2]
})
combi$Title <- sub("" "", """", combi$Title)
table(combi$Title)
combi$Title[combi$Title %in% c(""Mme"", ""Mlle"")] <- ""Mlle""
combi$Title[combi$Title %in% c(""Capt"", ""Don"", ""Major"", ""Sir"")] <- ""Sir""
combi$Title[combi$Title %in% c(""Dona"", ""Lady"", ""the Countess"", ""Jonkheer"")] <- ""Lady""
combi$Title <- factor(combi$Title)
combi$FamilySize <- combi$SibSp + combi$Parch + 1
combi$Surname <- sapply(combi$Name, FUN = function(x) {
    strsplit(x, split = ""[,.]"")[[1]][1]
})
combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep = """")
combi$FamilyID[combi$FamilySize <= 2] <- ""Small""
table(combi$FamilyID)
famIDs <- data.frame(table(combi$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2, ]
combi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- ""Small""
combi$FamilyID <- factor(combi$FamilyID)
train <- combi[1:891, ]
test <- combi[892:1309, ]
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID, data = train, method = ""class"")
sample(1:10, replace = TRUE)
summary(combi$Age)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize, data = combi[!is.na(combi$Age), ], method = ""anova"")
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age), ])
summary(combi)
summary(combi$Embarked)
which(combi$Embarked == """")
combi$Embarked[c(62, 830)] = ""S""
combi$Embarked <- factor(combi$Embarked)
summary(combi$Fare)
which(is.na(combi$Fare))
combi$Fare[1044] <- median(combi$Fare, na.rm = TRUE)
combi$FamilyID2 <- combi$FamilyID
combi$FamilyID2 <- as.character(combi$FamilyID2)
combi$FamilyID2[combi$FamilySize <= 3] <- ""Small""
combi$FamilyID2 <- factor(combi$FamilyID2)
train <- combi[1:891, ]
test <- combi[892:1309, ]
library(randomForest)
set.seed(415)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2, data = train, importance = TRUE, ntree = 2000)
varImpPlot(fit)
Prediction <- predict(fit, test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = ""firstforest.csv"", row.names = FALSE)
library(party)
set.seed(415)
fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID, data = train, controls = cforest_unbiased(ntree = 2000, mtry = 3))
Prediction <- predict(fit, test, OOB = TRUE, type = ""response"")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = ""firstforest2.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
83,acrespop-titanic1,0.648,"['as.factor', 'data.frame', 'library', 'rep', 'summary', 'randomForest', 'read.csv', 'write.csv']","['randomForest', 'base']",1.74575901031494,"['write.csv', 'data.frame', 'read.csv', 'randomForest', 'as.factor', 'summary', 'library', 'rep']",[],"['paulbisto-r-titanic-script-practice', 'pradeeptripathi-prediction-of-titanic-survival-using-r', 'pradeeptripathi-prediction-of-titanic-survival-using-random-forest', 'utkarsh1997-kaggle-titanic-rf', 'predact-easy-r-titanic-predictive-model', 'suraj915-titanic-suraj', 'lokesharun-titanic', 'pavani2018-titanicr-random-forests', 'mailakshdeep-titanic-survival-prediction-r', 'hisnibs-titanic-enhancing-the-training-data-and-kis']","[0.8151947183882293, 0.8141852041054355, 0.8138931404053951, 0.8033081048366797, 0.8001132371322492, 0.791770219685815, 0.7871776163895714, 0.7453187471765634, 0.7321276213214911, 0.6755678751587632]","{'package:base': ['as.factor', 'data.frame', 'library', 'rep', 'summary'], 'package:randomForest': ['randomForest'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.factor"", ""data.frame"", ""library"", ""rep"", ""summary""], ""package:randomForest"": [""randomForest""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase asfactor dataframe library rep summary packagerandomForest randomForest packageutils readcsv writecsv,"library(randomForest)
titanic.train <- read.csv(""../input/train.csv"")
titanic.test <- read.csv(""../input/test.csv"")
summary(titanic.train)
titanic.test$Survived <- rep(0, 418)
submit <- data.frame(PassengerId = titanic.test$PassengerId, Survived = titanic.test$Survived)
write.csv(submit, file = ""EmptyResult.csv"", row.names = FALSE)
randomForest(as.factor(Survived) ~ Pclass + Sex + SibSp, data = titanic.train, ntree = 5000, importance = TRUE)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
85,krupan-exploring-survival-on-the-titanic,0.746,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'glm', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",29.3154668807983,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'glm', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'summary', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['bonesaw98616-exploring-survival-on-the-titanic', 'rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic', 'datascikrid-exploring-survival-on-the-titanic', 'anishmayaramka-the-titanic-datset']","[0.9788326791182896, 0.977301043485015, 0.977301043485015, 0.977301043485015, 0.977301043485015, 0.977301043485015, 0.977301043485015, 0.977301043485015, 0.977301043485015, 0.977301043485015]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['glm', 'median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""summary"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""glm"", ""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum summary table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats glm median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
lr_model <- glm(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train, family = binomial)
summary(lr_model)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
rf_model_PATSF <- randomForest(factor(Survived) ~ Pclass + Age + Title + Sex + Fare, data = train)
rf_model_PATFD <- randomForest(factor(Survived) ~ Pclass + Age + Title + FsizeD, data = train)
rf_model_PATFDF <- randomForest(factor(Survived) ~ Pclass + Age + Title + FsizeD + Fare, data = train)
rf_model_PATFDS <- randomForest(factor(Survived) ~ Pclass + Age + Title + FsizeD + Sex, data = train)
par(mfrow = c(1, 5))
plot(rf_model)
plot(rf_model_PATSF)
plot(rf_model_PATFD)
plot(rf_model_PATFDF)
plot(rf_model_PATFDS)
prediction <- predict(rf_model_PATSF, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
86,tobybot11-toby-s-titanic-analysis,0.758,"['as.logical', 'data.frame', 'length', 'library', 'options', 'prop.table', 'rep', 'sum', 'summary', 'table', 'plot', 'text', 'fancyRpartPlot', 'rpart', 'aggregate', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['rpart', 'rattle', 'rpart.plot', 'RColorBrewer', 'base']",0.7513480186462399,"['as.logical', 'options', 'prop.table', 'rpart', 'summary', 'text', 'rep', 'str', 'aggregate', 'length', 'read.csv', 'table', 'fancyRpartPlot', 'sum', 'plot', 'predict', 'write.csv', 'data.frame', 'head', 'library']",[],"['amodi8-titanic-exploring-survival-using-machine-learning', 'lizpund-titanic-competition-kernel', 'jerlinraj-titanic-machine-learning-from-disaster', 'stevencahill-titanic-machine-learning-from-disaster', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'sudheer464-prediction-1-on-titanic-dataset', 'scout16-titanic-disaster-in-r', 'liudj2008-titanic', 'liudj2008-fork-of-titanic']","[0.783010035891903, 0.5710000026149546, 0.5579681190063408, 0.5522799105223867, 0.48892881365159485, 0.48892881365159485, 0.4797415132918284, 0.45950420259081787, 0.4552084569077562, 0.45434605477334633]","{'package:base': ['as.logical', 'data.frame', 'length', 'library', 'options', 'prop.table', 'rep', 'sum', 'summary', 'table'], 'package:graphics': ['plot', 'text'], 'package:rattle': ['fancyRpartPlot'], 'package:rpart': ['rpart'], 'package:stats': ['aggregate', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""package:base"": [""as.logical"", ""data.frame"", ""length"", ""library"", ""options"", ""prop.table"", ""rep"", ""sum"", ""summary"", ""table""], ""package:graphics"": [""plot"", ""text""], ""package:rattle"": [""fancyRpartPlot""], ""package:rpart"": [""rpart""], ""package:stats"": [""aggregate"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",packagebase aslogical dataframe length library options proptable rep sum summary table packagegraphics plot text packagerattle fancyRpartPlot packagerpart rpart packagestats aggregate predict packageutils head readcsv str writecsv,"options(width = 120)
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
str(train)
head(train, 1)
table(train$Sex)
summary(train$Sex)
prop.table(table(train$Sex))
prop.table(table(train$Survived))
train$SurvivedBoolean <- as.logical(train$Survived)
train$SurvivedLabel[train$SurvivedBoolean == TRUE] <- ""Survived""
train$SurvivedLabel[train$SurvivedBoolean == FALSE] <- ""Died""
prop.table(table(train$Sex, train$SurvivedLabel))
prop.table(table(train$Sex, train$SurvivedLabel), 1)
summary(train$Age)
train$Child <- FALSE
train$Child[train$Age < 18] <- TRUE
table(train$Child)
table(train$Child, train$Survived)
aggregate(Survived ~ Child + Sex, data = train, FUN = sum)
aggregate(Survived ~ Child + Sex, data = train, FUN = length)
aggregate(Survived ~ Child + Sex, data = train, FUN = function(x) {
    sum(x)/length(x)
})
train$Fare2 <- ""30+""
train$Fare2[train$Fare < 30 & train$Fare >= 20] <- ""20-30""
train$Fare2[train$Fare < 20 & train$Fare >= 10] <- ""10-20""
train$Fare2[train$Fare < 10] <- ""<10""
aggregate(Survived ~ Fare2 + Pclass + Sex, data = train, FUN = function(x) {
    sum(x)/length(x)
})
library(rpart)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = ""class"")
plot(fit)
text(fit)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(fit)
Prediction <- predict(fit, test, type = ""class"")
test$Survived <- rep(0, 418)
test$Survived <- 0
test$Survived[test$Sex == ""female""] <- 1
test$Survived[test$Sex == ""female"" & test$Pclass == 3 & test$Fare >= 20] <- 0
head(test, 10)
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = ""theyallperish.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,1,0,0,0,0
87,zahraatashgahy-r-titanic-1,0.754,"['c', 'data.frame', 'factor', 'library', 'rpart', 'rpart.control', 'predict', 'read.csv', 'write.csv']","['rpart', 'base']",0.32872414588928195,"['factor', 'predict', 'write.csv', 'rpart.control', 'data.frame', 'read.csv', 'rpart', 'library', 'c']",[],"['liudj2008-titanic', 'liudj2008-fork-of-titanic', 'srinivasarajui-srini-s-r-titanic-solution', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'jkevin2010-improved-model-for-titanic-survival', 'jacekpardyak-mytitanicscript', 'amodi8-titanic-exploring-survival-using-machine-learning', 'turntrout-titanic-data-exploration', 'tobybot11-toby-s-titanic-analysis']","[0.44702484231721856, 0.44643320371823597, 0.4312195081684177, 0.4160686553950397, 0.4160686553950397, 0.41379971261422915, 0.410763546321715, 0.4099965972662881, 0.4078258798112609, 0.405083469335793]","{'package:base': ['c', 'data.frame', 'factor', 'library'], 'package:rpart': ['rpart', 'rpart.control'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""c"", ""data.frame"", ""factor"", ""library""], ""package:rpart"": [""rpart"", ""rpart.control""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase c dataframe factor library packagerpart rpart rpartcontrol packagestats predict packageutils readcsv writecsv,"library(rpart)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
train$Child <- NA
train$Child[train$Age < 10] <- 1
train$Child[train$Age >= 10] <- 0
test$Child <- NA
test$Child[test$Age < 10] <- 1
test$Child[test$Age >= 10] <- 0
train$family_size <- NA
train$family_size <- train$SibSp + train$Parch + 1
test$family_size <- NA
test$family_size <- test$SibSp + test$Parch + 1
train$Embarked[c(62, 891)] <- ""S""
test$Embarked[c(62, 418)] <- ""S""
train$Embarked <- factor(train$Embarked)
test$Embarked <- factor(test$Embarked)
my_tree <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + family_size, data = train, method = ""class"", control = rpart.control(minsplit = 50, cp = 0))
my_prediction <- predict(my_tree, test, type = ""class"")
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = ""my_solution.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,1,0,0,0,0
88,yuanwxu-exploring-survival-on-the-titanic,0.742,"['filter', 'as.factor', 'c', 'cat', 'data.frame', 'factor', 'gsub', 'ifelse', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'table', 'bind_rows', 'aes', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'mosaicplot', 'par', 'complete', 'md.pattern', 'mice', 'dollar_format', 'glm', 'median', 'predict', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",25.6487650871277,"['labs', 'complete', 'median', 'lapply', 'md.pattern', 'cat', 'is.na', 'glm', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'summary', 'filter', 'sapply', 'mice', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'str', 'set.seed', 'gsub', 'factor', 'geom_bar', 'read.csv', 'table', 'par', 'scale_y_continuous', 'c', 'aes', 'paste', 'ifelse', 'sum', 'geom_vline', 'predict', 'dollar_format', 'write.csv', 'bind_rows', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['mira5b-exploring-survival-on-the-titanic', 'mohankanni-exploring-survival-on-the-titanic', 'wendyzhang1020-exploring-survival-on-the-titanic', 'kyanyoga-exploring-survival-on-the-titanic', 'rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic']","[0.9360968891172416, 0.9360649900449517, 0.9358423242804397, 0.9357739032992812, 0.9356975324233783, 0.9356975324233783, 0.9356975324233783, 0.9356975324233783, 0.9356975324233783, 0.9356975324233783]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'data.frame', 'factor', 'gsub', 'ifelse', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'table'], 'package:dplyr': ['bind_rows'], 'package:ggplot2': ['aes', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'mosaicplot', 'par'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:scales': ['dollar_format'], 'package:stats': ['glm', 'median', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""data.frame"", ""factor"", ""gsub"", ""ifelse"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""summary"", ""table""], ""package:dplyr"": [""bind_rows""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""mosaicplot"", ""par""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:scales"": [""dollar_format""], ""package:stats"": [""glm"", ""median"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat dataframe factor gsub ifelse isna lapply library names nlevels paste sapply setseed strsplit sum summary table packagedplyr bindrows packageggplot2 aes facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist mosaicplot par packagemice complete mdpattern mice packagescales dollarformat packagestats glm median predict packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
lr_model <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train, family = ""binomial"")
summary(lr_model)
lr.probs <- predict(lr_model, test, type = ""response"")
lr.pred <- ifelse(lr.probs > 0.5, 1, 0)
solution <- data.frame(PassengerID = test$PassengerId, Survived = lr.pred)
write.csv(solution, file = ""lr.csv"", row.names = FALSE)
lr_model_few <- glm(Survived ~ Pclass + Age + Fare + Title + FsizeD, data = train, family = ""binomial"")
summary(lr_model_few)
lr2.probs <- predict(lr_model_few, test, type = ""response"")
lr2.pred <- ifelse(lr2.probs > 0.5, 1, 0)
solution2 <- data.frame(PassengerID = test$PassengerId, Survived = lr2.pred)
write.csv(solution, file = ""lr_few.csv"", row.names = FALSE)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
89,predact-easy-r-titanic-predictive-model,0.758,"['as.data.frame', 'as.factor', 'is.na', 'library', 'names', 'nrow', 'rbind', 'summary', 'table', 'aes', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_jitter', 'ggplot', 'ggtitle', 'theme_grey', 'randomForest', 'rpart', 'rpart.plot', 'as.formula', 'median', 'predict', 'head', 'read.csv', 'str', 'tail', 'write.csv']","['rpart', 'rpart.plot', 'ggplot2', 'randomForest', 'base']",2.6499490737915,"['nrow', 'as.formula', 'median', 'geom_jitter', 'is.na', 'names', 'geom_boxplot', 'rpart', 'as.factor', 'summary', 'str', 'geom_bar', 'read.csv', 'table', 'randomForest', 'as.data.frame', 'aes', 'theme_grey', 'tail', 'rbind', 'predict', 'write.csv', 'ggtitle', 'ggplot', 'geom_density', 'rpart.plot', 'head', 'library', 'facet_grid']",[],"['paulbisto-r-titanic-script-practice', 'suraj915-titanic-suraj', 'utkarsh1997-kaggle-titanic-rf', 'pavani2018-titanicr-random-forests', 'pradeeptripathi-prediction-of-titanic-survival-using-r', 'pradeeptripathi-prediction-of-titanic-survival-using-random-forest', 'lokesharun-titanic', 'mailakshdeep-titanic-survival-prediction-r', 'acrespop-titanic1', 'hisnibs-titanic-enhancing-the-training-data-and-kis']","[0.9830643240199534, 0.9589811340751226, 0.9460666543109195, 0.932165908805524, 0.9253164445515738, 0.9252384795308537, 0.8853147862612912, 0.805331902909992, 0.8001132371322492, 0.7278933733637868]","{'package:base': ['as.data.frame', 'as.factor', 'is.na', 'library', 'names', 'nrow', 'rbind', 'summary', 'table'], 'package:ggplot2': ['aes', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_jitter', 'ggplot', 'ggtitle', 'theme_grey'], 'package:randomForest': ['randomForest'], 'package:rpart': ['rpart'], 'package:rpart.plot': ['rpart.plot'], 'package:stats': ['as.formula', 'median', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'tail', 'write.csv']}","{""package:base"": [""as.data.frame"", ""as.factor"", ""is.na"", ""library"", ""names"", ""nrow"", ""rbind"", ""summary"", ""table""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_jitter"", ""ggplot"", ""ggtitle"", ""theme_grey""], ""package:randomForest"": [""randomForest""], ""package:rpart"": [""rpart""], ""package:rpart.plot"": [""rpart.plot""], ""package:stats"": [""as.formula"", ""median"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""tail"", ""write.csv""]}",packagebase asdataframe asfactor isna library names nrow rbind summary table packageggplot2 aes facetgrid geombar geomboxplot geomdensity geomjitter ggplot ggtitle themegrey packagerandomForest randomForest packagerpart rpart packagerpartplot rpartplot packagestats asformula median predict packageutils head readcsv str tail writecsv,"titanic.train <- read.csv(""../input/train.csv"")
titanic.test <- read.csv(""../input/test.csv"")
head(titanic.train)
tail(titanic.train)
summary(titanic.train)
str(titanic.train)
head(titanic.test)
tail(titanic.test)
summary(titanic.test)
str(titanic.test)
titanic.train$IsTrainSet <- TRUE
titanic.test$IsTrainSet <- FALSE
names(titanic.train)
names(titanic.test)
titanic.test$Survived <- NA
titanic.full <- rbind(titanic.train, titanic.test)
table(titanic.full$IsTrainSet)
table(titanic.full$Embarked)
titanic.full[titanic.full$Embarked == """", ]
table(titanic.full$Sex, titanic.full$Embarked)
table(titanic.full$Pclass, titanic.full$Embarked)
titanic.full[titanic.full$Embarked == """", ""Embarked""] <- ""S""
table(titanic.full$Embarked)
table(is.na(titanic.full$Age))
median(titanic.full$Age, na.rm = TRUE)
titanic.males <- titanic.full[titanic.full$Sex == ""male"", ]
median(titanic.males$Age, na.rm = TRUE)
medianAgeMale <- median(titanic.males$Age, na.rm = TRUE)
titanic.full[is.na(titanic.full$Age) & titanic.full$Sex == ""male"", ""Age""] <- medianAgeMale
titanic.females <- titanic.full[titanic.full$Sex == ""female"", ]
median(titanic.females$Age, na.rm = TRUE)
medianAgeFemale <- median(titanic.females$Age, na.rm = TRUE)
titanic.full[is.na(titanic.full$Age) & titanic.full$Sex == ""female"", ""Age""] <- medianAgeFemale
table(is.na(titanic.full$Age))
table(is.na(titanic.full$Fare))
library(""rpart"")
library(""rpart.plot"")
fare_dt <- rpart(Fare ~ Pclass + Parch + Sex + SibSp, data = titanic.full)
rpart.plot(fare_dt, type = 1, extra = 101)
MissingFare <- titanic.full[is.na(titanic.full$Fare), ]
MissingFare
titanic.full[is.na(titanic.full$Fare), ""Fare""] <- 12
table(is.na(titanic.full$Fare))
str(titanic.full)
titanic.full$Pclass <- as.factor(titanic.full$Pclass)
titanic.full$Sex <- as.factor(titanic.full$Sex)
titanic.full$Embarked <- as.factor(titanic.full$Embarked)
titanic.train <- titanic.full[titanic.full$IsTrainSet == TRUE, ]
titanic.test <- titanic.full[titanic.full$IsTrainSet == FALSE, ]
nrow(titanic.train)
nrow(titanic.test)
titanic.train$Survived <- as.factor(titanic.train$Survived)
str(titanic.train)
library(ggplot2)
g <- ggplot(data = titanic.train, aes(x = Sex, fill = Survived)) + geom_bar() + theme_grey(base_size = 14)
g
g <- ggplot(data = titanic.train, aes(x = Pclass, fill = Survived)) + geom_bar() + theme_grey(base_size = 14)
g
g <- ggplot(data = titanic.train, aes(x = Embarked, fill = Survived)) + geom_bar() + theme_grey(base_size = 14)
g
g <- ggplot(data = titanic.train, aes(x = SibSp, fill = Survived)) + geom_bar() + theme_grey(base_size = 14)
g
g <- ggplot(data = titanic.train, aes(x = Age)) + geom_density()
g
g <- ggplot(data = titanic.train, aes(x = Fare)) + geom_density() + facet_grid(~Pclass)
g
g <- ggplot(data = titanic.train, aes(x = Pclass, y = Fare)) + geom_boxplot()
g
g <- ggplot(data = titanic.train, aes(x = Pclass, y = Fare, color = Survived)) + geom_jitter() + ggtitle(""Titanic Survival by Class"")
g
g <- ggplot(data = titanic.train[titanic.train$Sex == ""male"", ], aes(x = Pclass, y = Fare, color = Survived)) + geom_jitter() + ggtitle(""Titanic Survival by Class: Males Only"")
g
g <- ggplot(data = titanic.train[titanic.train$Sex == ""female"", ], aes(x = Pclass, y = Fare, color = Survived)) + geom_jitter() + ggtitle(""Titanic Survival by Class: Females Only"")
g
library(""randomForest"")
survived.equation <- ""Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked""
survived.formula <- as.formula(survived.equation)
titanic.model <- randomForest(formula = survived.formula, data = titanic.train, ntree = 500, mtry = 3, nodesize = 0.01 * nrow(titanic.train))
Survived <- predict(titanic.model, newdata = titanic.test)
PassengerId <- titanic.test$PassengerId
output.df <- as.data.frame(PassengerId)
output.df$Survived <- Survived
write.csv(output.df, ""titanic_kaggle_submission.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
90,hongviet2002-survived-on-titanic-board,0.7509999999999999,"['as.character', 'c', 'data.frame', 'factor', 'is.na', 'library', 'rbind', 'sapply', 'strsplit', 'sub', 'substr', 'summary', 'rpart', 'rpart.control', 'prp', 'median', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['ggplot2', 'readr', 'rpart', 'rpart.plot', 'base']",1.00110101699829,"['median', 'as.character', 'sub', 'is.na', 'rpart.control', 'rpart', 'summary', 'sapply', 'str', 'prp', 'factor', 'read.csv', 'c', 'rbind', 'predict', 'write.csv', 'data.frame', 'strsplit', 'head', 'substr', 'library']",['hongviet2002-exploring-survived-on-titanic'],"['zahraatashgahy-r-titanic-1', 'paulocressoni-titanic-using-stepwise-linear-regression', 'goblin-titanic-test', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic', 'nithishthirmul-titanic-data-test1']","[0.08517296942082919, 0.07297116413651804, 0.07204288080764866, 0.06914287123922133, 0.06914287123922133, 0.06869879935427894, 0.06869879935427894, 0.06285741953597065, 0.06285741953597065, 0.06035447652633637]","{'package:base': ['as.character', 'c', 'data.frame', 'factor', 'is.na', 'library', 'rbind', 'sapply', 'strsplit', 'sub', 'substr', 'summary'], 'package:rpart': ['rpart', 'rpart.control'], 'package:rpart.plot': ['prp'], 'package:stats': ['median', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""package:base"": [""as.character"", ""c"", ""data.frame"", ""factor"", ""is.na"", ""library"", ""rbind"", ""sapply"", ""strsplit"", ""sub"", ""substr"", ""summary""], ""package:rpart"": [""rpart"", ""rpart.control""], ""package:rpart.plot"": [""prp""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",packagebase ascharacter c dataframe factor isna library rbind sapply strsplit sub substr summary packagerpart rpart rpartcontrol packagerpartplot prp packagestats median predict packageutils head readcsv str writecsv,"library(ggplot2)
library(readr)
library(rpart)
library(rpart.plot)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
test$Survived <- 0
New_Data <- rbind(train, test)
write.csv(New_Data, ""New_Data_LeViet.csv"")
New_Data$Name <- as.character(New_Data$Name)
New_Data$Title <- sapply(New_Data$Name, FUN = function(x) {
    strsplit(x, split = ""[,.]"")[[1]][2]
})
New_Data$Title <- sub("" "", """", New_Data$Title)
New_Data$Title[New_Data$PassengerId == 797] <- ""Mrs""
New_Data$Title[New_Data$Title %in% c(""Lady"", ""the Countess"", ""Mlle"", ""Mee"", ""Ms"")] <- ""Miss""
New_Data$Title[New_Data$Title %in% c(""Capt"", ""Don"", ""Major"", ""Sir"", ""Col"", ""Jonkheer"", ""Rev"", ""Dr"", ""Master"")] <- ""Mr""
New_Data$Title[New_Data$Title %in% c(""Dona"")] <- ""Mrs""
New_Data$Title <- factor(New_Data$Title)
New_Data$Embarked[c(62, 830)] = ""S""
New_Data$Embarked <- factor(New_Data$Embarked)
New_Data$Fare[1044] <- median(New_Data$Fare, na.rm = TRUE)
New_Data$family_size <- New_Data$SibSp + New_Data$Parch + 1
write.csv(New_Data, ""New_Data_LeViet_02.csv"")
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + family_size, data = New_Data[!is.na(New_Data$Age), ], method = ""anova"")
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + family_size, data = New_Data[!is.na(New_Data$Age), ], method = ""anova"")
New_Data$Age[is.na(New_Data$Age)] <- predict(predicted_age, New_Data[is.na(New_Data$Age), ])
write.csv(New_Data, ""New_Data_LeViet_02.csv"")
train_new_LeViet <- New_Data[1:891, ]
test_new_Leviet <- New_Data[892:1309, ]
test_new_Leviet$Survived <- NULL
train_new_LeViet$Cabin <- substr(train_new_LeViet$Cabin, 1, 1)
test_new_Leviet$Cabin <- substr(test_new_Leviet$Cabin, 1, 1)
train_new_LeViet$Cabin[train_new_LeViet$Cabin == """"] <- ""H""
test_new_Leviet$Cabin[test_new_Leviet$Cabin == """"] <- ""H""
train_new_LeViet$Cabin[train_new_LeViet$Cabin == ""T""] <- ""H""
train_new_LeViet$Cabin <- factor(train_new_LeViet$Cabin)
test_new_Leviet$Cabin <- factor(test_new_Leviet$Cabin)
str(train_new_LeViet)
str(test_new_Leviet)
LeViet_Tree <- rpart(Survived ~ Age + Sex + Pclass + family_size, data = train_new_LeViet, method = ""class"", control = rpart.control(cp = 1e-04))
summary(LeViet_Tree)
prp(LeViet_Tree, type = 4, extra = 100)
LeViet_prediction <- predict(LeViet_Tree, test_new_Leviet, type = ""class"")
head(LeViet_prediction)
vector_passengerid <- test_new_Leviet$PassengerId
LeViet_Solution <- data.frame(PassengerId = vector_passengerid, Survived = LeViet_prediction)
head(LeViet_Solution)
write.csv(LeViet_Solution, file = ""LeViet_Solution.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,1,0,0,0,0
91,klashgari-titanic,0.242,"['apply', 'as.numeric', 'c', 'is.na', 'library', 'mean', 'sum', 'system', 'which', 'melt', 'rpart', 'formula', 'predict', 'read.csv', 'write.csv']","['ggplot2', 'readr', 'caret', 'reshape2', 'rpart', 'base']",1.8825919628143304,"['formula', 'as.numeric', 'sum', 'predict', 'write.csv', 'mean', 'melt', 'apply', 'read.csv', 'rpart', 'which', 'library', 'c', 'is.na', 'system']",[],"['brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'liudj2008-fork-of-titanic', 'liudj2008-titanic', 'jacekpardyak-mytitanicscript', 'ezhilvelme-titanic-neural-network-c-4-2', 'peggy88-titanic-data-eda-by-peggy', 'brirush-titanic-nearest-neighbor-using-squared-correlation', 'scout16-titanic-disaster-in-r', 'zahraatashgahy-r-titanic-1']","[0.4318369592129066, 0.4318369592129066, 0.3892848551391084, 0.3889650396388144, 0.3685407224288156, 0.3541308210568264, 0.3350457716291507, 0.32670033148909, 0.3163984336029002, 0.3153545515314589]","{'package:base': ['apply', 'as.numeric', 'c', 'is.na', 'library', 'mean', 'sum', 'system', 'which'], 'package:reshape2': ['melt'], 'package:rpart': ['rpart'], 'package:stats': ['formula', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""apply"", ""as.numeric"", ""c"", ""is.na"", ""library"", ""mean"", ""sum"", ""system"", ""which""], ""package:reshape2"": [""melt""], ""package:rpart"": [""rpart""], ""package:stats"": [""formula"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase apply asnumeric c isna library mean sum system which packagereshape2 melt packagerpart rpart packagestats formula predict packageutils readcsv writecsv,"library(ggplot2)
library(readr)
system(""ls ../input"")
library(caret)
library(reshape2)
test <- read.csv(""../input/test.csv"", header = TRUE)
train <- read.csv(""../input/train.csv"", header = TRUE)
train.missingData.vector <- apply(train[, -2], 2, function(x) sum(is.na(x) | x == """"))
train.missingData.column <- melt(train.missingData.vector)
train$Age[is.na(train$Age)] <- mean(train$Age, na.rm = TRUE)
train$Embarked[which(is.na(train$Embarked) | train$Embarked == """")] <- ""S""
fol <- formula(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked)
library(rpart)
decisionTreeModel <- rpart(fol, method = ""class"", data = train)
prediction <- predict(decisionTreeModel, test, type = ""class"")
test$Survived <- as.numeric(as.numeric(prediction) == 1)
write.csv(test[, c(""PassengerId"", ""Survived"")], ""submission.csv"", row.names = F)",0,0,1,0,0,0,0,1,0,1,0,0,0,0
92,abedben-exploring-survival-on-the-titanic,0.7440000000000001,"['filter', 'as.factor', 'c', 'cat', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'complete', 'md.pattern', 'mice', 'randomForest', 'median', 'predict', 'read.csv', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'xgboost', 'base']",26.023470163345298,"['complete', 'median', 'lapply', 'md.pattern', 'cat', 'is.na', 'names', 'as.factor', 'filter', 'sapply', 'mice', 'set.seed', 'gsub', 'factor', 'read.csv', 'table', 'randomForest', 'c', 'paste', 'sum', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'nlevels', 'strsplit', 'library']",[],"['arunkumarramanan-data-science-in-r-and-titanic-survival-prediction', 'mira5b-exploring-survival-on-the-titanic', 'mohankanni-exploring-survival-on-the-titanic', 'kyanyoga-exploring-survival-on-the-titanic', 'wendyzhang1020-exploring-survival-on-the-titanic', 'oldflag-exploring-survival-on-the-titanic-inr-frommegan', 'rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic']","[0.9859116295752394, 0.9726334363144024, 0.9723494177640923, 0.9723160974216157, 0.9721842562277044, 0.9721653012677747, 0.9720338416116815, 0.9720338416116815, 0.9720338416116815, 0.9720338416116815]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['randomForest'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat dataframe factor gsub isna lapply library names nlevels paste sapply setseed strsplit sum table packagedplyr bindrows packagemice complete mdpattern mice packagerandomForest randomForest packagestats median predict packageutils readcsv writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
library(""xgboost"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
full$Age <- mice_output$Age
sum(is.na(full$Age))
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train, ntree = 1000)
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,1,0,0,0,0,0
95,wendyzhang1020-exploring-survival-on-the-titanic,0.7440000000000001,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",26.340848922729503,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'mice', 'set.seed', 'gsub', 'importance', 'factor', 'colnames', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic', 'datascikrid-exploring-survival-on-the-titanic', 'anishmayaramka-the-titanic-datset', 'aturner-exploring-survival-on-the-titanic']","[0.9998452817816588, 0.9998452817816588, 0.9998452817816588, 0.9998452817816588, 0.9998452817816588, 0.9998452817816588, 0.9998452817816588, 0.9998452817816588, 0.9998452817816588, 0.9998452817816588]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, 1], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(-Importance)))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
96,dralmostright-kaggle-titanic-first-kernel,0.7659999999999999,"['user defined', 'user defined', 'user defined', 'as.factor', 'colnames', 'data.frame', 'factor', 'gsub', 'ifelse', 'is.na', 'length', 'library', 'set.seed', 'sum', 'summary', 'table', 'which', 'train', 'trainControl', 'bind_rows', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_point', 'ggplot', 'ggtitle', 'labs', 'scale_fill_discrete', 'theme_minimal', 'xlab', 'ylab', 'legend', 'plot', 'rpart', 'predict', 'read.csv', 'str', 'write.csv']","['caret', 'randomForest', 'rpart', 'rpart.plot', 'corrplot', 'dplyr', 'base']",16.6963491439819,"['labs', 'which', 'coord_flip', 'is.na', 'scale_fill_discrete', 'rpart', 'as.factor', 'summary', 'str', 'set.seed', 'gsub', 'theme_minimal', 'factor', 'colnames', 'xlab', 'geom_bar', 'length', 'read.csv', 'table', 'train', 'aes', 'ylab', 'mutate', 'ifelse', 'sum', 'geom_point', 'legend', 'plot', 'predict', 'write.csv', 'bind_rows', 'ggtitle', 'data.frame', 'ggplot', 'user defined', 'library', 'trainControl', 'facet_grid']",[],"['seanangio-predicting-titanic-survival', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic', 'skhawaja-titanic-disaster-survival-099', 'rboimistruk-titanic-survivals-analysis', 'chuanhuiliu-one-solution-to-titanic-survival-analysis']","[0.07563972423671633, 0.0754421528365828, 0.0754421528365828, 0.07486832978350189, 0.07486832978350189, 0.07245586597884464, 0.07245586597884464, 0.07214193788077534, 0.06720015436307097, 0.06700902831022444]","{'character(0)': ['set'], 'package:base': ['as.factor', 'colnames', 'data.frame', 'factor', 'gsub', 'ifelse', 'is.na', 'length', 'library', 'set.seed', 'sum', 'summary', 'table', 'which'], 'package:caret': ['train', 'trainControl'], 'package:dplyr': ['bind_rows', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_point', 'ggplot', 'ggtitle', 'labs', 'scale_fill_discrete', 'theme_minimal', 'xlab', 'ylab'], 'package:graphics': ['legend', 'plot'], 'package:rpart': ['rpart'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""character(0)"": [""set""], ""package:base"": [""as.factor"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""ifelse"", ""is.na"", ""length"", ""library"", ""set.seed"", ""sum"", ""summary"", ""table"", ""which""], ""package:caret"": [""train"", ""trainControl""], ""package:dplyr"": [""bind_rows"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_point"", ""ggplot"", ""ggtitle"", ""labs"", ""scale_fill_discrete"", ""theme_minimal"", ""xlab"", ""ylab""], ""package:graphics"": [""legend"", ""plot""], ""package:rpart"": [""rpart""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",character0 set packagebase asfactor colnames dataframe factor gsub ifelse isna length library setseed sum summary table which packagecaret train trainControl packagedplyr bindrows mutate packageggplot2 aes coordflip facetgrid geombar geompoint ggplot ggtitle labs scalefilldiscrete thememinimal xlab ylab packagegraphics legend plot packagerpart rpart packagestats predict packageutils readcsv str writecsv,"knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(randomForest)
library(rpart)
library(rpart.plot)
library(corrplot)
library(dplyr)
testData <- read.csv(""../input/test.csv"", sep = "","", stringsAsFactors = F, header = T)
trainData <- read.csv(""../input/train.csv"", sep = "","", stringsAsFactors = F, header = T)
testData$Survived <- NA
trainData$sample = ""training""
testData$sample = ""testing""
trailData <- bind_rows(trainData, testData)
tempData <- trailData
trailData$Pclass <- as.factor(trailData$Pclass)
trailData$Sex <- as.factor(trailData$Sex)
trailData$Embarked <- as.factor(trailData$Embarked)
str(trailData)
summary(trailData)
sum(is.na(trailData$Age))
trailData <- mutate(trailData, AgeCat = ifelse(SibSp > 1, 0, ifelse(Parch > 2, 1, 2)))
ageModel = rpart(Age ~ Fare + Pclass + SibSp + Parch + AgeCat, data = trailData)
trailData$predictAge = predict(ageModel, trailData)
trailData$Age <- ifelse(is.na(trailData$Age), trailData$predictAge, trailData$Age)
numOfNa <- sum(is.na(trailData$Age))
numOfNa
which(trailData$Embarked == """")
trailData[trailData$Embarked == """", ]
trailData$Embarked <- as.factor(trailData$Embarked)
emptyEmbarked <- which(trailData$Embarked == """")
embarkedModel <- train(Embarked ~ Pclass + Fare, data = trailData, method = ""rpart"", na.action = na.pass)
trailData$Embarked[emptyEmbarked] <- predict(embarkedModel, trailData[emptyEmbarked, ])
sum(is.na(trailData$Fare))
trailData[is.na(trailData$Fare), ]
fareModel <- rpart(Fare ~ Age + Pclass + Embarked + SibSp + Parch, data = trailData)
emptyFare <- which(is.na(trailData$Fare))
trailData$Fare[emptyFare] <- predict(fareModel, trailData[emptyFare, ])
sum(is.na(trailData$Fare))
count <- length(which(trailData$Cabin == """"))
count
trnData <- trailData[trailData$sample == ""training"", ]
plot <- ggplot(trnData, aes(Pclass, fill = factor(Survived)))
plot <- plot + geom_bar(stat = ""count"", position = ""dodge"")
plot <- plot + facet_grid(Sex ~ .) + coord_flip()
plot <- plot + labs(title = ""Men and Women Survived by Passenger Class"", x = ""Ticket class accorinding to socio-economic status"", y = ""Survival Count"", fill = ""Survival"")
plot
plot2 <- ggplot(trnData, aes(x = Embarked, fill = factor(Survived)))
plot2 <- plot2 + geom_bar(stat = ""count"", position = ""dodge"")
plot2 <- plot2 + ggtitle(""Passengers per Boarding Location and Survival rate."")
plot2 <- plot2 + ylab(""Survival Count"")
plot2 <- plot2 + xlab(""Boarding Location"") + theme_minimal()
plot2 <- plot2 + scale_fill_discrete(name = ""Survival"")
plot2
plot <- ggplot(trnData, aes(x = Age, y = Fare))
plot <- plot + geom_point(aes(shape = factor(Survived), colour = factor(Survived)))
plot <- plot + facet_grid(Sex ~ .) + coord_flip()
plot <- plot + labs(title = ""Survival by Age, Sex and Fare"", x = ""Age Of Passengers"", y = ""Fare passengers paid"", fill = ""Survival"")
plot
trailData <- mutate(trailData, fitness = as.factor(ifelse(trailData$Age <= 16, ""Child"", ifelse(trailData$Age >= 50, ""Old"", ""Adult""))))
table(trailData$Sex, trailData$fitness)
trnData <- trailData[trailData$sample == ""training"", ]
plot <- ggplot(trnData, aes(Pclass, fill = factor(Survived)))
plot <- plot + geom_bar(stat = ""count"", position = ""dodge"")
plot <- plot + facet_grid(Sex ~ fitness)
plot <- plot + labs(title = ""Men and Women Survived by Passenger Class and Physical fitness"", x = ""Ticket class accorinding to socio-economic status"", y = ""Survival Count"", fill = ""Survival"")
plot
trailData <- mutate(trailData, familySize = trailData$SibSp + trailData$Parch + 1)
trnData <- trailData[trailData$sample == ""training"", ]
plot1 <- ggplot(trnData, aes(x = familySize, fill = factor(Survived)))
plot1 <- plot1 + geom_bar(stat = ""count"", position = ""dodge"")
plot1 <- plot1 + ggtitle(""Survival according to family size."")
plot1 <- plot1 + ylab(""Survival Count"")
plot1 <- plot1 + xlab(""Family Size"") + theme_minimal()
plot1 <- plot1 + scale_fill_discrete(name = ""Survival"")
plot1
trailData <- mutate(trailData, familyType = as.factor(ifelse(familySize == 1, ""Single"", ifelse(familySize > 1 & familySize <= 4, ""Small"", ""Big""))))
trailData$Title <- gsub(""(.*, )|(\\..*)"", """", trailData$Name)
table(trailData$Sex, trailData$Title)
trailData$Title <- as.factor(ifelse(trailData$Title == ""Mlle"", ""Miss"", ifelse(trailData$Title == ""Ms"", ""Miss"", ifelse(trailData$Title == ""Mme"", ""Mrs"", ifelse(trailData$Title == ""Miss"", ""Miss"", ifelse(trailData$Title == ""Mrs"", ""Mrs"", ifelse(trailData$Title == ""Mr"", ""Mr"", ifelse(trailData$Title == ""Master"", ""Master"", ""Not Known""))))))))
table(trailData$Sex, trailData$Title)
trnData <- trailData[trailData$sample == ""training"", ]
plot <- ggplot(trnData, aes(factor(Survived), fill = Title)) + geom_bar(position = ""dodge"")
plot <- plot + labs(title = ""Survival Vs Title"", x = ""Survival"", y = ""Count"", fill = ""Title"")
plot
set.seed(22519)
tstData <- trailData[trailData$sample == ""testing"", ]
tranData <- trailData[trailData$sample == ""training"", ]
fitControl <- trainControl(method = ""cv"", number = 3, verboseIter = F)
fit <- train(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + fitness + familyType + Title, data = tranData, method = ""rf"", trControl = fitControl, importance = TRUE)
plot(fit)
finalModel <- fit$finalModel
plot(finalModel)
legend(""topright"", colnames(finalModel$err.rate), col = 1:3, fill = 1:3)
fit$finalModel
predict <- predict(fit, newdata = tstData)
solution <- data.frame(PassengerID = tstData$PassengerId, Survived = predict)
write.csv(solution, file = ""predictionSurvivalTitanic.csv"", row.names = F)
str(tempData)
summary(tempData)
fit
trnData <- trailData[trailData$sample == ""training"", ]
plot <- ggplot(trnData, aes(Pclass, fill = factor(Survived)))
plot <- plot + geom_bar(stat = ""count"", position = ""dodge"")
plot <- plot + facet_grid(Sex ~ .) + coord_flip()
plot <- plot + labs(title = ""Men and Women Survived by Passenger Class"", x = ""Ticket class accorinding to socio-economic status"", y = ""Survival Count"", fill = ""Survival"")
plot
plot2 <- ggplot(trnData, aes(x = Embarked, fill = factor(Survived)))
plot2 <- plot2 + geom_bar(stat = ""count"", position = ""dodge"")
plot2 <- plot2 + ggtitle(""Passengers per Boarding Location and Survival rate."")
plot2 <- plot2 + ylab(""Survival Count"")
plot2 <- plot2 + xlab(""Boarding Location"") + theme_minimal()
plot2 <- plot2 + scale_fill_discrete(name = ""Survival"")
plot2
plot <- ggplot(trnData, aes(x = Age, y = Fare))
plot <- plot + geom_point(aes(shape = factor(Survived), colour = factor(Survived)))
plot <- plot + facet_grid(Sex ~ .) + coord_flip()
plot <- plot + labs(title = ""Survival by Age, Sex and Fare"", x = ""Age Of Passengers"", y = ""Fare passengers paid"", fill = ""Survival"")
plot
trnData <- trailData[trailData$sample == ""training"", ]
plot <- ggplot(trnData, aes(Pclass, fill = factor(Survived)))
plot <- plot + geom_bar(stat = ""count"", position = ""dodge"")
plot <- plot + facet_grid(Sex ~ fitness)
plot <- plot + labs(title = ""Men and Women Survived by Passenger Class and Physical fitness"", x = ""Ticket class accorinding to socio-economic status"", y = ""Survival Count"", fill = ""Survival"")
plot
trnData <- trailData[trailData$sample == ""training"", ]
plot1 <- ggplot(trnData, aes(x = familySize, fill = factor(Survived)))
plot1 <- plot1 + geom_bar(stat = ""count"", position = ""dodge"")
plot1 <- plot1 + ggtitle(""Survival according to family size."")
plot1 <- plot1 + ylab(""Survival Count"")
plot1 <- plot1 + xlab(""Family Size"") + theme_minimal()
plot1 <- plot1 + scale_fill_discrete(name = ""Survival"")
plot1
trnData <- trailData[trailData$sample == ""training"", ]
plot <- ggplot(trnData, aes(factor(Survived), fill = Title)) + geom_bar(position = ""dodge"")
plot <- plot + labs(title = ""Survival Vs Title"", x = ""Survival"", y = ""Count"", fill = ""Title"")
plot",1,0,1,0,0,0,0,1,0,1,0,0,0,0
97,renegarxia-titanic-r,0.7609999999999999,"['c', 'factor', 'ifelse', 'is.na', 'library', 'mean', 'set.seed', 'train', 'trainControl', 'predict', 'read.table', 'write.table']","['caret', 'randomForest', 'base']",6.63848209381104,"['factor', 'ifelse', 'predict', 'mean', 'read.table', 'write.table', 'library', 'trainControl', 'train', 'c', 'is.na', 'set.seed']",[],"['nozzo1-my-titanic-r-entry-2', 'mullayilkannan-randomforest-with-knn-imputation-titanic', 'stevencahill-titanic-machine-learning-from-disaster', 'analyticsdojo-titanic-baseline-models-analyticsdojo-r', 'overdose-titanic-basic-modelling', 'jerlinraj-titanic-machine-learning-from-disaster', 'gravitymhxy2-titanic', 'liudj2008-titanic', 'tsfitz-titanic', 'peggy88-titanic-data-eda-by-peggy']","[0.9187548245559539, 0.2597481530896329, 0.12422644094486406, 0.1241222573216751, 0.12338360384023347, 0.10495238687754804, 0.10448409379386608, 0.1029231262904141, 0.10278615503290404, 0.10171960387294678]","{'package:base': ['c', 'factor', 'ifelse', 'is.na', 'library', 'mean', 'set.seed'], 'package:caret': ['train', 'trainControl'], 'package:stats': ['predict'], 'package:utils': ['read.table', 'write.table']}","{""package:base"": [""c"", ""factor"", ""ifelse"", ""is.na"", ""library"", ""mean"", ""set.seed""], ""package:caret"": [""train"", ""trainControl""], ""package:stats"": [""predict""], ""package:utils"": [""read.table"", ""write.table""]}",packagebase c factor ifelse isna library mean setseed packagecaret train trainControl packagestats predict packageutils readtable writetable,"library(caret)
library(randomForest)
trainSet <- read.table(""../input/train.csv"", sep = "","", header = TRUE)
testSet <- read.table(""../input/test.csv"", sep = "","", header = TRUE)
trainSet$Survived <- factor(trainSet$Survived)
set.seed(42)
trainSet$Survived <- factor(trainSet$Survived)
set.seed(42)
model <- train(Survived ~ Pclass + Sex + SibSp + Embarked + Parch + Fare, data = trainSet, method = ""rf"", trControl = trainControl(method = ""cv"", number = 5))
testSet$Fare <- ifelse(is.na(testSet$Fare), mean(testSet$Fare, na.rm = TRUE), testSet$Fare)
testSet$Survived <- predict(model, newdata = testSet)
submission <- testSet[c(""PassengerId"", ""Survived"")]
write.table(submission, file = ""submission.csv"", col.names = TRUE, row.names = FALSE, sep = "","")",1,0,1,0,0,0,0,1,0,0,0,0,0,0
98,danvargg-titanic-passenger-survival,0.7390000000000001,"['as.factor', 'data.frame', 'dim', 'factor', 'library', 'sapply', 'set.seed', 'strsplit', 'naiveBayes', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['e1071', 'caret', 'base']",2.3109791278839102,"['factor', 'dim', 'predict', 'write.csv', 'data.frame', 'strsplit', 'read.csv', 'naiveBayes', 'head', 'as.factor', 'library', 'sapply', 'str', 'set.seed']",[],"['danvargg-titanic-passenger-survival', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'jacekpardyak-mytitanicscript', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'jerlinraj-titanic-machine-learning-from-disaster', 'sudheer464-prediction-1-on-titanic-dataset', 'scout16-titanic-disaster-in-r', 'zhaotianjing-titanic']","[0.9999999999999998, 0.4109475042759608, 0.4109475042759608, 0.4034722833055898, 0.40242094454114835, 0.39894336695467747, 0.393105043373492, 0.38149396692672805, 0.3804328855121263, 0.37527810424448405]","{'package:base': ['as.factor', 'data.frame', 'dim', 'factor', 'library', 'sapply', 'set.seed', 'strsplit'], 'package:e1071': ['naiveBayes'], 'package:stats': ['predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""package:base"": [""as.factor"", ""data.frame"", ""dim"", ""factor"", ""library"", ""sapply"", ""set.seed"", ""strsplit""], ""package:e1071"": [""naiveBayes""], ""package:stats"": [""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",packagebase asfactor dataframe dim factor library sapply setseed strsplit packagee1071 naiveBayes packagestats predict packageutils head readcsv str writecsv,"train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
dim(train)
dim(test)
str(train)
str(test)
strsplit(train$Cabin[2], NULL)[[1]]
train$Deck <- factor(sapply(train$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
test$Deck <- factor(sapply(test$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
train$Survived <- as.factor(train$Survived)
set.seed(20170601)
library(e1071)
m <- naiveBayes(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Deck, data = train, method = ""rf"", metric = ""Accuracy"", na.action = na.pass)
m
library(caret)
p <- predict(m, test, type = ""class"")
head(p, 20)
sol <- data.frame(PassengerID = test$PassengerId, Survived = p)
write.csv(sol, file = ""titanic_sol.csv"", row.names = F)",0,0,1,0,0,0,0,1,0,0,0,1,0,0
99,mohankanni-exploring-survival-on-the-titanic,0.7440000000000001,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",24.3265209197998,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'summary', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['mohankanni-exploring-survival-on-the-titanic', 'rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic', 'datascikrid-exploring-survival-on-the-titanic', 'anishmayaramka-the-titanic-datset']","[0.9999999999999998, 0.9999223102572843, 0.9999223102572843, 0.9999223102572843, 0.9999223102572843, 0.9999223102572843, 0.9999223102572843, 0.9999223102572843, 0.9999223102572843, 0.9999223102572843]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""summary"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum summary table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
summary(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
100,a1112111a-neural-network-example-using-titanic-dataset,0.9109999999999999,"['compute', 'as.factor', 'c', 'data.frame', 'factor', 'is.na', 'library', 'mean', 'print', 'round', 'row.names', 'sapply', 'sum', 'count', 'neuralnet', 'importance', 'randomForest', 'model.matrix', 'read.csv']","['dplyr', 'neuralnet', 'randomForest', 'base']",13.899517059326199,"['mean', 'is.na', 'print', 'count', 'as.factor', 'compute', 'sapply', 'round', 'importance', 'neuralnet', 'factor', 'model.matrix', 'read.csv', 'randomForest', 'row.names', 'c', 'sum', 'data.frame', 'library']",[],"['shashank74-titanic-disaster-data-exploration-and-modelling', 'allanwbrooks-exploring-survival-on-the-titanic', 'tetyama-trial-titanic', 'bonesaw98616-exploring-survival-on-the-titanic', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'lisastuart-exploring-survival-on-the-titanic', 'krupan-exploring-survival-on-the-titanic', 'jww001-exploring-survival-on-the-titanicqw']","[0.29060781409915104, 0.28769888888446743, 0.2870140483076299, 0.28533799382964076, 0.2850219635874526, 0.28494014082555685, 0.28494014082555685, 0.28481887251060434, 0.28429945422047903, 0.28428271652440573]","{'c(""package:neuralnet"", ""package:dplyr"")': ['compute'], 'package:base': ['as.factor', 'c', 'data.frame', 'factor', 'is.na', 'library', 'mean', 'print', 'round', 'row.names', 'sapply', 'sum'], 'package:dplyr': ['count'], 'package:neuralnet': ['neuralnet'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['model.matrix'], 'package:utils': ['read.csv']}","{""c(""package:neuralnet"", ""package:dplyr"")"": [""compute""], ""package:base"": [""as.factor"", ""c"", ""data.frame"", ""factor"", ""is.na"", ""library"", ""mean"", ""print"", ""round"", ""row.names"", ""sapply"", ""sum""], ""package:dplyr"": [""count""], ""package:neuralnet"": [""neuralnet""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""model.matrix""], ""package:utils"": [""read.csv""]}",cpackageneuralnet packagedplyr compute packagebase asfactor c dataframe factor isna library mean print round rownames sapply sum packagedplyr count packageneuralnet neuralnet packagerandomForest importance randomForest packagestats modelmatrix packageutils readcsv,"library(dplyr)
library(neuralnet)
library(randomForest)
full <- read.csv(""../input/train.csv"", stringsAsFactors = F)
full2 <- read.csv(""../input/test.csv"", stringsAsFactors = F)
sapply(full, function(x) sum(is.na(x)))
sapply(full2, function(x) sum(is.na(x)))
variables <- c(""Survived"", ""Pclass"", ""Sex"", ""Age"", ""Embarked"", ""Fare"", ""Parch"", ""SibSp"")
full <- full[variables]
variables2 <- c(""Pclass"", ""Sex"", ""Age"", ""Embarked"", ""Fare"", ""Parch"", ""SibSp"")
full2 <- full2[variables2]
sapply(full, function(x) sum(is.na(x)))
sapply(full2, function(x) sum(is.na(x)))
full$Age[is.na(full$Age)] <- mean(full$Age, na.rm = T)
full$Fare[is.na(full$Fare)] <- mean(full$Fare, na.rm = T)
full2$Age[is.na(full2$Age)] <- mean(full2$Age, na.rm = T)
full2$Fare[is.na(full2$Fare)] <- mean(full2$Fare, na.rm = T)
count(full, Embarked)
count(full2, Embarked)
full$Embarked[is.na(full$Embarked)] <- ""S""
full2$Embarked[is.na(full2$Embarked)] <- ""S""
sapply(full, function(x) sum(is.na(x)))
sapply(full2, function(x) sum(is.na(x)))
full$Embarked <- as.factor(full$Embarked)
full$Sex <- as.factor(full$Sex)
full2$Embarked <- as.factor(full2$Embarked)
full2$Sex <- as.factor(full2$Sex)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + Embarked + Fare + Parch + SibSp, data = full)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
chosen_variables <- c(""Survived"", ""Pclass"", ""Sex"", ""Age"", ""Fare"", ""SibSp"")
full_prepped <- full[chosen_variables]
chosen_variables2 <- c(""Pclass"", ""Sex"", ""Age"", ""Fare"", ""SibSp"")
full_prepped2 <- full2[chosen_variables2]
train <- full_prepped[1:800, ]
test <- full_prepped[801:891, ]
m <- model.matrix(~Survived + Pclass + Sex + Age + Fare + SibSp, data = full_prepped)
nn <- neuralnet(Survived ~ Pclass + Sexmale + Age + Fare + SibSp, data = m, hidden = 2, threshold = 0.01, linear.output = F)
m1 <- model.matrix(~+Pclass + Sex + Age + Fare + SibSp, data = full_prepped2)
res <- neuralnet::compute(nn, m1[, c(""Pclass"", ""Sexmale"", ""Age"", ""Fare"", ""SibSp"")])
pred_train = round(res$net.result)
print(pred_train)",1,1,0,0,0,0,0,0,0,0,0,0,0,0
101,johnlam-titanic-dataset-and-learning-decision-trees,0.758,"['filter', 'data.frame', 'dim', 'is.na', 'library', 'summary', 'which', 'train', 'trainControl', 'bind_rows', 'summarise', 'plot', 'fancyRpartPlot', 'rpart', 'median', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['dplyr', 'rpart', 'rattle', 'rpart.plot', 'RColorBrewer', 'caret', 'base']",3.4213440418243395,"['summarise', 'median', 'which', 'is.na', 'rpart', 'summary', 'filter', 'str', 'dim', 'read.csv', 'train', 'fancyRpartPlot', 'plot', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'head', 'library', 'trainControl']",[],"['xxxmatxxx-titanic-getting-started-with-randomforest', 'venkatko-titanic-survival1', 'researchbigd-titanic-forkedfrommeganscript', 'tetyama-trial-titanic', 'abedben-exploring-survival-on-the-titanic', 'oldflag-exploring-survival-on-the-titanic-inr-frommegan', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'hemingwei-titanic-r-solution-from-megan-risdal', 'kyanyoga-exploring-survival-on-the-titanic']","[0.530062782283105, 0.5235332212097854, 0.5228133948844627, 0.5175307950074763, 0.5166292266855488, 0.5149587172571104, 0.514811060292107, 0.514811060292107, 0.5144836891398437, 0.5130376231607806]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['data.frame', 'dim', 'is.na', 'library', 'summary', 'which'], 'package:caret': ['train', 'trainControl'], 'package:dplyr': ['bind_rows', 'summarise'], 'package:graphics': ['plot'], 'package:rattle': ['fancyRpartPlot'], 'package:rpart': ['rpart'], 'package:stats': ['median', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""data.frame"", ""dim"", ""is.na"", ""library"", ""summary"", ""which""], ""package:caret"": [""train"", ""trainControl""], ""package:dplyr"": [""bind_rows"", ""summarise""], ""package:graphics"": [""plot""], ""package:rattle"": [""fancyRpartPlot""], ""package:rpart"": [""rpart""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase dataframe dim isna library summary which packagecaret train trainControl packagedplyr bindrows summarise packagegraphics plot packagerattle fancyRpartPlot packagerpart rpart packagestats median predict packageutils head readcsv str writecsv,"library(dplyr)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
dim(train)
dim(test)
full <- bind_rows(train, test)
dim(full)
head(full)
str(train)
head(train)
str(test)
head(test)
library(rpart)
decision_tree <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = ""class"")
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(decision_tree)
prediction_1 <- predict(decision_tree, newdata = test, type = ""class"")
solution_1 <- data.frame(PassengerId = test$PassengerId, Survived = prediction_1)
write.csv(solution_1, file = ""my_solution.csv"", row.names = FALSE)
summary(full)
id <- full[which(is.na(full$Fare)), 1]
full[id, ]
median_fare <- full %>% filter(Pclass == ""3"" & Embarked == ""S"") %>% summarise(missing_fare = median(Fare, na.rm = TRUE))
median_fare
full$Embarked[full$Embarked == """"] <- NA
full[which(is.na(full$Embarked)), 1]
full$Cabin[full$Cabin == """"] <- NA
full[which(is.na(full$Cabin)), 1]
library(caret)
controlParameters <- trainControl(method = ""cv"", number = 10, repeats = 10, verboseIter = TRUE)
decision_tree_model <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = full, trControl = controlParameters, method = ""rpart"", na.action = na.omit)
train_1 <- data.frame(train$Pclass, train$Sex, train$Age, train$SibSp, train$Parch, train$Fare, train$Embarked)
head(train_1)
plot(train)
summary(solution_1)",0,0,1,0,0,0,0,1,0,1,0,0,0,0
102,rkumar3147-exploring-survival-on-the-titanic1,0.502,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'all', 'any', 'as.character', 'c', 'cat', 'cbind', 'character', 'data.frame', 'factor', 'is.element', 'is.na', 'lapply', 'length', 'library', 'list', 'mean', 'nrow', 'rbind', 'Reduce', 'rep', 'return', 'round', 'sample', 'sapply', 'set.seed', 'strsplit', 'table', 'unique', 'which', 'svm', 'tune', 'tune.control', 'aes', 'geom_line', 'geom_point', 'ggplot', 'labs', 'melt', 'fitted', 'lm', 'poly', 'predict', 'read.csv', 'write.table']","['ggplot2', 'reshape2', 'e1071', 'base']",30.5755660533905,"['labs', 'nrow', 'list', 'mean', 'lapply', 'fitted', 'which', 'svm', 'cat', 'as.character', 'is.na', 'is.element', 'melt', 'poly', 'lm', 'round', 'sapply', 'rep', 'Reduce', 'set.seed', 'tune.control', 'factor', 'unique', 'character', 'length', 'read.csv', 'table', 'return', 'c', 'aes', 'all', 'any', 'rbind', 'sample', 'geom_point', 'predict', 'data.frame', 'strsplit', 'ggplot', 'write.table', 'user defined', 'library', 'cbind', 'tune', 'geom_line']",['vizcharlie-exploring-survival-on-the-titanic'],"['hertan-titanic-surviving-dataset-simple-expression', 'cganxs-is-62-the-right-titanic-model-threshold', 'samuelh-barebones-titanic-logistic-regression-test', 'vishaljindal0-titanic-r-code', 'djohnbar-the-titanic-using-knn', 'jaimisk-titanic-survival-logistic-regression', 'danr87946-titanic-practice', 'rennocks-titanicmodel', 'andrecn-random-forest-caret-model-prediction-titanic', 'bubblride-titanic-e1071-c-svc-fares-only']","[0.6175457553900362, 0.592745220964249, 0.5267277246860085, 0.5039922764933844, 0.49032113969192215, 0.48279948285284413, 0.4351883723512042, 0.34637795396909893, 0.3207591895780031, 0.29078061191887883]","{'character(0)': ['classify', 'extractFamily', 'extractTitle', 'test_statistics', 'trainAndCrossValidate'], 'package:base': ['all', 'any', 'as.character', 'c', 'cat', 'cbind', 'character', 'data.frame', 'factor', 'is.element', 'is.na', 'lapply', 'length', 'library', 'list', 'mean', 'nrow', 'rbind', 'Reduce', 'rep', 'return', 'round', 'sample', 'sapply', 'set.seed', 'strsplit', 'table', 'unique', 'which'], 'package:e1071': ['svm', 'tune', 'tune.control'], 'package:ggplot2': ['aes', 'geom_line', 'geom_point', 'ggplot', 'labs'], 'package:reshape2': ['melt'], 'package:stats': ['fitted', 'lm', 'poly', 'predict'], 'package:utils': ['read.csv', 'write.table']}","{""character(0)"": [""classify"", ""extractFamily"", ""extractTitle"", ""test_statistics"", ""trainAndCrossValidate""], ""package:base"": [""all"", ""any"", ""as.character"", ""c"", ""cat"", ""cbind"", ""character"", ""data.frame"", ""factor"", ""is.element"", ""is.na"", ""lapply"", ""length"", ""library"", ""list"", ""mean"", ""nrow"", ""rbind"", ""Reduce"", ""rep"", ""return"", ""round"", ""sample"", ""sapply"", ""set.seed"", ""strsplit"", ""table"", ""unique"", ""which""], ""package:e1071"": [""svm"", ""tune"", ""tune.control""], ""package:ggplot2"": [""aes"", ""geom_line"", ""geom_point"", ""ggplot"", ""labs""], ""package:reshape2"": [""melt""], ""package:stats"": [""fitted"", ""lm"", ""poly"", ""predict""], ""package:utils"": [""read.csv"", ""write.table""]}",character0 classify extractFamily extractTitle teststatistics trainAndCrossValidate packagebase all any ascharacter c cat cbind character dataframe factor iselement isna lapply length library list mean nrow rbind Reduce rep return round sample sapply setseed strsplit table unique which packagee1071 svm tune tunecontrol packageggplot2 aes geomline geompoint ggplot labs packagereshape2 melt packagestats fitted lm poly predict packageutils readcsv writetable,"library(ggplot2)
library(reshape2)
library(e1071)
df <- read.csv(""../input/train.csv"")
df.test <- read.csv(""../input/test.csv"")
df.test$Survived <- NA
df <- rbind(df, df.test)
df$Fare[is.na(df$Fare)] <- mean(df$Fare, na.rm = TRUE)
df$Embarked[df$Embarked == """"] <- ""C""
extractTitle <- function(Names) {
    Title <- sapply(Names, function(x) strsplit(as.character(x), ""\\.|, "")[[1]][[2]])
    Title[is.element(Title, c(""Capt"", ""Col"", ""Don"", ""Dr"", ""Jonkheer"", ""Major"", ""Rev"", ""Sir""))] <- ""Mr""
    Title[is.element(Title, c(""Lady"", ""Mme"", ""Ms"", ""Dona"", ""the Countess""))] <- ""Mrs""
    Title[is.element(Title, c(""Mlle""))] <- ""Miss""
    Title <- factor(Title, levels = c(""Mr"", ""Master"", ""Mrs"", ""Miss""))
}
df$Title <- extractTitle(df$Name)
extractFamily <- function(Names) {
    Title <- sapply(Names, function(x) strsplit(as.character(x), ""\\.|, "")[[1]][[1]])
}
df$Family <- extractFamily(df$Name)
extractSurvivingRelatives <- function(x) {
    classify <- function(p) {
        if (any(is.na(p$Survived))) {
            class <- ""Unknown""
        }
        else if (all(p$Survived == 0)) {
            class <- ""None""
        }
        else if (any(p$Survived == 1)) {
            class <- ""Some""
        }
        class
    }
    if (nrow(x) == 1) {
        RelatedSurvivors <- ""NoRelatedFamily""
    }
    else {
        RelatedSurvivors <- character(nrow(x))
        for (i in 1:nrow(x)) {
            RelatedSurvivors[i] <- classify(x[-i, ])
        }
    }
    x$RelatedSurvivors <- factor(RelatedSurvivors, levels = c(""NoRelatedFamily"", ""Unknown"", ""None"", ""Some""))
    x
}
CFG <- lapply(unique(df$Family), function(x, D) df[df$Family == x, ], D = df)
CFG.rs <- lapply(CFG, extractSurvivingRelatives)
CFG.rs <- Reduce(function(x, x0) rbind(x, x0), CFG.rs[-1], CFG.rs[1][[1]])
df <- CFG.rs
df$Pclass <- factor(df$Pclass, levels = 1:3)
df$Embarked <- factor(df$Embarked)
df.withoutAge <- df[is.na(df$Age), ]
df.withAge <- df[!is.na(df$Age), ]
age.model <- lm(Age ~ Sex + Pclass + SibSp + Parch + Fare + Title, data = df.withAge)
ggplot(data = cbind(df.withAge, PredictedAge = fitted(age.model))) + geom_point(aes(x = Age, y = PredictedAge, colour = Title)) + labs(title = ""Age imputation"", x = ""Known age from data"", y = ""Predicted age"")
df.withoutAge$Age <- predict(age.model, newdata = df.withoutAge)
df <- rbind(df.withAge, df.withoutAge)
df.train <- df[!is.na(df$Survived), ]
df.test <- df[is.na(df$Survived), ]
df.train$Survived <- factor(df.train$Survived)
df.test$Survived <- NULL
F <- Survived ~ Sex + Pclass + poly(Age, 3) + SibSp + Parch + Fare + Title + Embarked + RelatedSurvivors
obj <- tune(svm, F, data = df.train, ranges = list(gamma = 2^(-8:-1), cost = 2^(-2:9)), tunecontrol = tune.control(sampling = ""cross"", cross = 5))
gamma.opt <- obj$best.parameters$gamma
cost.opt <- obj$best.parameters$cost
trainAndCrossValidate <- function(df.train, df.cv) {
    model <- svm(F, gamma = gamma.opt, cost = cost.opt, data = df.train)
    predictions <- predict(model, newdata = df.train)
    accuracy.train <- length(which(df.train$Survived == predictions))/nrow(df.train)
    predictions <- predict(model, newdata = df.cv)
    accuracy.cv <- length(which(df.cv$Survived == predictions))/nrow(df.cv)
    return(list(accuracy.train = accuracy.train, accuracy.cv = accuracy.cv))
}
set.seed(19670122)
f <- sample(1:nrow(df.train), 200)
df.cv <- df.train[f, ]
df.train <- df.train[-f, ]
data.fraction <- c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1)
N <- length(data.fraction)
learningCurve <- data.frame(data.fraction, accuracy.train = rep(0, N), accuracy.cv = rep(0, N))
for (i in 1:N) {
    cat(""Training on "", data.fraction[i] * 100, ""% of data\n"", sep = """")
    results <- trainAndCrossValidate(df.train[1:round(nrow(df.train) * data.fraction[i]), ], df.cv)
    cat(""   Accuracy (Training): "", results$accuracy.train * 100, ""%\n"", sep = """")
    cat(""   Accuracy (cv):       "", results$accuracy.cv * 100, ""%\n"", sep = """")
    learningCurve$accuracy.train[i] <- results$accuracy.train
    learningCurve$accuracy.cv[i] <- results$accuracy.cv
}
lc <- melt(learningCurve, id.vars = ""data.fraction"")
ggplot(data = lc) + geom_line(aes(x = data.fraction, y = value, group = variable, colour = variable)) + labs(y = ""Accuracy"", x = ""Fraction of training set used"", title = ""Learning Curves"")
test_statistics <- function(labels, predictions) {
    confusion_matrix <- table(data.frame(predicted = factor(predictions, levels = c(1, 0)), actual = factor(labels, levels = c(1, 0))))
    tp <- confusion_matrix[1, 1]
    fp <- confusion_matrix[1, 2]
    fn <- confusion_matrix[2, 1]
    tn <- confusion_matrix[2, 2]
    accuracy <- (tp + tn)/(tp + fp + fn + tn)
    precision <- tp/(tp + fp)
    recall <- tp/(tp + fn)
    F <- 2 * precision * recall/(precision + recall)
    list(confusion_matrix = confusion_matrix, accuracy = accuracy, precision = precision, recall = recall, F1 = F)
}
model <- svm(F, gamma = gamma.opt, cost = cost.opt, data = df.train)
predictions <- predict(model, newdata = df.train)
stats <- test_statistics(df.train$Survived, predictions)
stats$confusion_matrix
model <- svm(F, gamma = gamma.opt, cost = cost.opt, data = df.cv)
predictions <- predict(model, newdata = df.cv)
stats <- test_statistics(df.cv$Survived, predictions)
stats$confusion_matrix
df$Survived <- factor(df$Survived)
model <- svm(F, data = df[!is.na(df$Survived), ], gamma = gamma.opt, cost = cost.opt)
predictions <- predict(model, newdata = df.test)
write.table(data.frame(PassengerId = df.test$PassengerId, Survived = predictions), file = ""test_predictions.csv"", row.names = FALSE, sep = "","")",0,0,0,0,0,0,0,0,0,0,0,1,0,0
104,lich070192-titanic-test,0.763,"['as.factor', 'c', 'colnames', 'data.frame', 'factor', 'is.na', 'lapply', 'library', 'names', 'paste0', 'round', 'row.names', 'set.seed', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'geom_bar', 'geom_text', 'ggplot', 'labs', 'theme_few', 'hist', 'legend', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'median', 'predict', 'reorder', 'head', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",3.1647961139678995,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'dense_rank', 'is.na', 'names', 'theme_few', 'as.factor', 'round', 'mice', 'importance', 'hist', 'str', 'desc', 'set.seed', 'factor', 'colnames', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'row.names', 'c', 'aes', 'mutate', 'reorder', 'sum', 'plot', 'legend', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'ggplot', 'head', 'library']",[],"['tetyama-trial-titanic', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'hemingwei-titanic-r-solution-from-megan-risdal', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'vikramatjob-exploring-survival-on-the-titanic-var1', 'bonesaw98616-exploring-survival-on-the-titanic', 'oreddo-exploring-survival-on-the-titanic', 'mhamano-titanic-r-script', 'atuljjoshi05-titanic-random-forest']","[0.7896153860344741, 0.7855362523628246, 0.7855362523628246, 0.7852801559877347, 0.785108666799601, 0.77797991280232, 0.7768838544233526, 0.7750033135392567, 0.7737058676715297, 0.7735891273409009]","{'package:base': ['as.factor', 'c', 'colnames', 'data.frame', 'factor', 'is.na', 'lapply', 'library', 'names', 'paste0', 'round', 'row.names', 'set.seed', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'geom_bar', 'geom_text', 'ggplot', 'labs'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""package:base"": [""as.factor"", ""c"", ""colnames"", ""data.frame"", ""factor"", ""is.na"", ""lapply"", ""library"", ""names"", ""paste0"", ""round"", ""row.names"", ""set.seed"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""geom_bar"", ""geom_text"", ""ggplot"", ""labs""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",packagebase asfactor c colnames dataframe factor isna lapply library names paste0 round rownames setseed sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip geombar geomtext ggplot labs packageggthemes themefew packagegraphics hist legend par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagestats median predict reorder packageutils head readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(train)
str(test)
table(train$Embarked)
full$Embarked[c(62, 830)] <- ""C""
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
head(mice_output)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"")
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"")
full$Age <- mice_output$Age
sum(is.na(full$Age))
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
head(rf_model)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
106,overdose-titanic-basic-modelling,0.758,"['data.frame', 'library', 'summary', 'system', 'table', 'rpart', 'predict', 'read.csv', 'write.csv']","['ggplot2', 'readr', 'rpart', 'base']",0.862740993499756,"['predict', 'write.csv', 'data.frame', 'read.csv', 'table', 'summary', 'rpart', 'library', 'system']",[],"['overdose-titanic-basic-modelling', 'scout16-titanic-disaster-in-r', 'tsfitz-titanic', 'klashgari-titanic', 'lagprophet-titanic', 'sawajid-titanic-test', 'stevencahill-titanic-machine-learning-from-disaster', 'jerlinraj-titanic-machine-learning-from-disaster', 'jacekpardyak-mytitanicscript', 'sudheer464-prediction-1-on-titanic-dataset']","[0.9999999999999998, 0.3387436025700753, 0.3178970727553316, 0.29639132320768774, 0.2781683918168526, 0.27740942620313014, 0.27495752685144675, 0.2749129971738656, 0.27022507666184037, 0.2643183748291722]","{'package:base': ['data.frame', 'library', 'summary', 'system', 'table'], 'package:rpart': ['rpart'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""data.frame"", ""library"", ""summary"", ""system"", ""table""], ""package:rpart"": [""rpart""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase dataframe library summary system table packagerpart rpart packagestats predict packageutils readcsv writecsv,"library(ggplot2)
library(readr)
system(""ls ../input"")
train = read.csv(""../input/train.csv"", header = T, sep = "","")
test = read.csv(""../input/test.csv"", header = T, sep = "","")
summary(train)
table(train$Survived)
549/(549 + 342)
library(rpart)
mod = rpart(Survived ~ Pclass + Sex + Age + SibSp + Fare + Embarked, data = train, method = ""class"")
summary(mod)
predictions = predict(mod, newdata = test, type = ""class"")
submission <- data.frame(PassengerID = test$PassengerId, Survived = predictions)
write.csv(submission, file = ""submission_tree_basic.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,1,0,0,0,0
107,albyedw-titanic-competition,0.7340000000000001,"['as.character', 'as.factor', 'as.integer', 'c', 'class', 'data.frame', 'expand.grid', 'factor', 'floor', 'is.na', 'length', 'levels', 'library', 'list.files', 'nrow', 'print', 'sample', 'set.seed', 'substr', 'train', 'trainControl', 'aes', 'geom_boxplot', 'ggplot', 'plot', 'barchart', 'randomForest', 'read_csv', 'median', 'predict', 'head', 'write.csv']","['tidyverse', 'readr', 'ggplot2', 'lattice', 'randomForest', 'caret', 'base']",1.30928958654404,"['nrow', 'median', 'as.character', 'is.na', 'levels', 'geom_boxplot', 'print', 'class', 'expand.grid', 'as.factor', 'set.seed', 'factor', 'as.integer', 'length', 'barchart', 'randomForest', 'read_csv', 'train', 'c', 'aes', 'sample', 'plot', 'predict', 'write.csv', 'list.files', 'data.frame', 'ggplot', 'head', 'substr', 'library', 'trainControl', 'floor']",[],"['deltaforce126-titanic-randomforest', 'peggy88-titanic-data-eda-by-peggy', 'cdeotte-titanic-deep-net-0-82296', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'ccheng2016-titanic-survival', 'analyticsdojo-titanic-baseline-models-analyticsdojo-r', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic']","[0.19850593325301738, 0.18035394508636599, 0.14990149603126252, 0.10524716359693634, 0.10263628359042103, 0.1002312851572618, 0.0960434765258995, 0.08711217813145618, 0.08711217813145618, 0.08680435756966298]","{'package:base': ['as.character', 'as.factor', 'as.integer', 'c', 'class', 'data.frame', 'expand.grid', 'factor', 'floor', 'is.na', 'length', 'levels', 'library', 'list.files', 'nrow', 'print', 'sample', 'set.seed', 'substr'], 'package:caret': ['train', 'trainControl'], 'package:ggplot2': ['aes', 'geom_boxplot', 'ggplot'], 'package:graphics': ['plot'], 'package:lattice': ['barchart'], 'package:randomForest': ['randomForest'], 'package:readr': ['read_csv'], 'package:stats': ['median', 'predict'], 'package:utils': ['head', 'write.csv']}","{""package:base"": [""as.character"", ""as.factor"", ""as.integer"", ""c"", ""class"", ""data.frame"", ""expand.grid"", ""factor"", ""floor"", ""is.na"", ""length"", ""levels"", ""library"", ""list.files"", ""nrow"", ""print"", ""sample"", ""set.seed"", ""substr""], ""package:caret"": [""train"", ""trainControl""], ""package:ggplot2"": [""aes"", ""geom_boxplot"", ""ggplot""], ""package:graphics"": [""plot""], ""package:lattice"": [""barchart""], ""package:randomForest"": [""randomForest""], ""package:readr"": [""read_csv""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""head"", ""write.csv""]}",packagebase ascharacter asfactor asinteger c class dataframe expandgrid factor floor isna length levels library listfiles nrow print sample setseed substr packagecaret train trainControl packageggplot2 aes geomboxplot ggplot packagegraphics plot packagelattice barchart packagerandomForest randomForest packagereadr readcsv packagestats median predict packageutils head writecsv,"library(tidyverse)
list.files(path = ""../input"")
library(readr)
titdata = read_csv(""../input/train.csv"")
nrow(titdata)
target = factor(titdata$Survived, labels = c(""died"", ""survived""))
titdata$Survived = target
titdata$Age[is.na(titdata$Age)] = median(titdata$Age, na.rm = TRUE)
cab = as.character(titdata$Cabin)
empty = c(1:length(cab))
for (i in 1:length(cab)) {
    if (is.na(cab[i]) == ""TRUE"") {
        empty[i] = ""Cabin Unknown""
    }
    else {
        empty[i] = substr(cab[i], 1, 1)
    }
}
empty[1:10]
titdata$cabinfloor = as.factor(empty)
class(titdata$cabinfloor)
levels(titdata$cabinfloor)
titdata$Sex = as.factor(titdata$Sex)
titdata$Embarked = as.factor(titdata$Embarked)
titdata = titdata[-c(62, 830), ]
nrow(titdata)
library(ggplot2)
library(lattice)
barchart(titdata$Sex, titdata$Survived, xlab = ""Number Of Survivers"")
barchart(titdata$cabinfloor, titdata$Survived, xlab = ""Number Of Survivers"")
ggplot(aes(Survived, Parch), data = titdata) + geom_boxplot()
ggplot(aes(Survived, Age), data = titdata) + geom_boxplot()
ggplot(aes(Survived, Fare), data = titdata) + geom_boxplot()
ggplot(aes(Survived, SibSp), data = titdata) + geom_boxplot()
set.seed(333)
sampsize = floor(0.75 * nrow(titdata))
sample = sample(1:nrow(titdata), size = sampsize)
traintit = titdata[sample, ]
testtit = titdata[-sample, ]
library(randomForest)
mod = randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + cabinfloor + Embarked, data = traintit, ntree = 1000, mtry = 3, importance = TRUE)
mod
mod$importance
library(caret)
control = trainControl(method = ""repeatedcv"", number = 10, repeats = 3, search = ""grid"")
set.seed(222)
tunegrid = expand.grid(.mtry = c(1:9))
rf_gridsearch = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + cabinfloor, data = traintit, method = ""rf"", metric = ""Accuracy"", tuneGrid = tunegrid, trControl = control)
print(rf_gridsearch)
plot(rf_gridsearch)
newmod = randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + cabinfloor, data = traintit, ntree = 1000, mtry = 4, importance = TRUE)
test = predict(newmod, testtit)
actual = testtit$Survived
res = test == actual
x = res[res == ""TRUE""]
accuracy = length(x)/length(res)
accuracy
testdata = read_csv(""../input/test.csv"")
head(testdata)
testdata$Age[is.na(testdata$Age)] = median(testdata$Age, na.rm = TRUE)
testdata$Sex = as.factor(testdata$Sex)
testdata$Embarked = as.factor(testdata$Embarked)
testdata$Fare[is.na(testdata$Fare)] = median(testdata$Fare, na.rm = TRUE)
cab2 = as.character(testdata$Cabin)
empty2 = c(1:length(cab2))
for (i in 1:length(cab2)) {
    if (is.na(cab2[i]) == ""TRUE"") {
        empty2[i] = ""Cabin Unknown""
    }
    else {
        empty2[i] = substr(cab2[i], 1, 1)
    }
}
empty2[1:10]
testdata$cabinfloor = as.factor(empty2)
levels(testdata$Embarked) = levels(titdata$Embarked)
levels(testdata$Sex) = levels(titdata$Sex)
levels(testdata$cabinfloor) = levels(titdata$cabinfloor)
prediction = predict(newmod, testdata)
submission = data.frame(PassengerId = testdata$PassengerId, Survived = prediction)
submission
submission$Survived = as.integer(submission$Survived)
submission
for (i in 1:length(submission$Survived)) {
    if (submission$Survived[i] == 1) {
        submission$Survived[i] = 0
    }
    else {
        submission$Survived[i] = 1
    }
}
submission
titfile = write.csv(submission, ""titanicsubmission.csv"")",1,0,1,0,0,0,0,1,0,0,0,0,0,0
109,vasuls-predictive-analysis-of-survival-rate-on-titanic,0.758,"['as.integer', 'c', 'cut', 'data.frame', 'factor', 'is.na', 'length', 'library', 'mean', 'names', 'nchar', 'options', 'rbind', 'rep', 'round', 'sample', 'set.seed', 'strsplit', 'sum', 'table', 'tapply', 'svm', 'aes', 'geom_density', 'geom_histogram', 'geom_vline', 'ggplot', 'barplot', 'hist', 'par', 'randomForest', 'rpart', 'glm', 'median', 'na.omit', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['dplyr', 'ggplot2', 'ggthemes', 'randomForest', 'rpart', 'e1071', 'base']",2.74064993858337,"['mean', 'median', 'nchar', 'svm', 'is.na', 'glm', 'names', 'options', 'na.omit', 'rpart', 'round', 'rep', 'geom_histogram', 'hist', 'str', 'set.seed', 'factor', 'as.integer', 'cut', 'length', 'read.csv', 'table', 'par', 'randomForest', 'c', 'aes', 'rbind', 'sample', 'geom_vline', 'sum', 'predict', 'write.csv', 'data.frame', 'strsplit', 'tapply', 'ggplot', 'geom_density', 'head', 'library', 'barplot']",['beiqiwang-predictive-analysis-of-survival-rate-on-titanic'],"['rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic', 'kapillehar-titanic-rf-prediction-0-81818', 'vikasht34-titanic-rf-prediction-0-81818', 'ashutoshds-titanic-rf-prediction-0-81818', 'shashank74-titanic-disaster-data-exploration-and-modelling', 'delasupreme-titanic-data-analysis-rf-prediction-0-81818', 'pranaytiwari-titanic-data-analysis-rf-prediction-0-81818']","[0.9971127351624687, 0.9971127351624687, 0.8551670503730721, 0.8551670503730721, 0.5123081968682622, 0.5123081968682622, 0.5034710288184241, 0.45424651805370503, 0.4409432555801779, 0.4409432555801779]","{'package:base': ['as.integer', 'c', 'cut', 'data.frame', 'factor', 'is.na', 'length', 'library', 'mean', 'names', 'nchar', 'options', 'rbind', 'rep', 'round', 'sample', 'set.seed', 'strsplit', 'sum', 'table', 'tapply'], 'package:e1071': ['svm'], 'package:ggplot2': ['aes', 'geom_density', 'geom_histogram', 'geom_vline', 'ggplot'], 'package:graphics': ['barplot', 'hist', 'par'], 'package:randomForest': ['randomForest'], 'package:rpart': ['rpart'], 'package:stats': ['glm', 'median', 'na.omit', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""package:base"": [""as.integer"", ""c"", ""cut"", ""data.frame"", ""factor"", ""is.na"", ""length"", ""library"", ""mean"", ""names"", ""nchar"", ""options"", ""rbind"", ""rep"", ""round"", ""sample"", ""set.seed"", ""strsplit"", ""sum"", ""table"", ""tapply""], ""package:e1071"": [""svm""], ""package:ggplot2"": [""aes"", ""geom_density"", ""geom_histogram"", ""geom_vline"", ""ggplot""], ""package:graphics"": [""barplot"", ""hist"", ""par""], ""package:randomForest"": [""randomForest""], ""package:rpart"": [""rpart""], ""package:stats"": [""glm"", ""median"", ""na.omit"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",packagebase asinteger c cut dataframe factor isna length library mean names nchar options rbind rep round sample setseed strsplit sum table tapply packagee1071 svm packageggplot2 aes geomdensity geomhistogram geomvline ggplot packagegraphics barplot hist par packagerandomForest randomForest packagerpart rpart packagestats glm median naomit predict packageutils head readcsv str writecsv,"library(""dplyr"")
library(""ggplot2"")
library(""ggthemes"")
options(warn = -1)
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
test$Survived <- NA
full <- rbind(train, test)
head(full)
str(full)
age <- full$Age
n = length(age)
set.seed(123)
for (i in 1:n) {
    if (is.na(age[i])) {
        age[i] = sample(na.omit(full$Age), 1)
    }
}
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Before Replacement"", col = ""lightblue"", ylim = c(0, 0.04), xlab = ""age"")
hist(age, freq = F, main = ""After Replacement"", col = ""darkblue"", ylim = c(0, 0.04))
cabin <- full$Cabin
n = length(cabin)
for (i in 1:n) {
    if (nchar(cabin[i]) == 0) {
        cabin[i] = 0
    }
    else {
        s = strsplit(cabin[i], "" "")
        cabin[i] = length(s[[1]])
    }
}
table(cabin)
full$PassengerId[is.na(full$Fare)]
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1)
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
embarked <- full$Embarked
n = length(embarked)
for (i in 1:n) {
    if (embarked[i] != ""S"" && embarked[i] != ""C"" && embarked[i] != ""Q"") {
        embarked[i] = ""S""
    }
}
table(embarked)
d <- data.frame(Age = age[1:891], Survived = train$Survived)
ggplot(d, aes(Age, fill = factor(Survived))) + geom_histogram()
cuts <- cut(d$Age, hist(d$Age, 10, plot = F)$breaks)
rate <- tapply(d$Survived, cuts, mean)
d2 <- data.frame(age = names(rate), rate)
barplot(d2$rate, xlab = ""age"", ylab = ""survival rate"")
ggplot(train, aes(Sex, fill = factor(Survived))) + geom_histogram(stat = ""count"")
tapply(train$Survived, train$Sex, mean)
n = length(full$Survived)
title = rep(NA, n)
for (i in 1:n) {
    lastname = strsplit(full$Name[i], "", "")[[1]][2]
    title[i] = strsplit(lastname, "". "")[[1]][1]
}
d <- data.frame(title = title[1:891], Survived = train$Survived)
ggplot(d, aes(title, fill = factor(Survived))) + geom_histogram(stat = ""count"")
table(title)
tapply(d$Survived, d$title, mean)
title[title != ""Mr"" & title != ""Miss"" & title != ""Mrs"" & title != ""Master""] <- ""Rare""
table(title)
ggplot(train, aes(Pclass, fill = factor(Survived))) + geom_histogram(stat = ""count"")
tapply(train$Survived, train$Pclass, mean)
ggplot(train, aes(Parch, fill = factor(Survived))) + geom_histogram(stat = ""count"")
ggplot(train, aes(SibSp, fill = factor(Survived))) + geom_histogram(stat = ""count"")
family <- full$SibSp + full$Parch
d <- data.frame(family = family[1:891], Survived = train$Survived)
ggplot(d, aes(family, fill = factor(Survived))) + geom_histogram(stat = ""count"")
tapply(d$Survived, d$family, mean)
d <- data.frame(Cabin = cabin[1:891], Survived = train$Survived)
ggplot(d, aes(Cabin, fill = factor(Survived))) + geom_histogram(stat = ""count"")
tapply(d$Survived, d$Cabin, mean)
ggplot(train, aes(Fare, fill = factor(Survived))) + geom_histogram()
cuts <- cut(train$Fare, hist(train$Fare, 10, plot = F)$breaks)
rate <- tapply(train$Survived, cuts, mean)
d <- data.frame(fare = names(rate), rate)
barplot(d$rate, xlab = ""fare"", ylab = ""survival rate"")
d <- data.frame(Embarked = embarked[1:891], Survived = train$Survived)
ggplot(d, aes(Embarked, fill = factor(Survived))) + geom_histogram(stat = ""count"")
tapply(train$Survived, train$Embarked, mean)
f.survived = train$Survived
f.age = age[1:891]
t.age = age[892:1309]
f.fare = full$Fare[1:891]
t.fare = full$Fare[892:1309]
f.cabin = cabin[1:891]
t.cabin = cabin[892:1309]
f.title = title[1:891]
t.title = title[892:1309]
family <- full$SibSp + full$Parch
f.family = family[1:891]
t.family = family[892:1309]
f.pclass = train$Pclass
t.pclass = test$Pclass
f.sex = train$Sex
t.sex = test$Sex
f.embarked = embarked[1:891]
t.embarked = embarked[892:1309]
new_train = data.frame(survived = f.survived, age = f.age, fare = f.fare, sex = f.sex, embarked = f.embarked, family = f.family, title = f.title, cabin = f.cabin, pclass = f.pclass)
fit_logit <- glm(factor(survived) ~ age + fare + sex + embarked + family + title + cabin + pclass, data = new_train, family = binomial)
ans_logit = rep(NA, 891)
for (i in 1:891) {
    ans_logit[i] = round(fit_logit$fitted.values[[i]], 0)
}
mean(ans_logit == train$Survived)
table(ans_logit)
library(""randomForest"")
set.seed(123)
fit_rf <- randomForest(factor(survived) ~ age + fare + sex + embarked + family + title + cabin + pclass, data = new_train)
rf.fitted = predict(fit_rf)
ans_rf = rep(NA, 891)
for (i in 1:891) {
    ans_rf[i] = as.integer(rf.fitted[[i]]) - 1
}
mean(ans_rf == train$Survived)
table(ans_rf)
library(rpart)
fit_dt <- rpart(factor(survived) ~ age + fare + sex + embarked + family + title + cabin + pclass, data = new_train)
dt.fitted = predict(fit_dt)
ans_dt = rep(NA, 891)
for (i in 1:891) {
    if (dt.fitted[i, 1] >= dt.fitted[i, 2]) {
        ans_dt[i] = 0
    }
    else {
        ans_dt[i] = 1
    }
}
mean(ans_dt == train$Survived)
table(ans_dt)
library(e1071)
fit_svm <- svm(factor(survived) ~ age + fare + sex + embarked + family + title + cabin + pclass, data = new_train)
svm.fitted = predict(fit_svm)
ans_svm = rep(NA, 891)
for (i in 1:891) {
    ans_svm[i] = as.integer(svm.fitted[[i]]) - 1
}
mean(ans_svm == train$Survived)
table(ans_svm)
a = sum(ans_logit == 1 & f.survived == 1)
b = sum(ans_logit == 1 & f.survived == 0)
c = sum(ans_logit == 0 & f.survived == 1)
d = sum(ans_logit == 0 & f.survived == 0)
data.frame(a, b, c, d)
a = sum(ans_rf == 1 & f.survived == 1)
b = sum(ans_rf == 1 & f.survived == 0)
c = sum(ans_rf == 0 & f.survived == 1)
d = sum(ans_rf == 0 & f.survived == 0)
data.frame(a, b, c, d)
a = sum(ans_dt == 1 & f.survived == 1)
b = sum(ans_dt == 1 & f.survived == 0)
c = sum(ans_dt == 0 & f.survived == 1)
d = sum(ans_dt == 0 & f.survived == 0)
data.frame(a, b, c, d)
a = sum(ans_svm == 1 & f.survived == 1)
b = sum(ans_svm == 1 & f.survived == 0)
c = sum(ans_svm == 0 & f.survived == 1)
d = sum(ans_svm == 0 & f.survived == 0)
data.frame(a, b, c, d)
test_data_set <- data.frame(age = t.age, fare = t.fare, sex = t.sex, embarked = t.embarked, family = t.family, title = t.title, cabin = t.cabin, pclass = t.pclass)
svm_predict = predict(fit_svm, newdata = test_data_set)
ans_svm_predict = rep(NA, 418)
for (i in 1:418) {
    ans_svm_predict[i] = as.integer(svm_predict[[i]]) - 1
}
table(ans_svm_predict)
d <- data.frame(PassengerId = test$PassengerId, Survived = ans_svm_predict)
write.csv(d, file = ""TitanicResult.csv"", row.names = F)",1,0,0,0,0,0,0,0,0,1,0,1,0,0
110,goblin-titanic-test,0.758,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.factor', 'data.frame', 'is.na', 'library', 'regexpr', 'return', 'rpart', 'median', 'predict', 'read.csv', 'write.csv']","['rpart', 'base']",0.693688869476318,"['predict', 'write.csv', 'regexpr', 'median', 'data.frame', 'read.csv', 'rpart', 'as.factor', 'user defined', 'library', 'return', 'is.na']",[],"['prabhulingayya-titanic-prediction-using-logistic-regression', 'cnusapbo-titanic-r-code', 'joelweiss-titanic-data-r', 'jacekpardyak-mytitanicscript', 'tsfitz-titanic', 'zahraatashgahy-r-titanic-1', 'garciparedes-titanic-getting-started', 'alma123-titanic', 'fpsawicki-eda-and-prediction-on-titanic-dataset', 'turntrout-titanic-data-exploration']","[0.4979576347946317, 0.49770721294156484, 0.4942853033265589, 0.3750554947359437, 0.35500567244895387, 0.3434917266952212, 0.3356480731627015, 0.3180096162483965, 0.31583009150245067, 0.30622715979493537]","{'character(0)': ['addFeatures', 'addTitle'], 'package:base': ['as.factor', 'data.frame', 'is.na', 'library', 'regexpr', 'return'], 'package:rpart': ['rpart'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""addFeatures"", ""addTitle""], ""package:base"": [""as.factor"", ""data.frame"", ""is.na"", ""library"", ""regexpr"", ""return""], ""package:rpart"": [""rpart""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 addFeatures addTitle packagebase asfactor dataframe isna library regexpr return packagerpart rpart packagestats median predict packageutils readcsv writecsv,"library(rpart)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
medianFare <- median(train$Fare, na.rm = TRUE)
addTitle <- function(data) {
    data$Title <- """"
    data$Title[regexpr(""Mme\\.|Mlle\\."", data$Name) > -1] <- ""Mlle""
    data$Title[regexpr(""Capt\\.|Don\\.|Major\\.|Sir\\."", data$Name) > -1] <- ""Sir""
    data$Title[regexpr(""Dona\\.|Lady\\.|Mrs\\."", data$Name) > -1] <- ""Lady""
    data$Title[regexpr(""Miss\\."", data$Name) > -1] <- ""Miss""
    data$Title <- as.factor(data$Title)
    return(data)
}
train <- addTitle(train)
test <- addTitle(test)
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title, data = train[!is.na(train$Age), ], method = ""anova"")
addFeatures <- function(data) {
    data$Embarked[data$Embarked == """"] <- ""S""
    data$Fare[is.na(data$Fare)] <- medianFare
    data$Age[is.na(data$Age)] <- predict(predicted_age, data[is.na(data$Age), ])
    data$Sex <- as.factor(data$Sex)
    data$Embarked <- as.factor(data$Embarked)
    return(data)
}
my_tree <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title, data = addFeatures(train), method = ""class"")
my_prediction <- predict(my_tree, newdata = addFeatures(test), type = ""class"")
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = ""my_solution.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,1,0,0,0,0
111,stevengolo-titanic-machine-learning-from-disaster,0.768,"['vars', 'filter', 'margin', 'kable', 'user defined', 'user defined', 'user defined', 'as.factor', 'c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'nrow', 'row.names', 'sample', 'seq', 'set.seed', 'bind_rows', 'funs', 'if_else', 'mutate', 'mutate_at', 'pull', 'select', 'aes', 'coord_flip', 'element_text', 'geom_bar', 'geom_boxplot', 'geom_density', 'ggplot', 'ggtitle', 'labs', 'scale_x_continuous', 'scale_x_discrete', 'scale_y_continuous', 'theme', 'theme_minimal', 'xlab', 'ylab', 'cv.glmnet', 'glmnet', 'grid.arrange', 'kable_styling', 'read_csv', 'lm', 'median', 'model.matrix', 'predict', 'add_column', 'write.csv']","['glmnet', 'gridExtra', 'kableExtra', 'knitr', 'randomForest', 'reshape2', 'tidyverse', 'base']",4.54597616195679,"['labs', 'nrow', 'median', 'cv.glmnet', 'element_text', 'coord_flip', 'theme', 'is.na', 'glmnet', 'scale_x_continuous', 'margin', 'geom_boxplot', 'lm', 'as.factor', 'filter', 'kable', 'set.seed', 'gsub', 'theme_minimal', 'factor', 'xlab', 'read_csv', 'kable_styling', 'if_else', 'geom_bar', 'grid.arrange', 'model.matrix', 'pull', 'scale_y_continuous', 'row.names', 'c', 'mutate_at', 'aes', 'scale_x_discrete', 'ylab', 'mutate', 'sample', 'funs', 'predict', 'write.csv', 'seq', 'bind_rows', 'ggtitle', 'data.frame', 'ggplot', 'geom_density', 'user defined', 'library', 'add_column', 'vars', 'select']",[],"['pradeeptripathi-prediction-of-titanic-survival-using-random-forest', 'pradeeptripathi-prediction-of-titanic-survival-using-r', 'lokesharun-titanic', 'paulbisto-r-titanic-script-practice', 'predact-easy-r-titanic-predictive-model', 'utkarsh1997-kaggle-titanic-rf', 'suraj915-titanic-suraj', 'pavani2018-titanicr-random-forests', 'mailakshdeep-titanic-survival-prediction-r', 'acrespop-titanic1']","[0.6315183147645984, 0.6312746381915363, 0.6298423415076584, 0.6171297057758414, 0.6100931000347866, 0.6000839949650225, 0.5873359462163915, 0.5729076608770598, 0.5600848629897397, 0.5319362375905702]","{'c(""package:dplyr"", ""package:ggplot2"")': ['vars'], 'c(""package:dplyr"", ""package:stats"")': ['filter'], 'c(""package:ggplot2"", ""package:randomForest"")': ['margin'], 'c(""package:knitr"", ""package:kableExtra"")': ['kable'], 'character(0)': ['set', 'theme_custom'], 'package:base': ['as.factor', 'c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'nrow', 'row.names', 'sample', 'seq', 'set.seed'], 'package:dplyr': ['bind_rows', 'funs', 'if_else', 'mutate', 'mutate_at', 'pull', 'select'], 'package:ggplot2': ['aes', 'coord_flip', 'element_text', 'geom_bar', 'geom_boxplot', 'geom_density', 'ggplot', 'ggtitle', 'labs', 'scale_x_continuous', 'scale_x_discrete', 'scale_y_continuous', 'theme', 'theme_minimal', 'xlab', 'ylab'], 'package:glmnet': ['cv.glmnet', 'glmnet'], 'package:gridExtra': ['grid.arrange'], 'package:kableExtra': ['kable_styling'], 'package:readr': ['read_csv'], 'package:stats': ['lm', 'median', 'model.matrix', 'predict'], 'package:tibble': ['add_column'], 'package:utils': ['write.csv']}","{""c(""package:dplyr"", ""package:ggplot2"")"": [""vars""], ""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""c(""package:ggplot2"", ""package:randomForest"")"": [""margin""], ""c(""package:knitr"", ""package:kableExtra"")"": [""kable""], ""character(0)"": [""set"", ""theme_custom""], ""package:base"": [""as.factor"", ""c"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""library"", ""nrow"", ""row.names"", ""sample"", ""seq"", ""set.seed""], ""package:dplyr"": [""bind_rows"", ""funs"", ""if_else"", ""mutate"", ""mutate_at"", ""pull"", ""select""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""element_text"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""ggplot"", ""ggtitle"", ""labs"", ""scale_x_continuous"", ""scale_x_discrete"", ""scale_y_continuous"", ""theme"", ""theme_minimal"", ""xlab"", ""ylab""], ""package:glmnet"": [""cv.glmnet"", ""glmnet""], ""package:gridExtra"": [""grid.arrange""], ""package:kableExtra"": [""kable_styling""], ""package:readr"": [""read_csv""], ""package:stats"": [""lm"", ""median"", ""model.matrix"", ""predict""], ""package:tibble"": [""add_column""], ""package:utils"": [""write.csv""]}",cpackagedplyr packageggplot2 vars cpackagedplyr packagestats filter cpackageggplot2 packagerandomForest margin cpackageknitr packagekableExtra kable character0 set themecustom packagebase asfactor c dataframe factor gsub isna library nrow rownames sample seq setseed packagedplyr bindrows funs ifelse mutate mutateat pull select packageggplot2 aes coordflip elementtext geombar geomboxplot geomdensity ggplot ggtitle labs scalexcontinuous scalexdiscrete scaleycontinuous theme thememinimal xlab ylab packageglmnet cvglmnet glmnet packagegridExtra gridarrange packagekableExtra kablestyling packagereadr readcsv packagestats lm median modelmatrix predict packagetibble addcolumn packageutils writecsv,"knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(glmnet)
library(gridExtra)
library(kableExtra)
library(knitr)
library(randomForest)
library(reshape2)
library(tidyverse)
theme_custom <- function(base_family = ""Times"") {
    theme_minimal(base_family = base_family) %+replace% theme(plot.title = element_text(size = 20), plot.subtitle = element_text(size = 16, vjust = -1), axis.title = element_text(size = 18), axis.text = element_text(size = 16), axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0), angle = 90), axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 20, l = 0)), strip.text.x = element_text(size = 16))
}
train <- read_csv(""../input/train.csv"")
test <- read_csv(""../input/test.csv"")
titanic <- train %>% bind_rows(test) %>% select(-PassengerId) %>% mutate_at(vars(Pclass, Sex, Embarked), funs(factor(.)))
titanic %>% ggplot(aes(x = Pclass)) + geom_bar(width = 0.5, fill = ""#56B4E9"") + coord_flip() + labs(title = ""Count of the passengers by class"") + scale_x_discrete(name = ""Passenger's class"") + scale_y_continuous(name = ""Count"", breaks = seq(0, 900, 100)) + theme_custom()
titanic %>% ggplot(aes(x = Sex)) + geom_bar(width = 0.5, fill = ""#56B4E9"") + coord_flip() + labs(title = ""Count of the passengers by sex"") + scale_x_discrete(name = ""Passenger's sex"") + scale_y_continuous(name = ""Count"", breaks = seq(0, 900, 100)) + theme_custom()
Title <- ""^.*, (.*?)\\..*$"" %>% gsub(""\\1"", titanic$Name)
title_high <- c(""Mr"", ""Miss"", ""Mrs"", ""Master"")
Title <- Title %in% title_high %>% if_else(Title, ""Other"")
titanic <- titanic %>% add_column(Title) %>% mutate_at(vars(Title), funs(factor(.)))
titanic %>% ggplot(aes(x = Title)) + geom_bar(width = 0.5, fill = ""#56B4E9"") + coord_flip() + labs(title = ""Count of the passengers by title"") + scale_x_discrete(name = ""Passenger's title"") + scale_y_continuous(name = ""Count"", breaks = seq(0, 900, 100)) + theme_custom()
titanic %>% filter(is.na(Embarked)) %>% kable(format = ""html"") %>% kable_styling(bootstrap_options = c(""striped"", ""hover"", ""condensed""))
titanic %>% filter(Pclass == 1) %>% ggplot(aes(x = Embarked, y = Fare)) + geom_boxplot(colour = ""black"", fill = ""#56B4E9"", outlier.colour = ""red"") + ggtitle(""Fare depending on the port of embarkation for the first class"") + scale_x_discrete(name = ""Port of embarkation"") + scale_y_continuous(name = ""Fare"") + theme_custom()
titanic[62, ""Embarked""] <- ""C""
titanic[830, ""Embarked""] <- ""C""
titanic %>% ggplot(aes(x = Embarked)) + geom_bar(width = 0.5, fill = ""#56B4E9"") + coord_flip() + labs(title = ""Count of the passengers by port of embarkation"") + scale_x_discrete(name = ""Passenger's port of embarkation"") + scale_y_continuous(name = ""Count"", breaks = seq(0, 900, 100)) + theme_custom()
titanic %>% filter(is.na(Fare)) %>% kable(format = ""html"") %>% kable_styling(bootstrap_options = c(""striped"", ""hover"", ""condensed""))
titanic %>% filter(Embarked == ""S"", Pclass == 3) %>% ggplot(aes(x = Fare)) + geom_density(kernel = ""gaussian"", colour = ""#FFFFFF"", fill = ""#56B4E9"") + ggtitle(""Density of Fare"", subtitle = ""Embarked in Southampton in third class"") + xlab(""Fare ($)"") + ylab(""Density"") + theme_custom()
titanic[1044, ""Fare""] <- titanic %>% filter(Embarked == ""S"", Pclass == 3) %>% pull(Fare) %>% median(na.rm = TRUE)
grid.arrange(titanic %>% ggplot(aes(y = Age)) + geom_boxplot(fill = ""#56B4E9"", outlier.colour = ""red"") + coord_flip() + ggtitle(""Boxplot of Age"") + scale_x_continuous(breaks = NULL) + theme_custom(), titanic %>% ggplot(aes(x = Age)) + geom_density(kernel = ""gaussian"", colour = ""#FFFFFF"", fill = ""#56B4E9"") + ggtitle(""Density of Age"") + xlab(""Age"") + ylab(""Density"") + theme_custom(), ncol = 2, nrow = 1)
titanic.with.age <- titanic %>% filter(!is.na(Age)) %>% select(-c(Survived, Name, Ticket, Cabin))
titanic.without.age <- titanic %>% filter(is.na(Age)) %>% select(-c(Survived, Name, Ticket, Cabin)) %>% mutate(Age = 0)
titanic.lm <- lm(Age ~ ., data = titanic.with.age)
titanic.with.age.model.matrix <- model.matrix(titanic.lm, data = titanic.with.age)[, -1]
titanic.age.model <- glmnet(titanic.with.age.model.matrix, titanic.with.age$Age, alpha = 0)
titanic.without.age$Age <- predict(titanic.age.model, newx = model.matrix(titanic.lm, data = titanic.without.age)[, -1], s = cv.glmnet(titanic.with.age.model.matrix, titanic.with.age$Age, alpha = 0)$lambda.min, type = ""link"")
titanic[is.na(titanic$Age), ""Age""] <- titanic.without.age$Age
grid.arrange(titanic %>% ggplot(aes(y = Age)) + geom_boxplot(fill = ""#56B4E9"", outlier.colour = ""red"") + coord_flip() + ggtitle(""Boxplot of Age"") + scale_x_continuous(breaks = NULL) + theme_custom(), titanic %>% ggplot(aes(x = Age)) + geom_density(kernel = ""gaussian"", colour = ""#FFFFFF"", fill = ""#56B4E9"") + ggtitle(""Density of Age"") + xlab(""Age"") + ylab(""Density"") + theme_custom(), ncol = 2, nrow = 1)
titanic %>% ggplot(aes(x = as.factor(SibSp))) + geom_bar(width = 0.5, fill = ""#56B4E9"") + coord_flip() + labs(title = ""Count of the passengers number of siblings/spouses"") + scale_x_discrete(name = ""Number of Siblings/Spouses"") + scale_y_continuous(name = ""Count"", breaks = seq(0, 900, 100)) + theme_custom()
titanic %>% ggplot(aes(x = as.factor(Parch))) + geom_bar(width = 0.5, fill = ""#56B4E9"") + coord_flip() + labs(title = ""Count of the passengers number of parents/children"") + scale_x_discrete(name = ""Number of Parents/Children"") + scale_y_continuous(name = ""Count"", breaks = seq(0, 1000, 100)) + theme_custom()
titanic <- titanic %>% select(-Cabin)
titanic <- titanic %>% select(-Ticket)
train <- titanic %>% select(-Name) %>% filter(!is.na(Survived))
test <- titanic %>% select(-Name) %>% filter(is.na(Survived))
set.seed(42)
sample <- sample(c(TRUE, FALSE), nrow(train), replace = TRUE, prob = c(2/3, 1/3))
train.val <- train[sample, ]
test.val <- train[!sample, ]
train.lm <- lm(Survived ~ ., data = train.val)
X <- model.matrix(train.lm, data = train.val)[, -1]
Y <- train.val$Survived
train.ridge.model <- glmnet(X, Y, alpha = 0, family = ""binomial"")
test.val.predict <- predict(train.ridge.model, s = cv.glmnet(X, Y, alpha = 0)$lambda.min, newx = model.matrix(train.lm, data = test.val)[, -1], type = ""class"")
test$Survived <- 0
test.predict <- predict(train.ridge.model, s = cv.glmnet(X, Y, alpha = 0)$lambda.min, newx = model.matrix(train.lm, data = test)[, -1], type = ""class"")
result <- data.frame(PassengerID = row.names(test.predict), Survived = test.predict[, 1])
write.csv(result, ""results.csv"", row.names = FALSE)",1,0,0,0,0,1,0,0,0,0,0,0,0,0
112,rogrezende-titanic-sinking-analysis,0.675,"['plot', 'filter', 'as.factor', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'aes', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_histogram', 'geom_hline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'legend', 'mosaicplot', 'complete', 'md.pattern', 'mice', 'randomForest', 'dollar_format', 'median', 'predict', 'read.csv', 'str', 'write.csv', 'aggr']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'VIM', 'mice', 'randomForest', 'base']",10.483252048492401,"['labs', 'complete', 'median', 'lapply', 'md.pattern', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'mice', 'geom_histogram', 'mosaicplot', 'str', 'geom_hline', 'set.seed', 'gsub', 'factor', 'colnames', 'geom_bar', 'aggr', 'read.csv', 'table', 'randomForest', 'scale_y_continuous', 'c', 'aes', 'paste', 'plot', 'sum', 'legend', 'dollar_format', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'library', 'facet_grid']",[],"['rogrezende-titanic-sinking-analysis', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'msantos68-exploring-survival-on-the-titanic', 'mira5b-exploring-survival-on-the-titanic', 'jww001-exploring-survival-on-the-titanicqw', 'tetyama-trial-titanic', 'atuljjoshi05-titanic-random-forest']","[0.9999999999999999, 0.9076221793966776, 0.9070827187416789, 0.9070827187416789, 0.9032900252495616, 0.9010622302041871, 0.9006803749741525, 0.9006379763808801, 0.9004617691719141, 0.9003727931718787]","{'c(""package:colorspace"", ""package:graphics"")': ['plot'], 'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows'], 'package:ggplot2': ['aes', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_histogram', 'geom_hline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['legend', 'mosaicplot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv'], 'package:VIM': ['aggr']}","{""c(""package:colorspace"", ""package:graphics"")"": [""plot""], ""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_histogram"", ""geom_hline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""legend"", ""mosaicplot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""], ""package:VIM"": [""aggr""]}",cpackagecolorspace packagegraphics plot cpackagedplyr packagestats filter packagebase asfactor c colnames dataframe factor gsub isna lapply library names nlevels paste sapply setseed strsplit sum table packagedplyr bindrows packageggplot2 aes facetgrid geombar geomboxplot geomhistogram geomhline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics legend mosaicplot packagemice complete mdpattern mice packagerandomForest randomForest packagescales dollarformat packagestats median predict packageutils readcsv str writecsv packageVIM aggr,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""VIM"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
MData <- sapply(full, function(x) sum(is.na(x)))
MData[MData > 0]
MData
aggr_plot <- aggr(full, col = c(""navyblue"", ""red""), numbers = TRUE, sortVars = TRUE, labels = names(full), cex.axis = 0.7, gap = 3, ylab = c(""Histogram of missing data"", ""Pattern""))
TMPfull <- mice(full, m = 5, maxit = 50, meth = ""pmm"", seed = 500)
TMPComplete <- complete(TMPfull)
full$Age[1:30]
TMPComplete$Age[1:30]
full$Age <- TMPComplete$Age
NData <- sapply(full, function(x) sum(is.na(x)))
NData[NData > 0]
FareM <- full[is.na(full$Fare), ]
FareM
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
Rare <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% Rare] <- ""Rare""
table(full$Sex, full$Title)
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
nr_surname <- nlevels(factor(full$Surname))
nr_surname
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
full$Survived[full$Survived == ""0""] <- ""Died""
full$Survived[full$Survived == ""1""] <- ""Survived""
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full[full$Embarked != ""C"" & full$Embarked != ""Q"" & full$Embarked != ""S"", ]
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
ggplot(full[1:891, ], aes(x = Pclass, fill = factor(Survived), label = Pclass)) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Survival by Class"") + theme_few()
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
train$Survived[train$Survived == ""Died""] <- 0
train$Survived[train$Survived == ""Survived""] <- 1
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Age + SibSp + Parch + Fare + Fsize, data = train, importance = TRUE)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
113,qianbi-titanic-randomforest,0.746,"['c', 'factor', 'gsub', 'ifelse', 'lapply', 'library', 'nrow', 'bind_rows', 'complete', 'mice', 'randomForest', 'predict', 'read.csv', 'write.csv']","['mice', 'dplyr', 'randomForest', 'base']",4.33166599273682,"['gsub', 'factor', 'ifelse', 'nrow', 'predict', 'complete', 'write.csv', 'bind_rows', 'lapply', 'read.csv', 'randomForest', 'library', 'mice', 'c']",[],"['qianbi-titanic-logistic-2', 'qianbi-titanic-svm', 'qianbi-titanic-rpart-2', 'qianbi-titanic-nnet', 'qianbi-titanic-rpart', 'venkatko-titanic-survival1', 'jasonhit-first-script-for-kaggle-titanic', 'abedben-exploring-survival-on-the-titanic', 'tetyama-trial-titanic', 'hemingwei-titanic-r-solution-from-megan-risdal']","[0.9432898689873424, 0.9343938842303756, 0.9279939346902911, 0.9182003903369538, 0.8772711933600361, 0.849515371301316, 0.8362732722884709, 0.8324293926820632, 0.828689936257698, 0.8279296453125817]","{'package:base': ['c', 'factor', 'gsub', 'ifelse', 'lapply', 'library', 'nrow'], 'package:dplyr': ['bind_rows'], 'package:mice': ['complete', 'mice'], 'package:randomForest': ['randomForest'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""c"", ""factor"", ""gsub"", ""ifelse"", ""lapply"", ""library"", ""nrow""], ""package:dplyr"": [""bind_rows""], ""package:mice"": [""complete"", ""mice""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase c factor gsub ifelse lapply library nrow packagedplyr bindrows packagemice complete mice packagerandomForest randomForest packagestats predict packageutils readcsv writecsv,"library(mice)
library(dplyr)
library(randomForest)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE, na.string = """")
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE, na.string = """")
full <- bind_rows(train, test)
full$Title <- gsub(""^.*, |\\. .*$"", """", full$Name)
Mr <- c(""Col"", ""Don"", ""Jonkheer"", ""Sir"")
Mrs <- c(""Dona"", ""Lady"", ""Mme"", ""the Countess"")
Miss <- c(""Mlle"", ""Ms"")
full$Title[full$Title %in% Mr] <- ""Mr""
full$Title[full$Title %in% Mrs] <- ""Mrs""
full$Title[full$Title %in% Miss] <- ""Miss""
full$Fsize <- full$SibSp + full$Parch + 1
full$FsizeD[full$Fsize == 1] <- ""Singleton""
full$FsizeD[full$Fsize > 1 & full$Fsize < 5] <- ""Small""
full$FsizeD[full$Fsize > 4] <- ""Large""
factor_var <- c(""Survived"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""FsizeD"")
full[factor_var] <- lapply(full[factor_var], factor)
mice_mod <- mice(full[, c(3, 5:8, 10, 12)], method = ""rf"")
mice_output <- complete(mice_mod)
full[, c(6, 10, 12)] <- mice_output[, c(3, 6, 7)]
full$Child <- factor(ifelse(full$Age <= 12, 1, 0))
train <- full[1:nrow(train), ]
test <- full[(nrow(train) + 1):nrow(full), ]
rf_mod <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child, data = train)
test$Survived <- predict(rf_mod, test)
write.csv(test[, c(1, 2)], file = ""Titanic_randomForest.csv"", row.names = FALSE)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
114,kazimanil-titanic-submission,0.555,"['user defined', 'apply', 'as.character', 'as.factor', 'as.numeric', 'assign', 'c', 'cbind', 'ceiling', 'character', 'colnames', 'cut', 'gc', 'get', 'gsub', 'ifelse', 'integer', 'is.character', 'is.na', 'is.numeric', 'library', 'log10', 'ls', 'max', 'mean', 'merge', 'ncol', 'nrow', 'numeric', 'order', 'paste0', 'pmin', 'rbind', 'return', 'rm', 'sample', 'seq', 'stopifnot', 'substr', 'summary', 't', 'trimws', 'unique', 'which', 'knn', 'as.data.table', 'data.table', 'fread', 'fwrite', 'plot', 'text', 'ctree', 'ctree_control', 'plotcp', 'printcp', 'rpart', 'aov', 'binomial', 'glm', 'predict', 'predict.glm', 'sd', 'step', 'str_split_fixed']","['class', 'rpart', 'randomForest', 'partykit', 'data.table', 'stringr', 'rpart', 'randomForest', 'partykit', 'base']",1.10023131370544,"['step', 'nrow', 'gc', 'mean', 'data.table', 'is.numeric', 'merge', 'which', 'as.character', 'is.na', 'glm', 'pmin', 'ctree_control', 'ncol', 'printcp', 't', 'ctree', 'plotcp', 'rpart', 'as.factor', 'get', 'numeric', 'summary', 'text', 'aov', 'stopifnot', 'log10', 'gsub', 'integer', 'colnames', 'unique', 'max', 'cut', 'character', 'apply', 'assign', 'binomial', 'paste0', 'sd', 'str_split_fixed', 'return', 'is.character', 'rm', 'fread', 'c', 'fwrite', 'predict.glm', 'rbind', 'sample', 'as.numeric', 'ifelse', 'ls', 'knn', 'plot', 'order', 'seq', 'predict', 'substr', 'user defined', 'ceiling', 'library', 'trimws', 'cbind', 'as.data.table']",[],"['kazimanil-titanic-submission', 'paulocressoni-titanic-using-stepwise-linear-regression', 'jacekpardyak-mytitanicscript', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'liudj2008-fork-of-titanic', 'liudj2008-titanic', 'peggy88-titanic-data-eda-by-peggy', 'annafreydenzon-titanic-machine-learning-from-disaster', 'ezhilvelme-titanic-neural-network-c-4-2']","[0.9999999999999999, 0.2951144337803188, 0.2746973276395906, 0.2504625530348626, 0.2504625530348626, 0.24957263909356675, 0.24914113835303314, 0.24719496643577504, 0.24691656894466565, 0.23135585622898663]","{'character(0)': ['.', '`:=`', '`colnames<-`', 'NBCalc'], 'package:base': ['apply', 'as.character', 'as.factor', 'as.numeric', 'assign', 'c', 'cbind', 'ceiling', 'character', 'colnames', 'cut', 'gc', 'get', 'gsub', 'ifelse', 'integer', 'is.character', 'is.na', 'is.numeric', 'library', 'log10', 'ls', 'max', 'mean', 'merge', 'ncol', 'nrow', 'numeric', 'order', 'paste0', 'pmin', 'rbind', 'return', 'rm', 'sample', 'seq', 'stopifnot', 'substr', 'summary', 't', 'trimws', 'unique', 'which'], 'package:class': ['knn'], 'package:data.table': ['as.data.table', 'data.table', 'fread', 'fwrite'], 'package:graphics': ['plot', 'text'], 'package:partykit': ['ctree', 'ctree_control'], 'package:rpart': ['plotcp', 'printcp', 'rpart'], 'package:stats': ['aov', 'binomial', 'glm', 'predict', 'predict.glm', 'sd', 'step'], 'package:stringr': ['str_split_fixed']}","{""character(0)"": [""."", ""`:=`"", ""`colnames<-`"", ""NBCalc""], ""package:base"": [""apply"", ""as.character"", ""as.factor"", ""as.numeric"", ""assign"", ""c"", ""cbind"", ""ceiling"", ""character"", ""colnames"", ""cut"", ""gc"", ""get"", ""gsub"", ""ifelse"", ""integer"", ""is.character"", ""is.na"", ""is.numeric"", ""library"", ""log10"", ""ls"", ""max"", ""mean"", ""merge"", ""ncol"", ""nrow"", ""numeric"", ""order"", ""paste0"", ""pmin"", ""rbind"", ""return"", ""rm"", ""sample"", ""seq"", ""stopifnot"", ""substr"", ""summary"", ""t"", ""trimws"", ""unique"", ""which""], ""package:class"": [""knn""], ""package:data.table"": [""as.data.table"", ""data.table"", ""fread"", ""fwrite""], ""package:graphics"": [""plot"", ""text""], ""package:partykit"": [""ctree"", ""ctree_control""], ""package:rpart"": [""plotcp"", ""printcp"", ""rpart""], ""package:stats"": [""aov"", ""binomial"", ""glm"", ""predict"", ""predict.glm"", ""sd"", ""step""], ""package:stringr"": [""str_split_fixed""]}",character0   colnames NBCalc packagebase apply ascharacter asfactor asnumeric assign c cbind ceiling character colnames cut gc get gsub ifelse integer ischaracter isna isnumeric library log10 ls max mean merge ncol nrow numeric order paste0 pmin rbind return rm sample seq stopifnot substr summary t trimws unique which packageclass knn packagedatatable asdatatable datatable fread fwrite packagegraphics plot text packagepartykit ctree ctreecontrol packagerpart plotcp printcp rpart packagestats aov binomial glm predict predictglm sd step packagestringr strsplitfixed,"library(class)
library(rpart)
library(randomForest)
library(partykit)
library(data.table)
library(stringr)
rm(list = ls())
gc()
train <- fread(""../input/train.csv"")
gender_submission <- fread(""../input/gender_submission.csv"")
test <- fread(""../input/test.csv"")
NBCalc <- function(train, test, rows, objective) {
    stopifnot((is.character(rows) & is.character(objective)) | (is.numeric(rows) & is.numeric(objective)))
    rts <- if (is.numeric(rows)) {
        as.numeric(cbind(as.data.table(t(rows)), as.data.table(objective)))
    }
    else {
        as.character(cbind(as.data.table(t(rows)), as.data.table(objective)))
    }
    dat <- train[, rts, with = FALSE]
    det <- test[, rows, with = FALSE]
    det$p1 <- train[, mean(get(objective))]
    p1 <- train[, mean(get(objective))]
    nrowdet <- nrow(det)
    rff <- ncol(dat) - 1
    for (i in 1:rff) {
        name <- colnames(dat)[i]
        res <- dat[, .(value = unique(get(name)), lift = mean(get(objective))/p1), .(get(name))][, 2:3]
        res <- `colnames<-`(res, c(""value"", paste0(""lift_"", name)))
        det <- merge(det, res, by.x = paste0(name), by.y = ""value"")
        stopifnot(nrowdet == nrow(det))
    }
    scol <- rff + 2
    ecol <- (2 * rff) + 1
    det[, `:=`(NaiveBayesProb, apply(det[, scol:ecol], 1, prod) * p1)]
    return(det)
}
train[, `:=`(Title, trimws(str_split_fixed(gsub("","", ""."", Name), ""[.]"", n = 3)[, 2]))]
train[Title == ""Master"", `:=`(Title, ""Mr"")]
train[Title == ""Mlle"", `:=`(Title, ""Miss"")]
train[Title %in% c(""Ms"", ""Mme""), `:=`(Title, ""Mrs"")]
train[Title %in% c(""the Countess"", ""Sir"", ""Jonkheer"", ""Lady"", ""Don"", ""Dona""), `:=`(Title, ""Noble"")]
train[Title %in% c(""Capt"", ""Col"", ""Major""), `:=`(Title, ""Military"")]
train[, `:=`(Title, as.factor(Title))]
train <- merge(train, train[, mean(Age, na.rm = T), .(Title)], by = ""Title"")
train[, `:=`(Age, ceiling(Age))]
train[, `:=`(glmAge, ifelse(is.na(Age), V1, Age))]
train[, `:=`(V1, NULL)]
train[, `:=`(Cl_Age, as.factor(pmin(ceiling(glmAge/10), 8)))]
train[, `:=`(Cl_Relative, as.factor(pmin(SibSp + Parch, 5)))]
train[, `:=`(Pclass, as.factor(Pclass))]
train[, `:=`(Embarked, as.factor(Embarked))]
train[, `:=`(Sex, as.factor(Sex))]
train[, `:=`(log_Fare, log10(Fare + 1))]
train[log_Fare < 1, `:=`(Cl_Fare, ""Cheapest"")]
train[log_Fare >= 1 & log_Fare < 1.5, `:=`(Cl_Fare, ""Cheap"")]
train[log_Fare >= 1.5 & log_Fare < 2, `:=`(Cl_Fare, ""Modest"")]
train[log_Fare > 2, `:=`(Cl_Fare, ""Expensive"")]
train[, `:=`(CabinDpt, substr(Cabin, 1, 1))]
train[CabinDpt == "" "", `:=`(CabinDpt, as.character(NA))]
train <- merge(train, train[, .(nTicket = .N), Ticket], all.x = T, by = ""Ticket"")
train[, `:=`(fac_nTicket, as.factor(nTicket))]
test[, `:=`(Title, trimws(str_split_fixed(gsub("","", ""."", Name), ""[.]"", n = 3)[, 2]))]
test[Title == ""Master"", `:=`(Title, ""Mr"")]
test[Title == ""Mlle"", `:=`(Title, ""Miss"")]
test[Title %in% c(""Ms"", ""Mme""), `:=`(Title, ""Mrs"")]
test[Title %in% c(""the Countess"", ""Sir"", ""Jonkheer"", ""Lady"", ""Don"", ""Dona""), `:=`(Title, ""Noble"")]
test[Title %in% c(""Capt"", ""Col"", ""Major""), `:=`(Title, ""Military"")]
test[, `:=`(Title, as.factor(Title))]
test[is.na(Fare), `:=`(Fare, 0)]
test <- merge(test, test[, mean(Age, na.rm = T), .(Title)], by = ""Title"")
test[, `:=`(Age, ceiling(Age))]
test[, `:=`(glmAge, ifelse(is.na(Age), V1, Age))]
test[, `:=`(V1, NULL)]
test[, `:=`(Cl_Age, as.factor(pmin(ceiling(glmAge/10), 8)))]
test[, `:=`(Cl_Relative, as.factor(pmin(SibSp + Parch, 5)))]
test[, `:=`(Pclass, as.factor(Pclass))]
test[, `:=`(Embarked, as.factor(Embarked))]
test[, `:=`(Sex, as.factor(Sex))]
test[, `:=`(log_Fare, log10(Fare + 1))]
test[log_Fare < 1, `:=`(Cl_Fare, ""Cheapest"")]
test[log_Fare >= 1 & log_Fare < 1.5, `:=`(Cl_Fare, ""Cheap"")]
test[log_Fare >= 1.5 & log_Fare < 2, `:=`(Cl_Fare, ""Modest"")]
test[log_Fare > 2, `:=`(Cl_Fare, ""Expensive"")]
test[, `:=`(CabinDpt, substr(Cabin, 1, 1))]
test[CabinDpt == "" "", `:=`(CabinDpt, as.character(NA))]
test <- merge(test, test[, .(nTicket = .N), Ticket], all.x = T, by = ""Ticket"")
test[, `:=`(fac_nTicket, as.factor(nTicket))]
acc <- data.table(set = numeric(), k_nn = numeric(), Accuracy = integer())
s <- 1
while (s < 101) {
    knn_train <- train[, .(Survived, Title = as.numeric(Title), Pclass = as.numeric(Pclass), Sex = as.numeric(Sex), Embarked = as.numeric(Embarked), glmAge, Relative = as.numeric(Cl_Relative), log_Fare, nTicket)]
    knn_train <- knn_train[sample(nrow(train)), ]
    knn_r <- knn_train[1:700]
    knn_e <- knn_train[701:891]
    knn_s <- knn_r$Survived
    knn_r[, `:=`(Survived, NULL)]
    knn_a <- knn_e$Survived
    knn_e[, `:=`(Survived, NULL)]
    for (k in 1:100) {
        knn_o <- cbind(knn_e, pred = knn(knn_r, knn_e, knn_s, k), res = knn_a)
        acc <- rbind(acc, as.data.table(t(c(set = s, k_nn = k, Accuracy = knn_o[pred == res, .N/nrow(knn_o)]))))
    }
    s <- s + 1
}
acc[, .(Ort = mean(Accuracy), SD = sd(Accuracy)), .(k_nn)][order(-Ort)]
knn_test <- test[, .(PassengerId, Title = as.numeric(Title), Pclass = as.numeric(Pclass), Sex = as.numeric(Sex), Embarked = as.numeric(Embarked), glmAge, Relative = as.numeric(Cl_Relative), log_Fare, nTicket)]
knn_test <- cbind(knn_test, Survived = knn(knn_train[, 2:9], knn_test[, 2:9], cl = train$Survived, k = 7))
fwrite(knn_test[, c(1, 10)], ""submission_knn_2.csv"")
train2 <- train[sample(nrow(train)), ]
folds <- cut(seq(1, nrow(train2)), breaks = 10, labels = FALSE)
acc <- data.table(Model = character(), Accuracy = integer())
for (i in 1:10) {
    testIndexes <- which(folds == i, arr.ind = TRUE)
    testData <- train2[testIndexes, ]
    trainData <- train2[-testIndexes, ]
    assign(x = paste0(""model_"", i), step(direction = ""backward"", object = glm(formula = Survived ~ glmAge + log_Fare + SibSp + Parch + Embarked + Pclass + Title + Cl_Relative + nTicket, data = trainData, family = binomial(link = ""logit""))))
    testData[, `:=`(phat, predict.glm(get(paste0(""model_"", i)), newdata = testData, type = ""response""))]
    testData[, `:=`(pred, ifelse(phat > 0.5, 1, 0))]
    pasted <- cbind(Model = paste0(""model_"", i), Accuracy = testData[pred == Survived, .N/nrow(testData)])
    acc <- rbind(acc, pasted, deparse.level = 0)
}
acc[, `:=`(Accuracy, as.numeric(Accuracy))]
selectedcols <- colnames(as.data.table(get(acc[Accuracy == max(Accuracy)]$Model)$model))[2:ncol(get(acc[Accuracy == max(Accuracy)]$Model)$model)]
model <- glm(formula = Survived ~ glmAge + log_Fare + Pclass + Title + Cl_Relative, data = train, family = binomial(link = ""logit""))
test[, `:=`(phat, predict.glm(model, newdata = test, type = ""response""))]
test[, `:=`(Survived, ifelse(phat > 0.5, 1, 0))]
gender_submission <- merge(gender_submission[, 1], test[, c(""PassengerId"", ""Survived"")], by = ""PassengerId"")
fwrite(gender_submission, ""submission_20171228_4.csv"")
train[, .(mean(Survived), .N), .(Sex)]
summary(aov(formula = Survived ~ Sex, data = train))
train[, .(mean(Survived), .N), .(Embarked)]
summary(aov(formula = Survived ~ Embarked, data = train))
train[, .(mean(Survived), .N), .(Pclass)]
summary(aov(formula = Survived ~ Pclass, data = train))
train[, .(mean(Survived), .N), .(Cl_Fare)]
summary(aov(formula = Survived ~ Cl_Fare, data = train))
train[, .(mean(Survived), .N), .(Cl_Age)]
summary(aov(formula = Survived ~ Cl_Age, data = train))
train[, .(mean(Survived), .N), .(Cl_Relative)]
summary(aov(formula = Survived ~ Cl_Relative, data = train))
summary(aov(formula = Survived ~ as.factor(nTicket), data = train))
rows <- c(""Pclass"", ""Title"", ""Embarked"", ""Cl_Fare"", ""Cl_Age"", ""Cl_Relative"", ""fac_nTicket"")
objective <- ""Survived""
fwrite(file = ""submission_naivebayes_2.csv"", x = merge(test[, 1:20], NBCalc(train, test, rows, objective)[, .(Survived = ifelse(mean(NaiveBayesProb) > 0.5, 1, 0)), .(fac_nTicket, Cl_Relative, Cl_Age, Cl_Fare, Embarked, Title, Pclass)], by = c(""Pclass"", ""Title"", ""Embarked"", ""Cl_Fare"", ""Cl_Age"", ""Cl_Relative"", ""fac_nTicket""), all.x = TRUE)[, .(PassengerId, Survived)])
library(""rpart"")
library(""randomForest"")
library(""partykit"")
dt <- rpart(data = train, formula = Survived ~ Title + Pclass + Sex + Embarked + glmAge + Cl_Relative + log_Fare + nTicket + CabinDpt)
printcp(dt)
plotcp(dt)
plot(dt)
text(dt, use.n = TRUE, all = TRUE, cex = 0.8)
model_ct <- ctree(formula = Survived ~ Title + Pclass + Sex + Embarked + glmAge + Cl_Relative + log_Fare + nTicket, data = train)
test[, `:=`(prob, predict(object = model_ct, newdata = test))]
test[, `:=`(Survived, ifelse(prob > 0.5, 1, 0))]
fwrite(test[, .(PassengerId, Survived)], ""submission_Ctree_1.csv"")
model_ct2 <- ctree(formula = Survived ~ Title + Pclass + Sex + Embarked + glmAge + Cl_Relative + log_Fare + nTicket, data = train, control = ctree_control(minsplit = 31))
test[, `:=`(prob2, predict(object = model_ct2, newdata = test))]
test[, `:=`(Survived2, ifelse(prob2 > 0.5, 1, 0))]
fwrite(test[, .(PassengerId, Survived = Survived2)], ""submission_Ctree_2.csv"")
model_ct3 <- ctree(formula = Survived ~ Title + Pclass + Embarked + glmAge + Cl_Relative + log_Fare + nTicket, data = train)
test[, `:=`(prob3, predict(object = model_ct2, newdata = test))]
test[, `:=`(Survived3, ifelse(prob2 > 0.5, 1, 0))]
fwrite(test[, .(PassengerId, Survived = Survived3)], ""submission_Ctree_3.csv"")",1,0,0,0,0,0,0,0,0,1,0,0,0,0
117,mullayilkannan-decision-tree-titanic,0.7440000000000001,"['attach', 'data.frame', 'diag', 'floor', 'library', 'nrow', 'print', 'sample', 'seq_len', 'set.seed', 'sum', 'summary', 'table', 'plot', 'text', 'rpart', 'predict', 'read.csv', 'write.csv']","['dplyr', 'rpart', 'base']",0.522516965866089,"['nrow', 'attach', 'print', 'rpart', 'summary', 'text', 'seq_len', 'set.seed', 'read.csv', 'table', 'diag', 'sample', 'sum', 'plot', 'predict', 'write.csv', 'data.frame', 'library', 'floor']",[],"['emj777-decision-tree-titanic-r', 'mullayilkannan-randomforest-with-knn-imputation-titanic', 'lagprophet-titanic', 'tsfitz-titanic', 'rtreit-kaggle-titanic-tutorial', 'researchbigd-titanic-r-researchbigd', 'jkevin2010-titanic-survival-using-decision-trees', 'jkevin2010-improved-model-for-titanic-survival', 'lizpund-titanic-competition-kernel', 'kasturimitra-titanic']","[0.43552533008363276, 0.42483495324862325, 0.2516830534996203, 0.24391748104601882, 0.21101825199123292, 0.19851694545990578, 0.19114517728870595, 0.1871362749533875, 0.18392939062448943, 0.1770220386314315]","{'package:base': ['attach', 'data.frame', 'diag', 'floor', 'library', 'nrow', 'print', 'sample', 'seq_len', 'set.seed', 'sum', 'summary', 'table'], 'package:graphics': ['plot', 'text'], 'package:rpart': ['rpart'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""attach"", ""data.frame"", ""diag"", ""floor"", ""library"", ""nrow"", ""print"", ""sample"", ""seq_len"", ""set.seed"", ""sum"", ""summary"", ""table""], ""package:graphics"": [""plot"", ""text""], ""package:rpart"": [""rpart""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase attach dataframe diag floor library nrow print sample seqlen setseed sum summary table packagegraphics plot text packagerpart rpart packagestats predict packageutils readcsv writecsv,"library(dplyr)
library(rpart)
dataset <- read.csv(""../input/train.csv"")
smp_siz = floor(0.8 * nrow(dataset))
print(smp_siz)
set.seed(123)
train_ind = sample(seq_len(nrow(dataset)), size = smp_siz)
train = dataset[train_ind, ]
test = dataset[-train_ind, ]
attach(train)
fit <- rpart(Survived ~ Age + Sex + Pclass + SibSp, method = ""class"")
plot(fit, uniform = TRUE, main = ""Classification Tree for titanic"")
text(fit, use.n = TRUE, all = TRUE, cex = 0.8)
z <- table(predict(fit, test, type = ""class""), test$Survived)
print(z)
accuracy = sum(diag(z))/nrow(test) * 100
print(accuracy)
val_set <- read.csv(""../input/test.csv"")
summary(val_set)
results <- predict(fit, val_set, type = ""class"")
my_solution <- data.frame(PassengerId = val_set$PassengerId, Survived = results)
my_solution
write.csv(my_solution, ""d_tree.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,1,0,0,0,0
118,qianbi-titanic-logistic-2,0.7490000000000001,"['c', 'factor', 'gsub', 'ifelse', 'lapply', 'library', 'nrow', 'round', 'bind_rows', 'complete', 'mice', 'glm', 'predict', 'read.csv', 'write.table']","['dplyr', 'mice', 'base']",3.8855938911438,"['gsub', 'factor', 'ifelse', 'nrow', 'predict', 'complete', 'bind_rows', 'lapply', 'read.csv', 'write.table', 'library', 'round', 'mice', 'c', 'glm']",[],"['qianbi-titanic-rpart-2', 'qianbi-titanic-svm', 'qianbi-titanic-nnet', 'qianbi-titanic-randomforest', 'qianbi-titanic-rpart', 'venkatko-titanic-survival1', 'jasonhit-first-script-for-kaggle-titanic', 'abedben-exploring-survival-on-the-titanic', 'tetyama-trial-titanic', 'hemingwei-titanic-r-solution-from-megan-risdal']","[0.9640808885287273, 0.96054108054866, 0.9443364793211587, 0.9432898689873424, 0.9031936833355108, 0.8750505458824726, 0.8603939819808698, 0.858547358813986, 0.8560598798282706, 0.8560482040228798]","{'package:base': ['c', 'factor', 'gsub', 'ifelse', 'lapply', 'library', 'nrow', 'round'], 'package:dplyr': ['bind_rows'], 'package:mice': ['complete', 'mice'], 'package:stats': ['glm', 'predict'], 'package:utils': ['read.csv', 'write.table']}","{""package:base"": [""c"", ""factor"", ""gsub"", ""ifelse"", ""lapply"", ""library"", ""nrow"", ""round""], ""package:dplyr"": [""bind_rows""], ""package:mice"": [""complete"", ""mice""], ""package:stats"": [""glm"", ""predict""], ""package:utils"": [""read.csv"", ""write.table""]}",packagebase c factor gsub ifelse lapply library nrow round packagedplyr bindrows packagemice complete mice packagestats glm predict packageutils readcsv writetable,"library(dplyr)
library(mice)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE, na.strings = """")
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE, na.strings = """")
full <- bind_rows(train, test)
full$Title <- gsub(""^.*, |\\. .*$"", """", full$Name)
Mr <- c(""Col"", ""Don"", ""Jonkheer"", ""Sir"")
Mrs <- c(""Dona"", ""Lady"", ""Mme"", ""the Countess"")
Miss <- c(""Mlle"", ""Ms"")
full$Title[full$Title %in% Mr] <- ""Mr""
full$Title[full$Title %in% Mrs] <- ""Mrs""
full$Title[full$Title %in% Miss] <- ""Miss""
full$Fsize <- full$SibSp + full$Parch + 1
full$FsizeD[full$Fsize == 1] <- ""Singleton""
full$FsizeD[full$Fsize > 1 & full$Fsize < 5] <- ""Small""
full$FsizeD[full$Fsize > 4] <- ""Large""
factor_var <- c(""Survived"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""FsizeD"")
full[factor_var] <- lapply(full[factor_var], factor)
mice_mod <- mice(full[, c(3, 5:8, 10, 12)], method = ""rf"")
mice_output <- complete(mice_mod)
full[, c(6, 10, 12)] <- mice_output[, c(3, 6, 7)]
full$Embarked <- factor(full$Embarked)
full$Child <- factor(ifelse(full$Age <= 12, 1, 0))
train <- full[1:nrow(train), ]
test <- full[(nrow(train) + 1):nrow(full), ]
fit <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child, family = binomial, data = train)
test$Survived <- round(predict(fit, test, type = ""response""), 0)
write.table(test[, c(1, 2)], file = ""Titanic_logistic_2.csv"", sep = "","", row.names = FALSE)",0,0,0,1,0,0,0,0,0,0,0,0,0,0
119,jeetranjeet619-titanic-dataset-play-around-in-r,0.7490000000000001,"['cbind', 'as.factor', 'as.numeric', 'as.ordered', 'c', 'colnames', 'colSums', 'data.frame', 'expand.grid', 'factor', 'grepl', 'is.na', 'library', 'max', 'mean', 'min', 'nrow', 'options', 'print', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'subset', 'sum', 'summary', 'Sys.time', 'table', 'which', 'confusionMatrix', 'train', 'trainControl', 'sample.split', 'bind_rows', 'glimpse', 'naiveBayes', 'svm', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_label', 'geom_text', 'geom_vline', 'ggplot', 'ggtitle', 'labs', 'position_dodge', 'position_stack', 'scale_x_continuous', 'xlab', 'theme_few', 'glue', 'legend', 'mosaicplot', 'plot', 'md.pattern', 'importance', 'randomForest', 'glm', 'median', 'predict', 'reorder', 'read.csv', 'write.csv']","['dplyr', 'randomForest', 'caret', 'mice', 'ggplot2', 'ggthemes', 'caTools', 'gbm', 'e1071', 'rpart', 'glue', 'base']",5.07001531521479,"['labs', 'as.ordered', 'nrow', 'geom_label', 'mean', 'geom_text', 'median', 'min', 'md.pattern', 'which', 'coord_flip', 'svm', 'glimpse', 'is.na', 'subset', 'colSums', 'glm', 'confusionMatrix', 'geom_boxplot', 'scale_x_continuous', 'options', 'print', 'theme_few', 'expand.grid', 'as.factor', 'summary', 'round', 'sapply', 'naiveBayes', 'geom_histogram', 'mosaicplot', 'geom_hline', 'importance', 'set.seed', 'xlab', 'Sys.time', 'factor', 'colnames', 'position_dodge', 'max', 'geom_bar', 'read.csv', 'position_stack', 'table', 'randomForest', 'row.names', 'c', 'train', 'aes', 'glue', 'as.numeric', 'sum', 'geom_vline', 'legend', 'plot', 'predict', 'reorder', 'bind_rows', 'ggtitle', 'data.frame', 'grepl', 'strsplit', 'ggplot', 'geom_density', 'write.csv', 'library', 'trainControl', 'cbind', 'sample.split', 'facet_grid']",[],"['jeetranjeet619-titanic-xgboost-example-in-r', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'skhawaja-titanic-disaster-survival-099', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic', 'erskumars-titanic-survival-eda-and-survival-rate-prediction']","[0.9637811502902219, 0.08741642362289165, 0.08549873411048792, 0.08201288143298475, 0.08201288143298475, 0.0801506193174812, 0.0801506193174812, 0.07619547464321581, 0.07619547464321581, 0.06921841330116625]","{'c(""package:mice"", ""package:base"")': ['cbind'], 'package:base': ['as.factor', 'as.numeric', 'as.ordered', 'c', 'colnames', 'colSums', 'data.frame', 'expand.grid', 'factor', 'grepl', 'is.na', 'library', 'max', 'mean', 'min', 'nrow', 'options', 'print', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'subset', 'sum', 'summary', 'Sys.time', 'table', 'which'], 'package:caret': ['confusionMatrix', 'train', 'trainControl'], 'package:caTools': ['sample.split'], 'package:dplyr': ['bind_rows', 'glimpse'], 'package:e1071': ['naiveBayes', 'svm'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_label', 'geom_text', 'geom_vline', 'ggplot', 'ggtitle', 'labs', 'position_dodge', 'position_stack', 'scale_x_continuous', 'xlab'], 'package:ggthemes': ['theme_few'], 'package:glue': ['glue'], 'package:graphics': ['legend', 'mosaicplot', 'plot'], 'package:mice': ['md.pattern'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['glm', 'median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:mice"", ""package:base"")"": [""cbind""], ""package:base"": [""as.factor"", ""as.numeric"", ""as.ordered"", ""c"", ""colnames"", ""colSums"", ""data.frame"", ""expand.grid"", ""factor"", ""grepl"", ""is.na"", ""library"", ""max"", ""mean"", ""min"", ""nrow"", ""options"", ""print"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""subset"", ""sum"", ""summary"", ""Sys.time"", ""table"", ""which""], ""package:caret"": [""confusionMatrix"", ""train"", ""trainControl""], ""package:caTools"": [""sample.split""], ""package:dplyr"": [""bind_rows"", ""glimpse""], ""package:e1071"": [""naiveBayes"", ""svm""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_label"", ""geom_text"", ""geom_vline"", ""ggplot"", ""ggtitle"", ""labs"", ""position_dodge"", ""position_stack"", ""scale_x_continuous"", ""xlab""], ""package:ggthemes"": [""theme_few""], ""package:glue"": [""glue""], ""package:graphics"": [""legend"", ""mosaicplot"", ""plot""], ""package:mice"": [""md.pattern""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""glm"", ""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackagemice packagebase cbind packagebase asfactor asnumeric asordered c colnames colSums dataframe expandgrid factor grepl isna library max mean min nrow options print round rownames sapply setseed strsplit subset sum summary Systime table which packagecaret confusionMatrix train trainControl packagecaTools samplesplit packagedplyr bindrows glimpse packagee1071 naiveBayes svm packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomlabel geomtext geomvline ggplot ggtitle labs positiondodge positionstack scalexcontinuous xlab packageggthemes themefew packageglue glue packagegraphics legend mosaicplot plot packagemice mdpattern packagerandomForest importance randomForest packagestats glm median predict reorder packageutils readcsv writecsv,"library(dplyr)
library(randomForest)
library(caret)
library(mice)
library(ggplot2)
library(ggthemes)
library(caTools)
library(gbm)
library(e1071)
library(rpart)
library(glue)
train = read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test = read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
complete_data = bind_rows(train, test)
complete_data$Survived = as.factor(complete_data$Survived)
complete_data$Pclass = as.ordered(complete_data$Pclass)
complete_data$Sex = as.factor(complete_data$Sex)
complete_data$Age = as.numeric(complete_data$Age)
complete_data$Embarked = as.factor(complete_data$Embarked)
cbind(colSums(is.na(complete_data)))
which(complete_data$Fare %in% NA)
complete_data[1044, ]
glue(""Mean of Fare for Pclass = 3 and Embarked = S : {mean(complete_data$Fare[complete_data$Pclass == '3' & complete_data$Embarked == 'S'], na.rm = T)}"")
glue(""Median of Fare for Pclass = 3 and Embarked = S : {median(complete_data$Fare[complete_data$Pclass == '3' & complete_data$Embarked == 'S'], na.rm = T)}"")
ggplot(complete_data[complete_data$Pclass == ""3"" & complete_data$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""green"", alpha = 0.9) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + geom_vline(aes(xintercept = mean(Fare, na.rm = T)), colour = ""blue"", linetype = ""dashed"", lwd = 1) + theme_few() + labs(title = ""Density Plot for Fare Distribution with Pclass = 3 and Embarked = S"")
complete_data$Fare[1044] = median(complete_data$Fare[complete_data$Pclass == 3 & complete_data$Embarked == ""S""], na.rm = T)
glue(""Total NAs in Age : {sum(is.na(complete_data$Age))}."")
glue(""Mean of Age :  {mean(complete_data$Age, na.rm = T)}"")
glue(""Median of Age :  {median(complete_data$Age, na.rm = T)}"")
ggplot(data = complete_data, aes(x = Age, y = Age)) + geom_boxplot() + labs(title = ""Age Distribution"", x = ""Age"")
ggplot(data = complete_data, aes(x = Age)) + geom_density(fill = ""#B86997"", alpha = 0.8) + geom_vline(aes(xintercept = median(Age, na.rm = T)), colour = ""black"", linetype = ""dashed"", lwd = 1) + geom_vline(aes(xintercept = mean(Age, na.rm = T)), colour = ""blue"", linetype = ""dashed"", lwd = 1) + labs(title = ""Fare Distribution"")
complete_data$Age[is.na(complete_data$Age) == T] = median(complete_data$Age, na.rm = TRUE)
sum(is.na(complete_data$Cabin) | complete_data$Cabin == """")
glue(""NA/empty rows in Embarked Column : {sum(is.na(complete_data$Embarked) | complete_data$Embarked == '')}"")
which(is.na(complete_data$Embarked) | complete_data$Embarked == """")
complete_data[c(62, 830), ]
table(complete_data$Embarked[complete_data$Pclass == 1 & complete_data$Fare >= 75 & complete_data$Fare <= 85 & complete_data$Sex == ""female""])
mean(complete_data$Fare[complete_data$Pclass == 1 & complete_data$Sex == ""female""])
median(complete_data$Fare[complete_data$Pclass == 1 & complete_data$Sex == ""female""])
mean(complete_data$Fare[complete_data$Embarked == ""C"" & complete_data$Pclass == 1 & complete_data$Sex == ""female""])
mean(complete_data$Fare[complete_data$Embarked == ""S"" & complete_data$Pclass == 1 & complete_data$Sex == ""female""])
median(complete_data$Fare[complete_data$Embarked == ""C"" & complete_data$Pclass == 1 & complete_data$Sex == ""female""])
median(complete_data$Fare[complete_data$Embarked == ""S"" & complete_data$Pclass == 1 & complete_data$Sex == ""female""])
ggplot(complete_data[complete_data$Sex == ""female"", ], aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + theme_few()
complete_data$Embarked[c(62, 830)] = ""S""
ggplot(complete_data[1:891, ], aes(x = Pclass, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"") + labs(title = ""Survival By Passenger Class"", x = ""Passenger Class"") + theme_few() + geom_label(stat = ""count"", position = position_dodge(width = 1), hjust = ""center"", aes(label = ..count..))
for (i in 1:nrow(complete_data)) {
    if (grepl(pattern = ""Mr. "", x = complete_data$Name[i], ignore.case = TRUE) == 1) {
        complete_data$Title[i] = ""Mr""
    }
    else if (grepl(pattern = ""Mrs. "", x = complete_data$Name[i], ignore.case = TRUE) == 1) {
        complete_data$Title[i] = ""Mrs""
    }
    else if (grepl(pattern = ""Miss. "", x = complete_data$Name[i], ignore.case = TRUE) == 1) {
        complete_data$Title[i] = ""Miss""
    }
    else if (grepl(pattern = ""Master. "", x = complete_data$Name[i], ignore.case = TRUE) == 1) {
        complete_data$Title[i] = ""Master""
    }
    else {
        complete_data$Title[i] = ""Rare""
    }
}
complete_data$Title = as.factor(complete_data$Title)
sum(is.na(complete_data$Title))
cbind(table(complete_data$Title))
ggplot(complete_data[1:891, ], aes(x = Title, fill = Survived)) + geom_histogram(stat = ""count"", position = ""dodge"") + labs(title = ""Title Wise Survival"", x = ""Title"", y = ""Count"") + geom_label(stat = ""count"", position = position_dodge(width = 1), hjust = ""middle"", aes(label = ..count..)) + theme_few()
complete_data$Surname = sapply(complete_data$Name, function(x) strsplit(x, ""[,.]"")[[1]][1])
complete_data$Surname = as.factor(complete_data$Surname)
glue(""Number of Distinct Surname : {n_distinct(complete_data$Surname)}"")
complete_data$Fsize = complete_data$SibSp + complete_data$Parch + 1
ggplot(complete_data[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(min(complete_data$Fsize):max(complete_data$Fsize))) + labs(title = ""Survival Based on Family Size"", x = ""Family Size"", label = ""Survived"") + theme_few()
complete_data$FsizeDiscrete[complete_data$Fsize == 1] = ""Singleton""
complete_data$FsizeDiscrete[complete_data$Fsize <= 5 & complete_data$Fsize > 1] = ""Small""
complete_data$FsizeDiscrete[complete_data$Fsize > 5] = ""Large""
complete_data$FsizeDiscrete = as.factor(complete_data$FsizeDiscrete)
mosaicplot(table(complete_data$FsizeDiscrete, complete_data$Survived), main = ""Survival by Family Size "", shade = TRUE)
complete_data$Solo = ""No""
complete_data$Solo[complete_data$SibSp == 0 & complete_data$Parch == 0] = ""Yes""
complete_data$Solo = as.factor(complete_data$Solo)
ggplot(data = complete_data[1:891, ], aes(x = Solo, fill = as.factor(Survived))) + geom_bar(stat = ""Count"", position = ""dodge"") + labs(title = ""Solo Traveller Survival"", x = ""Solo Traveller ?"") + geom_label(stat = ""count"", position = position_dodge(width = 1), hjust = ""center"", aes(label = ..count..))
for (i in 1:nrow(complete_data)) {
    if (complete_data$Age[i] <= 4) {
        complete_data$AgeGroup[i] = ""Infant""
    }
    else if (complete_data$Age[i] > 4 & complete_data$Age[i] <= 10) {
        complete_data$AgeGroup[i] = ""Child""
    }
    else if (complete_data$Age[i] > 10 & complete_data$Age[i] <= 18) {
        complete_data$AgeGroup[i] = ""Young""
    }
    else if (complete_data$Age[i] > 18 & complete_data$Age[i] <= 50) {
        complete_data$AgeGroup[i] = ""Adults""
    }
    else {
        complete_data$AgeGroup[i] = ""Old""
    }
}
complete_data$AgeGroup = as.factor(complete_data$AgeGroup)
ggplot(complete_data[1:891, ], aes(x = AgeGroup, fill = Survived)) + geom_bar(stat = ""count"", position = ""stack"") + labs(title = ""Survival By Age Group"", x = ""Age Group"") + theme_few()
ggplot(complete_data[1:891, ], aes(x = AgeGroup, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"") + labs(title = ""Survival By Age Group"", x = ""Age Group"") + theme_few() + geom_label(stat = ""count"", position = position_dodge(width = 1), hjust = ""center"", aes(label = ..count..))
complete_data$Mother = ""Not Mother""
complete_data$Mother[complete_data$Sex == ""female"" & complete_data$Parch > 0 & complete_data$Age > 18 & complete_data$Title != ""Miss""] = ""Mother""
complete_data$Mother = as.factor(complete_data$Mother)
ggplot(complete_data[1:891, ], aes(x = Mother, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"") + labs(title = ""Survival for Mothers"", x = ""Mother"") + geom_label(stat = ""count"", position = position_dodge(width = 1), hjust = ""center"", aes(label = ..count..)) + theme_few()
ggplot(complete_data[1:891, ], aes(Age, fill = Survived)) + geom_histogram() + facet_grid(. ~ Sex) + theme_few() + ggtitle(""Survival by Age and Gender"")
ggplot(data = complete_data[1:891, ], aes(x = Survived, y = Fare, fill = Survived)) + geom_boxplot() + xlab(""Fare Box plot"")
ggplot(data = complete_data[1:891, ], aes(x = Fare, fill = Survived)) + geom_density(alpha = 0.7) + labs(title = ""Fare Density Plot"", x = ""Fare"")
glimpse(complete_data)
md.pattern(complete_data[1:891, ])
train_set = complete_data[1:891, ]
test_set = complete_data[892:nrow(complete_data), ]
test_set$Survived = NULL
glm_model = glm(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + Fsize + FsizeDiscrete + AgeGroup + Mother + Solo, data = train_set, family = ""binomial"")
summary(glm_model)
plot(glm_model)
glm_pred = predict(glm_model, test_set)
glm_sub = data.frame(PassengerId = test_set$PassengerId, Survived = glm_pred)
nb_fit = naiveBayes(formula = factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + Fsize + FsizeDiscrete + AgeGroup + Mother + Solo, data = train_set)
summary(nb_fit)
nb_pred = predict(nb_fit, test_set)
nb_result = data.frame(PassengerId = test_set$PassengerId, Survived = nb_pred)
write.csv(nb_result, ""nb_sub.csv"", row.names = F)
svm_fit = svm(formula = factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + Fsize + FsizeDiscrete + AgeGroup + Mother + Solo, data = train_set, kernel = ""linear"", cost = 10, scale = FALSE)
summary(svm_fit)
svm_pred = predict(svm_fit, test_set)
svm_result = data.frame(PassengerId = test_set$PassengerId, Survived = svm_pred)
write.csv(svm_result, ""svm_linear_result.csv"", row.names = F)
train_control = trainControl(method = ""repeatedcv"", number = 10, repeats = 5, search = ""grid"")
tune_grid = expand.grid(.mtry = c(1:13))
start_time <- Sys.time()
rf_model = train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + Fsize + FsizeDiscrete + AgeGroup + Mother + Solo, data = train_set, method = ""rf"", trControl = train_control, tuneGrid = tune_grid, ntree = 70, verbose = TRUE, metric = ""Accuracy"")
end_time <- Sys.time()
duration <- (end_time - start_time)
print(duration)
rf_model$results
summary(rf_model)
plot(rf_model)
pred1 = predict(rf_model, test_set)
submission_rf1 = data.frame(PassengerId = test_set$PassengerId, Survived = pred1)
write.csv(submission_rf1, ""submission_rf1.csv"", row.names = FALSE)
set.seed(123)
split = sample.split(Y = train_set$Survived, SplitRatio = 0.8)
training_set = subset(train_set, split == TRUE)
validation_set = subset(train_set, split = FALSE)
rf_model2 = randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + Fsize + FsizeDiscrete + AgeGroup + Mother + Solo, data = training_set)
plot(rf_model2)
legend(""topright"", colnames(rf_model2$err.rate), col = 1:3, fill = 1:3)
pred2 = predict(rf_model2, validation_set)
confusionMatrix(validation_set$Survived, pred2)
result = predict(rf_model2, test_set)
submission_rf2 = data.frame(PassengerId = test_set$PassengerId, Survived = result)
write.csv(submission_rf2, ""submission_rf2.csv"", row.names = FALSE)
F_importance = importance(rf_model2)
F_importance = data.frame(Features = row.names(F_importance), Importance = round(F_importance[, ""MeanDecreaseGini""], 2))
ggplot(F_importance, aes(x = reorder(Features, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + coord_flip() + geom_text(aes(x = Features, label = Importance, color = ""orange""), position = position_stack(vjust = 0.5)) + labs(title = ""Feature Importance"")
confusionMatrix(pred1, result)
gbmControl = trainControl(method = ""repeatedcv"", number = 10, repeats = 5, search = ""grid"")
gbmGrid <- expand.grid(interaction.depth = c(1, 3, 5), n.trees = c(500, 1000, 2000, 5000), shrinkage = c(0.01, 0.005, 0.001, 1e-04), n.minobsinnode = c(1, 3, 5, 10))
options(warn = -1)
start = Sys.time()
gbm_caret_model = train(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + Fsize + FsizeDiscrete + AgeGroup + Mother, data = train_set, method = ""gbm"", distribution = ""bernoulli"", metric = ""Accuracy"", trControl = gbmControl, tuneGrid = gbmGrid, train.fraction = 0.5, bag.fraction = 0.5, verbose = T)
end = Sys.time()
print(end - start)
gbm_caret_result = predict(gbm_caret_model, test_set)
gbm_caret_sub = data.frame(PassengerId = test_set$PassengerId, Survived = gbm_caret_result)
write.csv(gbm_caret_sub, ""gbm_caret_sub.csv"", row.names = F)",1,0,1,1,0,0,0,1,0,1,0,1,0,0
120,caleblau-predicting-survival-on-the-titanic,0.7509999999999999,"['user defined', 'user defined', 'user defined', 'c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'row.names', 'sapply', 'set.seed', 'sum', 'table', 'arrange', 'bind_rows', 'desc', 'aes', 'geom_bar', 'geom_histogram', 'ggplot', 'labs', 'scale_fill_manual', 'plot', 'grid.arrange', 'complete', 'mice', 'importance', 'randomForest', 'predict', 'read.csv', 'str', 'write.csv']","['dplyr', 'ggplot2', 'gridExtra', 'mice', 'randomForest', 'base']",22.435478925705,"['labs', 'complete', 'is.na', 'sapply', 'mice', 'geom_histogram', 'importance', 'str', 'desc', 'set.seed', 'gsub', 'scale_fill_manual', 'factor', 'arrange', 'geom_bar', 'grid.arrange', 'read.csv', 'table', 'randomForest', 'row.names', 'c', 'aes', 'sum', 'plot', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'ggplot', 'user defined', 'library']",[],"['anthobau-random-forest-titanic', 'quark6-titanic-work', 'imitation-exploring-survival-on-the-titanic', 'supriya675-titanic-prediction-simplified-for-beginners', 'cganxs-is-62-the-right-titanic-model-threshold', 'stevengolo-titanic-machine-learning-from-disaster', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'erskumars-titanic-survival-eda-and-survival-rate-prediction', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic']","[0.9609764008020771, 0.7604584922301664, 0.6623063599145674, 0.5004592339423684, 0.4406008715456975, 0.16306163414823288, 0.1522570788805482, 0.1522570788805482, 0.14995692762647006, 0.14985175781063115]","{'character(0)': ['set'], 'package:base': ['c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'row.names', 'sapply', 'set.seed', 'sum', 'table'], 'package:dplyr': ['arrange', 'bind_rows', 'desc'], 'package:ggplot2': ['aes', 'geom_bar', 'geom_histogram', 'ggplot', 'labs', 'scale_fill_manual'], 'package:graphics': ['plot'], 'package:gridExtra': ['grid.arrange'], 'package:mice': ['complete', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""character(0)"": [""set""], ""package:base"": [""c"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""library"", ""row.names"", ""sapply"", ""set.seed"", ""sum"", ""table""], ""package:dplyr"": [""arrange"", ""bind_rows"", ""desc""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""geom_histogram"", ""ggplot"", ""labs"", ""scale_fill_manual""], ""package:graphics"": [""plot""], ""package:gridExtra"": [""grid.arrange""], ""package:mice"": [""complete"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",character0 set packagebase c dataframe factor gsub isna library rownames sapply setseed sum table packagedplyr arrange bindrows desc packageggplot2 aes geombar geomhistogram ggplot labs scalefillmanual packagegraphics plot packagegridExtra gridarrange packagemice complete mice packagerandomForest importance randomForest packagestats predict packageutils readcsv str writecsv,"knitr::opts_chunk$set(echo = TRUE, fig.width = 10, fig.align = ""center"")
library(dplyr)
library(ggplot2)
library(gridExtra)
library(mice)
library(randomForest)
train <- read.csv(""../input/train.csv"")
str(train, give.attr = FALSE)
group_colors <- c(`0` = ""tomato"", `1` = ""limegreen"", male = ""skyblue"", female = ""pink"")
train$Survived <- factor(train$Survived)
ggplot(train, aes(x = Survived)) + geom_bar(fill = c(`0` = ""tomato"", `1` = ""limegreen"")) + labs(title = ""Survival on the Titanic"", x = ""Survival"", y = ""Number of Passengers"")
ggplot(train, aes(x = Sex)) + geom_bar(aes(fill = Survived), position = ""fill"") + scale_fill_manual(values = group_colors) + labs(title = ""Survival by Sex"", x = ""Sex"", y = ""Proportion of Passengers"")
ggplot(train, aes(x = Age)) + geom_histogram(aes(fill = Sex), binwidth = 2) + scale_fill_manual(values = group_colors) + labs(title = ""Distribution of Passenger Age by Sex"", x = ""Age"", y = ""Number of Passengers"")
ggplot(train, aes(x = Age)) + geom_histogram(aes(fill = Survived), binwidth = 2) + scale_fill_manual(values = group_colors) + labs(title = ""Distribution of Passenger Age by Survival"", x = ""Age"", y = ""Number of Passengers"")
ggplot(train, aes(x = Pclass)) + geom_bar(aes(fill = Survived)) + scale_fill_manual(values = group_colors) + labs(title = ""Distribution of Passenger Class by Survival"", x = ""Passenger Class"", y = ""Number of Passengers"")
ggplot(train, aes(x = Fare)) + geom_histogram(aes(fill = Survived), binwidth = 10) + scale_fill_manual(values = group_colors) + labs(title = ""Distribution of Journey Fare by Survival"", x = ""Fare Paid"", y = ""Number of Passengers"")
ggplot(train, aes(x = Embarked)) + geom_bar(aes(fill = Survived)) + scale_fill_manual(values = group_colors) + labs(title = ""Distribution of Journey Origin by Survival"", x = ""Origin (port of embarkment)"", y = ""Number of Passengers"")
test <- read.csv(""../input/test.csv"")
test$Survived <- NA
combined <- bind_rows(train, test)
str(combined, give.attr = FALSE)
sapply(combined, function(x) sum(is.na(x)))
combined$Survived <- factor(combined$Survived)
combined$Pclass <- factor(combined$Pclass)
combined$Sex <- factor(combined$Sex)
combined$Embarked <- factor(combined$Embarked)
str(combined, give.attr = FALSE)
set.seed(1234)
imputes <- mice(combined[c(""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked"")], method = ""rf"")
imputes_output <- complete(imputes)
impute_age <- ggplot(imputes_output, aes(x = Age)) + geom_histogram(binwidth = 2, fill = ""thistle"") + labs(x = ""Imputed Age"")
age <- ggplot(train, aes(x = Age)) + geom_histogram(binwidth = 2)
grid.arrange(age, impute_age, ncol = 2)
impute_fare <- ggplot(imputes_output, aes(x = Fare)) + geom_histogram(binwidth = 10, fill = ""thistle"") + labs(x = ""Imputed Fare Paid"")
fare <- ggplot(train, aes(x = Fare)) + geom_histogram(binwidth = 10) + labs(x = ""Fare Paid"")
grid.arrange(fare, impute_fare, ncol = 2)
impute_embarked <- ggplot(imputes_output, aes(x = Embarked)) + geom_bar(fill = ""thistle"") + labs(x = ""Imputed Origin"")
embarked <- ggplot(train, aes(x = Embarked)) + geom_bar() + labs(x = ""Origin"")
grid.arrange(embarked, impute_embarked, ncol = 2)
combined$Age <- imputes_output$Age
combined$Fare <- imputes_output$Fare
combined$Embarked <- imputes_output$Embarked
sapply(combined, function(x) sum(is.na(x)))
combined$Title <- factor(gsub(""(.*, )|(\\..*)"", """", combined$Name))
table(combined$Title)
combined$FamSize <- combined$SibSp + combined$Parch + 1
ggplot(combined, aes(x = FamSize)) + geom_bar() + labs(x = ""Family Size"", y = ""Number of Passengers"", title = ""Family Size of Passengers"")
combined$child <- NA
combined$child[combined$Age <= 16] <- TRUE
combined$child[combined$Age > 16] <- FALSE
str(combined, give.attr = FALSE)
train <- combined[1:891, ]
test <- combined[892:1309, ]
rf_titanic <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamSize + child, data = train, ntree = 1000)
rf_titanic
plot(rf_titanic)
vimp <- importance(rf_titanic)
vimp_df <- data.frame(Var = row.names(vimp), vimp)
vimp_df %>% arrange(desc(MeanDecreaseGini))
predicted <- predict(rf_titanic, newdata = test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = predicted)
write.csv(solution, ""solution.csv"", row.names = FALSE)
set.seed(1234)
combined2 <- combined
imputetest <- mice(combined2[c(""Survived"", ""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked"")], method = ""rf"")
imputetest_output <- complete(imputetest)
combined2$Survived <- imputetest_output$Survived
solution2 <- data.frame(PassengerId = combined2$PassengerId, Survived = combined2$Survived)
write.csv(solution2[892:1309, ], ""solution2.csv"", row.names = FALSE)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
121,oldflag-exploring-survival-on-the-titanic-inr-frommegan,0.7440000000000001,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'dim', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",27.814568042755102,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'dim', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic', 'datascikrid-exploring-survival-on-the-titanic', 'anishmayaramka-the-titanic-datset', 'aturner-exploring-survival-on-the-titanic']","[0.9997329727732573, 0.9997329727732573, 0.9997329727732573, 0.9997329727732573, 0.9997329727732573, 0.9997329727732573, 0.9997329727732573, 0.9997329727732573, 0.9997329727732573, 0.9997329727732573]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'dim', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""dim"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe dim factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
dim(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
122,panda1023-svm-example-for-titanic,0.754,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.factor', 'c', 'data.frame', 'is.na', 'library', 'return', 'set.seed', 'svm', 'median', 'predict', 'read.csv', 'write.csv']","['ggplot2', 'e1071', 'base']",0.686197996139526,"['predict', 'write.csv', 'median', 'data.frame', 'read.csv', 'as.factor', 'user defined', 'library', 'return', 'svm', 'c', 'is.na', 'set.seed']",[],"['fredman-titanic-barebones-benchmark-r', 'francoisolivier-fork-of-titanic-20', 'johno883-john-orr-titanic-random-forest', 'francoisolivier-titanic-20', 'areebaatif-titanic', 'zhxiangxyang-titanic', 'econdata-machine-learning-on-titanic-dataset', 'yinpatt-patrick-s-titanic', 'diegosiebra-rf-titanic-prediction-th3one', 'manskj-machine-learning-and-titanic']","[0.9037583935639542, 0.8864274689554033, 0.8381508461208989, 0.8277987800640991, 0.8277987800640991, 0.8277987800640991, 0.8234754761810333, 0.7537665065827318, 0.7512111429324929, 0.5967651219021826]","{'character(0)': ['extractFeatures'], 'package:base': ['as.factor', 'c', 'data.frame', 'is.na', 'library', 'return', 'set.seed'], 'package:e1071': ['svm'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""extractFeatures""], ""package:base"": [""as.factor"", ""c"", ""data.frame"", ""is.na"", ""library"", ""return"", ""set.seed""], ""package:e1071"": [""svm""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 extractFeatures packagebase asfactor c dataframe isna library return setseed packagee1071 svm packagestats median predict packageutils readcsv writecsv,"library(ggplot2)
library(""e1071"")
set.seed(1)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
extractFeatures <- function(data) {
    features <- c(""Pclass"", ""Age"", ""Sex"", ""Parch"", ""SibSp"", ""Fare"", ""Embarked"")
    fea <- data[, features]
    fea$Age[is.na(fea$Age)] <- -1
    fea$Fare[is.na(fea$Fare)] <- median(fea$Fare, na.rm = TRUE)
    fea$Embarked[fea$Embarked == """"] = ""S""
    fea$Sex <- as.factor(fea$Sex)
    fea$Embarked <- as.factor(fea$Embarked)
    return(fea)
}
svm_model <- svm(as.factor(train$Survived) ~ ., data = extractFeatures(train))
submission_svm <- data.frame(PassengerId = test$PassengerId)
submission_svm$Survived <- predict(svm_model, extractFeatures(test))
write.csv(submission_svm, file = ""1_svm_r_submission.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,0,0,1,0,0
123,zakhumalo-fork-of-titanic-problem-attempt-1,0.77,"['colnames', 'colSums', 'data.frame', 'dim', 'is.na', 'library', 'list.files', 'mean', 'prop.table', 'rbind', 'round', 'summary', 'table', 'fancyRpartPlot', 'rpart', 'complete.cases', 'predict', 'read.csv', 'str', 'write.csv']","['ggplot2', 'readr', 'rpart', 'rpart', 'rattle', 'rpart.plot', 'RColorBrewer', 'base']",1.07886600494385,"['mean', 'is.na', 'colSums', 'prop.table', 'rpart', 'summary', 'round', 'str', 'colnames', 'dim', 'read.csv', 'table', 'fancyRpartPlot', 'rbind', 'predict', 'write.csv', 'list.files', 'data.frame', 'library', 'complete.cases']",[],"['utkarsh1997-kaggle-titanic-rf', 'pradeeptripathi-prediction-of-titanic-survival-using-r', 'pradeeptripathi-prediction-of-titanic-survival-using-random-forest', 'paulbisto-r-titanic-script-practice', 'predact-easy-r-titanic-predictive-model', 'lokesharun-titanic', 'suraj915-titanic-suraj', 'mailakshdeep-titanic-survival-prediction-r', 'pavani2018-titanicr-random-forests', 'acrespop-titanic1']","[0.701183240935583, 0.6996415237962033, 0.6989829924748462, 0.6967641773583941, 0.6957690322874363, 0.677497427381989, 0.671563865702173, 0.6543391702031259, 0.642350449913038, 0.6418532556723044]","{'package:base': ['colnames', 'colSums', 'data.frame', 'dim', 'is.na', 'library', 'list.files', 'mean', 'prop.table', 'rbind', 'round', 'summary', 'table'], 'package:rattle': ['fancyRpartPlot'], 'package:rpart': ['rpart'], 'package:stats': ['complete.cases', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""colnames"", ""colSums"", ""data.frame"", ""dim"", ""is.na"", ""library"", ""list.files"", ""mean"", ""prop.table"", ""rbind"", ""round"", ""summary"", ""table""], ""package:rattle"": [""fancyRpartPlot""], ""package:rpart"": [""rpart""], ""package:stats"": [""complete.cases"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase colnames colSums dataframe dim isna library listfiles mean proptable rbind round summary table packagerattle fancyRpartPlot packagerpart rpart packagestats completecases predict packageutils readcsv str writecsv,"library(ggplot2)
library(readr)
list.files(""../input"")
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
str(train)
dim(train)
dim(test)
str(test)
check <- colnames(train) %in% colnames(test)
colnames(train[check == F])
ts <- table(train$Survived)
ts
prop.table(ts)
tsg <- table(train$Sex, train$Survived)
tsg
prop.table(tsg, margin = 1)
tf <- test
tf$Survived <- 0
tf$Survived[tf$Sex == ""female""] <- 1
solution <- data.frame(PassengerId = tf$PassengerId, Survived = tf$Survived)
colSums(is.na(train))
colSums(is.na(test))
Train <- train
Test <- test
Test$Survived <- NA
titanic <- rbind(Train, Test)
summary(titanic)
titanic[!complete.cases(titanic$Fare), ]
titanic$Fare[1044] <- mean(titanic$Fare, na.rm = TRUE)
titanic[!complete.cases(titanic$Fare), ]
library(rpart)
fit_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked, data = titanic[is.na(titanic$Age), ], method = ""anova"")
titanic$Age[is.na(titanic$Age)] <- predict(fit_age, titanic[is.na(titanic$Age), ])
library(rpart)
fit_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked, data = titanic[!is.na(titanic$Age), ], method = ""anova"")
titanic$Age[is.na(titanic$Age)] <- predict(fit_age, titanic[is.na(titanic$Age), ])
train2 <- titanic[1:891, ]
test2 <- titanic[892:1309, ]
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fit <- rpart(Survived ~ Pclass + Sex + Fare + Age + SibSp + Parch + Embarked, data = train2, method = ""class"")
fancyRpartPlot(fit)
round(prop.table(table(train2$Survived)), 2)
round(prop.table(table(train2$Sex, train2$Survived), margin = 1), 2)
my_pred <- predict(fit, newdata = test2, type = ""class"")
solution2 <- data.frame(PassengerId = test2$PassengerId, Survived = my_pred)
write.csv(solution2, file = ""Tsolution.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,1,0,0,0,0
124,narinder-titanic-survival-prediction,0.754,"['c', 'cbind', 'data.frame', 'ifelse', 'is.na', 'is.numeric', 'library', 'mean', 'names', 'ncol', 'set.seed', 'summary', 'system', 'auc', 'write_csv', 'binomial', 'glm', 'predict', 'read.csv']","['ggplot2', 'readr', 'pROC', 'base']",0.8341159820556641,"['mean', 'is.numeric', 'write_csv', 'is.na', 'glm', 'auc', 'names', 'ncol', 'summary', 'set.seed', 'read.csv', 'binomial', 'c', 'ifelse', 'predict', 'data.frame', 'library', 'cbind', 'system']",[],"['joelweiss-titanic-data-r', 'cnusapbo-titanic-r-code', 'jacekpardyak-mytitanicscript', 'prabhulingayya-titanic-prediction-using-logistic-regression', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'goblin-titanic-test', 'garciparedes-titanic-getting-started', 'liudj2008-fork-of-titanic', 'liudj2008-titanic']","[0.1642049885454565, 0.16361192667342864, 0.16295354714535626, 0.16271653049390122, 0.14824823809170745, 0.14824823809170745, 0.140371380837522, 0.13124401820366996, 0.12948036301403365, 0.12914516581430013]","{'package:base': ['c', 'cbind', 'data.frame', 'ifelse', 'is.na', 'is.numeric', 'library', 'mean', 'names', 'ncol', 'set.seed', 'summary', 'system'], 'package:pROC': ['auc'], 'package:readr': ['write_csv'], 'package:stats': ['binomial', 'glm', 'predict'], 'package:utils': ['read.csv']}","{""package:base"": [""c"", ""cbind"", ""data.frame"", ""ifelse"", ""is.na"", ""is.numeric"", ""library"", ""mean"", ""names"", ""ncol"", ""set.seed"", ""summary"", ""system""], ""package:pROC"": [""auc""], ""package:readr"": [""write_csv""], ""package:stats"": [""binomial"", ""glm"", ""predict""], ""package:utils"": [""read.csv""]}",packagebase c cbind dataframe ifelse isna isnumeric library mean names ncol setseed summary system packagepROC auc packagereadr writecsv packagestats binomial glm predict packageutils readcsv,"library(ggplot2)
library(readr)
library(pROC)
system(""ls ../input"")
my.train.data <- read.csv(""../input/train.csv"")
my.test.data <- read.csv(""../input/test.csv"")
my.train.data
my.train.data$Cabin <- ifelse(is.na(my.train.data$Cabin), ""NA"", my.train.data$Cabin)
drop.cols <- c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"")
my.train.data <- my.train.data[, !names(my.train.data) %in% drop.cols]
for (i in 1:ncol(my.train.data)) {
    if (is.numeric(my.train.data[, i])) {
        my.train.data[is.na(my.train.data[, i]), i] <- mean(my.train.data[, i], na.rm = TRUE)
    }
}
for (i in 1:ncol(my.test.data)) {
    if (is.numeric(my.test.data[, i])) {
        my.test.data[is.na(my.test.data[, i]), i] <- mean(my.test.data[, i], na.rm = TRUE)
    }
}
set.seed(1313)
analysis <- glm(Survived ~ ., data = my.train.data, family = binomial(link = ""logit""))
summary(analysis)
score <- data.frame(Survived = predict(analysis, newdata = my.test.data, type = ""response""))
score_train <- data.frame(Prediction = predict(analysis, newdata = my.train.data, type = ""response""))
auc(my.train.data$Survived, score_train$Prediction)
score$Survived <- ifelse(score$Survived > 0.5, 1, 0)
complete <- cbind(my.test.data, score)
write_csv(complete[, c(""PassengerId"", ""Survived"")], path = ""myPredictions.csv"")",0,0,0,0,0,0,0,0,0,0,0,0,0,0
125,jprukundo-titanic-in-r-with-naive-bayes-of-mlr-package,0.7509999999999999,"['as.data.frame', 'c', 'cbind', 'colnames', 'library', 'makeClassifTask', 'makeLearner', 'train', 'predict', 'head', 'read.csv', 'write.csv']","['mlr', 'base']",1.9401149749755904,"['colnames', 'predict', 'write.csv', 'makeLearner', 'read.csv', 'head', 'library', 'as.data.frame', 'cbind', 'train', 'c', 'makeClassifTask']",[],"['arpitr-titanic-survival', 'tsfitz-titanic', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'danr87946-titanic-practice', 'gravitymhxy2-titanic', 'stevencahill-titanic-machine-learning-from-disaster', 'seajaye-titanic-logistic-regression-0-78947', 'jerlinraj-titanic-machine-learning-from-disaster', 'mattrb-titanic']","[0.3433237074162516, 0.2513479308545781, 0.2320337536138189, 0.2306053137986974, 0.22260194300860492, 0.20821405706631566, 0.19944043903825573, 0.1958313487977691, 0.19536662554084186, 0.19104974344734527]","{'package:base': ['as.data.frame', 'c', 'cbind', 'colnames', 'library'], 'package:mlr': ['makeClassifTask', 'makeLearner', 'train'], 'package:stats': ['predict'], 'package:utils': ['head', 'read.csv', 'write.csv']}","{""package:base"": [""as.data.frame"", ""c"", ""cbind"", ""colnames"", ""library""], ""package:mlr"": [""makeClassifTask"", ""makeLearner"", ""train""], ""package:stats"": [""predict""], ""package:utils"": [""head"", ""read.csv"", ""write.csv""]}",packagebase asdataframe c cbind colnames library packagemlr makeClassifTask makeLearner train packagestats predict packageutils head readcsv writecsv,"library(mlr)
train = read.csv(""../input/train.csv"", header = TRUE)
test = read.csv(""../input/test.csv"", header = TRUE)
features = c(""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked"")
featuresTarget = c(""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked"", ""Survived"")
train_data = train[, featuresTarget]
test_data = test[, features]
PassengerId = test[, ""PassengerId""]
task = makeClassifTask(data = train_data, target = ""Survived"")
lrn = makeLearner(""classif.naiveBayes"")
model = train(lrn, task)
pred = as.data.frame(predict(model, newdata = test_data))
colnames(pred) = c(""Survived"")
PassengerIdPred = cbind(PassengerId, pred)
write.csv(PassengerIdPred, file = ""PassengerId Survived.csv"", row.names = FALSE)
head(PassengerIdPred)",0,0,0,0,0,0,0,0,0,0,0,0,0,0
126,brirush-randomforest-implementation-of-titanic,0.768,"['as.factor', 'as.numeric', 'c', 'cbind', 'colnames', 'data.frame', 'is.na', 'levels', 'library', 'summary', 'typeof', 'randomForest', 'predict', 'read.csv', 'str', 'write.csv']","['randomForest', 'base']",0.5678579807281489,"['colnames', 'as.numeric', 'typeof', 'predict', 'write.csv', 'data.frame', 'read.csv', 'randomForest', 'as.factor', 'summary', 'library', 'cbind', 'str', 'c', 'is.na', 'levels']",[],"['liudj2008-fork-of-titanic', 'liudj2008-titanic', 'seajaye-titanic-logistic-regression-0-78947', 'brirush-svm-for-titanic', 'ezhilvelme-titanic-neural-network-c-4-2', 'aer503-svm-for-titanic', 'annafreydenzon-titanic-machine-learning-from-disaster', 'tobybot11-toby-s-titanic-analysis', 'jacekpardyak-mytitanicscript', 'peggy88-titanic-data-eda-by-peggy']","[0.6207687514238172, 0.619555260083933, 0.5799996933800355, 0.5773286417801304, 0.5658840970531664, 0.5432491042146181, 0.5356518066388777, 0.48892881365159485, 0.4821851903458181, 0.4787432238328935]","{'package:base': ['as.factor', 'as.numeric', 'c', 'cbind', 'colnames', 'data.frame', 'is.na', 'levels', 'library', 'summary', 'typeof'], 'package:randomForest': ['randomForest'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""as.factor"", ""as.numeric"", ""c"", ""cbind"", ""colnames"", ""data.frame"", ""is.na"", ""levels"", ""library"", ""summary"", ""typeof""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase asfactor asnumeric c cbind colnames dataframe isna levels library summary typeof packagerandomForest randomForest packagestats predict packageutils readcsv str writecsv,"library(randomForest)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
train <- train[, c(""Survived"", ""Fare"", ""SibSp"", ""Parch"", ""Sex"")]
test <- test[, c(""Fare"", ""SibSp"", ""PassengerId"", ""Parch"", ""Sex"")]
test$Fare <- as.numeric(test$Fare)
train$Fare <- as.numeric(train$Fare)
summary(train)
summary(test)
train$Survived <- as.factor(train$Survived)
test[is.na(test)] <- 0
train[is.na(train)] <- 0
train.rf <- randomForest(Survived ~ Fare + SibSp + Parch + Sex, data = train, type = ""response"")
train.prediction <- predict(train.rf, test)
train.prediction <- as.numeric(levels(train.prediction))[train.prediction]
train.prediction[is.na(train.prediction)] <- 0
typeof(train.prediction)
summary(train.prediction)
str(train.prediction)
output <- data.frame(test$PassengerId, train.prediction)
colnames(output) <- cbind(""PassengerId"", ""Survived"")
write.csv(output, file = ""Rushton_Solution.csv"", row.names = F)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
127,zhaotianjing-titanic,0.648,"['data.frame', 'rep', 'table', 'read.csv', 'str', 'write.csv']",['base'],0.28095602989196805,"['write.csv', 'data.frame', 'read.csv', 'table', 'rep', 'str']",[],"['sudheer464-prediction-1-on-titanic-dataset', 'sawajid-titanic-test', 'jerlinraj-titanic-machine-learning-from-disaster', 'scout16-titanic-disaster-in-r', 'mihaque313-first-submission-to-titanic-problem', 'stevencahill-titanic-machine-learning-from-disaster', 'amodi8-titanic-exploring-survival-using-machine-learning', 'brirush-svm-for-titanic', 'liudj2008-titanic', 'liudj2008-fork-of-titanic']","[0.8017139681741428, 0.7807151059767842, 0.6839876731586961, 0.6647301291186795, 0.6054393218208189, 0.5655723170281243, 0.5534300194830426, 0.4227220015522721, 0.4221482549024968, 0.4210993113819627]","{'package:base': ['data.frame', 'rep', 'table'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""data.frame"", ""rep"", ""table""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase dataframe rep table packageutils readcsv str writecsv,"train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
str(train)
str(test)
table(train$Survived)
test$Survived <- rep(0, 418)
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = ""alldie.csv"", row.names = F)",0,0,0,0,1,0,0,0,0,0,0,0,0,0
128,lashkare-simple-yet-effective-titanic-solution,0.7659999999999999,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'apply', 'as.character', 'as.factor', 'c', 'cat', 'data.frame', 'factor', 'is.na', 'library', 'list', 'ls', 'merge', 'order', 'rbind', 'rm', 'round', 'sapply', 'set.seed', 'strsplit', 'sub', 'sum', 'summary', 'table', 'which', 'aes', 'facet_grid', 'facet_wrap', 'geom_bar', 'geom_density', 'geom_dotplot', 'geom_histogram', 'geom_text', 'ggplot', 'ggtitle', 'labs', 'scale_x_continuous', 'importance', 'randomForest', 'varImpPlot', 'aggregate', 'median', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['ggplot2', 'randomForest', 'base']",3.23613715171814,"['labs', 'list', 'facet_wrap', 'geom_text', 'median', 'merge', 'which', 'cat', 'as.character', 'is.na', 'sub', 'scale_x_continuous', 'as.factor', 'summary', 'sapply', 'round', 'geom_histogram', 'importance', 'varImpPlot', 'str', 'set.seed', 'factor', 'aggregate', 'geom_bar', 'apply', 'read.csv', 'table', 'randomForest', 'rm', 'c', 'aes', 'rbind', 'sum', 'ls', 'predict', 'write.csv', 'order', 'ggtitle', 'data.frame', 'strsplit', 'ggplot', 'geom_density', 'geom_dotplot', 'head', 'user defined', 'library', 'facet_grid']",[],"['avikpaul4u-titanic-machine-learning-in-r', 'paulocressoni-titanic-using-stepwise-linear-regression', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'skhawaja-titanic-disaster-survival-099', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic', 'nithishthirmul-titanic-data-test1']","[0.9344529852486587, 0.06037306859449915, 0.052765519758672594, 0.052765519758672594, 0.05255975120388719, 0.05255975120388719, 0.050659202566602314, 0.05055744573701332, 0.05055744573701332, 0.050535169968896676]","{'character(0)': ['percent'], 'package:base': ['apply', 'as.character', 'as.factor', 'c', 'cat', 'data.frame', 'factor', 'is.na', 'library', 'list', 'ls', 'merge', 'order', 'rbind', 'rm', 'round', 'sapply', 'set.seed', 'strsplit', 'sub', 'sum', 'summary', 'table', 'which'], 'package:ggplot2': ['aes', 'facet_grid', 'facet_wrap', 'geom_bar', 'geom_density', 'geom_dotplot', 'geom_histogram', 'geom_text', 'ggplot', 'ggtitle', 'labs', 'scale_x_continuous'], 'package:randomForest': ['importance', 'randomForest', 'varImpPlot'], 'package:stats': ['aggregate', 'median', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""character(0)"": [""percent""], ""package:base"": [""apply"", ""as.character"", ""as.factor"", ""c"", ""cat"", ""data.frame"", ""factor"", ""is.na"", ""library"", ""list"", ""ls"", ""merge"", ""order"", ""rbind"", ""rm"", ""round"", ""sapply"", ""set.seed"", ""strsplit"", ""sub"", ""sum"", ""summary"", ""table"", ""which""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""facet_wrap"", ""geom_bar"", ""geom_density"", ""geom_dotplot"", ""geom_histogram"", ""geom_text"", ""ggplot"", ""ggtitle"", ""labs"", ""scale_x_continuous""], ""package:randomForest"": [""importance"", ""randomForest"", ""varImpPlot""], ""package:stats"": [""aggregate"", ""median"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",character0 percent packagebase apply ascharacter asfactor c cat dataframe factor isna library list ls merge order rbind rm round sapply setseed strsplit sub sum summary table which packageggplot2 aes facetgrid facetwrap geombar geomdensity geomdotplot geomhistogram geomtext ggplot ggtitle labs scalexcontinuous packagerandomForest importance randomForest varImpPlot packagestats aggregate median predict packageutils head readcsv str writecsv,"rm(list = ls())
cat(""\f"")
library(ggplot2)
library(randomForest)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
head(train)
head(test)
test$Survived <- NA
fullset <- rbind(train, test)
str(fullset)
summary(fullset)
fullset$Pclass <- as.factor(fullset$Pclass)
ggplot(fullset[1:891, ], aes(x = Pclass, fill = factor(Survived))) + geom_bar() + ggtitle(""Impact of Class on Survival"")
fullset$Sex <- as.factor(fullset$Sex)
summary(fullset$Sex)
ggplot(fullset[1:891, ], aes(x = Sex, fill = factor(Survived))) + geom_bar() + ggtitle(""Do females have higher survival rate?"")
ggplot(fullset[1:891, ], aes(Sex)) + facet_wrap(~Pclass) + geom_bar(aes(y = (..count..)/sum(..count..), fill = factor(Survived)), stat = ""count"") + geom_text(aes(label = scales::percent(round((..count..)/sum(..count..), 2)), y = ((..count..)/sum(..count..))), stat = ""count"", vjust = -0.25) + ggtitle(""Class"") + labs(y = ""percent"")
head(fullset$Name)
fullset$Title <- sapply(fullset$Name, FUN = function(x) {
    strsplit(x, ""[,.]"")[[1]][2]
})
fullset$Title <- sub("" "", """", fullset$Title)
fullset$Title <- as.factor(fullset$Title)
summary(fullset$Title)
table(fullset$Sex, fullset$Title)
fullset$Title <- as.character(fullset$Title)
fullset$Title[fullset$Title %in% c(""Mlle"", ""Ms"")] <- ""Miss""
fullset$Title[fullset$Title == ""Mme""] <- ""Mrs""
fullset$Title[fullset$Title %in% c(""Don"", ""Sir"", ""Jonkheer"", ""Rev"", ""Dr"")] <- ""Sir""
fullset$Title[fullset$Title %in% c(""Dona"", ""Lady"", ""the Countess"")] <- ""Lady""
fullset$Title[fullset$Title %in% c(""Capt"", ""Col"", ""Major"")] <- ""Officer""
fullset$Title <- as.factor(fullset$Title)
summary(fullset$Title)
ggplot(fullset[1:891, ], aes(x = Age)) + geom_histogram(aes(y = ..density.., color = Title, fill = Title), alpha = 0.4, position = ""identity"") + geom_density(aes(color = Title), size = 1)
fullset$FamSize <- fullset$SibSp + fullset$Parch + 1
ggplot(fullset[1:891, ], aes(x = FamSize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + ggtitle(""Family"")
fullset$FamGroup[fullset$FamSize == 1] <- ""Individual""
fullset$FamGroup[fullset$FamSize < 5 & fullset$FamSize > 1] <- ""small""
fullset$FamGroup[fullset$FamSize > 4] <- ""large""
fullset$FamGroup <- as.factor(fullset$FamGroup)
sum(is.na(fullset$Fare))
which(is.na(fullset$Fare))
fullset$Fare[1044] <- median(fullset[fullset$Pclass == ""3"" & fullset$Embarked == ""S"", ]$Fare, na.rm = TRUE)
n <- data.frame(table(fullset$Ticket))
fullset <- merge(fullset, n, by.x = ""Ticket"", by.y = ""Var1"", x.all = T)
fullset$Fare2 <- fullset$Fare/fullset$Freq
fullset <- fullset[order(fullset$PassengerId), ]
which(fullset$Cabin == """")
which(fullset$Embarked == """")
fullset[c(62, 830), ]
fullset$Embarked <- as.factor(fullset$Embarked)
fullset[fullset$Fare2 >= 39 & fullset$Fare2 <= 41 & fullset$Pclass == 1, ]
summary(fullset[fullset$Fare2 >= 39 & fullset$Fare2 <= 41 & fullset$Pclass == 1, ""Embarked""])
fullset$Embarked <- as.character(fullset$Embarked)
fullset$Embarked[fullset$Embarked %in% c("""", """")] <- ""C""
fullset$Embarked <- as.factor(fullset$Embarked)
sum(is.na(fullset$Age))
title.age <- aggregate(fullset$Age, by = list(fullset$Title), FUN = function(x) median(x, na.rm = T))
fullset[is.na(fullset$Age), ""Age""] <- apply(fullset[is.na(fullset$Age), ], 1, function(x) title.age[title.age[, 1] == x[""Title""], 2])
sum(is.na(fullset$Age))
ggplot(fullset[1:891, ], aes(Age, fill = factor(Survived))) + facet_grid(. ~ Sex) + geom_dotplot(binwidth = 2)
fullset$Title <- as.character(fullset$Title)
fullset[fullset$Sex == ""female"" & fullset$Age < 18, ""Title""] <- ""Miss2""
fullset$Title <- as.factor(fullset$Title)
summary(fullset$Title)
fullset$isMinor[fullset$Age < 18] <- ""Minor""
fullset$isMinor[fullset$Age >= 18] <- ""Adult""
fullset$isMinor <- as.factor(fullset$isMinor)
fullset$Survived <- as.factor(fullset$Survived)
train <- fullset[1:891, ]
test <- fullset[892:1309, ]
set.seed(786)
model <- randomForest(factor(Survived) ~ Pclass + Fare + Title + Embarked + FamGroup + Sex + isMinor, data = train, importance = TRUE, ntree = 1000, mtry = 2)
model
varImpPlot(model)
importance(model)
prediction <- predict(model, test)
submission <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(submission, file = ""Submission.csv"", row.names = F)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
129,econdata-titanic-datasets-ml-with-r-journey-to-top-1,0.9,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.numeric', 'c', 'cos', 'data.frame', 'exp', 'ifelse', 'is.na', 'lapply', 'length', 'library', 'list.files', 'NROW', 'pmax', 'pmin', 'print', 'rep', 'return', 'round', 'sin', 'substr', 'tanh', 'accuracy', 'logLoss', 'read.csv', 'write.csv']","['tidyverse', 'Metrics', 'dplyr', 'base']",6.87690877914429,"['exp', 'logLoss', 'accuracy', 'NROW', 'lapply', 'as.character', 'is.na', 'pmin', 'print', 'round', 'rep', 'length', 'read.csv', 'tanh', 'return', 'c', 'as.numeric', 'ifelse', 'cos', 'write.csv', 'list.files', 'pmax', 'data.frame', 'sin', 'substr', 'user defined', 'library']",[],"['prabhulingayya-titanic-prediction-using-logistic-regression', 'cnusapbo-titanic-r-code', 'joelweiss-titanic-data-r', 'goblin-titanic-test', 'alma123-titanic', 'garciparedes-titanic-getting-started', 'tsfitz-titanic', 'jacekpardyak-mytitanicscript', 'fpsawicki-eda-and-prediction-on-titanic-dataset', 'mustfkeskin-titanic-xgboost']","[0.30711875923594495, 0.30678421433048203, 0.3058737390726652, 0.2402915034871733, 0.23313796571495107, 0.21503639626666748, 0.1886872802987766, 0.18598872421865892, 0.18268887994948688, 0.15957014645207104]","{'character(0)': ['extractFeatures', 'gp'], 'package:base': ['as.character', 'as.numeric', 'c', 'cos', 'data.frame', 'exp', 'ifelse', 'is.na', 'lapply', 'length', 'library', 'list.files', 'NROW', 'pmax', 'pmin', 'print', 'rep', 'return', 'round', 'sin', 'substr', 'tanh'], 'package:Metrics': ['accuracy', 'logLoss'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""extractFeatures"", ""gp""], ""package:base"": [""as.character"", ""as.numeric"", ""c"", ""cos"", ""data.frame"", ""exp"", ""ifelse"", ""is.na"", ""lapply"", ""length"", ""library"", ""list.files"", ""NROW"", ""pmax"", ""pmin"", ""print"", ""rep"", ""return"", ""round"", ""sin"", ""substr"", ""tanh""], ""package:Metrics"": [""accuracy"", ""logLoss""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 extractFeatures gp packagebase ascharacter asnumeric c cos dataframe exp ifelse isna lapply length library listfiles NROW pmax pmin print rep return round sin substr tanh packageMetrics accuracy logLoss packageutils readcsv writecsv,"library(tidyverse)
list.files(path = ""../input"")
library(Metrics)
library(dplyr)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
extractFeatures <- function(data, istrain = TRUE) {
    features <- c(""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Cabin"", ""Embarked"")
    fea <- data[, features]
    fea$Sex[is.na(fea$Sex)] <- ""female""
    fea$Embarked[fea$Embarked == """"] = ""S""
    fea$Sex <- fea$Sex[fea$Sex == ""male""] <- ""1""
    fea$Sex <- fea$Sex[fea$Sex == ""female""] <- ""0""
    fea$Sex <- as.numeric(as.character(fea$Sex))
    fea$Embarked[fea$Embarked == ""S""] <- ""0""
    fea$Embarked[fea$Embarked == ""Q""] <- ""1""
    fea$Embarked[fea$Embarked == ""C""] <- ""2""
    fea[substr(fea$Cabin, 0, 1) == ""A"", ""Cabin""] <- ""1""
    fea[substr(fea$Cabin, 0, 1) == ""B"", ""Cabin""] <- ""2""
    fea[substr(fea$Cabin, 0, 1) == ""C"", ""Cabin""] <- ""3""
    fea[substr(fea$Cabin, 0, 1) == ""D"", ""Cabin""] <- ""4""
    fea[substr(fea$Cabin, 0, 1) == ""E"", ""Cabin""] <- ""5""
    fea[substr(fea$Cabin, 0, 1) == ""F"", ""Cabin""] <- ""6""
    fea[substr(fea$Cabin, 0, 1) == ""G"", ""Cabin""] <- ""7""
    fea[substr(fea$Cabin, 0, 1) == ""T"", ""Cabin""] <- ""8""
    fea[length(fea$Cabin) == 0, ""Cabin""] <- ""0""
    fea$Cabin <- as.numeric(fea$Cabin)
    fea[is.na(fea)] <- 0
    fea[] <- lapply(fea, function(x) as.numeric(as.character(x)))
    if (istrain) 
        fea$Survived <- as.numeric(data$Survived)
    return(fea)
}
xtrain <- extractFeatures(train, TRUE)
xtest <- extractFeatures(test, FALSE)
gp <- function(data) {
    p <- 0.2 * tanh(((((31.006277) * ((((((data$Embarked) + (data$Cabin))/2)) + (((((sin((tanh((data$Parch))))) * (3))) - (data$Pclass))))))) * 2)) + 0.2 * tanh(((31.006277) * (((((data$Age) * (data$Cabin))) + (((((0.31831) - (data$Pclass))) + (pmin((2), (((data$Parch) * 2)))))))))) + 0.2 * tanh(ifelse(rep(1, NROW(data)) * (ifelse(rep(1, NROW(data)) * (data$SibSp > 0), data$Cabin, sin((data$Parch))) > 0), (7.90205097198486), (((((((data$Cabin) + (data$Fare))/2)) - (9.869604))) - (31.006277)))) + 
        0.2 * tanh(((((((((((tanh(((((0.63662) < (data$Parch)) * 1)))) * 2)) - (data$Pclass))) + (((data$Embarked) + (sin((data$Pclass))))))) * 2)) * 2)) + 0.2 * tanh(((data$Fare) * (ifelse(rep(1, NROW(data)) * (data$Embarked > 0), sin((data$SibSp)), ((((data$Cabin) + (((sin((data$Parch))) + (2))))) - (data$Pclass)))))) + 0.2 * tanh(((data$Fare) - (pmax((((data$Age) + (((ifelse(rep(1, NROW(data)) * (sin((data$Fare)) > 0), (9.26776313781738), -3)) * (data$Pclass))))), (2))))) + 0.2 * tanh(pmin(((-1 * 
        ((((data$Age) + (((-3) - (31.006277)))))))), (((((cos((data$Fare))) * (data$Age))) * (data$Age))))) + 0.2 * tanh(((((ifelse(rep(1, NROW(data)) * (sin((pmax((sin((((data$Embarked) * 2)))), (((data$Age) * 2))))) > 0), cos((((data$SibSp)/2))), -3)) * 2)) * 2)) + 0.2 * tanh(ifelse(rep(1, NROW(data)) * (pmax((data$Embarked), (data$Age)) > 0), (((9)) * (((((((((9)) + (data$Pclass))/2)) + (31.006277))) - (data$Age)))), -3)) + 0.2 * tanh(((((cos((ifelse(rep(1, NROW(data)) * (sin((data$Fare)) > 0), 
        data$Pclass, pmin((((data$Fare) - (9.869604))), (((9.869604) * (data$SibSp)))))))) * 2)) * 2)) + 0.2 * tanh(((data$Fare) * (cos((((data$Fare) * (ifelse(rep(1, NROW(data)) * (data$Parch > 0), 0.31831, ifelse(rep(1, NROW(data)) * (data$SibSp > 0), ((0.31831) * (1.570796)), (9)))))))))) + 0.2 * tanh(((sin((ifelse(rep(1, NROW(data)) * (sin(((((sin((2))) + (data$Age))/2))) > 0), pmax(((12.8347988128662)), (((data$Age) - (data$Embarked)))), data$Fare)))) * 2)) + 0.2 * tanh(((((sin((((sin((data$SibSp))) + 
        (pmax((((3.141593) * 2)), ((((data$Cabin) + (data$Age))/2)))))))) * (data$Age))) * (data$Fare))) + 0.199844 * tanh(((((sin((((data$Age) * (((3.141593) - (cos((ifelse(rep(1, NROW(data)) * (data$Cabin > 0), data$Cabin, tanh((sin((data$Age)))))))))))))) * 2)) * 2)) + 0.2 * tanh(((sin((((((cos((pmax((pmax(((10)), (data$Age))), (((((data$Fare) * 2)) * 2)))))) + (data$Parch))) - (data$Cabin))))) * 2)) + 0.2 * tanh(((data$Fare) * (cos((ifelse(rep(1, NROW(data)) * (cos((((data$Fare) * (data$Fare)))) > 
        0), ((0.31831) * (data$Fare)), ((data$Pclass) * (9.869604)))))))) + 0.2 * tanh(ifelse(rep(1, NROW(data)) * (ifelse(rep(1, NROW(data)) * (data$Age > 0), data$Embarked, data$Parch) > 0), ((((((data$Embarked) - (data$Parch))) * 2)) * 2), ((sin((((data$Fare) * 2)))) * 2))) + 0.2 * tanh(((((sin((((data$Age) * (pmin((pmin((data$Fare), (data$Age))), (ifelse(rep(1, NROW(data)) * (data$SibSp > 0), (3.80433893203735), cos((data$Fare)))))))))) * 2)) * 2)) + 0.2 * tanh(cos((pmax((pmax((3.141593), (((data$Cabin) * 
        (((((data$Age) * 2)) * 2)))))), (((((((data$Fare) * 2)) * 2)) * 2)))))) + 0.2 * tanh(((sin((((((sin(((((((6)) * (data$Fare))) * 2)))) + (sin((((((data$Fare) * (data$Fare))) * 2)))))) * 2)))) * 2)) + 0.2 * tanh(((pmin((sin(((((8)) * (sin(((((8)) * (pmax(((9)), (data$Fare))))))))))), (((data$Fare) - ((8)))))) * 2)) + 0.2 * tanh(((data$Age) * (sin((((data$Fare) * (((data$Age) + (ifelse(rep(1, NROW(data)) * (sin((((data$Fare) + (data$Age)))) > 0), -3, 1.570796)))))))))) + 0.2 * tanh((((((-1 * 
        ((((((data$Embarked) * 2)) * 2))))) + (data$Fare))) * (cos((((data$Fare) * (((((tanh((data$Pclass))) * 2)) * 2)))))))) + 0.193436 * tanh(((((((cos(((((ifelse(rep(1, NROW(data)) * (sin((data$Parch)) > 0), data$Age, data$Parch)) + ((((data$Fare) + (data$Age))/2)))/2)))) * 2)) * 2)) * 2)) + 0.2 * tanh(((((((sin((((data$Fare) * ((((data$Age) + (((tanh((3.141593))) - (data$Cabin))))/2)))))) * (data$Fare))) * 2)) * (data$Fare))) + 0.2 * tanh(((sin((((cos((data$SibSp))) * (((((ifelse(rep(1, NROW(data)) * 
        (data$Embarked > 0), data$Age, ((data$Age) * 2))) + (data$Age))) + ((1)))))))) * 2)) + 0.2 * tanh(((((sin((data$Parch))) + (ifelse(rep(1, NROW(data)) * (cos((data$Fare)) > 0), ((data$Cabin) - (sin((data$SibSp)))), sin((data$Parch)))))) - (data$SibSp))) + 0.2 * tanh(((sin((((((((((((data$Fare) < (data$Age)) * 1)) * 2)) * 2)) + ((((pmax((data$Fare), (data$Age))) + (-3))/2)))/2)))) * 2)) + 0.2 * tanh(((((data$Age) * (((data$Age) - ((9.22764873504639)))))) * (sin(((((((7.99594593048096)) * (((data$Fare) - 
        ((7.99595642089844)))))) * (data$Age))))))) + 0.2 * tanh(sin((ifelse(rep(1, NROW(data)) * (data$Embarked > 0), (((ifelse(rep(1, NROW(data)) * (data$SibSp > 0), 3, (10.5902509689331))) + (data$Age))/2), ((((10.9543304443359)) + (pmax(((10.9543342590332)), (data$Fare))))/2))))) + 0.2 * tanh(ifelse(rep(1, NROW(data)) * (data$Age > 0), ifelse(rep(1, NROW(data)) * (data$SibSp > 0), ((data$Age) - (data$Fare)), cos((data$Age))), sin((((31.006277) * (((data$Fare)/2))))))) + 0.089041 * tanh(((((((9.869604) - 
        (data$Age))) * (ifelse(rep(1, NROW(data)) * (data$Age > 0), 9.869604, ((sin((9.869604))) + (sin((data$Age)))))))) * 2)) + 0.2 * tanh(ifelse(rep(1, NROW(data)) * (data$SibSp > 0), data$Cabin, ifelse(rep(1, NROW(data)) * (sin((data$Parch)) > 0), data$Age, ((1.570796) * (sin((((((data$Fare) * (data$Age))) * 2)))))))) + 0.2 * tanh(((sin((((sin((data$Fare))) - ((((-1 * ((((sin((sin((((data$Age)/2)))))) * 2))))) - (((data$Fare) * 2)))))))) * 2)) + 0.197382 * tanh(((((ifelse(rep(1, NROW(data)) * 
        (data$Fare > 0), (-1 * ((cos((((data$Age) + (((data$Pclass) + ((-1 * ((data$Embarked)))))))))))), (-1 * ((data$Pclass))))) * 2)) * 2)) + 0.2 * tanh(((ifelse(rep(1, NROW(data)) * (data$Cabin > 0), sin((sin((data$Cabin)))), data$Age)) * (((data$Age) * (cos((((((31.006277) * 2)) * (data$Fare))))))))) + 0.2 * tanh(((((((sin((data$Parch))) + (pmax(((((sin((sin((sin((data$Fare))))))) < (0.63662)) * 1)), (data$Embarked))))/2)) > (cos((data$Age)))) * 1)) + 0.157648 * tanh(((((31.006277) * 2)) * (sin((((sin((data$Age))) * 
        (((((((9.869604) * (sin((-2))))) * 2)) * 2)))))))) + 0.2 * tanh(((-3) * (ifelse(rep(1, NROW(data)) * (data$SibSp > 0), data$Age, sin((((pmax((data$Age), (data$Parch))) * ((9.71326065063477))))))))) + 0.2 * tanh(sin(((((((ifelse(rep(1, NROW(data)) * (sin((((data$SibSp) * (((data$SibSp) * (((data$Fare)/2))))))) > 0), 3.141593, data$Age))/2)) + (data$SibSp))/2)))) + 0.2 * tanh(sin((((data$Pclass) * ((((((data$Fare) + (((-3) * (ifelse(rep(1, NROW(data)) * (data$Age > 0), data$Cabin, (((31.006277) < 
        (data$Fare)) * 1))))))/2))/2)))))) + 0.2 * tanh(cos(((((((((data$Fare) + (data$Pclass))/2)) * ((((data$Fare) + ((5)))/2)))) + (cos((((sin((data$Fare))) * (data$Age))))))))) + 0.2 * tanh(((31.006277) * (((data$Embarked) * (((((data$Embarked) * (((31.006277) - (tanh(((1)))))))) - (data$Age))))))) + 0.2 * tanh(((data$Parch) + (((data$Parch) * (((pmax((data$Age), (data$Pclass))) * (sin((((pmax((data$Embarked), (data$Age))) - (data$Parch))))))))))) + 0.2 * tanh(((((cos((pmax((((((data$Fare) - 
        (data$SibSp))) * (1.570796))), (((((data$Age) - (data$Fare)))/2)))))) * 2)) * 2)) + 0.2 * tanh(((data$Fare) * (sin(((((8)) * (((((data$Fare) * (((((31.006277) * 2)) * 2)))) + (((31.006277) * 2)))))))))) + 0.2 * tanh(((((((((data$Cabin) + (data$Fare))/2)) + (-3))/2)) * (cos(((((((data$Fare) + (data$Cabin))/2)) * (((-3) - (data$Parch))))))))) + 0.2 * tanh(sin((((data$Pclass) * (((ifelse(rep(1, NROW(data)) * (data$SibSp > 0), data$SibSp, data$Fare)) * (data$Fare))))))) + 0.2 * tanh(((((((sin((((((sin((data$Pclass))) * 
        2)) - ((((data$Age) + (ifelse(rep(1, NROW(data)) * (data$SibSp > 0), data$SibSp, 31.006277)))/2)))))) * 2)) * 2)) * 2)) + 0.2 * tanh(sin((((((cos((sin((ifelse(rep(1, NROW(data)) * (data$Cabin > 0), ifelse(rep(1, NROW(data)) * (data$Age > 0), data$Fare, data$SibSp), data$Embarked)))))) + (data$Age))) * (3.141593))))) + 0.2 * tanh(((sin((((((data$Cabin) + (((2) + (data$Fare))))) * (((data$Age) * (((data$Cabin) + (3.141593))))))))) * (data$Age))) + 0.2 * tanh(((sin((((cos((data$Fare))) * (((data$Fare) + 
        (((3) + (((sin((data$Age))) + (data$Age))))))))))) * 2)) + 0.2 * tanh(((ifelse(rep(1, NROW(data)) * (data$SibSp > 0), ((data$Age) + (data$Embarked)), data$Age)) * (sin((((data$Cabin) * (((((data$Age) + (data$Cabin))) * 2)))))))) + 0.2 * tanh(((((data$Cabin) * (((data$Cabin) * 2)))) * (sin((((data$Age) * (tanh((sin((-1))))))))))) + 0.2 * tanh(((data$Fare) * (((((data$Embarked) * (31.006277))) * (sin((((ifelse(rep(1, NROW(data)) * (data$Parch > 0), (11.2503890991211), data$Age)) * (((data$Fare) * 
        2)))))))))) + 0.2 * tanh(((sin((pmax((((data$Fare) * (sin((((sin((data$Age))) * 2)))))), (((((data$Fare) * 2)) * (data$Parch))))))) * (data$Age))) + 0.2 * tanh(((sin(((-1 * ((((((data$Age) - (ifelse(rep(1, NROW(data)) * (ifelse(rep(1, NROW(data)) * (sin((data$Fare)) > 0), data$SibSp, data$Age) > 0), data$SibSp, data$Fare)))) * 2))))))) * 2)) + 0.2 * tanh(((data$Fare) * (sin((((((((data$Age) * (data$Pclass))) * (((((data$Age) * (data$Pclass))) * (data$Pclass))))) * (9.869604))))))) + 0.2 * 
        tanh(((((cos((pmax(((10)), (ifelse(rep(1, NROW(data)) * (cos((pmax((data$Fare), (3.141593)))) > 0), data$Fare, (((data$Fare) + (data$Age))/2))))))) * 2)) * 2)) + 0.2 * tanh(((pmax((data$SibSp), (data$Cabin))) * (sin(((-1 * ((((pmax((data$SibSp), (data$Cabin))) * (((-3) - (cos((data$SibSp)))))))))))))) + 0.2 * tanh(cos((((data$Fare) + ((((3.063551902771)) * (pmax((pmax((((data$Age)/2)), (data$Pclass))), (((data$Pclass) * (data$SibSp))))))))))) + 0.2 * tanh(((sin((data$SibSp))) + ((-1 * (((((((data$Age) > 
        (((9.869604) + ((((pmin((data$Fare), (data$Age))) + (31.006277))/2))))) * 1)) * 2))))))) + 0.2 * tanh(((pmax((data$Embarked), (((data$SibSp) * 2)))) * (((data$Fare) * (sin((((((((data$Parch) + (data$Fare))) + (3))) * 2)))))))) + 0.2 * tanh(sin((ifelse(rep(1, NROW(data)) * ((((data$SibSp) > (data$Cabin)) * 1) > 0), (11.0224475860596), ((((((0.63662) + (-2))) * (data$Age))) - (sin((data$Pclass)))))))) + 0.2 * tanh(((data$Age) * (((data$Fare) * (sin((((((tanh((data$SibSp)))/2)) * ((((data$SibSp) + 
        (pmax((data$Age), ((10.0377588272095)))))/2)))))))))) + 0.2 * tanh(cos((((cos((data$Age))) * ((((data$Embarked) + (((((data$Parch) * 2)) + (pmax((((data$Embarked) + (data$Age))), ((14.0815086364746)))))))/2)))))) + 0.2 * tanh(((sin((((((data$Age) * (tanh((((data$Parch) - ((((((1.570796) * (tanh((data$SibSp))))) + (data$Cabin))/2))))))))/2)))) * 2)) + 0.2 * tanh(((((sin(((((data$Age) + ((((((data$SibSp) * 2)) + (((data$Cabin) * (data$Cabin))))/2)))/2)))) * (data$Embarked))) * (((data$Embarked) * 
        2)))) + 0.2 * tanh(((sin((((data$Fare) * ((((-1 * ((((sin((((data$Fare) * (((data$Age) - (data$Fare))))))) * 2))))) - (data$Fare))))))) * 2)) + 0.17101 * tanh(((((cos((((((-1 * ((0.63662)))) + (((((data$Age) * (-3))) + (data$Cabin))))/2)))) * (31.006277))) * (31.006277))) + 0.2 * tanh(sin((sin((((data$Cabin) - ((((((((data$Age) * 2)) * 2)) + (pmax((data$Age), (((((((data$Cabin) * 2)) * 2)) * 2)))))/2)))))))) + 0.2 * tanh(ifelse(rep(1, NROW(data)) * (pmin((data$Age), (cos((((((data$Age) * 
        2)) * (3.141593)))))) > 0), ((((((data$Embarked) > (1.570796)) * 1)) > (data$Parch)) * 1), -2)) + 0.199961 * tanh(((sin((((sin((((((((9.869604) * 2)) * (((((data$Parch) * 2)) - (data$Age))))) - (data$Age))))) * 2)))) * 2)) + 0.2 * tanh(((pmin((((((9.869604) * 2)) - (((data$Age) - ((((data$Cabin) + (data$Age))/2)))))), ((((data$Parch) + (data$Cabin))/2)))) * (data$Age))) + 0.2 * tanh(((sin((((((31.006277) * (data$Fare))) * (ifelse(rep(1, NROW(data)) * (data$Embarked > 0), 2, (-1 * ((pmax((data$Fare), 
        (data$Age))))))))))) * 2)) + 0.2 * tanh((-1 * ((tanh((((cos((((((((data$Pclass) * (data$Age))) * (data$Age))) - (data$Cabin))))) * (((data$Age) + (data$Cabin)))))))))) + 0.184606 * tanh(((data$Age) * (sin((((((data$Pclass) * 2)) * (ifelse(rep(1, NROW(data)) * (data$Parch > 0), data$Age, ((data$Age) * (((data$Pclass) * (data$Age)))))))))))) + 0.168861 * tanh(((sin((((((data$Fare) * (tanh((data$Age))))) * (tanh((tanh((cos((sin((data$Age))))))))))))) * (31.006277))) + 0.2 * tanh(((sin(((((-1 * 
        ((((data$Fare) - ((-1 * ((data$Cabin))))))))) * (((data$Age)/2)))))) * 2)) + 0.2 * tanh((((((-1 * ((cos((((((((data$Fare) + (data$Age))) + (sin((cos((data$Cabin))))))) + (sin((data$Age)))))))))) * 2)) * 2)) + 0.2 * tanh(((sin((((data$Age) - (((((tanh((data$Age))) + (data$Embarked))) - (((data$Cabin) * 2)))))))) * (((data$Embarked) + (data$Cabin))))) + 0.2 * tanh((((pmin((pmax((0.31831), (pmax((((data$Cabin)/2)), (data$SibSp))))), (tanh(((((data$SibSp) + (3.141593))/2)))))) < (sin((data$Age)))) * 
        1)) + 0.2 * tanh(ifelse(rep(1, NROW(data)) * ((((3)) - (data$SibSp)) > 0), sin(((((3)) * (((((data$Embarked) - (data$Pclass))) - (((data$Age)/2))))))), data$Age)) + 0.2 * tanh(((((sin((((data$Cabin) * (ifelse(rep(1, NROW(data)) * (data$SibSp > 0), ((data$Cabin) * 2), ((data$Cabin) * (data$Age)))))))) * (31.006277))) - (data$Cabin))) + 0.2 * tanh(((sin((pmin(((-1 * ((((((data$Age) * 2)) + (data$Fare)))))), (((data$Age) * (data$Embarked))))))) * (data$Cabin))) + 0.2 * tanh(((ifelse(rep(1, NROW(data)) * 
        ((((cos((data$Pclass))) > (cos((data$Fare)))) * 1) > 0), data$Fare, (((-1 * ((data$Parch))))/2))) * ((((data$Age) + (data$SibSp))/2)))) + 0.180582 * tanh(((sin(((((((2) * ((((sin((data$Cabin))) < (data$Embarked)) * 1)))) + (((data$Age) * ((((data$Age) + ((9)))/2)))))/2)))) * 2)) + 0.190897 * tanh(sin((((pmax((data$Parch), (ifelse(rep(1, NROW(data)) * (sin((pmax((data$Cabin), (data$Parch)))) > 0), data$Fare, (((0.31831) + (data$SibSp))/2))))) * (31.006277))))) + 0.2 * tanh(((sin((((((pmin((((0.63662) - 
        (data$SibSp))), ((((data$Cabin) + (data$Embarked))/2))))/2)) * (((data$Fare) * (data$Pclass))))))) * 2)) + 0.2 * tanh(sin(((((((data$Fare) + (pmax((((3.141593) * (data$Age))), (((((data$Embarked) * (data$Age))) * (data$Pclass))))))/2))/2)))) + 0.2 * tanh(((((((((sin((data$Pclass))) - (sin((sin((data$Fare))))))) * (data$Parch))) * (data$Pclass))) * (((data$Age) * (data$Parch))))) + 0.172456 * tanh((((-1 * ((ifelse(rep(1, NROW(data)) * (data$Cabin > 0), sin((ifelse(rep(1, NROW(data)) * (sin(((((((data$Cabin)/2)) + 
        (data$Fare))/2))) > 0), data$Pclass, data$Fare))), data$SibSp))))) * 2)) + 0.2 * tanh(cos((((((((((data$Age) - (data$Fare))) - (((data$Fare) - (cos((data$Age))))))) * (31.006277))) - (cos((data$Age))))))) + 0.2 * tanh(((sin((((((sin((sin((data$Age))))) * 2)) * (((data$Fare) - (data$Cabin))))))) * 2)) + 0.2 * tanh(((sin(((((((data$Fare) + ((((3)) + (pmax((data$Age), ((((data$Fare) + (((data$Age) + ((10)))))/2)))))))/2))/2)))) * 2)) + 0.2 * tanh(sin(((((((data$Age) + ((((data$Embarked) + (((data$Parch) * 
        (((data$Parch) - (((data$Parch) * (data$Parch))))))))/2)))/2)) * ((2.57526826858521)))))) + 0.2 * tanh(sin((((ifelse(rep(1, NROW(data)) * (data$Parch > 0), ((data$Age) * (31.006277)), ((ifelse(rep(1, NROW(data)) * (data$Cabin > 0), data$Age, ((data$Age) * (31.006277))))/2)))/2)))) + 0.2 * tanh(ifelse(rep(1, NROW(data)) * ((((3) > (ifelse(rep(1, NROW(data)) * (data$Cabin > 0), data$Cabin, data$Age))) * 1) > 0), data$Age, ((data$Cabin) * (((sin(((-1 * ((data$Cabin))))))/2))))) + 0.2 * tanh(((pmin((sin((((sin((data$Parch))) * 
        (((data$Age)/2)))))), (sin((((((data$Age)/2)) * (sin((data$Pclass))))))))) * 2)) + 0.2 * tanh(sin((((((((data$Age) * (sin((cos((cos((data$Pclass))))))))) + (data$SibSp))) + ((((sin((data$Age))) < (data$Parch)) * 1)))))) + 0.2 * tanh(sin((((((data$Parch) - (((data$Fare) * (((1.570796) - (pmax((data$Age), (data$Parch))))))))) * 2)))) + 0.2 * tanh(((sin((((((data$Age) + (data$Cabin))) * (((data$Cabin) + (tanh((sin((data$Embarked))))))))))) * (((data$Age) - (data$Cabin))))) + 0.2 * tanh(sin((ifelse(rep(1, 
        NROW(data)) * (data$Age > 0), ((data$Age) * (((((data$Age) * (sin((data$Fare))))) * (data$Age)))), ((1.570796) * (data$Fare)))))) + 0.2 * tanh(((sin((((data$Age) * (ifelse(rep(1, NROW(data)) * (data$Embarked > 0), (8), ifelse(rep(1, NROW(data)) * (data$SibSp > 0), ifelse(rep(1, NROW(data)) * (data$Cabin > 0), 9.869604, (10.3627061843872)), -2))))))) * 2)) + 0.2 * tanh(((sin((((((sin((sin((data$Age))))) + ((((-1 * ((data$SibSp)))) + (data$Fare))))) * (((data$Age) * 2)))))) * 2)) + 0.2 * tanh(((data$Fare) * 
        (ifelse(rep(1, NROW(data)) * (data$SibSp > 0), data$Cabin, ifelse(rep(1, NROW(data)) * (data$Parch > 0), data$Age, sin((((data$Cabin) * (((data$Cabin) * (data$Age))))))))))) + 0.2 * tanh((-1 * ((((((data$Age) - (data$SibSp))) * (((((data$Fare) * ((((data$Fare) > (31.006277)) * 1)))) - ((((data$Fare) > (data$Age)) * 1))))))))) + 0.178472 * tanh(((cos((pmax((((data$Age) * ((2.12336945533752)))), (data$Parch))))) * (ifelse(rep(1, NROW(data)) * (data$Embarked > 0), ((data$Parch) * (0.31831)), 
        data$Fare)))) + 0.2 * tanh(((9.869604) * ((-1 * (((((((9.869604) + ((((((data$Parch) + (data$Cabin))/2)) - (3))))) > (data$Fare)) * 1))))))) + 0.2 * tanh(((((((sin((((data$SibSp) - (((ifelse(rep(1, NROW(data)) * (data$Age > 0), 3.141593, data$SibSp)) * (pmax((data$Age), (9.869604))))))))) * 2)) * 2)) * 2)) + 0.2 * tanh(((((data$Fare) - (data$Cabin))) * (sin((sin((((((data$Age) * (cos((2))))) * (data$Cabin))))))))) + 0.2 * tanh(((sin((((31.006277) * (sin((((((data$Fare) * (data$Age))) + (sin((((data$Fare) * 
        (data$Age))))))))))))) * 2)) + 0.2 * tanh(sin((pmin((data$SibSp), ((-1 * (((((-3) + ((((((((data$Age) * (data$SibSp))) * 2)) + (((data$Age) * (data$Fare))))/2)))/2))))))))) + 0.192655 * tanh(pmin((sin((ifelse(rep(1, NROW(data)) * (data$Embarked > 0), ((data$Age)/2), data$Age)))), ((((data$Age) < (data$Fare)) * 1)))) + 0.2 * tanh(sin((ifelse(rep(1, NROW(data)) * (sin((((data$Fare) * (cos((data$Fare)))))) > 0), ((((data$Fare) * (data$Age))) * 2), ((data$Fare) * (data$Age)))))) + 0.2 * tanh(((cos((((((pmin((data$Fare), 
        (((((data$Age) + (data$Parch)))/2)))) + (data$SibSp))) * 2)))) * (((((data$Age)/2))/2)))) + 0.086658 * tanh(sin((((((((((((((10)) * 2)) + (data$Fare))/2)) + (((data$Fare) * (data$Pclass))))/2)) + (((pmax(((10)), (data$Fare)))/2)))/2)))) + 0.2 * tanh(((sin((((data$Fare) * (sin((((((pmin((data$Fare), (((data$Age) + (((data$Cabin)/2))))))/2))/2)))))))) * 2)) + 0.2 * tanh(sin(((-1 * ((((data$Age) + (((sin((data$Pclass))) + (((((data$Age) + (((data$Fare) * (31.006277))))) * 2))))))))))) + 0.076421 * 
        tanh((-1 * (((((((data$Embarked) < (((cos((pmax(((((ifelse(rep(1, NROW(data)) * (data$Age > 0), data$Fare, data$Age)) + (data$Age))/2)), (data$Age))))) * 2))) * 1)) * 2))))) + 0.2 * tanh(sin((ifelse(rep(1, NROW(data)) * (data$SibSp > 0), (-1 * ((data$Age))), ((ifelse(rep(1, NROW(data)) * (cos((data$Fare)) > 0), 2, (((data$Age) + (cos((data$Fare))))/2)))/2))))) + 0.174409 * tanh(((sin(((((13.5647993087769)) * (((ifelse(rep(1, NROW(data)) * (data$Age > 0), 31.006277, ((-1) + (31.006277)))) * 
        (((-1) + (data$Fare))))))))) * 2)) + 0.2 * tanh((((-1 * (((((((data$SibSp) * (((data$SibSp) * (sin((data$Embarked))))))) > (((data$Fare) - (((((10.7039012908936)) + (3.141593))/2))))) * 1))))) * 2)) + 0.191756 * tanh(((sin((pmax((((((data$Cabin) * ((5.92921018600464)))) * (data$Age))), (((((((data$Fare) * 2)) * (data$Pclass))) * 2)))))) * (31.006277))) + 0.088064 * tanh((((((data$SibSp) < ((((tanh((cos((data$Fare))))) > (pmin((sin(((((data$Age) + (data$Fare))/2)))), (data$SibSp)))) * 1))) * 
        1)) * (data$Fare))) + 0.2 * tanh(pmin((sin((((((((pmin((data$Fare), ((8)))) * (data$Cabin))) - (data$Embarked))) - (((data$Fare) * 2)))))), (((data$Cabin)/2)))) + 0.199961 * tanh(sin((ifelse(rep(1, NROW(data)) * (data$SibSp > 0), ((data$Fare) - (ifelse(rep(1, NROW(data)) * (data$Age > 0), data$Age, data$Pclass))), ((data$Age) * ((((11.1982040405273)) + (data$Age)))))))) + 0.151006 * tanh(pmin((data$Age), (((ifelse(rep(1, NROW(data)) * (((((((data$SibSp) > (data$Pclass)) * 1)) > (sin((data$Fare)))) * 
        1) > 0), data$SibSp, data$Embarked)) - (sin((data$Age))))))) + 0.2 * tanh(pmin((((((sin((((data$Age) * (sin((data$Pclass))))))) * (sin((((data$Age)/2)))))) * (2))), (data$Age))) + 0.143661 * tanh((((10.8002290725708)) * (((((sin((((data$Age) * ((10.8002290725708))))))/2)) * (sin((sin((((sin((data$Age))) - (data$Cabin))))))))))) + 0.18488 * tanh(((((((sin(((((-1 * ((data$Fare)))) * (((ifelse(rep(1, NROW(data)) * (data$Age > 0), data$Age, (-1 * ((3.141593))))) * ((8.96378326416016)))))))) * 
        2)) * 2)) * 2)) + 0.2 * tanh((-1 * (((((((((((((sin((((9.869604) * (data$Fare))))) < (0.63662)) * 1))/2)) > (sin((data$Age)))) * 1)) > (((data$Cabin)/2))) * 1))))) + 0.2 * tanh(((((cos((((pmax((data$Fare), (2))) * (((pmax((data$Age), (((1.570796) + (0.31831))))) + (data$Fare))))))) * 2)) * 2)) + 0.2 * tanh(((sin((((pmax((((data$Age) * (sin((data$Fare))))), (((data$Age) * (data$Cabin))))) * ((9)))))) * 2)) + 0.2 * tanh(sin((((data$Age) * ((((-1 * ((data$SibSp)))) + (((ifelse(rep(1, NROW(data)) * 
        (cos((data$SibSp)) > 0), ((data$Pclass) * 2), (11.2352647781372))) + (9.869604))))))))) + 0.2 * tanh(((sin((((ifelse(rep(1, NROW(data)) * (data$Embarked > 0), ((data$Age) + (data$SibSp)), (((((-1 * ((data$SibSp)))) * (data$Age))) + (data$SibSp))))/2)))) * 2)) + 0.2 * tanh(sin((ifelse(rep(1, NROW(data)) * (cos((((data$Fare) * (((-3) * (data$Fare)))))) > 0), pmin((data$Embarked), (((1.570796) - (data$Age)))), data$Pclass)))) + 0.2 * tanh(sin(((((((((cos((data$Embarked))) + (data$Age))) + (((((data$Fare) * 
        (((data$Age) + ((2))))))/2)))/2)) + (data$Age))))) + 0.2 * tanh(((cos(((((((((data$Parch) - (data$SibSp))) + (data$Age))) + ((((data$Fare) + (((data$Age) - (data$SibSp))))/2)))/2)))) * (data$Age))) + 0.139715 * tanh((-1 * ((ifelse(rep(1, NROW(data)) * (pmax((data$Cabin), (ifelse(rep(1, NROW(data)) * (cos((data$Pclass)) > 0), 31.006277, data$SibSp))) > 0), cos((data$Age)), (((data$SibSp) < (data$Age)) * 1)))))) + 0.2 * tanh(sin((pmax((((data$Fare) * (((((9.869604) - (tanh((-2))))) + (data$Cabin))))), 
        (((9.869604) + (data$Pclass))))))) + 0.2 * tanh(sin((pmin((((data$Age) * (pmax((pmax(((((data$Age) < (data$Fare)) * 1)), (data$Cabin))), (pmax((data$SibSp), ((0.124357968568802)))))))), (data$Fare))))) + 0.2 * tanh(sin((((((sin((((((ifelse(rep(1, NROW(data)) * (data$Age > 0), ((data$Age) - ((2))), 2)) * 2)) * (data$Fare))))) * 2)) * (data$Fare))))) + 0.2 * tanh(((sin((((((data$Fare) * (data$Age))) * ((((((-1 * ((data$Fare)))) * (data$Fare))) * (sin((sin((data$Age))))))))))) * 2)) + 0.2 * 
        tanh(sin((pmin((((data$Age) * ((-1 * ((data$Cabin)))))), ((((-1 * ((data$Embarked)))) - (((((data$Age) * (data$Embarked))) * (data$Embarked))))))))) + 0.2 * tanh(((((((31.006277) * (data$Age))) * (sin((((sin((((data$Fare) * (data$Age))))) * ((((data$Age) + (data$Embarked))/2)))))))) * 2)) + 0.2 * tanh(sin((ifelse(rep(1, NROW(data)) * (data$Cabin > 0), (-1 * ((((data$Embarked) + (((data$Age) + (data$Fare))))))), (((1) + ((((data$Age) + (data$Fare))/2)))/2))))) + 0.132057 * tanh(sin((((((data$Fare) * 
        (sin((((((data$Fare) * (sin((data$Fare))))) * 2)))))) * 2)))) + 0.2 * tanh(pmin((data$Parch), ((((10.2294549942017)) * (sin((((((data$Age) * (ifelse(rep(1, NROW(data)) * (data$Cabin > 0), (10.2294578552246), (7.61376333236694))))) * 2)))))))) + 0.2 * tanh(sin((pmax((((((data$Age)/2)) * (((((31.006277) * (data$Fare)))/2)))), ((((7)) * (((data$Fare) * (data$Fare))))))))) + 0.2 * tanh((((((sin((((((data$Fare) * (((sin((sin((((data$Age)/2))))))/2))))/2)))) > (data$Parch)) * 1)) * (data$Fare))) + 
        0.2 * tanh(sin((pmin((((((data$Fare) - (((data$Fare) * (data$Age))))) * (data$Fare))), (((data$SibSp) - (((data$Fare) * (data$Fare))))))))) + 0.2 * tanh(((3) * (sin((((data$Pclass) * (sin((((data$Age) * (((((-3) - (data$SibSp))) - (data$Fare))))))))))))) + 0.2 * tanh(sin((((((sin((data$Age))) * 2)) * (sin((((((data$Fare) * 2)) * (cos((data$Age))))))))))) + 0.2 * tanh(((cos((((((((data$Age) - (cos((data$Age))))) - (cos((data$Embarked))))) * (cos((data$Fare))))))) * (sin((data$Age))))) + 0.161789 * 
        tanh(sin((((9.869604) * (((data$Fare) + (ifelse(rep(1, NROW(data)) * (cos((data$Parch)) > 0), pmin((pmin((9.869604), (data$Fare))), (data$Age)), -2)))))))) + 0.140301 * tanh(pmin((ifelse(rep(1, NROW(data)) * (cos((data$Fare)) > 0), sin((data$Age)), ifelse(rep(1, NROW(data)) * (data$Cabin > 0), sin((data$Age)), cos((data$Fare))))), (cos((data$Parch))))) + 0.2 * tanh((-1 * (((((((cos((data$Age))) > ((0.648833692073822))) * 1)) * (((data$Fare) * (((data$Age) * (((data$Fare) * (cos((data$Fare)))))))))))))) + 
        0.2 * tanh(sin((((((((((data$Age) + (ifelse(rep(1, NROW(data)) * (data$Cabin > 0), data$Embarked, data$Cabin)))/2)) + (data$Age))/2)) * (ifelse(rep(1, NROW(data)) * (data$Cabin > 0), data$Cabin, data$Fare)))))) + 0.2 * tanh(sin((((((sin((sin((data$Fare))))) - ((((data$Age) > (((((data$Fare) * 2)) * 2))) * 1)))) * (((data$Age) * 2)))))) + 0.2 * tanh(((((((31.006277) + (data$Age))) * (data$Parch))) * (cos(((((data$Embarked) + (((((data$Age) + (data$SibSp))) * (1.570796))))/2)))))) + 0.2 * tanh(((31.006277) * 
        (sin((((((cos((sin(((((cos((((data$Age)/2)))) > (data$Parch)) * 1)))))) * (data$Embarked))) * (data$Age))))))) + 0.199961 * tanh(((31.006277) * (((data$Pclass) * (((data$Parch) * (sin((((3) * (((cos((data$Parch))) - (((data$Age)/2)))))))))))))) + 0.2 * tanh(((sin((((data$Cabin) * (((((data$Age) * 2)) + (data$Cabin))))))) * (-3))) + 0.156788 * tanh(((((((data$Fare) * (((data$Embarked) - (0.63662))))) * (data$Embarked))) * (cos((((data$Fare) * (((data$Embarked) - (0.63662))))))))) + 0.2 * tanh(((((sin((((data$Age) * 
        (((cos((ifelse(rep(1, NROW(data)) * (data$Embarked > 0), data$Cabin, pmax((data$Fare), ((4.22627544403076))))))) + (data$Pclass))))))) * 2)) * 2)) + 0.184724 * tanh(sin((((((data$Embarked) + ((((((3.141593) + (((data$Embarked) + (data$Age))))/2))/2)))) - ((((data$Parch) > (sin((data$Age)))) * 1)))))) + 0.185778 * tanh(sin((((cos((((data$Fare)/2)))) * (((data$Age) * (sin((data$Fare))))))))) + 0.176949 * tanh(((ifelse(rep(1, NROW(data)) * (((data$Parch) * (data$Age)) > 0), data$Pclass, (((sin((data$Age))) < 
        (data$Cabin)) * 1))) * (sin((((((data$Pclass) * 2)) * 2)))))) + 0.2 * tanh(sin((((data$Fare) * (((((data$Parch) - (((data$Embarked) + (((data$Cabin) * (((data$Embarked) + (sin((data$Cabin))))))))))) * 2)))))) + 0.161555 * tanh(((sin((data$Parch))) + ((((data$Age) < (((data$Parch) - (((9.869604) - ((((((data$Cabin) - (data$SibSp))) + (data$Fare))/2))))))) * 1)))) + 0.151709 * tanh(sin(((((-1 * ((data$SibSp)))) - (ifelse(rep(1, NROW(data)) * (data$Parch > 0), ((data$SibSp) * (data$Fare)), ((31.006277) * 
        ((((data$SibSp) + (data$Fare))/2))))))))) + 0.2 * tanh(((((pmin((data$Cabin), (sin((data$Age))))) - (sin((sin((data$Fare))))))) * (((((((((data$SibSp) * 2)) * 2)) * 2)) * 2)))) + 0.086931 * tanh(((sin((((((data$Age)/2)) * (((((((data$Fare)/2))/2)) * (data$Fare))))))) * (((((data$Age)/2))/2)))) + 0.198242 * tanh(ifelse(rep(1, NROW(data)) * (data$SibSp > 0), sin((((data$Pclass) * (((data$Cabin) - (data$Age)))))), sin((((data$Pclass) * ((((data$SibSp) + (data$Age))/2))))))) + 0.2 * tanh(((pmax((sin((((cos((data$Fare))) * 
        (data$Age))))), (sin((((((cos((data$Fare))) * (data$Age))) * (data$Age))))))) * 2)) + 0.140066 * tanh((-1 * ((((((((data$Embarked) < (1)) * 1)) < (((((data$Age) + (pmax((data$Fare), (data$Embarked))))) - (31.006277)))) * 1))))) + 0.104513 * tanh((((-1 * ((sin((((data$Age) * ((((9.869604) + (((data$SibSp) - (((((((9.869604) > (data$Pclass)) * 1)) > (data$Embarked)) * 1)))))/2))))))))) * 2)) + 0.2 * tanh(((((data$Age) * (sin((((sin((data$Parch))) * (((((((data$Age) * (tanh((data$Pclass))))) - 
        (data$Pclass)))/2)))))))) * 2)) + 0.2 * tanh((((((((data$Parch) < ((((sin((data$Age))) < (sin((data$Embarked)))) * 1))) * 1)) * (sin((((data$Age)/2)))))) * (((data$Embarked) * 2)))) + 0.2 * tanh(sin((((((sin((((((((data$Cabin) + (data$Fare))) + (data$Fare))) * (31.006277))))) * 2)) * 2)))) + 0.2 * tanh(((sin((((data$Embarked) * (data$Fare))))) + (sin((((31.006277) * ((((0.31831) + (((31.006277) * (data$Fare))))/2)))))))) + 0.2 * tanh(((sin((((pmax((data$Parch), (((data$Fare) * (((sin((data$Fare))) * 
        (sin((data$Age))))))))) * (((data$Fare) * 2)))))) * 2)) + 0.2 * tanh(sin((ifelse(rep(1, NROW(data)) * (data$SibSp > 0), ((((data$SibSp) * (data$Age))) * ((8.98763370513916))), ((((data$Age) * ((-1 * ((9.869604)))))) * (data$Fare)))))) + 0.142762 * tanh(((cos(((((((((10.8782234191895)) * 2)) * 2)) * (data$Fare))))) + (cos((((data$Fare) * (((data$Fare) * (data$Fare))))))))) + 0.055792 * tanh(((data$Fare) * (((((data$SibSp) * (sin(((((((data$Fare) + (data$SibSp))/2)) * ((((data$Fare) + (data$SibSp))/2)))))))) * 
        (data$Fare))))) + 0.2 * tanh(((sin((((((data$Age) * (((data$Fare) + (cos((data$SibSp))))))) * ((8.79990768432617)))))) * (data$Pclass))) + 0.2 * tanh((-1 * ((((sin((((tanh((((((((tanh((data$Cabin))) > (data$Embarked)) * 1)) > (data$SibSp)) * 1)))) * (data$Fare))))) * 2))))) + 0.2 * tanh(((((cos((((pmax((data$Fare), (((ifelse(rep(1, NROW(data)) * (data$Parch > 0), ifelse(rep(1, NROW(data)) * (data$Embarked > 0), data$Parch, data$Fare), 31.006277)) * 2)))) * 2)))) * 2)) * 2)) + 0.2 * tanh(((((((pmin((data$Cabin), 
        (pmax(((((data$Embarked) > (data$Parch)) * 1)), (((((((data$Parch) < (data$Cabin)) * 1)) < (data$Pclass)) * 1)))))) * 2)) * 2)) * 2)) + 0.182145 * tanh(((((sin(((((((((data$Age) + (data$Cabin))/2)) - (sin((data$Fare))))) * (sin((31.006277))))))) * (data$Parch))) * (data$Age))) + 0.2 * tanh(((((((((((5)) * (data$Age))) < (data$SibSp)) * 1)) - (sin((((data$Age) * (((data$Age) * (3.141593))))))))) * ((8)))) + 0.2 * tanh(((((pmin((data$Age), (sin((data$Fare))))) * (sin((((((sin((sin((0.63662))))) * 
        (data$Age))) * (data$Fare))))))) * 2)) + 0.172377 * tanh(((sin((data$Embarked))) - ((((((((data$Cabin) * (((data$Age) * (((data$Cabin)/2))))))/2)) > (((data$Fare) - ((7.43029689788818))))) * 1)))) + 0.2 * tanh(cos(((((14.3448791503906)) * ((((data$Age) + (((data$Pclass) + (ifelse(rep(1, NROW(data)) * (data$Embarked > 0), ifelse(rep(1, NROW(data)) * (data$Age > 0), data$Pclass, 1), data$Embarked)))))/2)))))) + 0.152569 * tanh(sin(((((data$Age) + ((((((data$Age) - (data$SibSp))) + (data$Fare))/2)))/2)))) + 
        0.043055 * tanh((((((((((data$Pclass)/2))/2)) < (sin((((data$Cabin) - (data$Age)))))) * 1)) * (((((data$Fare)/2))/2)))) + 0.199961 * tanh(((data$Age) * (((cos((((ifelse(rep(1, NROW(data)) * (sin((data$Parch)) > 0), cos((sin((data$Parch)))), data$Age)) * 2)))) * (sin((data$Cabin))))))) + 0.035124 * tanh(pmax((((cos((data$SibSp))) + (-3))), ((((-2) + (tanh((cos((ifelse(rep(1, NROW(data)) * (-3 > 0), data$Fare, (6.18699932098389))))))))/2)))) + 0.2 * tanh(((1.570796) * (sin(((((((data$Parch) + 
        (data$Fare))/2)) * (((((((11.1753797531128)) * (data$Fare))) + ((((data$Cabin) + (data$Age))/2)))/2))))))))
    p <- 1/(1 + exp(-p))
}
trainpreds <- gp(xtrain)
testpreds <- gp(xtest)
actual <- xtrain$Survived
print(logLoss(actual, trainpreds))
print(accuracy(actual, round(trainpreds, digits = 0)))
df_final <- data.frame(PassengerId = test$PassengerId, Survived = round(testpreds, digits = 0))
write.csv(df_final, ""gpinr.csv"", row.names = F, quote = F)",0,0,0,0,0,0,0,0,0,0,0,0,0,0
130,retrospectprospect-titanic-machine-learning-from-eda-to-xgb,0.763,"['setdiff', 'filter', 'glimpse', 'subset', 'plot', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'alluvial', 'apply', 'as.factor', 'as.matrix', 'as.numeric', 'c', 'cbind', 'colnames', 'data.frame', 'ifelse', 'is.na', 'length', 'library', 'list', 'mean', 'nrow', 'order', 'paste0', 'print', 'rbind', 'replace', 'round', 'sample', 'seq', 'set.seed', 'sum', 'unique', 'which', 'corrplot.mixed', 'case_when', 'funs', 'group_by', 'mutate', 'mutate_all', 'mutate_if', 'n', 'rename', 'select', 'select_if', 'summarise', 'aes', 'element_text', 'geom_bar', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_vline', 'ggplot', 'ggtitle', 'scale_colour_brewer', 'scale_fill_brewer', 'scale_y_continuous', 'theme', 'theme_minimal', 'ylab', 'kable', 'Accuracy', 'ctree', 'ctree_control', 'read_csv', 'cor', 'predict', 'str_locate', 'str_sub', 'head', 'write.csv', 'mosaic', 'aggr', 'xgb.DMatrix', 'xgb.train']","['tidyverse', 'forcats', 'stringr', 'DT', 'ggplot2', 'scales', 'grid', 'gridExtra', 'corrplot', 'VIM', 'knitr', 'vcd', 'xgboost', 'MLmetrics', 'alluvial', 'party', 'base']",6.75561499595642,"['summarise', 'nrow', 'list', 'mean', 'replace', 'scale_fill_brewer', 'predict', 'element_text', 'scale_colour_brewer', 'which', 'cor', 'glimpse', 'rename', 'theme', 'is.na', 'subset', 'ctree_control', 'print', 'mutate_if', 'ctree', 'case_when', 'as.factor', 'filter', 'round', 'n', 'geom_histogram', 'kable', 'as.matrix', 'geom_hline', 'set.seed', 'theme_minimal', 'setdiff', 'alluvial', 'colnames', 'unique', 'geom_bar', 'str_locate', 'apply', 'length', 'aggr', 'paste0', 'mosaic', 'xgb.DMatrix', 'read_csv', 'group_by', 'corrplot.mixed', 'c', 'aes', 'scale_y_continuous', 'mutate_all', 'ylab', 'mutate', 'rbind', 'sample', 'as.numeric', 'plot', 'ifelse', 'sum', 'funs', 'order', 'seq', 'select_if', 'geom_vline', 'data.frame', 'ggplot', 'ggtitle', 'str_sub', 'geom_density', 'write.csv', 'head', 'user defined', 'library', 'xgb.train', 'cbind', 'select', 'Accuracy']",[],"['retrospectprospect-titanic-machine-learning-from-eda-to-xgb', 'ashutoshds-titanic-rf-prediction-0-81818', 'rboimistruk-titanic-survivals-analysis', 'kapillehar-titanic-rf-prediction-0-81818', 'vikasht34-titanic-rf-prediction-0-81818', 'rogrezende-titanic-sinking-analysis', 'waiyujack-titanic-random-search-in-r', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'hemingwei-titanic-r-solution-from-megan-risdal']","[0.9999999999999999, 0.29356476475667226, 0.29268435168637824, 0.2859665885561055, 0.2859665885561055, 0.2807816697895724, 0.27890555840093506, 0.27569485536591615, 0.27569485536591615, 0.27565927060723067]","{'c(""package:dplyr"", ""package:base"")': ['setdiff'], 'c(""package:dplyr"", ""package:stats"")': ['filter'], 'c(""package:dplyr"", ""package:tibble"")': ['glimpse'], 'c(""package:modeltools"", ""package:base"")': ['subset'], 'c(""package:stats4"", ""package:colorspace"", ""package:graphics"")': ['plot'], 'character(0)': ['data.table', 'set'], 'package:alluvial': ['alluvial'], 'package:base': ['apply', 'as.factor', 'as.matrix', 'as.numeric', 'c', 'cbind', 'colnames', 'data.frame', 'ifelse', 'is.na', 'length', 'library', 'list', 'mean', 'nrow', 'order', 'paste0', 'print', 'rbind', 'replace', 'round', 'sample', 'seq', 'set.seed', 'sum', 'unique', 'which'], 'package:corrplot': ['corrplot.mixed'], 'package:dplyr': ['case_when', 'funs', 'group_by', 'mutate', 'mutate_all', 'mutate_if', 'n', 'rename', 'select', 'select_if', 'summarise'], 'package:ggplot2': ['aes', 'element_text', 'geom_bar', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_vline', 'ggplot', 'ggtitle', 'scale_colour_brewer', 'scale_fill_brewer', 'scale_y_continuous', 'theme', 'theme_minimal', 'ylab'], 'package:knitr': ['kable'], 'package:MLmetrics': ['Accuracy'], 'package:party': ['ctree', 'ctree_control'], 'package:readr': ['read_csv'], 'package:stats': ['cor', 'predict'], 'package:stringr': ['str_locate', 'str_sub'], 'package:utils': ['head', 'write.csv'], 'package:vcd': ['mosaic'], 'package:VIM': ['aggr'], 'package:xgboost': ['xgb.DMatrix', 'xgb.train']}","{""c(""package:dplyr"", ""package:base"")"": [""setdiff""], ""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""c(""package:dplyr"", ""package:tibble"")"": [""glimpse""], ""c(""package:modeltools"", ""package:base"")"": [""subset""], ""c(""package:stats4"", ""package:colorspace"", ""package:graphics"")"": [""plot""], ""character(0)"": [""data.table"", ""set""], ""package:alluvial"": [""alluvial""], ""package:base"": [""apply"", ""as.factor"", ""as.matrix"", ""as.numeric"", ""c"", ""cbind"", ""colnames"", ""data.frame"", ""ifelse"", ""is.na"", ""length"", ""library"", ""list"", ""mean"", ""nrow"", ""order"", ""paste0"", ""print"", ""rbind"", ""replace"", ""round"", ""sample"", ""seq"", ""set.seed"", ""sum"", ""unique"", ""which""], ""package:corrplot"": [""corrplot.mixed""], ""package:dplyr"": [""case_when"", ""funs"", ""group_by"", ""mutate"", ""mutate_all"", ""mutate_if"", ""n"", ""rename"", ""select"", ""select_if"", ""summarise""], ""package:ggplot2"": [""aes"", ""element_text"", ""geom_bar"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_vline"", ""ggplot"", ""ggtitle"", ""scale_colour_brewer"", ""scale_fill_brewer"", ""scale_y_continuous"", ""theme"", ""theme_minimal"", ""ylab""], ""package:knitr"": [""kable""], ""package:MLmetrics"": [""Accuracy""], ""package:party"": [""ctree"", ""ctree_control""], ""package:readr"": [""read_csv""], ""package:stats"": [""cor"", ""predict""], ""package:stringr"": [""str_locate"", ""str_sub""], ""package:utils"": [""head"", ""write.csv""], ""package:vcd"": [""mosaic""], ""package:VIM"": [""aggr""], ""package:xgboost"": [""xgb.DMatrix"", ""xgb.train""]}",cpackagedplyr packagebase setdiff cpackagedplyr packagestats filter cpackagedplyr packagetibble glimpse cpackagemodeltools packagebase subset cpackagestats4 packagecolorspace packagegraphics plot character0 datatable set packagealluvial alluvial packagebase apply asfactor asmatrix asnumeric c cbind colnames dataframe ifelse isna length library list mean nrow order paste0 print rbind replace round sample seq setseed sum unique which packagecorrplot corrplotmixed packagedplyr casewhen funs groupby mutate mutateall mutateif n rename select selectif summarise packageggplot2 aes elementtext geombar geomdensity geomhistogram geomhline geomvline ggplot ggtitle scalecolourbrewer scalefillbrewer scaleycontinuous theme thememinimal ylab packageknitr kable packageMLmetrics Accuracy packageparty ctree ctreecontrol packagereadr readcsv packagestats cor predict packagestringr strlocate strsub packageutils head writecsv packagevcd mosaic packageVIM aggr packagexgboost xgbDMatrix xgbtrain,"knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(forcats)
library(stringr)
library(DT)
library(ggplot2)
library(scales)
library(grid)
library(gridExtra)
library(corrplot)
library(VIM)
library(knitr)
library(vcd)
library(xgboost)
library(MLmetrics)
train <- read_csv(""../input/train.csv"")
test <- read_csv(""../input/test.csv"")
train$set <- ""train""
test$set <- ""test""
test$Survived <- NA
full <- rbind(train, test)
kable(head(full, 10), caption = ""Data Set"", format = ""markdown"")
glimpse(full)
full <- full %>% mutate_if(is.character, funs(replace(., . == """", NA)))
missplot <- aggr(full %>% select(-Survived), prop = FALSE, combined = TRUE, numbers = TRUE, sortVars = TRUE, sortCombs = TRUE, plot = FALSE)
plot(missplot)
full <- full %>% mutate(Age = ifelse(is.na(Age), mean(full$Age, na.rm = TRUE), Age), `Age Group` = case_when(Age < 13 ~ ""Age.0012"", Age >= 13 & Age < 18 ~ ""Age.1317"", Age >= 18 & Age < 60 ~ ""Age.1859"", Age >= 60 ~ ""Age.60Ov""))
full$Embarked <- replace(full$Embarked, which(is.na(full$Embarked)), ""S"")
full <- full %>% mutate(Title = as.factor(str_sub(Name, str_locate(Name, "","")[, 1] + 2, str_locate(Name, ""\\."")[, 1] - 1)))
title_tbl <- full %>% group_by(Title) %>% summarise(N = n())
full <- full %>% mutate(`Family Size` = as.numeric(SibSp) + as.numeric(Parch) + 1, `Family Group` = case_when(`Family Size` == 1 ~ ""single"", `Family Size` > 1 & `Family Size` <= 3 ~ ""small"", `Family Size` >= 4 ~ ""large""))
full <- full %>% mutate(Survived = case_when(Survived == 1 ~ ""Yes"", Survived == 0 ~ ""No""))
crude_summary <- full %>% filter(set == ""train"") %>% select(PassengerId, Survived) %>% group_by(Survived) %>% summarise(n = n()) %>% mutate(freq = n/sum(n))
crude_survrate <- crude_summary$freq[crude_summary$Survived == ""Yes""]
kable(crude_summary, caption = ""2x2 Contingency Table on Survival."", format = ""markdown"")
ggplot(full %>% filter(set == ""train""), aes(Pclass, fill = Survived)) + geom_bar(position = ""fill"") + scale_fill_brewer(palette = ""Set1"") + scale_y_continuous(labels = percent) + ylab(""Survival Rate"") + geom_hline(yintercept = crude_survrate, col = ""white"", lty = 2, size = 2) + ggtitle(""Survival Rate by Class"") + theme_minimal()
ggplot(full %>% filter(set == ""train""), aes(Sex, fill = Survived)) + geom_bar(position = ""fill"") + scale_fill_brewer(palette = ""Set1"") + scale_y_continuous(labels = percent) + ylab(""Survival Rate"") + geom_hline(yintercept = crude_survrate, col = ""white"", lty = 2, size = 2) + ggtitle(""Survival Rate by Sex"") + theme_minimal()
tbl_age <- full %>% filter(set == ""train"") %>% select(Age, Survived) %>% group_by(Survived) %>% summarise(mean.age = mean(Age, na.rm = TRUE))
ggplot(full %>% filter(set == ""train""), aes(Age, fill = Survived)) + geom_histogram(aes(y = ..density..), alpha = 0.5) + geom_density(alpha = 0.2, aes(colour = Survived)) + geom_vline(data = tbl_age, aes(xintercept = mean.age, colour = Survived), lty = 2, size = 1) + scale_fill_brewer(palette = ""Set1"") + scale_colour_brewer(palette = ""Set1"") + scale_y_continuous(labels = percent) + ylab(""Density"") + ggtitle(""Survival Rate by Age"") + theme_minimal()
ggplot(full %>% filter(set == ""train"" & !is.na(Age)), aes(`Age Group`, fill = Survived)) + geom_bar(position = ""fill"") + scale_fill_brewer(palette = ""Set1"") + scale_y_continuous(labels = percent) + ylab(""Survival Rate"") + geom_hline(yintercept = crude_survrate, col = ""white"", lty = 2, size = 2) + ggtitle(""Survival Rate by Age Group"") + theme_minimal()
ggplot(full %>% filter(set == ""train""), aes(SibSp, fill = Survived)) + geom_bar(position = ""fill"") + scale_fill_brewer(palette = ""Set1"") + scale_y_continuous(labels = percent) + ylab(""Survival Rate"") + geom_hline(yintercept = crude_survrate, col = ""white"", lty = 2, size = 2) + ggtitle(""Survival Rate by SibSp"") + theme_minimal()
ggplot(full %>% filter(set == ""train""), aes(Parch, fill = Survived)) + geom_bar(position = ""fill"") + scale_fill_brewer(palette = ""Set1"") + scale_y_continuous(labels = percent) + ylab(""Survival Rate"") + geom_hline(yintercept = crude_survrate, col = ""white"", lty = 2, size = 2) + ggtitle(""Survival Rate by Parch"") + theme_minimal()
ggplot(full %>% filter(set == ""train""), aes(Embarked, fill = Survived)) + geom_bar(position = ""fill"") + scale_fill_brewer(palette = ""Set1"") + scale_y_continuous(labels = percent) + ylab(""Survival Rate"") + geom_hline(yintercept = crude_survrate, col = ""white"", lty = 2, size = 2) + ggtitle(""Survival Rate by Embarked"") + theme_minimal()
ggplot(full %>% filter(set == ""train"") %>% na.omit, aes(Title, fill = Survived)) + geom_bar(position = ""fill"") + scale_fill_brewer(palette = ""Set1"") + scale_y_continuous(labels = percent) + ylab(""Survival Rate"") + geom_hline(yintercept = crude_survrate, col = ""white"", lty = 2, size = 2) + ggtitle(""Survival Rate by Title"") + theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(full %>% filter(set == ""train"") %>% na.omit, aes(`Family Group`, fill = Survived)) + geom_bar(position = ""fill"") + scale_fill_brewer(palette = ""Set1"") + scale_y_continuous(labels = percent) + ylab(""Survival Rate"") + geom_hline(yintercept = crude_survrate, col = ""white"", lty = 2, size = 2) + ggtitle(""Survival Rate by Family Group"") + theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(full %>% filter(set == ""train""), aes(Pclass, fill = Survived)) + geom_bar(position = ""stack"") + scale_fill_brewer(palette = ""Set1"") + scale_y_continuous(labels = comma) + ylab(""Passengers"") + ggtitle(""Survived by Class"") + theme_minimal()
ggplot(full %>% filter(set == ""train""), aes(Sex, fill = Survived)) + geom_bar(position = ""stack"") + scale_fill_brewer(palette = ""Set1"") + scale_y_continuous(labels = percent) + scale_y_continuous(labels = comma) + ylab(""Passengers"") + ggtitle(""Survived by Sex"") + theme_minimal()
ggplot(full %>% filter(set == ""train""), aes(Age, fill = Survived)) + geom_histogram(aes(y = ..count..), alpha = 0.5) + geom_vline(data = tbl_age, aes(xintercept = mean.age, colour = Survived), lty = 2, size = 1) + scale_fill_brewer(palette = ""Set1"") + scale_colour_brewer(palette = ""Set1"") + scale_y_continuous(labels = comma) + ylab(""Density"") + ggtitle(""Survived by Age"") + theme_minimal()
ggplot(full %>% filter(set == ""train"" & !is.na(Age)), aes(`Age Group`, fill = Survived)) + geom_bar(position = ""stack"") + scale_fill_brewer(palette = ""Set1"") + scale_y_continuous(labels = comma) + ylab(""Passengers"") + ggtitle(""Survived by Age Group"") + theme_minimal()
ggplot(full %>% filter(set == ""train""), aes(SibSp, fill = Survived)) + geom_bar(position = ""stack"") + scale_fill_brewer(palette = ""Set1"") + scale_y_continuous(labels = percent) + scale_y_continuous(labels = comma) + ylab(""Passengers"") + ggtitle(""Survived by SibSp"") + theme_minimal()
ggplot(full %>% filter(set == ""train""), aes(Parch, fill = Survived)) + geom_bar(position = ""stack"") + scale_fill_brewer(palette = ""Set1"") + scale_y_continuous(labels = comma) + ylab(""Passengers"") + ggtitle(""Survived by Parch"") + theme_minimal()
ggplot(full %>% filter(set == ""train""), aes(Embarked, fill = Survived)) + geom_bar(position = ""stack"") + scale_fill_brewer(palette = ""Set1"") + scale_y_continuous(labels = comma) + ylab(""Passengers"") + ggtitle(""Survived by Embarked"") + theme_minimal()
ggplot(full %>% filter(set == ""train"") %>% na.omit, aes(Title, fill = Survived)) + geom_bar(position = ""stack"") + scale_fill_brewer(palette = ""Set1"") + scale_y_continuous(labels = comma) + ylab(""Passengers"") + ggtitle(""Survived by Title"") + theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(full %>% filter(set == ""train"") %>% na.omit, aes(`Family Group`, fill = Survived)) + geom_bar(position = ""stack"") + scale_fill_brewer(palette = ""Set1"") + scale_y_continuous(labels = comma) + ylab(""Passengers"") + ggtitle(""Survived by Family Group"") + theme_minimal() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
tbl_corr <- full %>% filter(set == ""train"") %>% select(-PassengerId, -SibSp, -Parch) %>% select_if(is.numeric) %>% cor(use = ""complete.obs"") %>% corrplot.mixed(tl.cex = 0.85)
tbl_mosaic <- full %>% filter(set == ""train"") %>% select(Survived, Pclass, Sex, AgeGroup = `Age Group`, Title, Embarked, `Family Group`) %>% mutate_all(as.factor)
mosaic(~Pclass + Sex + Survived, data = tbl_mosaic, shade = TRUE, legend = TRUE)
library(alluvial)
tbl_summary <- full %>% filter(set == ""train"") %>% group_by(Survived, Sex, Pclass, `Age Group`, Title) %>% summarise(N = n()) %>% ungroup %>% na.omit
alluvial(tbl_summary[, c(1:4)], freq = tbl_summary$N, border = NA, col = ifelse(tbl_summary$Survived == ""Yes"", ""blue"", ""gray""), cex = 0.65, ordering = list(order(tbl_summary$Survived, tbl_summary$Pclass == 1), order(tbl_summary$Sex, tbl_summary$Pclass == 1), NULL, NULL))
library(party)
tbl_party <- full %>% filter(set == ""train"") %>% select(Survived, Pclass, Sex, `Age Group`, Title, Embarked, `Family Group`) %>% mutate_all(as.factor)
ctree_mdl <- ctree(Survived ~ ., data = tbl_party %>% na.omit, controls = ctree_control(testtype = ""Bonferroni""))
plot(ctree_mdl)
full_2 <- full %>% select(-Name, -Ticket, -Cabin, -set) %>% mutate(Survived = ifelse(Survived == ""Yes"", 1, 0)) %>% rename(AgeGroup = `Age Group`, FamilySize = `Family Size`, FamilyGroup = `Family Group`)
ohe_cols <- c(""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""AgeGroup"", ""FamilyGroup"")
num_cols <- setdiff(colnames(full_2), ohe_cols)
full_final <- subset(full_2, select = num_cols)
for (var in ohe_cols) {
    values <- unique(full_2[[var]])
    for (j in 1:length(values)) {
        full_final[[paste0(var, ""_"", values[j])]] <- (full_2[[var]] == values[j]) * 1
    }
}
submission <- TRUE
data_train <- full_final %>% filter(!is.na(Survived))
data_test <- full_final %>% filter(is.na(Survived))
set.seed(777)
ids <- sample(nrow(data_train))
n_folds <- ifelse(submission, 1, 5)
score <- data.table()
result <- data.table()
for (i in 1:n_folds) {
    if (submission) {
        x_train <- data_train %>% select(-PassengerId, -Survived)
        x_test <- data_test %>% select(-PassengerId, -Survived)
        y_train <- data_train$Survived
    }
    else {
        train.ids <- ids[-seq(i, length(ids), by = n_folds)]
        test.ids <- ids[seq(i, length(ids), by = n_folds)]
        x_train <- data_train %>% select(-PassengerId, -Survived)
        x_train <- x_train[train.ids, ]
        x_test <- data_train %>% select(-PassengerId, -Survived)
        x_test <- x_test[test.ids, ]
        y_train <- data_train$Survived[train.ids]
        y_test <- data_train$Survived[test.ids]
    }
    x_train <- apply(x_train, 2, as.numeric)
    x_test <- apply(x_test, 2, as.numeric)
    if (submission) {
        nrounds <- 12
        early_stopping_round <- NULL
        dtrain <- xgb.DMatrix(data = as.matrix(x_train), label = y_train)
        dtest <- xgb.DMatrix(data = as.matrix(x_test))
        watchlist <- list(train = dtrain)
    }
    else {
        nrounds <- 3000
        early_stopping_round <- 100
        dtrain <- xgb.DMatrix(data = as.matrix(x_train), label = y_train)
        dtest <- xgb.DMatrix(data = as.matrix(x_test), label = y_test)
        watchlist <- list(train = dtrain, test = dtest)
    }
    params <- list(eta = 0.01, max_depth = 8, colsample_bytree = 0.3528, min_child_weight = 1, subsample = 1, objective = ""reg:logistic"", eval_metric = ""auc"")
    model_xgb <- xgb.train(params = params, data = dtrain, maximize = TRUE, nrounds = nrounds, watchlist = watchlist, early_stopping_round = early_stopping_round, print_every_n = 2)
    pred <- predict(model_xgb, dtest)
    if (submission) {
        result <- cbind(data_test %>% select(PassengerId), Survived = round(pred, 0))
    }
    else {
        score <- rbind(score, data.frame(accuracy = Accuracy(round(pred, 0), y_test), best_iteration = model_xgb$best_iteration))
        temp <- cbind(data_train[test.ids, ], pred = pred)
        result <- rbind(result, temp)
    }
}
if (submission) {
    write.csv(result, ""submission.csv"", row.names = FALSE)
} else {
    print(mean(score$accuracy))
    print(score$accuracy)
    print(Accuracy(result$Survived, round(result$pred, 0)))
}",0,0,0,0,0,0,0,0,1,0,0,0,0,0
131,terfilip-titanic,0.763,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.factor', 'as.vector', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'length', 'library', 'max', 'names', 'print', 'rbind', 'round', 'sapply', 'strsplit', 'table', 'which', 'randomForest', 'varImpPlot', 'lm', 'median', 'predict', 'read.csv', 'write.csv']","['randomForest', 'rpart', 'base']",5.35214495658875,"['median', 'which', 'as.character', 'is.na', 'names', 'print', 'lm', 'as.factor', 'sapply', 'round', 'varImpPlot', 'gsub', 'factor', 'colnames', 'max', 'length', 'read.csv', 'as.vector', 'table', 'randomForest', 'c', 'rbind', 'predict', 'write.csv', 'data.frame', 'strsplit', 'user defined', 'library']",[],"['harryem-titanic-comparing-two-approaches-for-missing-data', 'maza91-titanic-logistic-regression', 'maza91-titanic-neural-network-try', 'domini-titanic-data-exploration-and-modelling', 'djohnbar-titanic-rf', 'ablearcher-my-titanic', 'djohnbar-fork-of-titanic-rf-w-titles', 'harsh2-exploring-the-titanic-dataset', 'erikbruin-titanic-2nd-degree-families-and-majority-voting', 'zahoorahmad-titanic-2nd-degree-families-and-majority-voting']","[0.828654160390233, 0.15749306568826035, 0.14032251109445612, 0.12531260599481145, 0.12233091713446441, 0.12176114129993727, 0.11803677819216112, 0.11605874073701426, 0.11510612617048041, 0.11497493571021067]","{'character(0)': ['fill_age', 'get_mode'], 'package:base': ['as.character', 'as.factor', 'as.vector', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'length', 'library', 'max', 'names', 'print', 'rbind', 'round', 'sapply', 'strsplit', 'table', 'which'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:stats': ['lm', 'median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""fill_age"", ""get_mode""], ""package:base"": [""as.character"", ""as.factor"", ""as.vector"", ""c"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""length"", ""library"", ""max"", ""names"", ""print"", ""rbind"", ""round"", ""sapply"", ""strsplit"", ""table"", ""which""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:stats"": [""lm"", ""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 fillage getmode packagebase ascharacter asfactor asvector c colnames dataframe factor gsub isna length library max names print rbind round sapply strsplit table which packagerandomForest randomForest varImpPlot packagestats lm median predict packageutils readcsv writecsv,"library(randomForest)
library(rpart)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
extract_title <- function(name) {
    title <- strsplit(as.character(name), split = ""[,.]"")[[1]][2]
    gsub("" "", """", title)
}
extract_surname <- function(name) {
    strsplit(as.character(name), split = "","")[[1]][1]
}
clean_ages <- function(age) {
    age = round(age)
    if (age < 1) {
        age = 1
    }
    age
}
get_mode <- function(column) {
    tmp <- table(as.vector(column))
    mode <- names(tmp)[tmp == max(tmp)]
}
fill_age <- function(all) {
    fit <- lm(Age ~ FamilySize + SibSp + Parch + Fare + Sex + Pclass, data = all[!is.na(all$Age), ])
    predictions <- sapply(predict(fit, all[is.na(all$Age), ]), FUN = clean_ages)
    all$Age[is.na(all$Age)] <- predictions
    all
}
test$Survived <- NA
merged <- rbind(train, test)
merged$Title <- sapply(merged$Name, FUN = extract_title)
merged$FamilySize <- merged$SibSp + merged$Parch + 1
merged$Title[merged$Title == ""Mlle""] <- ""Miss""
merged$Title[merged$Title %in% c(""Mme"", ""Dona"")] <- ""Mrs""
merged$Title[merged$Title %in% c(""Don"", ""Jonkheer"")] <- ""Sir""
merged$Title = factor(merged$Title)
merged <- fill_age(merged)
merged$Fare[which(is.na(merged$Fare))] <- median(merged$Fare, na.rm = TRUE)
merged$Embarked[which(is.na(merged$Embarked))] <- get_mode(merged$Embarked)
merged$Child <- 0
merged$Child[merged$Age < 18] <- 1
merged$Mother <- 0
merged$Mother[merged$Sex == ""female"" & merged$Age >= 18 & merged$Parch > 0 & merged$Title != ""Miss""] <- 1
print(colnames(merged))
train_len <- length(train$PassengerId)
train <- merged[1:train_len, ]
test <- merged[(train_len + 1):length(merged$PassengerId), ]
forest <- randomForest(as.factor(Survived) ~ Title + Pclass + Sex + Age + Fare + FamilySize + Embarked + Parch + SibSp + Child + Mother, data = train, importance = TRUE, ntree = 3000)
predictions <- predict(forest, test)
varImpPlot(forest)
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = predictions)
write.csv(my_solution, file = ""my_solution.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
132,caliphcheng-titanic-analysis-using-r,0.758,"['cbind', 'rbind', 'complete', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'apply', 'as.data.frame', 'as.factor', 'c', 'data.frame', 'diag', 'gsub', 'is.na', 'library', 'names', 'nrow', 'return', 'set.seed', 'sum', 'table', 'predict.train', 'train', 'trainControl', 'aes', 'ggplot', 'position_dodge', 'stat_bin', 'mice', 'map_df', 'gather', 'read.csv', 'write.csv']","['stringr', 'rpart', 'ggplot2', 'dplyr', 'randomForest', 'caret', 'purrr', 'mice', 'tidyr', 'base']",34.3358469009399,"['nrow', 'complete', 'is.na', 'map_df', 'names', 'as.factor', 'stat_bin', 'mice', 'gather', 'set.seed', 'gsub', 'position_dodge', 'apply', 'read.csv', 'table', 'return', 'as.data.frame', 'train', 'c', 'aes', 'diag', 'rbind', 'sum', 'write.csv', 'data.frame', 'ggplot', 'user defined', 'library', 'trainControl', 'cbind', 'predict.train']",[],"['djohnbar-titanic-rf', 'maza91-titanic-logistic-regression', 'domini-titanic-data-exploration-and-modelling', 'djohnbar-fork-of-titanic-rf-w-titles', 'ravikrishnareddy-titanic-survival-prediction', 'zahoorahmad-titanic-2nd-degree-families-and-majority-voting', 'ushasri-titanic-2nd-degree-families-and-majority-voting', 'erikbruin-titanic-2nd-degree-families-and-majority-voting', 'harsh2-exploring-the-titanic-dataset', 'ablearcher-my-titanic']","[0.5800731553666649, 0.5765188549621197, 0.5610295173393033, 0.5608975693204711, 0.5223837238733217, 0.5223640310777039, 0.5223640310777039, 0.5218446445574871, 0.5209968695009675, 0.5052961146776414]","{'c(""package:mice"", ""package:base"")': ['cbind', 'rbind'], 'c(""package:tidyr"", ""package:mice"")': ['complete'], 'character(0)': ['class_assess'], 'package:base': ['apply', 'as.data.frame', 'as.factor', 'c', 'data.frame', 'diag', 'gsub', 'is.na', 'library', 'names', 'nrow', 'return', 'set.seed', 'sum', 'table'], 'package:caret': ['predict.train', 'train', 'trainControl'], 'package:ggplot2': ['aes', 'ggplot', 'position_dodge', 'stat_bin'], 'package:mice': ['mice'], 'package:purrr': ['map_df'], 'package:tidyr': ['gather'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:mice"", ""package:base"")"": [""cbind"", ""rbind""], ""c(""package:tidyr"", ""package:mice"")"": [""complete""], ""character(0)"": [""class_assess""], ""package:base"": [""apply"", ""as.data.frame"", ""as.factor"", ""c"", ""data.frame"", ""diag"", ""gsub"", ""is.na"", ""library"", ""names"", ""nrow"", ""return"", ""set.seed"", ""sum"", ""table""], ""package:caret"": [""predict.train"", ""train"", ""trainControl""], ""package:ggplot2"": [""aes"", ""ggplot"", ""position_dodge"", ""stat_bin""], ""package:mice"": [""mice""], ""package:purrr"": [""map_df""], ""package:tidyr"": [""gather""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackagemice packagebase cbind rbind cpackagetidyr packagemice complete character0 classassess packagebase apply asdataframe asfactor c dataframe diag gsub isna library names nrow return setseed sum table packagecaret predicttrain train trainControl packageggplot2 aes ggplot positiondodge statbin packagemice mice packagepurrr mapdf packagetidyr gather packageutils readcsv writecsv,"library(""stringr"")
library(""rpart"")
library(""ggplot2"")
library(""dplyr"")
library(""randomForest"")
library(""caret"")
library(""purrr"")
library(""mice"")
library(""tidyr"")
train_raw <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test_raw <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
test_raw$Survived <- NA
all <- rbind(train_raw, test_raw)
all[all == """"] <- NA
all$Pclass <- as.factor(all$Pclass)
all$Sex <- as.factor(all$Sex)
Family_size <- all$SibSp + all$Parch + 1
table(Family_size)
all$Family[Family_size == 1] <- ""Single""
all$Family[Family_size > 1 & Family_size <= 4] <- ""Small""
all$Family[Family_size >= 5] <- ""Big""
all$Title <- gsub(pattern = "".*,\\s|\\..*"", """", all$Name)
names(table(all$Title)[table(all$Title) < 20])
all$Title[all$Title %in% c(""Capt"", ""Don"", ""Major"", ""Sir"", ""Col"", ""Jonkheer"", ""Rev"", ""Dr"")] <- ""Mr""
all$Title[all$Title %in% c(""Mlle"", ""Mme"", ""Ms"")] <- ""Miss""
all$Title[all$Title %in% c(""the Countess"", ""Lady"", ""Dona"")] <- ""Mrs""
fac_var <- c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Embarked"", ""Title"", ""Family"", ""Survived"")
all[, fac_var] <- all[, fac_var] %>% map_df(as.factor)
apply(all, 2, function(x) {
    sum(is.na(x))
})
all_rf <- all[, -c(1, 2, 4, 7, 8, 9, 11)] %>% mice(method = ""rf"") %>% mice::complete()
all_cart <- all[, -c(1, 2, 4, 7, 8, 9, 11)] %>% mice(method = ""cart"") %>% mice::complete()
age_orig <- all$Age
age_rf <- all_rf$Age
age_cart <- all_cart$Age
age1 <- as.data.frame(cbind(age_orig, age_cart, age_rf))
names(age1) <- c(""Original"", ""CART"", ""RF"")
age <- gather(age1, key = origin, value = age, Original, CART, RF)
ggplot(age, aes(x = age, y = ..density.., fill = origin)) + stat_bin(alpha = 0.5, position = position_dodge(1))
all[, c(""Age"", ""Fare"", ""Embarked"")] <- all_rf[, c(""Age"", ""Fare"", ""Embarked"")]
train <- all[1:nrow(train_raw), ]
test <- all[-(1:nrow(train_raw)), ]
set.seed(16)
control_rf <- trainControl(method = ""cv"", number = 10, verboseIter = TRUE, savePredictions = ""final"")
model_rf <- train(Survived ~ Pclass + Sex + Age + Family + Embarked + Title, train, method = ""rf"", trControl = control_rf)
train_rf_pred <- model_rf$pred[, c(""pred"", ""obs"")]
class_assess <- function(x) {
    pred_table <- table(x$obs, x$pred)
    tp <- pred_table[1, 1]
    fp <- pred_table[1, 2]
    fn <- pred_table[2, 1]
    tn <- pred_table[2, 2]
    Accuracy <- sum(diag(pred_table))/sum(pred_table)
    Precision <- tp/(tp + fp)
    Recall <- tp/(tp + fn)
    F1_Score <- 2 * Precision * Recall/(Precision + Recall)
    return(data.frame(Accuracy = Accuracy, Precision = Precision, Recall = Recall, F1_Score = F1_Score))
}
RF <- class_assess(train_rf_pred)
control_svm <- trainControl(method = ""cv"", number = 10, verboseIter = TRUE, savePredictions = ""final"")
model_svm <- train(Survived ~ Pclass + Sex + Age + Family + Embarked + Title, train, method = ""svmLinear"", trControl = control_svm)
train_svm_pred <- model_svm$pred[, c(""pred"", ""obs"")]
SVM <- class_assess(train_svm_pred)
control_knn <- trainControl(method = ""cv"", number = 10, verboseIter = TRUE, savePredictions = ""final"")
model_knn <- train(Survived ~ Pclass + Sex + Age + Family + Embarked + Title, train, method = ""kknn"", trControl = control_knn)
train_knn_pred <- model_knn$pred[, c(""pred"", ""obs"")]
KNN <- class_assess(train_knn_pred)
control_nnet <- trainControl(method = ""cv"", number = 10, verboseIter = TRUE, savePredictions = ""final"")
model_nnet <- train(Survived ~ Pclass + Sex + Age + Family + Embarked + Title, train, method = ""nnet"", trControl = control_nnet)
train_nnet_pred <- model_nnet$pred[, c(""pred"", ""obs"")]
NNET <- class_assess(train_nnet_pred)
comparison <- rbind(RF = RF, SVM = SVM, KNN = KNN, NNET = NNET)
comparison
test_pred <- predict.train(model_nnet, test)
titanic_prediction <- data.frame(PassengerId = test$PassengerId, Survived = test_pred)
write.csv(titanic_prediction, file = ""Titanic_prediction.csv"", row.names = FALSE)",1,0,1,1,0,0,0,1,0,1,0,0,0,0
133,ccheng2016-titanic-survival,0.7440000000000001,"['summary', 'plot', 'as.character', 'as.factor', 'c', 'data.frame', 'factor', 'is.na', 'length', 'library', 'list.files', 'nrow', 'paste', 'print', 'prop.table', 'rbind', 'rep', 'sample', 'sapply', 'set.seed', 'strsplit', 'sub', 'sum', 'table', 'which', 'text', 'dev.copy', 'dev.off', 'randomForest', 'varImpPlot', 'fancyRpartPlot', 'rpart', 'aggregate', 'formula', 'median', 'predict', 'head', 'read.table', 'str', 'write.csv']","['ggplot2', 'readr', 'rpart', 'randomForest', 'e1071', 'party', 'rattle', 'rpart.plot', 'RColorBrewer', 'randomForest', 'base']",10.199065923690801,"['nrow', 'dev.off', 'median', 'which', 'as.character', 'is.na', 'sub', 'print', 'prop.table', 'rpart', 'as.factor', 'summary', 'text', 'sapply', 'varImpPlot', 'rep', 'str', 'set.seed', 'factor', 'aggregate', 'length', 'table', 'dev.copy', 'randomForest', 'c', 'fancyRpartPlot', 'rbind', 'paste', 'sample', 'plot', 'sum', 'predict', 'write.csv', 'list.files', 'data.frame', 'strsplit', 'read.table', 'head', 'library', 'formula']",[],"['alejandrorivas-titanic-beginners-principiantes-espa-ol', 'ammara-titanic-competition-script-using-rf-2', 'jmercer187-fork-of-titanic2', 'ammara-titanic-competition-using-boosting', 'mmaguero-titanic-majority-vote-of-ridge-rf-and-gbm', 'byrony-titanic-majority-vote-of-ridge-rf-and-gbm', 'lizpund-titanic-competition-kernel', 'aravind5-titanic', 'yugrao-titanic2', 'yugrao-titanic']","[0.8274880297184888, 0.8025047964466487, 0.7595388636765474, 0.7538437117291295, 0.699662565153829, 0.699662565153829, 0.6773655608859341, 0.6709636163890942, 0.6709636163890942, 0.6709636163890942]","{'c(""package:stats4"", ""package:base"")': ['summary'], 'c(""package:stats4"", ""package:graphics"")': ['plot'], 'package:base': ['as.character', 'as.factor', 'c', 'data.frame', 'factor', 'is.na', 'length', 'library', 'list.files', 'nrow', 'paste', 'print', 'prop.table', 'rbind', 'rep', 'sample', 'sapply', 'set.seed', 'strsplit', 'sub', 'sum', 'table', 'which'], 'package:graphics': ['text'], 'package:grDevices': ['dev.copy', 'dev.off'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:rattle': ['fancyRpartPlot'], 'package:rpart': ['rpart'], 'package:stats': ['aggregate', 'formula', 'median', 'predict'], 'package:utils': ['head', 'read.table', 'str', 'write.csv']}","{""c(""package:stats4"", ""package:base"")"": [""summary""], ""c(""package:stats4"", ""package:graphics"")"": [""plot""], ""package:base"": [""as.character"", ""as.factor"", ""c"", ""data.frame"", ""factor"", ""is.na"", ""length"", ""library"", ""list.files"", ""nrow"", ""paste"", ""print"", ""prop.table"", ""rbind"", ""rep"", ""sample"", ""sapply"", ""set.seed"", ""strsplit"", ""sub"", ""sum"", ""table"", ""which""], ""package:graphics"": [""text""], ""package:grDevices"": [""dev.copy"", ""dev.off""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:rattle"": [""fancyRpartPlot""], ""package:rpart"": [""rpart""], ""package:stats"": [""aggregate"", ""formula"", ""median"", ""predict""], ""package:utils"": [""head"", ""read.table"", ""str"", ""write.csv""]}",cpackagestats4 packagebase summary cpackagestats4 packagegraphics plot packagebase ascharacter asfactor c dataframe factor isna length library listfiles nrow paste print proptable rbind rep sample sapply setseed strsplit sub sum table which packagegraphics text packagegrDevices devcopy devoff packagerandomForest randomForest varImpPlot packagerattle fancyRpartPlot packagerpart rpart packagestats aggregate formula median predict packageutils head readtable str writecsv,"library(ggplot2)
library(readr)
library(rpart)
library(randomForest)
library(e1071)
library(party)
list.files(""../input"")
trainData <- read.table(""../input/train.csv"", sep = "","", header = TRUE)
head(trainData)
str(trainData)
table(trainData$Survived)
prop.table(table(trainData$Survived))
testData <- read.table(""../input/test.csv"", sep = "","", header = T)
str(testData)
testData$Survived <- rep(0, nrow(testData))
submit <- data.frame(PassengerId = testData$PassengerId, Survived = testData$Survived)
write.csv(submit, file = ""./test1.csv"", row.names = F)
summary(trainData$Sex)
prop.table(table(trainData$Sex, trainData$Survived))
prop.table(table(trainData$Sex, trainData$Survived), 1)
testData$Survived <- 0
testData$Survived[testData$Sex == ""female""] <- 1
testData$Survived[testData$Age < 18] <- 1
submit <- data.frame(PassengerId = testData$PassengerId, Survived = testData$Survived)
write.csv(submit, file = ""./test2.csv"", row.names = F)
summary(trainData$Age)
summary(trainData$Sex)
trainData$Child <- 0
trainData$Child[trainData$Age < 18] <- 1
aggregate(Survived ~ Child + Sex, data = trainData, FUN = sum)
aggregate(Survived ~ Child + Sex, data = trainData, FUN = length)
aggregate(Survived ~ Child + Sex, data = trainData, FUN = function(x) {
    sum(x)/length(x)
})
trainData$Fare2 <- ""30+""
trainData$Fare2[trainData$Fare < 30 & trainData$Fare >= 20] <- ""20-30""
trainData$Fare2[trainData$Fare < 20 & trainData$Fare >= 10] <- ""10-20""
trainData$Fare2[trainData$Fare < 10] <- ""<10""
aggregate(Survived ~ Child + Fare2 + Sex, data = trainData, FUN = function(x) {
    sum(x)/length(x)
})
aggregate(Survived ~ Fare2 + Pclass + Child + Sex, data = trainData, FUN = function(x) {
    sum(x)/length(x)
})
fol <- formula(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare)
modelR <- rpart(fol, method = ""class"", data = trainData)
print(modelR)
modelR <- rpart(fol, method = ""class"", data = trainData)
guessR <- predict(modelR, newdata = testData, type = ""class"")
accuracy <- (sum(guessR == testData$Survived)/nrow(testData))
print(accuracy)
plot(modelR)
text(modelR)
dev.copy(png, file = ""./rpart.png"", height = 480, width = 480)
dev.off()
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(modelR)
dev.copy(png, file = ""./rpart2.png"", height = 480, width = 480)
dev.off()
submit <- data.frame(PassengerId = testData$PassengerId, Survived = guessR)
write.csv(submit, file = ""./test2final.csv"", row.names = FALSE)
trainData$Name[1]
trainData <- read.table(""../input/train.csv"", sep = "","", header = TRUE)
testData$Survived <- NA
combi <- rbind(trainData, testData)
combi$Name <- as.character(combi$Name)
combi$Name[1]
strsplit(combi$Name[1], split = ""[,.]"")
strsplit(combi$Name[1], split = ""[,.]"")[[1]]
strsplit(combi$Name[1], split = ""[,.]"")[[1]][[2]]
combi$Title <- sapply(combi$Name, FUN = function(x) {
    strsplit(x, split = ""[,.]"")[[1]][[2]]
})
combi$Title <- sub("" "", """", combi$Title)
table(combi$Title)
combi$Title[combi$Title %in% c(""Mme"", ""Mlle"")] <- ""Mlle""
combi$Title[combi$Title %in% c(""Capt"", ""Don"", ""Major"", ""Sir"")] <- ""Sir""
combi$Title[combi$Title %in% c(""Dona"", ""Lady"", ""the Countess"", ""Jonkheer"")] <- ""Lady""
combi$Title <- factor(combi$Title)
combi$FamilySize <- combi$SibSp + combi$Parch + 1
combi$Surname <- sapply(combi$Name, FUN = function(x) {
    strsplit(x, split = ""[,.]"")[[1]][1]
})
combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep = """")
combi$FamilyID[combi$FamilySize <= 2] <- ""Small""
table(combi$FamilyID)
famIDs <- data.frame(table(combi$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2, ]
combi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- ""Small""
combi$FamilyID <- factor(combi$FamilyID)
train <- combi[1:891, ]
test <- combi[892:1309, ]
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID, data = train, method = ""class"")
fancyRpartPlot(fit)
dev.copy(png, file = ""./featureEngineering.png"", height = 480, width = 480)
dev.off()
Prediction <- predict(fit, test, type = ""class"")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = ""./featureEngineering.csv"", row.names = FALSE)
sample(1:10, replace = TRUE)
summary(combi$Age)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize, data = combi[!is.na(combi$Age), ], method = ""anova"")
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age), ])
summary(combi$Embarked)
which(combi$Embarked == """")
combi$Embarked[c(62, 830)] = ""S""
combi$Embarked <- factor(combi$Embarked)
which(is.na(combi$Fare))
combi$Fare[1044] <- median(combi$Fare, na.rm = TRUE)
combi$Fare[1044]
combi$FamilyID2 <- combi$FamilyID
combi$FamilyID2 <- as.character(combi$FamilyID2)
combi$FamilyID2[combi$FamilySize <= 3] <- ""Small""
combi$FamilyID2 <- factor(combi$FamilyID2)
library(randomForest)
train <- combi[1:891, ]
test <- combi[892:1309, ]
set.seed(415)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2, data = train, importance = TRUE, ntree = 2000)
varImpPlot(fit)
Prediction <- predict(fit, test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = ""./firstforest.csv"", row.names = FALSE)
set.seed(415)
fol <- as.factor(Survived) ~ Pclass + Sex + Age + Fare + Embarked + Title + FamilySize + FamilyID2
fit <- randomForest(fol, data = train, importance = TRUE, ntree = 3000)
varImpPlot(fit)
Prediction <- predict(fit, test)
accuracy2RF <- (sum(Prediction == test$Survived)/nrow(test))
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = ""./secondforest.csv"", row.names = FALSE)
accuracy2RF",1,0,0,0,0,0,0,0,0,1,0,1,0,0
134,mmaguero-titanic-majority-vote-of-ridge-rf-and-gbm,0.758,"['which', 'summary', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.factor', 'as.numeric', 'c', 'cat', 'data.frame', 'expand.grid', 'factor', 'gsub', 'is.na', 'library', 'names', 'nrow', 'paste', 'prop.table', 'rbind', 'return', 'sapply', 'set.seed', 'sort', 'strsplit', 'sub', 'substr', 'sum', 'table', 'toupper', 'train', 'trainControl', 'aes', 'facet_grid', 'geom_bar', 'geom_density', 'geom_histogram', 'ggplot', 'cv.glmnet', 'cforest', 'cforest_unbiased', 'rpart', 'median', 'model.matrix', 'predict', 'read.csv', 'str', 'write.csv']","['caret', 'ggplot2', 'rpart', 'glmnet', 'caret', 'party', 'base']",2.50428706804911,"['nrow', 'median', 'cv.glmnet', 'which', 'cforest', 'cat', 'as.character', 'is.na', 'sub', 'sort', 'names', 'prop.table', 'expand.grid', 'rpart', 'summary', 'as.factor', 'sapply', 'geom_histogram', 'str', 'set.seed', 'gsub', 'factor', 'geom_bar', 'model.matrix', 'toupper', 'read.csv', 'table', 'return', 'train', 'c', 'aes', 'rbind', 'paste', 'as.numeric', 'sum', 'predict', 'write.csv', 'data.frame', 'strsplit', 'ggplot', 'geom_density', 'substr', 'user defined', 'library', 'trainControl', 'cforest_unbiased', 'facet_grid']",['byrony-titanic-majority-vote-of-ridge-rf-and-gbm'],"['ammara-titanic-competition-script-using-rf-2', 'alejandrorivas-titanic-beginners-principiantes-espa-ol', 'jmercer187-fork-of-titanic2', 'ammara-titanic-competition-using-boosting', 'aravind5-titanic', 'yugrao-titanic2', 'yugrao-titanic', 'aravind5-kaggle-titanic', 'ccheng2016-titanic-survival', 'arjunrampal-titanic-eda-rf']","[0.8393726436010709, 0.8383878742762535, 0.8205856643717684, 0.8165985782804703, 0.7420492128570438, 0.7420492128570438, 0.7420492128570438, 0.7420492128570438, 0.699662565153829, 0.6968284213710098]","{'c(""package:Matrix"", ""package:base"")': ['which'], 'c(""package:stats4"", ""package:Matrix"", ""package:base"")': ['summary'], 'character(0)': ['extractCabin', 'extractFeatures', 'extractTicket', 'readData', 'set'], 'package:base': ['as.character', 'as.factor', 'as.numeric', 'c', 'cat', 'data.frame', 'expand.grid', 'factor', 'gsub', 'is.na', 'library', 'names', 'nrow', 'paste', 'prop.table', 'rbind', 'return', 'sapply', 'set.seed', 'sort', 'strsplit', 'sub', 'substr', 'sum', 'table', 'toupper'], 'package:caret': ['train', 'trainControl'], 'package:ggplot2': ['aes', 'facet_grid', 'geom_bar', 'geom_density', 'geom_histogram', 'ggplot'], 'package:glmnet': ['cv.glmnet'], 'package:party': ['cforest', 'cforest_unbiased'], 'package:rpart': ['rpart'], 'package:stats': ['median', 'model.matrix', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:Matrix"", ""package:base"")"": [""which""], ""c(""package:stats4"", ""package:Matrix"", ""package:base"")"": [""summary""], ""character(0)"": [""extractCabin"", ""extractFeatures"", ""extractTicket"", ""readData"", ""set""], ""package:base"": [""as.character"", ""as.factor"", ""as.numeric"", ""c"", ""cat"", ""data.frame"", ""expand.grid"", ""factor"", ""gsub"", ""is.na"", ""library"", ""names"", ""nrow"", ""paste"", ""prop.table"", ""rbind"", ""return"", ""sapply"", ""set.seed"", ""sort"", ""strsplit"", ""sub"", ""substr"", ""sum"", ""table"", ""toupper""], ""package:caret"": [""train"", ""trainControl""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""geom_bar"", ""geom_density"", ""geom_histogram"", ""ggplot""], ""package:glmnet"": [""cv.glmnet""], ""package:party"": [""cforest"", ""cforest_unbiased""], ""package:rpart"": [""rpart""], ""package:stats"": [""median"", ""model.matrix"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackageMatrix packagebase which cpackagestats4 packageMatrix packagebase summary character0 extractCabin extractFeatures extractTicket readData set packagebase ascharacter asfactor asnumeric c cat dataframe expandgrid factor gsub isna library names nrow paste proptable rbind return sapply setseed sort strsplit sub substr sum table toupper packagecaret train trainControl packageggplot2 aes facetgrid geombar geomdensity geomhistogram ggplot packageglmnet cvglmnet packageparty cforest cforestunbiased packagerpart rpart packagestats median modelmatrix predict packageutils readcsv str writecsv,"knitr::opts_chunk$set(echo = TRUE)
library(caret)
readData <- function(path.name, file.name, column.types, missing.types) {
    read.csv(paste(path.name, file.name, sep = """"), colClasses = column.types, na.strings = missing.types)
}
Titanic.path <- ""../input/""
train.file.name <- ""train.csv""
test.file.name <- ""test.csv""
missing.types <- c(""NA"", """")
train.column.types <- c(""integer"", ""factor"", ""factor"", ""character"", ""factor"", ""numeric"", ""integer"", ""integer"", ""character"", ""numeric"", ""character"", ""factor"")
test.column.types <- train.column.types[-2]
train <- readData(Titanic.path, train.file.name, train.column.types, missing.types)
test <- readData(Titanic.path, test.file.name, test.column.types, missing.types)
test$Survived <- NA
combi <- rbind(train, test)
str(train)
summary(train)
library(ggplot2)
p <- ggplot(train, aes(x = Survived, fill = Sex)) + geom_bar(color = ""black"")
p
p2 <- ggplot(train[-which(is.na(train$Age)), ], aes(x = Age, fill = Survived)) + geom_density(alpha = 0.6) + facet_grid(. ~ Sex)
p2
p3 <- ggplot(train, aes(x = Fare, fill = Survived)) + geom_histogram() + facet_grid(. ~ Pclass)
p3
prop.table(table(train$Survived, train$Pclass), margin = 2)
p4 <- ggplot(train[!is.na(train$Embarked), ], aes(x = Survived, fill = Embarked)) + geom_bar(color = ""black"")
p4
title.extract <- function(x) {
    strsplit(x, split = ""[,.]"")[[1]][2]
}
combi$Title <- sapply(combi$Name, FUN = title.extract)
combi$Title <- sub("" "", """", combi$Title)
combi$Title[combi$PassengerId == 797] <- ""Mrs""
combi$Title[combi$Title %in% c(""Mlle"", ""Mme"")] <- ""Mlle""
combi$Title[combi$Title %in% c(""Capt"", ""Don"", ""Major"", ""Sir"", ""Jonkheer"")] <- ""Sir""
combi$Title[combi$Title %in% c(""Dona"", ""Lady"", ""the Countess"")] <- ""lady""
combi$Title <- as.factor(combi$Title)
combi$Surname <- sapply(combi$Name, FUN = function(x) {
    strsplit(x, split = ""[,.]"")[[1]][1]
})
combi$FamilySize <- combi$SibSp + combi$Parch + 1
combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep = """")
combi$FamilyID[combi$FamilySize <= 2] <- ""Small""
famIDs <- data.frame(table(combi$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2, ]
combi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- ""Small""
combi$FamilyID <- as.factor(combi$FamilyID)
extractCabin <- function(combi) {
    combi$Cabin <- sapply(combi$Cabin, FUN = function(x) {
        strsplit(x, split = """")[[1]][1]
    })
    combi$Cabin[is.na(combi$Cabin)] <- ""N""
    combi$Cabin <- as.factor(combi$Cabin)
    combi.ticket <- table(factor(combi$Ticket))
    combi.ticket.moreThanOne <- combi.ticket[combi.ticket > 1]
    combi.temp <- combi[combi$Ticket %in% names(combi.ticket.moreThanOne), ]
    for (name in names(combi.ticket.moreThanOne)) {
        row.sameTicket <- combi[combi$Ticket == name, ]
        Cabin_boolean <- row.sameTicket$Cabin %in% c(""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"")
        if (sum(Cabin_boolean) > 0) {
            correctCabin <- names(sort(table(row.sameTicket$Cabin[Cabin_boolean]), decreasing = TRUE))[1]
            row.sameTicket$Cabin[row.sameTicket$Cabin == ""N""] <- correctCabin
            combi$Cabin[row.sameTicket$PassengerId] <- row.sameTicket$Cabin
        }
    }
    combi$Cabin <- as.factor(combi$Cabin)
    return(combi)
}
combi <- extractCabin(combi)
extractTicket <- function(ticket) {
    pattern <- c(""\\/"", ""\\."", ""\\s"", ""[[:digit:]]"")
    for (p in pattern) {
        ticket <- gsub(p, """", ticket)
    }
    ticket <- substr(toupper(ticket), 1, 1)
    ticket[ticket == """"] <- ""N""
    ticket <- as.factor(ticket)
}
combi$Ticket <- extractTicket(combi$Ticket)
combi$Fare[is.na(combi$Fare)] <- median(combi$Fare, na.rm = TRUE)
combi$Embarked[is.na(combi$Embarked)] <- ""S""
library(rpart)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize, data = combi[!is.na(combi$Age), ], method = ""anova"")
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age), ])
train <- combi[1:nrow(train), ]
test <- combi[nrow(train) + 1:nrow(test), ]
extractFeatures <- function(data) {
    features <- c(""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked"", ""Survived"", ""Title"", ""FamilySize"", ""FamilyID"")
    fea <- data[, features]
    return(fea)
}
library(glmnet)
x <- model.matrix(Survived ~ ., data = extractFeatures(train))
y <- extractFeatures(train)$Survived
newx <- model.matrix(~., data = extractFeatures(test)[, -which(names(extractFeatures(test)) %in% ""Survived"")])
set.seed(1)
fit_ridge <- cv.glmnet(x, y, alpha = 0, family = ""binomial"", type.measure = ""deviance"")
pred_ridge <- predict(fit_ridge, newx = newx, s = ""lambda.min"", type = ""class"")
submission <- data.frame(PassengerId = test$PassengerId, Survived = pred_ridge)
write.csv(submission, file = ""ridge.csv"", row.names = FALSE)
library(caret)
fitControl <- trainControl(method = ""repeatedcv"", number = 3, repeats = 3)
newGrid <- expand.grid(n.trees = c(50, 100, 200, 300), interaction.depth = c(6), shrinkage = 0.01, n.minobsinnode = 10)
fit_gbm <- train(Survived ~ ., data = extractFeatures(train), method = ""gbm"", trControl = fitControl, tuneGrid = newGrid, bag.fraction = 0.5, verbose = FALSE)
fit_gbm$bestTune
set.seed(1234)
newGrid <- expand.grid(n.trees = c(200), interaction.depth = c(4:12), shrinkage = 0.01, n.minobsinnode = 10)
fit_gbm <- train(Survived ~ ., data = extractFeatures(train), method = ""gbm"", trControl = fitControl, tuneGrid = newGrid, bag.fraction = 0.5, verbose = FALSE)
fit_gbm$bestTune
set.seed(1234)
newGrid <- expand.grid(n.trees = c(2000), interaction.depth = c(10), shrinkage = 0.001, n.minobsinnode = 10)
fit_gbm_LowerRate <- train(Survived ~ ., data = extractFeatures(train), method = ""gbm"", trControl = fitControl, tuneGrid = newGrid, bag.fraction = 0.5, verbose = FALSE)
fit_gbm_LowerRate$results
pred_gbm <- predict(fit_gbm_LowerRate, extractFeatures(test))
submission <- data.frame(PassengerId = test$PassengerId, Survived = pred_gbm)
write.csv(submission, file = ""gbm_ntree-2000_rate-0.001_inter-10.csv"", row.names = FALSE)
library(party)
set.seed(1)
fit_crf <- cforest(Survived ~ ., data = extractFeatures(train), controls = cforest_unbiased(ntree = 2000, mtry = 3))
pred_crf <- predict(fit_crf, extractFeatures(test), OOB = TRUE, type = ""response"")
submission <- data.frame(PassengerId = test$PassengerId, Survived = pred_crf)
write.csv(submission, file = ""crf_seed1.csv"", row.names = FALSE)
cat(""Difference ratio between ridge and conditional random forest:"", sum(pred_ridge != pred_crf)/nrow(test))
cat(""Difference ratio between ridge and conditional gbm:"", sum(pred_ridge != pred_gbm)/nrow(test))
cat(""Difference ratio between conditional random forest and gbm:"", sum(pred_crf != pred_gbm)/nrow(test))
ensemble <- as.numeric(pred_ridge) + as.numeric(pred_gbm) - 1 + as.numeric(pred_crf) - 1
ensemble <- sapply(ensemble/3, round)
submission <- data.frame(PassengerId = test$PassengerId, Survived = ensemble)
write.csv(submission, file = ""ensemble_vote.csv"", row.names = FALSE)",0,0,1,0,0,1,0,1,0,1,0,0,0,0
135,biohazzzard-titanic-with-tidyverse-and-caret,0.746,"['filter', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'apply', 'as.factor', 'as.numeric', 'c', 'expand.grid', 'is.na', 'library', 'list', 'max', 'names', 'nrow', 'rbind', 'return', 'round', 'sapply', 'seq', 'summary', 'table', 'createDataPartition', 'train', 'trainControl', 'group_by', 'mutate', 'select', 'summarise', 'fct_lump', 'fct_recode', 'aes', 'geom_density', 'geom_histogram', 'geom_point', 'geom_vline', 'ggplot', 'labs', 'position_dodge', 'theme_bw', 'median', 'predict', 'str_split', 'replace_na', 'read.csv', 'tail', 'write.csv']","['tidyverse', 'stringr', 'forcats', 'caret', 'base']",32.5586140155792,"['summarise', 'fct_recode', 'nrow', 'labs', 'list', 'median', 'str_split', 'is.na', 'names', 'expand.grid', 'as.factor', 'summary', 'filter', 'sapply', 'round', 'geom_histogram', 'fct_lump', 'replace_na', 'position_dodge', 'max', 'apply', 'read.csv', 'theme_bw', 'table', 'return', 'group_by', 'train', 'c', 'aes', 'tail', 'mutate', 'rbind', 'as.numeric', 'createDataPartition', 'geom_point', 'geom_vline', 'predict', 'seq', 'write.csv', 'ggplot', 'geom_density', 'user defined', 'library', 'trainControl', 'select']",[],"['biohazzzard-titanic-with-tidyverse-and-caret', 'srikantjyrmn-titanic-survivor', 'monfilier-titanic-survival-prediction', 'jasminegoel-playing-with-titanic-dataset-r', 'tavoosi-predicting-survival-on-the-titanic-with-rf-lr-nb', 'redroy44-tidy-titanic-script', 'devanshugupta27-predicting-the-titanic-survival-rate', 'retrospectprospect-titanic-machine-learning-from-eda-to-xgb', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'paulocressoni-titanic-using-stepwise-linear-regression']","[0.9999999999999999, 0.8029080080811031, 0.7680998597006918, 0.7500188809705054, 0.6756646509534514, 0.639098064898518, 0.1217359112376737, 0.09025703819873135, 0.0859909551778005, 0.08456182700071677]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'character(0)': ['get_mode'], 'package:base': ['apply', 'as.factor', 'as.numeric', 'c', 'expand.grid', 'is.na', 'library', 'list', 'max', 'names', 'nrow', 'rbind', 'return', 'round', 'sapply', 'seq', 'summary', 'table'], 'package:caret': ['createDataPartition', 'train', 'trainControl'], 'package:dplyr': ['group_by', 'mutate', 'select', 'summarise'], 'package:forcats': ['fct_lump', 'fct_recode'], 'package:ggplot2': ['aes', 'geom_density', 'geom_histogram', 'geom_point', 'geom_vline', 'ggplot', 'labs', 'position_dodge', 'theme_bw'], 'package:stats': ['median', 'predict'], 'package:stringr': ['str_split'], 'package:tidyr': ['replace_na'], 'package:utils': ['read.csv', 'tail', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""character(0)"": [""get_mode""], ""package:base"": [""apply"", ""as.factor"", ""as.numeric"", ""c"", ""expand.grid"", ""is.na"", ""library"", ""list"", ""max"", ""names"", ""nrow"", ""rbind"", ""return"", ""round"", ""sapply"", ""seq"", ""summary"", ""table""], ""package:caret"": [""createDataPartition"", ""train"", ""trainControl""], ""package:dplyr"": [""group_by"", ""mutate"", ""select"", ""summarise""], ""package:forcats"": [""fct_lump"", ""fct_recode""], ""package:ggplot2"": [""aes"", ""geom_density"", ""geom_histogram"", ""geom_point"", ""geom_vline"", ""ggplot"", ""labs"", ""position_dodge"", ""theme_bw""], ""package:stats"": [""median"", ""predict""], ""package:stringr"": [""str_split""], ""package:tidyr"": [""replace_na""], ""package:utils"": [""read.csv"", ""tail"", ""write.csv""]}",cpackagedplyr packagestats filter character0 getmode packagebase apply asfactor asnumeric c expandgrid isna library list max names nrow rbind return round sapply seq summary table packagecaret createDataPartition train trainControl packagedplyr groupby mutate select summarise packageforcats fctlump fctrecode packageggplot2 aes geomdensity geomhistogram geompoint geomvline ggplot labs positiondodge themebw packagestats median predict packagestringr strsplit packagetidyr replacena packageutils readcsv tail writecsv,"library(tidyverse)
library(stringr)
library(forcats)
library(caret)
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
ix_train <- seq(1, nrow(train))
ix_test <- seq((tail(ix_train, n = 1) + 1), (nrow(train) + nrow(test)))
y_train <- train$Survived
train$Survived <- NULL
full_data <- rbind(train, test)
full_data$Cabin <- NULL
full_data$Ticket <- NULL
full_data$Pclass <- as.factor(full_data$Pclass)
full_data$Sex <- as.factor(full_data$Sex)
summary(full_data)
apply(sapply(full_data, is.na), 2, sum)
get_mode <- function(v) {
    tab <- table(v)
    out <- tab[tab == max(tab)]
    return(as.numeric(names(out)))
}
full_data <- full_data %>% mutate(Age = round(Age))
full_data %>% ggplot(aes(Age)) + geom_density() + geom_vline(aes(xintercept = get_mode(Age)), linetype = ""22"") + labs(title = ""Age distribution"", subtitle = ""Dashed line indicates mode (24)"") + theme_bw()
full_data <- full_data %>% replace_na(list(Age = get_mode(.$Age)))
full_data %>% filter(is.na(.$Fare))
full_data %>% filter(!is.na(Fare)) %>% group_by(Embarked, Pclass) %>% summarise(Median_fare = median(Fare))
full_data <- full_data %>% replace_na(list(Fare = 8.05))
full_data %>% filter(Embarked == """")
full_data$Embarked[full_data$Embarked == """"] <- ""C""
full_data$Title <- str_split(str_split(full_data$Name, "".*, "", simplify = T)[, 2], "". .*"", simplify = T)[, 1]
full_data %>% select(Title) %>% table
full_data$Title[full_data$Title == ""Ms""] <- ""Miss""
full_data <- full_data %>% mutate(Title = fct_lump(.$Title, 4))
full_data$Name <- NULL
full_data %>% ggplot(aes(Title)) + geom_histogram(stat = ""count"") + theme_bw() + labs(title = ""Histogram of Title"")
full_data <- full_data %>% mutate(Fsize = SibSp + Parch + 1)
full_data %>% ggplot(aes(Fsize)) + geom_histogram(bins = 15) + theme_bw() + labs(title = ""Histogram of family Sizes"")
x_train <- full_data[ix_train, ]
x_test <- full_data[ix_test, ]
model_data <- x_train
model_data$Class <- as.factor(y_train)
model_data$Class <- fct_recode(model_data$Class, Survived = ""1"", Dead = ""0"")
model_data$PassengerId <- NULL
model_data %>% ggplot(aes(x = Sex, fill = Class)) + geom_histogram(stat = ""count"", position = position_dodge()) + theme_bw() + labs(title = ""Survival by Sex"")
model_data %>% ggplot(aes(x = Fsize, fill = Class)) + geom_histogram(stat = ""count"", position = position_dodge()) + theme_bw() + labs(title = ""Survival by Family Size"")
ind <- createDataPartition(y_train, p = 2/3, list = F)
model_data_train <- model_data[ind, ]
model_data_val <- model_data[-ind, ]
ctr <- trainControl(method = ""cv"", number = 5, savePredictions = T, classProbs = T)
parameters <- expand.grid(eta = 0.1, colsample_bytree = c(0.3, 0.5, 0.7), max_depth = c(3, 6, 9, 12), nrounds = 100, gamma = 1, min_child_weight = 2, subsample = c(0.3, 0.5, 1))
xgb <- train(Class ~ ., data = model_data_train, method = ""xgbTree"", trControl = ctr, tuneGrid = parameters)
xgb$results %>% filter(Accuracy == max(.$Accuracy))
pred <- predict(xgb, model_data_val)
table(Actual = model_data_val$Class, Predicted = pred)
xgb_full <- train(Class ~ ., data = model_data, trControl = ctr, tuneGrid = parameters, method = ""xgbTree"")
xgb_full$results %>% filter(Accuracy == max(.$Accuracy))
xgb_full$results %>% ggplot(aes(x = as.factor(subsample), y = Accuracy)) + geom_point() + theme_bw()
xgb_full$results %>% ggplot(aes(x = as.factor(max_depth), y = Accuracy)) + geom_point() + theme_bw()
xgb_full$results %>% ggplot(aes(x = as.factor(colsample_bytree), y = Accuracy)) + geom_point() + theme_bw()
x_test_final <- x_test %>% select(-PassengerId)
test_predictions <- predict(xgb_full, x_test_final)
submission_df <- x_test
submission_df$Survived <- fct_recode(test_predictions, `0` = ""Dead"", `1` = ""Survived"")
submission_df <- submission_df %>% select(PassengerId, Survived)
write.csv(submission_df, ""solution.csv"", row.names = F)",0,0,1,0,0,0,0,1,0,0,0,0,0,0
136,brirush-naive-bayes-for-titanic,0.7609999999999999,"['as.factor', 'cbind', 'colnames', 'data.frame', 'library', 'summary', 'naiveBayes', 'predict', 'read.csv', 'str', 'write.csv']","['e1071', 'base']",0.38292002677917497,"['colnames', 'predict', 'write.csv', 'data.frame', 'read.csv', 'as.factor', 'summary', 'library', 'naiveBayes', 'cbind', 'str']",[],"['brirush-naive-bayes-for-titanic', 'brirush-svm-for-titanic', 'aer503-svm-for-titanic', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'zhaotianjing-titanic', 'brirush-logistic-regression-for-titanic', 'sudheer464-prediction-1-on-titanic-dataset', 'danr87946-titanic-practice', 'sawajid-titanic-test']","[0.9999999999999999, 0.29286594606016725, 0.2437746212965586, 0.21909442013511876, 0.21909442013511876, 0.20595127684601947, 0.20020529030946682, 0.19510029844666157, 0.19081039646664447, 0.18727935376616084]","{'package:base': ['as.factor', 'cbind', 'colnames', 'data.frame', 'library', 'summary'], 'package:e1071': ['naiveBayes'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""as.factor"", ""cbind"", ""colnames"", ""data.frame"", ""library"", ""summary""], ""package:e1071"": [""naiveBayes""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase asfactor cbind colnames dataframe library summary packagee1071 naiveBayes packagestats predict packageutils readcsv str writecsv,"library(e1071)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
BayesTitanicModel <- naiveBayes(as.factor(Survived) ~ ., train)
str(BayesTitanicModel)
BayesPrediction <- predict(BayesTitanicModel, test)
str(BayesPrediction)
summary(BayesPrediction)
output <- data.frame(test$PassengerId, BayesPrediction)
str(output)
colnames(output) <- cbind(""PassengerId"", ""Survived"")
write.csv(output, file = ""Rushton_Solution.csv"", row.names = F)",0,0,0,0,0,0,0,0,0,0,0,1,0,0
137,ammara-titanic-competition-using-boosting,0.763,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'c', 'data.frame', 'factor', 'ifelse', 'is.na', 'library', 'nrow', 'paste', 'rbind', 'return', 'sapply', 'seq', 'set.seed', 'strsplit', 'sub', 'sum', 'which.min', 'gbm', 'gbm.perf', 'rpart', 'median', 'predict', 'head', 'read.csv', 'write.csv']","['gbm', 'randomForest', 'rpart', 'base']",3.2013139724731405,"['which.min', 'nrow', 'median', 'as.character', 'sub', 'is.na', 'rpart', 'gbm', 'sapply', 'set.seed', 'factor', 'gbm.perf', 'read.csv', 'return', 'c', 'rbind', 'paste', 'ifelse', 'sum', 'predict', 'write.csv', 'seq', 'data.frame', 'strsplit', 'head', 'user defined', 'library']",[],"['ammara-titanic-competition-script-using-rf-2', 'alejandrorivas-titanic-beginners-principiantes-espa-ol', 'jmercer187-fork-of-titanic2', 'mmaguero-titanic-majority-vote-of-ridge-rf-and-gbm', 'byrony-titanic-majority-vote-of-ridge-rf-and-gbm', 'aravind5-titanic', 'yugrao-titanic2', 'yugrao-titanic', 'aravind5-kaggle-titanic', 'ccheng2016-titanic-survival']","[0.937107483825739, 0.8922638029486182, 0.8745710232646903, 0.8165985782804703, 0.8165985782804703, 0.779089584973453, 0.779089584973453, 0.779089584973453, 0.779089584973453, 0.7538437117291295]","{'character(0)': ['feature_eng'], 'package:base': ['as.character', 'c', 'data.frame', 'factor', 'ifelse', 'is.na', 'library', 'nrow', 'paste', 'rbind', 'return', 'sapply', 'seq', 'set.seed', 'strsplit', 'sub', 'sum', 'which.min'], 'package:gbm': ['gbm', 'gbm.perf'], 'package:rpart': ['rpart'], 'package:stats': ['median', 'predict'], 'package:utils': ['head', 'read.csv', 'write.csv']}","{""character(0)"": [""feature_eng""], ""package:base"": [""as.character"", ""c"", ""data.frame"", ""factor"", ""ifelse"", ""is.na"", ""library"", ""nrow"", ""paste"", ""rbind"", ""return"", ""sapply"", ""seq"", ""set.seed"", ""strsplit"", ""sub"", ""sum"", ""which.min""], ""package:gbm"": [""gbm"", ""gbm.perf""], ""package:rpart"": [""rpart""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""write.csv""]}",character0 featureeng packagebase ascharacter c dataframe factor ifelse isna library nrow paste rbind return sapply seq setseed strsplit sub sum whichmin packagegbm gbm gbmperf packagerpart rpart packagestats median predict packageutils head readcsv writecsv,"library(gbm)
library(randomForest)
library(rpart)
set.seed(415)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
feature_eng <- function(train_df, test_df) {
    test_df$Survived <- NA
    combi <- rbind(train_df, test_df)
    combi$Name <- as.character(combi$Name)
    combi$Title <- sapply(combi$Name, FUN = function(x) {
        strsplit(x, split = ""[,.]"")[[1]][2]
    })
    combi$Title <- sub("" "", """", combi$Title)
    combi$Title[combi$Title %in% c(""Mme"", ""Mlle"")] <- ""Mlle""
    combi$Title[combi$Title %in% c(""Capt"", ""Don"", ""Major"", ""Sir"")] <- ""Sir""
    combi$Title[combi$Title %in% c(""Dona"", ""Lady"", ""the Countess"", ""Jonkheer"")] <- ""Lady""
    combi$Title <- factor(combi$Title)
    combi$FamilySize <- combi$SibSp + combi$Parch + 1
    combi$Surname <- sapply(combi$Name, FUN = function(x) {
        strsplit(x, split = ""[,.]"")[[1]][1]
    })
    combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep = """")
    combi$FamilyID[combi$FamilySize <= 2] <- ""Small""
    combi$FamilyID <- factor(combi$FamilyID)
    Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize, data = combi[!is.na(combi$Age), ], method = ""anova"")
    combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age), ])
    combi$Embarked[c(62, 830)] = ""S""
    combi$Embarked <- factor(combi$Embarked)
    combi$Fare[1044] <- median(combi$Fare, na.rm = TRUE)
    combi$FamilyID2 <- combi$FamilyID
    combi$FamilyID2 <- as.character(combi$FamilyID2)
    combi$FamilyID2[combi$FamilySize <= 3] <- ""Small""
    combi$FamilyID2 <- factor(combi$FamilyID2)
    return(combi)
}
data <- feature_eng(train, test)
train <- data[1:891, ]
test <- data[892:1309, ]
n.trees <- 5000
gbm_fit <- gbm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID, data = train, distribution = ""bernoulli"", interaction.depth = 3, n.minobsinnode = 10, n.trees = n.trees, shrinkage = 0.001, train.fraction = 0.8, verbose = TRUE)
gbm.perf(gbm_fit)
predict_gbm <- predict(gbm_fit, train, n.trees = gbm.perf(gbm_fit), type = ""response"")
predict_gbm2 <- predict(gbm_fit, test, n.trees = gbm.perf(gbm_fit), type = ""response"")
proportion <- sapply(seq(0.3, 0.7, 0.01), function(step) c(step, sum(ifelse(predict_gbm < step, 0, 1) != train$Survived)))
predict_gbm_train <- ifelse(predict_gbm < proportion[, which.min(proportion[2, ])][1], 0, 1)
head(predict_gbm_train)
score <- sum(train$Survived == predict_gbm_train)/nrow(train)
score
predict_gbm_test <- ifelse(predict_gbm2 < proportion[, which.min(proportion[2, ])][1], 0, 1)
submit <- data.frame(PassengerId = test$PassengerId, Survived = predict_gbm_test)
write.csv(submit, file = ""firstgbm.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
138,amodi8-titanic-exploring-survival-using-machine-learning,0.7440000000000001,"['c', 'data.frame', 'jitter', 'length', 'library', 'prop.table', 'rep', 'round', 'sum', 'summary', 'system', 'table', 'box', 'hist', 'lines', 'rug', 'aggregate', 'density', 'read.csv', 'str', 'write.csv']","['ggplot2', 'readr', 'base']",0.756253957748413,"['lines', 'density', 'jitter', 'prop.table', 'summary', 'round', 'rep', 'hist', 'str', 'aggregate', 'rug', 'length', 'read.csv', 'table', 'c', 'sum', 'write.csv', 'box', 'data.frame', 'library', 'system']",[],"['tobybot11-toby-s-titanic-analysis', 'jerlinraj-titanic-machine-learning-from-disaster', 'scout16-titanic-disaster-in-r', 'sudheer464-prediction-1-on-titanic-dataset', 'stevencahill-titanic-machine-learning-from-disaster', 'lizpund-titanic-competition-kernel', 'zhaotianjing-titanic', 'sawajid-titanic-test', 'mihaque313-first-submission-to-titanic-problem', 'brirush-randomforest-implementation-of-titanic']","[0.783010035891903, 0.6379653089443853, 0.5962849460949229, 0.5918477560730513, 0.5801215129746786, 0.5743709735414526, 0.5534300194830426, 0.5241393142732443, 0.486022351545455, 0.4659641996674724]","{'package:base': ['c', 'data.frame', 'jitter', 'length', 'library', 'prop.table', 'rep', 'round', 'sum', 'summary', 'system', 'table'], 'package:graphics': ['box', 'hist', 'lines', 'rug'], 'package:stats': ['aggregate', 'density'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""c"", ""data.frame"", ""jitter"", ""length"", ""library"", ""prop.table"", ""rep"", ""round"", ""sum"", ""summary"", ""system"", ""table""], ""package:graphics"": [""box"", ""hist"", ""lines"", ""rug""], ""package:stats"": [""aggregate"", ""density""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase c dataframe jitter length library proptable rep round sum summary system table packagegraphics box hist lines rug packagestats aggregate density packageutils readcsv str writecsv,"library(ggplot2)
library(readr)
system(""ls ../input"")
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
str(train)
table(train$Survived)
prop.table(table(train$Survived))
test$Survived <- rep(0, 418)
submit <- data.frame(Passengerid = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = ""theyallperish.csv"", row.names = FALSE)
table(train$Sex)
round(prop.table(table(train$Sex, train$Survived), 1) * 100, 2)
test$Survived <- 0
test$Survived[test$Sex == ""female""] <- 1
submit <- data.frame(Passengerid = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = ""maleperish.csv"", row.names = FALSE)
summary(train$Age)
hist(train$Age, col = c(""red"", ""steelblue""), freq = F, main = ""Distribution of Age"", xlab = ""Age"")
rug(jitter(train$Age), col = ""darkgrey"")
lines(density(train$Age, na.rm = T), col = ""yellow"", lwd = 3)
box()
train$Child <- 0
train$Child[train$Age < 18] <- 1
aggregate(Survived ~ Child + Sex, data = train, FUN = sum)
aggregate(Survived ~ Child + Sex, data = train, FUN = length)
aggregate(Survived ~ Child + Sex, data = train, FUN = function(x) {
    sum(x)/length(x)
})
train$Fare2 <- ""30+""
train$Fare2[train$Fare >= 10 & train$Fare < 20] = ""10-20""
train$Fare2[train$Fare >= 20 & train$Fare < 30] = ""20-30""
train$Fare2[train$Fare < 10] = ""<10""
aggregate(Survived ~ Fare2 + Pclass + Sex, data = train, FUN = function(x) {
    sum(x)/length(x)
})
test$Survived <- 0
test$Survived[test$Sex == ""female""] <- 1
test$Survived[test$Sex == ""female"" & test$Pclass == 3 & test$Fare >= 20] <- 0
submit <- data.frame(Passengerid = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = ""higherclassfemalesurvive.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,0,0,0,0,0
141,pranavsid-analyzing-the-titanic-disaster,0.768,"['filter', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.factor', 'c', 'data.frame', 'grep', 'is.na', 'length', 'library', 'mean', 'nrow', 'return', 'set.seed', 'summary', 'which', 'summarise', 'randomForest', 'predict', 'read.csv', 'write.csv']","['randomForest', 'dplyr', 'base']",1.00487112998962,"['summarise', 'nrow', 'mean', 'which', 'grep', 'as.character', 'is.na', 'as.factor', 'summary', 'filter', 'set.seed', 'length', 'read.csv', 'randomForest', 'return', 'c', 'predict', 'write.csv', 'data.frame', 'user defined', 'library']",[],"['parthchaudhary-titanic-submission', 'erskumars-titanic-survival-eda-and-survival-rate-prediction', 'paulocressoni-titanic-using-stepwise-linear-regression', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'diegosiebra-rf-titanic-prediction-th3one', 'liudj2008-titanic', 'kabled-life-and-death-on-the-titanic', 'liudj2008-fork-of-titanic', 'annafreydenzon-titanic-machine-learning-from-disaster']","[0.4022758108054966, 0.2916063216467209, 0.2575070160964783, 0.24054825553303544, 0.24054825553303544, 0.23999287342476752, 0.22959181357667874, 0.2295171336280357, 0.22926482806918042, 0.21938607053158152]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'character(0)': ['Titles'], 'package:base': ['as.character', 'as.factor', 'c', 'data.frame', 'grep', 'is.na', 'length', 'library', 'mean', 'nrow', 'return', 'set.seed', 'summary', 'which'], 'package:dplyr': ['summarise'], 'package:randomForest': ['randomForest'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""character(0)"": [""Titles""], ""package:base"": [""as.character"", ""as.factor"", ""c"", ""data.frame"", ""grep"", ""is.na"", ""length"", ""library"", ""mean"", ""nrow"", ""return"", ""set.seed"", ""summary"", ""which""], ""package:dplyr"": [""summarise""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackagedplyr packagestats filter character0 Titles packagebase ascharacter asfactor c dataframe grep isna length library mean nrow return setseed summary which packagedplyr summarise packagerandomForest randomForest packagestats predict packageutils readcsv writecsv,"library(randomForest)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
train$Survived <- as.factor(train$Survived)
train$Pclass <- as.factor(train$Pclass)
train$Name <- as.character(train$Name)
test$Pclass <- as.factor(test$Pclass)
test$Name <- as.character(test$Name)
summary(train)
summary(test)
library(dplyr)
subset_1 = filter(test, Pclass == 3 & Embarked == ""S"")
summarise(subset_1, delay = mean(Fare, na.rm = TRUE))
test$Fare[which(is.na(test$Fare))] = 13.91
summary(test)
Titles <- function(Name) {
    if (length(grep(""Miss."", Name)) > 0) {
        return(""Lady"")
    }
    else if (length(grep(""Mrs."", Name)) > 0) {
        return(""Woman"")
    }
    else if (length(grep(""Mr."", Name)) > 0) {
        return(""Man"")
    }
    else if (length(grep(""Master."", Name)) > 0) {
        return(""Child"")
    }
    else {
        return(""Other"")
    }
}
title_data <- NULL
for (i in 1:nrow(train)) {
    title_data <- c(title_data, Titles(train[i, 4]))
}
train$title <- as.factor(title_data)
title_data <- NULL
for (i in 1:nrow(test)) {
    title_data <- c(title_data, Titles(test[i, 3]))
}
test$title <- as.factor(title_data)
rf_data <- train[, c(""Pclass"", ""title"", ""Fare"")]
rf_newdata <- test[, c(""Pclass"", ""title"", ""Fare"")]
set.seed(12354)
rf_1 = randomForest(x = rf_data, y = train$Survived, ntree = 1000)
rf_1
rf_2 = predict(rf_1, newdata = rf_newdata)
rf_2
my_solution <- data.frame(PassengerID = test$PassengerId, Survived = rf_2)
write.csv(my_solution, file = ""my_solution.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
142,srikanthnuka-titanic-not-all-family-specified-on-boarded,0.722,"['plot', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.factor', 'as.vector', 'c', 'cbind', 'colnames', 'data.frame', 'ifelse', 'is.na', 'lapply', 'library', 'max', 'mean', 'min', 'ncol', 'nrow', 'paste', 'print', 'rbind', 'return', 'round', 'sample', 'seq', 'strsplit', 'sum', 'summary', 'table', 'trimws', 'unlist', 'knnImputation', 'group_by', 'left_join', 'mutate_if', 'n', 'summarise', 'dummy.data.frame', 'aes', 'element_text', 'facet_grid', 'facet_wrap', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_label', 'ggplot', 'labs', 'scale_fill_manual', 'scale_x_continuous', 'theme', 'theme_grey', 'grid.arrange', 'randomForest', 'performance', 'prediction', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['dplyr', 'stringr', 'ggplot2', 'gridExtra', 'DMwR', 'dummies', 'ROCR', 'randomForest', 'base']",6.41437888145447,"['summarise', 'labs', 'nrow', 'unlist', 'geom_label', 'mean', 'facet_wrap', 'lapply', 'min', 'element_text', 'as.character', 'dummy.data.frame', 'theme', 'is.na', 'knnImputation', 'scale_x_continuous', 'geom_boxplot', 'print', 'ncol', 'mutate_if', 'as.factor', 'summary', 'left_join', 'round', 'n', 'str', 'scale_fill_manual', 'colnames', 'max', 'geom_bar', 'grid.arrange', 'read.csv', 'performance', 'as.vector', 'table', 'randomForest', 'return', 'group_by', 'c', 'aes', 'theme_grey', 'rbind', 'paste', 'ifelse', 'plot', 'sample', 'sum', 'predict', 'seq', 'write.csv', 'data.frame', 'strsplit', 'ggplot', 'geom_density', 'head', 'user defined', 'library', 'prediction', 'trimws', 'cbind', 'facet_grid']",[],"['srikanthnuka-titanic-not-all-family-specified-on-boarded', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'dleprovost-simple-titanic-exploration', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic', 'skhawaja-titanic-disaster-survival-099', 'paulocressoni-titanic-using-stepwise-linear-regression']","[0.9999999999999999, 0.06158715438154533, 0.06158715438154533, 0.06114100039680104, 0.06114100039680104, 0.06088824823041205, 0.056750966537453686, 0.056750966537453686, 0.051446085302956024, 0.05126696655372899]","{'c(""package:ROCR"", ""package:graphics"")': ['plot'], 'character(0)': ['fnScaling'], 'package:base': ['as.character', 'as.factor', 'as.vector', 'c', 'cbind', 'colnames', 'data.frame', 'ifelse', 'is.na', 'lapply', 'library', 'max', 'mean', 'min', 'ncol', 'nrow', 'paste', 'print', 'rbind', 'return', 'round', 'sample', 'seq', 'strsplit', 'sum', 'summary', 'table', 'trimws', 'unlist'], 'package:DMwR': ['knnImputation'], 'package:dplyr': ['group_by', 'left_join', 'mutate_if', 'n', 'summarise'], 'package:dummies': ['dummy.data.frame'], 'package:ggplot2': ['aes', 'element_text', 'facet_grid', 'facet_wrap', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_label', 'ggplot', 'labs', 'scale_fill_manual', 'scale_x_continuous', 'theme', 'theme_grey'], 'package:gridExtra': ['grid.arrange'], 'package:randomForest': ['randomForest'], 'package:ROCR': ['performance', 'prediction'], 'package:stats': ['predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""c(""package:ROCR"", ""package:graphics"")"": [""plot""], ""character(0)"": [""fnScaling""], ""package:base"": [""as.character"", ""as.factor"", ""as.vector"", ""c"", ""cbind"", ""colnames"", ""data.frame"", ""ifelse"", ""is.na"", ""lapply"", ""library"", ""max"", ""mean"", ""min"", ""ncol"", ""nrow"", ""paste"", ""print"", ""rbind"", ""return"", ""round"", ""sample"", ""seq"", ""strsplit"", ""sum"", ""summary"", ""table"", ""trimws"", ""unlist""], ""package:DMwR"": [""knnImputation""], ""package:dplyr"": [""group_by"", ""left_join"", ""mutate_if"", ""n"", ""summarise""], ""package:dummies"": [""dummy.data.frame""], ""package:ggplot2"": [""aes"", ""element_text"", ""facet_grid"", ""facet_wrap"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_label"", ""ggplot"", ""labs"", ""scale_fill_manual"", ""scale_x_continuous"", ""theme"", ""theme_grey""], ""package:gridExtra"": [""grid.arrange""], ""package:randomForest"": [""randomForest""], ""package:ROCR"": [""performance"", ""prediction""], ""package:stats"": [""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",cpackageROCR packagegraphics plot character0 fnScaling packagebase ascharacter asfactor asvector c cbind colnames dataframe ifelse isna lapply library max mean min ncol nrow paste print rbind return round sample seq strsplit sum summary table trimws unlist packageDMwR knnImputation packagedplyr groupby leftjoin mutateif n summarise packagedummies dummydataframe packageggplot2 aes elementtext facetgrid facetwrap geombar geomboxplot geomdensity geomlabel ggplot labs scalefillmanual scalexcontinuous theme themegrey packagegridExtra gridarrange packagerandomForest randomForest packageROCR performance prediction packagestats predict packageutils head readcsv str writecsv,"library(dplyr)
library(stringr)
library(ggplot2)
library(gridExtra)
library(DMwR)
library(dummies)
library(ROCR)
library(randomForest)
train = read.csv(""../input/train.csv"")
test = read.csv(""../input/test.csv"")
test$Survived <- NA
cmp_titanic = rbind(train, test)
summary(cmp_titanic)
str(cmp_titanic)
cmp_titanic$Survived <- as.factor(cmp_titanic$Survived)
cmp_titanic$Pclass <- as.factor(cmp_titanic$Pclass)
cmp_titanic$Name <- as.character(cmp_titanic$Name)
str(cmp_titanic)
table(cmp_titanic$Survived)
ggplot(cmp_titanic[!is.na(cmp_titanic$Survived), ], aes(Survived, fill = Survived)) + geom_bar() + labs(x = ""Survival Rate"") + geom_label(stat = ""count"", aes(label = ..count..), size = 4) + theme_grey(base_size = 18)
g1 <- ggplot(cmp_titanic, aes(Sex, fill = Sex)) + geom_bar() + labs(x = ""Gender Distribution in complete data"") + geom_label(stat = ""count"", aes(label = ..count..)) + scale_fill_manual(values = c(female = ""yellow"", male = ""sky blue""))
g2 <- ggplot(cmp_titanic[!is.na(cmp_titanic$Survived), ], aes(x = Sex, fill = Survived)) + geom_bar() + labs(x = ""Train data - Survival distribution across genders"") + geom_label(stat = ""count"", aes(label = ..count..), position = ""stack"") + scale_fill_manual(""legend"", values = c(`0` = ""red"", `1` = ""green""))
grid.arrange(g1, g2, ncol = 2)
cmp_titanic$LastName = unlist(lapply(cmp_titanic$Name, function(x) {
    unlist(strsplit(x, split = ""[,.]""))[1]
}))
data.frame(table(cmp_titanic$LastName)) %>% group_by(Freq) %>% summarise(groups = n())
cmp_titanic$Title <- unlist(lapply(cmp_titanic$Name, function(x) {
    unlist(strsplit(x, ""[,.]""))[2]
}))
cmp_titanic$Title <- trimws(cmp_titanic$Title)
data.frame(table(cmp_titanic$Title))
cmp_titanic$Title <- ifelse(cmp_titanic$Title == ""Ms"", ""Miss"", cmp_titanic$Title)
cmp_titanic$Title <- ifelse(cmp_titanic$Title %in% c(""Master"", ""Miss"", ""Mr"", ""Mrs""), cmp_titanic$Title, ""Rare"")
cmp_titanic$Title <- as.factor(cmp_titanic$Title)
g1 <- ggplot(cmp_titanic[!is.na(cmp_titanic$Survived), ], aes(Title, fill = Survived)) + geom_bar(position = ""fill"") + labs(x = ""Survival rate across Titles"")
g2 <- ggplot(cmp_titanic[!is.na(cmp_titanic$Survived), ], aes(Title, fill = Survived)) + geom_bar(position = ""stack"") + facet_grid(. ~ Pclass) + labs(x = ""Pclass wise survival for each Title"") + theme(axis.text.x = element_text(angle = 45, hjust = 1))
grid.arrange(g1, g2, ncol = 2)
g1 <- ggplot(cmp_titanic, aes(Pclass, fill = Pclass)) + geom_bar() + geom_label(stat = ""count"", aes(label = ..count..)) + labs(x = ""PClass Distribution in complete data"")
g2 <- ggplot(cmp_titanic[!is.na(cmp_titanic$Survived), ], aes(x = Pclass, fill = Survived)) + geom_bar(stat = ""count"", position = ""stack"") + labs(x = ""Train Data - Survived vs Not across Classes"")
g3 <- ggplot(cmp_titanic[!is.na(cmp_titanic$Survived), ], aes(x = Sex, fill = Survived)) + geom_bar(stat = ""count"", position = ""fill"") + labs(x = ""Train Data - Survived vs Not as per gender across Classes"") + facet_grid(. ~ Pclass) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
grid.arrange(g1, g2, g3, ncol = 3)
nrow(cmp_titanic)
summary(cmp_titanic$Age)
g1 <- ggplot(cmp_titanic[!is.na(cmp_titanic$Age) & !is.na(cmp_titanic$Survived), ], aes(Age, fill = Survived)) + geom_density(alpha = 0.5) + labs(x = ""Age density to survival"")
g2 <- ggplot(cmp_titanic[!is.na(cmp_titanic$Age) & !is.na(cmp_titanic$Survived), ], aes(Age, fill = Survived)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c(""red"", ""green"")) + facet_grid(. ~ Pclass) + labs(x = ""Age Density across Pclass to survival"")
g3 <- ggplot(cmp_titanic[!is.na(cmp_titanic$Age), ], aes(x = Title, y = Age)) + geom_boxplot() + labs(x = ""Age distribution across Titles"")
g4 <- ggplot(cmp_titanic[!is.na(cmp_titanic$Age), ], aes(Title, y = Age, fill = Pclass)) + geom_boxplot() + labs(x = ""Age distribution as per Pclass across Titles"") + scale_fill_manual(""legend"", values = c(`1` = ""yellow"", `2` = ""violet"", `3` = ""navy blue""))
grid.arrange(g1, g3, g2, g4, nrow = 2, top = ""Age distribution Models"")
cmp_titanic$Family = cmp_titanic$SibSp + cmp_titanic$Parch + 1
data.frame(table(cmp_titanic$Family))
g1 <- ggplot(cmp_titanic[!is.na(cmp_titanic$Survived), ], aes(Family, fill = Survived)) + geom_bar(position = ""stack"") + scale_x_continuous(breaks = seq(1, 12, 1)) + labs(x = ""Survival as per family size"")
g2 <- ggplot(cmp_titanic[!is.na(cmp_titanic$Survived), ], aes(Family, fill = Survived)) + geom_bar() + scale_x_continuous(breaks = seq(1, 12, 1)) + facet_wrap(. ~ Sex + Pclass, ncol = 3) + labs(x = ""PClass - Gender - Family size"")
grid.arrange(g1, g2, nrow = 2)
cmp_titanic[cmp_titanic$LastName == ""Allison"", c(""Survived"", ""Pclass"", ""Name"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Ticket"", ""Title"", ""LastName"", ""Family"")]
cmp_titanic[cmp_titanic$LastName == ""Boulos"", c(""Survived"", ""Pclass"", ""Name"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Ticket"", ""Title"", ""LastName"", ""Family"")]
cmp_titanic[cmp_titanic$LastName == ""Brown"", c(""Survived"", ""Pclass"", ""Name"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Ticket"", ""Title"", ""LastName"", ""Family"")]
cmp_titanic$Fml_Tkt = paste(cmp_titanic$Family, cmp_titanic$Ticket, sep = ""-"")
cmp_titanic[cmp_titanic$LastName == ""Brown"", c(""Survived"", ""Pclass"", ""Name"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Ticket"", ""Family"", ""Fml_Tkt"")]
cmp_titanic[cmp_titanic$Fml_Tkt == ""3-11769"", ]
cmp_titanic[cmp_titanic$Fml_Tkt == ""1-110152"", ]
cmp_titanic[cmp_titanic$LastName == ""Andersson"", ]
cmp_titanic[cmp_titanic$Fml_Tkt == ""7-347082"", ]
Pasngr_Ticket <- data.frame(cmp_titanic %>% group_by(Ticket) %>% summarise(OnBrd_2gtr = n()))
cmp_titanic = left_join(cmp_titanic, Pasngr_Ticket, by = ""Ticket"")
cmp_titanic[cmp_titanic$LastName == ""Andersson"", ]
nrow(cmp_titanic[cmp_titanic$Family != cmp_titanic$OnBrd_2gtr, ])
cmp_titanic[cmp_titanic$Ticket %in% c(""PC 17558"", ""PC 17761""), ]
g1 <- ggplot(cmp_titanic[!is.na(cmp_titanic$Survived), ], aes(Family, fill = Survived)) + geom_bar(position = ""dodge"") + scale_x_continuous(breaks = seq(1, 12, 1)) + labs(x = ""Survival as per family size"")
g2 <- ggplot(cmp_titanic[!is.na(cmp_titanic$Survived), ], aes(OnBrd_2gtr, fill = Survived)) + geom_bar(position = ""dodge"") + scale_x_continuous(breaks = seq(1, 12, 1)) + labs(x = ""Survival as per onboard together"")
grid.arrange(g1, g2, ncol = 1)
head(cmp_titanic[cmp_titanic$Pclass == ""1"", -c(4, 5, 6, 7, 8)])
cmp_titanic[cmp_titanic$Ticket %in% c(""19950"", ""PC 17759""), -c(1, 2, 4, 5)]
cmp_titanic[cmp_titanic$LastName %in% c(""Hogeboom"", ""Andrews""), ]
cmp_titanic[!(cmp_titanic$Fare == """" | cmp_titanic$Fare == 0 | is.na(cmp_titanic$Fare) == TRUE), ] %>% group_by(Pclass) %>% summarise(mean(Fare))
cmp_titanic$Fare = ifelse((cmp_titanic$Fare == """" | cmp_titanic$Fare == 0 | is.na(cmp_titanic$Fare) == TRUE), ifelse(cmp_titanic$Pclass == 1, 89.4, ifelse(cmp_titanic$Pclass == 2, 21.6, 13.4)), cmp_titanic$Fare)
cmp_titanic$Fare_Pasngr = cmp_titanic$Fare/cmp_titanic$OnBrd_2gtr
sum(is.na(cmp_titanic$Cabin)) + nrow(cmp_titanic[cmp_titanic$Cabin == """", ])
sum(is.na(cmp_titanic$Embarked)) + nrow(cmp_titanic[cmp_titanic$Embarked == """", ])
cmp_titanic %>% group_by(Embarked) %>% summarise(n())
cmp_titanic$Embarked = as.character(cmp_titanic$Embarked)
cmp_titanic$Embarked = ifelse(cmp_titanic$Embarked == """", ""S"", cmp_titanic$Embarked)
cmp_titanic$Embarked = as.factor(cmp_titanic$Embarked)
g1 <- ggplot(cmp_titanic, aes(x = Embarked, fill = Embarked)) + geom_bar()
g2 <- ggplot(cmp_titanic[!is.na(cmp_titanic$Survived), ], aes(x = Embarked, fill = Survived)) + geom_bar()
g3 <- ggplot(cmp_titanic, aes(x = Embarked, fill = Pclass)) + geom_bar(position = ""dodge"") + scale_fill_manual(""legend"", values = c(`1` = ""yellow"", `2` = ""violet"", `3` = ""navy blue""))
grid.arrange(g1, g3, g2, nrow = 2)
cmp_titanic[is.na(cmp_titanic$Age), ] %>% group_by(Title) %>% summarise(n())
fnScaling = function(x) {
    return((x - min(x))/(max(x) - min(x)))
}
master_dummies = dummy.data.frame(cmp_titanic[cmp_titanic$Title == ""Master"", c(3, 5, 7, 8, 10, 15, 17, 18)])
for (i in 1:ncol(master_dummies)) {
    master_dummies[, i] = fnScaling(master_dummies[, i])
}
master_dummies = cbind(master_dummies, cmp_titanic[cmp_titanic$Title == ""Master"", c(6)])
colnames(master_dummies)[colnames(master_dummies) == ""cmp_titanic[cmp_titanic$Title == \""Master\"", c(6)]""] <- ""Age""
summary(cmp_titanic[cmp_titanic$Title == ""Master"", ""Age""])
summary(round(knnImputation(data = master_dummies, k = 3)[, ""Age""]))
cmp_titanic[cmp_titanic$Title == ""Master"", ""Age""] = round(knnImputation(data = master_dummies, k = 3)[, ""Age""])
mr_dummies = dummy.data.frame(cmp_titanic[cmp_titanic$Title == ""Mr"", c(3, 5, 7, 8, 10, 15, 17, 18)])
for (i in 1:ncol(mr_dummies)) {
    mr_dummies[, i] = fnScaling(mr_dummies[, i])
}
mr_dummies = cbind(mr_dummies, cmp_titanic[cmp_titanic$Title == ""Mr"", c(6)])
colnames(mr_dummies)[colnames(mr_dummies) == ""cmp_titanic[cmp_titanic$Title == \""Mr\"", c(6)]""] <- ""Age""
summary(cmp_titanic[cmp_titanic$Title == ""Mr"", ""Age""])
summary(round(knnImputation(data = mr_dummies, k = 3)[, ""Age""]))
cmp_titanic[cmp_titanic$Title == ""Mr"", ""Age""] = round(knnImputation(data = mr_dummies, k = 3)[, ""Age""])
miss_dummies = dummy.data.frame(cmp_titanic[cmp_titanic$Title == ""Miss"", c(3, 5, 7, 8, 10, 15, 17, 18)])
for (i in 1:ncol(miss_dummies)) {
    miss_dummies[, i] = fnScaling(miss_dummies[, i])
}
miss_dummies = cbind(miss_dummies, cmp_titanic[cmp_titanic$Title == ""Miss"", c(6)])
colnames(miss_dummies)[colnames(miss_dummies) == ""cmp_titanic[cmp_titanic$Title == \""Miss\"", c(6)]""] <- ""Age""
cmp_titanic[cmp_titanic$Title == ""Miss"", ""Age""] = round(knnImputation(data = miss_dummies, k = 3)[, ""Age""])
mrs_dummies = dummy.data.frame(cmp_titanic[cmp_titanic$Title == ""Mrs"", c(3, 5, 7, 8, 10, 15, 17, 18)])
for (i in 1:ncol(mrs_dummies)) {
    mrs_dummies[, i] = fnScaling(mrs_dummies[, i])
}
mrs_dummies = cbind(mrs_dummies, cmp_titanic[cmp_titanic$Title == ""Mrs"", c(6)])
colnames(mrs_dummies)[colnames(mrs_dummies) == ""cmp_titanic[cmp_titanic$Title == \""Mrs\"", c(6)]""] <- ""Age""
cmp_titanic[cmp_titanic$Title == ""Mrs"", ""Age""] = round(knnImputation(data = mrs_dummies, k = 3)[, ""Age""])
rare_dummies = dummy.data.frame(cmp_titanic[cmp_titanic$Title == ""Rare"", c(3, 5, 7, 8, 10, 15, 17, 18)])
for (i in 1:ncol(rare_dummies)) {
    rare_dummies[, i] = fnScaling(rare_dummies[, i])
}
rare_dummies = cbind(rare_dummies, cmp_titanic[cmp_titanic$Title == ""Rare"", c(6)])
colnames(rare_dummies)[colnames(rare_dummies) == ""cmp_titanic[cmp_titanic$Title == \""Rare\"", c(6)]""] <- ""Age""
cmp_titanic[cmp_titanic$Title == ""Rare"", ""Age""] = round(knnImputation(data = rare_dummies, k = 3)[, ""Age""])
titanic_train = cmp_titanic[!is.na(cmp_titanic$Survived), ]
nrow(titanic_train)
titanic_test = cmp_titanic[is.na(cmp_titanic$Survived), ]
nrow(titanic_test)
ids = sample(nrow(titanic_train), nrow(titanic_train) * 0.8)
train_rf = titanic_train[ids, ]
test_rf = titanic_train[-ids, ]
train_rf <- train_rf %>% mutate_if(is.character, as.factor)
test_rf <- test_rf %>% mutate_if(is.character, as.factor)
rfmod = randomForest(Survived ~ . - PassengerId - Name - Ticket - Cabin - LastName - Fml_Tkt, data = train_rf, ntree = 3500, mtry = 3, nodesize = 10, maxnodes = 15, classwt = c(1, 1.5), strata = train_rf$Survived)
rfmod
pred = prediction(as.vector(rfmod$votes[, 2]), train_rf$Survived)
perf = performance(pred, ""tpr"", ""fpr"")
plot(perf, colorize = T, text.adj = c(1.2, 1.2), avg = ""threshold"", lwd = 3, main = ""ROC"")
AUC = performance(pred, measure = ""auc"")@y.values[[1]]
print(AUC)
pred = prediction(as.vector(predict(rfmod, test_rf, type = ""vote"")[, 2]), test_rf$Survived)
perf = performance(pred, ""tpr"", ""fpr"")
plot(perf, colorize = T, text.adj = c(1.2, 1.2), avg = ""threshold"", lwd = 3, main = ""ROC"")
AUC = performance(pred, measure = ""auc"")@y.values[[1]]
print(AUC)
titanic_test <- titanic_test %>% mutate_if(is.character, as.factor)
titanic_test$Survived = predict(rfmod, titanic_test, type = ""response"")
write.csv(titanic_test[, c(""PassengerId"", ""Survived"")], ""Titanic_sub.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
143,cardoso-titanic-women-and-children-first,0.7509999999999999,"['rbind', 'summary', 'as.character', 'as.factor', 'c', 'data.frame', 'factor', 'is.na', 'library', 'paste', 'sapply', 'set.seed', 'strsplit', 'sub', 'table', 'which', 'aes', 'facet_grid', 'geom_bar', 'geom_density', 'geom_histogram', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'theme_few', 'md.pattern', 'cforest', 'cforest_unbiased', 'randomForest', 'varImpPlot', 'rpart', 'dollar_format', 'median', 'predict', 'read.csv', 'str', 'write.csv']","['rpart', 'randomForest', 'party', 'ggplot2', 'ggthemes', 'scales', 'mice', 'randomForest', 'magrittr', 'base']",1.11449035008748,"['labs', 'median', 'md.pattern', 'which', 'cforest', 'as.character', 'sub', 'is.na', 'scale_x_continuous', 'theme_few', 'rpart', 'as.factor', 'summary', 'sapply', 'varImpPlot', 'geom_histogram', 'str', 'set.seed', 'factor', 'geom_bar', 'read.csv', 'table', 'randomForest', 'c', 'aes', 'rbind', 'paste', 'geom_vline', 'predict', 'write.csv', 'dollar_format', 'data.frame', 'strsplit', 'ggplot', 'geom_density', 'library', 'cforest_unbiased', 'facet_grid']",[],"['alejandrorivas-titanic-beginners-principiantes-espa-ol', 'paulocressoni-titanic-using-stepwise-linear-regression', 'ccheng2016-titanic-survival', 'chuanhuiliu-one-solution-to-titanic-survival-analysis', 'lizpund-titanic-competition-kernel', 'skhawaja-titanic-disaster-survival-099', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'ammara-titanic-competition-script-using-rf-2', 'tsfitz-titanic', 'liudj2008-titanic']","[0.06656604232175495, 0.05635572114754102, 0.0551263034419705, 0.05207645417257662, 0.05188871070332014, 0.04855654333281124, 0.04789298878157501, 0.047218387869268186, 0.04719701086722425, 0.04694447811532505]","{'c(""package:mice"", ""package:base"")': ['rbind'], 'c(""package:stats4"", ""package:base"")': ['summary'], 'package:base': ['as.character', 'as.factor', 'c', 'data.frame', 'factor', 'is.na', 'library', 'paste', 'sapply', 'set.seed', 'strsplit', 'sub', 'table', 'which'], 'package:ggplot2': ['aes', 'facet_grid', 'geom_bar', 'geom_density', 'geom_histogram', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous'], 'package:ggthemes': ['theme_few'], 'package:mice': ['md.pattern'], 'package:party': ['cforest', 'cforest_unbiased'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:rpart': ['rpart'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:mice"", ""package:base"")"": [""rbind""], ""c(""package:stats4"", ""package:base"")"": [""summary""], ""package:base"": [""as.character"", ""as.factor"", ""c"", ""data.frame"", ""factor"", ""is.na"", ""library"", ""paste"", ""sapply"", ""set.seed"", ""strsplit"", ""sub"", ""table"", ""which""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""geom_bar"", ""geom_density"", ""geom_histogram"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous""], ""package:ggthemes"": [""theme_few""], ""package:mice"": [""md.pattern""], ""package:party"": [""cforest"", ""cforest_unbiased""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:rpart"": [""rpart""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagemice packagebase rbind cpackagestats4 packagebase summary packagebase ascharacter asfactor c dataframe factor isna library paste sapply setseed strsplit sub table which packageggplot2 aes facetgrid geombar geomdensity geomhistogram geomvline ggplot labs scalexcontinuous packageggthemes themefew packagemice mdpattern packageparty cforest cforestunbiased packagerandomForest randomForest varImpPlot packagerpart rpart packagescales dollarformat packagestats median predict packageutils readcsv str writecsv,"library(""rpart"")
library(""randomForest"")
library(""party"")
library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""mice"")
library(""randomForest"")
library(""magrittr"")
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
test$Survived <- NA
fullComb <- rbind(train, test)
str(fullComb)
fullComb$Name <- as.character(fullComb$Name)
fullComb$Title <- sapply(fullComb$Name, FUN = function(x) {
    strsplit(x, split = ""[,.]"")[[1]][2]
})
fullComb$Title <- sub("" "", """", fullComb$Title)
fullComb$Title[fullComb$Title %in% c(""Mme"", ""Mlle"")] <- ""Mlle""
fullComb$Title[fullComb$Title %in% c(""Capt"", ""Don"", ""Major"", ""Sir"")] <- ""Sir""
fullComb$Title[fullComb$Title %in% c(""Dona"", ""Lady"", ""the Countess"", ""Jonkheer"")] <- ""Lady""
fullComb$Title <- factor(fullComb$Title)
fullComb$FamilySize <- fullComb$SibSp + fullComb$Parch + 1
ggplot(fullComb[1:891, ], aes(x = FamilySize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
fullComb$FsizeD[fullComb$FamilySize == 1] <- ""singleton""
fullComb$FsizeD[fullComb$FamilySize < 5 & fullComb$Fsize > 1] <- ""small""
fullComb$FsizeD[fullComb$FamilySize > 4] <- ""large""
fullComb$Surname <- sapply(fullComb$Name, FUN = function(x) {
    strsplit(x, split = ""[,.]"")[[1]][1]
})
fullComb$FamilyID <- paste(as.character(fullComb$FamilySize), fullComb$Surname, sep = """")
fullComb$FamilyID[fullComb$FamilySize <= 2] <- ""Small""
famIDs <- data.frame(table(fullComb$FamilyID))
famIDs <- famIDs[famIDs$Freq <= 2, ]
fullComb$FamilyID[fullComb$FamilyID %in% famIDs$Var1] <- ""Small""
fullComb$FamilyID <- factor(fullComb$FamilyID)
summary(fullComb$Age)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize, data = fullComb[!is.na(fullComb$Age), ], method = ""anova"")
fullComb$Age[is.na(fullComb$Age)] <- predict(Agefit, fullComb[is.na(fullComb$Age), ])
summary(fullComb)
summary(fullComb$Embarked)
which(fullComb$Embarked == """")
fullComb$Embarked[c(62, 830)] = ""S""
summary(fullComb$Fare)
which(is.na(fullComb$Fare))
fullComb$Fare[1044] <- median(fullComb$Fare, na.rm = TRUE)
ggplot(fullComb[fullComb$Pclass == ""3"" & fullComb$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
fullComb$FamilyID2 <- fullComb$FamilyID
fullComb$FamilyID2 <- as.character(fullComb$FamilyID2)
fullComb$FamilyID2[fullComb$FamilySize <= 3] <- ""Small""
fullComb$FamilyID2 <- factor(fullComb$FamilyID2)
ggplot(fullComb[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
fullComb$Child[fullComb$Age < 16] <- ""Child""
fullComb$Child[fullComb$Age >= 16] <- ""Adult""
table(fullComb$Child, fullComb$Survived)
fullComb$Child <- factor(fullComb$Child)
md.pattern(fullComb)
train <- fullComb[1:891, ]
test <- fullComb[892:1309, ]
set.seed(2501)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2, data = train, importance = TRUE, ntree = 2000)
varImpPlot(fit)
Prediction <- predict(fit, test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = ""one.csv"", row.names = FALSE)
set.seed(2501)
fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID, data = train, controls = cforest_unbiased(ntree = 2000, mtry = 3))
Prediction <- predict(fit, test, OOB = TRUE, type = ""response"")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = ""two.csv"", row.names = FALSE)",1,0,0,1,0,0,0,0,0,1,0,0,0,0
144,alexgomes3-titanic-with-r-datacamp-tutorial,0.754,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'data.frame', 'library', 'list.files', 'nrow', 'plot', 'text', 'rpart', 'rpart.control', 'predict', 'read.csv', 'str', 'write.csv']","['ggplot2', 'readr', 'rpart', 'rpart.plot', 'RColorBrewer', 'base']",0.729453086853027,"['nrow', 'plot', 'predict', 'write.csv', 'rpart.control', 'list.files', 'data.frame', 'read.csv', 'rpart', 'user defined', 'library', 'text', 'str']",[],"['jkevin2010-titanic-survival-using-decision-trees', 'jkevin2010-improved-model-for-titanic-survival', 'researchbigd-titanic-r-researchbigd', 'srinivasarajui-srini-s-r-titanic-solution', 'zahraatashgahy-r-titanic-1', 'tsfitz-titanic', 'lagprophet-titanic', 'goblin-titanic-test', 'danr87946-titanic-practice', 'turntrout-titanic-data-exploration']","[0.7967193047178759, 0.7050415684576659, 0.6459630674204245, 0.4465784292773819, 0.34305703612249266, 0.25271756848889415, 0.2508007612807875, 0.23352401372222198, 0.23299708738162317, 0.2299987495668239]","{'character(0)': ['fancyRpartPlot'], 'package:base': ['data.frame', 'library', 'list.files', 'nrow'], 'package:graphics': ['plot', 'text'], 'package:rpart': ['rpart', 'rpart.control'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""character(0)"": [""fancyRpartPlot""], ""package:base"": [""data.frame"", ""library"", ""list.files"", ""nrow""], ""package:graphics"": [""plot"", ""text""], ""package:rpart"": [""rpart"", ""rpart.control""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",character0 fancyRpartPlot packagebase dataframe library listfiles nrow packagegraphics plot text packagerpart rpart rpartcontrol packagestats predict packageutils readcsv str writecsv,"library(ggplot2)
library(readr)
list.files(""../input"")
library(rpart)
library(rpart.plot)
library(RColorBrewer)
train = read.csv(""../input/train.csv"")
test = read.csv(""../input/test.csv"")
str(train)
my_tree_two <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = ""class"")
plot(my_tree_two)
text(my_tree_two)
fancyRpartPlot(my_tree_two)
my_tree_two
my_prediction <- predict(my_tree_two, newdata = test, type = ""class"")
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
nrow(my_solution)
write.csv(my_solution, file = ""my_solution.csv"", row.names = FALSE)
my_tree_three <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = ""class"", control = rpart.control(minsplit = 50, cp = 0))
fancyRpartPlot(my_tree_three)
my_prediction3 <- predict(my_tree_three, newdata = test, type = ""class"")
my_solution3 <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction3)
write.csv(my_solution3, file = ""my_solution3.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,1,0,0,0,0
145,deltaforce126-titanic-randomforest,0.763,"['c', 'cbind', 'factor', 'is.na', 'library', 'return', 'sapply', 'set.seed', 'summary', 'importance', 'randomForest', 'performance', 'prediction', 'predict', 'head', 'read.csv', 'write.csv']","['gplots', 'ROCR', 'randomForest', 'base']",0.7261300086975101,"['factor', 'predict', 'write.csv', 'read.csv', 'performance', 'randomForest', 'summary', 'return', 'library', 'prediction', 'sapply', 'cbind', 'importance', 'c', 'head', 'is.na', 'set.seed']",[],"['cdeotte-titanic-deep-net-0-82296', 'peggy88-titanic-data-eda-by-peggy', 'ccheng2016-titanic-survival', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'albyedw-titanic-competition', 'adambarnes-titanic-first-random-forest', 'seajaye-titanic-logistic-regression-0-78947']","[0.46042416677520387, 0.40772742035629156, 0.3527591053789812, 0.23440108083605685, 0.2338531701183359, 0.21129634965844335, 0.21129634965844335, 0.19850593325301738, 0.19832908105323802, 0.17542378882184145]","{'package:base': ['c', 'cbind', 'factor', 'is.na', 'library', 'return', 'sapply', 'set.seed', 'summary'], 'package:randomForest': ['importance', 'randomForest'], 'package:ROCR': ['performance', 'prediction'], 'package:stats': ['predict'], 'package:utils': ['head', 'read.csv', 'write.csv']}","{""package:base"": [""c"", ""cbind"", ""factor"", ""is.na"", ""library"", ""return"", ""sapply"", ""set.seed"", ""summary""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:ROCR"": [""performance"", ""prediction""], ""package:stats"": [""predict""], ""package:utils"": [""head"", ""read.csv"", ""write.csv""]}",packagebase c cbind factor isna library return sapply setseed summary packagerandomForest importance randomForest packageROCR performance prediction packagestats predict packageutils head readcsv writecsv,"traindata <- read.csv(""../input/train.csv"", header = TRUE, colClasses = c(""numeric"", ""factor"", ""factor"", ""character"", ""factor"", ""numeric"", ""numeric"", ""numeric"", ""character"", ""numeric"", ""character"", ""factor""))
testdata <- read.csv(""../input/test.csv"", header = TRUE, colClasses = c(""numeric"", ""factor"", ""character"", ""factor"", ""numeric"", ""numeric"", ""numeric"", ""character"", ""numeric"", ""character"", ""factor""))
summary(traindata)
summary(testdata)
fun_Fare <- function(x) {
    if (is.na(x) == TRUE) {
        x = 14.454
    }
    return(x)
}
testdata$Fare <- sapply(testdata$Fare, fun_Fare)
traindata$Survived <- factor(traindata$Survived, levels = c(""0"", ""1""))
traindata$Pclass <- factor(traindata$Pclass, levels = c(""1"", ""2"", ""3""))
traindata$Sex <- factor(traindata$Sex, levels = c(""female"", ""male""))
traindata$Embarked <- factor(traindata$Embarked, levels = c("""", ""C"", ""Q"", ""S""))
testdata$Pclass <- factor(testdata$Pclass, levels = c(""1"", ""2"", ""3""))
testdata$Sex <- factor(testdata$Sex, levels = c(""female"", ""male""))
testdata$Embarked <- factor(testdata$Embarked, levels = c("""", ""C"", ""Q"", ""S""))
library(gplots)
library(ROCR)
library(randomForest)
set.seed(5000)
train.rf <- randomForest(Survived ~ Sex + Fare + Pclass + SibSp + Parch, data = traindata, na.action = na.omit, cutoff = c(0.616, 0.384))
importance(train.rf)
train.rf
tmpROC = cbind(traindata$Survived, train.rf$votes)
head(tmpROC)
pred.auc.rf.train = prediction(tmpROC[, 3], tmpROC[, 1])
perf.rf.train = performance(pred.auc.rf.train, ""auc"", ""tpr"", ""fpr"")
perf.rf.train@y.values[[1]]
pred.rf = predict(train.rf, testdata, type = ""prob"")
my_submission = cbind(PassengerId = testdata$PassengerId, Survived = pred.rf[, 2])
summary(my_submission)
for (i in 1:418) {
    if (my_submission[i, 2] >= 0.384) 
        my_submission[i, 2] = 1
    else my_submission[i, 2] = 0
}
write.csv(my_submission, file = ""my_submission_7.csv"", row.names = FALSE, quote = FALSE)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
148,wjsutton-exploring-surviving-the-titanic,0.77,"['as.factor', 'as.ordered', 'as.vector', 'c', 'cbind', 'class', 'data.frame', 'dim', 'gsub', 'is.array', 'is.character', 'is.data.frame', 'is.element', 'is.factor', 'is.list', 'is.logical', 'is.matrix', 'is.na', 'is.numeric', 'is.vector', 'length', 'library', 'max', 'mean', 'min', 'names', 'nchar', 'ncol', 'nrow', 'paste', 'paste0', 'print', 'rbind', 'round', 'set.seed', 'shQuote', 'substr', 'sum', 'unique', 'which', 'randomForest', 'varImpPlot', 'predict', 'profile', 'sd', 'str_extract', 'str_locate', 'str_sub', 'read.csv', 'write.csv']","['randomForest', 'stringr', 'dplyr', 'base']",5.05674982070923,"['as.ordered', 'nrow', 'mean', 'is.data.frame', 'is.numeric', 'min', 'nchar', 'which', 'profile', 'is.na', 'is.element', 'names', 'print', 'ncol', 'class', 'is.array', 'as.factor', 'is.matrix', 'round', 'varImpPlot', 'str_extract', 'set.seed', 'gsub', 'dim', 'shQuote', 'unique', 'max', 'is.vector', 'str_locate', 'length', 'sd', 'read.csv', 'as.vector', 'paste0', 'randomForest', 'is.character', 'c', 'is.factor', 'is.list', 'is.logical', 'paste', 'rbind', 'sum', 'predict', 'write.csv', 'data.frame', 'str_sub', 'substr', 'library', 'cbind']",[],"['djohnbar-fork-of-titanic-rf-w-titles', 'maza91-titanic-logistic-regression', 'zahoorahmad-titanic-2nd-degree-families-and-majority-voting', 'ushasri-titanic-2nd-degree-families-and-majority-voting', 'erikbruin-titanic-2nd-degree-families-and-majority-voting', 'djohnbar-titanic-rf', 'harsh2-exploring-the-titanic-dataset', 'ravikrishnareddy-titanic-survival-prediction', 'domini-titanic-data-exploration-and-modelling', 'ablearcher-my-titanic']","[0.34630239433692417, 0.32138497604242994, 0.317096247106804, 0.317096247106804, 0.3166515430939472, 0.3087417035523265, 0.30823118434828567, 0.30582231203757426, 0.3031354273636432, 0.3025665060748013]","{'package:base': ['as.factor', 'as.ordered', 'as.vector', 'c', 'cbind', 'class', 'data.frame', 'dim', 'gsub', 'is.array', 'is.character', 'is.data.frame', 'is.element', 'is.factor', 'is.list', 'is.logical', 'is.matrix', 'is.na', 'is.numeric', 'is.vector', 'length', 'library', 'max', 'mean', 'min', 'names', 'nchar', 'ncol', 'nrow', 'paste', 'paste0', 'print', 'rbind', 'round', 'set.seed', 'shQuote', 'substr', 'sum', 'unique', 'which'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:stats': ['predict', 'profile', 'sd'], 'package:stringr': ['str_extract', 'str_locate', 'str_sub'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.factor"", ""as.ordered"", ""as.vector"", ""c"", ""cbind"", ""class"", ""data.frame"", ""dim"", ""gsub"", ""is.array"", ""is.character"", ""is.data.frame"", ""is.element"", ""is.factor"", ""is.list"", ""is.logical"", ""is.matrix"", ""is.na"", ""is.numeric"", ""is.vector"", ""length"", ""library"", ""max"", ""mean"", ""min"", ""names"", ""nchar"", ""ncol"", ""nrow"", ""paste"", ""paste0"", ""print"", ""rbind"", ""round"", ""set.seed"", ""shQuote"", ""substr"", ""sum"", ""unique"", ""which""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:stats"": [""predict"", ""profile"", ""sd""], ""package:stringr"": [""str_extract"", ""str_locate"", ""str_sub""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase asfactor asordered asvector c cbind class dataframe dim gsub isarray ischaracter isdataframe iselement isfactor islist islogical ismatrix isna isnumeric isvector length library max mean min names nchar ncol nrow paste paste0 print rbind round setseed shQuote substr sum unique which packagerandomForest randomForest varImpPlot packagestats predict profile sd packagestringr strextract strlocate strsub packageutils readcsv writecsv,"library(randomForest)
library(stringr)
library(dplyr)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
test$Survived <- NA
all <- rbind(train, test)
profile <- function(test_obj) {
    if (is.vector(test_obj)) {
        obj_structure <- ""vector""
        message <- paste0(""Object is a vector of length "", length(test_obj))
    }
    else if (is.data.frame(test_obj)) {
        obj_structure <- ""data.frame""
        message <- paste0(""Object is a data frame, "", ncol(test_obj), "" columns by "", nrow(test_obj), "" rows"")
    }
    else if (is.factor(test_obj)) {
        obj_structure <- ""factor""
        message <- paste0(""Object is a factor of length "", length(test_obj))
    }
    else if (is.character(test_obj)) {
        obj_structure <- ""character""
        message <- paste0(""Object is a character of length "", length(test_obj))
    }
    else if (is.list(test_obj)) {
        obj_structure <- ""list""
        message <- paste0(""Object is a list of length "", length(test_obj))
    }
    else if (is.matrix(test_obj)) {
        obj_structure <- ""matrix""
        message <- paste0(""Object is a matrix, "", ncol(test_obj), "" columns by "", nrow(test_obj), "" rows"")
    }
    else if (is.array(test_obj)) {
        obj_structure <- ""array""
        message <- paste0(""Object is an array, with dimensions "", (paste(shQuote(dim(test_array), type = ""sh""), collapse = "","")))
    }
    else {
        obj_structure <- ""unknown""
        message <- ""Unknown object""
    }
    print(message)
    if (is.element(obj_structure, c(""vector"", ""factor"", ""list"")) == TRUE) {
        if (is.numeric(test_obj)) {
            obj_data_type <- ""numeric""
        }
        else if (is.logical(test_obj)) {
            obj_data_type <- ""logical""
        }
        else if (class(test_obj) == ""Date"") {
            obj_data_type <- ""date""
        }
        else {
            obj_data_type <- ""string""
        }
        uniqueness <- paste0(round((length(unique(test_obj))/length(test_obj)) * 100, 2), ""%"")
        blanks <- sum(length(which("""" == test_obj)), length(which(""[[:space]]"" == test_obj)), length(which(is.na(test_obj))))
        completeness <- paste0(round(((length(test_obj) - blanks)/length(test_obj)) * 100, 2), ""%"")
        if (obj_data_type != ""string"") {
            max <- max(test_obj)
            min <- min(test_obj)
            avg <- round(mean(test_obj), 2)
            standDev <- round(sd(test_obj), 2)
        }
        else if (obj_data_type == ""string"") {
            max <- max(nchar(as.vector(test_obj)))
            min <- min(nchar(as.vector(test_obj)))
            avg <- round(mean(nchar(as.vector(test_obj))), 2)
            standDev <- round(sd(nchar(as.vector(test_obj))), 2)
        }
        col_name <- names(test_obj)
        if (length(col_name) == 0) {
            col_name <- ""NULL""
        }
        column_name <- paste0(""Column "", 1, "": ("", col_name, "")"")
        output <- cbind(column_name, obj_structure, obj_data_type, uniqueness, completeness, min, max, avg, standDev)
        print(output)
    }
    else {
        for (i in 1:ncol(test_obj)) {
            if (is.vector(test_obj[[i]])) {
                obj_structure <- ""vector""
            }
            else if (is.data.frame(test_obj[[i]])) {
                obj_structure <- ""data.frame""
            }
            else if (is.factor(test_obj[[i]])) {
                obj_structure <- ""factor""
            }
            else if (is.character(test_obj[[i]])) {
                obj_structure <- ""character""
            }
            else if (is.list(test_obj[[i]])) {
                obj_structure <- ""list""
            }
            else if (is.data.frame(test_obj[[i]])) {
                obj_structure <- ""data.frame""
            }
            else if (is.matrix(test_obj[[i]])) {
                obj_structure <- ""matrix""
            }
            else if (is.array(test_obj[[i]])) {
                obj_structure <- ""array""
            }
            else {
                obj_structure <- ""unknown""
            }
            if (is.numeric(test_obj[[i]])) {
                obj_data_type <- ""numeric""
            }
            else if (is.logical(test_obj[[i]])) {
                obj_data_type <- ""logical""
            }
            else if (class(test_obj[[i]]) == ""Date"") {
                obj_data_type <- ""date""
            }
            else {
                obj_data_type <- ""string""
            }
            uniqueness <- paste0(round((length(unique(test_obj[[i]]))/length(test_obj[[i]])) * 100, 2), ""%"")
            blanks <- sum(length(which("""" == test_obj[[i]])), length(which(""[[:space]]"" == test_obj[[i]])), length(which(is.na(test_obj[[i]]))))
            completeness <- paste0(round(((length(test_obj[[i]]) - blanks)/length(test_obj[[i]])) * 100, 2), ""%"")
            if (obj_data_type != ""string"") {
                max <- max(test_obj[[i]])
                min <- min(test_obj[[i]])
                avg <- round(mean(test_obj[[i]]), 2)
                standDev <- round(sd(test_obj[[i]]), 2)
            }
            else if (obj_data_type == ""string"") {
                max <- max(nchar(as.vector(test_obj[[i]])))
                min <- min(nchar(as.vector(test_obj[[i]])))
                avg <- round(mean(nchar(as.vector(test_obj[[i]]))), 2)
                standDev <- round(sd(nchar(as.vector(test_obj[[i]]))), 2)
            }
            col_name <- names(test_obj[i])
            if (length(col_name) == 0) {
                col_name <- ""NULL""
            }
            column_name <- paste0(""Column "", i, "": ("", col_name, "")"")
            output_i <- cbind(column_name, obj_structure, obj_data_type, uniqueness, completeness, min, max, avg, standDev)
            if (i == 1) {
                output <- output_i
            }
            else {
                output <- rbind(output, output_i)
            }
        }
        print(output)
    }
}
profile(all)
all$Sex <- as.factor(all$Sex)
all$Survived <- as.factor(all$Survived)
all$Pclass <- as.ordered(all$Pclass)
all$Embarked <- as.factor(all$Embarked)
all$PclassSex[all$Pclass == ""1"" & all$Sex == ""male""] <- ""P1Male""
all$PclassSex[all$Pclass == ""2"" & all$Sex == ""male""] <- ""P2Male""
all$PclassSex[all$Pclass == ""3"" & all$Sex == ""male""] <- ""P3Male""
all$PclassSex[all$Pclass == ""1"" & all$Sex == ""female""] <- ""P1Female""
all$PclassSex[all$Pclass == ""2"" & all$Sex == ""female""] <- ""P2Female""
all$PclassSex[all$Pclass == ""3"" & all$Sex == ""female""] <- ""P3Female""
all$PclassSex <- as.factor(all$PclassSex)
all$Surname <- substr(str_extract(pattern = ""[a-z|A-Z]*,"", all$Name), 1, nchar(str_extract(pattern = ""[a-z|A-Z]*,"", all$Name)) - 1)
all$Titles <- str_sub(all$Name, str_locate(pattern = ""[,] "", all$Name)[, 1], str_locate(pattern = ""[a-z][/.] "", all$Name)[, 1])
all$Titles <- gsub(""the"", """", all$Titles)
all$Titles <- gsub("","", """", all$Titles)
all$Titles <- gsub("" "", """", all$Titles)
all$Titles[all$Titles %in% c(""Mlle"", ""Ms"")] <- ""Miss""
all$Titles[all$Titles == ""Mme""] <- ""Mrs""
all$Titles[!(all$Titles %in% c(""Master"", ""Miss"", ""Mr"", ""Mrs""))] <- ""Rare Title""
all$Titles <- as.factor(all$Titles)
trainClean <- all[!is.na(all$Survived), ]
testClean <- all[is.na(all$Survived), ]
trainClean[is.na(trainClean)] <- 0
trainClean$Titles <- as.factor(trainClean$Titles)
set.seed(1)
fit <- randomForest(as.factor(Survived) ~ PclassSex + Fare + Embarked + Titles, data = trainClean, importance = TRUE, ntree = 5000)
varImpPlot(fit)
Prediction <- predict(fit, testClean)
submit <- data.frame(PassengerId = testClean$PassengerId, Survived = Prediction, row.names = NULL)
submit[is.na(submit)] <- 0
write.csv(submit, file = ""firstforest.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
149,garciparedes-titanic-getting-started,0.7559999999999999,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.factor', 'as.matrix', 'as.numeric', 'c', 'cbind', 'colnames', 'dim', 'is.na', 'jitter', 'library', 'ls', 'mean', 'paste', 'rbind', 'rep', 'return', 'rm', 'scale', 'setdiff', 'summary', 'table', 'pairs', 'plot', 'lda', 'lm', 'predict', 'princomp', 'head', 'read.csv', 'write.csv']","['MASS', 'base']",0.5236217975616461,"['mean', 'is.na', 'jitter', 'lm', 'as.factor', 'summary', 'rep', 'as.matrix', 'setdiff', 'princomp', 'colnames', 'dim', 'read.csv', 'table', 'return', 'rm', 'scale', 'c', 'rbind', 'paste', 'as.numeric', 'plot', 'ls', 'lda', 'predict', 'write.csv', 'pairs', 'head', 'user defined', 'library', 'cbind']",[],"['joelweiss-titanic-data-r', 'cnusapbo-titanic-r-code', 'prabhulingayya-titanic-prediction-using-logistic-regression', 'goblin-titanic-test', 'jacekpardyak-mytitanicscript', 'tsfitz-titanic', 'alma123-titanic', 'fpsawicki-eda-and-prediction-on-titanic-dataset', 'mustfkeskin-titanic-xgboost', 'brirush-randomforest-implementation-of-titanic']","[0.41384156608986605, 0.3905701659417201, 0.3897911766565797, 0.3356480731627015, 0.31569532551425267, 0.28737337102063065, 0.26681641289708313, 0.24226448795262168, 0.232371166190978, 0.21689791252975726]","{'character(0)': ['columnsToNumeric', 'plotWithLDA', 'plotWithPCA', 'predictData', 'preprocessData', 'regressionAge', 'removedColumnsIndex'], 'package:base': ['as.factor', 'as.matrix', 'as.numeric', 'c', 'cbind', 'colnames', 'dim', 'is.na', 'jitter', 'library', 'ls', 'mean', 'paste', 'rbind', 'rep', 'return', 'rm', 'scale', 'setdiff', 'summary', 'table'], 'package:graphics': ['pairs', 'plot'], 'package:MASS': ['lda'], 'package:stats': ['lm', 'predict', 'princomp'], 'package:utils': ['head', 'read.csv', 'write.csv']}","{""character(0)"": [""columnsToNumeric"", ""plotWithLDA"", ""plotWithPCA"", ""predictData"", ""preprocessData"", ""regressionAge"", ""removedColumnsIndex""], ""package:base"": [""as.factor"", ""as.matrix"", ""as.numeric"", ""c"", ""cbind"", ""colnames"", ""dim"", ""is.na"", ""jitter"", ""library"", ""ls"", ""mean"", ""paste"", ""rbind"", ""rep"", ""return"", ""rm"", ""scale"", ""setdiff"", ""summary"", ""table""], ""package:graphics"": [""pairs"", ""plot""], ""package:MASS"": [""lda""], ""package:stats"": [""lm"", ""predict"", ""princomp""], ""package:utils"": [""head"", ""read.csv"", ""write.csv""]}",character0 columnsToNumeric plotWithLDA plotWithPCA predictData preprocessData regressionAge removedColumnsIndex packagebase asfactor asmatrix asnumeric c cbind colnames dim isna jitter library ls mean paste rbind rep return rm scale setdiff summary table packagegraphics pairs plot packageMASS lda packagestats lm predict princomp packageutils head readcsv writecsv,"rm(list = ls())
input.dir <- ""./../input/""
library(MASS)
removedColumnsIndex <- function(data, columIds) {
    setdiff(colnames(data), columIds)
}
columnsToNumeric <- function(data, columIds) {
    for (i in columIds) {
        data[, i] <- as.numeric(data[, i])
    }
    return(data)
}
regressionAge <- function(data) {
    columns.to.remove <- c(""Name"", ""Cabin"", ""Ticket"", ""PassengerId"")
    data2 <- data[, removedColumnsIndex(data, columns.to.remove)]
    data.train <- data2[!is.na(data2[, ""Age""]), ]
    data.model <- lm(Age ~ ., data = data.train)
    data.test <- data2[is.na(data2[, ""Age""]), ]
    data[is.na(data[, ""Age""]), ""Age""] <- predict(data.model, data.test)
    return(data)
}
preprocessData <- function(data) {
    columns.to.remove <- c(""Name"", ""Cabin"", ""Ticket"")
    data.cleaned <- data[, removedColumnsIndex(data, columns.to.remove)]
    columns.to.numeric <- c(""Sex"", ""Embarked"")
    data.cleaned <- columnsToNumeric(data.cleaned, columns.to.numeric)
    columns.to.scale <- setdiff(colnames(data.cleaned), c(""PassengerId"", ""Survived""))
    data.cleaned[, columns.to.scale] <- scale(data.cleaned[, columns.to.scale])
    data.cleaned[is.na(data.cleaned)] <- 0
    return(data.cleaned)
}
predictData <- function(model, data) {
    data.prediction <- cbind(data[, ""PassengerId""], as.numeric(predict(model, data)$class) - 1)
    colnames(data.prediction) <- c(""PassengerId"", ""Survived"")
    return(data.prediction)
}
plotWithPCA <- function(data) {
    data.pca <- princomp(data[, removedColumnsIndex(data, ""Survived"")])
    plot(data.pca$scores[, 1:2], col = as.numeric(data[, ""Survived""]) + 2, pch = 20)
}
plotWithLDA <- function(obj, data) {
    plot(as.matrix(data[, removedColumnsIndex(data, ""Survived"")]) %*% obj$scaling, jitter(rep(0, dim(data)[1])), col = data[, ""Survived""] + 2, ylim = c(-0.05, 0.05), xlab = """", ylab = """", pch = 20)
}
data.train <- read.csv(paste(input.dir, ""train.csv"", sep = """"))
data.test <- read.csv(paste(input.dir, ""test.csv"", sep = """"))
summary(data.train)
head(data.train)
data.global <- regressionAge(rbind(data.train[, removedColumnsIndex(data, ""Survived"")], data.test))
data.train[, ""Age""] <- data.global[1:dim(data.train)[1], ""Age""]
data.test[, ""Age""] <- data.global[-c(1:dim(data.train)[1]), ""Age""]
data.train.use <- preprocessData(data.train)
head(data.train.use)
pairs(data.train.use[, -c(1, 2)], col = as.numeric(data.train.use[, 2]) + 2, pch = 20)
plotWithPCA(data.train.use)
data.test.use <- preprocessData(data.test)
head(data.test.use)
data.classifier.formula <- as.factor(Survived) ~ .
data.classifier.lda <- lda(data.classifier.formula, data.train.use, prior = c(0.7, 0.3))
table(as.numeric(predict(data.classifier.lda, data.train.use)$class) - 1, data.train.use[, 2])
mean(as.numeric(predict(data.classifier.lda, data.train.use)$class) - 1 == data.train.use[, 2])
plotWithLDA(data.classifier.lda, data.train.use)
data.test.prediction.lda <- predictData(data.classifier.lda, data.test.use)
head(data.test.prediction.lda)
write.csv(data.test.prediction.lda, file = ""prediction-lda.csv"", row.names = FALSE)",0,0,0,0,0,0,1,0,0,0,0,0,0,0
150,domini-titanic-data-exploration-and-modelling,0.742,"['filter', 'any', 'as.data.frame', 'as.factor', 'as.numeric', 'c', 'data.frame', 'factor', 'ifelse', 'is.na', 'length', 'library', 'log', 'nrow', 'rep', 'rm', 'sapply', 'strsplit', 'substring', 'sum', 'summary', 'table', 'bind_rows', 'group_by', 'mutate', 'summarise', 'aes', 'element_text', 'geom_bar', 'geom_boxplot', 'geom_density', 'ggplot', 'ggtitle', 'scale_fill_discrete', 'scale_x_continuous', 'theme', 'hist', 'missForest', 'randomForest', 'varImpPlot', 'read_csv', 'rpart', 'rpart.plot', 'cor', 'formula', 'glm', 'median', 'predict', 'step', 'head', 'str', 'tail', 'write.csv']","['readr', 'dplyr', 'ggplot2', 'missForest', 'rpart', 'rpart.plot', 'randomForest', 'base']",14.5908741950989,"['summarise', 'step', 'nrow', 'median', 'element_text', 'cor', 'theme', 'is.na', 'glm', 'scale_x_continuous', 'geom_boxplot', 'missForest', 'log', 'scale_fill_discrete', 'rpart', 'as.factor', 'summary', 'filter', 'sapply', 'varImpPlot', 'rep', 'hist', 'str', 'factor', 'geom_bar', 'length', 'table', 'randomForest', 'rm', 'substring', 'as.data.frame', 'group_by', 'c', 'aes', 'read_csv', 'any', 'tail', 'mutate', 'as.numeric', 'ifelse', 'sum', 'predict', 'write.csv', 'bind_rows', 'ggtitle', 'data.frame', 'strsplit', 'ggplot', 'geom_density', 'rpart.plot', 'head', 'library', 'formula']",[],"['maza91-titanic-logistic-regression', 'djohnbar-titanic-rf', 'harsh2-exploring-the-titanic-dataset', 'djohnbar-fork-of-titanic-rf-w-titles', 'erikbruin-titanic-2nd-degree-families-and-majority-voting', 'zahoorahmad-titanic-2nd-degree-families-and-majority-voting', 'ushasri-titanic-2nd-degree-families-and-majority-voting', 'ravikrishnareddy-titanic-survival-prediction', 'ablearcher-my-titanic', 'aeintngon-titanic-exploratory-analysis']","[0.7843981076035755, 0.7448858171710625, 0.7324849070570568, 0.7313744944266947, 0.7277147430342431, 0.7275465773385232, 0.7275465773385232, 0.7238795496310172, 0.7089667938378381, 0.6838629275578468]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['any', 'as.data.frame', 'as.factor', 'as.numeric', 'c', 'data.frame', 'factor', 'ifelse', 'is.na', 'length', 'library', 'log', 'nrow', 'rep', 'rm', 'sapply', 'strsplit', 'substring', 'sum', 'summary', 'table'], 'package:dplyr': ['bind_rows', 'group_by', 'mutate', 'summarise'], 'package:ggplot2': ['aes', 'element_text', 'geom_bar', 'geom_boxplot', 'geom_density', 'ggplot', 'ggtitle', 'scale_fill_discrete', 'scale_x_continuous', 'theme'], 'package:graphics': ['hist'], 'package:missForest': ['missForest'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:readr': ['read_csv'], 'package:rpart': ['rpart'], 'package:rpart.plot': ['rpart.plot'], 'package:stats': ['cor', 'formula', 'glm', 'median', 'predict', 'step'], 'package:utils': ['head', 'str', 'tail', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""any"", ""as.data.frame"", ""as.factor"", ""as.numeric"", ""c"", ""data.frame"", ""factor"", ""ifelse"", ""is.na"", ""length"", ""library"", ""log"", ""nrow"", ""rep"", ""rm"", ""sapply"", ""strsplit"", ""substring"", ""sum"", ""summary"", ""table""], ""package:dplyr"": [""bind_rows"", ""group_by"", ""mutate"", ""summarise""], ""package:ggplot2"": [""aes"", ""element_text"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""ggplot"", ""ggtitle"", ""scale_fill_discrete"", ""scale_x_continuous"", ""theme""], ""package:graphics"": [""hist""], ""package:missForest"": [""missForest""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:readr"": [""read_csv""], ""package:rpart"": [""rpart""], ""package:rpart.plot"": [""rpart.plot""], ""package:stats"": [""cor"", ""formula"", ""glm"", ""median"", ""predict"", ""step""], ""package:utils"": [""head"", ""str"", ""tail"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase any asdataframe asfactor asnumeric c dataframe factor ifelse isna length library log nrow rep rm sapply strsplit substring sum summary table packagedplyr bindrows groupby mutate summarise packageggplot2 aes elementtext geombar geomboxplot geomdensity ggplot ggtitle scalefilldiscrete scalexcontinuous theme packagegraphics hist packagemissForest missForest packagerandomForest randomForest varImpPlot packagereadr readcsv packagerpart rpart packagerpartplot rpartplot packagestats cor formula glm median predict step packageutils head str tail writecsv,"library(readr)
library(dplyr)
library(ggplot2)
library(missForest)
library(rpart)
library(rpart.plot)
library(randomForest)
train <- read_csv(""../input/train.csv"")
test <- read_csv(""../input/test.csv"")
all <- bind_rows(train, test)
str(all)
summary(all)
head(all)
tail(all)
sapply(all, function(x) sum(is.na(x)))
table(train$Survived)
ggplot(all[1:891, ], aes(x = Pclass, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""stack"") + ggtitle(""Survival Based on Ticket Class"") + theme(plot.title = element_text(hjust = 0.5)) + scale_fill_discrete(name = ""Survived"") + scale_x_continuous(breaks = c(1:11))
all[1:891, ] %>% group_by(Pclass) %>% summarise(survived_percentage = (sum(Survived)/length(Pclass) * 100))
table(train$Pclass, train$Sex)
table(train[train$Survived == 1, ]$Pclass, train[train$Survived == 1, ]$Sex)
all$Pclass <- as.factor(all$Pclass)
name_split <- strsplit(all$Name, split = ""[,.]"")
name_title <- sapply(name_split, ""["", 2)
name_title <- substring(name_title, 2)
table(name_title)
uncommon_titles <- c(""Capt"", ""Col"", ""Don"", ""Dona"", ""Dr"", ""Jonkheer"", ""Lady"", ""Major"", ""Rev"", ""Sir"", ""the Countess"")
name_title[name_title %in% uncommon_titles] <- ""uncommon""
name_title[name_title == ""Mlle""] <- ""Miss""
name_title[name_title %in% c(""Mme"", ""Ms"")] <- ""Mrs""
all <- mutate(all, Title = name_title)
all$Title <- as.factor(all$Title)
rm(name_split, name_title, uncommon_titles)
ggplot(all[1:891, ], aes(x = Sex, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""stack"") + ggtitle(""Survival Based on Gender"") + theme(plot.title = element_text(hjust = 0.5)) + scale_fill_discrete(name = ""Survived"")
all$Sex <- as.factor(all$Sex)
sum(is.na(all$Age))
age.mis <- as.data.frame(all[, c(2, 3, 5, 6, 7, 8, 10, 12)])
age.mis$Embarked <- as.factor(age.mis$Embarked)
age.mis$Survived <- as.factor(age.mis$Survived)
age_imp <- missForest(age.mis)
age_new <- age_imp[[1]][4]
age_new <- as.numeric(age_new$Age)
hist(age_new, freq = F)
median(age_new)
all$Age <- age_new
ggplot(all[1:891, ], aes(factor(Survived), Age)) + geom_boxplot() + ggtitle(""Survival Based on Age"") + theme(plot.title = element_text(hjust = 0.5)) + scale_fill_discrete(name = ""Survived"")
rm(age_imp, age_new, age.mis)
all <- mutate(all, family_size = SibSp + Parch + 1)
ggplot(all[1:891, ], aes(x = family_size, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + ggtitle(""Survival Based on family size"") + theme(plot.title = element_text(hjust = 0.5)) + scale_fill_discrete(name = ""Survived"") + scale_x_continuous(breaks = c(1:11))
all$family_size <- ifelse(all$family_size == 1, ""single"", ifelse(all$family_size > 4, ""big"", ""medium""))
all$family_size <- as.factor(all$family_size)
ticket_count <- rep(""NA"", times = nrow(all))
for (i in 1:nrow(all)) {
    ticket_count[i] <- nrow(all[all$Ticket == all$Ticket[i], ])
}
all <- mutate(all, ticket_count)
ggplot(all[1:891, ], aes(x = as.numeric(ticket_count), fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + ggtitle(""Survival Based on Ticket Count"") + theme(plot.title = element_text(hjust = 0.5)) + scale_fill_discrete(name = ""Survived"") + scale_x_continuous(breaks = c(1:11))
all$ticket_count <- ifelse(all$ticket_count == 1, ""single"", ifelse(all$ticket_count > 4, ""big"", ""medium""))
all$ticket_count <- as.factor(all$ticket_count)
family_size <- all$SibSp + all$Parch + 1
cor(family_size, as.numeric(ticket_count), method = ""pearson"")
rm(family_size, i, ticket_count)
all[is.na(all$Fare), ]
all[is.na(all$Fare), ]$Fare <- median(all[(all$Embarked == ""S"" & all$Sex == ""male"" & all$Pclass == ""3""), ""Fare""]$Fare, na.rm = T)
all[1044, ""Fare""]
ggplot(all, aes(x = Fare)) + geom_density(kernel = ""gaussian"") + ggtitle(""Density Plot for Fare Variable"") + theme(plot.title = element_text(hjust = 0.5))
all <- mutate(all, Fare_ln = as.numeric(ifelse(all$Fare == 0, ""NA"", log(all$Fare))))
ggplot(all, aes(x = Fare_ln)) + geom_density(kernel = ""gaussian"") + ggtitle(""Density Plot for Fare_ln Variable"") + theme(plot.title = element_text(hjust = 0.5))
all[is.na(all$Embarked), ]
all %>% filter(Pclass == 1 & Sex == ""female"" & ticket_count == ""medium"") %>% group_by(Embarked) %>% summarise(avg_fare = median(Fare))
all[is.na(all$Embarked), ]$Embarked <- ""S""
all[c(62, 830), ""Embarked""]
all$Embarked <- as.factor(all$Embarked)
mother <- rep(""NA"", times = nrow(all))
for (i in 1:nrow(all)) {
    mother[i] <- ifelse(all$Sex[i] == ""female"" & all$Age[i] > 16 & all$Parch[i] > 0 & nrow(all[all$Ticket == all$Ticket[i], ]) > 1, ifelse(any((all[all$Ticket == all$Ticket[i] & all$Age < 10 & all$Parch > 0, ]$Age + 16) < all$Age[i]), 1, 0), 0)
}
all <- all %>% mutate(mother)
all$mother <- as.factor(all$mother)
rm(mother, i)
all <- mutate(all, child = ifelse(all$Age < 10, 1, 0))
all$child <- as.factor(all$child)
train_model <- all[1:891, c(""Survived"", ""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Fare_ln"", ""Embarked"", ""Title"", ""family_size"", ""ticket_count"", ""mother"", ""child"")]
test_model <- all[892:1309, c(""Survived"", ""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Fare_ln"", ""Embarked"", ""Title"", ""family_size"", ""ticket_count"", ""mother"", ""child"")]
reg0 <- glm(Survived ~ 1, data = train_model, family = binomial)
reg1 <- glm(Survived ~ ., data = train_model, family = binomial)
step(reg0, scope = formula(reg1), direction = ""forward"", k = 2)
logistic_forward <- glm(Survived ~ Title + Pclass + family_size + Age + Sex, data = train_model, family = binomial)
decision_tree <- rpart(Survived ~ ., data = train_model, method = ""class"")
rpart.plot(decision_tree)
random_forest <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + family_size + ticket_count + mother + child, data = train_model, importance = TRUE, ntree = 2000)
varImpPlot(random_forest)
pred_log <- predict(logistic_forward, newdata = test_model, type = ""response"")
classification <- ifelse(pred_log > 0.5, 1, 0)
Prediction_logistic <- data.frame(PassengerId = test$PassengerId, Survived = classification)
write.csv(Prediction_logistic, file = ""logistic.csv"", row.names = FALSE)
pred_tree <- predict(decision_tree, newdata = test_model, type = ""class"")
Prediction_tree <- data.frame(PassengerId = test$PassengerId, Survived = pred_tree)
write.csv(Prediction_tree, file = ""tree.csv"", row.names = FALSE)
pred_random <- predict(random_forest, newdata = test_model)
Prediction_random <- data.frame(PassengerId = test$PassengerId, Survived = pred_random)
write.csv(Prediction_random, file = ""random.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
152,pradeeptripathi-prediction-of-titanic-survival-using-random-forest,0.7509999999999999,"['filter', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'table', 'which', 'bind_rows', 'dense_rank', 'desc', 'group_by', 'mutate', 'n', 'summarise', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'par', 'plot', 'complete', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'head', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'readr', 'base']",26.668039083480807,"['summarise', 'labs', 'complete', 'geom_text', 'median', 'which', 'coord_flip', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'summary', 'filter', 'sapply', 'round', 'n', 'geom_histogram', 'hist', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'group_by', 'row.names', 'c', 'aes', 'scale_y_continuous', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'head', 'library', 'facet_grid']",[],"['pradeeptripathi-prediction-of-titanic-survival-using-r', 'paulbisto-r-titanic-script-practice', 'lokesharun-titanic', 'predact-easy-r-titanic-predictive-model', 'utkarsh1997-kaggle-titanic-rf', 'suraj915-titanic-suraj', 'pavani2018-titanicr-random-forests', 'mailakshdeep-titanic-survival-prediction-r', 'acrespop-titanic1', 'hisnibs-titanic-enhancing-the-training-data-and-kis']","[0.9998408899836042, 0.9341979359650269, 0.9335045189166102, 0.9252384795308537, 0.9170546030009129, 0.8952375303427353, 0.8703075757007375, 0.8445153690778266, 0.8138931404053951, 0.7650346491210248]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'table', 'which'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'group_by', 'mutate', 'n', 'summarise'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'par', 'plot'], 'package:mice': ['complete', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""c"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""summary"", ""table"", ""which""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""group_by"", ""mutate"", ""n"", ""summarise""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""par"", ""plot""], ""package:mice"": [""complete"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase c colnames dataframe factor gsub isna library names nlevels paste paste0 round rownames sapply setseed strsplit sum summary table which packagedplyr bindrows denserank desc groupby mutate n summarise packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend par plot packagemice complete mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils head readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
library(""readr"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
titanic <- bind_rows(train, test)
str(titanic)
summary(titanic)
head(titanic)
colnames(titanic)
titanic$title <- gsub(""(.*, )|(\\..*)"", """", titanic$Name)
table(titanic$Sex, titanic$title)
unusual_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
titanic$title[titanic$title == ""Mlle""] <- ""Miss""
titanic$title[titanic$title == ""Ms""] <- ""Miss""
titanic$title[titanic$title == ""Mme""] <- ""Mrs""
titanic$title[titanic$title %in% unusual_title] <- ""Unusual Title""
table(titanic$Sex, titanic$title)
titanic$surname <- sapply(titanic$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
nlevels(factor(titanic$surname))
titanic$famsize <- titanic$SibSp + titanic$Parch + 1
titanic$family <- paste(titanic$surname, titanic$famsize, sep = ""_"")
ggplot(titanic[1:891, ], aes(x = famsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
titanic$fsizeD[titanic$famsize == 1] <- ""single""
titanic$fsizeD[titanic$famsize < 5 & titanic$famsize > 1] <- ""small""
titanic$fsizeD[titanic$famsize > 4] <- ""large""
titanic$Cabin[1:28]
strsplit(titanic$Cabin[2], NULL)[[1]]
titanic$deck <- factor(sapply(titanic$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
summary(titanic)
titanic$Embarked[titanic$Embarked == """"] <- NA
titanic[(which(is.na(titanic$Embarked))), 1]
titanic[c(62, 830), ""Embarked""]
titanic[c(62, 830), c(1, 3, 10)]
titanic %>% group_by(Embarked, Pclass) %>% filter(Pclass == ""1"") %>% summarise(mfare = median(Fare), n = n())
embark_fare <- titanic %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
titanic$Embarked[c(62, 830)] <- ""C""
titanic[(which(is.na(titanic$Fare))), 1]
titanic[1044, c(3, 12)]
titanic[1044, ]
titanic %>% filter(Pclass == ""3"" & Embarked == ""S"") %>% summarise(missing_fare = median(Fare, na.rm = TRUE))
ggplot(titanic[titanic$Pclass == ""3"" & titanic$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
titanic$Fare[1044] <- 8.05
titanic$Fare[1044] <- median(titanic[titanic$Pclass == ""3"" & titanic$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(titanic$Age))
set.seed(129)
mice_mod <- mice(titanic[, !names(titanic) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(titanic$Age, freq = F, main = ""Age: Original Data"", col = ""darkred"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
titanic$Age <- mice_output$Age
sum(is.na(titanic$Age))
ggplot(titanic[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
titanic$Child[titanic$Age < 18] <- ""Child""
titanic$Child[titanic$Age >= 18] <- ""Adult""
table(titanic$Child, titanic$Survived)
titanic$Mother <- ""Not Mother""
titanic$Mother[titanic$Sex == ""female"" & titanic$Parch > 0 & titanic$Age > 18 & titanic$title != ""Miss""] <- ""Mother""
table(titanic$Mother, titanic$Survived)
titanic$Child <- factor(titanic$Child)
titanic$Mother <- factor(titanic$Mother)
titanic$Pclass <- factor(titanic$Pclass)
titanic$Sex <- factor(titanic$Sex)
titanic$Embarked <- factor(titanic$Embarked)
titanic$Survived <- factor(titanic$Survived)
titanic$title <- factor(titanic$title)
titanic$fsizeD <- factor(titanic$fsizeD)
train <- titanic[1:891, ]
test <- titanic[892:1309, ]
set.seed(754)
titanic_model <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + title + fsizeD + Child + Mother, data = train)
plot(titanic_model, ylim = c(0, 0.36))
legend(""topright"", colnames(titanic_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(titanic_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(titanic_model, test)
Output <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(Output, file = ""pradeep_titanic_output.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
153,thilakshasilva-predicting-titanic-survival-using-five-algorithms,0.737,"['filter', 'plot', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'missmap', 'as.data.frame', 'c', 'cbind', 'colnames', 'colSums', 'data.frame', 'factor', 'gsub', 'ifelse', 'is.na', 'lapply', 'length', 'library', 'list', 'matrix', 'mean', 'names', 'nrow', 'order', 'paste', 'return', 'round', 'row.names', 'sapply', 'scale', 'seq', 'set.seed', 'subset', 'sum', 'summary', 'table', 'unlist', 'which', 'durbinWatsonTest', 'vif', 'createMultiFolds', 'train', 'trainControl', 'sample.split', 'bind_rows', 'select', 'naiveBayes', 'svm', 'tune', 'aes', 'element_text', 'facet_wrap', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_hline', 'geom_line', 'geom_point', 'geom_violin', 'geom_vline', 'ggplot', 'ggtitle', 'scale_fill_brewer', 'scale_fill_manual', 'scale_y_continuous', 'theme', 'theme_bw', 'xlab', 'ylab', 'abline', 'mosaicplot', 'importance', 'randomForest', 'performance', 'prediction', 'rpart', 'rpart.plot', 'binomial', 'chisq.test', 'cor', 'glm', 'median', 'predict', 'reorder', 'step', 'var', 'head', 'read.csv', 'str', 'write.csv']","['dplyr', 'Amelia', 'ggplot2', 'scales', 'caTools', 'car', 'ROCR', 'e1071', 'rpart', 'rpart.plot', 'randomForest', 'caret', 'base']",1.1127995173136398,"['theme', 'names', 'mosaicplot', 'set.seed', 'gsub', 'scale_fill_manual', 'length', 'read.csv', 'binomial', 'table', 'row.names', 'paste', 'reorder', 'sum', 'geom_violin', 'var', 'ggtitle', 'rpart.plot', 'library', 'geom_line', 'unlist', 'is.na', 'subset', 'colSums', 'vif', 'geom_boxplot', 'filter', 'missmap', 'colnames', 'performance', 'as.data.frame', 'aes', 'geom_point', 'predict', 'write.csv', 'durbinWatsonTest', 'data.frame', 'ggplot', 'head', 'prediction', 'cbind', 'select', 'step', 'mean', 'createMultiFolds', 'scale_fill_brewer', 'element_text', 'which', 'cor', 'naiveBayes', 'str', 'matrix', 'geom_bar', 'return', 'scale', 'scale_y_continuous', 'train', 'ylab', 'geom_vline', 'plot', 'bind_rows', 'user defined', 'trainControl', 'tune', 'abline', 'sample.split', 'nrow', 'list', 'facet_wrap', 'median', 'lapply', 'svm', 'glm', 'rpart', 'summary', 'round', 'sapply', 'importance', 'geom_hline', 'xlab', 'factor', 'theme_bw', 'randomForest', 'chisq.test', 'c', 'ifelse', 'order', 'seq', 'geom_density']",['piyushjhamb-predicting-titanic-survival'],"['lokesharun-titanic', 'pradeeptripathi-prediction-of-titanic-survival-using-random-forest', 'pradeeptripathi-prediction-of-titanic-survival-using-r', 'paulbisto-r-titanic-script-practice', 'predact-easy-r-titanic-predictive-model', 'utkarsh1997-kaggle-titanic-rf', 'suraj915-titanic-suraj', 'mailakshdeep-titanic-survival-prediction-r', 'pavani2018-titanicr-random-forests', 'acrespop-titanic1']","[0.5988588554873884, 0.5856666672521316, 0.5855632225727123, 0.5829123937538622, 0.5761723299341156, 0.5696673768122609, 0.555555956105441, 0.5480432065647743, 0.5382197339798097, 0.5314739451554275]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'c(""package:ROCR"", ""package:graphics"")': ['plot'], 'character(0)': ['impute.age'], 'package:Amelia': ['missmap'], 'package:base': ['as.data.frame', 'c', 'cbind', 'colnames', 'colSums', 'data.frame', 'factor', 'gsub', 'ifelse', 'is.na', 'lapply', 'length', 'library', 'list', 'matrix', 'mean', 'names', 'nrow', 'order', 'paste', 'return', 'round', 'row.names', 'sapply', 'scale', 'seq', 'set.seed', 'subset', 'sum', 'summary', 'table', 'unlist', 'which'], 'package:car': ['durbinWatsonTest', 'vif'], 'package:caret': ['createMultiFolds', 'train', 'trainControl'], 'package:caTools': ['sample.split'], 'package:dplyr': ['bind_rows', 'select'], 'package:e1071': ['naiveBayes', 'svm', 'tune'], 'package:ggplot2': ['aes', 'element_text', 'facet_wrap', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_hline', 'geom_line', 'geom_point', 'geom_violin', 'geom_vline', 'ggplot', 'ggtitle', 'scale_fill_brewer', 'scale_fill_manual', 'scale_y_continuous', 'theme', 'theme_bw', 'xlab', 'ylab'], 'package:graphics': ['abline', 'mosaicplot'], 'package:randomForest': ['importance', 'randomForest'], 'package:ROCR': ['performance', 'prediction'], 'package:rpart': ['rpart'], 'package:rpart.plot': ['rpart.plot'], 'package:stats': ['binomial', 'chisq.test', 'cor', 'glm', 'median', 'predict', 'reorder', 'step', 'var'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""c(""package:ROCR"", ""package:graphics"")"": [""plot""], ""character(0)"": [""impute.age""], ""package:Amelia"": [""missmap""], ""package:base"": [""as.data.frame"", ""c"", ""cbind"", ""colnames"", ""colSums"", ""data.frame"", ""factor"", ""gsub"", ""ifelse"", ""is.na"", ""lapply"", ""length"", ""library"", ""list"", ""matrix"", ""mean"", ""names"", ""nrow"", ""order"", ""paste"", ""return"", ""round"", ""row.names"", ""sapply"", ""scale"", ""seq"", ""set.seed"", ""subset"", ""sum"", ""summary"", ""table"", ""unlist"", ""which""], ""package:car"": [""durbinWatsonTest"", ""vif""], ""package:caret"": [""createMultiFolds"", ""train"", ""trainControl""], ""package:caTools"": [""sample.split""], ""package:dplyr"": [""bind_rows"", ""select""], ""package:e1071"": [""naiveBayes"", ""svm"", ""tune""], ""package:ggplot2"": [""aes"", ""element_text"", ""facet_wrap"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_hline"", ""geom_line"", ""geom_point"", ""geom_violin"", ""geom_vline"", ""ggplot"", ""ggtitle"", ""scale_fill_brewer"", ""scale_fill_manual"", ""scale_y_continuous"", ""theme"", ""theme_bw"", ""xlab"", ""ylab""], ""package:graphics"": [""abline"", ""mosaicplot""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:ROCR"": [""performance"", ""prediction""], ""package:rpart"": [""rpart""], ""package:rpart.plot"": [""rpart.plot""], ""package:stats"": [""binomial"", ""chisq.test"", ""cor"", ""glm"", ""median"", ""predict"", ""reorder"", ""step"", ""var""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter cpackageROCR packagegraphics plot character0 imputeage packageAmelia missmap packagebase asdataframe c cbind colnames colSums dataframe factor gsub ifelse isna lapply length library list matrix mean names nrow order paste return round rownames sapply scale seq setseed subset sum summary table unlist which packagecar durbinWatsonTest vif packagecaret createMultiFolds train trainControl packagecaTools samplesplit packagedplyr bindrows select packagee1071 naiveBayes svm tune packageggplot2 aes elementtext facetwrap geombar geomboxplot geomdensity geomhline geomline geompoint geomviolin geomvline ggplot ggtitle scalefillbrewer scalefillmanual scaleycontinuous theme themebw xlab ylab packagegraphics abline mosaicplot packagerandomForest importance randomForest packageROCR performance prediction packagerpart rpart packagerpartplot rpartplot packagestats binomial chisqtest cor glm median predict reorder step var packageutils head readcsv str writecsv,"library(dplyr)
library(Amelia)
library(ggplot2)
library(scales)
library(caTools)
library(car)
library(ROCR)
library(e1071)
library(rpart)
library(rpart.plot)
library(randomForest)
library(caret)
titanic_train = read.csv(""../input/train.csv"")
titanic_test = read.csv(""../input/test.csv"")
titanic <- bind_rows(titanic_train, titanic_test)
str(titanic)
colSums(is.na(titanic) | titanic == """")
missmap(titanic, main = ""Titanic Data - Missings Map"", col = c(""yellow"", ""black""), legend = FALSE)
filter(titanic, is.na(Fare) == TRUE | Fare == """")
ggplot(filter(titanic, Pclass == 3 & Embarked == ""S""), aes(Fare)) + geom_density(fill = ""blue"", alpha = 0.5) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""darkblue"", linetype = ""dashed"", size = 2) + geom_vline(aes(xintercept = mean(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", size = 2) + ggtitle(""Fare distribution of third class passengers \n embarked from Southampton port"") + theme_bw() + theme(plot.title = element_text(hjust = 0.5))
titanic$Fare[is.na(titanic$Fare) == TRUE] = median(filter(titanic, Pclass == 3 & Embarked == ""S"")$Fare, na.rm = TRUE)
colSums(is.na(titanic) | titanic == """")
filter(titanic, is.na(Embarked) == TRUE | Embarked == """")
table(filter(titanic, Pclass == 1)$Embarked)
ggplot(filter(titanic, is.na(Embarked) == FALSE & Embarked != """" & Pclass == 1), aes(Embarked, Fare)) + geom_boxplot(aes(colour = Embarked)) + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", size = 2) + ggtitle(""Fare distribution of first class passengers"") + theme_bw() + theme(plot.title = element_text(hjust = 0.5))
titanic$Embarked[titanic$Embarked == """"] = ""C""
colSums(is.na(titanic) | titanic == """")
ggplot(titanic, aes(Pclass, Age)) + geom_boxplot(aes(fill = factor(Pclass)), alpha = 0.5) + ggtitle(""Age distribution based on Pclass"")
impute.age <- function(age, class) {
    vector <- age
    for (i in 1:length(age)) {
        if (is.na(age[i])) {
            if (class[i] == 1) {
                vector[i] <- round(mean(filter(titanic, Pclass == 1)$Age, na.rm = TRUE), 0)
            }
            else if (class[i] == 2) {
                vector[i] <- round(mean(filter(titanic, Pclass == 2)$Age, na.rm = TRUE), 0)
            }
            else {
                vector[i] <- round(mean(filter(titanic, Pclass == 3)$Age, na.rm = TRUE), 0)
            }
        }
        else {
            vector[i] <- age[i]
        }
    }
    return(vector)
}
imputed.age <- impute.age(titanic$Age, titanic$Pclass)
titanic$Age <- imputed.age
colSums(is.na(titanic) | titanic == """")
head(titanic$Name)
titanic$Title <- gsub(""^.*, (.*?)\\..*$"", ""\\1"", titanic$Name)
table(titanic$Sex, titanic$Title)
titanic$Title[titanic$Title == ""Mlle"" | titanic$Title == ""Ms""] <- ""Miss""
titanic$Title[titanic$Title == ""Mme""] <- ""Mrs""
Other <- c(""Dona"", ""Dr"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Jonkheer"", ""Major"", ""Rev"", ""Sir"")
titanic$Title[titanic$Title %in% Other] <- ""Other""
table(titanic$Sex, titanic$Title)
FamilySize <- titanic$SibSp + titanic$Parch + 1
table(FamilySize)
titanic$FamilySize <- sapply(1:nrow(titanic), function(x) ifelse(FamilySize[x] == 1, ""Single"", ifelse(FamilySize[x] > 4, ""Large"", ""Small"")))
table(titanic$FamilySize)
titanic$Survived = factor(titanic$Survived)
titanic$Pclass = factor(titanic$Pclass)
titanic$Sex = factor(titanic$Sex)
titanic$Embarked = factor(titanic$Embarked)
titanic$Title = factor(titanic$Title)
titanic$FamilySize = factor(titanic$FamilySize, levels = c(""Single"", ""Small"", ""Large""))
str(titanic)
ggplot(filter(titanic, is.na(Survived) == FALSE), aes(Pclass, fill = Survived)) + geom_bar(aes(y = (..count..)/sum(..count..)), alpha = 0.9, position = ""dodge"") + scale_fill_brewer(palette = ""Dark2"", direction = -1) + scale_y_continuous(labels = percent, breaks = seq(0, 0.6, 0.05)) + ylab(""Percentage"") + ggtitle(""Survival Rate based on Pclass"") + theme_bw() + theme(plot.title = element_text(hjust = 0.5))
ggplot(filter(titanic, is.na(Survived) == FALSE), aes(Sex, fill = Survived)) + geom_bar(aes(y = (..count..)/sum(..count..)), alpha = 0.9) + facet_wrap(~Pclass) + scale_fill_brewer(palette = ""Dark2"", direction = -1) + scale_y_continuous(labels = percent, breaks = seq(0, 0.4, 0.05)) + ylab(""Percentage"") + ggtitle(""Survival Rate based on Pclass and Sex"") + theme_bw() + theme(plot.title = element_text(hjust = 0.5)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(filter(titanic, is.na(Survived) == FALSE), aes(Pclass, Age)) + geom_violin(aes(fill = Survived), alpha = 0.9) + facet_wrap(~Survived) + scale_fill_brewer(palette = ""Dark2"", direction = -1) + ggtitle(""Survival Rate based on Pclass and Age"") + theme_bw() + theme(plot.title = element_text(hjust = 0.5))
mosaicplot(~Title + Survived, data = titanic, main = ""Survival Rate based on Title"", shade = TRUE)
ggplot(filter(titanic, is.na(Survived) == FALSE), aes(Title)) + geom_bar(aes(fill = Survived), alpha = 0.9, position = ""fill"") + facet_wrap(~Pclass) + scale_fill_brewer(palette = ""Set1"") + scale_y_continuous(labels = percent, breaks = seq(0, 1, 0.1)) + ylab(""Percentage"") + ggtitle(""Survival Rate based on Pclass and Title"") + theme_bw() + theme(plot.title = element_text(hjust = 0.5)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
mosaicplot(~FamilySize + Survived, data = titanic, main = ""Survival Rate based on FamilySize"", shade = TRUE)
ggplot(filter(titanic, is.na(Survived) == FALSE), aes(Title)) + geom_bar(aes(fill = Survived), alpha = 0.9, position = ""fill"") + facet_wrap(~FamilySize) + scale_fill_brewer(palette = ""Set1"") + scale_y_continuous(labels = percent, breaks = seq(0, 1, 0.1)) + ylab(""Percentage"") + ggtitle(""Survival Rate based on FamilySize and Title"") + theme_bw() + theme(plot.title = element_text(hjust = 0.5)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(filter(titanic, is.na(Survived) == FALSE), aes(Embarked, Fare)) + geom_boxplot(aes(fill = Survived), alpha = 0.9) + facet_wrap(~Survived) + scale_fill_manual(values = c(""#56B4E9"", ""#CC79A7"")) + ggtitle(""Survival Rate based on Embarked and Fare"") + theme_bw() + theme(plot.title = element_text(hjust = 0.5))
train_original <- titanic[1:891, c(""Survived"", ""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked"", ""Title"", ""FamilySize"")]
test_original <- titanic[892:1309, c(""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked"", ""Title"", ""FamilySize"")]
set.seed(789)
split = sample.split(train_original$Survived, SplitRatio = 0.8)
train = subset(train_original, split == TRUE)
test = subset(train_original, split == FALSE)
cor(train[, unlist(lapply(train, is.numeric))])
ps = chisq.test(train$Pclass, train$Sex)$p.value
pe = chisq.test(train$Pclass, train$Embarked)$p.value
pt = chisq.test(train$Pclass, train$Title)$p.value
pf = chisq.test(train$Pclass, train$FamilySize)$p.value
se = chisq.test(train$Sex, train$Embarked)$p.value
st = chisq.test(train$Sex, train$Title)$p.value
sf = chisq.test(train$Sex, train$FamilySize)$p.value
et = chisq.test(train$Embarked, train$Title)$p.value
ef = chisq.test(train$Embarked, train$FamilySize)$p.value
tf = chisq.test(train$Title, train$FamilySize)$p.value
cormatrix = matrix(c(0, ps, pe, pt, pf, ps, 0, se, st, sf, pe, se, 0, et, ef, pt, st, et, 0, tf, pf, sf, ef, tf, 0), 5, 5, byrow = TRUE)
row.names(cormatrix) = colnames(cormatrix) = c(""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""FamilySize"")
cormatrix
classifier = glm(Survived ~ ., family = binomial(link = ""logit""), data = train)
classifier <- step(classifier)
summary(classifier)
vif(classifier)
classifier = glm(Survived ~ . - Sex, family = binomial(link = ""logit""), data = train)
classifier <- step(classifier)
summary(classifier)
vif(classifier)
durbinWatsonTest(classifier)
prob_pred = predict(classifier, type = ""response"", newdata = test)
y_pred = ifelse(prob_pred > 0.5, 1, 0)
table(test$Survived, y_pred > 0.5)
error <- mean(test$Survived != y_pred)
paste(""Accuracy"", round(1 - error, 4))
fitpred = prediction(prob_pred, test$Survived)
fitperf = performance(fitpred, ""tpr"", ""fpr"")
plot(fitperf, col = ""green"", lwd = 2, main = ""ROC Curve"")
abline(a = 0, b = 1, lwd = 2, lty = 2, col = ""gray"")
paste(""Age variance: "", var(train$Age), "", SibSp variance: "", var(train$SibSp), "", Parch variance: "", var(train$Parch), "", Fare variance: "", var(train$Fare))
standardized.train = cbind(select(train, Survived, Pclass, Sex, SibSp, Parch, Embarked, Title, FamilySize), Age = scale(train$Age), Fare = scale(train$Fare))
paste(""Age variance: "", var(standardized.train$Age), "", Fare variance: "", var(standardized.train$Fare))
standardized.test = cbind(select(test, Survived, Pclass, Sex, SibSp, Parch, Embarked, Title, FamilySize), Age = scale(test$Age), Fare = scale(test$Fare))
paste(""Age variance: "", var(standardized.test$Age), "", Fare variance: "", var(standardized.test$Fare))
classifier = svm(Survived ~ ., data = standardized.train, type = ""C-classification"", kernel = ""linear"")
y_pred = predict(classifier, newdata = standardized.test[, -which(names(standardized.test) == ""Survived"")])
table(test$Survived, y_pred)
error <- mean(test$Survived != y_pred)
paste(""Accuracy"", round(1 - error, 4))
classifier = svm(Survived ~ ., data = standardized.train, type = ""C-classification"", kernel = ""radial"")
y_pred = predict(classifier, newdata = standardized.test[, -which(names(standardized.test) == ""Survived"")])
table(test$Survived, y_pred)
error <- mean(test$Survived != y_pred)
paste(""Accuracy"", round(1 - error, 4))
tune.results <- tune(svm, Survived ~ ., data = standardized.train, kernel = ""radial"", ranges = list(cost = 2^(-2:2), gamma = 2^(-6:-2)))
summary(tune.results)
classifier = svm(Survived ~ ., data = standardized.train, type = ""C-classification"", kernel = ""radial"", cost = 4, gamma = 0.125)
y_pred = predict(classifier, newdata = standardized.test[, -which(names(standardized.test) == ""Survived"")])
table(test$Survived, y_pred)
error <- mean(test$Survived != y_pred)
paste(""Accuracy"", round(1 - error, 4))
classifier = rpart(Survived ~ ., data = train, method = ""class"")
rpart.plot(classifier, extra = 4)
y_pred = predict(classifier, newdata = test[, -which(names(test) == ""Survived"")], type = ""class"")
table(test$Survived, y_pred)
error <- mean(test$Survived != y_pred)
paste(""Accuracy"", round(1 - error, 4))
set.seed(789)
folds = createMultiFolds(train$Survived, k = 10, times = 5)
control <- trainControl(method = ""repeatedcv"", index = folds)
classifier_cv <- train(Survived ~ ., data = train, method = ""rpart"", trControl = control)
rpart.plot(classifier_cv$finalModel, extra = 4)
y_pred = predict(classifier_cv, newdata = test[, -which(names(test) == ""Survived"")])
table(test$Survived, y_pred)
error <- mean(test$Survived != y_pred)
paste(""Accuracy"", round(1 - error, 4))
set.seed(432)
classifier = randomForest(Survived ~ ., data = train)
plot(classifier)
y_pred = predict(classifier, newdata = test[, -which(names(test) == ""Survived"")])
table(test$Survived, y_pred)
error <- mean(test$Survived != y_pred)
paste(""Accuracy"", round(1 - error, 4))
set.seed(651)
folds = createMultiFolds(train$Survived, k = 10)
control <- trainControl(method = ""repeatedcv"", index = folds)
classifier_cv <- train(Survived ~ ., data = train, method = ""rf"", trControl = control)
y_pred = predict(classifier_cv, newdata = test[, -which(names(test) == ""Survived"")])
table(test$Survived, y_pred)
error <- mean(test$Survived != y_pred)
paste(""Accuracy"", round(1 - error, 4))
gini = as.data.frame(importance(classifier))
gini = data.frame(Feature = row.names(gini), MeanGini = round(gini[, ""MeanDecreaseGini""], 2))
gini = gini[order(-gini[, ""MeanGini""]), ]
ggplot(gini, aes(reorder(Feature, MeanGini), MeanGini, group = 1)) + geom_point(color = ""red"", shape = 17, size = 2) + geom_line(color = ""blue"", size = 1) + scale_y_continuous(breaks = seq(0, 60, 10)) + xlab(""Feature"") + ggtitle(""Mean Gini Index of Features"") + theme_bw() + theme(plot.title = element_text(hjust = 0.5)) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
classifier = naiveBayes(Survived ~ ., data = train)
y_pred = predict(classifier, newdata = test[, -which(names(test) == ""Survived"")])
table(test$Survived, y_pred)
error <- mean(test$Survived != y_pred)
paste(""Accuracy"", round(1 - error, 4))
y_pred = predict(classifier, newdata = test_original)
results <- data.frame(PassengerID = titanic[892:1309, ""PassengerId""], Survived = y_pred)
write.csv(results, file = ""PredictingTitanicSurvival.csv"", row.names = FALSE, quote = FALSE)",1,0,1,0,0,0,0,1,0,1,0,1,0,1
155,lukeschmerold-exploring-survival-on-the-titanic,0.746,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",24.1912050247192,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['mira5b-exploring-survival-on-the-titanic', 'mohankanni-exploring-survival-on-the-titanic', 'kyanyoga-exploring-survival-on-the-titanic', 'rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic']","[0.9868580213847312, 0.986564876296533, 0.9865310688205866, 0.9865219238782598, 0.9865219238782598, 0.9865219238782598, 0.9865219238782598, 0.9865219238782598, 0.9865219238782598, 0.9865219238782598]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$FlMiss <- factor(full$Title == ""Miss"")
full$FlMrs <- factor(full$Title == ""Mrs"")
full$FlMr <- factor(full$Title == ""Mr"")
full$FlMaster <- factor(full$Title == ""Master"")
full$FlOther <- factor(full$Title == ""Rare Title"")
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother + FlMiss + FlMrs + FlMr + FlMaster + FlOther, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
156,turntrout-titanic-data-exploration,0.763,"['as.factor', 'colSums', 'data.frame', 'is.na', 'library', 'rbind', 'sapply', 'set.seed', 'which', 'setDT', 'randomForest', 'rpart', 'predict', 'head', 'read.csv', 'write.csv']","['randomForest', 'dplyr', 'corrplot', 'data.table', 'rpart', 'base']",0.976874113082886,"['rbind', 'setDT', 'predict', 'write.csv', 'data.frame', 'set.seed', 'read.csv', 'randomForest', 'as.factor', 'which', 'library', 'rpart', 'sapply', 'head', 'is.na', 'colSums']",[],"['lucasantevere-hello-titanic', 'rafaelmdourado-hello-titanic-programmers', 'woliveira-hello-titanic', 'lich070192-titanic-test', 'rajasekara-titanic-survival-prediction', 'allanwbrooks-exploring-survival-on-the-titanic', 'chuckivan-titanic-logit', 'krupan-exploring-survival-on-the-titanic', 'chuanhuiliu-one-solution-to-titanic-survival-analysis', 'tetyama-trial-titanic']","[0.5389517780614765, 0.538614726704045, 0.5383474718464566, 0.5332830099364824, 0.5198846794542835, 0.519619564737617, 0.5122189989092074, 0.5119411483970648, 0.5113604184309308, 0.5106571975835479]","{'package:base': ['as.factor', 'colSums', 'data.frame', 'is.na', 'library', 'rbind', 'sapply', 'set.seed', 'which'], 'package:data.table': ['setDT'], 'package:randomForest': ['randomForest'], 'package:rpart': ['rpart'], 'package:stats': ['predict'], 'package:utils': ['head', 'read.csv', 'write.csv']}","{""package:base"": [""as.factor"", ""colSums"", ""data.frame"", ""is.na"", ""library"", ""rbind"", ""sapply"", ""set.seed"", ""which""], ""package:data.table"": [""setDT""], ""package:randomForest"": [""randomForest""], ""package:rpart"": [""rpart""], ""package:stats"": [""predict""], ""package:utils"": [""head"", ""read.csv"", ""write.csv""]}",packagebase asfactor colSums dataframe isna library rbind sapply setseed which packagedatatable setDT packagerandomForest randomForest packagerpart rpart packagestats predict packageutils head readcsv writecsv,"library(randomForest)
library(dplyr)
library(corrplot)
library(data.table)
library(rpart)
train <- read.csv(""../input/train.csv"")
setDT(train)
train$IsTrain <- TRUE
test <- read.csv(""../input/test.csv"")
setDT(test)
test$IsTrain <- FALSE
test$Survived <- NA
full <- rbind(train, test)
head(full$Fare)
full$Fare[which(is.na(full$Fare))] <- full$Pclass <- as.factor(full$Pclass)
full$Embarked <- as.factor(full$Embarked)
full$Sex <- as.factor(full$Sex)
train <- full[full$IsTrain == TRUE, ]
test <- full[full$IsTrain == FALSE, ]
train$Survived <- as.factor(train$Survived)
predicted_age_train <- rpart(Age ~ Survived + Sex + SibSp + Pclass + Parch + Ticket + Fare + Embarked, data = train[!is.na(train$Age), ], method = ""anova"")
train$Age[is.na(train$Age)] <- predict(predicted_age_train, train[is.na(train$Age), ])
predicted_age_test <- rpart(Age ~ Sex + SibSp + Pclass + Parch + Ticket + Fare + Embarked, data = test[!is.na(test$Age), ], method = ""anova"")
test$Age[is.na(test$Age)] <- predict(predicted_age_test, test[is.na(test$Age), ])
model <- randomForest(Survived ~ Age + Sex + SibSp + Pclass + Parch + Fare + Embarked, data = train, importance = TRUE, ntree = 300, set.seed(111))
predictions <- predict(model, test)
colSums(sapply(test, is.na))
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = predictions)
write.csv(my_solution, file = ""my_solution.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
157,rahul169-titanic-prediction,0.129,"['as.factor', 'cbind', 'colSums', 'factor', 'is.na', 'library', 'mean', 'aes', 'facet_grid', 'geom_bar', 'geom_jitter', 'ggplot', 'randomForest', 'varImpPlot', 'predict', 'read.csv', 'write.csv']","['ggplot2', 'randomForest', 'base']",1.92123985290527,"['factor', 'varImpPlot', 'predict', 'write.csv', 'mean', 'geom_bar', 'ggplot', 'read.csv', 'randomForest', 'as.factor', 'geom_jitter', 'library', 'cbind', 'aes', 'is.na', 'facet_grid', 'colSums']",[],"['paulbisto-r-titanic-script-practice', 'pradeeptripathi-prediction-of-titanic-survival-using-r', 'pradeeptripathi-prediction-of-titanic-survival-using-random-forest', 'predact-easy-r-titanic-predictive-model', 'lokesharun-titanic', 'utkarsh1997-kaggle-titanic-rf', 'suraj915-titanic-suraj', 'acrespop-titanic1', 'pavani2018-titanicr-random-forests', 'mailakshdeep-titanic-survival-prediction-r']","[0.7186819656869823, 0.7152472332609054, 0.7151937090015773, 0.7063145563265824, 0.7041798654816636, 0.7019065749563109, 0.6822080378982047, 0.6612453429073009, 0.6424632666857207, 0.641965828900004]","{'package:base': ['as.factor', 'cbind', 'colSums', 'factor', 'is.na', 'library', 'mean'], 'package:ggplot2': ['aes', 'facet_grid', 'geom_bar', 'geom_jitter', 'ggplot'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.factor"", ""cbind"", ""colSums"", ""factor"", ""is.na"", ""library"", ""mean""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""geom_bar"", ""geom_jitter"", ""ggplot""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase asfactor cbind colSums factor isna library mean packageggplot2 aes facetgrid geombar geomjitter ggplot packagerandomForest randomForest varImpPlot packagestats predict packageutils readcsv writecsv,"titanic <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
is.na(titanic)
colSums(is.na(titanic))
mean(titanic$Age, na.rm = T)
titanic$Age[is.na(titanic$Age)] <- 29.7
is.na(test)
colSums(is.na(test))
test$Age[is.na(test$Age)] <- 29.7
test$Fare[is.na(test$Fare)] <- 32.2
titanic$Survived <- as.factor(titanic$Survived)
library(ggplot2)
ggplot(titanic, aes(x = (Age), fill = factor(Survived))) + geom_bar(position = ""dodge"")
ggplot(titanic, aes(x = (Age), fill = (Pclass))) + geom_bar() + facet_grid("".~Survived"")
ggplot(titanic, aes(x = (Pclass), fill = (Sex))) + geom_bar() + facet_grid("".~Survived"")
ggplot(titanic, aes(x = (Embarked), fill = (Sex))) + geom_bar() + facet_grid("".~Survived"")
ggplot(titanic, aes(x = Age, y = Pclass, col = Sex)) + geom_jitter(size = 3) + facet_grid("".~Survived"")
library(randomForest)
tip <- randomForest(Survived ~ Age + Sex + Pclass + Parch + Fare, data = titanic, ntree = 100, importance = TRUE)
tip
varImpPlot(tip)
new_pd1 = predict(tip, test)
new_pd1
PassengerId <- test$PassengerId
Survived <- predict(tip, test)
Survived
prediction <- cbind(PassengerId, Survived)
write.csv(prediction, ""survivallist.csv"")",1,0,0,0,0,0,0,0,0,0,0,0,0,0
158,lisastuart-exploring-survival-on-the-titanic,0.7490000000000001,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'ifelse', 'is.na', 'lapply', 'library', 'names', 'nchar', 'nrow', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'unique', 'which', 'bind_rows', 'dense_rank', 'desc', 'group_by', 'mutate', 'n', 'summarise', 'aes', 'coord_flip', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'par', 'plot', 'complete', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",5.47231793403625,"['summarise', 'labs', 'nrow', 'complete', 'geom_text', 'median', 'lapply', 'nchar', 'which', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'round', 'sapply', 'n', 'hist', 'mice', 'geom_hline', 'desc', 'set.seed', 'gsub', 'importance', 'factor', 'colnames', 'unique', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'group_by', 'row.names', 'c', 'aes', 'scale_y_continuous', 'mutate', 'paste', 'ifelse', 'sum', 'geom_vline', 'legend', 'plot', 'dollar_format', 'predict', 'bind_rows', 'reorder', 'data.frame', 'strsplit', 'ggplot', 'geom_density', 'write.csv', 'library']",[],"['bonesaw98616-exploring-survival-on-the-titanic', 'atuljjoshi05-titanic-random-forest', 'binilkuriachan-titanic-random-forest', 'mira5b-exploring-survival-on-the-titanic', 'rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic']","[0.8793296023801707, 0.8786924316754126, 0.8786924316754126, 0.8778797932031419, 0.8776321749324463, 0.8776321749324463, 0.8776321749324463, 0.8776321749324463, 0.8776321749324463, 0.8776321749324463]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'ifelse', 'is.na', 'lapply', 'library', 'names', 'nchar', 'nrow', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'unique', 'which'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'group_by', 'mutate', 'n', 'summarise'], 'package:ggplot2': ['aes', 'coord_flip', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'par', 'plot'], 'package:mice': ['complete', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""ifelse"", ""is.na"", ""lapply"", ""library"", ""names"", ""nchar"", ""nrow"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table"", ""unique"", ""which""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""group_by"", ""mutate"", ""n"", ""summarise""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""par"", ""plot""], ""package:mice"": [""complete"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub ifelse isna lapply library names nchar nrow paste paste0 round rownames sapply setseed strsplit sum table unique which packagedplyr bindrows denserank desc groupby mutate n summarise packageggplot2 aes coordflip geombar geomboxplot geomdensity geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend par plot packagemice complete mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
str(train)
str(test)
full <- bind_rows(train, test)
str(full)
unique(full$Survived)
sum(is.na(full$PassengerId))
sum(is.na(full$Survived))
sum(is.na(full$Pclass))
sum(is.na(full$Name))
sum(is.na(full$Sex))
sum(is.na(full$Age))
sum(is.na(full$SibSp))
sum(is.na(full$Parch))
sum(is.na(full$Ticket))
sum(is.na(full$Fare))
sum(full$Cabin == """")
sum(full$Embarked == """")
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
full$FamSize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$FamSize, sep = ""_"")
ggplot(full[1:891, ], aes(x = FamSize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
numSurvived = sum(train$Survived)
numDied = nrow(train) - numSurvived
PropSurvived = numSurvived/nrow(train)
PropDied = numDied/nrow(train)
byClass <- group_by(train, Survived, Pclass)
summarise(byClass, train = n())
ggplot(full[1:891, ], aes(x = Pclass, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Class"") + theme_few()
table(train$Survived, train$Sex)
table(train$Embarked, train$Survived)
full$Missing_Age = ifelse(is.na(full$Age), 1, 0)
full$Missing_Cabin = ifelse(full$Cabin == """", 1, 0)
full$NumCharName = nchar(full$Name)
full$NumCharTicket <- nchar(full$Ticket)
full$FirstCharTicket <- factor(sapply(full$Ticket, function(x) strsplit(x, NULL)[[1]][1]))
full$FirstCharCabin <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
which(full$Embarked == """")
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: \n**passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
which(full$Fare == """")
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FirstCharCabin"", ""FirstCharTicket"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"", ""FirstCharCabin"", ""FirstCharTicket"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(1234)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamSize + FirstCharTicket + Missing_Age + Missing_Cabin + NumCharName + NumCharTicket, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
set.seed(1234)
rf_model2 <- randomForest(factor(Survived) ~ Title + Sex + Fare + NumCharName + Age + FirstCharTicket + Pclass + FamSize + NumCharTicket + Missing_Cabin, data = train)
plot(rf_model2, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
set.seed(1234)
rf_model3 <- randomForest(factor(Survived) ~ Title + Sex + Fare + NumCharName + Age, data = train)
plot(rf_model3, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
160,manskj-machine-learning-and-titanic,0.763,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.factor', 'c', 'data.frame', 'gsub', 'ifelse', 'is.na', 'length', 'library', 'paste', 'print', 'rbind', 'return', 'sapply', 'set.seed', 'strsplit', 'substr', 'sum', 'binomial', 'glm', 'median', 'predict', 'read.csv', 'write.csv']","['ggplot2', 'base']",0.626434087753296,"['median', 'is.na', 'glm', 'print', 'as.factor', 'sapply', 'set.seed', 'gsub', 'length', 'read.csv', 'binomial', 'return', 'c', 'rbind', 'paste', 'ifelse', 'sum', 'predict', 'write.csv', 'data.frame', 'strsplit', 'substr', 'user defined', 'library']",[],"['fredman-titanic-barebones-benchmark-r', 'francoisolivier-fork-of-titanic-20', 'johno883-john-orr-titanic-random-forest', 'panda1023-svm-example-for-titanic', 'francoisolivier-titanic-20', 'areebaatif-titanic', 'zhxiangxyang-titanic', 'econdata-machine-learning-on-titanic-dataset', 'yinpatt-patrick-s-titanic', 'diegosiebra-rf-titanic-prediction-th3one']","[0.6490381961627625, 0.6273833570573364, 0.5970126300223187, 0.5967651219021826, 0.5909428597743258, 0.5909428597743258, 0.5909428597743258, 0.5875948341060949, 0.577145816522469, 0.5635396466754626]","{'character(0)': ['extractFeatures', 'extractFeatures2'], 'package:base': ['as.factor', 'c', 'data.frame', 'gsub', 'ifelse', 'is.na', 'length', 'library', 'paste', 'print', 'rbind', 'return', 'sapply', 'set.seed', 'strsplit', 'substr', 'sum'], 'package:stats': ['binomial', 'glm', 'median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""extractFeatures"", ""extractFeatures2""], ""package:base"": [""as.factor"", ""c"", ""data.frame"", ""gsub"", ""ifelse"", ""is.na"", ""length"", ""library"", ""paste"", ""print"", ""rbind"", ""return"", ""sapply"", ""set.seed"", ""strsplit"", ""substr"", ""sum""], ""package:stats"": [""binomial"", ""glm"", ""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 extractFeatures extractFeatures2 packagebase asfactor c dataframe gsub ifelse isna length library paste print rbind return sapply setseed strsplit substr sum packagestats binomial glm median predict packageutils readcsv writecsv,"library(ggplot2)
set.seed(1)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
train$Cat <- ""train""
test$Cat <- ""test""
agemodel <- glm(Age ~ Pclass + Fare + Pclass:Fare, data = train)
train$Age <- ifelse(is.na(train$Age), predict(agemodel, train[is.na(train$Age), ]), train$Age)
test$Age <- ifelse(is.na(test$Age), predict(agemodel, test[is.na(test$Age), ]), test$Age)
train$Fare[is.na(train$Fare)] <- median(train$Fare, na.rm = TRUE)
test$Fare[is.na(test$Fare)] <- median(train$Fare, na.rm = TRUE)
train$Title <- sapply(train$Name, function(x) strsplit(x, ""[.,]"")[[1]][2])
test$Title <- sapply(test$Name, function(x) strsplit(x, ""[.,]"")[[1]][2])
test$Survived <- NA
full <- rbind(train, test)
full$Title <- gsub("" "", """", full$Title)
full$Title[full$Title %in% c(""Capt"", ""Col"", ""Don"", ""Sir"", ""Jonkheer"", ""Major"")] <- ""Mr""
full$Title[full$Title %in% c(""Lady"", ""Ms"", ""theCountess"", ""Mlle"", ""Mme"", ""Ms"", ""Dona"")] <- ""Miss""
full$Cabin <- substr(full$Cabin, 1, 1)
full$Cabin <- as.factor(full$Cabin)
full$Title <- as.factor(full$Title)
train <- full[full$Cat == ""train"", ]
test <- full[full$Cat == ""test"", ]
extractFeatures <- function(data) {
    features <- c(""Survived"", ""Cabin"", ""Title"", ""Pclass"", ""Age"", ""Fare"", ""SibSp"", ""Sex"")
    fea <- data[, features]
    fea$Sex <- as.factor(fea$Sex)
    fea$Survived <- as.factor(fea$Survived)
    return(fea)
}
extractFeatures2 <- function(data) {
    features <- c(""Cabin"", ""Title"", ""Pclass"", ""Age"", ""Fare"", ""SibSp"", ""Sex"")
    fea <- data[, features]
    fea$Sex <- as.factor(fea$Sex)
    fea$Cabin <- as.factor(fea$Cabin)
    fea$Title <- as.factor(fea$Title)
    return(fea)
}
thedata <- extractFeatures(train)
glmout <- glm(Survived ~ Pclass + Sex + SibSp + Cabin + Title + Fare + Pclass:Sex + Age, family = binomial(logit), data = thedata)
trainsubtest <- data.frame(PassengerId = train$PassengerId)
trainsubtest$Survived <- predict(glmout, extractFeatures2(train))
botvalue <- 0.35
trainsubtest$Survived <- ifelse(trainsubtest$Survived > botvalue, 1, 0)
correct <- sum(train$Survived == trainsubtest$Survived)
possible <- length(train$Survived)
print(paste(correct, ""of "", possible, ""running model on training data or "", 100 * correct/possible, "" with "", botvalue))
submission <- data.frame(PassengerId = test$PassengerId)
submission$Survived <- predict(glmout, extractFeatures2(test))
submission$Survived <- ifelse(submission$Survived > botvalue, 1, 0)
write.csv(submission, file = ""1_glm_submission.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,0,0,0,0,0
161,ronchi-project-titanic,0.768,"['filter', 'c', 'data.frame', 'factor', 'is.na', 'library', 'prop.table', 'rbind', 'replace', 'set.seed', 'subset', 'summary', 'table', 'confusionMatrix', 'train', 'trainControl', 'aes', 'facet_grid', 'geom_bar', 'ggplot', 'grid.arrange', 'read_csv', 'median', 'predict', 'read.csv', 'write.csv']","['tidyverse', 'rpart', 'randomForest', 'dplyr', 'ggplot2', 'gridExtra', 'grid', 'caret', 'base']",14.9458470344543,"['median', 'replace', 'subset', 'is.na', 'confusionMatrix', 'prop.table', 'summary', 'filter', 'set.seed', 'factor', 'geom_bar', 'grid.arrange', 'read.csv', 'table', 'read_csv', 'train', 'c', 'aes', 'rbind', 'predict', 'write.csv', 'data.frame', 'ggplot', 'library', 'trainControl', 'facet_grid']",[],"['ronchi-project-titanic', 'erskumars-titanic-survival-eda-and-survival-rate-prediction', 'liudj2008-fork-of-titanic', 'liudj2008-titanic', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'jacekpardyak-mytitanicscript', 'devanshugupta27-predicting-the-titanic-survival-rate', 'jerlinraj-titanic-machine-learning-from-disaster']","[0.9999999999999999, 0.3504519211968821, 0.33175300987567435, 0.33153010930278265, 0.3098456017651586, 0.3098456017651586, 0.3051716253075141, 0.294486111270046, 0.29190483655573224, 0.28891399935630513]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['c', 'data.frame', 'factor', 'is.na', 'library', 'prop.table', 'rbind', 'replace', 'set.seed', 'subset', 'summary', 'table'], 'package:caret': ['confusionMatrix', 'train', 'trainControl'], 'package:ggplot2': ['aes', 'facet_grid', 'geom_bar', 'ggplot'], 'package:gridExtra': ['grid.arrange'], 'package:readr': ['read_csv'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""c"", ""data.frame"", ""factor"", ""is.na"", ""library"", ""prop.table"", ""rbind"", ""replace"", ""set.seed"", ""subset"", ""summary"", ""table""], ""package:caret"": [""confusionMatrix"", ""train"", ""trainControl""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""geom_bar"", ""ggplot""], ""package:gridExtra"": [""grid.arrange""], ""package:readr"": [""read_csv""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase c dataframe factor isna library proptable rbind replace setseed subset summary table packagecaret confusionMatrix train trainControl packageggplot2 aes facetgrid geombar ggplot packagegridExtra gridarrange packagereadr readcsv packagestats median predict packageutils readcsv writecsv,"library(tidyverse)
library(rpart)
library(randomForest)
library(dplyr)
library(ggplot2)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test <- read_csv(""../input/test.csv"")
summary(train)
summary(test)
avg <- median(train$Age, na.rm = TRUE)
train$Age <- replace(train$Age, is.na(train$Age), avg)
avg <- median(test$Age, na.rm = TRUE)
test$Age <- replace(test$Age, is.na(test$Age), avg)
avg <- median(test$Fare, na.rm = TRUE)
test$Fare <- replace(test$Fare, is.na(test$Fare), avg)
library(gridExtra)
library(grid)
subset(train, !(Embarked %in% c(""C"", ""Q"", ""S"")))
train$Embarked[!(train$Embarked %in% c(""C"", ""Q"", ""S""))] <- ""C""
a <- ggplot(train, aes(x = factor(Sex), fill = factor(Survived))) + geom_bar(position = ""dodge"")
b <- ggplot(train, aes(x = factor(Pclass), fill = factor(Survived))) + geom_bar(position = ""dodge"")
c <- ggplot(train, aes(x = factor(Parch), fill = factor(Survived))) + geom_bar(position = ""dodge"")
d <- ggplot(train, aes(x = factor(SibSp), fill = factor(Survived))) + geom_bar(position = ""dodge"")
e <- ggplot(train, aes(x = factor(Embarked), fill = factor(Survived))) + geom_bar(position = ""dodge"")
grid.arrange(a, b, c, d, e, ncol = 2)
ggplot(train, aes(x = factor(Embarked), fill = factor(Survived))) + geom_bar(position = ""dodge"") + facet_grid(Pclass ~ .)
train$AgeGrp[train$Age <= 12] <- ""Kids""
train$AgeGrp[train$Age > 12 & train$Age <= 55] <- ""Adults""
train$AgeGrp[train$Age > 55] <- ""Seniors""
train$AgeGrp <- factor(train$AgeGrp)
prop.table(table(train$AgeGrp)) * 100
train %>% filter(AgeGrp != ""Adults"") %>% ggplot(aes(x = factor(Sex), fill = factor(Survived))) + geom_bar(position = ""dodge"") + facet_grid(AgeGrp ~ Pclass)
train$status <- ""Family""
train$status[train$Parch == 0 & train$SibSp == 0] <- ""Single""
train$status <- factor(train$status)
a <- prop.table(table(train$status)) * 100
b <- table(train$status)
rbind(Pctg = a, Count = b)
train %>% ggplot(aes(x = factor(status), fill = factor(Survived))) + geom_bar(position = ""dodge"") + facet_grid(. ~ Pclass)
library(caret)
train$Survived <- factor(train$Survived)
control <- trainControl(method = ""cv"", number = 10)
metric <- ""Accuracy""
set.seed(7)
fit.rf <- train(Survived ~ Sex + Pclass + AgeGrp + status + Fare, data = train, method = ""rf"", metric = metric, trControl = control)
train$Survived2 <- predict(fit.rf, train)
confusionMatrix(train$Survived2, train$Survived)
test$AgeGrp[test$Age <= 12] <- ""Kids""
test$AgeGrp[test$Age > 12 & test$Age <= 55] <- ""Adults""
test$AgeGrp[test$Age > 55] <- ""Seniors""
test$AgeGrp <- factor(test$AgeGrp)
test$status <- ""Family""
test$status[test$Parch == 0 & test$SibSp == 0] <- ""Single""
test$status <- factor(test$status)
test$status <- factor(test$status)
summary(test)
test$Survived <- predict(fit.rf, test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = ""titanic3.csv"", row.names = FALSE)",1,0,1,0,0,0,0,1,0,1,0,0,0,0
162,djohnbar-fork-of-titanic-rf-w-titles,0.7559999999999999,"['as.factor', 'as.integer', 'as.numeric', 'c', 'colSums', 'data.frame', 'is.na', 'length', 'library', 'list.files', 'mean', 'nrow', 'options', 'table', 'unique', 'which', 'bind_rows', 'randomForest', 'varImpPlot', 'cor', 'glm', 'predict', 'str_extract', 'head', 'read.csv', 'str', 'write.csv']","['tidyverse', 'randomForest', 'base']",1.85882616043091,"['nrow', 'mean', 'which', 'cor', 'is.na', 'glm', 'colSums', 'options', 'as.factor', 'varImpPlot', 'str', 'str_extract', 'as.integer', 'unique', 'length', 'read.csv', 'table', 'randomForest', 'c', 'as.numeric', 'predict', 'write.csv', 'list.files', 'bind_rows', 'data.frame', 'head', 'library']",[],"['djohnbar-titanic-rf', 'maza91-titanic-logistic-regression', 'domini-titanic-data-exploration-and-modelling', 'harsh2-exploring-the-titanic-dataset', 'zahoorahmad-titanic-2nd-degree-families-and-majority-voting', 'ushasri-titanic-2nd-degree-families-and-majority-voting', 'erikbruin-titanic-2nd-degree-families-and-majority-voting', 'ravikrishnareddy-titanic-survival-prediction', 'ablearcher-my-titanic', 'aeintngon-titanic-exploratory-analysis']","[0.9387302548120614, 0.7848760528263978, 0.7313744944266947, 0.7152622321265243, 0.7067280979742279, 0.7067280979742279, 0.7049627792271166, 0.6909517560666182, 0.6828638149933003, 0.6567966337164185]","{'package:base': ['as.factor', 'as.integer', 'as.numeric', 'c', 'colSums', 'data.frame', 'is.na', 'length', 'library', 'list.files', 'mean', 'nrow', 'options', 'table', 'unique', 'which'], 'package:dplyr': ['bind_rows'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:stats': ['cor', 'glm', 'predict'], 'package:stringr': ['str_extract'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""package:base"": [""as.factor"", ""as.integer"", ""as.numeric"", ""c"", ""colSums"", ""data.frame"", ""is.na"", ""length"", ""library"", ""list.files"", ""mean"", ""nrow"", ""options"", ""table"", ""unique"", ""which""], ""package:dplyr"": [""bind_rows""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:stats"": [""cor"", ""glm"", ""predict""], ""package:stringr"": [""str_extract""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",packagebase asfactor asinteger asnumeric c colSums dataframe isna length library listfiles mean nrow options table unique which packagedplyr bindrows packagerandomForest randomForest varImpPlot packagestats cor glm predict packagestringr strextract packageutils head readcsv str writecsv,"library(tidyverse)
library(randomForest)
list.files(path = ""../input"")
t1 <- read.csv(""../input/train.csv"", stringsAsFactors = F)
t2 <- read.csv(""../input/test.csv"", stringsAsFactors = F)
all <- bind_rows(t1, t2)
colSums(is.na(all))
all$Fare[all$Fare == 0] <- NA
all$Fare <- as.numeric(all$Fare)
all$Embarked[all$Embarked == """"] <- ""S""
all$Embarked[all$Embarked == ""C""] <- 0
all$Embarked[all$Embarked == ""Q""] <- 1
all$Embarked[all$Embarked == ""S""] <- 2
all$Embarked <- as.numeric(all$Embarked)
all$Sex[all$Sex == ""female""] <- 1
all$Sex[all$Sex == ""male""] <- 0
all$Sex <- as.numeric(all$Sex)
str(all)
pat <- ""\\,*+\\w+\\.""
titles <- str_extract(all$Name, pattern = pat)
table(titles)
all$titles <- titles
ti <- data.frame(num = 1:length(unique(all$titles)), titel = unique(all$titles))
for (i in 1:nrow(ti)) {
    all$titles[all$titles == ti$titel[i]] <- ti$num[i]
}
all$titles <- as.numeric(all$titles)
cor(all[c(""Fare"", ""Age"", ""SibSp"", ""Parch"", ""Pclass"", ""Sex"", ""Embarked"", ""Survived"", ""titles"")], use = ""c"")
not.missing <- which(!is.na(all[, c(""Fare"", ""Age"")]))
missing.fare <- which(is.na(all[, c(""Fare"")]))
missing.fare
model <- glm(Fare ~ Pclass + Embarked, data = all[not.missing, ])
pred <- predict(model, all[missing.fare, ])
data.frame(pred)
all$Fare[missing.fare] <- pred
not.missing <- which(!is.na(all$Age))
missing <- which(is.na(all$Age))
model <- glm(Age ~ Pclass + Embarked, data = all[not.missing, ])
pred <- predict(model, all[missing, ])
data.frame(pred = head(pred))
all$Age[missing] <- pred
train.val <- as.integer(891 * 0.7)
test.val <- 891 - train.val
all$Survived <- as.factor(all$Survived)
train <- all[1:train.val, ]
test <- all[624:891, ]
model <- randomForest(Survived ~ Sex + Pclass + titles + Fare, data = train)
pred <- predict(model, test)
table(pred = pred, actual = test$Survived)
mean(pred == test$Survived)
model
options(repr.plot.width = 7, repr.plot.height = 5)
varImpPlot(model, sort = T)
pred <- predict(model, all[892:1309, ])
submit <- data.frame(PassengerId = 892:1309, Survived = pred)
write.csv(submit, file = ""RF_submission_t.csv"", row.names = F)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
163,kikishmiki-titanic-passenger-survival-prediction,0.7659999999999999,"['unit', 'user defined', 'user defined', 'user defined', 'missmap', 'as.character', 'as.factor', 'c', 'cbind', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'mean', 'names', 'paste', 'rbind', 'round', 'sapply', 'set.seed', 'strsplit', 'table', 'which', 'aes', 'annotate', 'geom_bar', 'geom_boxplot', 'geom_count', 'geom_dotplot', 'geom_tile', 'geom_violin', 'ggplot', 'labs', 'scale_x_continuous', 'theme_bw', 'theme_few', 'legend', 'plot', 'grid.text', 'randomForest', 'aggregate', 'as.formula', 'median', 'na.omit', 'predict', 'wilcox.test', 'read.csv', 'write.csv']","['Amelia', 'randomForest', 'ggplot2', 'ggthemes', 'gridExtra', 'grid', 'base']",3.3427541255950897,"['labs', 'mean', 'as.formula', 'median', 'annotate', 'which', 'as.character', 'wilcox.test', 'is.na', 'geom_tile', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'grid.text', 'na.omit', 'as.factor', 'sapply', 'round', 'missmap', 'gsub', 'set.seed', 'factor', 'colnames', 'aggregate', 'geom_bar', 'read.csv', 'theme_bw', 'table', 'randomForest', 'c', 'aes', 'rbind', 'paste', 'geom_count', 'plot', 'geom_violin', 'legend', 'predict', 'write.csv', 'data.frame', 'strsplit', 'ggplot', 'geom_dotplot', 'user defined', 'library', 'cbind', 'unit']",[],"['kikishmiki-titanic-passenger-survival-prediction', 'devanshugupta27-predicting-the-titanic-survival-rate', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'paulocressoni-titanic-using-stepwise-linear-regression', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'skhawaja-titanic-disaster-survival-099', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic']","[0.9999999999999999, 0.1564557209228562, 0.11791260452493733, 0.11219017122182197, 0.11025405687698973, 0.11025405687698973, 0.10352111452525002, 0.10352111452525002, 0.10281798748247058, 0.10199084643424418]","{'c(""package:grid"", ""package:ggplot2"")': ['unit'], 'character(0)': ['set'], 'package:Amelia': ['missmap'], 'package:base': ['as.character', 'as.factor', 'c', 'cbind', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'mean', 'names', 'paste', 'rbind', 'round', 'sapply', 'set.seed', 'strsplit', 'table', 'which'], 'package:ggplot2': ['aes', 'annotate', 'geom_bar', 'geom_boxplot', 'geom_count', 'geom_dotplot', 'geom_tile', 'geom_violin', 'ggplot', 'labs', 'scale_x_continuous', 'theme_bw'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['legend', 'plot'], 'package:grid': ['grid.text'], 'package:randomForest': ['randomForest'], 'package:stats': ['aggregate', 'as.formula', 'median', 'na.omit', 'predict', 'wilcox.test'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:grid"", ""package:ggplot2"")"": [""unit""], ""character(0)"": [""set""], ""package:Amelia"": [""missmap""], ""package:base"": [""as.character"", ""as.factor"", ""c"", ""cbind"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""library"", ""mean"", ""names"", ""paste"", ""rbind"", ""round"", ""sapply"", ""set.seed"", ""strsplit"", ""table"", ""which""], ""package:ggplot2"": [""aes"", ""annotate"", ""geom_bar"", ""geom_boxplot"", ""geom_count"", ""geom_dotplot"", ""geom_tile"", ""geom_violin"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""theme_bw""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""legend"", ""plot""], ""package:grid"": [""grid.text""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""aggregate"", ""as.formula"", ""median"", ""na.omit"", ""predict"", ""wilcox.test""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackagegrid packageggplot2 unit character0 set packageAmelia missmap packagebase ascharacter asfactor c cbind colnames dataframe factor gsub isna library mean names paste rbind round sapply setseed strsplit table which packageggplot2 aes annotate geombar geomboxplot geomcount geomdotplot geomtile geomviolin ggplot labs scalexcontinuous themebw packageggthemes themefew packagegraphics legend plot packagegrid gridtext packagerandomForest randomForest packagestats aggregate asformula median naomit predict wilcoxtest packageutils readcsv writecsv,"knitr::opts_chunk$set(echo = TRUE)
library(Amelia)
library(randomForest)
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(grid)
train <- read.csv(""../input/train.csv"", header = TRUE, na.strings = c("""", NA))
test <- read.csv(""../input/test.csv"", header = TRUE, na.strings = c("""", NA))
whole <- rbind(train[, -2], test)
missmap(whole, col = c(""yellow"", ""blue""), main = ""The Titanic Passenger Data"")
ggplot(train, aes(x = as.factor(Survived))) + geom_bar(stat = ""count"", width = 0.5) + labs(title = ""Passenger Fate"", x = ""Survived"", y = ""Count"") + theme_bw()
ggplot(train, aes(x = Sex)) + geom_bar(stat = ""count"", width = 0.5) + labs(title = ""Passenger Sex"", x = ""Sex"", y = ""Count"") + theme_bw()
ggplot(train, aes(x = as.factor(Pclass))) + geom_bar(stat = ""count"", width = 0.5) + labs(title = ""Passenger Class"", x = ""Class"", y = ""Count"") + theme_bw()
ggplot(train, aes(x = Age)) + geom_bar(stat = ""count"") + labs(title = ""Passenger Age"", x = ""Age"", y = ""Count"") + annotate(""text"", x = 70, y = 27.5, label = paste(""median age ="", median(train$Age, na.rm = TRUE))) + theme_bw()
ggplot(whole, aes(x = as.factor(Pclass), y = Age)) + geom_boxplot() + labs(title = ""Passenger Age by Class (whole dataset)"", x = ""Class"", y = ""Age"") + theme_bw()
a <- whole$Age[which(whole$Pclass == 1)]
c <- whole$Age[which(whole$Pclass == 3)]
wt <- wilcox.test(a, c)
footnote <- paste(""1st class ages significantly differs from 3rd (p-value ="", round(wt$p.value, 2), "")"")
grid.text(footnote, x = unit(300, ""native""), y = unit(50, ""native""))
titles = sapply(strsplit(sapply(strsplit(as.character(whole$Name), "",""), function(x) {
    x[2]
}), ""\\.""), ""["", 1)
titles = gsub("" "", """", titles, fixed = TRUE)
table(titles)
titles[which(titles == ""Mme"")] <- ""Mrs""
titles[which(titles == ""Ms"")] <- ""Miss""
titles[which(titles == ""Mlle"")] <- ""Miss""
tab.count <- table(titles)
rare.titles = names(tab.count[which(tab.count <= 2)])
titles[which(titles %in% rare.titles)] <- ""Grand""
whole$Title <- titles
ggplot(whole, aes(x = as.factor(Title), y = Age)) + geom_boxplot() + labs(title = ""Passenger Age by Title (whole dataset)"", x = ""Title"", y = ""Age"") + theme_bw()
mean(whole$Age, na.rm = TRUE)
ind = which(is.na(whole$Age))
table(whole[ind, c(""Title"", ""Pclass"")])
summary.tab = aggregate(Age ~ Title + Pclass, whole, mean)
ggplot(summary.tab, aes(x = as.factor(Title), y = Pclass)) + geom_tile(aes(fill = Age), na.rm = TRUE, stat = ""identity"") + labs(title = ""Passenger Age by Title and Class (whole dataset)"", x = ""Title"", y = ""Class"") + theme_bw()
ind = which(is.na(whole$Age))
for (i in ind) {
    title.i <- whole[i, ""Title""]
    class.i <- whole[i, ""Pclass""]
    age.approx <- round(summary.tab[which(summary.tab$Title == title.i & summary.tab$Pclass == class.i), ""Age""])
    whole[i, ""Age""] <- age.approx
}
summary.tab = aggregate(Fare ~ Pclass + Embarked, whole, mean)
ggplot(summary.tab, aes(x = as.factor(Embarked), y = Pclass)) + geom_tile(aes(fill = Fare), na.rm = TRUE, stat = ""identity"") + labs(title = ""Passenger Fare by Port of Embarkment and Class (whole dataset)"", x = ""Title"", y = ""Class"") + theme_bw()
ind = which(is.na(whole$Fare))
for (i in ind) {
    class.i <- whole[i, ""Pclass""]
    port.i <- whole[i, ""Embarked""]
    fare.approx <- round(summary.tab[which(summary.tab$Pclass == class.i & summary.tab$Embarked == port.i), ""Fare""])
    whole[i, ""Fare""] <- fare.approx
}
summary.tab = table(whole$Embarked, whole$Pclass)
ggplot(whole, aes(x = Pclass, y = Embarked), na.rm = TRUE) + geom_count() + labs(title = ""Passenger Embarkment Port by Class (whole dataset)"", x = ""Class"", y = ""Embarked"") + theme_bw()
ggplot(whole, aes(x = factor(Embarked), y = Fare)) + geom_dotplot(binaxis = ""y"", stackdir = ""center"", binpositions = ""all"", binwidth = 0.8, na.rm = TRUE) + labs(title = ""Passenger Embarkment Fare by Port of Embarkment (whole dataset)"", x = ""Embarked"", y = ""Fare"") + theme_bw()
ggplot(whole, aes(x = factor(Embarked), y = Fare), na.rm = TRUE) + geom_boxplot() + labs(title = ""Passenger Embarkment Fare by Port of Embarkment (whole dataset)"", x = ""Embarked"", y = ""Fare"") + theme_bw()
wilcox.test(whole$Fare[which(whole$Embarked == ""C"")], whole$Fare[which(whole$Embarked == ""S"")])
median(na.omit(whole$Fare[which(whole$Embarked == ""S"")]))
median(na.omit(whole$Fare[which(whole$Embarked == ""C"")]))
ind = which(is.na(whole$Embarked))
for (i in ind) {
    whole[i, ""Embarked""] <- ""S""
}
missmap(whole, col = c(""yellow"", ""blue""), main = ""The Titanic Passenger Data"")
whole$FamilySize <- whole$SibSp + whole$Parch + 1
ind = which(whole$PassengerId %in% train$PassengerId)
temp.data = cbind(Survived = train[, 2], whole[ind, ])
ggplot(temp.data, aes(x = FamilySize, fill = as.factor(Survived))) + geom_bar(position = ""dodge"", stat = ""count"") + scale_x_continuous(breaks = c(1:11)) + labs(title = ""Passenger Fate by Family Size (whole dataset)"") + theme_few()
whole$FamilyCategory[whole$FamilySize == 1] <- ""single""
whole$FamilyCategory[whole$FamilySize == 2] <- ""couple""
whole$FamilyCategory[whole$FamilySize >= 3 & whole$FamilySize <= 5] <- ""small family""
whole$FamilyCategory[whole$FamilySize >= 6] <- ""large family""
ind = which(whole$PassengerId %in% train$PassengerId)
temp.data = cbind(Survived = train[, 2], whole[ind, ])
ggplot(temp.data, aes(x = FamilyCategory, fill = as.factor(Survived))) + geom_bar(position = ""dodge"", stat = ""count"") + labs(title = ""Passenger Fate by Family Size Category (whole dataset)"") + theme_few()
ggplot(temp.data, aes(x = Pclass, fill = as.factor(Survived))) + geom_bar(position = ""dodge"", stat = ""count"") + labs(title = ""Passenger Fate by Class"", x = ""Survived"") + theme_few()
ggplot(temp.data, aes(x = Sex, fill = as.factor(Survived))) + geom_bar(position = ""dodge"", stat = ""count"") + labs(title = ""Passenger Fate by Sex"", x = ""Survived"") + theme_few()
ggplot(temp.data, aes(x = as.factor(Survived), y = Age)) + geom_violin(scale = ""area"") + geom_boxplot(width = 0.1) + labs(title = ""Passenger Fate by Age"", x = ""Survived"") + theme_few()
ggplot(temp.data, aes(x = as.factor(Survived), y = Fare)) + geom_violin(scale = ""area"") + geom_boxplot(width = 0.1) + labs(title = ""Passenger Fate by Fare"", x = ""Survived"") + theme_few()
ind = which(whole$PassengerId %in% train$PassengerId)
train <- cbind(Survived = train$Survived, whole[ind, ])
test <- whole[-ind, ]
set.seed(93549)
model <- randomForest(formula = as.formula(as.factor(Survived) ~ Sex + Pclass + Fare + Embarked + FamilySize), data = train, do.trace = T, ntree = 500, nodesize = 5)
plot(model, ylim = c(0, 0.36))
legend(""topright"", colnames(model$err.rate), col = 1:3, fill = 1:3)
prediction <- predict(model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,0,0,0,0,0,0,0,0,0,0,1
164,aer503-titanic-exploring-survival-and-random-forest-test,0.7509999999999999,"['as.character', 'as.data.frame', 'as.factor', 'as.numeric', 'c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'names', 'paste0', 'round', 'row.names', 'set.seed', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'geom_bar', 'geom_text', 'ggplot', 'labs', 'theme_classic', 'importance', 'randomForest', 'varImpPlot', 'rpart', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['dplyr', 'randomForest', 'rpart', 'ggplot2', 'base']",3.2499020099639906,"['labs', 'geom_text', 'median', 'coord_flip', 'as.character', 'dense_rank', 'is.na', 'names', 'rpart', 'as.factor', 'round', 'varImpPlot', 'importance', 'str', 'desc', 'set.seed', 'gsub', 'factor', 'theme_classic', 'geom_bar', 'read.csv', 'paste0', 'table', 'randomForest', 'as.data.frame', 'row.names', 'c', 'aes', 'mutate', 'as.numeric', 'reorder', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'ggplot', 'library']",[],"['frankfeng-titanic', 'wongalan2002-titanic-with-neural-network', 'juverstraeten-titanic-test-5-decision-tree-w-cabin', 'parthchaudhary-titanic-submission', 'alwortman-titanic-test-script', 'srinivasarajui-srini-s-r-titanic-solution', 'bdcallen-titanic-knn-r', 'paulocressoni-titanic-using-stepwise-linear-regression', 'skhawaja-titanic-disaster-survival-099', 'nithishthirmul-titanic-data-test1']","[0.9268425203762077, 0.9248856674142248, 0.879295097364321, 0.6318564150169572, 0.5985331800915504, 0.5737158560669717, 0.1211790348657784, 0.08520071049278062, 0.07787603279088783, 0.07223276137973264]","{'package:base': ['as.character', 'as.data.frame', 'as.factor', 'as.numeric', 'c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'names', 'paste0', 'round', 'row.names', 'set.seed', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'geom_bar', 'geom_text', 'ggplot', 'labs', 'theme_classic'], 'package:randomForest': ['importance', 'randomForest', 'varImpPlot'], 'package:rpart': ['rpart'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""as.character"", ""as.data.frame"", ""as.factor"", ""as.numeric"", ""c"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""library"", ""names"", ""paste0"", ""round"", ""row.names"", ""set.seed"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""geom_bar"", ""geom_text"", ""ggplot"", ""labs"", ""theme_classic""], ""package:randomForest"": [""importance"", ""randomForest"", ""varImpPlot""], ""package:rpart"": [""rpart""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase ascharacter asdataframe asfactor asnumeric c dataframe factor gsub isna library names paste0 round rownames setseed table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip geombar geomtext ggplot labs themeclassic packagerandomForest importance randomForest varImpPlot packagerpart rpart packagestats median predict reorder packageutils readcsv str writecsv,"library(dplyr)
library(randomForest)
library(rpart)
library(ggplot2)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
set.seed(111)
train$Pclass <- as.numeric(as.character(train$Pclass))
test$Pclass <- as.numeric(as.character(test$Pclass))
all_data <- bind_rows(train, test)
all_data <- as.data.frame(all_data, na.rm = TRUE)
str(all_data)
names(all_data)
ggplot(all_data, aes(x = factor(""Survived""), fill = Sex)) + geom_bar()
is.na(all_data)
is.na(all_data$Fare[1044])
all_data$Fare[1044] <- median(all_data$Fare, na.rm = TRUE)
is.na(all_data$Embarked)
is.na(all_data$Embarked[c(62, 830)])
all_data$Pclass <- as.factor(all_data$Pclass)
all_data$Embarked[c(62, 830)] <- ""S""
all_data$Embarked <- factor(all_data$Embarked)
prediction_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked, data = all_data[!is.na(all_data$Age), ], method = ""anova"")
all_data$Age[is.na(all_data$Age)] <- predict(prediction_age, all_data[is.na(all_data$Age), ])
is.na(all_data$Age[c(1:750)])
is.na(all_data$Age[c(751:1309)])
is.na(all_data[1:300, ])
is.na(all_data[, 1:3])
all_data$Title <- gsub(""(.*, )|(\\..*)"", """", all_data$Name)
table(all_data$Title)
str(all_data)
ggplot(all_data, aes(Title, fill = Title)) + geom_bar()
table(all_data$Sex, all_data$Title)
table(all_data$Sex, all_data$Pclass)
table(all_data$Pclass, all_data$Title)
all_data$Title[all_data$Title == ""Mlle""] <- ""Miss""
all_data$Title[all_data$Title == ""Ms""] <- ""Miss""
all_data$Title[all_data$Title == ""Mme""] <- ""Mrs""
all_data$Title[all_data$Title == ""Dona""] <- ""Mrs""
all_data$Title[all_data$Title == ""Don""] <- ""Mr""
question_status <- c(""Dr"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
all_data$Title[all_data$Title %in% question_status] <- ""question status""
table(all_data$Title, all_data$Sex)
ggplot(all_data, aes(Title, fill = Title)) + geom_bar()
all_data$Married_Woman <- ""Not Married""
all_data$Married_Woman[all_data$Sex == ""female"" & all_data$Title != ""Mrs""] <- ""Married_Woman""
str(all_data)
table(all_data$Sex, all_data$Married_Woman)
all_data$Survived <- as.factor(all_data$Survived)
all_data$Title <- as.factor(all_data$Title)
all_data$Married_Woman <- as.factor(all_data$Married_Woman)
str(all_data)
train_again <- all_data[1:891, ]
test_again <- all_data[892:1309, ]
set.seed(112)
my_forest <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + Married_Woman, data = train_again, importance = TRUE, ntree = 1000)
my_prediction <- predict(my_forest, newdata = test_again)
importance <- importance(my_forest)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
varImpPlot(my_forest)
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_classic()
my_solution <- data.frame(PassengerId = test_again$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = ""my_RF_solution.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
165,quark6-titanic-work,0.754,"['filter', 'as.factor', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nrow', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_x_discrete', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",5.17745900154114,"['labs', 'nrow', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mice', 'geom_hline', 'desc', 'set.seed', 'gsub', 'importance', 'factor', 'colnames', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'scale_x_discrete', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['anthobau-random-forest-titanic', 'caleblau-predicting-survival-on-the-titanic', 'imitation-exploring-survival-on-the-titanic', 'supriya675-titanic-prediction-simplified-for-beginners', 'cganxs-is-62-the-right-titanic-model-threshold', 'skhawaja-titanic-disaster-survival-099', 'lich070192-titanic-test', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'ronchi-project-titanic']","[0.8663706538530083, 0.7604584922301664, 0.7556370963709546, 0.6218703927069075, 0.5549340756750252, 0.10357092056825855, 0.08372664514050385, 0.07307945695440919, 0.07307945695440919, 0.07291929054934082]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nrow', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_x_discrete', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nrow"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_x_discrete"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c colnames dataframe factor gsub isna lapply library names nrow paste paste0 round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scalexdiscrete scaleycontinuous packageggthemes themefew packagegraphics hist legend par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
combined <- bind_rows(train, test)
str(combined)
combined[combined == """"] <- NA
sum(is.na(combined$Sex))
ggplot(combined[1:891, ], aes(x = Sex, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_discrete(breaks = c(""female"", ""male"")) + labs(x = ""Sex"") + theme_few()
sum(is.na(combined$Embarked))
filter(combined, is.na(Embarked))
embark_fare <- combined %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
combined$Embarked[c(62, 830)] <- ""C""
ggplot(combined[1:891, ], aes(x = Embarked, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_discrete(breaks = c(""C"", ""Q"", ""S"")) + labs(x = ""Embarked"") + theme_few()
sum(is.na(combined$Pclass))
ggplot(combined[1:891, ], aes(x = Pclass, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:3)) + labs(x = ""Passenger Class"") + theme_few()
combined$FamSize <- combined$SibSp + combined$Parch + 1
ggplot(combined[1:891, ], aes(x = FamSize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
sum(is.na(combined$Fare))
filter(combined, is.na(Fare))
ggplot(combined[combined$Pclass == ""3"" & combined$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
median(combined[combined$Pclass == ""3"" & combined$Embarked == ""S"", ]$Fare, na.rm = TRUE)
combined$Fare[1044] <- median(combined[combined$Pclass == ""3"" & combined$Embarked == ""S"", ]$Fare, na.rm = TRUE)
ggplot(combined[1:891, ], aes(Fare, fill = factor(Survived))) + geom_histogram(binwidth = 6) + facet_grid(. ~ Sex) + theme_few()
sum(is.na(combined$Age))
combined$Title <- gsub(""(.*, )|(\\..*)"", """", combined$Name)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
combined$Title[combined$Title == ""Mlle""] <- ""Miss""
combined$Title[combined$Title == ""Ms""] <- ""Miss""
combined$Title[combined$Title == ""Mme""] <- ""Mrs""
combined$Title[combined$Title %in% rare_title] <- ""Rare_Title""
table(combined$Sex, combined$Title)
combined$Surname <- sapply(combined$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
combined$Fam <- paste(combined$Surname, combined$FamSize, sep = ""_"")
combined$Fam_SizeD[combined$FamSize == 1] <- ""single""
combined$Fam_SizeD[combined$FamSize < 5 & combined$FamSize > 1] <- ""small""
combined$Fam_SizeD[combined$FamSize > 4] <- ""large""
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Fam"", ""Fam_SizeD"")
combined[factor_vars] <- lapply(combined[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(combined[, !names(combined) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Fam"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(combined$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
combined$Age <- mice_output$Age
sum(is.na(combined$Age))
ggplot(combined[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram(binwidth = 2) + facet_grid(. ~ Sex) + theme_few()
train <- combined[1:891, ]
test <- combined[892:1309, ]
combined$Status[combined$Age < 18] <- ""Child""
combined$Status[combined$Age >= 18] <- ""Adult""
table(combined$Status, combined$Survived)
combined$Mother <- ""Not Mother""
combined$Mother[combined$Sex == ""female"" & combined$Parch > 0 & combined$Age > 18 & combined$Title != ""Miss""] <- ""Mother""
table(combined$Mother, combined$Survived)
combined$Status <- factor(combined$Status)
combined$Mother <- factor(combined$Mother)
md.pattern(combined)
set.seed(1000)
RanFor_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + Fam_SizeD, data = train, ntree = 900, mtry = 6, nodesize = 0.01 * nrow(test))
plot(RanFor_model, ylim = c(0, 0.36))
legend(""bottomleft"", colnames(RanFor_model$err.rate), col = 1:3, fill = 1:3, bty = ""n"", lty = 1:3, cex = 0.8)
importance <- importance(RanFor_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(RanFor_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""RanFor_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
167,mhamano-titanic-r-script,0.7440000000000001,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'system', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'write.csv']","['ggplot2', 'readr', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",23.935464143753094,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'facet_grid', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'write.csv', 'library', 'system']",[],"['birudvora-test-titanic', 'rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic', 'datascikrid-exploring-survival-on-the-titanic', 'anishmayaramka-the-titanic-datset']","[0.9996650413650733, 0.9991971516630641, 0.9991971516630641, 0.9991971516630641, 0.9991971516630641, 0.9991971516630641, 0.9991971516630641, 0.9991971516630641, 0.9991971516630641, 0.9991971516630641]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'system', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""system"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum system table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv writecsv,"library(ggplot2)
library(readr)
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
system(""ls ../input"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
169,nithishthirmul-titanic-data-test1,0.7440000000000001,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.factor', 'c', 'data.frame', 'gsub', 'is.na', 'levels', 'library', 'mean', 'return', 'table', 'randomForest', 'predict', 'read.csv', 'write.csv']","['randomForest', 'base']",0.374399900436401,"['gsub', 'predict', 'write.csv', 'mean', 'data.frame', 'read.csv', 'table', 'as.factor', 'user defined', 'library', 'return', 'randomForest', 'c', 'is.na', 'levels']",[],"['ezhilvelme-titanic-neural-network-c-4-2', 'paulocressoni-titanic-using-stepwise-linear-regression', 'annafreydenzon-titanic-machine-learning-from-disaster', 'liudj2008-fork-of-titanic', 'liudj2008-titanic', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'seajaye-titanic-logistic-regression-0-78947', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'jacekpardyak-mytitanicscript']","[0.5169102339163526, 0.4914360717345071, 0.47603222987483107, 0.4467931733416929, 0.44623050976050016, 0.4285880497498646, 0.4285880497498646, 0.40860190217632114, 0.4025872941255827, 0.3666548056333343]","{'character(0)': ['extractFeatures'], 'package:base': ['as.factor', 'c', 'data.frame', 'gsub', 'is.na', 'levels', 'library', 'mean', 'return', 'table'], 'package:randomForest': ['randomForest'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""extractFeatures""], ""package:base"": [""as.factor"", ""c"", ""data.frame"", ""gsub"", ""is.na"", ""levels"", ""library"", ""mean"", ""return"", ""table""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 extractFeatures packagebase asfactor c dataframe gsub isna levels library mean return table packagerandomForest randomForest packagestats predict packageutils readcsv writecsv,"library(randomForest)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
train$Title <- gsub(""(.*, )|(\\..*)"", """", train$Name)
table(train$Sex, train$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
train$Title[train$Title == ""Mlle""] <- ""Miss""
train$Title[train$Title == ""Ms""] <- ""Miss""
train$Title[train$Title == ""Mme""] <- ""Mrs""
train$Title[train$Title %in% rare_title] <- ""Rare Title""
table(train$Sex, train$Title)
train$Age[is.na(train$Age) & train$Title == ""Mr""] <- mean(train$Age[train$Title == ""Mr""], na.rm = T)
train$Age[is.na(train$Age) & train$Title == ""Miss""] <- mean(train$Age[train$Title == ""Miss""], na.rm = T)
train$Age[is.na(train$Age) & train$Title == ""Mrs""] <- mean(train$Age[train$Title == ""Mrs""], na.rm = T)
train$Age[is.na(train$Age) & train$Title == ""Master""] <- mean(train$Age[train$Title == ""Master""], na.rm = T)
train$Age[is.na(train$Age) & train$Title == ""Rare Title""] <- mean(train$Age[train$Title == ""Rare Title""], na.rm = T)
levels(test$Sex) <- levels(train$Sex)
levels(test$Age) <- levels(train$Age)
levels(test$Embarked) <- levels(train$Embarked)
extractFeatures <- function(data) {
    features <- c(""Sex"", ""Embarked"")
    ftr <- data[, features]
    ftr$Embarked[ftr$Embarked == """"] = ""S""
    ftr$Sex <- as.factor(ftr$Sex)
    ftr$Embarked <- as.factor(ftr$Embarked)
    return(ftr)
}
rf <- randomForest(extractFeatures(train), as.factor(train$Survived), ntree = 100, importance = TRUE)
submission <- data.frame(PassengerId = test$PassengerId)
submission$Survived <- predict(rf, extractFeatures(test))
write.csv(submission, file = ""submission.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
170,beovulfo-titanic-work-for-beginners,0.775,"['filter', 'plot', 'missmap', 'as.factor', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'ifelse', 'is.factor', 'is.na', 'lapply', 'length', 'library', 'mean', 'names', 'paste', 'paste0', 'print', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'subset', 'sum', 'summary', 'table', 'unique', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'complete', 'mice', 'pR2', 'importance', 'randomForest', 'performance', 'prediction', 'dollar_format', 'anova', 'binomial', 'contrasts', 'glm', 'median', 'na.omit', 'predict', 'reorder', 'head', 'install.packages', 'read.csv', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'mice', 'randomForest', 'caret', 'Amelia', 'dplyr', 'pscl', 'ROCR', 'pscl', 'base']",5.64487814903259,"['labs', 'complete', 'mean', 'geom_text', 'median', 'install.packages', 'lapply', 'predict', 'coord_flip', 'dense_rank', 'is.na', 'subset', 'glm', 'names', 'geom_boxplot', 'scale_x_continuous', 'print', 'theme_few', 'contrasts', 'na.omit', 'reorder', 'as.factor', 'summary', 'filter', 'round', 'sapply', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'missmap', 'gsub', 'set.seed', 'factor', 'colnames', 'importance', 'unique', 'geom_bar', 'length', 'read.csv', 'performance', 'paste0', 'table', 'par', 'randomForest', 'binomial', 'scale_y_continuous', 'row.names', 'c', 'is.factor', 'aes', 'mutate', 'anova', 'paste', 'ifelse', 'plot', 'sum', 'geom_vline', 'legend', 'mice', 'pR2', 'bind_rows', 'dollar_format', 'data.frame', 'strsplit', 'ggplot', 'geom_density', 'write.csv', 'head', 'prediction', 'library', 'facet_grid']",[],"['tetyama-trial-titanic', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'bonesaw98616-exploring-survival-on-the-titanic', 'vikramatjob-exploring-survival-on-the-titanic-var1', 'mohankanni-exploring-survival-on-the-titanic', 'kyanyoga-exploring-survival-on-the-titanic', 'mira5b-exploring-survival-on-the-titanic']","[0.7784050746643866, 0.7780360046566878, 0.7776912515531214, 0.7776912515531214, 0.772470101873744, 0.7707449583737237, 0.7696488542399824, 0.7695892826745456, 0.7693750583731145, 0.7693284755951568]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'c(""package:ROCR"", ""package:graphics"")': ['plot'], 'package:Amelia': ['missmap'], 'package:base': ['as.factor', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'ifelse', 'is.factor', 'is.na', 'lapply', 'length', 'library', 'mean', 'names', 'paste', 'paste0', 'print', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'subset', 'sum', 'summary', 'table', 'unique'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par'], 'package:mice': ['complete', 'mice'], 'package:pscl': ['pR2'], 'package:randomForest': ['importance', 'randomForest'], 'package:ROCR': ['performance', 'prediction'], 'package:scales': ['dollar_format'], 'package:stats': ['anova', 'binomial', 'contrasts', 'glm', 'median', 'na.omit', 'predict', 'reorder'], 'package:utils': ['head', 'install.packages', 'read.csv', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""c(""package:ROCR"", ""package:graphics"")"": [""plot""], ""package:Amelia"": [""missmap""], ""package:base"": [""as.factor"", ""c"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""ifelse"", ""is.factor"", ""is.na"", ""lapply"", ""length"", ""library"", ""mean"", ""names"", ""paste"", ""paste0"", ""print"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""subset"", ""sum"", ""summary"", ""table"", ""unique""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par""], ""package:mice"": [""complete"", ""mice""], ""package:pscl"": [""pR2""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:ROCR"": [""performance"", ""prediction""], ""package:scales"": [""dollar_format""], ""package:stats"": [""anova"", ""binomial"", ""contrasts"", ""glm"", ""median"", ""na.omit"", ""predict"", ""reorder""], ""package:utils"": [""head"", ""install.packages"", ""read.csv"", ""write.csv""]}",cpackagedplyr packagestats filter cpackageROCR packagegraphics plot packageAmelia missmap packagebase asfactor c colnames dataframe factor gsub ifelse isfactor isna lapply length library mean names paste paste0 print round rownames sapply setseed strsplit subset sum summary table unique packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par packagemice complete mice packagepscl pR2 packagerandomForest importance randomForest packageROCR performance prediction packagescales dollarformat packagestats anova binomial contrasts glm median naomit predict reorder packageutils head installpackages readcsv writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""mice"")
library(""randomForest"")
library(""caret"")
library(""Amelia"")
library(""dplyr"")
training.data.raw <- read.csv(""../input/train.csv"", header = T, na.strings = c(""""), stringsAsFactors = F)
test.data.raw <- read.csv(""../input/test.csv"", header = T, na.strings = c(""""), stringsAsFactors = F)
full <- bind_rows(training.data.raw, test.data.raw)
sapply(full, function(x) sum(is.na(x)))
missmap(full, main = ""Missing values vs observed"")
head(full)
summary(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Pclass, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
full$Fsize <- full$SibSp + full$Parch + 1
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full[full$PassengerId[is.na(full$Embarked)], ]
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[full$PassengerId[is.na(full$Fare)], ]
mean_mv <- mean(na.omit(full$Fare[full$Embarked == ""S"" & full$Pclass == 3]))
full$Fare[1044] <- mean_mv
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
colnames(full)
factor_vars <- c(""Pclass"", ""Embarked"", ""SibSp"", ""Parch"", ""Title"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Child <- factor(full$Child)
full$Sex <- factor(full$Sex)
train <- full[1:891, ]
test <- full[892:1309, ]
is.factor(train$Sex)
is.factor(train$Embarked)
contrasts(train$Sex)
sapply(train, function(x) sum(is.na(x)))
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Child, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
summary(rf_model)
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution3.csv"", row.names = F)
anova(rf_model, test = ""Chisq"")
library(pscl)
pR2(model)
fitted.results <- predict(model, newdata = subset(test, select = c(2, 3, 4, 5, 6, 7, 8)), type = ""response"")
fitted.results <- ifelse(fitted.results > 0.5, 1, 0)
misClasificError <- mean(fitted.results != test$Survived)
print(paste(""Accuracy"", 1 - misClasificError))
install.packages(""ROCR"")
library(ROCR)
p <- predict(model, newdata = subset(test, select = c(2, 3, 4, 5, 6, 7, 8)), type = ""response"")
pr <- prediction(p, test$Survived)
prf <- performance(pr, measure = ""tpr"", x.measure = ""fpr"")
plot(prf)
auc <- performance(pr, measure = ""auc"")
auc <- auc@y.values[[1]]
auc
test.raw <- read.csv(""titanic/test.csv"", header = T, na.strings = c(""""))
sapply(test.raw, function(x) sum(is.na(x)))
sapply(test.raw, function(x) length(unique(x)))
missmap(test.raw, main = ""Missing values vs observed"")
vnames <- colnames(test.raw)
vnames
vnames <- vnames[c(2, 4, 5, 7)]
vnames
test <- subset(test.raw, select = vnames)
test$Age[is.na(test$Age)] <- median(data$Age, na.rm = T)
NAN <- subset(test, is.na(Fare))
NAN$Pclass
temp <- subset(data, Pclass == NAN$Pclass)
mean_fare_NAN <- mean(temp$Fare)
mean_fare_NAN
test$Fare[is.na(test$Fare)] <- mean_fare_NAN
embark_fare <- test
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
train <- data[1:889, ]
model <- glm(Survived ~ ., family = binomial(link = ""logit""), data = train)
summary(model)
anova(model, test = ""Chisq"")
library(pscl)
pR2(model)
p <- predict(model, newdata = subset(test, select = vnames), type = ""response"")
test[153, ]
solution <- data.frame(PassengerID = test.raw$PassengerId, Survived = round(p))
write.csv(solution, file = ""rf_mod_Solution2.csv"", row.names = F)",1,0,1,1,0,0,0,1,0,0,0,0,0,1
171,aeintngon-titanic-exploratory-analysis,0.7509999999999999,"['filter', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.factor', 'c', 'data.frame', 'factor', 'ifelse', 'is.na', 'library', 'max', 'mean', 'rbind', 'sapply', 'set.seed', 'sum', 'summary', 'table', 'transform', 'which', 'train', 'trainControl', 'group_by', 'left_join', 'mutate', 'n', 'summarise', 'aes', 'element_text', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_label', 'geom_text', 'ggplot', 'ggtitle', 'guides', 'position_dodge', 'position_stack', 'scale_fill_brewer', 'scale_y_continuous', 'theme', 'theme_stata', 'hist', 'grid.arrange', 'cut2', 'kable', 'randomForest', 'varImpPlot', 'binomial', 'glm', 'lm', 'median', 'predict', 'str_extract', 'head', 'read.csv', 'str', 'write.csv']","['ggplot2', 'dplyr', 'ggthemes', 'stringr', 'knitr', 'gridExtra', 'randomForest', 'caret', 'Hmisc', 'base']",12.7652201652527,"['summarise', 'geom_label', 'mean', 'geom_text', 'median', 'scale_fill_brewer', 'element_text', 'guides', 'which', 'theme', 'is.na', 'glm', 'geom_boxplot', 'lm', 'cut2', 'as.factor', 'summary', 'filter', 'left_join', 'sapply', 'n', 'geom_histogram', 'hist', 'kable', 'varImpPlot', 'str_extract', 'set.seed', 'str', 'factor', 'position_dodge', 'max', 'theme_stata', 'transform', 'geom_bar', 'grid.arrange', 'read.csv', 'position_stack', 'binomial', 'table', 'randomForest', 'group_by', 'train', 'c', 'aes', 'scale_y_continuous', 'mutate', 'rbind', 'ifelse', 'sum', 'predict', 'write.csv', 'ggtitle', 'data.frame', 'ggplot', 'geom_density', 'head', 'user defined', 'library', 'trainControl', 'facet_grid']",[],"['ravikrishnareddy-titanic-survival-prediction', 'maza91-titanic-logistic-regression', 'harsh2-exploring-the-titanic-dataset', 'zahoorahmad-titanic-2nd-degree-families-and-majority-voting', 'ushasri-titanic-2nd-degree-families-and-majority-voting', 'erikbruin-titanic-2nd-degree-families-and-majority-voting', 'domini-titanic-data-exploration-and-modelling', 'djohnbar-titanic-rf', 'ablearcher-my-titanic', 'djohnbar-fork-of-titanic-rf-w-titles']","[0.7398404707988901, 0.711424231970933, 0.7032554309392224, 0.7002918233638228, 0.7002918233638228, 0.7000139440320656, 0.6838629275578468, 0.6694799797950394, 0.6577871458624981, 0.6567966337164185]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'character(0)': ['percent', 'pretty_breaks'], 'package:base': ['as.factor', 'c', 'data.frame', 'factor', 'ifelse', 'is.na', 'library', 'max', 'mean', 'rbind', 'sapply', 'set.seed', 'sum', 'summary', 'table', 'transform', 'which'], 'package:caret': ['train', 'trainControl'], 'package:dplyr': ['group_by', 'left_join', 'mutate', 'n', 'summarise'], 'package:ggplot2': ['aes', 'element_text', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_label', 'geom_text', 'ggplot', 'ggtitle', 'guides', 'position_dodge', 'position_stack', 'scale_fill_brewer', 'scale_y_continuous', 'theme'], 'package:ggthemes': ['theme_stata'], 'package:graphics': ['hist'], 'package:gridExtra': ['grid.arrange'], 'package:Hmisc': ['cut2'], 'package:knitr': ['kable'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:stats': ['binomial', 'glm', 'lm', 'median', 'predict'], 'package:stringr': ['str_extract'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""character(0)"": [""percent"", ""pretty_breaks""], ""package:base"": [""as.factor"", ""c"", ""data.frame"", ""factor"", ""ifelse"", ""is.na"", ""library"", ""max"", ""mean"", ""rbind"", ""sapply"", ""set.seed"", ""sum"", ""summary"", ""table"", ""transform"", ""which""], ""package:caret"": [""train"", ""trainControl""], ""package:dplyr"": [""group_by"", ""left_join"", ""mutate"", ""n"", ""summarise""], ""package:ggplot2"": [""aes"", ""element_text"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_label"", ""geom_text"", ""ggplot"", ""ggtitle"", ""guides"", ""position_dodge"", ""position_stack"", ""scale_fill_brewer"", ""scale_y_continuous"", ""theme""], ""package:ggthemes"": [""theme_stata""], ""package:graphics"": [""hist""], ""package:gridExtra"": [""grid.arrange""], ""package:Hmisc"": [""cut2""], ""package:knitr"": [""kable""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:stats"": [""binomial"", ""glm"", ""lm"", ""median"", ""predict""], ""package:stringr"": [""str_extract""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter character0 percent prettybreaks packagebase asfactor c dataframe factor ifelse isna library max mean rbind sapply setseed sum summary table transform which packagecaret train trainControl packagedplyr groupby leftjoin mutate n summarise packageggplot2 aes elementtext facetgrid geombar geomboxplot geomdensity geomhistogram geomlabel geomtext ggplot ggtitle guides positiondodge positionstack scalefillbrewer scaleycontinuous theme packageggthemes themestata packagegraphics hist packagegridExtra gridarrange packageHmisc cut2 packageknitr kable packagerandomForest randomForest varImpPlot packagestats binomial glm lm median predict packagestringr strextract packageutils head readcsv str writecsv,"library(ggplot2)
library(dplyr)
library(ggthemes)
library(stringr)
library(knitr)
library(gridExtra)
library(randomForest)
library(caret)
library(Hmisc)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
str(train)
test$Survived = NA
all = rbind(train, test)
all = transform(all, Survived = as.factor(Survived), Pclass = as.factor(Pclass))
sapply(all, function(x) {
    sum(is.na(x))
})
ggplot(all[!is.na(all$Survived), ], aes(x = Survived, fill = Survived)) + geom_bar(position = ""dodge"") + geom_label(aes(label = scales::percent(..count../sum(..count..))), stat = ""count"", position = position_dodge(0.9), fontface = ""bold"") + theme_stata() + scale_fill_brewer(palette = ""Pastel1"")
p1 = ggplot(all, aes(x = Sex, fill = Sex)) + geom_bar(position = ""dodge"") + geom_label(aes(label = scales::percent(..count../sum(..count..))), stat = ""count"") + ggtitle(""All Data"") + theme_stata() + scale_fill_brewer(palette = ""Pastel1"")
p2 = ggplot(all[!is.na(all$Survived), ], aes(x = Sex, fill = Survived)) + geom_bar(position = ""dodge"") + geom_label(aes(label = ..count..), stat = ""count"") + ggtitle(""Training Data Only"") + theme_stata() + scale_fill_brewer(palette = ""Pastel1"")
grid.arrange(p1, p2, nrow = 1)
ggplot(all[!is.na(all$Survived), ], aes(x = Pclass, fill = Pclass)) + geom_bar(position = ""dodge"") + geom_label(aes(label = scales::percent(..count../sum(..count..))), stat = ""count"") + ggtitle(""All Data"") + theme_stata() + scale_fill_brewer(palette = ""Pastel1"")
p4 = ggplot(all[!is.na(all$Survived), ], aes(x = Pclass, fill = Survived)) + geom_bar(position = ""dodge"") + geom_text(aes(label = scales::percent(..count../sum(..count..))), stat = ""count"", position = position_dodge(0.9), vjust = 0) + theme_stata() + scale_fill_brewer(palette = ""Pastel1"")
p5 = ggplot(all[!is.na(all$Survived), ], aes(x = Pclass, fill = Survived)) + geom_bar(position = ""stack"") + facet_grid(. ~ Sex) + geom_text(aes(label = ..count..), stat = ""count"", position = position_stack(vjust = 0.5)) + theme_stata() + scale_fill_brewer(palette = ""Pastel1"")
p6 = ggplot(all[!is.na(all$Survived), ], aes(x = Pclass, fill = Survived)) + geom_bar(position = ""dodge"") + facet_grid(. ~ Sex) + theme_stata() + scale_fill_brewer(palette = ""Pastel1"")
p7 = ggplot(all[!is.na(all$Survived), ], aes(x = Pclass, fill = Survived)) + geom_bar(position = ""fill"") + facet_grid(. ~ Sex) + theme_stata() + scale_fill_brewer(palette = ""Pastel1"")
grid.arrange(p4, p5, ncol = 2)
all$SexClass <- ifelse(all$Sex == ""male"" & all$Pclass == 1, ""P1Male"", ifelse(all$Sex == ""male"" & all$Pclass == 2, ""P2Male"", ifelse(all$Sex == ""male"" & all$Pclass == 3, ""P3Male"", ifelse(all$Sex == ""female"" & all$Pclass == 1, ""P1Female"", ifelse(all$Sex == ""female"" & all$Pclass == 2, ""P2Female"", ifelse(all$Sex == ""female"" & all$Pclass == 3, ""P3Female"", """"))))))
head(all$Name)
all$title = str_extract(all$Name, pattern = ""[:upper:]\\w+\\."")
kable(table(all$Sex, all$title))
all$title = ifelse(all$title %in% c(""Mlle."", ""Ms.""), ""Miss."", all$title)
all$title = ifelse(all$title == ""Mme."", ""Mrs."", all$title)
all$title = ifelse(!(all$title %in% c(""Miss."", ""Mrs."", ""Mr."", ""Master."")), ""Rare"", all$title)
kable(table(all$Sex, all$title))
p6 = ggplot(all[(!is.na(all$Survived)), ], aes(x = title, fill = Survived)) + geom_bar(position = ""stack"") + geom_text(aes(label = ..count..), stat = ""count"", position = position_stack(vjust = 0.5)) + theme_stata() + scale_fill_brewer(palette = ""Pastel1"")
p7 = ggplot(all[(!is.na(all$Survived)), ], aes(x = title, y = Age, fill = Sex)) + geom_boxplot() + theme_stata() + scale_fill_brewer(palette = ""Pastel1"")
grid.arrange(p6, p7, ncol = 2)
kids <- all %>% filter(Age <= 18) %>% mutate(nanny = ifelse(Parch == 0, 1, 0))
ggplot(kids[(!is.na(kids$Survived)), ], aes(x = nanny, fill = Survived)) + geom_bar(position = ""stack"") + geom_text(aes(label = ..count..), stat = ""count"", position = position_stack(vjust = 0.5)) + theme_stata() + scale_fill_brewer(palette = ""Pastel1"")
all$famSize = all$SibSp + all$Parch
ggplot(all[(!is.na(all$Survived)), ], aes(x = famSize, fill = Survived)) + geom_bar(stat = ""count"") + theme_stata() + scale_fill_brewer(palette = ""Pastel1"")
all[(all$famSize == 7), ]
all[(all$Ticket == 113503), c(""Name"", ""Age"", ""Ticket"", ""Fare"", ""famSize"")]
all[(all$Ticket == 110152), c(""Name"", ""Age"", ""Ticket"", ""Fare"", ""famSize"")]
all <- all %>% group_by(Ticket, Fare) %>% mutate(n = n()) %>% mutate(TSize = n - 1)
ggplot(all[(!is.na(all$Survived)), ], aes(x = TSize, fill = Survived)) + geom_bar(stat = ""count"") + theme_stata() + scale_fill_brewer(palette = ""Pastel1"")
hist(all$TSize - all$famSize)
all <- all %>% mutate(groupSize = max(TSize, famSize)) %>% mutate(group = ifelse(groupSize == 0, ""solo"", ifelse(groupSize == 1 | groupSize == 2, ""duo"", ifelse(groupSize == 3 | groupSize == 4, ""small group"", ifelse(groupSize >= 5, ""big group"", "" ""))))) %>% transform(group = factor(group, levels = c(""solo"", ""duo"", ""small group"", ""big group"")))
ggplot(all[!is.na(all$Survived), ], aes(x = group, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"") + geom_label(aes(label = ..count..), stat = ""count"") + theme_stata() + scale_fill_brewer(palette = ""Pastel1"")
all$FarePP = ifelse(all$TSize > 0, all$Fare/all$TSize, all$Fare)
FareMissing <- all[!is.na(all$Fare), ] %>% group_by(Pclass) %>% summarise(FareMed = median(FarePP))
all <- left_join(all, FareMissing, by = c(""Pclass""))
all[is.na(all$Fare), c(""Name"", ""Pclass"", ""Embarked"", ""Fare"", ""FarePP"")]
FareMissing[FareMissing$Pclass == 3, ]
all$FarePP[all$PassengerId == 1044] <- 7.8542
all$FarePP[which(all$Fare == 0)] = all$FareMed[which(all$FarePP == 0)]
ggplot(all[!is.na(all$Survived), ], aes(x = FarePP, fill = ""sienna2"")) + geom_histogram(bins = 30) + guides(fill = FALSE) + theme_stata()
all$FareBin = cut2(all$FarePP, g = 5)
ggplot(all[!is.na(all$Survived), ], aes(x = FareBin, fill = Survived)) + geom_bar(stat = ""count"") + facet_grid(. ~ Pclass) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + scale_fill_brewer(palette = ""Pastel1"")
ggplot(all[!is.na(all$Survived) & !is.na(all$Age), ], aes(x = Age)) + geom_density(aes(fill = Survived), alpha = 0.7) + theme_stata() + scale_fill_brewer(palette = ""Pastel1"")
ggplot(all[!is.na(all$Age), ], aes(x = title, y = Age, fill = Pclass)) + geom_boxplot() + scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) + theme_stata() + scale_fill_brewer(palette = ""Pastel1"")
age_lm = lm(Age ~ Pclass + title + groupSize, data = all[!is.na(all$Age), ])
summary(age_lm)
all$AgePred = predict(age_lm, all)
p8 = ggplot(all[!is.na(all$Age), ], aes(x = Age, fill = ""sienna2"")) + geom_histogram(bins = 30) + guides(fill = FALSE) + theme_stata()
p9 = ggplot(all[!is.na(all$Age), ], aes(x = AgePred, fill = ""sienna2"")) + geom_histogram(bins = 30) + guides(fill = FALSE) + theme_stata()
p10 = ggplot(all[!is.na(all$Age), ], aes(x = Age - AgePred)) + geom_histogram(bins = 30) + guides(fill = FALSE) + theme_stata()
grid.arrange(p8, p9, p10, ncol = 3)
AgeMeanMed = all[!is.na(all$Age), ] %>% group_by(Pclass, title, groupSize) %>% mutate(AgePred = mean(Age))
p11 = ggplot(AgeMeanMed[!is.na(AgeMeanMed$Age), ], aes(x = Age, fill = ""sienna2"")) + geom_histogram(bins = 30) + guides(fill = FALSE) + theme_stata()
p12 = ggplot(AgeMeanMed[!is.na(AgeMeanMed$Age), ], aes(x = AgePred, fill = ""sienna2"")) + geom_histogram(bins = 30) + guides(fill = FALSE) + theme_stata()
p13 = ggplot(AgeMeanMed[!is.na(AgeMeanMed$Age), ], aes(x = Age - AgePred)) + geom_histogram(bins = 30) + guides(fill = FALSE) + theme_stata()
grid.arrange(p11, p12, p13, ncol = 3)
AgeMeanMed = all[!is.na(all$Age), ] %>% group_by(Pclass, title, groupSize) %>% mutate(AgePred = median(Age))
p14 = ggplot(AgeMeanMed[!is.na(AgeMeanMed$Age), ], aes(x = Age, fill = ""sienna2"")) + geom_histogram(bins = 30) + guides(fill = FALSE) + theme_stata()
p15 = ggplot(AgeMeanMed[!is.na(AgeMeanMed$Age), ], aes(x = AgePred, fill = ""sienna2"")) + geom_histogram(bins = 30) + guides(fill = FALSE) + theme_stata()
p16 = ggplot(AgeMeanMed[!is.na(AgeMeanMed$Age), ], aes(x = Age - AgePred)) + geom_histogram(bins = 30) + guides(fill = FALSE) + theme_stata()
grid.arrange(p14, p15, p16, ncol = 3)
all$Age[is.na(all$Age)] = all$AgePred[is.na(all$Age)]
all$SexClass = as.factor(all$SexClass)
trainFix = all[!is.na(all$Survived) & !is.na(all$Age), ]
testFix = all[is.na(all$Survived), ]
LR_model <- glm(Survived ~ SexClass + Age + FareBin + group, family = binomial(link = ""logit""), data = trainFix)
pred_train <- predict(LR_model, newdata = trainFix, type = ""response"")
pred = ifelse(pred_train < 0.5, 0, 1)
mean(pred == trainFix$Survived)
set.seed(1001)
svm_model <- train(Survived ~ SexClass + Age + FarePP + group, data = trainFix, ""svmRadial"", preProcess = c(""center"", ""scale""), trControl = trainControl(method = ""cv"", number = 5))
svm_model
pred_train <- predict(svm_model, trainFix)
mean(pred_train == trainFix$Survived)
RF_model = train(x = trainFix[, c(""SexClass"", ""Age"", ""FarePP"", ""group"")], y = trainFix$Survived, data = trainFix, method = ""rf"", trControl = trainControl(method = ""cv"", number = 5))
RF_model
pred_train <- predict(RF_model, trainFix)
mean(pred_train == trainFix$Survived)
RF_model1 = randomForest(Survived ~ SexClass + Age + FarePP + group, data = trainFix)
varImpPlot(RF_model1)
pred_train <- predict(RF_model1, trainFix)
mean(pred_train == trainFix$Survived)
test$Survived = predict(RF_model, testFix)
submission = data.frame(PassengerID = test$PassengerId, Survived = test$Survived)
write.csv(submission, ""submission.csv"", row.names = FALSE)",1,0,1,0,0,0,0,1,0,0,0,0,0,0
172,qianbi-titanic-voting-2,0.7559999999999999,"['as.numeric', 'c', 'data.frame', 'factor', 'gsub', 'ifelse', 'lapply', 'library', 'nrow', 'round', 'bind_rows', 'svm', 'complete', 'mice', 'nnet', 'randomForest', 'rpart', 'glm', 'predict', 'read.csv', 'write.csv']","['dplyr', 'mice', 'nnet', 'randomForest', 'rpart', 'e1071', 'base']",4.7023839950561515,"['nrow', 'complete', 'lapply', 'svm', 'glm', 'nnet', 'rpart', 'round', 'mice', 'gsub', 'factor', 'read.csv', 'randomForest', 'c', 'as.numeric', 'ifelse', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'library']",[],"['qianbi-titanic-rpart-2', 'qianbi-titanic-rpart', 'qianbi-titanic-voting', 'qianbi-titanic-nnet', 'qianbi-titanic-svm', 'qianbi-titanic-logistic-2', 'qianbi-titanic-randomforest', 'venkatko-titanic-survival1', 'jasonhit-first-script-for-kaggle-titanic', 'hemingwei-titanic-r-solution-from-megan-risdal']","[0.7992973719747054, 0.7830040653376634, 0.7651794092722722, 0.7275430247639005, 0.7153321549096384, 0.7072349820845923, 0.7040832020807026, 0.6294209182910298, 0.6237893082355974, 0.6192806781159496]","{'package:base': ['as.numeric', 'c', 'data.frame', 'factor', 'gsub', 'ifelse', 'lapply', 'library', 'nrow', 'round'], 'package:dplyr': ['bind_rows'], 'package:e1071': ['svm'], 'package:mice': ['complete', 'mice'], 'package:nnet': ['nnet'], 'package:randomForest': ['randomForest'], 'package:rpart': ['rpart'], 'package:stats': ['glm', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.numeric"", ""c"", ""data.frame"", ""factor"", ""gsub"", ""ifelse"", ""lapply"", ""library"", ""nrow"", ""round""], ""package:dplyr"": [""bind_rows""], ""package:e1071"": [""svm""], ""package:mice"": [""complete"", ""mice""], ""package:nnet"": [""nnet""], ""package:randomForest"": [""randomForest""], ""package:rpart"": [""rpart""], ""package:stats"": [""glm"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase asnumeric c dataframe factor gsub ifelse lapply library nrow round packagedplyr bindrows packagee1071 svm packagemice complete mice packagennet nnet packagerandomForest randomForest packagerpart rpart packagestats glm predict packageutils readcsv writecsv,"library(dplyr)
library(mice)
library(nnet)
library(randomForest)
library(rpart)
library(e1071)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE, na.strings = """")
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE, na.strings = """")
full <- bind_rows(train, test)
full$Title <- gsub(""^.*, |\\. .*$"", """", full$Name)
Mr <- c(""Col"", ""Don"", ""Jonkheer"", ""Sir"")
Mrs <- c(""Dona"", ""Lady"", ""Mme"", ""the Countess"")
Miss <- c(""Mlle"", ""Ms"")
full$Title[full$Title %in% Mr] <- ""Mr""
full$Title[full$Title %in% Mrs] <- ""Mrs""
full$Title[full$Title %in% Miss] <- ""Miss""
full$Fsize <- full$SibSp + full$Parch + 1
full$FsizeD[full$Fsize == 1] <- ""Singleton""
full$FsizeD[full$Fsize > 1 & full$Fsize < 5] <- ""Small""
full$FsizeD[full$Fsize > 4] <- ""Large""
factor_var <- c(""Survived"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""FsizeD"")
full[factor_var] <- lapply(full[factor_var], factor)
res <- data.frame(PassengerId = test[, 1], Survived = 0)
mice_mod <- mice(full[, c(3, 5:8, 10, 12)], method = ""rf"")
mice_output <- complete(mice_mod)
full[, c(6, 10, 12)] <- mice_output[, c(3, 6, 7)]
full$Embarked <- factor(full$Embarked)
full$Child <- factor(ifelse(full$Age <= 12, 1, 0))
full <- full[, -c(9, 11)]
train <- full[1:nrow(train), ]
test <- full[(nrow(train) + 1):nrow(full), -2]
logistic_mod <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child, family = binomial, data = train)
res$Survived <- res$Survived + round(predict(logistic_mod, test, type = ""response""), 0)
nn_mod <- nnet(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child, data = train, size = 10, decay = 0.01)
res$Survived <- res$Survived + as.numeric(predict(nn_mod, test, type = ""class""))
rf_mod <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child, data = train)
res$Survived <- res$Survived + as.numeric(predict(rf_mod, test))
svm_mod <- svm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child, data = train)
res$Survived <- res$Survived + as.numeric(predict(svm_mod, test))
rpart_mod <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child, data = train, method = ""class"")
rpart_predict <- predict(rpart_mod, newdata = test)
res$Survived <- res$Survived + ifelse(rpart_predict[, 1] < rpart_predict[, 2], 1, 0)
res$Survived <- ifelse(res$Survived > 3, 1, 0)
write.csv(res, file = ""Titanic_voting_2.csv"", row.names = FALSE)",1,0,0,1,0,0,0,0,0,1,0,1,0,0
173,anweshaghosh-titanic-forkofmultiplescripts-r,0.763,"['desc', 'mutate', 'filter', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'missmap', 'as.factor', 'as.numeric', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'list', 'min', 'names', 'order', 'paste', 'paste0', 'print', 'require', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'table', 'resamples', 'train', 'trainControl', 'varImp', 'corrgram', 'bind_rows', 'dense_rank', 'select', 'aes', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_point', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'barplot', 'boxplot', 'hist', 'mosaicplot', 'par', 'plot', 'rgb', 'dotplot', 'complete', 'mice', 'revalue', 'dollar_format', 'median', 'predict', 'read.csv', 'write.csv']","['data.table', 'Amelia', 'ggplot2', 'ggthemes', 'corrgram', 'plyr', 'mice', 'dplyr', 'dplyr', 'scales', 'caret', 'base']",24.704565048217802,"['labs', 'list', 'complete', 'median', 'lapply', 'min', 'dotplot', 'dense_rank', 'rgb', 'is.na', 'require', 'resamples', 'names', 'geom_boxplot', 'scale_x_continuous', 'print', 'theme_few', 'as.factor', 'summary', 'filter', 'sapply', 'mice', 'geom_histogram', 'hist', 'boxplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mosaicplot', 'factor', 'colnames', 'geom_bar', 'varImp', 'read.csv', 'paste0', 'table', 'par', 'scale_y_continuous', 'row.names', 'c', 'train', 'aes', 'mutate', 'paste', 'as.numeric', 'sum', 'geom_point', 'geom_vline', 'plot', 'order', 'dollar_format', 'bind_rows', 'predict', 'data.frame', 'strsplit', 'ggplot', 'geom_density', 'write.csv', 'user defined', 'library', 'trainControl', 'barplot', 'select', 'facet_grid']",[],"['liudj2008-titanic', 'liudj2008-fork-of-titanic', 'jacekpardyak-mytitanicscript', 'paulocressoni-titanic-using-stepwise-linear-regression', 'ezhilvelme-titanic-neural-network-c-4-2', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'annafreydenzon-titanic-machine-learning-from-disaster', 'nithishthirmul-titanic-data-test1', 'tobybot11-toby-s-titanic-analysis']","[0.4636036661177879, 0.4632493879911475, 0.4453802186894064, 0.444338742987808, 0.4420481365379918, 0.4394439764642452, 0.4394439764642452, 0.4338759320058263, 0.4025872941255827, 0.39624951084752535]","{'c(""package:dplyr"", ""package:plyr"")': ['desc', 'mutate'], 'c(""package:dplyr"", ""package:stats"")': ['filter'], 'character(0)': ['readData'], 'package:Amelia': ['missmap'], 'package:base': ['as.factor', 'as.numeric', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'list', 'min', 'names', 'order', 'paste', 'paste0', 'print', 'require', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'table'], 'package:caret': ['resamples', 'train', 'trainControl', 'varImp'], 'package:corrgram': ['corrgram'], 'package:dplyr': ['bind_rows', 'dense_rank', 'select'], 'package:ggplot2': ['aes', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_point', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['barplot', 'boxplot', 'hist', 'mosaicplot', 'par', 'plot'], 'package:grDevices': ['rgb'], 'package:lattice': ['dotplot'], 'package:mice': ['complete', 'mice'], 'package:plyr': ['revalue'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:dplyr"", ""package:plyr"")"": [""desc"", ""mutate""], ""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""character(0)"": [""readData""], ""package:Amelia"": [""missmap""], ""package:base"": [""as.factor"", ""as.numeric"", ""c"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""list"", ""min"", ""names"", ""order"", ""paste"", ""paste0"", ""print"", ""require"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""summary"", ""table""], ""package:caret"": [""resamples"", ""train"", ""trainControl"", ""varImp""], ""package:corrgram"": [""corrgram""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""select""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_point"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""barplot"", ""boxplot"", ""hist"", ""mosaicplot"", ""par"", ""plot""], ""package:grDevices"": [""rgb""], ""package:lattice"": [""dotplot""], ""package:mice"": [""complete"", ""mice""], ""package:plyr"": [""revalue""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackagedplyr packageplyr desc mutate cpackagedplyr packagestats filter character0 readData packageAmelia missmap packagebase asfactor asnumeric c colnames dataframe factor gsub isna lapply library list min names order paste paste0 print require rownames sapply setseed strsplit sum summary table packagecaret resamples train trainControl varImp packagecorrgram corrgram packagedplyr bindrows denserank select packageggplot2 aes facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geompoint geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics barplot boxplot hist mosaicplot par plot packagegrDevices rgb packagelattice dotplot packagemice complete mice packageplyr revalue packagescales dollarformat packagestats median predict packageutils readcsv writecsv,"library(data.table)
readData <- function(file.name, column.types, missing.types) {
    read.csv(file.name, colClasses = column.types, na.strings = missing.types, stringsAsFactors = FALSE)
}
train.data.file <- ""../input/train.csv""
test.data.file <- ""../input/test.csv""
missing.types <- c(""NA"", """")
train.column.types <- c(""integer"", ""factor"", ""factor"", ""character"", ""factor"", ""numeric"", ""integer"", ""integer"", ""character"", ""numeric"", ""character"", ""factor"")
test.column.types <- train.column.types[-2]
train <- readData(train.data.file, train.column.types, missing.types)
test <- readData(test.data.file, test.column.types, missing.types)
summary(train)
require(Amelia)
missmap(train, main = ""Titanic Training Data - Missing Data"", col = c(""red"", ""black""))
missmap(test, main = ""Titanic Test Data - Missing Data"", col = c(""red"", ""black""))
library(ggplot2)
library(ggthemes)
pi1 <- ggplot(train, aes(x = PassengerId, y = Survived))
pi1 + geom_point()
mosaicplot(train$Pclass ~ train$Survived, main = ""Passenger Fate by Traveling Class"", shade = FALSE, color = TRUE, xlab = ""Pclass"", ylab = ""Survived"")
mosaicplot(train$Sex ~ train$Survived, main = ""Passenger Fate by Gender"", shade = FALSE, color = TRUE, xlab = ""Pclass"", ylab = ""Survived"")
boxplot(train$Age ~ train$Survived, main = ""Passenger Fate by Age"", xlab = ""Survived"", ylab = ""Age"")
mosaicplot(train$SibSp ~ train$Survived, main = ""Passenger Fate by Siblings"", shade = FALSE, color = TRUE, xlab = ""SibSp"", ylab = ""Survived"")
mosaicplot(train$Parch ~ train$Survived, main = ""Passenger Fate by Parents/Children"", shade = FALSE, color = TRUE, xlab = ""Parch"", ylab = ""Survived"")
boxplot(train$Fare ~ train$Survived, main = ""Passenger Fate by Fare"", xlab = ""Survived"", ylab = ""Fare"")
boxplot(train$Fare ~ train$Pclass, main = ""Fare vs Passenger Class"", xlab = ""Pclass"", ylab = ""Fare"")
mosaicplot(train$Embarked ~ train$Survived, main = ""Passenger Fate by Port of Embarkation"", shade = FALSE, color = TRUE, xlab = ""Embarked"", ylab = ""Survived"")
barplot(table(train$Embarked), names.arg = c(""Cherbourg"", ""Queenstown"", ""Southampton""), main = ""Embarked (Port of Emparkation)"")
require(corrgram)
require(plyr)
corrgram.data <- train
corrgram.data$Survived <- as.numeric(corrgram.data$Survived)
corrgram.data$Pclass <- as.numeric(corrgram.data$Pclass)
corrgram.data$Embarked <- revalue(corrgram.data$Embarked, c(C = 1, Q = 2, S = 3))
corrgram.vars <- c(""Survived"", ""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked"")
corrgram(corrgram.data[0:891, corrgram.vars], order = FALSE, lower.panel = panel.ellipse, upper.panel = panel.pie, text.panel = panel.txt, main = ""Titanic Training Data"")
train$Fate <- train$Survived
train$Fate <- revalue(train$Fate, c(`1` = ""Survived"", `0` = ""Perished""))
train$Title <- gsub(""(.*, )|(\\..*)"", """", train$Name)
table(train$Sex, train$Title)
test$Title <- gsub(""(.*, )|(\\..*)"", """", test$Name)
table(test$Sex, test$Title)
rare_title <- c(""Capt"", ""Col"", ""Don"", ""Dona"", ""Dr"", ""Jonkheer"", ""Lady"", ""Major"", ""Rev"", ""Sir"", ""the Countess"")
train$Title[train$Title == ""Mlle""] <- ""Miss""
train$Title[train$Title == ""Ms""] <- ""Miss""
train$Title[train$Title == ""Mme""] <- ""Mrs""
train$Title[train$Title %in% rare_title] <- ""Rare""
test$Title[test$Title == ""Mlle""] <- ""Miss""
test$Title[test$Title == ""Ms""] <- ""Miss""
test$Title[test$Title == ""Mme""] <- ""Mrs""
test$Title[test$Title %in% rare_title] <- ""Rare""
table(train$Sex, train$Title)
table(test$Sex, test$Title)
train$Surname <- sapply(train$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
test$Surname <- sapply(test$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
train$Fsize = train$SibSp + train$Parch + 1
test$Fsize = test$SibSp + test$Parch + 1
train$Family <- paste(train$Surname, train$Fsize, sep = ""_"")
test$Family <- paste(test$Surname, test$Fsize, sep = ""_"")
ggplot(train, aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
train$FsizeD[train$Fsize == 1] <- ""singleton""
train$FsizeD[train$Fsize < 5 & train$Fsize > 1] <- ""small""
train$FsizeD[train$Fsize > 4] <- ""large""
test$FsizeD[test$Fsize == 1] <- ""singleton""
test$FsizeD[test$Fsize < 5 & test$Fsize > 1] <- ""small""
test$FsizeD[test$Fsize > 4] <- ""large""
mosaicplot(table(train$FsizeD, train$Survived), main = ""Family Size by Survival"", shade = TRUE)
sum(is.na(train$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
train[factor_vars] <- lapply(train[factor_vars], function(x) as.factor(x))
test[factor_vars] <- lapply(test[factor_vars], function(x) as.factor(x))
set.seed(129)
library(mice)
mice_mod <- mice(train[, !names(train) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"", ""Embarked"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(train$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
train$Age <- mice_output$Age
sum(is.na(train$Age))
mice_mod2 <- mice(test[, !names(test) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"", ""Embarked"")], method = ""rf"")
mice_output2 <- complete(mice_mod2)
par(mfrow = c(1, 2))
hist(test$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output2$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
test$Age <- mice_output2$Age
sum(is.na(test$Age))
plot(train$Age, train$Survived, xlab = ""Age"", ylab = ""Survived"")
survivers <- data.frame(train$Age[train$Survived == 1])
nonsurvivers <- data.frame(train$Age[train$Survived == 0])
survivers$title <- ""Survivers""
nonsurvivers$title <- ""Non-Survivers""
colnames(survivers)[1] <- ""Age""
colnames(nonsurvivers)[1] <- ""Age""
hist(survivers$Age, breaks = 32, xlim = c(0, 80), ylim = c(0, 40), col = ""red"")
hist(nonsurvivers$Age, breaks = 32, add = T, col = rgb(0, 1, 0, 0.5))
train$Agegroup[train$Age < 14] <- ""child""
train$Agegroup[train$Age >= 14] <- ""adult""
test$Agegroup[test$Age < 14] <- ""child""
test$Agegroup[test$Age >= 14] <- ""adult""
table(train$Agegroup, train$Survived)
mosaicplot(table(train$Agegroup, train$Survived), main = ""Age Group by Survival"", shade = TRUE)
ggplot(train, aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
library(dplyr)
full1 <- bind_rows(select(train, Sex, Title, Age), select(test, Sex, Title, Age))
female_age <- full1 %>% filter(Sex == ""female"")
plot(female_age$Title, female_age$Age)
b <- female_age[female_age$Title == ""Mrs"", ]
min(b$Age)
train$Mother <- ""Not Mother""
train$Mother[train$Sex == ""female"" & train$Parch > 0 & train$Age > min(b$Age) & train$Title != ""Miss""] <- ""Mother""
test$Mother <- ""Not Mother""
test$Mother[test$Sex == ""female"" & test$Parch > 0 & test$Age > min(b$Age) & test$Title != ""Miss""] <- ""Mother""
table(train$Mother, train$Survived)
train$Agegroup <- factor(train$Agegroup)
train$Mother <- factor(train$Mother)
test$Agegroup <- factor(test$Agegroup)
test$Mother <- factor(test$Mother)
table(is.na(train$Embarked))
table(is.na(test$Embarked))
library(dplyr)
full <- bind_rows(select(train, Embarked, Pclass, Fare), select(test, Embarked, Pclass, Fare))
embark_fare <- full %>% filter(Embarked == ""NA"")
library(scales)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
train[is.na(train$Embarked), ]
train$Embarked[c(62, 830)] <- ""C""
table(is.na(train$Embarked))
table(is.na(train$Fare))
table(is.na(test$Fare))
test[is.na(test$Fare), ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
a <- full[full$Pclass == ""3"" & full$Embarked == ""S"", ]
a <- a[is.na(a$Fare) == FALSE, ]
median(a$Fare)
test$Fare[153] <- median(a$Fare)
library(caret)
control <- trainControl(method = ""cv"", number = 10)
metric <- ""Accuracy""
set.seed(7)
fit.lda <- train(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Agegroup + Mother, data = train, method = ""lda"", metric = metric, trControl = control)
set.seed(7)
fit.cart <- train(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Agegroup + Mother, data = train, method = ""rpart"", metric = metric, trControl = control)
set.seed(7)
fit.knn <- train(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Agegroup + Mother, data = train, method = ""knn"", metric = metric, trControl = control)
set.seed(7)
fit.svm <- train(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Agegroup + Mother, data = train, method = ""svmRadial"", metric = metric, trControl = control)
set.seed(7)
fit.rf <- train(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Agegroup + Mother, data = train, method = ""rf"", metric = metric, trControl = control)
results <- resamples(list(lda = fit.lda, cart = fit.cart, knn = fit.knn, svm = fit.svm, rf = fit.rf))
summary(results)
dotplot(results)
print(fit.rf)
varImportance <- data.frame(varImp(fit.rf)$importance)
varImportance$Vars <- row.names(varImportance)
varImportance[order(-varImportance$Overall), ]
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(varImportance$Overall))))
prediction <- predict(fit.rf, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",0,0,1,1,0,0,0,1,0,0,0,0,0,1
174,cdeotte-titanic-spam-filter,0.742,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'abs', 'as.matrix', 'c', 'cat', 'colnames', 'data.frame', 'diag', 'duplicated', 'eigen', 'exp', 'factor', 'gsub', 'ifelse', 'intersect', 'is.na', 'length', 'library', 'log', 'match', 'matrix', 'max', 'mean', 'ncol', 'nrow', 'order', 'paste', 'pmin', 'rbind', 'rep', 'return', 'row.names', 'rownames', 'sample', 'sapply', 'sprintf', 'strsplit', 'sum', 't', 'tabulate', 'unique', 'vector', 'which', 'which.max', 'knn3', 'aes', 'annotate', 'geom_hline', 'geom_jitter', 'geom_line', 'geom_raster', 'geom_vline', 'ggplot', 'labs', 'scale_colour_manual', 'ylim', 'grid.arrange', 'ave', 'predict', 'sd', 'head', 'read.csv', 'write.csv']","['ggplot2', 'gridExtra', 'caret', 'base']",45.2018339633942,"['labs', 'exp', 'nrow', 'sprintf', 'mean', 'which.max', 'vector', 'annotate', 'which', 'geom_jitter', 'cat', 'ave', 'is.na', 'duplicated', 'pmin', 'ncol', 'log', 't', 'tabulate', 'eigen', 'sapply', 'rep', 'as.matrix', 'geom_hline', 'scale_colour_manual', 'gsub', 'factor', 'colnames', 'match', 'matrix', 'unique', 'max', 'grid.arrange', 'length', 'sd', 'read.csv', 'return', 'abs', 'c', 'row.names', 'aes', 'diag', 'rbind', 'paste', 'ifelse', 'sample', 'sum', 'geom_vline', 'predict', 'order', 'write.csv', 'knn3', 'data.frame', 'intersect', 'rownames', 'strsplit', 'ggplot', 'head', 'user defined', 'library', 'ylim', 'geom_raster', 'geom_line']",[],"['uvcelokesh-titanic-survivor-analysis-different-perspectives', 'erskumars-titanic-survival-eda-and-survival-rate-prediction', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'c34klh123-using-svm-to-predict-titanic-in-r', 'bubblride-titanic-e1071-c-svc-five-features', 'cdeotte-titanic-deep-net-0-82296', 'cnusapbo-titanic-r-code']","[0.11254362586947443, 0.07030186236059996, 0.0652873829173161, 0.0652873829173161, 0.06466469983132493, 0.06466469983132493, 0.06225438994858278, 0.0616372298343323, 0.05820529455281752, 0.05779585053950327]","{'character(0)': ['getmode', 'ilogit', 'logl', 'pimage', 'prep'], 'package:base': ['abs', 'as.matrix', 'c', 'cat', 'colnames', 'data.frame', 'diag', 'duplicated', 'eigen', 'exp', 'factor', 'gsub', 'ifelse', 'intersect', 'is.na', 'length', 'library', 'log', 'match', 'matrix', 'max', 'mean', 'ncol', 'nrow', 'order', 'paste', 'pmin', 'rbind', 'rep', 'return', 'row.names', 'rownames', 'sample', 'sapply', 'sprintf', 'strsplit', 'sum', 't', 'tabulate', 'unique', 'vector', 'which', 'which.max'], 'package:caret': ['knn3'], 'package:ggplot2': ['aes', 'annotate', 'geom_hline', 'geom_jitter', 'geom_line', 'geom_raster', 'geom_vline', 'ggplot', 'labs', 'scale_colour_manual', 'ylim'], 'package:gridExtra': ['grid.arrange'], 'package:stats': ['ave', 'predict', 'sd'], 'package:utils': ['head', 'read.csv', 'write.csv']}","{""character(0)"": [""getmode"", ""ilogit"", ""logl"", ""pimage"", ""prep""], ""package:base"": [""abs"", ""as.matrix"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""diag"", ""duplicated"", ""eigen"", ""exp"", ""factor"", ""gsub"", ""ifelse"", ""intersect"", ""is.na"", ""length"", ""library"", ""log"", ""match"", ""matrix"", ""max"", ""mean"", ""ncol"", ""nrow"", ""order"", ""paste"", ""pmin"", ""rbind"", ""rep"", ""return"", ""row.names"", ""rownames"", ""sample"", ""sapply"", ""sprintf"", ""strsplit"", ""sum"", ""t"", ""tabulate"", ""unique"", ""vector"", ""which"", ""which.max""], ""package:caret"": [""knn3""], ""package:ggplot2"": [""aes"", ""annotate"", ""geom_hline"", ""geom_jitter"", ""geom_line"", ""geom_raster"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_colour_manual"", ""ylim""], ""package:gridExtra"": [""grid.arrange""], ""package:stats"": [""ave"", ""predict"", ""sd""], ""package:utils"": [""head"", ""read.csv"", ""write.csv""]}",character0 getmode ilogit logl pimage prep packagebase abs asmatrix c cat colnames dataframe diag duplicated eigen exp factor gsub ifelse intersect isna length library log match matrix max mean ncol nrow order paste pmin rbind rep return rownames rownames sample sapply sprintf strsplit sum t tabulate unique vector which whichmax packagecaret knn3 packageggplot2 aes annotate geomhline geomjitter geomline geomraster geomvline ggplot labs scalecolourmanual ylim packagegridExtra gridarrange packagestats ave predict sd packageutils head readcsv writecsv,"train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
test$Survived <- NA
data <- rbind(train, test)
words = paste(data$Name[1:891], collapse = "" "")
words = gsub(""[.,\""()/]"", """", words)
words = gsub("" . |  "", "" "", words)
words = strsplit(words, "" "")[[1]]
freq = ave(1:length(words), words, FUN = length)
dictionary = data.frame(Words = words, Freq = freq, stringsAsFactors = F)
dictionary = dictionary[!duplicated(dictionary$Words) & dictionary$Freq > 1, ]
dictionary <- dictionary[order(-dictionary$Freq), ]
data2 <- data.frame(Mr = rep(0, 1309))
for (i in dictionary$Words) data2[, i] <- 0
for (i in 1:nrow(data)) {
    n = gsub(""[.,\""()/]"", """", data$Name[i])
    n = gsub("" . |  "", "" "", n)
    n = strsplit(n, "" "")[[1]]
    for (j in n) {
        if (j %in% dictionary$Words) {
            data2[i, j] = 1
        }
    }
}
s = 1:891
dictionary$Survival <- NA
for (i in 1:length(dictionary$Words)) {
    x = intersect(which(data2[, dictionary$Words[i]] > 0), s)
    dictionary$Survival[i] <- mean(data$Survive[x], na.rm = T)
}
row.names(dictionary) <- 1:nrow(dictionary)
cat(""15 most frequent Words and their survival rate:\n"")
head(data.frame(n = 1:nrow(dictionary), dictionary[order(-dictionary$Freq), ]), 15)
cat(sprintf(""%d Words in dictionary\n"", nrow(dictionary)))
dictionary$Words[order(dictionary$Words)]
data3 <- as.matrix(data2)
m = rep(0, ncol(data3))
s = rep(0, ncol(data3))
for (i in 1:ncol(data3)) {
    m[i] = mean(data3[, i])
    s[i] = sd(data3[, i])
}
data4 = (1/1309) * t(data3) %*% data3 - m %*% t(m)
data5 = data4/(s %*% t(s))
ev <- eigen(data4, symmetric = T)
ev2 <- data.frame(values = ev[[1]], vectors = ev[[2]])
cat(""Principal components and correlations have been calculated.\n\n"")
cat(""Correlations above 0.3 of Words with freq>=4 are:\n"")
for (i in 1:length(which(dictionary$Freq >= 4))) for (j in (i + 1):length(which(dictionary$Freq >= 4))) {
    if (i != j & abs(data5[i, j]) >= 0.3) 
        cat(sprintf(""%s and %s have correlation r = %f\n"", row.names(data5)[i], row.names(data5)[j], data5[i, j]))
}
library(ggplot2)
library(gridExtra)
data3Transformed = (t(ev[[2]]))[, 1:nrow(ev[[2]])] %*% t(data3)
dataPC6 = data.frame(n = 1:1309, Survived = data$Survived, t(data3Transformed)[, 1:6])
colnames(dataPC6) <- c(""PassengerId"", ""Survived"", paste(""PC"", 1:6, "" wgt"", sep = """"))
rownames(dataPC6) <- 1:1309
head(data[, c(""PassengerId"", ""Name"", ""Sex"", ""Age"")])
cat(""First 6 principal component weights for the first 6 passengers:\n"")
head(dataPC6[, -2])
library(caret)
accuracy <- matrix(nrow = 5, ncol = 5)
rownames(accuracy) <- paste(""d="", 3:7, sep = """")
colnames(accuracy) <- paste(""k="", c(7, 9, 11, 13, 15), sep = """")
for (d in 1:5) {
    xt = (t(ev[[2]]))[1:(d + 2), 1:nrow(ev[[2]])] %*% t(data3)
    dataPC = data.frame(Survived = data$Survived, t(xt))
    for (k in 1:5) {
        trials = 100
        total = 0
        for (i in 1:trials) {
            s = sample(1:891, 802)
            s2 = (1:891)[-s]
            model <- knn3(factor(Survived) ~ ., dataPC[s, ], k = 2 * k + 5)
            p <- predict(model, newdata = dataPC[s2, ])
            p <- ifelse(p[, 2] >= 0.5, 1, 0)
            x = 1 - sum(abs(dataPC$Survived[s2] - p))/length(s2)
            total = total + x
        }
        accuracy[d, k] <- total/trials
    }
}
cat(""Cross validation accuracy using 10-fold CV:\n"")
accuracy
d = 5
k = 11
xt = (t(ev[[2]]))[1:d, 1:nrow(ev[[2]])] %*% t(data3)
dataPC = data.frame(Survived = data$Survived, t(xt))
model <- knn3(factor(Survived) ~ ., dataPC[1:891, ], k = k)
p <- predict(model, newdata = dataPC[892:1309, ])
p <- ifelse(p[, 2] >= 0.5, 1, 0)
submit = data.frame(PassengerId = 892:1309, Survived = p)
write.csv(submit, ""PCA5kNN11.csv"", row.names = F)
pimage <- function(x) {
    return(ggplot(data = ev2) + geom_line(aes(x = 1:length(ev2[[x + 1]]), y = ev2[[x + 1]])) + labs(x = """", y = """", title = paste(""PC"", x, sep = """")))
}
x = 0
grid.arrange(pimage(x + 1), pimage(x + 2), pimage(x + 3), pimage(x + 4), pimage(x + 5), pimage(x + 6), pimage(x + 7), pimage(x + 8), pimage(x + 9), pimage(x + 10), pimage(x + 11), pimage(x + 12), as.table = F)
x = 99
grid.arrange(pimage(x + 1), pimage(x + 2), pimage(x + 3), pimage(x + 4), pimage(x + 5), pimage(x + 6), pimage(x + 7), pimage(x + 8), pimage(x + 9), pimage(x + 10), pimage(x + 11), pimage(x + 12), as.table = F)
prep <- function(data, s) {
    x = c()
    y = c()
    z = c()
    for (i in 1:nrow(data)) for (j in 1:ncol(data)) {
        x = c(x, s * j)
        y = c(y, s * i)
        z = c(z, data[i, j])
    }
    return(data.frame(x = x, y = y, z = z))
}
x = diag(nrow(data5))
g1 = ggplot(prep(x[4 * 1:100, 4 * 1:100], 4), aes(x, y)) + geom_raster(aes(fill = z)) + ylim(400, 0) + labs(title = ""Words in dictionary"", x = """", y = """")
d = 5
x = diag(nrow(data5))
xt = (t(ev[[2]]))[1:d, 1:nrow(ev[[2]])] %*% x
x2 = ev[[2]][1:nrow(ev[[2]]), 1:d] %*% xt
g2 = ggplot(prep(x2[1:10, 1:10], 1), aes(x, y)) + geom_raster(aes(fill = z)) + ylim(10, 0) + labs(title = ""Words recreated from 5 PC"", x = """", y = """")
d = 10
xt = (t(ev[[2]]))[1:d, 1:nrow(ev[[2]])] %*% x
x2 = ev[[2]][1:nrow(ev[[2]]), 1:d] %*% xt
g3 = ggplot(prep(x2[1:20, 1:20], 1), aes(x, y)) + geom_raster(aes(fill = z)) + ylim(20, 0) + labs(title = ""Words recreated from 10 PC"", x = """", y = """")
d = 25
xt = (t(ev[[2]]))[1:d, 1:nrow(ev[[2]])] %*% x
x2 = ev[[2]][1:nrow(ev[[2]]), 1:d] %*% xt
g4 = ggplot(prep(x2[1:50, 1:50], 1), aes(x, y)) + geom_raster(aes(fill = z)) + ylim(50, 0) + labs(title = ""Words recreated from 25 PC"", x = """", y = """")
grid.arrange(g1, g2, g3, g4, nrow = 2, ncol = 2)
d = 50
xt = (t(ev[[2]]))[1:d, 1:nrow(ev[[2]])] %*% x
x2 = ev[[2]][1:nrow(ev[[2]]), 1:d] %*% xt
g5 = ggplot(prep(x2[1:100, 1:100], 1), aes(x, y)) + geom_raster(aes(fill = z)) + ylim(100, 0) + labs(title = ""Words recreated from 50 PC"", x = """", y = """")
d = 100
xt = (t(ev[[2]]))[1:d, 1:nrow(ev[[2]])] %*% x
x2 = ev[[2]][1:nrow(ev[[2]]), 1:d] %*% xt
g6 = ggplot(prep(x2[2 * 1:100, 2 * 1:100], 2), aes(x, y)) + geom_raster(aes(fill = z)) + ylim(200, 0) + labs(title = ""Words recreated from 100 PC"", x = """", y = """")
d = 200
xt = (t(ev[[2]]))[1:d, 1:nrow(ev[[2]])] %*% x
x2 = ev[[2]][1:nrow(ev[[2]]), 1:d] %*% xt
g7 = ggplot(prep(x2[4 * 1:100, 4 * 1:100], 4), aes(x, y)) + geom_raster(aes(fill = z)) + ylim(400, 0) + labs(title = ""Words recreated from 200 PC"", x = """", y = """")
d = 300
xt = (t(ev[[2]]))[1:d, 1:nrow(ev[[2]])] %*% x
x2 = ev[[2]][1:nrow(ev[[2]]), 1:d] %*% xt
g8 = ggplot(prep(x2[4 * 1:100, 4 * 1:100], 4), aes(x, y)) + geom_raster(aes(fill = z)) + ylim(400, 0) + labs(title = ""Words recreated from 300 PC"", x = """", y = """")
grid.arrange(g5, g6, g7, g8, nrow = 2, ncol = 2)
getmode <- function(v) {
    uniqv <- unique(v)
    uniqv[which.max(tabulate(match(v, uniqv)))]
}
Position <- vector(""list"", length = nrow(dictionary))
for (i in 1:nrow(data)) {
    n = gsub(""[.,\""()/]"", """", data$Name[i])
    n = gsub("" . |  "", "" "", n)
    n = strsplit(n, "" "")[[1]]
    for (j in 1:length(n)) {
        k = which(dictionary$Words == n[j])[1]
        if (!is.na(k)) 
            Position[[k]] = c(Position[[k]], j)
    }
}
dictionary$Position <- NULL
for (i in 1:nrow(dictionary)) dictionary$Position[i] <- getmode(Position[[i]])
dictionary$Position <- pmin(4, dictionary$Position)
ggplot(data = dictionary) + geom_jitter(height = 0.005, aes(x = 1:nrow(dictionary), y = dictionary$Survival, color = factor(dictionary$Position))) + scale_colour_manual(values = c(""red"", ""black"", ""blue"", ""white""), labels = c(""1"", ""2"", ""3"", ""4+"")) + geom_hline(yintercept = 0.384, linetype = ""dotted"") + geom_vline(xintercept = 45) + geom_vline(xintercept = 57) + geom_vline(xintercept = 80) + geom_vline(xintercept = 115) + geom_vline(xintercept = 187) + geom_vline(xintercept = 6) + annotate(""text"", 
    x = -15, y = 0.87, label = ""n<=6\nfreq\n>=35"") + annotate(""text"", x = 98, y = 0.87, label = ""freq\n>=4"", color = ""gray70"") + annotate(""text"", x = 25, y = 0.87, label = ""freq\n>=7"", color = ""gray70"") + annotate(""text"", x = 143, y = 0.87, label = ""n>=116\nfreq<=3"") + annotate(""text"", x = 215, y = 0.87, label = ""n>=188\nfreq<=2"") + annotate(""text"", x = 305, y = 0.36, label = ""p = 0.384 = probability of survival"") + labs(x = ""Words order by frequency"") + labs(title = ""Each dot represents a Word in the dictionary."") + 
    labs(y = ""Probability Survival given Word"", color = ""word's\nposition\nin name"")
logl <- function(p) {
    e = 0.001
    q = 1 - p
    return(log(max(p, e)) - log(max(q, e)))
}
ilogit <- function(z) {
    return(1/(1 + exp(-z)))
}
trials = 100
total = 0
for (k in 1:trials) {
    if (k%%25 == 0) 
        cat(sprintf(""Begin trial %d\n completed"", k))
    s = sample(1:891, 802)
    s2 = (1:891)[-s]
    dictionary$Survival <- NA
    dictionary$Tfreq <- 0
    for (i in 1:length(dictionary$Words)) {
        x = intersect(which(data2[, dictionary$Words[i]] > 0), s)
        dictionary$Survival[i] <- mean(data$Survive[x], na.rm = T)
        dictionary$Tfreq[i] <- length(x)
    }
    dictionary$Survival[is.na(dictionary$Survival)] <- NA
    dictionary$Tfreq[is.na(dictionary$Tfreq)] <- NA
    dictionary$Logl <- sapply(dictionary$Survival, FUN = logl)
    ps = sum(data$Survived[s])/length(s)
    bias = logl(1 - ps)
    dictionary2 <- dictionary[dictionary$Tfreq >= 4, ]
    p = rep(0, 891 - length(s))
    for (j in 1:length(s2)) {
        c = 0
        slogl = 0
        for (i in 1:nrow(dictionary2)) {
            if (data2[s2[j], dictionary2$Words[i]] > 0 & !is.na(dictionary2$Survival[i])) {
                slogl = slogl + dictionary2$Logl[i]
                if (c > 0) 
                  slogl = slogl + bias
                c = 1
            }
        }
        if (c != 0) 
            p[j] = ilogit(slogl)
        else p[j] = ps
        if (k%%25 == 0 & j%%10 == 0) 
            cat(sprintf("" j=%d "", j))
    }
    p <- ifelse(p >= 0.5, 1, 0)
    x = 1 - sum(abs(data$Survived[s2] - p))/length(s2)
    if (k%%25 == 0) 
        cat(sprintf(""\n Trial %d has CV accuracy %f\n"", k, x))
    total = total + x
}
cat(sprintf(""Average CV accuracy of %d trials is %f\n"", trials, total/trials))",0,0,1,0,0,0,0,1,0,0,0,0,0,0
175,danr87946-titanic-practice,0.758,"['as.data.frame', 'library', 'bind_rows', 'rpart', 'predict', 'read.csv', 'write.csv']","['randomForest', 'rpart', 'dplyr', 'base']",0.575852870941162,"['predict', 'write.csv', 'bind_rows', 'read.csv', 'rpart', 'library', 'as.data.frame']",[],"['jaimisk-titanic-survival-logistic-regression', 'rkumar3147-exploring-survival-on-the-titanic1', 'vizcharlie-exploring-survival-on-the-titanic', 'hertan-titanic-surviving-dataset-simple-expression', 'tsfitz-titanic', 'cganxs-is-62-the-right-titanic-model-threshold', 'brirush-svm-for-titanic', 'arjunmalhotra-titanic', 'scout16-titanic-disaster-in-r', 'lagprophet-titanic']","[0.4638214068249541, 0.4351883723512042, 0.4351883723512042, 0.3925534225382595, 0.39029537783266205, 0.37319435345051577, 0.3635458607859464, 0.36226306439973566, 0.3612286000731338, 0.36118113068163005]","{'package:base': ['as.data.frame', 'library'], 'package:dplyr': ['bind_rows'], 'package:rpart': ['rpart'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.data.frame"", ""library""], ""package:dplyr"": [""bind_rows""], ""package:rpart"": [""rpart""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase asdataframe library packagedplyr bindrows packagerpart rpart packagestats predict packageutils readcsv writecsv,"library(randomForest)
library(rpart)
library(""dplyr"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
tree <- rpart(Survived ~ Pclass + Age + Sex + Embarked + SibSp + Parch + Fare, data = train, method = ""class"")
pred <- predict(tree, test, type = ""class"")
PassengerId <- test$PassengerId
output.df <- as.data.frame(PassengerId)
output.df$Survived <- pred
write.csv(output.df, file = ""out.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
176,pliptor-optimal-titanic-for-pclass-only-0-65550,0.6990000000000001,"['filter', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'data.frame', 'dir.exists', 'ifelse', 'is.na', 'length', 'library', 'ls', 'nrow', 'paste0', 'print', 'rbind', 'rep', 'return', 'rm', 'sprintf', 'sum', 'count', 'select', 'aes', 'geom_bar', 'ggplot', 'labs', 'xlab', 'grid.arrange', 'read.csv', 'write.csv']","['ggplot2', 'gridExtra', 'dplyr', 'base']",1.2044861316680902,"['labs', 'nrow', 'sprintf', 'is.na', 'print', 'count', 'filter', 'rep', 'xlab', 'dir.exists', 'geom_bar', 'grid.arrange', 'length', 'read.csv', 'paste0', 'return', 'rm', 'aes', 'rbind', 'ifelse', 'sum', 'ls', 'write.csv', 'data.frame', 'ggplot', 'user defined', 'library', 'select']",[],"['pliptor-optimal-titanic-for-gender-only-0-7655', 'divyabudale-conditional-inference-tree-model-titanic', 'cbrioso-titanic-rf', 'erskumars-titanic-survival-eda-and-survival-rate-prediction', 'amodi8-titanic-exploring-survival-using-machine-learning', 'stevencahill-titanic-machine-learning-from-disaster', 'zhaotianjing-titanic', 'scout16-titanic-disaster-in-r', 'sudheer464-prediction-1-on-titanic-dataset', 'sawajid-titanic-test']","[0.7296790630680949, 0.6778479973531439, 0.3254056712857587, 0.11665990493901651, 0.10899312548900927, 0.10442988673618156, 0.10427817186497389, 0.10310151966075456, 0.10302285952753797, 0.10203472296947265]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'character(0)': ['load_data'], 'package:base': ['data.frame', 'dir.exists', 'ifelse', 'is.na', 'length', 'library', 'ls', 'nrow', 'paste0', 'print', 'rbind', 'rep', 'return', 'rm', 'sprintf', 'sum'], 'package:dplyr': ['count', 'select'], 'package:ggplot2': ['aes', 'geom_bar', 'ggplot', 'labs', 'xlab'], 'package:gridExtra': ['grid.arrange'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""character(0)"": [""load_data""], ""package:base"": [""data.frame"", ""dir.exists"", ""ifelse"", ""is.na"", ""length"", ""library"", ""ls"", ""nrow"", ""paste0"", ""print"", ""rbind"", ""rep"", ""return"", ""rm"", ""sprintf"", ""sum""], ""package:dplyr"": [""count"", ""select""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""ggplot"", ""labs"", ""xlab""], ""package:gridExtra"": [""grid.arrange""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackagedplyr packagestats filter character0 loaddata packagebase dataframe direxists ifelse isna length library ls nrow paste0 print rbind rep return rm sprintf sum packagedplyr count select packageggplot2 aes geombar ggplot labs xlab packagegridExtra gridarrange packageutils readcsv writecsv,"rm(list = ls())
library(ggplot2)
library(gridExtra)
library(dplyr)
path <- ""../data/""
if (!dir.exists(path)) {
    path <- ""../input/""
}
load_data <- function(file) {
    return(read.csv(paste0(path, file)))
}
train <- load_data(""train.csv"")
test <- load_data(""test.csv"")
test$Survived <- rep(NA, nrow(test))
comb <- rbind(train, test)
train_index <- comb$PassengerId[!is.na(comb$Survived)]
test_index <- comb$PassengerId[is.na(comb$Survived)]
comb$Set <- ifelse(comb$PassengerId %in% train_index, ""Train"", ""Test"")
dftotal <- comb %>% filter(Survived == 0 | Survived == 1) %>% select(Survived, Pclass, Set)
dfsurvived <- comb %>% filter(Survived == 1) %>% select(Survived, Pclass, Set)
dftotal$count <- ""Total""
dfsurvived$count <- ""Survived""
df <- rbind(dftotal, dfsurvived)
plot1 <- ggplot(df, aes(Pclass, fill = count)) + geom_bar(position = ""dodge"") + labs(title = ""Survival per Class"") + xlab(""Class"")
pop_count <- dftotal %>% count(Pclass)
pop_surv_count <- dfsurvived %>% count(Pclass)
surv_likelihood <- pop_surv_count$n/pop_count$n
comb$Prediction <- ifelse(surv_likelihood[comb$Pclass] > 0.5, 1, 0)
weight <- ifelse(comb$Set == ""Train"", 100/length(train_index), 100/length(test_index))
plot2 <- ggplot(comb, aes(x = Pclass, fill = Set)) + geom_bar(position = ""dodge"", aes(weight = weight)) + labs(title = ""Pclass Distribution"", x = ""Pclass"", y = ""Percent"")
test_pop_count <- comb[test_index, ] %>% count(Pclass)
accuracy <- ifelse(surv_likelihood > 0.5, surv_likelihood, 1 - surv_likelihood)
lb <- 0.6555
print(sprintf(""Estimated score from train set                 %2.4f "", sum(comb$Survived == comb$Prediction, na.rm = T)/length(train_index)))
print(sprintf(""Optimal Pclass only predicted score            %2.4f "", sum(test_pop_count$n * accuracy)/sum(test_pop_count$n)))
print(sprintf(""Actual leader board (LB) score on the test set %2.4f "", lb))
print(sprintf(""Train set relative overstimation on LB         %2.4f "", (sum(test_pop_count$n * accuracy)/sum(test_pop_count$n)/lb)))
submit <- data.frame(PassengerId = test_index, Survived = comb$Prediction[test_index])
write.csv(submit, file = paste0(""class_only.csv""), row.names = FALSE, quote = F)
grid.arrange(plot1, plot2, ncol = 1)",0,0,0,0,0,0,0,0,0,0,0,0,0,0
177,wongalan2002-titanic-with-neural-network,0.713,"['as.factor', 'c', 'data.frame', 'factor', 'is.na', 'library', 'rbind', 'sapply', 'strsplit', 'toString', 'nnet', 'rpart', 'median', 'predict', 'read.csv', 'write.csv']","['randomForest', 'readr', 'rpart', 'nnet', 'base']",8.04981207847595,"['nnet', 'rbind', 'factor', 'toString', 'predict', 'write.csv', 'median', 'data.frame', 'strsplit', 'read.csv', 'rpart', 'as.factor', 'library', 'sapply', 'c', 'is.na']",[],"['wongalan2002-titanic-with-neural-network', 'frankfeng-titanic', 'aer503-titanic-exploring-survival-and-random-forest-test', 'juverstraeten-titanic-test-5-decision-tree-w-cabin', 'parthchaudhary-titanic-submission', 'srinivasarajui-srini-s-r-titanic-solution', 'alwortman-titanic-test-script', 'zahraatashgahy-r-titanic-1', 'goblin-titanic-test', 'turntrout-titanic-data-exploration']","[0.9999999999999999, 0.9492054290089966, 0.9248856674142248, 0.8520248535986806, 0.6572245074309012, 0.6345993166496086, 0.6159151482263416, 0.1673876980078698, 0.15715544494672387, 0.15579541680527723]","{'package:base': ['as.factor', 'c', 'data.frame', 'factor', 'is.na', 'library', 'rbind', 'sapply', 'strsplit', 'toString'], 'package:nnet': ['nnet'], 'package:rpart': ['rpart'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.factor"", ""c"", ""data.frame"", ""factor"", ""is.na"", ""library"", ""rbind"", ""sapply"", ""strsplit"", ""toString""], ""package:nnet"": [""nnet""], ""package:rpart"": [""rpart""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase asfactor c dataframe factor isna library rbind sapply strsplit toString packagennet nnet packagerpart rpart packagestats median predict packageutils readcsv writecsv,"library(randomForest)
library(readr)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
train_temp <- train
train$Survived <- NULL
all_data <- rbind(train, test)
all_data$Embarked[c(62, 830)] <- ""S""
all_data$Embarked <- factor(all_data$Embarked)
all_data$Fare[1044] <- median(all_data$Fare, na.rm = TRUE)
all_data$Title <- sapply(all_data$Name, FUN = function(x) {
    strsplit(toString(x), split = ""[,.]"")[[1]][2]
})
all_data$Title <- as.factor(all_data$Title)
library(rpart)
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title, data = all_data[!is.na(all_data$Age), ], method = ""anova"")
all_data$Age[is.na(all_data$Age)] <- predict(predicted_age, all_data[is.na(all_data$Age), ])
train <- all_data[1:891, ]
test <- all_data[892:1309, ]
train$Survived <- train_temp$Survived
library(nnet)
model_final <- nnet(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title, data = train, size = 35, maxit = 10000)
my_prediction <- predict(model_final, test, type = ""class"")
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = ""my_solution.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
178,frank5547-my-solution-to-titanic-for-now,0.7609999999999999,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.factor', 'as.numeric', 'c', 'cbind', 'data.frame', 'is.na', 'length', 'library', 'list', 'set.seed', 'subset', 'summary', 'createFolds', 'resamples', 'train', 'trainControl', 'plot', 'bwplot', 'rpart.plot', 'median', 'predict', 'read.csv', 'write.csv']","['caret', 'rpart.plot', 'base']",8.05809879302979,"['list', 'median', 'as.character', 'subset', 'is.na', 'resamples', 'createFolds', 'as.factor', 'summary', 'set.seed', 'length', 'read.csv', 'train', 'c', 'bwplot', 'as.numeric', 'plot', 'predict', 'write.csv', 'data.frame', 'rpart.plot', 'user defined', 'library', 'trainControl', 'cbind']",[],"['preritsaxena-fork-of-ml-basics-on-titanic-data', 'erskumars-titanic-survival-eda-and-survival-rate-prediction', 'peggy88-titanic-data-eda-by-peggy', 'parthchaudhary-titanic-submission', 'pranavsid-analyzing-the-titanic-disaster', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'vishaljindal0-titanic-r-code', 'devanshugupta27-predicting-the-titanic-survival-rate']","[0.1634151452607476, 0.1230456497043552, 0.11350185889188055, 0.10766000909535113, 0.08502455342694556, 0.08116094234296033, 0.07881446146743061, 0.07881446146743061, 0.07835685991192115, 0.0774399916769887]","{'character(0)': ['impute_median'], 'package:base': ['as.character', 'as.factor', 'as.numeric', 'c', 'cbind', 'data.frame', 'is.na', 'length', 'library', 'list', 'set.seed', 'subset', 'summary'], 'package:caret': ['createFolds', 'resamples', 'train', 'trainControl'], 'package:graphics': ['plot'], 'package:lattice': ['bwplot'], 'package:rpart.plot': ['rpart.plot'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""impute_median""], ""package:base"": [""as.character"", ""as.factor"", ""as.numeric"", ""c"", ""cbind"", ""data.frame"", ""is.na"", ""length"", ""library"", ""list"", ""set.seed"", ""subset"", ""summary""], ""package:caret"": [""createFolds"", ""resamples"", ""train"", ""trainControl""], ""package:graphics"": [""plot""], ""package:lattice"": [""bwplot""], ""package:rpart.plot"": [""rpart.plot""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 imputemedian packagebase ascharacter asfactor asnumeric c cbind dataframe isna length library list setseed subset summary packagecaret createFolds resamples train trainControl packagegraphics plot packagelattice bwplot packagerpartplot rpartplot packagestats median predict packageutils readcsv writecsv,"library(caret)
library(rpart.plot)
impute_median <- function(x) {
    ind_na <- is.na(x)
    x[ind_na] <- median(x[!ind_na])
    as.numeric(x)
}
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE, na.strings = """")
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE, na.strings = """")
train2 <- subset(train, select = c(2, 3, 5, 6, 7, 8))
test2 <- subset(test, select = c(2, 4, 5, 6, 7, 8))
firstClass <- c()
secondClass <- c()
thirdClass <- c()
for (k in 1:length(train2$Pclass)) {
    if (train2$Pclass[k] == 1) {
        firstClass <- c(firstClass, 1)
    }
    else {
        firstClass <- c(firstClass, 0)
    }
    if (train2$Pclass[k] == 2) {
        secondClass <- c(secondClass, 1)
    }
    else {
        secondClass <- c(secondClass, 0)
    }
    if (train2$Pclass[k] == 3) {
        thirdClass <- c(thirdClass, 1)
    }
    else {
        thirdClass <- c(thirdClass, 0)
    }
}
train3 <- subset(train, select = c(2, 5, 6, 7, 8))
train4 <- cbind(train3, firstC = firstClass, secondC = secondClass, thirdC = thirdClass)
for (k in 1:length(train4$Sex)) {
    if (train4$Sex[k] == ""female"") {
        train4$Sex[k] <- 0
    }
    if (train4$Sex[k] == ""male"") {
        train4$Sex[k] <- 1
    }
}
firstClass2 <- c()
secondClass2 <- c()
thirdClass2 <- c()
for (k in 1:length(test2$Pclass)) {
    if (test2$Pclass[k] == 1) {
        firstClass2 <- c(firstClass2, 1)
    }
    else {
        firstClass2 <- c(firstClass2, 0)
    }
    if (test2$Pclass[k] == 2) {
        secondClass2 <- c(secondClass2, 1)
    }
    else {
        secondClass2 <- c(secondClass2, 0)
    }
    if (test2$Pclass[k] == 3) {
        thirdClass2 <- c(thirdClass2, 1)
    }
    else {
        thirdClass2 <- c(thirdClass2, 0)
    }
}
test3 <- subset(test, select = c(4, 5, 6, 7))
test4 <- cbind(test3, firstC = firstClass2, secondC = secondClass2, thirdC = thirdClass2)
for (k in 1:length(test4$Sex)) {
    if (test4$Sex[k] == ""female"") {
        test4$Sex[k] <- 0
    }
    if (test4$Sex[k] == ""male"") {
        test4$Sex[k] <- 1
    }
}
set.seed(42)
y <- train$Survived
for (x in 1:length(y)) {
    if (y[x] == 1) {
        y[x] <- ""yes""
    }
    if (y[x] == 0) {
        y[x] <- ""no""
    }
}
myFolds <- createFolds(y, k = 3)
myControl <- trainControl(summaryFunction = twoClassSummary, classProbs = TRUE, verboseIter = TRUE, savePredictions = TRUE, index = myFolds)
train4 <- subset(train4, select = c(2, 3, 4, 5, 6, 7, 8))
model_glm <- train(x = train4, y = as.factor(y), method = ""glm"", trControl = myControl, preProcess = c(""medianImpute"", ""center"", ""scale""))
model_glm2 <- train(x = train4, y = as.factor(y), method = ""glm"", trControl = myControl, preProcess = ""knnImpute"")
model_glm3 <- train(x = train4, y = as.factor(y), method = ""glm"", trControl = myControl, preProcess = c(""knnImpute"", ""center"", ""scale"", ""pca""))
age <- impute_median(train4$Age)
ageSex <- c()
for (k in 1:length(age)) {
    ageSex[k] <- age[k] * as.numeric(train4$Sex[k])
}
trainT <- data.frame(Age = age, sex = train4$Sex, fClass = train4$firstC, sClass = train4$secondC, tClass = train4$thirdC, Sibp = train4$SibSp, Parch = train4$Parch, ageSex = ageSex)
model_ranger <- train(x = trainT, y = y, method = ""rf"", metric = ""ROC"", trControl = myControl)
trainT <- cbind(y, trainT)
model_decisionTree <- train(y ~ ., trainT, method = ""rpart"", metric = ""ROC"", trControl = myControl)
model_list <- list(item1 = model_glm2, item2 = model_ranger)
resamples <- resamples(model_list)
summary(resamples)
bwplot(resamples, metric = ""ROC"")
plot(model_ranger$finalModel)
rpart.plot(model_decisionTree$finalModel)
age2 <- impute_median(test4$Age)
ageSex2 <- c()
for (k in 1:length(age2)) {
    ageSex2[k] <- age2[k] * as.numeric(test4$Sex[k])
}
test5 <- data.frame(sex = test4$Sex, Age = age2, fClass = firstClass2, sClass = secondClass2, tClass = thirdClass2, Sibp = test4$SibSp, Parch = test4$Parch, ageSex = ageSex2)
p <- predict(model_ranger, test5, type = ""raw"")
p <- as.character(p)
for (k in 1:length(p)) {
    if (p[k] == ""yes"") {
        p[k] <- 1
    }
    if (p[k] == ""no"") {
        p[k] <- 0
    }
}
p <- as.numeric(p)
write.csv(data.frame(PassengerId = test$PassengerId, Survived = p), file = ""Submission8.csv"")",0,0,1,0,0,0,0,1,0,1,0,0,0,0
181,maza91-titanic-neural-network-try,0.7609999999999999,"['user defined', 'apply', 'as.data.frame', 'as.factor', 'as.numeric', 'c', 'colnames', 'factor', 'gsub', 'is.na', 'library', 'rbind', 'scale', 'set.seed', 'strsplit', 'sum', 'fread', 'plot', 'compute', 'neuralnet', 'rpart', 'as.formula', 'median', 'predict', 'str', 'write.csv']","['data.table', 'rpart', 'neuralnet', 'base']",1.0981729030609102,"['as.formula', 'median', 'is.na', 'rpart', 'as.factor', 'compute', 'str', 'set.seed', 'gsub', 'neuralnet', 'factor', 'colnames', 'apply', 'scale', 'as.data.frame', 'fread', 'c', 'rbind', 'as.numeric', 'sum', 'plot', 'predict', 'write.csv', 'strsplit', 'user defined', 'library']",[],"['maza91-titanic-logistic-regression', 'domini-titanic-data-exploration-and-modelling', 'djohnbar-titanic-rf', 'djohnbar-fork-of-titanic-rf-w-titles', 'harsh2-exploring-the-titanic-dataset', 'zahoorahmad-titanic-2nd-degree-families-and-majority-voting', 'ushasri-titanic-2nd-degree-families-and-majority-voting', 'erikbruin-titanic-2nd-degree-families-and-majority-voting', 'ablearcher-my-titanic', 'ravikrishnareddy-titanic-survival-prediction']","[0.8229330906887993, 0.6585694184098266, 0.6555547144006655, 0.6399695187484269, 0.6363115061445623, 0.6299151143849983, 0.6299151143849983, 0.6295506939107727, 0.6252252312803988, 0.6243069088839764]","{'character(0)': ['.', '`:=`'], 'package:base': ['apply', 'as.data.frame', 'as.factor', 'as.numeric', 'c', 'colnames', 'factor', 'gsub', 'is.na', 'library', 'rbind', 'scale', 'set.seed', 'strsplit', 'sum'], 'package:data.table': ['fread'], 'package:graphics': ['plot'], 'package:neuralnet': ['compute', 'neuralnet'], 'package:rpart': ['rpart'], 'package:stats': ['as.formula', 'median', 'predict'], 'package:utils': ['str', 'write.csv']}","{""character(0)"": [""."", ""`:=`""], ""package:base"": [""apply"", ""as.data.frame"", ""as.factor"", ""as.numeric"", ""c"", ""colnames"", ""factor"", ""gsub"", ""is.na"", ""library"", ""rbind"", ""scale"", ""set.seed"", ""strsplit"", ""sum""], ""package:data.table"": [""fread""], ""package:graphics"": [""plot""], ""package:neuralnet"": [""compute"", ""neuralnet""], ""package:rpart"": [""rpart""], ""package:stats"": [""as.formula"", ""median"", ""predict""], ""package:utils"": [""str"", ""write.csv""]}",character0   packagebase apply asdataframe asfactor asnumeric c colnames factor gsub isna library rbind scale setseed strsplit sum packagedatatable fread packagegraphics plot packageneuralnet compute neuralnet packagerpart rpart packagestats asformula median predict packageutils str writecsv,"set.seed(300)
library(data.table)
library(rpart)
library(neuralnet)
train <- fread(""../input/train.csv"", na.strings = c(""NA"", """"))
test <- fread(""../input/test.csv"", na.strings = c(""NA"", """"))
str(train)
str(test)
all <- rbind(train, test[, `:=`(Survived, 0)])
apply(all, 2, function(x) sum(is.na(x)))
all[is.na(Embarked), `:=`(Embarked, ""S"")]
all[is.na(Fare), `:=`(Fare, median(all[, Fare], na.rm = TRUE))]
all[, `:=`(FamSize, SibSp + Parch)]
all[, `:=`(Title, gsub("" "", """", strsplit(Name, split = ""[,.]"")[[1]][2])), by = PassengerId]
all[Title %in% c(""Mme"", ""Mlle""), `:=`(Title, ""Mlle"")]
all[Title %in% c(""Capt"", ""Don"", ""Major"", ""Sir""), `:=`(Title, ""Sir"")]
all[Title %in% c(""Dona"", ""Lady"", ""the Countess"", ""Jonkheer""), `:=`(Title, ""Lady"")]
all[, `:=`(Title, as.factor(Title))]
all[, `:=`(Embarked, as.factor(Embarked))]
all[, `:=`(Sex, as.factor(Sex))]
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamSize, data = all[!is.na(Age), ], method = ""anova"")
all[is.na(Age), `:=`(Age, predict(predicted_age, all[is.na(Age), ]))]
apply(all, 2, function(x) sum(is.na(x)))
all[, `:=`(Sex, as.numeric(factor(Sex)))]
all[, `:=`(Title, as.numeric(factor(Title)))]
all[, `:=`(Embarked, as.numeric(factor(Embarked)))]
maxs <- apply(all[, .(Title, Sex, Age, Pclass, FamSize, Survived)], 2, max)
mins <- apply(all[, .(Title, Sex, Age, Pclass, FamSize, Survived)], 2, min)
scaled <- as.data.frame(scale(all[, .(Title, Sex, Age, Pclass, FamSize, Survived)], center = mins, scale = maxs - mins))
train_scaled <- scaled[1:891, ]
test_scaled <- scaled[892:1309, ]
f <- as.formula(Survived ~ Title + Sex + Age + FamSize + Pclass)
nn <- neuralnet(f, data = train_scaled, hidden = 3, linear.output = F)
plot(nn)
pr.nn <- compute(nn, test_scaled[colnames(test_scaled) %in% c(""Title"", ""Sex"", ""Age"", ""FamSize"", ""Pclass"")])
test[, `:=`(Survived, (pr.nn$net.result > 0.5) * 1)]
my_solution <- test[, .(PassengerId, Survived)]
write.csv(my_solution, row.names = FALSE, file = ""my_solution.csv"")",0,1,0,0,0,0,0,0,0,1,0,0,0,0
183,karlkonz-exploring-the-titanic-dataset-with-r,0.7609999999999999,"['user defined', 'user defined', 'user defined', 'user defined', 'as.factor', 'as.matrix', 'c', 'class', 'colnames', 'data.frame', 'gsub', 'ifelse', 'is.na', 'library', 'log', 'merge', 'names', 'ncol', 'nrow', 'paste', 'rowMeans', 'sapply', 'set.seed', 'strsplit', 'subset', 'substring', 'summary', 'suppressPackageStartupMessages', 'suppressWarnings', 'table', 'which', 'plot', 'binomial', 'glm', 'median', 'predict', 'read.csv', 'str', 'write.csv']",['base'],3.49149799346924,"['nrow', 'median', 'merge', 'which', 'is.na', 'subset', 'glm', 'names', 'ncol', 'class', 'log', 'as.factor', 'summary', 'sapply', 'str', 'as.matrix', 'set.seed', 'gsub', 'colnames', 'suppressWarnings', 'read.csv', 'binomial', 'table', 'substring', 'c', 'suppressPackageStartupMessages', 'paste', 'ifelse', 'plot', 'predict', 'write.csv', 'data.frame', 'strsplit', 'user defined', 'library', 'rowMeans']",[],"['dascanvas-titanic-random-forest', 'windowbyryeol-kernel-titanic', 'somtom-titanic-random-icebergs', 'paulocressoni-titanic-using-stepwise-linear-regression', 'nithishthirmul-titanic-data-test1', 'skhawaja-titanic-disaster-survival-099', 'cnusapbo-titanic-r-code', 'prabhulingayya-titanic-prediction-using-logistic-regression', 'cbrioso-titanic-rf', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic']","[0.42571258018641656, 0.1521474659507101, 0.13001866606917634, 0.1219642199956405, 0.09857720382681613, 0.09561980681194829, 0.09551158663070472, 0.09502644472230248, 0.09490014095540543, 0.09270721029049867]","{'character(0)': ['`:=`', 'as.data.table', 'bind_rows', 'ctree', 'xgb.importance', 'xgb.plot.importance', 'xgboost'], 'package:base': ['as.factor', 'as.matrix', 'c', 'class', 'colnames', 'data.frame', 'gsub', 'ifelse', 'is.na', 'library', 'log', 'merge', 'names', 'ncol', 'nrow', 'paste', 'rowMeans', 'sapply', 'set.seed', 'strsplit', 'subset', 'substring', 'summary', 'suppressPackageStartupMessages', 'suppressWarnings', 'table', 'which'], 'package:graphics': ['plot'], 'package:stats': ['binomial', 'glm', 'median', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""character(0)"": [""`:=`"", ""as.data.table"", ""bind_rows"", ""ctree"", ""xgb.importance"", ""xgb.plot.importance"", ""xgboost""], ""package:base"": [""as.factor"", ""as.matrix"", ""c"", ""class"", ""colnames"", ""data.frame"", ""gsub"", ""ifelse"", ""is.na"", ""library"", ""log"", ""merge"", ""names"", ""ncol"", ""nrow"", ""paste"", ""rowMeans"", ""sapply"", ""set.seed"", ""strsplit"", ""subset"", ""substring"", ""summary"", ""suppressPackageStartupMessages"", ""suppressWarnings"", ""table"", ""which""], ""package:graphics"": [""plot""], ""package:stats"": [""binomial"", ""glm"", ""median"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",character0  asdatatable bindrows ctree xgbimportance xgbplotimportance xgboost packagebase asfactor asmatrix c class colnames dataframe gsub ifelse isna library log merge names ncol nrow paste rowMeans sapply setseed strsplit subset substring summary suppressPackageStartupMessages suppressWarnings table which packagegraphics plot packagestats binomial glm median predict packageutils readcsv str writecsv,"suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(xgboost))
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(Matrix))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(e1071))
suppressPackageStartupMessages(library(party))
set.seed(123456789)
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
total <- bind_rows(train, test)
total$Title <- gsub(""(.*, )|(\\..*)"", """", total$Name)
table(total$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
total$Title[total$Title == ""Mlle""] <- ""Miss""
total$Title[total$Title == ""Ms""] <- ""Miss""
total$Title[total$Title == ""Mme""] <- ""Mrs""
total$Title[total$Title %in% rare_title] <- ""Rare""
table(total$Title)
total$Embarked <- ifelse(total$Embarked == """", ""S"", total$Embarked)
total$Surname <- sapply(total$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
total$Fsize <- total$SibSp + total$Parch + 1
total$Family <- paste(total$Surname, total$Fsize, sep = ""_"")
total$FsizeD[total$Fsize == 1] <- ""NoDep""
total$FsizeD[total$Fsize < 5 & total$Fsize > 1] <- ""mDep""
total$FsizeD[total$Fsize >= 5] <- ""MDep""
total$CabinType <- ifelse(substring(total$Cabin, 1, 1) == ""A"", ""A"", ifelse(substring(total$Cabin, 1, 1) == ""B"", ""B"", ifelse(substring(total$Cabin, 1, 1) == ""C"", ""C"", ifelse(substring(total$Cabin, 1, 1) == ""D"", ""D"", ifelse(substring(total$Cabin, 1, 1) == ""E"", ""E"", ifelse(substring(total$Cabin, 1, 1) == ""F"", ""F"", ""zzz""))))))
Cabins <- total[which(total$Cabin != """" & total$Cabin != is.na(total$Cabin)), ]
ACabins <- median(Cabins[which(substring(Cabins$Cabin, 1, 1) == ""A"" & Cabins$Title != ""Master""), ]$Age, na.rm = TRUE)
BCabins <- median(Cabins[which(substring(Cabins$Cabin, 1, 1) == ""B"" & Cabins$Title != ""Master""), ]$Age, na.rm = TRUE)
CCabins <- median(Cabins[which(substring(Cabins$Cabin, 1, 1) == ""C"" & Cabins$Title != ""Master""), ]$Age, na.rm = TRUE)
DCabins <- median(Cabins[which(substring(Cabins$Cabin, 1, 1) == ""D"" & Cabins$Title != ""Master""), ]$Age, na.rm = TRUE)
ECabins <- median(Cabins[which(substring(Cabins$Cabin, 1, 1) == ""E"" & Cabins$Title != ""Master""), ]$Age, na.rm = TRUE)
FCabins <- median(Cabins[which(substring(Cabins$Cabin, 1, 1) == ""F"" & Cabins$Title != ""Master""), ]$Age, na.rm = TRUE)
GCabins <- median(Cabins[which(substring(Cabins$Cabin, 1, 1) == ""G"" & Cabins$Title != ""Master""), ]$Age, na.rm = TRUE)
MasterMedianAge <- median(total[which(total$Title == ""Master""), ]$Age, na.rm = TRUE)
MissingAge <- total[is.na(total$Age), ]
MedianS <- median(subset(total, Embarked == ""S"")$Age, na.rm = TRUE)
MedianC <- median(subset(total, Embarked == ""C"")$Age, na.rm = TRUE)
MedianQ <- median(subset(total, Embarked == ""Q"")$Age, na.rm = TRUE)
MissingAge$Age <- ifelse(substring(MissingAge$Cabin, 1, 1) == ""A"" & MissingAge$Title != ""Master"", ACabins, ifelse(substring(MissingAge$Cabin, 1, 1) == ""B"" & MissingAge$Title != ""Master"", BCabins, ifelse(substring(MissingAge$Cabin, 1, 1) == ""C"" & MissingAge$Title != ""Master"", CCabins, ifelse(substring(MissingAge$Cabin, 1, 1) == ""D"" & MissingAge$Title != ""Master"", DCabins, ifelse(substring(MissingAge$Cabin, 1, 1) == ""E"" & MissingAge$Title != ""Master"", ECabins, ifelse(substring(MissingAge$Cabin, 1, 
    1) == ""F"" & MissingAge$Title != ""Master"", FCabins, ifelse(substring(MissingAge$Cabin, 1, 1) == ""G"" & MissingAge$Title != ""Master"", GCabins, ifelse(is.na(MissingAge$Age) & MissingAge$Embarked == ""S"" & MissingAge$Title != ""Master"", MedianS, ifelse(is.na(MissingAge$Age) & MissingAge$Embarked == ""C"" & MissingAge$Title != ""Master"", MedianC, ifelse(is.na(MissingAge$Age) & MissingAge$Embarked == ""Q"" & MissingAge$Title != ""Master"", MedianQ, MasterMedianAge))))))))))
CleanTotal <- merge(total[, c(1:ncol(total))], MissingAge[, c(1, 6)], by = ""PassengerId"", all.x = TRUE)
CleanTotal$Age <- ifelse(is.na(CleanTotal$Age.x), CleanTotal$Age.y, CleanTotal$Age.x)
CleanTotal$Adult <- ifelse(CleanTotal$Age > 15, 1, 0)
CleanTotal[which(CleanTotal$PassengerId == 1044), ]$Fare <- median(CleanTotal$Fare, na.rm = TRUE)
CleanTotal$lFare <- log(CleanTotal$Fare + 0.01)
CleanTotal$lFareRange <- ifelse(CleanTotal$lFare > 3.344, ""High"", ifelse(CleanTotal$lFare > 2.851, ""Med-High"", ifelse(CleanTotal$lFare > 2.068, ""Med"", ""Low"")))
names(CleanTotal)
MLTotal <- CleanTotal[, c(""PassengerId"", ""Survived"", ""Pclass"", ""Name"", ""Sex"", ""Adult"", ""SibSp"", ""Parch"", ""Ticket"", ""Embarked"", ""Surname"", ""Family"", ""Fsize"", ""FsizeD"", ""CabinType"", ""Title"", ""lFareRange"", ""lFare"")]
LogRegTotal <- CleanTotal[, c(""PassengerId"", ""Survived"", ""Sex"", ""Adult"", ""lFare"", ""FsizeD"", ""CabinType"", ""Title"")]
LRtrain <- LogRegTotal[1:891, ]
LRtest <- LogRegTotal[892:1309, ]
LRtest <- LRtest[, -2]
MLtrain <- MLTotal[1:891, ]
MLtest <- MLTotal[892:1309, ]
MLtest <- MLtest[, -2]
str(MLtrain)
str(MLtest)
clnTrn <- suppressWarnings(sapply(data.frame(MLtrain[, -c(2, 17)]), as.numeric))
clnTst <- suppressWarnings(sapply(data.frame(MLtest[, -16]), as.numeric))
clnTrn <- as.matrix(clnTrn, sparse = TRUE)
clnTst <- as.matrix(clnTst, sparse = TRUE)
sparse_matrix_train <- clnTrn
sparse_matrix_test <- clnTst
outputMat = as.data.table(train)
output_vector = outputMat[, `:=`(Y, 0)][Survived == 1, `:=`(Y, 1)][, Y]
bst <- xgboost(data = sparse_matrix_train, label = output_vector, max.depth = 25, eta = 0.1, nthread = 2, nround = 101, objective = ""binary:logistic"")
importance <- xgb.importance(feature_names = colnames(sparse_matrix_train), model = bst)
xgb.plot.importance(importance_matrix = importance)
str(MLtrain)
cTrain <- MLtrain[, -c(1, 4, 9, 11, 12, 13, 15, 18)]
cTrain$Sex <- as.factor(cTrain$Sex)
cTrain$Title <- as.factor(cTrain$Title)
cTrain$FsizeD <- as.factor(cTrain$FsizeD)
cTrain$Embarked <- as.factor(cTrain$Embarked)
cTrain$lFareRange <- as.factor(cTrain$lFareRange)
str(cTrain)
CondForest <- ctree(Survived ~ ., data = cTrain)
plot(CondForest)
fit <- glm(Survived ~ lFare + Adult, data = LRtrain, family = binomial())
summary(fit)
str(MLtest)
cTest <- MLtest[, -c(1, 3, 8, 10, 11, 12, 14)]
cTest$Sex <- as.factor(cTest$Sex)
cTest$Title <- as.factor(cTest$Title)
cTest$FsizeD <- as.factor(cTest$FsizeD)
cTest$Embarked <- as.factor(cTest$Embarked)
cTest$lFareRange <- as.factor(cTest$lFareRange)
str(cTest)
test$predLogGLM <- predict(fit, LRtest, type = ""response"")
test$predCondForest <- predict(CondForest, cTest, type = ""response"")
test$predXGBoost <- predict(bst, clnTst, type = ""response"")
test$AvgProb <- rowMeans(data.frame(test$predLogGLM, test$predCondForest))
test
class(test$AvgProb)
test$pred <- ifelse(test$AvgProb > 0.5, 1, 0)
test
my_solution <- data.frame(test$PassengerId, test$pred)
colnames(my_solution) <- c(""PassengerId"", ""Survived"")
nrow(my_solution)
write.csv(my_solution, file = ""kaggle.csv"", row.names = FALSE)",0,0,0,0,1,0,0,0,0,0,0,0,0,0
184,atuljjoshi05-titanic-random-forest,0.7559999999999999,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",25.115578174591107,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic', 'datascikrid-exploring-survival-on-the-titanic', 'anishmayaramka-the-titanic-datset', 'aturner-exploring-survival-on-the-titanic']","[0.9975999684326176, 0.9975999684326176, 0.9975999684326176, 0.9975999684326176, 0.9975999684326176, 0.9975999684326176, 0.9975999684326176, 0.9975999684326176, 0.9975999684326176, 0.9975999684326176]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
full$Deck <- mice_output$Deck
sum(is.na(full$Age))
sum(is.na(full$Deck))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Fare + Embarked + Title + Deck + FsizeD, data = train, ntree = 500)
par(mfrow = c(1, 1))
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3, cex = 0.3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
185,ravikrishnareddy-titanic-survival-prediction,0.7509999999999999,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.factor', 'as.numeric', 'as.ordered', 'c', 'colSums', 'data.frame', 'dim', 'factor', 'grepl', 'ifelse', 'is.na', 'library', 'mapply', 'match', 'max', 'options', 'paste0', 'rbind', 'return', 'rm', 'sapply', 'seq', 'set.seed', 'sort', 'strsplit', 'substr', 'summary', 'table', 'trimws', 'unlist', 'train', 'trainControl', 'corrplot.mixed', 'group_by', 'n', 'summarise', 'fct_infreq', 'aes', 'facet_grid', 'geom_bar', 'geom_density', 'geom_histogram', 'geom_label', 'ggplot', 'labs', 'position_dodge', 'scale_x_continuous', 'theme_grey', 'grid.arrange', 'cut2', 'varImpPlot', 'cor', 'lm', 'predict', 'head', 'read.csv', 'write.csv']","['ggplot2', 'gridExtra', 'dplyr', 'forcats', 'Hmisc', 'randomForest', 'caret', 'corrplot', 'base']",16.699411153793303,"['summarise', 'as.ordered', 'labs', 'unlist', 'geom_label', 'cor', 'fct_infreq', 'is.na', 'colSums', 'sort', 'scale_x_continuous', 'options', 'lm', 'cut2', 'as.factor', 'summary', 'sapply', 'n', 'geom_histogram', 'varImpPlot', 'set.seed', 'factor', 'dim', 'match', 'position_dodge', 'max', 'geom_bar', 'grid.arrange', 'read.csv', 'paste0', 'table', 'return', 'rm', 'group_by', 'train', 'c', 'corrplot.mixed', 'aes', 'theme_grey', 'rbind', 'as.numeric', 'ifelse', 'predict', 'write.csv', 'seq', 'data.frame', 'grepl', 'strsplit', 'ggplot', 'geom_density', 'head', 'substr', 'user defined', 'library', 'trainControl', 'trimws', 'mapply', 'facet_grid']",[],"['zahoorahmad-titanic-2nd-degree-families-and-majority-voting', 'ushasri-titanic-2nd-degree-families-and-majority-voting', 'erikbruin-titanic-2nd-degree-families-and-majority-voting', 'harsh2-exploring-the-titanic-dataset', 'maza91-titanic-logistic-regression', 'aeintngon-titanic-exploratory-analysis', 'domini-titanic-data-exploration-and-modelling', 'djohnbar-titanic-rf', 'ablearcher-my-titanic', 'djohnbar-fork-of-titanic-rf-w-titles']","[0.7758378373114984, 0.7758378373114984, 0.7758320324463651, 0.755388322076559, 0.7402755390613335, 0.7398404707988901, 0.7238795496310172, 0.703508643659585, 0.6995209347995648, 0.6909517560666182]","{'character(0)': ['pretty_breaks', 'set'], 'package:base': ['as.factor', 'as.numeric', 'as.ordered', 'c', 'colSums', 'data.frame', 'dim', 'factor', 'grepl', 'ifelse', 'is.na', 'library', 'mapply', 'match', 'max', 'options', 'paste0', 'rbind', 'return', 'rm', 'sapply', 'seq', 'set.seed', 'sort', 'strsplit', 'substr', 'summary', 'table', 'trimws', 'unlist'], 'package:caret': ['train', 'trainControl'], 'package:corrplot': ['corrplot.mixed'], 'package:dplyr': ['group_by', 'n', 'summarise'], 'package:forcats': ['fct_infreq'], 'package:ggplot2': ['aes', 'facet_grid', 'geom_bar', 'geom_density', 'geom_histogram', 'geom_label', 'ggplot', 'labs', 'position_dodge', 'scale_x_continuous', 'theme_grey'], 'package:gridExtra': ['grid.arrange'], 'package:Hmisc': ['cut2'], 'package:randomForest': ['varImpPlot'], 'package:stats': ['cor', 'lm', 'predict'], 'package:utils': ['head', 'read.csv', 'write.csv']}","{""character(0)"": [""pretty_breaks"", ""set""], ""package:base"": [""as.factor"", ""as.numeric"", ""as.ordered"", ""c"", ""colSums"", ""data.frame"", ""dim"", ""factor"", ""grepl"", ""ifelse"", ""is.na"", ""library"", ""mapply"", ""match"", ""max"", ""options"", ""paste0"", ""rbind"", ""return"", ""rm"", ""sapply"", ""seq"", ""set.seed"", ""sort"", ""strsplit"", ""substr"", ""summary"", ""table"", ""trimws"", ""unlist""], ""package:caret"": [""train"", ""trainControl""], ""package:corrplot"": [""corrplot.mixed""], ""package:dplyr"": [""group_by"", ""n"", ""summarise""], ""package:forcats"": [""fct_infreq""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""geom_bar"", ""geom_density"", ""geom_histogram"", ""geom_label"", ""ggplot"", ""labs"", ""position_dodge"", ""scale_x_continuous"", ""theme_grey""], ""package:gridExtra"": [""grid.arrange""], ""package:Hmisc"": [""cut2""], ""package:randomForest"": [""varImpPlot""], ""package:stats"": [""cor"", ""lm"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""write.csv""]}",character0 prettybreaks set packagebase asfactor asnumeric asordered c colSums dataframe dim factor grepl ifelse isna library mapply match max options paste0 rbind return rm sapply seq setseed sort strsplit substr summary table trimws unlist packagecaret train trainControl packagecorrplot corrplotmixed packagedplyr groupby n summarise packageforcats fctinfreq packageggplot2 aes facetgrid geombar geomdensity geomhistogram geomlabel ggplot labs positiondodge scalexcontinuous themegrey packagegridExtra gridarrange packageHmisc cut2 packagerandomForest varImpPlot packagestats cor lm predict packageutils head readcsv writecsv,"knitr::opts_chunk$set(echo = TRUE)
options(width = 100)
library(ggplot2)
library(gridExtra)
library(dplyr)
library(forcats)
library(Hmisc)
library(randomForest)
library(caret)
library(corrplot)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE, na.strings = c(""NA"", """"))
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE, na.strings = c(""NA"", """"))
dim(train)
head(train)
dim(test)
head(test)
test$Survived <- NA
all <- rbind(train, test)
dim(all)
sort(colSums(is.na(all)), decreasing = TRUE)
all$Survived <- as.factor(all$Survived)
all$Pclass <- as.ordered(all$Pclass)
all$Sex <- as.factor(all$Sex)
all$Embarked[is.na(all$Embarked)] <- ""S""
all$Embarked <- as.factor(all$Embarked)
all$Fare[is.na(all$Fare)] <- 8.05
ggplot(data = all[!is.na(all$Survived), ], aes(x = Survived)) + geom_bar(stat = ""count"", aes(fill = Survived)) + geom_label(stat = ""count"", aes(label = ..count..)) + labs(x = ""not survived and survived in train data"") + theme_grey(base_size = 15)
p1 <- ggplot(data = all, aes(x = Sex)) + geom_bar(stat = ""count"", aes(fill = Sex)) + geom_label(stat = ""count"", aes(label = ..count..)) + labs(x = ""Gender ratio (total data)"")
p2 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = Sex, group = Survived)) + geom_bar(stat = ""count"", aes(fill = Survived), position = ""dodge"") + geom_label(stat = ""count"", aes(label = ..count..), size = 3, position = position_dodge(0.9)) + labs(x = ""Survived ratio by Gender"")
p3 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = Sex, fill = Survived)) + geom_bar(stat = ""count"", position = ""fill"") + labs(x = ""Survived ratio by Gender"", y = ""percent"")
grid.arrange(p1, p2, p3, ncol = 3)
p4 <- ggplot(data = all, aes(x = Pclass)) + geom_bar(stat = ""count"", aes(fill = Pclass), position = ""dodge"") + geom_label(stat = ""count"", aes(label = ..count..)) + labs(x = ""Passenger class ratio (total data)"")
p5 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = Pclass, group = Survived)) + geom_bar(stat = ""count"", aes(fill = Survived), position = ""dodge"") + geom_label(stat = ""count"", aes(label = ..count..), size = 3, position = position_dodge(0.9)) + labs(x = ""Survived ratio by Pclass"")
p6 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = Pclass, fill = Survived)) + geom_bar(stat = ""count"", position = ""fill"") + labs(x = ""Survived ratio by Pclass"", y = ""percent"")
grid.arrange(p4, p5, p6, ncol = 3)
p7 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = Pclass, group = Survived)) + geom_bar(stat = ""count"", aes(fill = Survived), position = ""dodge"") + geom_label(stat = ""count"", aes(label = ..count..), size = 3, position = position_dodge(0.9)) + labs(x = ""Survived ratio by Pclass and Gender"") + facet_grid(. ~ Sex)
p8 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = Pclass, fill = Survived)) + geom_bar(stat = ""count"", position = ""fill"") + labs(x = ""Survived ratio by Pclass and Gender"", y = ""Percent"") + facet_grid(. ~ Sex)
grid.arrange(p7, p8, ncol = 2)
p9 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = fct_infreq(Embarked))) + geom_bar(stat = ""count"", aes(fill = Embarked)) + geom_label(stat = ""count"", aes(label = ..count..)) + labs(x = ""Passengers by Embarked"")
p10 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = fct_infreq(Embarked), group = Survived)) + geom_bar(stat = ""count"", aes(fill = Survived), position = ""dodge"") + geom_label(stat = ""count"", aes(label = ..count..), position = position_dodge(0.9)) + labs(x = ""Survived ratio by Embarked"")
grid.arrange(p9, p10, ncol = 2)
all$GenderClass <- paste0(all$Sex, ""P"", all$Pclass)
all$GenderClass <- as.factor(all$GenderClass)
p9 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = GenderClass, group = Survived)) + geom_bar(stat = ""count"", aes(fill = Survived), position = ""dodge"") + geom_label(stat = ""count"", aes(label = ..count..), size = 3, position = position_dodge(0.9)) + labs(x = ""Survived ratio by GenderClass"")
p10 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = GenderClass)) + geom_bar(stat = ""count"", aes(fill = Survived), position = ""fill"") + labs(x = ""Survived ratio by GenderClass"", y = ""percent"")
grid.arrange(p9, p10, ncol = 2)
all$Title <- sapply(all$Name, function(x) {
    trimws(unlist(strsplit(x, split = ""[,.]""))[2])
})
table(all$Sex, all$Title)
all$Title[all$Title %in% c(""Don"", ""Sir"", ""Jonkheer"", ""Rev"", ""Major"", ""Col"", ""Capt"")] <- ""Mr""
all$Title[all$Title %in% c(""Lady"", ""the Countess"")] <- ""Mrs""
all$Title[all$Title %in% c(""Ms"", ""Dona"", ""Mlle"", ""Mme"")] <- ""Miss""
all$Title[all$Title == ""Dr"" & all$Sex == ""male""] <- ""Mr""
all$Title[all$Title == ""Dr"" & all$Sex == ""female""] <- ""Mrs""
table(all$Sex, all$Title)
p11 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = Pclass, group = Survived)) + geom_bar(stat = ""count"", aes(fill = Survived), position = ""dodge"") + geom_label(stat = ""count"", aes(label = ..count..), size = 3, position = position_dodge(0.9)) + labs(x = ""Survived ratio by Pclass and Title"") + facet_grid(. ~ Title)
p12 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = Pclass)) + geom_bar(stat = ""count"", aes(fill = Survived), position = ""fill"") + labs(x = ""Survived ratio by Pclass and Title"", y = ""percent"") + facet_grid(. ~ Title)
grid.arrange(p11, p12, nrow = 2)
all$TitleClass <- paste0(all$Title, ""P"", all$Pclass)
all$TitleClass <- as.factor(all$TitleClass)
p13 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = TitleClass)) + geom_bar(stat = ""count"", aes(fill = Survived), position = ""fill"") + labs(x = ""Survived ratio by TitleClass"", y = ""percent"")
grid.arrange(p13)
all$TicketPrefix <- sapply(all$Ticket, function(x) {
    trimws(unlist(strsplit(x, split = "" ""))[1])
})
HasTicketPrefix <- sapply(all$Ticket, function(x) {
    grepl(""\\D"", x)
})
all$TicketPrefix[!HasTicketPrefix] <- ""No Prefix""
all$TicketPrefix[all$TicketPrefix %in% c(""PC"")] <- ""PC""
all$TicketPrefix[!all$TicketPrefix %in% c(""PC"")] <- ""Other""
rm(HasTicketPrefix)
p14 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = TicketPrefix, group = Survived)) + geom_bar(stat = ""count"", aes(fill = Survived), position = ""dodge"") + geom_label(stat = ""count"", aes(label = ..count..), position = position_dodge(0.9)) + facet_grid(. ~ Sex)
p15 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = TicketPrefix)) + geom_bar(stat = ""count"", aes(fill = Survived), position = ""fill"") + labs(y = ""percent"")
grid.arrange(p14, p15, ncol = 2)
all$FSize <- all$SibSp + all$Parch + 1
p16 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = factor(FSize), group = Survived)) + geom_bar(stat = ""count"", aes(fill = Survived), position = ""dodge"") + geom_label(stat = ""count"", aes(label = ..count..), position = position_dodge(0.9)) + labs(x = ""Survived ratio by Family Size"")
p17 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = factor(FSize))) + geom_bar(stat = ""count"", aes(fill = Survived), position = ""fill"") + labs(x = ""Survived ratio by Family Size"", y = ""percent"")
grid.arrange(p16, p17, nrow = 2)
GroupFunction <- function(x) {
    if (x == 1) {
        return(""Solo"")
    }
    else if (x == 2) {
        return(""Duo"")
    }
    else if (x >= 3 & x <= 4) {
        return(""SmallFamily"")
    }
    else {
        return(""LargeFamily"")
    }
}
all$FSizeGroup <- sapply(all$FSize, GroupFunction)
rm(GroupFunction)
p18 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = FSizeGroup, group = Survived)) + geom_bar(stat = ""count"", aes(fill = Survived), position = ""dodge"") + geom_label(stat = ""count"", aes(label = ..count..), position = position_dodge(0.9)) + labs(x = ""Survived ratio by Family Group"")
p19 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = FSizeGroup)) + geom_bar(stat = ""count"", aes(fill = Survived), position = ""fill"") + labs(x = ""Survived ratio by Family Group"", y = ""percent"")
grid.arrange(p18, p19, ncol = 2)
PPTicket <- all %>% group_by(Ticket = all$Ticket) %>% summarise(PPTicket = n())
all$PPTicket <- PPTicket$PPTicket[match(all$Ticket, PPTicket$Ticket)]
rm(PPTicket)
all$TicketShared <- sapply(all$PPTicket, function(x) {
    ifelse(x == 1, ""Not Shared"", ""Shared"")
})
p20 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = factor(PPTicket), group = Survived)) + geom_bar(stat = ""count"", aes(fill = Survived), position = ""dodge"") + geom_label(stat = ""count"", aes(label = ..count..), position = position_dodge(0.9)) + labs(x = ""Survived ratio by Passengers per Ticket"")
p21 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = factor(PPTicket))) + geom_bar(stat = ""count"", aes(fill = Survived), position = ""fill"") + labs(x = ""Survived ratio by Passengers per Ticket"", y = ""percent"")
grid.arrange(p20, p21, nrow = 2)
p22 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = TicketShared, group = Survived)) + geom_bar(stat = ""count"", aes(fill = Survived), position = ""dodge"") + geom_label(stat = ""count"", aes(label = ..count..), position = position_dodge(0.9)) + labs(x = ""Survived ratio by Sharing Ticket"")
p23 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = TicketShared)) + geom_bar(stat = ""count"", aes(fill = Survived), position = ""fill"") + labs(x = ""Survived ratio by Sharing Ticket"", y = ""percent"")
grid.arrange(p22, p23, ncol = 2)
all$PGroupSize <- mapply(function(a, b) {
    max(a, b)
}, all$FSize, all$PPTicket)
all$PGroupSize <- as.numeric(all$PGroupSize)
GroupFunction <- function(x) {
    if (x == 1) {
        return(""Single"")
    }
    else if (x == 2) {
        return(""Duo"")
    }
    else if (x >= 3 & x <= 4) {
        return(""Group"")
    }
    else {
        return(""Large Group"")
    }
}
all$PGroup <- sapply(all$PGroupSize, GroupFunction)
rm(GroupFunction)
p24 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = factor(PGroup), group = Survived)) + geom_bar(stat = ""count"", aes(fill = Survived), position = ""dodge"") + geom_label(stat = ""count"", aes(label = ..count..), position = position_dodge(0.9)) + labs(x = ""Survived ratio by Passenger Group"")
p25 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = factor(PGroup))) + geom_bar(stat = ""count"", aes(fill = Survived), position = ""fill"") + labs(x = ""Survived ratio by Passenger Group"", y = ""percent"")
grid.arrange(p24, p25, ncol = 2)
CabinDetails <- all[!is.na(all$Cabin), c(""Ticket"", ""Cabin"")]
all$CabinModified <- CabinDetails$Cabin[match(all$Ticket, CabinDetails$Ticket)]
all$CabinModified[is.na(all$CabinModified)] <- ""N""
all$CabinPrefix <- substr(all$CabinModified, 1, 1)
all$CabinModified <- NULL
rm(CabinDetails)
p26 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = CabinPrefix, group = Survived)) + geom_bar(stat = ""count"", aes(fill = Survived), position = ""dodge"") + geom_label(stat = ""count"", aes(label = ..count..), position = position_dodge(0.9)) + labs(x = ""Survived ration by Cabin Class"")
p27 <- ggplot(data = all[!is.na(all$Survived), ], aes(x = CabinPrefix)) + geom_bar(stat = ""count"", aes(fill = Survived), position = ""fill"") + labs(x = ""Survived ration by Cabin Class"", y = ""percent"")
grid.arrange(p26, p27, nrow = 2)
all$FarePP <- all$Fare/all$PPTicket
ggplot(data = all[all$CabinPrefix != ""N"", ], aes(x = CabinPrefix, group = Pclass)) + geom_bar(stat = ""count"", aes(fill = Pclass), position = ""dodge"") + geom_label(stat = ""count"", aes(label = ..count..), position = position_dodge(0.9))
ggplot(data = all, aes(x = FarePP)) + geom_histogram(binwidth = 5, fill = ""blue"", boundary = 0) + scale_x_continuous(breaks = seq(0, 150, by = 5))
all$FareBins <- cut2(all$FarePP, g = 5)
ggplot(data = all[!is.na(all$Survived) & !is.na(all$Age), ], aes(x = Age, group = Survived)) + geom_density(alpha = 0.5, aes(fill = Survived)) + scale_x_continuous(breaks = scales::pretty_breaks(n = 10))
AgeLM <- lm(Age ~ Pclass + Title + SibSp + Parch, data = all[!is.na(all$Age), ])
summary(AgeLM)
all$AgeLM <- predict(AgeLM, newdata = all)
all$Title <- as.factor(all$Title)
all$TicketPrefix <- as.factor(all$TicketPrefix)
all$FSizeGroup <- as.factor(all$FSizeGroup)
all$TicketShared <- as.factor(all$TicketShared)
all$PGroup <- as.factor(all$PGroup)
all$CabinPrefix <- as.factor(all$CabinPrefix)
trainClean <- all[!is.na(all$Survived), c(""Survived"", ""TitleClass"", ""FarePP"", ""PGroupSize"")]
testClean <- all[is.na(all$Survived), c(""Survived"", ""TitleClass"", ""FarePP"", ""PGroupSize"")]
set.seed(2018)
model_RF <- train(x = trainClean[, -1], y = trainClean$Survived, data = trainClean, method = ""rf"", trControl = trainControl(method = ""cv"", number = 10))
model_RF
model_RF$results
varImpPlot(model_RF$finalModel)
prediction_RF <- predict(model_RF, testClean)
set.seed(2018)
model_SVM <- train(Survived ~ TitleClass + FarePP + PGroupSize, data = trainClean, method = ""svmRadial"", preProcess = c(""center"", ""scale""), trControl = trainControl(method = ""cv"", number = 10))
model_SVM
model_SVM$results
prediction_SVM <- predict(model_SVM, testClean)
set.seed(2018)
model_GBM <- train(Survived ~ TitleClass + FarePP + PGroupSize, data = trainClean, method = ""gbm"", preProcess = c(""center"", ""scale""), trControl = trainControl(method = ""cv"", number = 10), verbose = FALSE)
model_GBM
model_GBM$results
prediction_GBM <- predict(model_GBM, testClean)
testClean$RF <- as.numeric(prediction_RF) - 1
testClean$SVM <- as.numeric(prediction_SVM) - 1
testClean$GBM <- as.numeric(prediction_GBM) - 1
corrplot.mixed(cor(testClean[, c(""RF"", ""SVM"", ""GBM"")]), order = ""hclust"", tl.col = ""black"")
testClean$Sum <- testClean$RF + testClean$SVM + testClean$GBM
testClean$Majority <- ifelse(testClean$Sum <= 1, 0, 1)
submission_select <- data.frame(PassengerId = test$PassengerId, Survived = testClean$Majority)
write.csv(submission_select, file = ""Titanic_Submission.csv"", row.names = FALSE)",1,0,1,0,0,0,0,1,0,0,0,0,0,0
186,bwozniak-titanic-in-r,0.7609999999999999,"['as.factor', 'as.matrix', 'as.numeric', 'c', 'cbind', 'colnames', 'dim', 'gsub', 'ifelse', 'library', 'rbind', 'predict', 'head', 'read.csv', 'str', 'write.csv', 'xgb.DMatrix', 'xgb.importance', 'xgb.plot.importance', 'xgboost']","['xgboost', 'base']",1.34133291244507,"['xgb.importance', 'xgb.plot.importance', 'xgboost', 'as.factor', 'str', 'as.matrix', 'gsub', 'colnames', 'dim', 'read.csv', 'xgb.DMatrix', 'c', 'rbind', 'as.numeric', 'ifelse', 'predict', 'write.csv', 'head', 'library', 'cbind']",[],"['bwozniak-titanic-in-r', 'shashank74-titanic-disaster-data-exploration-and-modelling', 'jasonhit-first-script-for-kaggle-titanic', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'venkatko-titanic-survival1', 'qianbi-titanic-logistic-2', 'tetyama-trial-titanic', 'qianbi-titanic-rpart-2', 'qianbi-titanic-svm', 'abedben-exploring-survival-on-the-titanic']","[0.9999999999999999, 0.24334497561834245, 0.24158426030444546, 0.2377018242090541, 0.23755295441547777, 0.23063402979929679, 0.23000770270930174, 0.22754483117716026, 0.22734404104659722, 0.22656608797424008]","{'package:base': ['as.factor', 'as.matrix', 'as.numeric', 'c', 'cbind', 'colnames', 'dim', 'gsub', 'ifelse', 'library', 'rbind'], 'package:stats': ['predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv'], 'package:xgboost': ['xgb.DMatrix', 'xgb.importance', 'xgb.plot.importance', 'xgboost']}","{""package:base"": [""as.factor"", ""as.matrix"", ""as.numeric"", ""c"", ""cbind"", ""colnames"", ""dim"", ""gsub"", ""ifelse"", ""library"", ""rbind""], ""package:stats"": [""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""], ""package:xgboost"": [""xgb.DMatrix"", ""xgb.importance"", ""xgb.plot.importance"", ""xgboost""]}",packagebase asfactor asmatrix asnumeric c cbind colnames dim gsub ifelse library rbind packagestats predict packageutils head readcsv str writecsv packagexgboost xgbDMatrix xgbimportance xgbplotimportance xgboost,"library(xgboost)
train = read.csv(""../input/train.csv"")
test = read.csv(""../input/test.csv"")
head(train)
head(test)
full <- rbind(train[, -2], test)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
train2 <- full[1:891, ]
test <- full[892:1309, ]
train2$Survived <- train$Survived
head(train2)
head(test)
train_prep <- train2[, -c(1, 3, 8, 10)]
test_prep <- test[, -c(1, 3, 8, 10)]
head(train_prep)
head(test_prep)
str(train_prep$Embarked)
train_prep$Sex <- as.numeric(train_prep$Sex)
train_prep$Embarked <- as.numeric(train_prep$Embarked)
train_prep$Title <- as.numeric(as.factor(train_prep$Title))
trains <- as.matrix(train_prep[, -9])
head(trains)
Survived <- as.matrix(train_prep$Survived)
head(Survived)
dtrain <- xgb.DMatrix(data = trains, label = Survived)
test_prep$Sex <- as.numeric(test_prep$Sex)
test_prep$Embarked <- as.numeric(test_prep$Embarked)
test_prep$Title <- as.numeric(as.factor(test_prep$Title))
tests <- as.matrix(test_prep)
fit_xg <- xgboost(data = dtrain, nround = 5)
test_xg <- predict(fit_xg, tests)
head(test_xg)
imp <- xgb.importance(model = fit_xg)
xgb.plot.importance(importance_matrix = imp[1:20])
test_xg <- ifelse(test_xg > 0.5, 1, 0)
submission_xg <- cbind(test$PassengerId, test_xg)
colnames(submission_xg) <- c(""PassengerId"", ""Survived"")
write.csv(submission_xg, ""xgboost1.csv"", row.names = FALSE)
dim(submission_xg)",0,0,0,0,0,0,0,0,1,0,0,0,0,0
187,divy44-titanic1,0.648,"['user defined', 'user defined', 'user defined', 'user defined', 'as.factor', 'as.vector', 'c', 'I', 'ifelse', 'is.na', 'library', 'system', 'fread', 'glm', 'predict.lm', 'write.csv']","['ggplot2', 'readr', 'data.table', 'base']",0.8926320075988771,"['ifelse', 'glm', 'predict.lm', 'write.csv', 'I', 'as.vector', 'as.factor', 'user defined', 'library', 'fread', 'c', 'is.na', 'system']",[],"['scout16-titanic-disaster-in-r', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'antonov-logistic-regression-for-titanic', 'jerlinraj-titanic-machine-learning-from-disaster', 'jacekpardyak-mytitanicscript', 'mihaque313-first-submission-to-titanic-problem', 'turntrout-titanic-data-exploration', 'lagprophet-titanic', 'arjunmalhotra-titanic']","[0.276586634543165, 0.24154923060958794, 0.24143687824071197, 0.24020303962122486, 0.22860062527071595, 0.22505419733163753, 0.20856228682769634, 0.20725976537623486, 0.20504673631087109, 0.2043220946797497]","{'character(0)': ['`:=`'], 'package:base': ['as.factor', 'as.vector', 'c', 'I', 'ifelse', 'is.na', 'library', 'system'], 'package:data.table': ['fread'], 'package:stats': ['glm', 'predict.lm'], 'package:utils': ['write.csv']}","{""character(0)"": [""`:=`""], ""package:base"": [""as.factor"", ""as.vector"", ""c"", ""I"", ""ifelse"", ""is.na"", ""library"", ""system""], ""package:data.table"": [""fread""], ""package:stats"": [""glm"", ""predict.lm""], ""package:utils"": [""write.csv""]}",character0  packagebase asfactor asvector c I ifelse isna library system packagedatatable fread packagestats glm predictlm packageutils writecsv,"library(ggplot2)
library(readr)
library(data.table)
system(""ls ../input"")
tdata <- fread(""../input/train.csv"")
table <- tdata[, c(""Survived"", ""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked""), with = F]
table[, `:=`(Survived = as.factor(Survived), Sex = as.factor(Sex), Embarked = as.factor(Embarked))]
m1 <- glm(Survived ~ Pclass + Sex + Age + I(Age^2) + Fare + Embarked, data = table, family = ""binomial"", na.action = na.omit)
m1$xlevels$Embarked <- c(""C"", ""Q"", ""S"", """")
test <- fread(""../input/test.csv"")
test[, `:=`(Sex = as.factor(Sex), Embarked = as.factor(Embarked))]
p1 <- as.vector(predict.lm(m1, newdata = test, type = ""response""))
p1 <- ifelse(is.na(p1) || p1 < 0.5, 0, 1)
test[, `:=`(Survived, p1)]
write.csv(test[, c(""PassengerId"", ""Survived""), with = F], ""result.csv"", row.names = F, quote = F)",0,0,0,0,0,0,0,0,0,0,0,0,0,0
188,aer503-svm-for-titanic,0.737,"['as.factor', 'cbind', 'colnames', 'data.frame', 'is.na', 'library', 'mean', 'print', 'table', 'svm', 'plot', 'predict', 'read.csv', 'str', 'write.csv']","['e1071', 'base']",0.47280216217041,"['colnames', 'plot', 'predict', 'write.csv', 'mean', 'print', 'data.frame', 'read.csv', 'table', 'as.factor', 'library', 'svm', 'cbind', 'str', 'is.na']",[],"['brirush-svm-for-titanic', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'zhaotianjing-titanic', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'jerlinraj-titanic-machine-learning-from-disaster', 'sudheer464-prediction-1-on-titanic-dataset', 'scout16-titanic-disaster-in-r', 'stevencahill-titanic-machine-learning-from-disaster']","[0.8518386408349485, 0.5432491042146181, 0.5432491042146181, 0.3649047097433489, 0.363955567676942, 0.3637539424436731, 0.36326915866985665, 0.3580413260210937, 0.34806278699893284, 0.3316975044316759]","{'package:base': ['as.factor', 'cbind', 'colnames', 'data.frame', 'is.na', 'library', 'mean', 'print', 'table'], 'package:e1071': ['svm'], 'package:graphics': ['plot'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""as.factor"", ""cbind"", ""colnames"", ""data.frame"", ""is.na"", ""library"", ""mean"", ""print"", ""table""], ""package:e1071"": [""svm""], ""package:graphics"": [""plot""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase asfactor cbind colnames dataframe isna library mean print table packagee1071 svm packagegraphics plot packagestats predict packageutils readcsv str writecsv,"library(e1071)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
train[is.na(train)] <- 0
test[is.na(test)] <- 0
str(train)
str(test)
SVMmodel <- svm(as.factor(Survived) ~ Age + SibSp + Parch + Sex + Fare, data = train, cost = 100, gamma = 1)
prediction <- predict(SVMmodel, test)
plot(prediction)
Pclass = table(prediction, test[, 2])
plot(Pclass)
me = mean(Pclass)
print(me)
output <- data.frame(test$PassengerId, prediction)
colnames(output) = cbind(""PassengerId"", ""Survived"")
write.csv(output, file = ""Rushton_Solution.csv"", row.names = F)",0,0,0,0,0,0,0,0,0,0,0,1,0,0
189,tjbaur-exploring-survival-on-the-titanic,0.746,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",24.656179189682003,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic', 'datascikrid-exploring-survival-on-the-titanic', 'anishmayaramka-the-titanic-datset', 'aturner-exploring-survival-on-the-titanic']","[0.9998108156917839, 0.9998108156917839, 0.9998108156917839, 0.9998108156917839, 0.9998108156917839, 0.9998108156917839, 0.9998108156917839, 0.9998108156917839, 0.9998108156917839, 0.9998108156917839]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + Fare + Embarked + Title + Fsize + Child + Mother, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
190,qianbi-titanic-svm,0.754,"['c', 'factor', 'gsub', 'ifelse', 'lapply', 'library', 'nrow', 'bind_rows', 'svm', 'complete', 'mice', 'predict', 'read.csv', 'write.csv']","['dplyr', 'mice', 'e1071', 'base']",3.94583106040955,"['gsub', 'factor', 'ifelse', 'nrow', 'predict', 'complete', 'write.csv', 'bind_rows', 'lapply', 'read.csv', 'library', 'svm', 'mice', 'c']",[],"['qianbi-titanic-logistic-2', 'qianbi-titanic-rpart-2', 'qianbi-titanic-randomforest', 'qianbi-titanic-nnet', 'qianbi-titanic-rpart', 'venkatko-titanic-survival1', 'jasonhit-first-script-for-kaggle-titanic', 'abedben-exploring-survival-on-the-titanic', 'tetyama-trial-titanic', 'xxxmatxxx-titanic-getting-started-with-randomforest']","[0.96054108054866, 0.9447266991960491, 0.9343938842303756, 0.9343761218567407, 0.8947666378075023, 0.8645975200045006, 0.8481882817768316, 0.8479566723889712, 0.8441885943419047, 0.8439688763409303]","{'package:base': ['c', 'factor', 'gsub', 'ifelse', 'lapply', 'library', 'nrow'], 'package:dplyr': ['bind_rows'], 'package:e1071': ['svm'], 'package:mice': ['complete', 'mice'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""c"", ""factor"", ""gsub"", ""ifelse"", ""lapply"", ""library"", ""nrow""], ""package:dplyr"": [""bind_rows""], ""package:e1071"": [""svm""], ""package:mice"": [""complete"", ""mice""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase c factor gsub ifelse lapply library nrow packagedplyr bindrows packagee1071 svm packagemice complete mice packagestats predict packageutils readcsv writecsv,"library(dplyr)
library(mice)
library(e1071)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE, na.strings = """")
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE, na.strings = """")
full <- bind_rows(train, test)
full$Title <- gsub(""^.*, |\\. .*$"", """", full$Name)
Mr <- c(""Col"", ""Don"", ""Jonkheer"", ""Sir"")
Mrs <- c(""Dona"", ""Lady"", ""Mme"", ""the Countess"")
Miss <- c(""Mlle"", ""Ms"")
full$Title[full$Title %in% Mr] <- ""Mr""
full$Title[full$Title %in% Mrs] <- ""Mrs""
full$Title[full$Title %in% Miss] <- ""Miss""
full$Fsize <- full$SibSp + full$Parch + 1
full$FsizeD[full$Fsize == 1] <- ""Singleton""
full$FsizeD[full$Fsize > 1 & full$Fsize < 5] <- ""Small""
full$FsizeD[full$Fsize > 4] <- ""Large""
factor_var <- c(""Survived"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""FsizeD"")
full[factor_var] <- lapply(full[factor_var], factor)
mice_mod <- mice(full[, c(3, 5:8, 10, 12)], method = ""rf"")
mice_output <- complete(mice_mod)
full[, c(6, 10, 12)] <- mice_output[, c(3, 6, 7)]
full$Child <- factor(ifelse(full$Age <= 12, 1, 0))
full <- full[, -c(9, 11)]
train <- full[1:nrow(train), ]
test <- full[(nrow(train) + 1):nrow(full), -2]
svm_mod <- svm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child, data = train)
test$Survived <- predict(svm_mod, test)
write.csv(test[, c(1, 14)], file = ""Titanic_svm.csv"", row.names = FALSE)",0,0,0,1,0,0,0,0,0,0,0,1,0,0
191,nozzo1-my-titanic-r-entry-2,0.754,"['print', 'head', 'as.character', 'as.factor', 'c', 'factor', 'ifelse', 'is.na', 'lapply', 'library', 'mean', 'nchar', 'regexpr', 'regmatches', 'set.seed', 'substr', 'table', 'unlist', 'which', 'train', 'trainControl', 'bplot.xy', 'predict', 'str_length', 'read.table', 'write.table']","['caret', 'randomForest', 'stringr', 'fields', 'base']",8.567034006118769,"['unlist', 'mean', 'lapply', 'nchar', 'which', 'as.character', 'is.na', 'str_length', 'print', 'as.factor', 'bplot.xy', 'set.seed', 'factor', 'table', 'regmatches', 'train', 'c', 'ifelse', 'predict', 'regexpr', 'read.table', 'head', 'substr', 'write.table', 'library', 'trainControl']",[],"['renegarxia-titanic-r', 'mullayilkannan-randomforest-with-knn-imputation-titanic', 'paulocressoni-titanic-using-stepwise-linear-regression', 'nithishthirmul-titanic-data-test1', 'goblin-titanic-test', 'ezhilvelme-titanic-neural-network-c-4-2', 'ilijaf-titanic', 'hisnibs-titanic-enhancing-the-training-data-and-kis', 'skhawaja-titanic-disaster-survival-099', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic']","[0.9187548245559539, 0.2896760493807514, 0.09521042877406821, 0.08330327320148899, 0.06975478204407737, 0.06402926116305083, 0.06337051876895425, 0.0618085238176312, 0.06025970956790268, 0.057730417783848895]","{'c(""package:spam"", ""package:base"")': ['print'], 'c(""package:spam"", ""package:utils"")': ['head'], 'package:base': ['as.character', 'as.factor', 'c', 'factor', 'ifelse', 'is.na', 'lapply', 'library', 'mean', 'nchar', 'regexpr', 'regmatches', 'set.seed', 'substr', 'table', 'unlist', 'which'], 'package:caret': ['train', 'trainControl'], 'package:fields': ['bplot.xy'], 'package:stats': ['predict'], 'package:stringr': ['str_length'], 'package:utils': ['read.table', 'write.table']}","{""c(""package:spam"", ""package:base"")"": [""print""], ""c(""package:spam"", ""package:utils"")"": [""head""], ""package:base"": [""as.character"", ""as.factor"", ""c"", ""factor"", ""ifelse"", ""is.na"", ""lapply"", ""library"", ""mean"", ""nchar"", ""regexpr"", ""regmatches"", ""set.seed"", ""substr"", ""table"", ""unlist"", ""which""], ""package:caret"": [""train"", ""trainControl""], ""package:fields"": [""bplot.xy""], ""package:stats"": [""predict""], ""package:stringr"": [""str_length""], ""package:utils"": [""read.table"", ""write.table""]}",cpackagespam packagebase print cpackagespam packageutils head packagebase ascharacter asfactor c factor ifelse isna lapply library mean nchar regexpr regmatches setseed substr table unlist which packagecaret train trainControl packagefields bplotxy packagestats predict packagestringr strlength packageutils readtable writetable,"library(caret)
library(randomForest)
library(stringr)
trainSet <- read.table(""../input/train.csv"", sep = "","", header = TRUE)
testSet <- read.table(""../input/test.csv"", sep = "","", header = TRUE)
head(trainSet)
head(testSet)
table(trainSet[, c(""Survived"", ""Pclass"")])
library(fields)
bplot.xy(trainSet$Survived, trainSet$Age)
testSet$Nlen <- str_length(testSet$Name)
trainSet$Nlen <- str_length(trainSet$Name)
trainSet$Fam <- trainSet$Parch + trainSet$SibSp
testSet$Fam <- testSet$Parch + testSet$SibSp
trainSet$Survived <- factor(trainSet$Survived)
trainSet$Title <- regmatches(as.character(trainSet$Name), regexpr(""\\,[A-z ]{1,20}\\."", as.character(trainSet$Name)))
trainSet$Title <- unlist(lapply(trainSet$Title, FUN = function(x) substr(x, 3, nchar(x) - 1)))
table(trainSet$Title)
trainSet$Title[which(trainSet$Title %in% c(""Mme"", ""Mlle""))] <- ""Miss""
trainSet$Title[which(trainSet$Title %in% c(""Lady"", ""Ms"", ""the Countess"", ""Dona""))] <- ""Mrs""
trainSet$Title[which(trainSet$Title == ""Dr"" & trainSet$Sex == ""female"")] <- ""Mrs""
trainSet$Title[which(trainSet$Title == ""Dr"" & trainSet$Sex == ""male"")] <- ""Mr""
trainSet$Title[which(trainSet$Title %in% c(""Capt"", ""Col"", ""Don"", ""Jonkheer"", ""Major"", ""Rev"", ""Sir""))] <- ""Mr""
trainSet$Title <- as.factor(trainSet$Title)
testSet$Title <- regmatches(as.character(testSet$Name), regexpr(""\\,[A-z ]{1,20}\\."", as.character(testSet$Name)))
testSet$Title <- unlist(lapply(testSet$Title, FUN = function(x) substr(x, 3, nchar(x) - 1)))
table(testSet$Title)
testSet$Title[which(testSet$Title %in% c(""Mme"", ""Mlle""))] <- ""Miss""
testSet$Title[which(testSet$Title %in% c(""Lady"", ""Ms"", ""the Countess"", ""Dona""))] <- ""Mrs""
testSet$Title[which(testSet$Title == ""Dr"" & testSet$Sex == ""female"")] <- ""Mrs""
testSet$Title[which(testSet$Title == ""Dr"" & testSet$Sex == ""male"")] <- ""Mr""
testSet$Title[which(testSet$Title %in% c(""Capt"", ""Col"", ""Don"", ""Jonkheer"", ""Major"", ""Rev"", ""Sir""))] <- ""Mr""
testSet$Title <- as.factor(testSet$Title)
set.seed(421)
model <- train(Survived ~ Pclass + Sex + Fam + Nlen + Embarked + Fare + Title, data = trainSet, method = ""rf"", trControl = trainControl(method = ""cv"", number = 5))
print(model)
testSet$Fare <- ifelse(is.na(testSet$Fare), mean(testSet$Fare, na.rm = TRUE), testSet$Fare)
testSet$Survived <- predict(model, newdata = testSet)
submission <- testSet[, c(""PassengerId"", ""Survived"")]
write.table(submission, file = ""submission.csv"", col.names = TRUE, row.names = FALSE, sep = "","")",1,0,1,0,0,0,0,1,0,0,0,0,0,0
193,jasonhit-first-script-for-kaggle-titanic,0.758,"['c', 'data.frame', 'factor', 'gsub', 'library', 'prop.table', 'rbind', 'set.seed', 'table', 'plot', 'randomForest', 'varImpPlot', 'predict', 'read.csv', 'write.csv']","['randomForest', 'dplyr', 'base']",0.639940023422241,"['gsub', 'rbind', 'factor', 'plot', 'predict', 'write.csv', 'prop.table', 'data.frame', 'read.csv', 'table', 'randomForest', 'library', 'varImpPlot', 'c', 'set.seed']",[],"['venkatko-titanic-survival1', 'abedben-exploring-survival-on-the-titanic', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'tetyama-trial-titanic', 'msantos68-exploring-survival-on-the-titanic', 'arunkumarramanan-data-science-in-r-and-titanic-survival-prediction', 'lukeschmerold-exploring-survival-on-the-titanic']","[0.8929579244826612, 0.8840671957589489, 0.881229238016314, 0.8811692748524622, 0.8805684587309044, 0.8805684587309044, 0.8805157560876756, 0.8798764342419498, 0.8767690939674768, 0.8734192283312452]","{'package:base': ['c', 'data.frame', 'factor', 'gsub', 'library', 'prop.table', 'rbind', 'set.seed', 'table'], 'package:graphics': ['plot'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""c"", ""data.frame"", ""factor"", ""gsub"", ""library"", ""prop.table"", ""rbind"", ""set.seed"", ""table""], ""package:graphics"": [""plot""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase c dataframe factor gsub library proptable rbind setseed table packagegraphics plot packagerandomForest randomForest varImpPlot packagestats predict packageutils readcsv writecsv,"library(randomForest)
library(dplyr)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
test$Survived <- NA
full <- rbind(train, test)
prop.table(table(train$Sex, train$Survived), 1)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Title)
rare <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare] <- ""Rare""
table(full$Title)
full$Embarked[full$Embarked == """"] = ""S""
full$Fsize <- full$SibSp + full$Parch + 1
full$FsizeD[full$Fsize == 1] <- ""Single""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""Small""
full$FsizeD[full$Fsize > 4] <- ""Big""
full$Pclass = factor(full$Pclass)
full$Sex = factor(full$Sex)
full$Embarked = factor(full$Embarked)
full$Title = factor(full$Title)
full$FsizeD = factor(full$FsizeD)
train1 <- full[1:891, ]
test1 <- full[892:1309, ]
set.seed(1234)
rf <- randomForest(factor(Survived) ~ Pclass + Sex + Embarked + Title + FsizeD, data = train1, ntree = 100)
varImpPlot(rf)
plot(rf)
prediction <- predict(rf, test1)
result <- data.frame(PassengerID = test1$PassengerId, Survived = prediction)
write.csv(result, file = ""Titanic.csv"", row.names = F)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
194,hisnibs-titanic-enhancing-the-training-data-and-kis,0.78,"['as.character', 'attach', 'data.frame', 'detach', 'ifelse', 'is.na', 'lapply', 'library', 'nrow', 'rbind', 'rep', 'rm', 'round', 'strsplit', 'substr', 'substring', 'sum', 'table', 'tapply', 'rpart', 'predict', 'read.csv', 'write.csv']","['rpart', 'base']",0.341806173324585,"['nrow', 'lapply', 'as.character', 'is.na', 'attach', 'rpart', 'round', 'rep', 'read.csv', 'table', 'rm', 'substring', 'rbind', 'ifelse', 'sum', 'predict', 'write.csv', 'data.frame', 'strsplit', 'tapply', 'substr', 'library', 'detach']",[],"['pradeeptripathi-prediction-of-titanic-survival-using-random-forest', 'pradeeptripathi-prediction-of-titanic-survival-using-r', 'lokesharun-titanic', 'paulbisto-r-titanic-script-practice', 'utkarsh1997-kaggle-titanic-rf', 'predact-easy-r-titanic-predictive-model', 'suraj915-titanic-suraj', 'pavani2018-titanicr-random-forests', 'mailakshdeep-titanic-survival-prediction-r', 'acrespop-titanic1']","[0.7650346491210248, 0.7647441503611027, 0.7545499176677428, 0.7342574813483289, 0.7297754820857529, 0.7278933733637868, 0.7072272782270262, 0.6982110988624993, 0.6979378767239707, 0.6755678751587632]","{'package:base': ['as.character', 'attach', 'data.frame', 'detach', 'ifelse', 'is.na', 'lapply', 'library', 'nrow', 'rbind', 'rep', 'rm', 'round', 'strsplit', 'substr', 'substring', 'sum', 'table', 'tapply'], 'package:rpart': ['rpart'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.character"", ""attach"", ""data.frame"", ""detach"", ""ifelse"", ""is.na"", ""lapply"", ""library"", ""nrow"", ""rbind"", ""rep"", ""rm"", ""round"", ""strsplit"", ""substr"", ""substring"", ""sum"", ""table"", ""tapply""], ""package:rpart"": [""rpart""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase ascharacter attach dataframe detach ifelse isna lapply library nrow rbind rep rm round strsplit substr substring sum table tapply packagerpart rpart packagestats predict packageutils readcsv writecsv,"train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
train$Set <- rep(""Train"", nrow(train))
test$Set <- rep(""Test"", nrow(test))
test$Survived <- NA
titanic <- rbind(train, test)
titanic$NGrp <- table(titanic$Ticket)[titanic$Ticket]
titanic$Deck <- tapply(substr(as.character(titanic$Cabin), 1, 1), titanic$Ticket, max)[titanic$Ticket]
attach(titanic)
sumNotNA <- function(x) sum(x[!is.na(x)])
titanic$KSIG <- tapply(Survived, Ticket, sumNotNA)[Ticket] - ifelse(is.na(Survived), 0, Survived)
titanic$KDIG <- tapply(1 - Survived, Ticket, sumNotNA)[Ticket] - ifelse(is.na(Survived), 0, 1 - Survived)
titanic$UOIG <- tapply(Survived, Ticket, function(x) sum(is.na(x)))[Ticket] - is.na(Survived)
titanic$ESRIG <- titanic$KSIG/(titanic$KSIG + titanic$KDIG)
detach()
Title <- substring(lapply(strsplit(as.character(titanic$Name), "", ""), ""["", 2), 1, 4)
Title[Title == ""Capt"" | Title == ""Majo"" | Title == ""Col.""] <- ""Army""
Title[Title == ""Don.""] <- ""Mr. ""
Title[Title == ""Dona""] <- ""Mrs.""
Title[Title == ""Mlle""] <- ""Miss""
Title[Title == ""Mme.""] <- ""Mrs.""
Title[Title == ""Ms. ""] <- ""Miss""
Title[Title == ""the ""] <- ""Lady""
Title[Title == ""Jonk""] <- ""Sir.""
titanic$Title <- Title
rm(Title)
library(rpart)
fm <- rpart(Survived ~ Sex + NGrp + Pclass + Age + SibSp + Parch + Fare + Deck + Title + Embarked + KSIG + KDIG + UOIG + ESRIG, data = titanic, subset = titanic$Set == ""Train"", method = ""class"")
pred <- round(predict(fm, newdata = titanic)[, 2])
submission <- data.frame(PassengerId = titanic$PassengerId, Survived = pred)[titanic$Set == ""Test"", ]
write.csv(submission, file = ""rpartTheLot.csv"", row.names = F, quote = F)
fm
table(titanic$Survived, pred)",0,0,0,0,0,0,0,0,0,1,0,0,0,0
196,arpitr-titanic-survival,0.7509999999999999,"['as.factor', 'class', 'data.frame', 'ifelse', 'is.na', 'levels', 'library', 'mean', 'prop.table', 'summary', 'table', 'confusionMatrix', 'fancyRpartPlot', 'rpart', 'predict', 'head', 'read.csv', 'str', 'tail', 'write.csv']","['rpart', 'rattle', 'rpart.plot', 'RColorBrewer', 'caret', 'base']",2.03692698478699,"['mean', 'is.na', 'levels', 'confusionMatrix', 'prop.table', 'class', 'rpart', 'as.factor', 'summary', 'str', 'read.csv', 'table', 'fancyRpartPlot', 'tail', 'ifelse', 'predict', 'write.csv', 'data.frame', 'head', 'library']",[],"['jprukundo-titanic-in-r-with-naive-bayes-of-mlr-package', 'redroy44-tidy-titanic-script', 'mattrb-titanic', 'danr87946-titanic-practice', 'jerlinraj-titanic-machine-learning-from-disaster', 'sudheer464-prediction-1-on-titanic-dataset', 'tsfitz-titanic', 'scout16-titanic-disaster-in-r', 'stevencahill-titanic-machine-learning-from-disaster', 'zhaotianjing-titanic']","[0.3433237074162516, 0.26040736635518424, 0.227685845133115, 0.125378824857874, 0.1221945040988958, 0.11984485726371726, 0.11719899019684073, 0.11367222687346465, 0.11267528145781527, 0.10718223093272389]","{'package:base': ['as.factor', 'class', 'data.frame', 'ifelse', 'is.na', 'levels', 'library', 'mean', 'prop.table', 'summary', 'table'], 'package:caret': ['confusionMatrix'], 'package:rattle': ['fancyRpartPlot'], 'package:rpart': ['rpart'], 'package:stats': ['predict'], 'package:utils': ['head', 'read.csv', 'str', 'tail', 'write.csv']}","{""package:base"": [""as.factor"", ""class"", ""data.frame"", ""ifelse"", ""is.na"", ""levels"", ""library"", ""mean"", ""prop.table"", ""summary"", ""table""], ""package:caret"": [""confusionMatrix""], ""package:rattle"": [""fancyRpartPlot""], ""package:rpart"": [""rpart""], ""package:stats"": [""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""tail"", ""write.csv""]}",packagebase asfactor class dataframe ifelse isna levels library mean proptable summary table packagecaret confusionMatrix packagerattle fancyRpartPlot packagerpart rpart packagestats predict packageutils head readcsv str tail writecsv,"train_data <- read.csv(""../input/train.csv"")
test_data <- read.csv(""../input/test.csv"")
str(train_data)
head(train_data)
tail(train_data)
summary(train_data$Age)
train_data$Age[is.na(train_data$Age)] <- mean(train_data$Age, na.rm = TRUE)
test_data$Age[is.na(test_data$Age)] <- mean(test_data$Age, na.rm = TRUE)
test_data$Fare[is.na(test_data$Fare)] <- mean(test_data$Fare, na.rm = TRUE)
class(train_data$Survived)
levels(as.factor(train_data$Survived))
head(train_data$Survived)
train_data$Survived <- ifelse(train_data$Survived == 1, ""yes"", ""no"")
train_data$Survived <- as.factor(train_data$Survived)
head(train_data$Survived)
class(train_data$Survived)
library(rpart)
table(as.factor(train_data$Survived))
train_data$Survived <- as.factor(train_data$Survived)
str(train_data$Survived)
tree <- rpart(formula = Survived ~ Sex + Age + SibSp + Parch + Fare + Embarked, data = train_data, method = ""class"")
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(tree)
test_data$Survived <- 0
Prediction <- predict(tree, test_data, type = ""class"")
prop.table(table(Prediction))
test_data$Survived <- Prediction
survived <- ifelse(test_data$Survived == ""no"", 0, 1)
submit <- data.frame(PassengerId = test_data$PassengerId, Survived = survived)
write.csv(submit, file = ""arpit_titanic.csv"", row.names = FALSE)
library(caret)
confusionMatrix(Prediction, test_data$Survived)",0,0,1,0,0,0,0,1,0,1,0,0,0,0
198,pradeeptripathi-prediction-of-titanic-survival-using-r,0.7509999999999999,"['filter', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'list.files', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'table', 'which', 'bind_rows', 'dense_rank', 'desc', 'group_by', 'mutate', 'n', 'summarise', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'par', 'plot', 'complete', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'head', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'readr', 'base']",26.8095960617065,"['summarise', 'labs', 'complete', 'geom_text', 'median', 'which', 'coord_flip', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'summary', 'filter', 'sapply', 'round', 'n', 'geom_histogram', 'hist', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'group_by', 'row.names', 'c', 'aes', 'scale_y_continuous', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'list.files', 'bind_rows', 'reorder', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'write.csv', 'head', 'library', 'facet_grid']",[],"['pradeeptripathi-prediction-of-titanic-survival-using-random-forest', 'paulbisto-r-titanic-script-practice', 'lokesharun-titanic', 'predact-easy-r-titanic-predictive-model', 'utkarsh1997-kaggle-titanic-rf', 'suraj915-titanic-suraj', 'pavani2018-titanicr-random-forests', 'mailakshdeep-titanic-survival-prediction-r', 'acrespop-titanic1', 'hisnibs-titanic-enhancing-the-training-data-and-kis']","[0.9998408899836042, 0.9343472079672943, 0.9333316957960868, 0.9253164445515738, 0.9170535879080536, 0.8955669677206812, 0.8708724079991157, 0.844509536667054, 0.8141852041054355, 0.7647441503611027]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'list.files', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'table', 'which'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'group_by', 'mutate', 'n', 'summarise'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'par', 'plot'], 'package:mice': ['complete', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""c"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""library"", ""list.files"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""summary"", ""table"", ""which""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""group_by"", ""mutate"", ""n"", ""summarise""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""par"", ""plot""], ""package:mice"": [""complete"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase c colnames dataframe factor gsub isna library listfiles names nlevels paste paste0 round rownames sapply setseed strsplit sum summary table which packagedplyr bindrows denserank desc groupby mutate n summarise packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend par plot packagemice complete mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils head readcsv str writecsv,"list.files(""../input"")
library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
library(""readr"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
titanic <- bind_rows(train, test)
str(titanic)
summary(titanic)
head(titanic)
colnames(titanic)
titanic$title <- gsub(""(.*, )|(\\..*)"", """", titanic$Name)
table(titanic$Sex, titanic$title)
unusual_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
titanic$title[titanic$title == ""Mlle""] <- ""Miss""
titanic$title[titanic$title == ""Ms""] <- ""Miss""
titanic$title[titanic$title == ""Mme""] <- ""Mrs""
titanic$title[titanic$title %in% unusual_title] <- ""Unusual Title""
table(titanic$Sex, titanic$title)
titanic$surname <- sapply(titanic$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
nlevels(factor(titanic$surname))
titanic$famsize <- titanic$SibSp + titanic$Parch + 1
titanic$family <- paste(titanic$surname, titanic$famsize, sep = ""_"")
ggplot(titanic[1:891, ], aes(x = famsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
titanic$fsizeD[titanic$famsize == 1] <- ""single""
titanic$fsizeD[titanic$famsize < 5 & titanic$famsize > 1] <- ""small""
titanic$fsizeD[titanic$famsize > 4] <- ""large""
titanic$Cabin[1:28]
strsplit(titanic$Cabin[2], NULL)[[1]]
titanic$deck <- factor(sapply(titanic$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
summary(titanic)
titanic$Embarked[titanic$Embarked == """"] <- NA
titanic[(which(is.na(titanic$Embarked))), 1]
titanic[c(62, 830), ""Embarked""]
titanic[c(62, 830), c(1, 3, 10)]
titanic %>% group_by(Embarked, Pclass) %>% filter(Pclass == ""1"") %>% summarise(mfare = median(Fare), n = n())
embark_fare <- titanic %>% filter(PassengerId != 62 & PassengerId != 830)
embark_fare
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
titanic$Embarked[c(62, 830)] <- ""C""
titanic[(which(is.na(titanic$Fare))), 1]
titanic[1044, c(3, 12)]
titanic[1044, ]
titanic %>% filter(Pclass == ""3"" & Embarked == ""S"") %>% summarise(missing_fare = median(Fare, na.rm = TRUE))
ggplot(titanic[titanic$Pclass == ""3"" & titanic$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
titanic$Fare[1044] <- 8.05
summary(titanic$Fare)
titanic$Fare[1044] <- median(titanic[titanic$Pclass == ""3"" & titanic$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(titanic$Age))
set.seed(129)
mice_mod <- mice(titanic[, !names(titanic) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(titanic$Age, freq = F, main = ""Age: Original Data"", col = ""darkred"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
titanic$Age <- mice_output$Age
sum(is.na(titanic$Age))
ggplot(titanic[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
titanic$Child[titanic$Age < 18] <- ""Child""
titanic$Child[titanic$Age >= 18] <- ""Adult""
table(titanic$Child, titanic$Survived)
titanic$Mother <- ""Not Mother""
titanic$Mother[titanic$Sex == ""female"" & titanic$Parch > 0 & titanic$Age > 18 & titanic$title != ""Miss""] <- ""Mother""
table(titanic$Mother, titanic$Survived)
titanic$Child <- factor(titanic$Child)
titanic$Mother <- factor(titanic$Mother)
titanic$Pclass <- factor(titanic$Pclass)
titanic$Sex <- factor(titanic$Sex)
titanic$Embarked <- factor(titanic$Embarked)
titanic$Survived <- factor(titanic$Survived)
titanic$title <- factor(titanic$title)
titanic$fsizeD <- factor(titanic$fsizeD)
train <- titanic[1:891, ]
test <- titanic[892:1309, ]
set.seed(754)
titanic_model <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + title + fsizeD + Child + Mother, data = train)
plot(titanic_model, ylim = c(0, 0.36))
legend(""topright"", colnames(titanic_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(titanic_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(titanic_model, test)
prediction
Output <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
Output
write.csv(Output, file = ""pradeep_titanic_output.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
200,divyasshree-titanic-ml-club,0.713,"['c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'set.seed', 'sum', 'table', 'with', 'bind_rows', 'aes', 'geom_bar', 'ggplot', 'labs', 'scale_x_continuous', 'plot', 'impute', 'importance', 'randomForest', 'median', 'predict', 'read.csv', 'write.csv']","['ggplot2', 'scales', 'dplyr', 'randomForest', 'readr', 'Hmisc', 'base']",2.85417580604553,"['labs', 'median', 'is.na', 'scale_x_continuous', 'impute', 'importance', 'set.seed', 'gsub', 'factor', 'geom_bar', 'read.csv', 'table', 'randomForest', 'c', 'aes', 'sum', 'plot', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'ggplot', 'library', 'with']",[],"['vishnusaiv-titanic-data-analysis', 'xuhuiz0918-initial-eda-and-lm-on-titanic-dataset', 'dleprovost-simple-titanic-exploration', 'windowbyryeol-kernel-titanic', 'ianwells-titanic-simple-rf-with-name-and-age-features', 'maza91-titanic-neural-network-try', 'skhawaja-titanic-disaster-survival-099', 'paulocressoni-titanic-using-stepwise-linear-regression', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic']","[0.8805599997344629, 0.868494271993149, 0.470346739207311, 0.45874880543673263, 0.08464082344517893, 0.08400305604682828, 0.07872732606659391, 0.07723817113313428, 0.07697386023428414, 0.07697386023428414]","{'package:base': ['c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'set.seed', 'sum', 'table', 'with'], 'package:dplyr': ['bind_rows'], 'package:ggplot2': ['aes', 'geom_bar', 'ggplot', 'labs', 'scale_x_continuous'], 'package:graphics': ['plot'], 'package:Hmisc': ['impute'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""c"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""library"", ""set.seed"", ""sum"", ""table"", ""with""], ""package:dplyr"": [""bind_rows""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""ggplot"", ""labs"", ""scale_x_continuous""], ""package:graphics"": [""plot""], ""package:Hmisc"": [""impute""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase c dataframe factor gsub isna library setseed sum table with packagedplyr bindrows packageggplot2 aes geombar ggplot labs scalexcontinuous packagegraphics plot packageHmisc impute packagerandomForest importance randomForest packagestats median predict packageutils readcsv writecsv,"titanic_train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
titanic_test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
library(""ggplot2"")
library(""scales"")
library(""dplyr"")
library(""randomForest"")
library(""readr"")
titanic_train <- bind_rows(titanic_train, titanic_test)
titanic_train$title <- gsub(""(.*, )|(\\..*)"", """", titanic_train$Name)
table(titanic_train$Sex, titanic_train$title)
title_edit <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
titanic_train$title[titanic_train$title == ""Mlle""] <- ""Miss""
titanic_train$title[titanic_train$title == ""Ms""] <- ""Miss""
titanic_train$title[titanic_train$title == ""Mme""] <- ""Mrs""
titanic_train$title[titanic_train$title %in% title_edit] <- ""renamed Title""
table(titanic_train$Sex, titanic_train$title)
titanic_train$famsize <- titanic_train$SibSp + titanic_train$Parch + 1
ggplot(titanic_train[1:891, ], aes(x = famsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"")
titanic_train$Embarked[titanic_train$Embarked == """"] <- NA
sum(is.na(titanic_train$Age))
titanic_train1 <- titanic_train
med <- median(titanic_train$Age, na.rm = TRUE)
library(Hmisc)
titanic_train1$Age <- with(titanic_train, impute(Age, mean))
titanic_train1$Fare <- with(titanic_train, impute(Fare, median))
titanic_train1$Survived <- with(titanic_train, impute(Survived, 0))
titanic_train1$Embarked <- with(titanic_train, impute(Embarked, ""C""))
titanic_train1$fsizeD[titanic_train1$famsize == 1] <- 1
titanic_train1$fsizeD[titanic_train1$famsize < 5 & titanic_train1$famsize > 1] <- 2
titanic_train1$fsizeD[titanic_train1$famsize > 4] <- 3
train <- titanic_train1[1:891, ]
test <- titanic_train1[892:1309, ]
set.seed(755)
titanic_model <- randomForest(Survived ~ Age + Fare + fsizeD + Pclass, data = train, na.action = na.exclude)
plot(titanic_model, ylim = c(0, 0.36))
ope <- predict(titanic_model, test)
importance <- importance(titanic_model)
Output <- data.frame(PassengerID = test$PassengerId, Survived = ope)
Output$Survived[Output$Survived > 0.5] = 1
Output$Survived[Output$Survived != 1] = 0
write.csv(Output, file = ""pred.csv"")",1,0,0,0,0,0,0,0,0,0,0,0,0,0
201,sylphsangeeta-titanic,0.754,"['c', 'cat', 'data.frame', 'duplicated', 'factor', 'is.na', 'length', 'library', 'list', 'merge', 'nrow', 'paste', 'round', 'subset', 'sum', 'summary', 'table', 'unique', 'with', 'arrange', 'bind_rows', 'group_by', 'n', 'summarise', 'aes', 'facet_grid', 'geom_bar', 'geom_histogram', 'ggplot', 'scale_x_continuous', 'theme_dark', 'pie', 'impute', 'rpart', 'rpart.plot', 'aggregate', 'binomial', 'glm', 'predict', 'head', 'read.csv', 'str', 'write.csv', 'aggr']","['dplyr', 'ggplot2', 'ggplot2', 'dplyr', 'dplyr', 'dplyr', 'VIM', 'Hmisc', 'rpart', 'rpart.plot', 'MASS', 'base']",3.76778793334961,"['summarise', 'nrow', 'list', 'merge', 'cat', 'theme_dark', 'is.na', 'subset', 'duplicated', 'glm', 'scale_x_continuous', 'rpart', 'summary', 'round', 'n', 'geom_histogram', 'impute', 'str', 'factor', 'arrange', 'aggregate', 'unique', 'pie', 'geom_bar', 'length', 'read.csv', 'binomial', 'aggr', 'table', 'group_by', 'c', 'aes', 'paste', 'sum', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'ggplot', 'rpart.plot', 'head', 'library', 'with', 'facet_grid']",[],"['avikpaul4u-titanic-machine-learning-in-r', 'skhawaja-titanic-disaster-survival-099', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'erskumars-titanic-survival-eda-and-survival-rate-prediction', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic', 'tsfitz-titanic']","[0.10401875728258922, 0.07708535487047534, 0.07255760771401513, 0.07255760771401513, 0.07168672445385896, 0.07168672445385896, 0.07130842951725595, 0.07122832929239938, 0.07122832929239938, 0.0707701534702453]","{'package:base': ['c', 'cat', 'data.frame', 'duplicated', 'factor', 'is.na', 'length', 'library', 'list', 'merge', 'nrow', 'paste', 'round', 'subset', 'sum', 'summary', 'table', 'unique', 'with'], 'package:dplyr': ['arrange', 'bind_rows', 'group_by', 'n', 'summarise'], 'package:ggplot2': ['aes', 'facet_grid', 'geom_bar', 'geom_histogram', 'ggplot', 'scale_x_continuous', 'theme_dark'], 'package:graphics': ['pie'], 'package:Hmisc': ['impute'], 'package:rpart': ['rpart'], 'package:rpart.plot': ['rpart.plot'], 'package:stats': ['aggregate', 'binomial', 'glm', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv'], 'package:VIM': ['aggr']}","{""package:base"": [""c"", ""cat"", ""data.frame"", ""duplicated"", ""factor"", ""is.na"", ""length"", ""library"", ""list"", ""merge"", ""nrow"", ""paste"", ""round"", ""subset"", ""sum"", ""summary"", ""table"", ""unique"", ""with""], ""package:dplyr"": [""arrange"", ""bind_rows"", ""group_by"", ""n"", ""summarise""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""geom_bar"", ""geom_histogram"", ""ggplot"", ""scale_x_continuous"", ""theme_dark""], ""package:graphics"": [""pie""], ""package:Hmisc"": [""impute""], ""package:rpart"": [""rpart""], ""package:rpart.plot"": [""rpart.plot""], ""package:stats"": [""aggregate"", ""binomial"", ""glm"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""], ""package:VIM"": [""aggr""]}",packagebase c cat dataframe duplicated factor isna length library list merge nrow paste round subset sum summary table unique with packagedplyr arrange bindrows groupby n summarise packageggplot2 aes facetgrid geombar geomhistogram ggplot scalexcontinuous themedark packagegraphics pie packageHmisc impute packagerpart rpart packagerpartplot rpartplot packagestats aggregate binomial glm predict packageutils head readcsv str writecsv packageVIM aggr,"library(dplyr)
train_df <- read.csv(""../input/train.csv"", stringsAsFactors = F)
cat(paste(""\ntest data structure having rows :\n"", nrow(train_df)))
str(train_df)
test_df <- read.csv(""../input/test.csv"", stringsAsFactors = F)
cat(paste(""\ntest data structure having rows :\n"", nrow(test_df)))
str(test_df)
cat(""\nSummary Of Pclass\n"")
summary(train_df$Pclass)
cat(""\nSummary Of Age\n"")
summary(train_df$Age)
cat(""\nSummary Of Sibsp A\n"")
summary(train_df$SibSp)
cat(""\nSummary Of Parch A\n"")
summary(train_df$Parch)
cat(""\nSummary Of Fare A\n"")
summary(train_df$Fare)
fare_single_passenger <- subset(train_df, (train_df$SibSp == 0) & (train_df$Parch == 0), select = c(Pclass, Fare))
fare_single_passenger
fare_single_passenger <- aggregate(fare_single_passenger[, 2], list(fare_single_passenger$Pclass), mean)
cat(paste(""\n\nAverage Fare of First Class "", fare_single_passenger[1, 2]))
cat(paste(""\n\nAverage Fare of Second Class "", fare_single_passenger[2, 2]))
cat(paste(""\n\nAverage Fare of Third Class "", fare_single_passenger[3, 2]))
library(ggplot2)
ggplot(train_df, aes(x = Pclass, y = Survived, fill = Pclass)) + geom_bar(stat = ""identity"", width = 0.3) + scale_x_continuous(breaks = c(1, 2, 3), labels = c(""1"", ""2"", ""3""))
ggplot(train_df, aes(x = Age, y = Survived, fill = Age)) + geom_bar(stat = ""identity"", width = 0.5) + scale_x_continuous(breaks = c(10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80), labels = c(""10"", ""15"", ""20"", ""25"", ""30"", ""35"", ""40"", ""45"", ""50"", ""55"", ""60"", ""65"", ""70"", ""75"", ""80""))
ggplot(train_df, aes(x = SibSp, y = Survived, fill = SibSp)) + geom_bar(stat = ""identity"", width = 0.3)
ggplot(train_df, aes(x = Parch, y = Survived, fill = Parch)) + geom_bar(stat = ""identity"", width = 0.3)
ggplot(train_df, aes(x = Fare, y = Survived, fill = Fare)) + geom_bar(stat = ""identity"", width = 0.5)
ggplot(train_df, aes(x = Embarked, y = Survived, fill = Embarked)) + geom_bar(stat = ""identity"", width = 0.3)
ggplot(train_df, aes(x = Sex, y = Survived, fill = Sex)) + geom_bar(stat = ""identity"", width = 0.5)
lenofUniqueTicekt <- length(unique(train_df$Ticket))
cat(paste(""Number of uniques Ticket"", lenofUniqueTicekt))
FamGp_df <- train_df[duplicated(train_df[, ""Ticket""]) | duplicated(train_df[, ""Ticket""], fromLast = TRUE), ] %>% arrange(Ticket) %>% group_by(Ticket) %>% summarise(groupFmSize = n(), Survived = sum(Survived))
FamGp_df
training_model <- glm(Survived ~ . - (Name + PassengerId + Ticket + Cabin), family = binomial(link = ""logit""), data = train_df, maxit = 50)
summary(training_model)
library(ggplot2)
ggplot(train_df, aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_dark()
library(dplyr)
titanic_df <- bind_rows(train_df, test_df)
cat(paste(""\ncomplete  data structure having rows :"", nrow(titanic_df)))
str(titanic_df)
library(dplyr)
nrow((titanic_df))
FamGp_df <- titanic_df[duplicated(titanic_df[, ""Ticket""]) | duplicated(titanic_df[, ""Ticket""], fromLast = TRUE), ] %>% arrange(Ticket) %>% group_by(Ticket) %>% summarise(groupFmSize = n(), Survived = sum(Survived))
FamGp_df <- FamGp_df[, c(""Ticket"", ""groupFmSize"")]
FamGp_df
library(dplyr)
titanic_df <- merge(x = titanic_df, y = FamGp_df, by = ""Ticket"", all = TRUE)
cat(paste(""\ncomplete  data structure having rows :"", nrow(titanic_df)))
col_order <- c(""PassengerId"", ""Survived"", ""Pclass"", ""Name"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Ticket"", ""groupFmSize"", ""Fare"", ""Cabin"", ""Embarked"")
titanic_df <- titanic_df[, col_order] %>% arrange(PassengerId)
titanic_df
titanic_df$groupFmSize[is.na(titanic_df$groupFmSize)] <- 0
titanic_df
library(VIM)
mice_plot <- aggr(titanic_df[, c(""Age"")], col = c(""blue"", ""red""), numbers = TRUE, sortVars = TRUE, labels = c(""Age""), cex.axis = 0.7, gap = 3, ylab = c(""Missing data"", ""Pattern""))
library(Hmisc)
titanic_df$Age <- with(titanic_df, impute(Age, median))
titanic_df[, c(""Age"")]
titanic_df$AgeCategory[titanic_df$Age <= 18] <- ""child""
titanic_df$AgeCategory[titanic_df$Age > 18 & titanic_df$Sex == ""female""] <- ""FemaleAdult""
titanic_df$AgeCategory[titanic_df$Age > 18 & titanic_df$Sex == ""male""] <- ""maleAdult""
titanic_df$AgeCategory <- factor(titanic_df$AgeCategory)
head(titanic_df[, c(""PassengerId"", ""Age"", ""Sex"", ""AgeCategory"")], 50)
final_train_df <- titanic_df[1:nrow(train_df), ]
final_test_df <- titanic_df[nrow(train_df) + 1:nrow(test_df), ]
head(final_train_df)
head(final_test_df)
library(""rpart"")
library(""rpart.plot"")
rtree_fit <- rpart(Survived ~ Pclass + Age + factor(AgeCategory) + Sex + groupFmSize, final_train_df, method = ""class"")
summary(rtree_fit)
rpart.plot(rtree_fit, extra = 104, box.palette = ""GnBu"", branch.lty = 3, shadow.col = ""gray"", nn = TRUE)
library(MASS)
survivalPrediction <- predict(rtree_fit, final_test_df, type = ""class"")
str(survivalPrediction)
tableP <- table(survivalPrediction)
pct <- round(tableP/sum(tableP) * 100)
label <- c(""0"", ""1"")
lbls <- paste(label, ""-"", pct, ""%"")
pie(tableP, col = c(""red"", ""yellow""), labels = lbls)
predicted_df <- data.frame(PassengerID = final_test_df$PassengerId, Survived = survivalPrediction)
head(predicted_df, 200)
write.csv(predicted_df, file = ""Titanic_Prediction_Rpart.csv"", row.names = F)",0,0,0,0,0,0,1,0,0,1,0,0,0,0
202,brirush-svm-for-titanic,0.737,"['as.factor', 'cbind', 'colnames', 'data.frame', 'is.na', 'library', 'svm', 'predict', 'read.csv', 'str', 'write.csv']","['e1071', 'base']",0.370893001556396,"['colnames', 'predict', 'write.csv', 'data.frame', 'read.csv', 'as.factor', 'library', 'svm', 'cbind', 'str', 'is.na']",[],"['aer503-svm-for-titanic', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'zhaotianjing-titanic', 'jerlinraj-titanic-machine-learning-from-disaster', 'sudheer464-prediction-1-on-titanic-dataset', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'scout16-titanic-disaster-in-r', 'sawajid-titanic-test']","[0.8518386408349485, 0.5773286417801304, 0.5773286417801304, 0.4227220015522721, 0.4100381490592009, 0.4064278289217834, 0.40065357964975007, 0.40024551759576643, 0.3918604894703934, 0.37969912395931943]","{'package:base': ['as.factor', 'cbind', 'colnames', 'data.frame', 'is.na', 'library'], 'package:e1071': ['svm'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""as.factor"", ""cbind"", ""colnames"", ""data.frame"", ""is.na"", ""library""], ""package:e1071"": [""svm""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase asfactor cbind colnames dataframe isna library packagee1071 svm packagestats predict packageutils readcsv str writecsv,"library(e1071)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
train[is.na(train)] <- 0
test[is.na(test)] <- 0
str(train)
str(test)
SVMmodel <- svm(as.factor(Survived) ~ Age + SibSp + Parch + Sex + Fare, data = train, cost = 100, gamma = 1)
prediction <- predict(SVMmodel, test)
output <- data.frame(test$PassengerId, prediction)
colnames(output) = cbind(""PassengerId"", ""Survived"")
write.csv(output, file = ""Rushton_Solution.csv"", row.names = F)",0,0,0,0,0,0,0,0,0,0,0,1,0,0
203,msantos68-exploring-survival-on-the-titanic,0.742,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'substr', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",23.9488279819489,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'substr', 'library', 'facet_grid']",[],"['mira5b-exploring-survival-on-the-titanic', 'mohankanni-exploring-survival-on-the-titanic', 'kyanyoga-exploring-survival-on-the-titanic', 'rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic']","[0.9922037063018612, 0.9918013472836664, 0.9917673603650173, 0.9917128934796434, 0.9917128934796434, 0.9917128934796434, 0.9917128934796434, 0.9917128934796434, 0.9917128934796434, 0.9917128934796434]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'substr', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""substr"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit substr sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title == ""Lady""] <- ""Miss""
full$Title[full$Title == ""Dona""] <- ""Mrs""
full$Title[full$Title == ""the Countess""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
table(full$Sex, full$Fsize)
table(full$Cabin)
full$FsizeD[full$Fsize == 1] <- ""single""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
full$Gender <- substr(full$Sex, 1, 1)
table(full$Gender)
full$GenSize <- paste(full$Gender, full$FsizeD, sep = ""_"")
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
ggplot(full[1:891, ], aes(x = GenSize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + labs(x = ""Gender x Family Size"") + theme_few()
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
204,kasturimitra-titanic,0.758,"['data.frame', 'ifelse', 'library', 'mean', 'group_by', 'summarize', 'aes', 'geom_jitter', 'geom_point', 'ggplot', 'plot', 'text', 'rpart', 'complete.cases', 'predict', 'read.csv', 'str', 'write.csv']","['tidyverse', 'randomForest', 'caret', 'rpart', 'modelr', 'base']",2.90428113937378,"['ifelse', 'geom_point', 'plot', 'predict', 'mean', 'write.csv', 'data.frame', 'summarize', 'ggplot', 'read.csv', 'rpart', 'str', 'geom_jitter', 'library', 'text', 'group_by', 'complete.cases', 'aes']",[],"['lagprophet-titanic', 'tobybot11-toby-s-titanic-analysis', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'tsfitz-titanic', 'jacekpardyak-mytitanicscript', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'jerlinraj-titanic-machine-learning-from-disaster', 'anweshaghosh-titanic-forkofmultiplescripts-r']","[0.33652680349425307, 0.3336184948454005, 0.33174371455363805, 0.33069127110513485, 0.3296583890214546, 0.3186286508383352, 0.3017662259176422, 0.3017662259176422, 0.2955017658210164, 0.28612294080614054]","{'package:base': ['data.frame', 'ifelse', 'library', 'mean'], 'package:dplyr': ['group_by', 'summarize'], 'package:ggplot2': ['aes', 'geom_jitter', 'geom_point', 'ggplot'], 'package:graphics': ['plot', 'text'], 'package:rpart': ['rpart'], 'package:stats': ['complete.cases', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""data.frame"", ""ifelse"", ""library"", ""mean""], ""package:dplyr"": [""group_by"", ""summarize""], ""package:ggplot2"": [""aes"", ""geom_jitter"", ""geom_point"", ""ggplot""], ""package:graphics"": [""plot"", ""text""], ""package:rpart"": [""rpart""], ""package:stats"": [""complete.cases"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase dataframe ifelse library mean packagedplyr groupby summarize packageggplot2 aes geomjitter geompoint ggplot packagegraphics plot text packagerpart rpart packagestats completecases predict packageutils readcsv str writecsv,"library(tidyverse)
library(randomForest)
library(caret)
library(rpart)
library(modelr)
train <- read.csv(""../input/train.csv"")
str(train)
test <- read.csv(""../input/test.csv"")
train <- (train[complete.cases(train), ])
train$Adult <- ifelse(train$Age < 18, 0, 1)
train %>% group_by(Sex) %>% summarize(mean(Survived))
train %>% group_by(Pclass) %>% summarize(mean(Survived))
ggplot(data = train, aes(x = Adult, y = Survived, color = Sex)) + geom_point() + geom_jitter()
fit <- rpart(Survived ~ Sex + Pclass + Age + Adult + Fare, data = train)
plot(fit)
text(fit)
test$Adult <- ifelse(test$Age < 18, 0, 1)
ps <- predict(fit, test)
ps <- ifelse(ps > 0.5, 1, 0)
pid <- test$PassengerId
final <- data.frame(PassengerId = pid, Survived = ps)
write.csv(final, file = ""PredictedSurvivors.csv"", row.names = FALSE)",1,0,1,0,0,0,0,1,0,1,0,0,0,0
205,cganxs-is-62-the-right-titanic-model-threshold,0.792,"['filter', 'as.data.frame', 'as.list', 'as.numeric', 'c', 'cbind', 'colnames', 'data.frame', 'do.call', 'factor', 'floor', 'gsub', 'ifelse', 'is.na', 'lapply', 'library', 'log', 'mean', 'names', 'nrow', 'options', 'paste0', 'rbind', 'return', 'rm', 'sample.int', 'sapply', 'scale', 'seq', 'seq.int', 'set.seed', 'sqrt', 'strsplit', 'sub', 'sum', 'summary', 'toupper', 'trimws', 'unique', 'arrange', 'bind_rows', 'desc', 'group_by', 'left_join', 'mutate', 'n', 'n_distinct', 'select', 'summarise', 'ungroup', 'aes', 'geom_line', 'ggplot', 'randomForest', 'median', 'model.matrix', 'predict', 'stri_count_boundaries', 'stri_extract_all_words', 'stri_extract_last_words', 'stri_split_fixed', 'head', 'read.csv', 'write.csv']","['reshape2', 'dplyr', 'ggplot2', 'stringi', 'rpart', 'boot', 'stringr', 'randomForest', 'e1071', 'base']",33.9163498878479,"['summarise', 'ungroup', 'nrow', 'mean', 'median', 'lapply', 'do.call', 'stri_count_boundaries', 'is.na', 'sub', 'stri_split_fixed', 'as.list', 'names', 'options', 'log', 'n_distinct', 'summary', 'left_join', 'filter', 'sapply', 'n', 'stri_extract_all_words', 'seq.int', 'set.seed', 'gsub', 'desc', 'factor', 'colnames', 'arrange', 'unique', 'stri_extract_last_words', 'model.matrix', 'toupper', 'read.csv', 'paste0', 'randomForest', 'return', 'as.data.frame', 'rm', 'scale', 'group_by', 'c', 'aes', 'mutate', 'rbind', 'as.numeric', 'ifelse', 'sum', 'predict', 'write.csv', 'seq', 'sqrt', 'sample.int', 'data.frame', 'strsplit', 'bind_rows', 'geom_line', 'ggplot', 'head', 'library', 'trimws', 'cbind', 'select', 'floor']",[],"['rkumar3147-exploring-survival-on-the-titanic1', 'vizcharlie-exploring-survival-on-the-titanic', 'quark6-titanic-work', 'hertan-titanic-surviving-dataset-simple-expression', 'anthobau-random-forest-titanic', 'samuelh-barebones-titanic-logistic-regression-test', 'caleblau-predicting-survival-on-the-titanic', 'vishaljindal0-titanic-r-code', 'imitation-exploring-survival-on-the-titanic', 'supriya675-titanic-prediction-simplified-for-beginners']","[0.592745220964249, 0.592745220964249, 0.5549340756750252, 0.5446021194938724, 0.500381737927353, 0.4919466986885739, 0.4406008715456975, 0.43809183395991735, 0.4362234445556919, 0.41329932893261273]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.data.frame', 'as.list', 'as.numeric', 'c', 'cbind', 'colnames', 'data.frame', 'do.call', 'factor', 'floor', 'gsub', 'ifelse', 'is.na', 'lapply', 'library', 'log', 'mean', 'names', 'nrow', 'options', 'paste0', 'rbind', 'return', 'rm', 'sample.int', 'sapply', 'scale', 'seq', 'seq.int', 'set.seed', 'sqrt', 'strsplit', 'sub', 'sum', 'summary', 'toupper', 'trimws', 'unique'], 'package:dplyr': ['arrange', 'bind_rows', 'desc', 'group_by', 'left_join', 'mutate', 'n', 'n_distinct', 'select', 'summarise', 'ungroup'], 'package:ggplot2': ['aes', 'geom_line', 'ggplot'], 'package:randomForest': ['randomForest'], 'package:stats': ['median', 'model.matrix', 'predict'], 'package:stringi': ['stri_count_boundaries', 'stri_extract_all_words', 'stri_extract_last_words', 'stri_split_fixed'], 'package:utils': ['head', 'read.csv', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.data.frame"", ""as.list"", ""as.numeric"", ""c"", ""cbind"", ""colnames"", ""data.frame"", ""do.call"", ""factor"", ""floor"", ""gsub"", ""ifelse"", ""is.na"", ""lapply"", ""library"", ""log"", ""mean"", ""names"", ""nrow"", ""options"", ""paste0"", ""rbind"", ""return"", ""rm"", ""sample.int"", ""sapply"", ""scale"", ""seq"", ""seq.int"", ""set.seed"", ""sqrt"", ""strsplit"", ""sub"", ""sum"", ""summary"", ""toupper"", ""trimws"", ""unique""], ""package:dplyr"": [""arrange"", ""bind_rows"", ""desc"", ""group_by"", ""left_join"", ""mutate"", ""n"", ""n_distinct"", ""select"", ""summarise"", ""ungroup""], ""package:ggplot2"": [""aes"", ""geom_line"", ""ggplot""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""median"", ""model.matrix"", ""predict""], ""package:stringi"": [""stri_count_boundaries"", ""stri_extract_all_words"", ""stri_extract_last_words"", ""stri_split_fixed""], ""package:utils"": [""head"", ""read.csv"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asdataframe aslist asnumeric c cbind colnames dataframe docall factor floor gsub ifelse isna lapply library log mean names nrow options paste0 rbind return rm sampleint sapply scale seq seqint setseed sqrt strsplit sub sum summary toupper trimws unique packagedplyr arrange bindrows desc groupby leftjoin mutate n ndistinct select summarise ungroup packageggplot2 aes geomline ggplot packagerandomForest randomForest packagestats median modelmatrix predict packagestringi stricountboundaries striextractallwords striextractlastwords strisplitfixed packageutils head readcsv writecsv,"options(stringsAsFactors = FALSE)
library(reshape2)
library(dplyr)
library(ggplot2)
library(stringi)
library(rpart)
library(boot)
library(stringr)
library(randomForest)
library(e1071)
train.df <- read.csv(""../input/train.csv"")
submission.df <- read.csv(""../input/test.csv"")
combined.df <- bind_rows(train.df, submission.df)
categories <- factor(combined.df$Sex)
combined.df <- cbind(combined.df, model.matrix(~categories + 0))
colnames(combined.df) <- sub(""categories"", """", colnames(combined.df))
rm(categories)
combined.df$Pclass <- ifelse(combined.df$Pclass == 1, ""Pclass.Upper"", ifelse(combined.df$Pclass == 2, ""Pclass.Middle"", ifelse(combined.df$Pclass == 3, ""Pclass.Lower"", ""Pclass.Other"")))
categories <- factor(combined.df$Pclass)
combined.df <- cbind(combined.df, model.matrix(~categories + 0))
colnames(combined.df) <- sub(""categories"", """", colnames(combined.df))
rm(categories)
combined.df$Embarked <- ifelse(combined.df$Embarked == ""C"", ""Cherbourg"", ifelse(combined.df$Embarked == ""Q"", ""Queenstown"", ifelse(combined.df$Embarked == ""S"", ""Southampton"", ""Unknown"")))
categories <- factor(combined.df$Embarked)
combined.df <- cbind(combined.df, model.matrix(~categories + 0))
colnames(combined.df) <- sub(""categories"", ""Embarked."", colnames(combined.df))
rm(categories)
combined.df$Fare[is.na(combined.df$Fare)] <- median(combined.df$Fare, na.rm = TRUE)
combined.df$Fare.Unskewed <- log(combined.df$Fare + 1)
combined.df$Cabin <- ifelse(combined.df$Cabin == """", ""Unknown"", combined.df$Cabin)
Cabin.Deck <- as.data.frame(stri_extract_all_words(gsub(""[0-9]"", """", combined.df$Cabin, ignore.case = TRUE), simplify = T), stringsAsFactors = F)
names(Cabin.Deck) <- c(""Cabin.Deck"", ""Cabin.Deck2"", ""Cabin.Deck3"", ""Cabin.Deck4"")
Cabin.Deck$Cabin <- combined.df$Cabin
Cabin.Deck <- Cabin.Deck[c(""Cabin"", ""Cabin.Deck"")] %>% group_by(Cabin, Cabin.Deck) %>% summarise(n = n()) %>% select(Cabin, Cabin.Deck) %>% ungroup()
categories <- factor(Cabin.Deck$Cabin.Deck)
Cabin.Deck <- cbind(Cabin.Deck, model.matrix(~categories + 0))
colnames(Cabin.Deck) <- sub(""categories"", ""Cabin.Deck."", colnames(Cabin.Deck))
combined.df <- combined.df %>% left_join(Cabin.Deck, by = c(Cabin = ""Cabin""))
rm(categories, Cabin.Deck)
Ticket.Number <- stri_extract_last_words(combined.df$Ticket)
combined.df$Ticket2 <- gsub(""[^0-9A-Za-z///' ]"", """", combined.df$Ticket, ignore.case = TRUE)
combined.df$Ticket2 <- sub(""/"", ""-"", combined.df$Ticket2)
boundary.count <- stri_count_boundaries(combined.df$Ticket2)
Ticket.Parsed <- as.data.frame(stri_extract_all_words(combined.df$Ticket2, simplify = T), stringsAsFactors = F)
Ticket.Prefix <- cbind(combined.df$Ticket, boundary.count, Ticket.Parsed) %>% mutate(Ticket.Prefix = ifelse(boundary.count == 1, ""None"", ifelse(boundary.count == 2, V1, ifelse(boundary.count == 3, paste0(V1, ""-"", V2), paste0(V1, ""-"", V2, ""-"", V3))))) %>% select(Ticket.Prefix)
combined.df <- cbind(combined.df, Ticket.Number, Ticket.Prefix)
combined.df$Ticket2 <- NULL
combined.df$Ticket.Prefix <- toupper(combined.df$Ticket.Prefix)
combined.df$Ticket.Prefix <- sub(""SOTON-"", """", combined.df$Ticket.Prefix)
combined.df$Ticket.Prefix <- sub(""STON-"", """", combined.df$Ticket.Prefix)
combined.df$Ticket.Prefix <- sub(""-BASLE"", """", combined.df$Ticket.Prefix)
combined.df$Ticket.Prefix <- sub(""-SOTON"", """", combined.df$Ticket.Prefix)
combined.df$Ticket.Prefix <- sub(""-PARIS"", """", combined.df$Ticket.Prefix)
combined.df$Ticket.Prefix <- sub(""O-2"", ""O2"", combined.df$Ticket.Prefix)
combined.df$Ticket.Prefix <- sub(""WE-P"", ""WEP"", combined.df$Ticket.Prefix)
cabin.id.df <- unique(combined.df[c(""Ticket.Prefix"", ""Ticket.Number"")])
cabin.id.df$CabinId <- seq.int(nrow(cabin.id.df))
combined.df <- combined.df %>% left_join(cabin.id.df, by = c(Ticket.Number = ""Ticket.Number"", Ticket.Prefix = ""Ticket.Prefix""))
rm(Ticket.Number, boundary.count, Ticket.Parsed, Ticket.Prefix, cabin.id.df)
Name2 <- trimws(do.call(rbind, strsplit(combined.df$Name, "",""))[, 2])
Title <- trimws(do.call(rbind, stri_split_fixed(str = Name2, pattern = ""."", n = 2))[, 1])
rm(Name2)
Title <- sub(""the "", """", Title)
Title <- sub(""Mme"", ""Mrs"", Title)
Title <- sub(""Dona"", ""Mrs"", Title)
Title <- sub(""Don"", ""Mr"", Title)
Title <- sub(""Mlle"", ""Miss"", Title)
Title <- sub(""Countess"", ""Nobility"", Title)
Title <- sub(""Jonkheer"", ""Nobility"", Title)
Title <- sub(""Lady"", ""Nobility"", Title)
Title <- sub(""Sir"", ""Nobility"", Title)
Title <- sub(""Capt"", ""Military"", Title)
Title <- sub(""Col"", ""Military"", Title)
Title <- sub(""Major"", ""Military"", Title)
combined.df <- cbind(combined.df, Title)
categories <- factor(combined.df$Title)
combined.df <- cbind(combined.df, model.matrix(~categories + 0))
colnames(combined.df) <- sub(""categories"", ""Name.Title."", colnames(combined.df))
rm(Title, categories)
combined.df$Name.Last <- trimws(do.call(rbind, strsplit(combined.df$Name, "",""))[, 1])
summary(combined.df$Age)
age.df <- combined.df[c(""PassengerId"", ""Age"")]
age.names <- c(""SibSp"", ""Parch"", ""Fare"", ""female"", ""male"", ""Pclass.Lower"", ""Pclass.Middle"", ""Pclass.Upper"", ""Embarked.Cherbourg"", ""Embarked.Queenstown"", ""Embarked.Southampton"", ""Embarked.Unknown"", ""Name.Title.Dr"", ""Name.Title.Master"", ""Name.Title.Military"", ""Name.Title.Miss"", ""Name.Title.Mr"", ""Name.Title.Mrs"", ""Name.Title.Ms"", ""Name.Title.Nobility"", ""Name.Title.Rev"")
scaled.age.num <- combined.df[, (names(combined.df) %in% age.names)] %>% scale()
scaled.age.df <- cbind(age.df, scaled.age.num)
rm(age.df, scaled.age.num)
set.seed(1489)
age.predict.df <- scaled.age.df[is.na(scaled.age.df$Age), ]
age.estimated.df <- scaled.age.df[!is.na(scaled.age.df$Age), ] %>% filter(Age - floor(Age) > 0)
age.test.train.df <- scaled.age.df[!is.na(scaled.age.df$Age), ] %>% filter(Age >= 1 & floor(Age) - Age == 0)
sample <- sample.int(n = nrow(age.test.train.df), size = floor(0.8 * nrow(age.test.train.df)), replace = F)
age.train.df <- age.test.train.df[sample, ]
age.test.df <- age.test.train.df[-sample, ]
age_train_y <- age.train.df[, ""Age""]
age_train_x <- age.train.df[, (names(age.train.df) %in% age.names)]
age_test_y <- age.test.df[, ""Age""]
age_test_x <- age.test.df[, (names(age.test.df) %in% age.names)]
age_rf_model <- randomForest(age_train_x, y = age_train_y, ntree = 500, importance = TRUE)
sqrt(mean(as.numeric((predict(age_rf_model) - age_train_y)^2)))
sqrt(mean(((predict(age_rf_model, age_test_x) - age_test_y)^2)))
PassengerId <- age.predict.df[, ""PassengerId""]
age_predict_x <- age.predict.df[, (names(age.predict.df) %in% age.names)]
age_predicted <- predict(age_rf_model, age_predict_x)
age.predicted.df <- data.frame(cbind(PassengerId, age_predicted))
combined.df <- combined.df %>% dplyr::left_join(age.predicted.df, by = c(PassengerId = ""PassengerId"")) %>% mutate(Age.Estimated = ifelse(is.na(Age), 1, ifelse(Age >= 1 & floor(Age) != Age, 1, 0)), Age = ifelse(is.na(Age), age_predicted, Age))
combined.df$age_predicted <- NULL
summary(combined.df$Age)
ticket.prefix.fare.df <- combined.df %>% group_by(Ticket.Prefix, Ticket.Number) %>% summarise(Fare = sum(Fare)) %>% group_by(Ticket.Prefix) %>% summarise(Fare = sum(Fare), Count = n(), Prefix.Avg.Fare = sum(Fare)/n()) %>% select(Ticket.Prefix, Prefix.Avg.Fare)
cabin.proxy.df <- combined.df %>% group_by(CabinId) %>% summarise(Cabin.Passenger.Count = n(), Cabin.Fare = sum(Fare), Cabin.Distinct.Last.Names = n_distinct(Name.Last))
cabin.proxy.df$Cabin.Fare.Unskewed <- log(cabin.proxy.df$Cabin.Fare + 1)
cabin.family.fare.df <- combined.df %>% group_by(CabinId, Name.Last) %>% summarise(Cabin.Family.Count = n(), Cabin.Family.Fare = sum(Fare), Cabin.Family.Age = mean(Age))
cabin.family.fare.df$Cabin.Family.Fare.Unskewed <- log(cabin.family.fare.df$Cabin.Family.Fare + 1)
combined.df$Survived.Proxy <- ifelse(is.na(combined.df$Survived), 0, combined.df$Survived)
surviving.family.fun <- function(x) {
    cabin <- as.list(unique(combined.df %>% filter(PassengerId == x) %>% select(CabinId)))
    Surviving.Family.df <- combined.df %>% filter(CabinId == cabin & PassengerId != x) %>% group_by(CabinId, Name.Last) %>% summarise(Passenger.Known.Surviving.Family = sum(Survived.Proxy))
    Passenger.Surviving.Family.df <- combined.df[c(""PassengerId"", ""CabinId"", ""Name.Last"")] %>% filter(PassengerId == x) %>% left_join(Surviving.Family.df, by = c(CabinId = ""CabinId"", Name.Last = ""Name.Last"")) %>% select(PassengerId, Passenger.Known.Surviving.Family)
    return(Passenger.Surviving.Family.df)
}
Passenger.Surviving.Family.df <- lapply(as.list(combined.df$PassengerId), surviving.family.fun) %>% bind_rows() %>% mutate(Passenger.Known.Surviving.Family = ifelse(is.na(Passenger.Known.Surviving.Family), 0, Passenger.Known.Surviving.Family))
combined.df <- combined.df %>% left_join(ticket.prefix.fare.df, by = c(Ticket.Prefix = ""Ticket.Prefix"")) %>% left_join(cabin.proxy.df, by = c(CabinId = ""CabinId"")) %>% left_join(cabin.family.fare.df, by = c(CabinId = ""CabinId"", Name.Last = ""Name.Last"")) %>% left_join(Passenger.Surviving.Family.df, by = c(PassengerId = ""PassengerId""))
combined.df$Survived.Proxy <- NULL
combined.df$Passenger.Known.Surviving.Family.Pct <- ifelse(combined.df$Cabin.Family.Count - 1 == 0, 0, combined.df$Passenger.Known.Surviving.Family/(combined.df$Cabin.Family.Count - 1))
combined.df$Cabin.Group <- ifelse(combined.df$Cabin.Passenger.Count == 1, ""Single"", ifelse(combined.df$Cabin.Distinct.Last.Names == 1, ""Family"", ""Other""))
categories <- factor(combined.df$Cabin.Group)
combined.df <- cbind(combined.df, model.matrix(~categories + 0))
colnames(combined.df) <- sub(""categories"", ""Cabin."", colnames(combined.df))
rm(categories)
mom.df <- combined.df[c(""CabinId"", ""PassengerId"", ""Name"", ""Name.Last"", ""Title"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Cabin.Family.Count"")] %>% filter(Sex == ""female"" & Cabin.Family.Count > 1 & Parch > 0 & Title == ""Mrs"") %>% mutate(Travel.with.Mom = 1)
passengers.wmom.df <- combined.df[c(""CabinId"", ""Name.Last"", ""PassengerId"")] %>% filter(!PassengerId %in% as.list(mom.df$PassengerId)) %>% left_join(mom.df[c(""CabinId"", ""Name.Last"", ""Travel.with.Mom"")], by = c(CabinId = ""CabinId"", Name.Last = ""Name.Last"")) %>% select(PassengerId, Travel.with.Mom) %>% filter(!is.na(Travel.with.Mom))
combined.df <- combined.df %>% left_join(passengers.wmom.df, by = c(PassengerId = ""PassengerId""))
combined.df$Travel.with.Mom <- ifelse(is.na(combined.df$Travel.with.Mom), 0, combined.df$Travel.with.Mom)
passenger.id <- c(""PassengerId"", ""Survived"")
scaled.df <- combined.df[, sapply(combined.df, is.numeric)] %>% scale() %>% data.frame()
scaled.survival.df <- cbind(combined.df[, (names(combined.df) %in% passenger.id)], scaled.df[, (!names(scaled.df) %in% passenger.id)])
test.train.df <- scaled.survival.df[!is.na(scaled.survival.df$Survived), ]
submission.df <- scaled.survival.df[is.na(scaled.survival.df$Survived), ]
submission.df$Survived <- NULL
set.seed(1489)
sample <- sample.int(n = nrow(test.train.df), size = floor(0.8 * nrow(test.train.df)), replace = F)
survival.train.df <- test.train.df[sample, ]
survival.test.df <- test.train.df[-sample, ]
features.selected <- c(""Pclass.Lower"", ""Pclass.Middle"", ""Pclass.Upper"", ""Embarked.Cherbourg"", ""Embarked.Queenstown"", ""Embarked.Southampton"", ""Embarked.Unknown"", ""Name.Title.Dr"", ""Name.Title.Master"", ""Name.Title.Military"", ""Name.Title.Miss"", ""Name.Title.Mr"", ""Name.Title.Mrs"", ""Name.Title.Ms"", ""Name.Title.Nobility"", ""Name.Title.Rev"", ""Age"", ""Fare.Unskewed"", ""female"", ""male"", ""Age.Estimated"", ""SibSp"", ""Parch"", ""Cabin.Passenger.Count"", ""Cabin.Fare.Unskewed"", ""Cabin.Distinct.Last.Names"", ""Cabin.Family"", 
    ""Cabin.Other"", ""Cabin.Single"", ""Prefix.Avg.Fare"", ""Cabin.Deck.A"", ""Cabin.Deck.B"", ""Cabin.Deck.C"", ""Cabin.Deck.D"", ""Cabin.Deck.E"", ""Cabin.Deck.F"", ""Cabin.Deck.Unknown"", ""Passenger.Known.Surviving.Family"", ""Passenger.Known.Surviving.Family.Pct"")
survival_train_y <- survival.train.df[, ""Survived""]
survival_train_x <- survival.train.df[, (names(survival.train.df) %in% features.selected)]
survival_test_y <- survival.test.df[, ""Survived""]
survival_test_x <- survival.test.df[, (names(survival.test.df) %in% features.selected)]
survival_rf_model <- randomForest(survival_train_x, y = survival_train_y, ntree = 500, importance = TRUE)
threshold.fun <- function(x) {
    oob_results <- cbind(Outcome = survival_train_y, Prediction = ifelse(predict(survival_rf_model) > x, 1, 0)) %>% data.frame() %>% mutate(Set = ""Train"", Threshold = x, Pred_Desc = ifelse(Outcome == Prediction, ""Correct Prediction"", ifelse(Outcome == 0 & Prediction == 1, ""False Pos (Drwn)"", ""False Neg (Surv)""))) %>% group_by(Set, Threshold, Pred_Desc) %>% summarise(Passenger.Count = n())
    test_results <- cbind(Outcome = survival_test_y, Prediction = ifelse(predict(survival_rf_model, survival_test_x) > x, 1, 0)) %>% data.frame() %>% mutate(Set = ""Test"", Threshold = x, Pred_Desc = ifelse(Outcome == Prediction, ""Correct Prediction"", ifelse(Outcome == 0 & Prediction == 1, ""False Pos (Drwn)"", ""False Neg (Surv)""))) %>% group_by(Set, Threshold, Pred_Desc) %>% summarise(Passenger.Count = n())
    results.df <- rbind(oob_results, test_results)
    return(results.df)
}
results.df <- lapply(seq(from = 0, to = 1, by = 0.01), threshold.fun) %>% bind_rows()
ggplot(results.df %>% filter(Set == ""Train""), aes(x = Threshold, y = Passenger.Count)) + geom_line(aes(color = Pred_Desc), size = 1)
ggplot(results.df %>% filter(Set == ""Test""), aes(x = Threshold, y = Passenger.Count)) + geom_line(aes(color = Pred_Desc), size = 1)
head(results.df %>% filter(Set == ""Train"" & Pred_Desc == ""Correct Prediction"") %>% arrange(desc(Passenger.Count)))
survival.threshold <- 0.62
survival_submission_x <- submission.df[, (names(submission.df) %in% features.selected)]
survival_submision_pred <- predict(survival_rf_model, survival_submission_x)
PassengerId <- submission.df[, ""PassengerId""]
Survived <- ifelse(survival_submision_pred > survival.threshold, 1, 0)
kaggle.submission <- cbind(PassengerId, Survived)
write.csv(kaggle.submission, file = paste0(""submission_"", survival.threshold * 100, ""threshold.csv""), row.names = F)",1,0,0,0,0,0,0,0,0,1,0,1,0,0
206,srikantjyrmn-titanic-survivor,0.746,"['filter', 'user defined', 'user defined', 'user defined', 'as.factor', 'c', 'data.frame', 'factor', 'gsub', 'is.na', 'levels', 'library', 'ls', 'max', 'min', 'names', 'paste', 'paste0', 'rm', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'table', 'unique', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_hline', 'geom_text', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'mosaicplot', 'par', 'plot', 'complete', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'boundary', 'str_extract', 'str_length', 'read.csv', 'str', 'write.csv']","['dplyr', 'ggplot2', 'caret', 'stringr', 'mice', 'randomForest', 'caretEnsemble', 'ggthemes', 'scales', 'base']",25.8611571788788,"['labs', 'complete', 'geom_text', 'median', 'min', 'coord_flip', 'dense_rank', 'str', 'is.na', 'levels', 'str_length', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'summary', 'filter', 'boundary', 'round', 'sapply', 'mosaicplot', 'hist', 'mice', 'geom_hline', 'desc', 'set.seed', 'gsub', 'importance', 'factor', 'str_extract', 'unique', 'max', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'rm', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'reorder', 'sum', 'ls', 'plot', 'dollar_format', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'strsplit', 'ggplot', 'geom_density', 'user defined', 'library']",[],"['monfilier-titanic-survival-prediction', 'jasminegoel-playing-with-titanic-dataset-r', 'biohazzzard-titanic-with-tidyverse-and-caret', 'tavoosi-predicting-survival-on-the-titanic-with-rf-lr-nb', 'redroy44-tidy-titanic-script', 'skhawaja-titanic-disaster-survival-099', 'lich070192-titanic-test', 'zahraatashgahy-r-titanic-1', 'shashank74-titanic-disaster-data-exploration-and-modelling', 'vasuls-predictive-analysis-of-survival-rate-on-titanic']","[0.9151600239502754, 0.906171867864351, 0.8029080080811031, 0.8023446946094221, 0.74142082512708, 0.06691774708752918, 0.05048049666507029, 0.04826162000543331, 0.048147648788757685, 0.04389612227933974]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'character(0)': ['set'], 'package:base': ['as.factor', 'c', 'data.frame', 'factor', 'gsub', 'is.na', 'levels', 'library', 'ls', 'max', 'min', 'names', 'paste', 'paste0', 'rm', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'table', 'unique'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_hline', 'geom_text', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:stringr': ['boundary', 'str_extract', 'str_length'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""character(0)"": [""set""], ""package:base"": [""as.factor"", ""c"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""levels"", ""library"", ""ls"", ""max"", ""min"", ""names"", ""paste"", ""paste0"", ""rm"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""summary"", ""table"", ""unique""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_hline"", ""geom_text"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:stringr"": [""boundary"", ""str_extract"", ""str_length""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter character0 set packagebase asfactor c dataframe factor gsub isna levels library ls max min names paste paste0 rm round rownames sapply setseed strsplit sum summary table unique packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip geombar geomboxplot geomdensity geomhline geomtext ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist mosaicplot par plot packagemice complete mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packagestringr boundary strextract strlength packageutils readcsv str writecsv,"rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(caret)
library(stringr)
library(mice)
library(randomForest)
library(caretEnsemble)
library(""ggthemes"")
library(""scales"")
train_data <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test_data <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full_data <- bind_rows(train_data, test_data)
str(full_data)
full_data$Title <- (gsub(""(.*, )|(\\..*)"", """", full_data$Name))
table(full_data$Sex, full_data$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full_data$Title[full_data$Title == ""Mlle""] <- ""Miss""
full_data$Title[full_data$Title == ""Ms""] <- ""Miss""
full_data$Title[full_data$Title == ""Mme""] <- ""Mrs""
full_data$Title[full_data$Title %in% rare_title] <- ""Rare Title""
table(full_data$Sex, full_data$Title)
full_data$Title <- as.factor(full_data$Title)
full_data$Surname <- sapply(full_data$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
full_data$Surname <- as.factor(full_data$Surname)
str(full_data)
full_data$family_size <- full_data$SibSp + full_data$Parch + 1
full_data$Family <- as.factor(paste(full_data$Surname, full_data$family_size, sep = ""_""))
ggplot(full_data[1:891, ], aes(x = family_size, fill = factor(Survived))) + geom_bar(position = ""fill"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full_data$family_size_group[full_data$family_size == 1] <- ""singleton""
full_data$family_size_group[full_data$family_size < 5 & full_data$family_size > 1] <- ""small""
full_data$family_size_group[full_data$family_size > 4] <- ""large""
table(full_data$family_size_group)
full_data$family_size_group <- as.factor(full_data$family_size_group)
levels(full_data$family_size_group) = c(""single"", ""medium"", ""large"")
full_data %>% filter(!is.na(Survived)) %>% ggplot(aes(x = family_size, fill = factor(Survived))) + geom_bar(position = ""fill"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
mosaicplot(table(full_data$family_size_group, full_data$Survived), main = ""Family Size by Survival"", shade = TRUE)
full_data$Cabin_letter <- as.factor(str_extract(full_data$Cabin, boundary(""character"")))
full_data$Cabin_letter_length <- str_length(full_data$Cabin)
summary(full_data)
full_data %>% filter(Pclass == 3) %>% ggplot(aes(x = Fare)) + geom_density()
full_data$Fare[is.na(full_data$Fare)] <- median(full_data$Fare[full_data$Pclass == 3 & full_data$Embarked == ""S""], na.rm = TRUE)
embark_fare <- full_data %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full_data$Embarked[c(62, 830)] <- ""C""
full_data$Sex <- as.factor(full_data$Sex)
full_data$Embarked <- as.factor(full_data$Embarked)
full_data$PassengerId <- as.factor(full_data$PassengerId)
full_data$Pclass <- as.factor(full_data$Pclass)
set.seed(129)
mice_mod <- mice(full_data[, !names(full_data) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"", ""Cabin_letter_length"")], method = ""rf"")
mice_output <- complete(mice_mod)
full_data$Age <- mice_output$Age
par(mfrow = c(1, 1))
hist(mice_output$Age)
hist(full_data$Age)
full_data$Child[full_data$Age < 18] <- ""Child""
full_data$Child[full_data$Age >= 18] <- ""Adult""
table(full_data$Child, full_data$Survived)
full_data$Mother <- ""Not Mother""
full_data$Mother[full_data$Sex == ""female"" & full_data$Parch > 0 & full_data$Age > 18 & full_data$Title != ""Miss""] <- ""Mother""
table(full_data$Mother, full_data$Survived)
full_data$Child <- as.factor(full_data$Child)
full_data$Mother <- as.factor(full_data$Mother)
full_data$Fare_bin <- (full_data$Fare - min(full_data$Fare))/(max(full_data$Fare) - min(full_data$Fare))
full_data$num_people_with_ticket <- sapply(full_data$Ticket, function(x) {
    sum(full_data$Ticket == x)
})
full_data$party_size[full_data$num_people_with_ticket == 1] <- ""singleton""
full_data$party_size[full_data$num_people_with_ticket %in% 2:4] <- ""two_to_four""
full_data$party_size[full_data$num_people_with_ticket %in% 5:8] <- ""five_to_eight""
full_data$party_size[full_data$num_people_with_ticket > 8] <- ""gt_eight""
full_data$party_size <- as.factor(full_data$party_size)
surviving_tickets <- unique(full_data$Ticket[full_data$Survived == 1 & !is.na(full_data$Survived) & full_data$party_size != ""singleton""])
full_data$surviving_ticket <- sapply(full_data$Ticket, function(x) {
    x %in% surviving_tickets
})
full_data %>% filter(!is.na(Survived)) %>% ggplot(aes(x = surviving_ticket, fill = factor(Survived))) + geom_bar(position = ""fill"")
train <- full_data[1:891, ]
test <- full_data[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare_bin + party_size + surviving_ticket + Embarked + Title + family_size_group + Child + Mother, data = train)
sapply(full_data, class)
plot(rf_model, ylim = c(0, 0.36))
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
p <- predict(rf_model, test)
results <- data.frame(PassengerId = test_data$PassengerId, Survived = p)
write.csv(results, file = ""submit_results.csv"", row.names = FALSE)",1,0,1,1,0,0,0,1,0,0,1,0,0,0
207,joelweiss-titanic-data-r,0.7509999999999999,"['as.factor', 'as.numeric', 'c', 'data.frame', 'dim', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'sapply', 'strsplit', 'system', 'bind_rows', 'complete', 'mice', 'importance', 'randomForest', 'median', 'predict', 'read.csv', 'str', 'write.csv']","['ggplot2', 'readr', 'dplyr', 'mice', 'randomForest', 'base']",4.10808706283569,"['complete', 'median', 'lapply', 'is.na', 'names', 'as.factor', 'sapply', 'mice', 'importance', 'str', 'gsub', 'factor', 'dim', 'read.csv', 'randomForest', 'c', 'as.numeric', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'strsplit', 'library', 'system']",[],"['cnusapbo-titanic-r-code', 'prabhulingayya-titanic-prediction-using-logistic-regression', 'goblin-titanic-test', 'garciparedes-titanic-getting-started', 'tsfitz-titanic', 'jacekpardyak-mytitanicscript', 'alma123-titanic', 'fpsawicki-eda-and-prediction-on-titanic-dataset', 'mustfkeskin-titanic-xgboost', 'econdata-titanic-datasets-ml-with-r-journey-to-top-1']","[0.5668477948535641, 0.5657821282835571, 0.4942853033265589, 0.41384156608986605, 0.39203276637140305, 0.38612014947245177, 0.3758697757519594, 0.3721933757686051, 0.34178107384203565, 0.3058737390726652]","{'package:base': ['as.factor', 'as.numeric', 'c', 'data.frame', 'dim', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'sapply', 'strsplit', 'system'], 'package:dplyr': ['bind_rows'], 'package:mice': ['complete', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""as.factor"", ""as.numeric"", ""c"", ""data.frame"", ""dim"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""sapply"", ""strsplit"", ""system""], ""package:dplyr"": [""bind_rows""], ""package:mice"": [""complete"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase asfactor asnumeric c dataframe dim factor gsub isna lapply library names sapply strsplit system packagedplyr bindrows packagemice complete mice packagerandomForest importance randomForest packagestats median predict packageutils readcsv str writecsv,"library(ggplot2)
library(readr)
system(""ls ../input"")
train <- read.csv(""../input/train.csv"", header = TRUE, stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", header = TRUE, stringsAsFactors = F)
dim(train)
dim(test)
library(""dplyr"")
data <- bind_rows(train, test)
dim(data)
str(data)
data$Title <- gsub(""(.*, )|(\\..*)"", """", data$Name)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
data$Title[data$Title == ""Mlle""] <- ""Miss""
data$Title[data$Title == ""Ms""] <- ""Miss""
data$Title[data$Title == ""Mme""] <- ""Mrs""
data$Title[data$Title %in% rare_title] <- ""Rare Title""
data$Embarked[c(62, 830)] <- ""C""
data$Fare[1044] <- median(data[data$Pclass == ""3"" & data$Embarked == ""S"", ]$Fare, na.rm = TRUE)
data$Fare[data$Fare < 3] = NA
data$Fare[data$Fare > 300] <- median(data[data$Pclass == ""1"" & data$Embarked == ""C"", ]$Fare, na.rm = TRUE)
library(""mice"")
factor_vars <- c(""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked"")
mice_mod <- mice(data[, names(data) %in% factor_vars], method = ""rf"")
mice_output <- complete(mice_mod)
for (ivar in factor_vars) {
    data[, ivar] <- mice_output[, ivar]
}
data$FamilySize <- data$SibSp + data$Parch + 1
data$Fare_Per_Person <- data$Fare/as.numeric(data$FamilySize)
data$Deck <- sapply(data$Cabin, function(x) strsplit(x, NULL)[[1]][1])
data$Deck[is.na(data$Deck)] <- ""Unknown""
data$Age_Group[data$Age <= 10] <- ""Kid""
data$Age_Group[data$Age <= 20 & data$Age > 10] <- ""Teen""
data$Age_Group[data$Age <= 30 & data$Age > 20] <- ""Young""
data$Age_Group[data$Age <= 40 & data$Age > 30] <- ""Adult""
data$Age_Group[data$Age <= 50 & data$Age > 40] <- ""Senior""
data$Age_Group[data$Age > 50] <- ""old""
factor_vars <- c(""Pclass"", ""SibSp"", ""Parch"", ""FamilySize"")
data[factor_vars] <- lapply(data[factor_vars], function(x) as.factor(x))
factor_vars <- c(""Name"", ""Sex"", ""Ticket"", ""Cabin"", ""Embarked"", ""Title"", ""Deck"", ""Age_Group"")
data[factor_vars] <- lapply(data[factor_vars], function(x) as.factor(x))
train <- data[1:891, ]
test <- data[892:1309, ]
train$PassengerId <- NULL
train$Name <- NULL
train$Ticket <- NULL
train$Cabin <- NULL
library(""randomForest"")
rf_model <- randomForest(factor(Survived) ~ ., data = train)
importance(rf_model)
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
208,jaimisk-titanic-survival-logistic-regression,0.746,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'missmap', 'c', 'data.frame', 'factor', 'is.na', 'length', 'library', 'max', 'min', 'print', 'return', 'seq', 'summary', 'bind_rows', 'select', 'aes', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_vline', 'ggplot', 'scale_x_continuous', 'scale_y_continuous', 'theme_bw', 'dev.off', 'dollar_format', 'binomial', 'glm', 'median', 'predict', 'head', 'help', 'read.csv', 'str', 'write.csv']","['Amelia', 'ggplot2', 'dplyr', 'scales', 'base']",2.40268898010254,"['dev.off', 'median', 'min', 'is.na', 'glm', 'scale_x_continuous', 'geom_boxplot', 'print', 'summary', 'geom_histogram', 'str', 'missmap', 'factor', 'max', 'geom_bar', 'help', 'length', 'read.csv', 'binomial', 'theme_bw', 'return', 'scale_y_continuous', 'c', 'aes', 'geom_vline', 'predict', 'write.csv', 'dollar_format', 'seq', 'bind_rows', 'data.frame', 'ggplot', 'geom_density', 'head', 'user defined', 'library', 'select']",[],"['xxxmatxxx-titanic-getting-started-with-randomforest', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'jww001-exploring-survival-on-the-titanicqw', 'tetyama-trial-titanic', 'kyanyoga-exploring-survival-on-the-titanic', 'bonesaw98616-exploring-survival-on-the-titanic', 'mohankanni-exploring-survival-on-the-titanic', 'researchbigd-titanic-forkedfrommeganscript']","[0.5313164459445542, 0.5224803875019199, 0.5222908439899419, 0.5222908439899419, 0.5201362491122501, 0.5196922411883607, 0.5184030224474432, 0.5183686511917917, 0.5173676332379222, 0.5172113345886736]","{'character(0)': ['impute_age'], 'package:Amelia': ['missmap'], 'package:base': ['c', 'data.frame', 'factor', 'is.na', 'length', 'library', 'max', 'min', 'print', 'return', 'seq', 'summary'], 'package:dplyr': ['bind_rows', 'select'], 'package:ggplot2': ['aes', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_vline', 'ggplot', 'scale_x_continuous', 'scale_y_continuous', 'theme_bw'], 'package:grDevices': ['dev.off'], 'package:scales': ['dollar_format'], 'package:stats': ['binomial', 'glm', 'median', 'predict'], 'package:utils': ['head', 'help', 'read.csv', 'str', 'write.csv']}","{""character(0)"": [""impute_age""], ""package:Amelia"": [""missmap""], ""package:base"": [""c"", ""data.frame"", ""factor"", ""is.na"", ""length"", ""library"", ""max"", ""min"", ""print"", ""return"", ""seq"", ""summary""], ""package:dplyr"": [""bind_rows"", ""select""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_vline"", ""ggplot"", ""scale_x_continuous"", ""scale_y_continuous"", ""theme_bw""], ""package:grDevices"": [""dev.off""], ""package:scales"": [""dollar_format""], ""package:stats"": [""binomial"", ""glm"", ""median"", ""predict""], ""package:utils"": [""head"", ""help"", ""read.csv"", ""str"", ""write.csv""]}",character0 imputeage packageAmelia missmap packagebase c dataframe factor isna length library max min print return seq summary packagedplyr bindrows select packageggplot2 aes geombar geomboxplot geomdensity geomhistogram geomvline ggplot scalexcontinuous scaleycontinuous themebw packagegrDevices devoff packagescales dollarformat packagestats binomial glm median predict packageutils head help readcsv str writecsv,"df.train <- read.csv(""../input/train.csv"")
df.test <- read.csv(""../input/test.csv"")
library(Amelia)
library(ggplot2)
library(dplyr)
library(scales)
print(head(df.train))
print(str(df.train))
print(head(df.test))
print(str(df.test))
full <- bind_rows(df.train, df.test)
help(""missmap"")
missmap(full, main = ""Missing MAP"", col = c(""yellow"", ""black""), legend = FALSE)
ggplot(df.train, aes(Survived)) + geom_bar()
ggplot(df.train, aes(Pclass)) + geom_bar(aes(fill = factor(Pclass)))
ggplot(df.train, aes(Sex)) + geom_bar(aes(fill = factor(Sex)))
ggplot(df.train, aes(Age)) + geom_histogram(bins = 20, alpha = 0.5, fill = ""blue"")
ggplot(df.train, aes(SibSp)) + geom_bar()
ggplot(df.train, aes(Fare)) + geom_histogram()
ggplot(df.train, aes(Fare)) + geom_histogram(fill = ""green"", color = ""black"", alpha = 0.5)
pl <- ggplot(full, aes(Pclass, Age))
pl <- pl + geom_boxplot(aes(group = Pclass, fill = factor(Pclass), alpha = 0.4))
pl + scale_y_continuous(breaks = seq(min(0), max(80), by = 2)) + theme_bw()
impute_age <- function(age, class) {
    out <- age
    for (i in 1:length(age)) {
        if (is.na(age[i])) {
            if (class[i] == 1) {
                out[i] <- 37
            }
            else if (class[i] == 2) {
                out[i] <- 29
            }
            else {
                out[i] <- 24
            }
        }
        else {
            out[i] <- age[i]
        }
    }
    return(out)
}
fixed.ages <- impute_age(full$Age, full$Pclass)
full$Age <- fixed.ages
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format())
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
missmap(full, main = ""Titanic Training Data - Missings Map"", col = c(""yellow"", ""black""), legend = FALSE)
str(full)
full <- select(full, -PassengerId, -Name, -Ticket, -Cabin, -Parch)
head(full)
str(full)
full$Survived <- factor(full$Survived)
full$Pclass <- factor(full$Pclass)
full$SibSp <- factor(full$SibSp)
str(full)
train.1 <- full[1:891, ]
test.1 <- full[892:1309, ]
str(train.1)
str(test.1)
log.model <- glm(formula = Survived ~ ., family = binomial(link = ""logit""), data = train.1)
summary(log.model)
str(train.1)
str(test.1)
model <- predict(log.model, newdata = test.1, type = ""response"")
solution <- data.frame(PassengerID = df.test$PassengerId, Survived = model)
str(solution)
solution$Survived[solution$Survived < 0.5] <- 0
solution$Survived[solution$Survived >= 0.5] <- 1
head(solution)
write.csv(solution, file = ""logistic_titanic_model_sol.csv"", row.names = F)
dev.off()",0,0,0,0,0,0,0,0,0,0,0,0,0,1
209,monikapeteva-predictive-analysis-of-survival-rate-on-titanic,0.758,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.data.frame', 'as.integer', 'as.numeric', 'c', 'cat', 'cut', 'data.frame', 'factor', 'ifelse', 'is.na', 'length', 'library', 'list', 'max', 'mean', 'min', 'names', 'options', 'rbind', 'rep', 'return', 'round', 'sample', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'tapply', 'which', 'svm', 'aes', 'geom_density', 'geom_histogram', 'geom_vline', 'ggplot', 'barplot', 'hist', 'par', 'randomForest', 'rpart', 'glm', 'median', 'na.omit', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['dplyr', 'ggplot2', 'ggthemes', 'randomForest', 'rpart', 'e1071', 'base']",2.60194706916809,"['list', 'mean', 'median', 'min', 'which', 'svm', 'cat', 'as.character', 'is.na', 'glm', 'names', 'options', 'na.omit', 'rpart', 'round', 'sapply', 'rep', 'geom_histogram', 'hist', 'str', 'set.seed', 'factor', 'as.integer', 'max', 'cut', 'length', 'read.csv', 'table', 'par', 'return', 'randomForest', 'as.data.frame', 'c', 'aes', 'rbind', 'sample', 'as.numeric', 'ifelse', 'sum', 'geom_vline', 'predict', 'write.csv', 'data.frame', 'strsplit', 'tapply', 'ggplot', 'geom_density', 'head', 'user defined', 'library', 'barplot']",[],"['vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'kapillehar-titanic-rf-prediction-0-81818', 'vikasht34-titanic-rf-prediction-0-81818', 'ashutoshds-titanic-rf-prediction-0-81818', 'shashank74-titanic-disaster-data-exploration-and-modelling', 'delasupreme-titanic-data-analysis-rf-prediction-0-81818', 'pranaytiwari-titanic-data-analysis-rf-prediction-0-81818']","[0.8551670503730721, 0.8551670503730721, 0.8524237054336411, 0.8524237054336411, 0.4583207518225692, 0.4583207518225692, 0.4514460386534585, 0.4102887127555662, 0.3954575119957825, 0.3954575119957825]","{'character(0)': ['get_age', 'get_titles'], 'package:base': ['as.character', 'as.data.frame', 'as.integer', 'as.numeric', 'c', 'cat', 'cut', 'data.frame', 'factor', 'ifelse', 'is.na', 'length', 'library', 'list', 'max', 'mean', 'min', 'names', 'options', 'rbind', 'rep', 'return', 'round', 'sample', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'tapply', 'which'], 'package:e1071': ['svm'], 'package:ggplot2': ['aes', 'geom_density', 'geom_histogram', 'geom_vline', 'ggplot'], 'package:graphics': ['barplot', 'hist', 'par'], 'package:randomForest': ['randomForest'], 'package:rpart': ['rpart'], 'package:stats': ['glm', 'median', 'na.omit', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""character(0)"": [""get_age"", ""get_titles""], ""package:base"": [""as.character"", ""as.data.frame"", ""as.integer"", ""as.numeric"", ""c"", ""cat"", ""cut"", ""data.frame"", ""factor"", ""ifelse"", ""is.na"", ""length"", ""library"", ""list"", ""max"", ""mean"", ""min"", ""names"", ""options"", ""rbind"", ""rep"", ""return"", ""round"", ""sample"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table"", ""tapply"", ""which""], ""package:e1071"": [""svm""], ""package:ggplot2"": [""aes"", ""geom_density"", ""geom_histogram"", ""geom_vline"", ""ggplot""], ""package:graphics"": [""barplot"", ""hist"", ""par""], ""package:randomForest"": [""randomForest""], ""package:rpart"": [""rpart""], ""package:stats"": [""glm"", ""median"", ""na.omit"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",character0 getage gettitles packagebase ascharacter asdataframe asinteger asnumeric c cat cut dataframe factor ifelse isna length library list max mean min names options rbind rep return round sample sapply setseed strsplit sum table tapply which packagee1071 svm packageggplot2 aes geomdensity geomhistogram geomvline ggplot packagegraphics barplot hist par packagerandomForest randomForest packagerpart rpart packagestats glm median naomit predict packageutils head readcsv str writecsv,"library(""dplyr"")
library(""ggplot2"")
library(""ggthemes"")
options(warn = -1)
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
test$Survived <- NA
full <- rbind(train, test)
head(full)
str(full)
age <- full$Age
n = length(age)
set.seed(123)
age_na_rows = which(is.na(age))
age[age_na_rows] = sample(na.omit(full$Age), length(age_na_rows))
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Before Replacement"", col = ""lightblue"", ylim = c(0, 0.04), xlab = ""age"")
hist(age, freq = F, main = ""After Replacement"", col = ""darkblue"", ylim = c(0, 0.04))
cabin_counts = strsplit(full$Cabin, "" "")
cabin = sapply(cabin_counts, length)
table(cabin)
full$PassengerId[is.na(full$Fare)]
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1)
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
embarked <- full$Embarked
embarked[which(embarked == """")] = ""S""
table(embarked)
d <- data.frame(Age = age[1:891], Survived = train$Survived)
ggplot(d, aes(Age, fill = factor(Survived))) + geom_histogram()
cuts <- cut(d$Age, hist(d$Age, 10, plot = F)$breaks)
rate <- tapply(d$Survived, cuts, mean)
d2 <- data.frame(age = names(rate), rate)
barplot(d2$rate, xlab = ""age"", ylab = ""survival rate"")
ggplot(train, aes(Sex, fill = factor(Survived))) + geom_histogram(stat = ""count"")
tapply(train$Survived, train$Sex, mean)
get_titles = function() {
    names = as.character(full$Name)
    split_before_title = strsplit(names, "","")
    part_with_title = sapply(split_before_title, ""[["", -1)
    split_after_title = strsplit(part_with_title, ""[.]"")
    part_with_title = sapply(split_after_title, ""[["", 1)
    titles = sapply(part_with_title, trimws)
    return(titles)
}
title = get_titles()
d <- data.frame(title = title[1:891], Survived = train$Survived)
ggplot(d, aes(title, fill = factor(Survived))) + geom_histogram(stat = ""count"")
table(title)
tapply(d$Survived, d$title, mean)
title[title != ""Mr"" & title != ""Miss"" & title != ""Mrs"" & title != ""Master""] <- ""Rare""
table(title)
age <- full$Age
age_title = as.data.frame(list(Age = age, Title = title))
set.seed(123)
get_age = function(title_to_get) {
    ages = na.omit(age_title[which(age_title$Title == title_to_get), ""Age""])
    cat(title_to_get, ""age range:"", min(ages), ""-"", max(ages), ""\n"")
    age_na_rows = which(is.na(age_title$Age) & age_title$Title == title_to_get)
    age[age_na_rows] = sample(ages, length(age_na_rows))
    return(age)
}
age = get_age(""Master"")
age = get_age(""Miss"")
age = get_age(""Mr"")
age = get_age(""Mrs"")
age = get_age(""Rare"")
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Before Replacement"", col = ""lightblue"", ylim = c(0, 0.04), xlab = ""age"")
hist(age, freq = F, main = ""After Replacement"", col = ""darkblue"", ylim = c(0, 0.04))
d <- data.frame(Age = age[1:891], Survived = train$Survived)
ggplot(d, aes(Age, fill = factor(Survived))) + geom_histogram()
ggplot(train, aes(Pclass, fill = factor(Survived))) + geom_histogram(stat = ""count"")
tapply(train$Survived, train$Pclass, mean)
ggplot(train, aes(Parch, fill = factor(Survived))) + geom_histogram(stat = ""count"")
ggplot(train, aes(SibSp, fill = factor(Survived))) + geom_histogram(stat = ""count"")
family <- full$SibSp + full$Parch
d <- data.frame(family = family[1:891], Survived = train$Survived)
ggplot(d, aes(family, fill = factor(Survived))) + geom_histogram(stat = ""count"")
tapply(d$Survived, d$family, mean)
d <- data.frame(Cabin = cabin[1:891], Survived = train$Survived)
ggplot(d, aes(Cabin, fill = factor(Survived))) + geom_histogram(stat = ""count"")
tapply(d$Survived, d$Cabin, mean)
ggplot(train, aes(Fare, fill = factor(Survived))) + geom_histogram()
cuts <- cut(train$Fare, hist(train$Fare, 10, plot = F)$breaks)
rate <- tapply(train$Survived, cuts, mean)
d <- data.frame(fare = names(rate), rate)
barplot(d$rate, xlab = ""fare"", ylab = ""survival rate"")
d <- data.frame(Embarked = embarked[1:891], Survived = train$Survived)
ggplot(d, aes(Embarked, fill = factor(Survived))) + geom_histogram(stat = ""count"")
tapply(train$Survived, train$Embarked, mean)
f.survived = train$Survived
f.age = age[1:891]
t.age = age[892:1309]
f.fare = full$Fare[1:891]
t.fare = full$Fare[892:1309]
f.cabin = cabin[1:891]
t.cabin = cabin[892:1309]
f.title = title[1:891]
t.title = title[892:1309]
family <- full$SibSp + full$Parch
f.family = family[1:891]
t.family = family[892:1309]
f.pclass = train$Pclass
t.pclass = test$Pclass
f.sex = train$Sex
t.sex = test$Sex
f.embarked = embarked[1:891]
t.embarked = embarked[892:1309]
new_train = data.frame(survived = f.survived, age = f.age, fare = f.fare, sex = f.sex, embarked = f.embarked, family = f.family, title = f.title, cabin = f.cabin, pclass = f.pclass)
fit_logit <- glm(factor(survived) ~ age + fare + sex + embarked + family + title + cabin + pclass, data = new_train, family = binomial)
ans_logit = rep(NA, 891)
for (i in 1:891) {
    ans_logit[i] = round(fit_logit$fitted.values[[i]], 0)
}
mean(ans_logit == train$Survived)
table(ans_logit)
library(""randomForest"")
set.seed(123)
fit_rf <- randomForest(factor(survived) ~ age + fare + sex + embarked + family + title + cabin + pclass, data = new_train)
rf.fitted = predict(fit_rf)
ans_rf = rep(NA, 891)
for (i in 1:891) {
    ans_rf[i] = as.integer(rf.fitted[[i]]) - 1
}
mean(ans_rf == train$Survived)
table(ans_rf)
library(rpart)
fit_dt <- rpart(factor(survived) ~ age + fare + sex + embarked + family + title + cabin + pclass, data = new_train)
dt.fitted = predict(fit_dt)
ans_dt = rep(NA, 891)
for (i in 1:891) {
    if (dt.fitted[i, 1] >= dt.fitted[i, 2]) {
        ans_dt[i] = 0
    }
    else {
        ans_dt[i] = 1
    }
}
mean(ans_dt == train$Survived)
table(ans_dt)
library(e1071)
fit_svm <- svm(factor(survived) ~ age + fare + sex + embarked + family + title + cabin + pclass, data = new_train)
svm.fitted = predict(fit_svm)
ans_svm = rep(NA, 891)
for (i in 1:891) {
    ans_svm[i] = as.integer(svm.fitted[[i]]) - 1
}
mean(ans_svm == train$Survived)
table(ans_svm)
a = sum(ans_logit == 1 & f.survived == 1)
b = sum(ans_logit == 1 & f.survived == 0)
c = sum(ans_logit == 0 & f.survived == 1)
d = sum(ans_logit == 0 & f.survived == 0)
data.frame(a, b, c, d)
a = sum(ans_rf == 1 & f.survived == 1)
b = sum(ans_rf == 1 & f.survived == 0)
c = sum(ans_rf == 0 & f.survived == 1)
d = sum(ans_rf == 0 & f.survived == 0)
data.frame(a, b, c, d)
a = sum(ans_dt == 1 & f.survived == 1)
b = sum(ans_dt == 1 & f.survived == 0)
c = sum(ans_dt == 0 & f.survived == 1)
d = sum(ans_dt == 0 & f.survived == 0)
data.frame(a, b, c, d)
a = sum(ans_svm == 1 & f.survived == 1)
b = sum(ans_svm == 1 & f.survived == 0)
c = sum(ans_svm == 0 & f.survived == 1)
d = sum(ans_svm == 0 & f.survived == 0)
data.frame(a, b, c, d)
test_data_set <- data.frame(age = t.age, fare = t.fare, sex = t.sex, embarked = t.embarked, family = t.family, title = t.title, cabin = t.cabin, pclass = t.pclass)
predict_svm = predict(fit_svm, newdata = test_data_set)
predict_svm = as.integer(predict_svm) - 1
table(predict_svm)
predict_logit = predict(fit_logit, newdata = test_data_set)
predict_logit = as.numeric(predict_logit > 0)
table(predict_logit)
predict_rf = predict(fit_rf, newdata = test_data_set)
predict_rf = as.integer(predict_rf) - 1
table(predict_rf)
predict_dt = predict(fit_dt, newdata = test_data_set)
predict_dt = ifelse(predict_dt[, 1] >= predict_dt[, 2], 0, 1)
table(predict_dt)
d <- data.frame(PassengerId = test$PassengerId, Survived = predict_svm)
write.csv(d, file = ""TitanicResultSvm.csv"", row.names = F)
d <- data.frame(PassengerId = test$PassengerId, Survived = predict_logit)
write.csv(d, file = ""TitanicResultLogit.csv"", row.names = F)
d <- data.frame(PassengerId = test$PassengerId, Survived = predict_rf)
write.csv(d, file = ""TitanicResultRF.csv"", row.names = F)
d <- data.frame(PassengerId = test$PassengerId, Survived = predict_dt)
write.csv(d, file = ""TitanicResultDT.csv"", row.names = F)",1,0,0,0,0,0,0,0,0,1,0,1,0,0
210,seajaye-titanic-logistic-regression-0-78947,0.763,"['user defined', 'user defined', 'user defined', 'as.data.frame', 'c', 'colnames', 'factor', 'gsub', 'is.na', 'levels', 'summary', 'table', 'tolower', 'binomial', 'cor.test', 'glm', 'predict', 'read.csv', 'str', 'write.csv']",['base'],1.05115103721619,"['gsub', 'factor', 'colnames', 'glm', 'cor.test', 'tolower', 'predict', 'write.csv', 'read.csv', 'binomial', 'table', 'summary', 'user defined', 'as.data.frame', 'str', 'c', 'is.na', 'levels']",[],"['liudj2008-fork-of-titanic', 'liudj2008-titanic', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'nithishthirmul-titanic-data-test1', 'ezhilvelme-titanic-neural-network-c-4-2', 'amodi8-titanic-exploring-survival-using-machine-learning', 'jacekpardyak-mytitanicscript', 'annafreydenzon-titanic-machine-learning-from-disaster', 'jerlinraj-titanic-machine-learning-from-disaster']","[0.5855412096736555, 0.5834235935856085, 0.5799996933800355, 0.5799996933800355, 0.40860190217632114, 0.4037244961880926, 0.39576866917450154, 0.39336717599090887, 0.3911478788290087, 0.3891792952520181]","{'character(0)': ['aes', 'geom_boxplot', 'geom_histogram', 'ggplot', 'p_load'], 'package:base': ['as.data.frame', 'c', 'colnames', 'factor', 'gsub', 'is.na', 'levels', 'summary', 'table', 'tolower'], 'package:stats': ['binomial', 'cor.test', 'glm', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""character(0)"": [""aes"", ""geom_boxplot"", ""geom_histogram"", ""ggplot"", ""p_load""], ""package:base"": [""as.data.frame"", ""c"", ""colnames"", ""factor"", ""gsub"", ""is.na"", ""levels"", ""summary"", ""table"", ""tolower""], ""package:stats"": [""binomial"", ""cor.test"", ""glm"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",character0 aes geomboxplot geomhistogram ggplot pload packagebase asdataframe c colnames factor gsub isna levels summary table tolower packagestats binomial cortest glm predict packageutils readcsv str writecsv,"pacman::p_load(randomForest, ggplot2)
train <- read.csv(""../input/train.csv"", na.strings = c("""", ""NA"", NA))
test <- read.csv(""../input/test.csv"")
colnames(train) <- tolower(colnames(train))
str(train)
train$pclass <- factor(train$pclass)
table(train$survived)
table(train$embarked)
levels(train$embarked) <- gsub(""C"", ""Cherbourg"", levels(train$embarked))
levels(train$embarked) <- gsub(""Q"", ""Queenstown"", levels(train$embarked))
levels(train$embarked) <- gsub(""S"", ""Southampton"", levels(train$embarked))
summary(train$fare)
ggplot(train, aes(x = train$fare)) + geom_histogram()
ggplot(train, aes(pclass, fare)) + geom_boxplot()
logistic <- glm(survived ~ sex * age * fare, family = binomial(link = ""logit""), data = train)
predictions <- as.data.frame(predict(logistic, type = ""response""))
summary(logistic)
train.age <- train[!is.na(train$age), ]
train.age$prediction <- predict(logistic, type = ""response"")
cor.test(train.age$survived, train.age$prediction)
train.age$pred.binary <- train.age$prediction
train.age$pred.binary[train.age$pred.binary < 0.5] <- 0
train.age$pred.binary[train.age$pred.binary > 0.5] <- 1
cor.test(train.age$survived, train.age$pred.binary)
colnames(test) <- tolower(colnames(test))
test$prediction <- predict(logistic, newdata = test, type = ""response"")
test$prediction[test$prediction < 0.5] <- 0
test$prediction[test$prediction > 0.5] <- 1
test$prediction[is.na(test$prediction)] <- 0
colnames(test)
submit.1 <- test[, c(1, 12)]
colnames(submit.1) <- c(""PassengerId"", ""Survived"")
write.csv(submit.1, file = ""submit.1.csv"")",0,0,0,0,1,0,0,0,0,0,0,0,0,0
211,researchbigd-titanic-r-researchbigd,0.758,"['c', 'data.frame', 'date', 'library', 'nrow', 'print', 'summary', 'table', 'mosaicplot', 'plot', 'text', 'dev.off', 'png', 'fancyRpartPlot', 'rpart', 'predict', 'read.csv', 'str', 'write.csv']","['randomForest', 'rpart', 'rattle', 'rpart.plot', 'RColorBrewer', 'rattle', 'rpart.plot', 'RColorBrewer', 'base']",1.1007010936737098,"['nrow', 'date', 'dev.off', 'png', 'print', 'rpart', 'summary', 'text', 'mosaicplot', 'str', 'read.csv', 'table', 'fancyRpartPlot', 'c', 'plot', 'predict', 'write.csv', 'data.frame', 'library']",[],"['jkevin2010-titanic-survival-using-decision-trees', 'alexgomes3-titanic-with-r-datacamp-tutorial', 'jkevin2010-improved-model-for-titanic-survival', 'srinivasarajui-srini-s-r-titanic-solution', 'zahraatashgahy-r-titanic-1', 'tsfitz-titanic', 'yinpatt-patrick-s-titanic', 'tobybot11-toby-s-titanic-analysis', 'turntrout-titanic-data-exploration', 'jerlinraj-titanic-machine-learning-from-disaster']","[0.813343098193091, 0.6459630674204245, 0.47159614198590255, 0.4328283526838356, 0.33537309789165, 0.28649526199055547, 0.27803913268888214, 0.27060819826614185, 0.26207771854620726, 0.25364774790935646]","{'package:base': ['c', 'data.frame', 'date', 'library', 'nrow', 'print', 'summary', 'table'], 'package:graphics': ['mosaicplot', 'plot', 'text'], 'package:grDevices': ['dev.off', 'png'], 'package:rattle': ['fancyRpartPlot'], 'package:rpart': ['rpart'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""c"", ""data.frame"", ""date"", ""library"", ""nrow"", ""print"", ""summary"", ""table""], ""package:graphics"": [""mosaicplot"", ""plot"", ""text""], ""package:grDevices"": [""dev.off"", ""png""], ""package:rattle"": [""fancyRpartPlot""], ""package:rpart"": [""rpart""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase c dataframe date library nrow print summary table packagegraphics mosaicplot plot text packagegrDevices devoff png packagerattle fancyRpartPlot packagerpart rpart packagestats predict packageutils readcsv str writecsv,"library(randomForest)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
print(date())
print(""Prabhat's code"")
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
str(train)
str(test)
summary(train)
summary(test)
table(train$Survived)
table(train$Sex, train$Survived)
png(""1_survival_by_class.png"", width = 800, height = 600)
mosaicplot(train$Pclass ~ train$Survived, main = ""Passenger Survival by Class"", color = c(""#8dd3c7"", ""#fb8072""), shade = FALSE, xlab = """", ylab = """", off = c(0), cex.axis = 1.4)
dev.off()
my_tree_two <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = ""class"")
plot(my_tree_two)
text(my_tree_two)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(my_tree_two)
my_prediction <- predict(my_tree_two, newdata = test, type = ""class"")
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
nrow(my_solution)
write.csv(my_solution, file = ""my_solution.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
212,somtom-titanic-random-icebergs,0.725,"['filter', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'c', 'data.frame', 'expand.grid', 'factor', 'ifelse', 'is.na', 'is.vector', 'require', 'set.seed', 'subset', 'sum', 'table', 'confusionMatrix.train', 'train', 'trainControl', 'arrange', 'bind_rows', 'desc', 'group_by', 'left_join', 'mutate', 'mutate_if', 'n', 'rename', 'select', 'summarise', 'ungroup', 'aes', 'element_text', 'geom_bar', 'geom_col', 'geom_raster', 'geom_text', 'geom_vline', 'ggplot', 'guide_legend', 'guides', 'labs', 'position_fill', 'scale_fill_discrete', 'scale_x_continuous', 'theme', 'theme_minimal', 'xlab', 'ylab', 'plot', 'kknn', 'map', 'map_df', 'randomForest', 'melt', 'median', 'predict', 'reorder', 'str_trim', 'separate', 'read.csv', 'write.csv']","['tidyverse', 'reshape2', 'caret', 'kknn', 'randomForest', 'base']",1.84810416698456,"['median', 'str_trim', 'as.character', 'subset', 'is.na', 'require', 'expand.grid', 'filter', 'set.seed', 'factor', 'is.vector', 'read.csv', 'table', 'c', 'ifelse', 'sum', 'plot', 'predict', 'reorder', 'write.csv', 'data.frame', 'user defined']",[],"['jonmak-identify-travel-groups-in-titanic', 'rtreit-kaggle-titanic-tutorial', 'emj777-decision-tree-titanic-r', 'peggy88-titanic-data-eda-by-peggy', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic']","[0.6239748114808571, 0.33855795290687146, 0.2913308168138101, 0.2153648296706924, 0.18202810128737262, 0.18202810128737262, 0.181681936243525, 0.181681936243525, 0.16671723555692017, 0.16671723555692017]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'character(0)': ['ggplot_missing_col'], 'package:base': ['as.character', 'c', 'data.frame', 'expand.grid', 'factor', 'ifelse', 'is.na', 'is.vector', 'require', 'set.seed', 'subset', 'sum', 'table'], 'package:caret': ['confusionMatrix.train', 'train', 'trainControl'], 'package:dplyr': ['arrange', 'bind_rows', 'desc', 'group_by', 'left_join', 'mutate', 'mutate_if', 'n', 'rename', 'select', 'summarise', 'ungroup'], 'package:ggplot2': ['aes', 'element_text', 'geom_bar', 'geom_col', 'geom_raster', 'geom_text', 'geom_vline', 'ggplot', 'guide_legend', 'guides', 'labs', 'position_fill', 'scale_fill_discrete', 'scale_x_continuous', 'theme', 'theme_minimal', 'xlab', 'ylab'], 'package:graphics': ['plot'], 'package:kknn': ['kknn'], 'package:purrr': ['map', 'map_df'], 'package:randomForest': ['randomForest'], 'package:reshape2': ['melt'], 'package:stats': ['median', 'predict', 'reorder'], 'package:stringr': ['str_trim'], 'package:tidyr': ['separate'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""character(0)"": [""ggplot_missing_col""], ""package:base"": [""as.character"", ""c"", ""data.frame"", ""expand.grid"", ""factor"", ""ifelse"", ""is.na"", ""is.vector"", ""require"", ""set.seed"", ""subset"", ""sum"", ""table""], ""package:caret"": [""confusionMatrix.train"", ""train"", ""trainControl""], ""package:dplyr"": [""arrange"", ""bind_rows"", ""desc"", ""group_by"", ""left_join"", ""mutate"", ""mutate_if"", ""n"", ""rename"", ""select"", ""summarise"", ""ungroup""], ""package:ggplot2"": [""aes"", ""element_text"", ""geom_bar"", ""geom_col"", ""geom_raster"", ""geom_text"", ""geom_vline"", ""ggplot"", ""guide_legend"", ""guides"", ""labs"", ""position_fill"", ""scale_fill_discrete"", ""scale_x_continuous"", ""theme"", ""theme_minimal"", ""xlab"", ""ylab""], ""package:graphics"": [""plot""], ""package:kknn"": [""kknn""], ""package:purrr"": [""map"", ""map_df""], ""package:randomForest"": [""randomForest""], ""package:reshape2"": [""melt""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:stringr"": [""str_trim""], ""package:tidyr"": [""separate""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackagedplyr packagestats filter character0 ggplotmissingcol packagebase ascharacter c dataframe expandgrid factor ifelse isna isvector require setseed subset sum table packagecaret confusionMatrixtrain train trainControl packagedplyr arrange bindrows desc groupby leftjoin mutate mutateif n rename select summarise ungroup packageggplot2 aes elementtext geombar geomcol geomraster geomtext geomvline ggplot guidelegend guides labs positionfill scalefilldiscrete scalexcontinuous theme thememinimal xlab ylab packagegraphics plot packagekknn kknn packagepurrr map mapdf packagerandomForest randomForest packagereshape2 melt packagestats median predict reorder packagestringr strtrim packagetidyr separate packageutils readcsv writecsv,"require(tidyverse)
require(reshape2)
require(caret)
require(kknn)
require(randomForest)
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
test$Survived <- NA
train$dataSet <- ""train""
test$dataSet <- ""test""
dt <- bind_rows(train, test)
dt <- dt %>% separate(Name, ""[,.]"", into = c(""Surename"", ""Title"", ""Name""), extra = ""drop"") %>% mutate(Title = str_trim(Title, side = ""left""))
table(dt$Title) %>% melt %>% arrange(desc(value))
dt %>% group_by(Title, Survived) %>% summarise(freq = n()) %>% ungroup() %>% group_by(Title) %>% mutate(total = sum(freq), prop = freq/total) %>% arrange(total) %>% ggplot(aes(x = reorder(Title, total), y = prop, group = Survived)) + geom_col(aes(fill = factor(Survived))) + geom_text(aes(label = freq), position = position_fill(0.5)) + guides(fill = guide_legend(title = ""Survived""), color = guide_legend(title = ""n-observations"")) + xlab(""Titel"") + ylab(""proportion"") + theme(axis.text.x = element_text(angle = 90, 
    vjust = 0.5))
newTitles <- data.frame(Mr = dt$Title %in% c(""Don"", ""Capt"", ""Jonkheer"", ""Sir"", ""Major"", ""Col""), Mrs = dt$Title %in% c(""Dona"", ""Lady"", ""Mme"", ""the Countess""), Ms = dt$Title == ""Mlle"")
dt$Title[newTitles$Mr] <- ""Mr""
dt$Title[newTitles$Ms] <- ""Ms""
dt$Title[newTitles$Mrs] <- ""Mrs""
dt <- dt %>% mutate(famSize = Parch + SibSp + 1)
dt %>% group_by(famSize, Survived) %>% summarise(freq = n()) %>% ungroup() %>% group_by(famSize) %>% mutate(total = sum(freq), prop = freq/total) %>% ggplot(aes(x = famSize, y = prop, group = Survived)) + geom_col(aes(fill = factor(Survived))) + geom_text(aes(label = freq), color = ""white"", cex = 4, position = position_fill(0.5)) + geom_text(label = ""Total:"", x = 0, y = 1.1) + geom_text(aes(label = total, y = 1.1)) + guides(fill = guide_legend(title = ""Survived""), color = guide_legend(title = ""n-observations"")) + 
    scale_x_continuous(breaks = 1:11, lim = c(0, 11.5))
dt %>% filter(!is.na(Survived)) %>% group_by(famSize, Survived) %>% summarise(freq = n()) %>% ungroup() %>% group_by(famSize) %>% mutate(total = sum(freq), prop = freq/total) %>% ggplot(aes(x = famSize, y = prop, group = Survived)) + geom_col(aes(fill = factor(Survived)), width = 1, color = ""white"") + geom_text(aes(label = freq), color = ""white"", cex = 4, position = position_fill(0.5)) + guides(fill = guide_legend(title = ""Survived"")) + scale_x_continuous(breaks = 1:11) + geom_vline(xintercept = 1.5) + 
    geom_vline(xintercept = 4.5) + geom_vline(xintercept = 7.5)
dt <- dt %>% mutate(famSize = ifelse(famSize == 1, ""alone"", ifelse(famSize %in% 2:4, ""small"", ifelse(famSize %in% 5:7, ""medium"", ""big""))))
dt %>% filter(!is.na(Survived)) %>% ggplot() + geom_bar(aes(x = reorder(famSize, Survived), fill = factor(Survived)), position = ""fill"") + guides(fill = guide_legend(title = ""Survived"")) + ylab(""Proportion"") + xlab(""Family Size"")
dt <- dt %>% mutate_if(is.character, factor) %>% mutate(Survived = factor(Survived))
ggplot_missing_col <- function(x) {
    require(reshape2)
    require(ggplot2)
    require(dplyr)
    require(purrr)
    if (is.vector(x)) {
        x <- data.frame(vector = x)
    }
    classes <- x %>% map(class) %>% melt %>% rename(Var = L1, Class = value)
    col.order <- x %>% map(function(s) sum(is.na(s))) %>% melt %>% arrange(desc(value)) %>% select(L1) %>% unlist
    x %>% is.na %>% melt %>% rename(Observation = Var1, Var = Var2) %>% mutate(Var = as.character(Var)) %>% left_join(classes, by = ""Var"") %>% mutate(Var = factor(Var, levels = col.order)) %>% mutate(Class = ifelse(value == TRUE, NA, as.character(Class))) %>% ggplot(data = ., aes(x = Var)) + geom_raster(aes(y = Observation, fill = Class)) + scale_fill_discrete(name = """", na.value = ""black"") + theme_minimal() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + labs(x = ""Variables in Dataset"", 
        y = ""Rows / observations"")
}
dt$Cabin <- ifelse(dt$Cabin == """", NA, dt$Cabin)
ggplot_missing_col(dt)
dt %>% map_df(~sum(is.na(.))) %>% melt(id.vars = NULL) %>% filter(value > 0) %>% arrange(desc(value))
dt[is.na(dt$Fare), ]
dt[is.na(dt$Fare), ]$Fare <- median(subset(dt$Fare, dt$Pclass == 3 & dt$Age > 50), na.rm = T)
tmp <- dt %>% filter(!is.na(Age)) %>% select(-Cabin, -Survived, -PassengerId, -Surename, -Name, -dataSet, -Ticket)
set.seed(231)
cv <- caret::train(Age ~ ., data = tmp, tuneGrid = expand.grid(kmax = 5:20, distance = 2, kernel = ""optimal""), trControl = trainControl(method = ""cv"", number = 10), method = ""kknn"")
plot(cv)
kAge <- kknn(Age ~ ., train = tmp, test = dt %>% filter(is.na(Age)), k = 15)
dt[is.na(dt$Age), ]$Age <- kAge$fitted.values
dt <- dt %>% select(-Cabin)
dt <- dt %>% select(-Ticket, -Name, -Surename)
train <- dt %>% filter(dataSet == ""train"") %>% select(-dataSet, -PassengerId)
test <- dt %>% filter(dataSet == ""test"") %>% select(-dataSet)
rf.grid <- expand.grid(mtry = 2:9)
set.seed(234)
rf.cv <- caret::train(Survived ~ ., data = train, tuneGrid = rf.grid, method = ""rf"")
plot(rf.cv)
confusionMatrix.train(rf.cv)
set.seed(848)
rf.fit <- randomForest(Survived ~ ., data = train, mtry = 9, ntree = 500)
submission <- data.frame(PassengerId = test$PassengerId, Survived = predict(rf.fit, test))
write.csv(submission, ""./submission.csv"", row.names = F)",1,0,1,0,0,0,0,1,0,0,0,0,0,0
213,andrecn-random-forest-caret-model-prediction-titanic,0.7609999999999999,"['as.data.frame', 'as.factor', 'c', 'colnames', 'data.frame', 'factor', 'is.na', 'length', 'library', 'matrix', 'names', 'order', 'round', 'rownames', 'split', 'sprintf', 'subset', 'sum', 'summary', 'table', 'tapply', 'createDataPartition', 'dummyVars', 'preProcess', 'train', 'varImp', 'select', 'aes', 'geom_text', 'geom_tile', 'ggplot', 'ggtitle', 'scale_fill_gradient', 'theme', 'theme_bw', 'xlab', 'ylab', 'barplot', 'boxplot', 'legend', 'plot', 'text', 'topo.colors', 'predict', 'read.csv', 'write.csv']","['ggplot2', 'caret', 'mice', 'dplyr', 'base']",35.451544046402,"['sprintf', 'geom_text', 'split', 'theme', 'subset', 'is.na', 'geom_tile', 'topo.colors', 'names', 'as.factor', 'summary', 'dummyVars', 'text', 'round', 'boxplot', 'xlab', 'factor', 'colnames', 'matrix', 'preProcess', 'length', 'varImp', 'read.csv', 'theme_bw', 'table', 'scale_fill_gradient', 'as.data.frame', 'train', 'c', 'aes', 'ylab', 'createDataPartition', 'sum', 'plot', 'legend', 'predict', 'order', 'write.csv', 'ggtitle', 'data.frame', 'rownames', 'tapply', 'ggplot', 'library', 'barplot', 'select']",[],"['seanangio-predicting-titanic-survival', 'rkumar3147-exploring-survival-on-the-titanic1', 'vizcharlie-exploring-survival-on-the-titanic', 'sausen7-titanic-first-kernel', 'jaimisk-titanic-survival-logistic-regression', 'danr87946-titanic-practice', 'hertan-titanic-surviving-dataset-simple-expression', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'arjunmalhotra-titanic']","[0.43148285643282647, 0.3207591895780031, 0.3207591895780031, 0.3200043450140907, 0.289375999430971, 0.2848396077940675, 0.27883846220817343, 0.27713140573081047, 0.27713140573081047, 0.2757564065096056]","{'package:base': ['as.data.frame', 'as.factor', 'c', 'colnames', 'data.frame', 'factor', 'is.na', 'length', 'library', 'matrix', 'names', 'order', 'round', 'rownames', 'split', 'sprintf', 'subset', 'sum', 'summary', 'table', 'tapply'], 'package:caret': ['createDataPartition', 'dummyVars', 'preProcess', 'train', 'varImp'], 'package:dplyr': ['select'], 'package:ggplot2': ['aes', 'geom_text', 'geom_tile', 'ggplot', 'ggtitle', 'scale_fill_gradient', 'theme', 'theme_bw', 'xlab', 'ylab'], 'package:graphics': ['barplot', 'boxplot', 'legend', 'plot', 'text'], 'package:grDevices': ['topo.colors'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.data.frame"", ""as.factor"", ""c"", ""colnames"", ""data.frame"", ""factor"", ""is.na"", ""length"", ""library"", ""matrix"", ""names"", ""order"", ""round"", ""rownames"", ""split"", ""sprintf"", ""subset"", ""sum"", ""summary"", ""table"", ""tapply""], ""package:caret"": [""createDataPartition"", ""dummyVars"", ""preProcess"", ""train"", ""varImp""], ""package:dplyr"": [""select""], ""package:ggplot2"": [""aes"", ""geom_text"", ""geom_tile"", ""ggplot"", ""ggtitle"", ""scale_fill_gradient"", ""theme"", ""theme_bw"", ""xlab"", ""ylab""], ""package:graphics"": [""barplot"", ""boxplot"", ""legend"", ""plot"", ""text""], ""package:grDevices"": [""topo.colors""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase asdataframe asfactor c colnames dataframe factor isna length library matrix names order round rownames split sprintf subset sum summary table tapply packagecaret createDataPartition dummyVars preProcess train varImp packagedplyr select packageggplot2 aes geomtext geomtile ggplot ggtitle scalefillgradient theme themebw xlab ylab packagegraphics barplot boxplot legend plot text packagegrDevices topocolors packagestats predict packageutils readcsv writecsv,"library(""ggplot2"")
library(""caret"")
library(""mice"")
library(""dplyr"")
train <- read.csv(""../input/train.csv"", na.strings = c("""", ""NA""))
test <- read.csv(""../input/test.csv"")
summary(train)
tapply(train$Survived, train$Pclass, mean)
msex <- matrix(c(length(train$Sex[train$Survived == ""0"" & train$Sex == ""male""]), length(train$Sex[train$Survived == ""1"" & train$Sex == ""male""]), length(train$Sex[train$Survived == ""0"" & train$Sex == ""female""]), length(train$Sex[train$Survived == ""1"" & train$Sex == ""female""])), nrow = 2, ncol = 2)
colnames(msex) <- c(""male"", ""female"")
rownames(msex) <- c(""0"", ""1"")
barplot(msex)
df.sexage <- data.frame(Sex = train$Sex, Age = train$Age, Survived = train$Survived)
list.sexage <- split(df.sexage, df.sexage[, c(""Sex"", ""Survived"")])
boxplot(list.sexage[[1]]$Age, list.sexage[[3]]$Age, list.sexage[[2]]$Age, list.sexage[[4]]$Age, ylab = ""Age"", names = names(list.sexage), col = topo.colors(4))
legend(""topleft"", legend = c(""female - died"", ""female - survived"", ""male - died"", ""male - survived""), fill = topo.colors(4))
tapply(train$Survived, train$Embarked, mean)
plot(train$SibSp, col = as.factor(train$Survived), pch = 19)
plot(train$Parch, col = as.factor(train$Survived), pch = 19)
training <- subset(train, select = -c(PassengerId, Name, Ticket, Cabin))
training$Pclass <- as.factor(training$Pclass)
c(sum(is.na(train$Survived)), sum(is.na(train$Pclass)), sum(is.na(train$Sex)), sum(is.na(train$Age)), sum(is.na(train$SibSp)), sum(is.na(train$Parch)), sum(is.na(train$Fare)), sum(is.na(train$Embarked)))
nanEmb <- is.na(training$Embarked)
training <- training[!nanEmb, ]
training.t <- select(training, -(Survived))
preObj <- preProcess(training.t, method = ""knnImpute"")
age <- predict(preObj, training.t)$Age
age.test <- predict(preObj, test)$Age
fare <- predict(preObj, training.t)$Fare
fare.test <- predict(preObj, test)$Fare
training$Age <- age
training$Fare <- fare
test$Age <- age.test
test$Fare <- fare.test
dummies <- dummyVars(~., data = training)
training <- data.frame((predict(dummies, newdata = training)))
test$Pclass <- as.factor(test$Pclass)
dummies.test <- dummyVars(~., subset(test, select = -c(Name, Ticket, Cabin)))
testing <- data.frame((predict(dummies.test, newdata = subset(test, select = -c(Name, Ticket, Cabin)))))
inTrain <- createDataPartition(y = training$Survived, p = 0.7, list = FALSE)
trainingRF <- training[inTrain, ]
testingRF <- training[-inTrain, ]
rf_model <- train(factor(Survived) ~ ., data = trainingRF, method = ""rf"", prox = TRUE)
predRF <- predict(rf_model, testingRF)
table(predRF, testingRF$Survived)
df <- as.data.frame(table(predRF, testingRF$Survived))
df <- data.frame(Predicted = df$predRF, Actual = df$Var2, Freq = df$Freq)
ggplot(data = df, mapping = aes(x = df$Actual, y = df$Predicted)) + geom_tile(aes(fill = df$Freq), colour = ""white"") + geom_text(aes(label = sprintf(""%0.2f"", df$Freq)), vjust = 1) + scale_fill_gradient(low = ""blue"", high = ""red"") + theme_bw() + theme(legend.position = ""none"") + ggtitle(""Random Forest- prediction [%]"") + xlab(""Actual"") + ylab(""Predicted"")
importance <- varImp(rf_model$finalModel)
importance <- data.frame(Predictor = rownames(importance), Value = importance$Overall)
importance <- importance[order(importance$Value, decreasing = TRUE), ]
bp <- barplot(importance$Value, names.arg = importance$Predictor, ylab = ""[%]"")
text(x = bp, y = importance$Value, label = round(importance$Value), pos = 1, cex = 0.8)
predRF.test <- predict(rf_model, testing)
prediction <- data.frame(PassengerID = test$PassengerId, Survived = predRF.test)
write.csv(prediction, file = ""prediction_test.csv"", row.names = F)",0,0,1,1,0,0,0,1,0,0,0,0,0,0
214,pavani2018-titanicr-random-forests,0.7509999999999999,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.data.frame', 'as.factor', 'c', 'ifelse', 'is.na', 'library', 'list.files', 'nrow', 'rbind', 'sapply', 'table', 'boxplot.stats', 'rpart', 'as.formula', 'lm', 'median', 'predict', 'str_extract', 'read.csv', 'write.csv']","['tidyverse', 'tidyverse', 'stringr', 'dplyr', 'rpart', 'base']",1.36824703216553,"['nrow', 'as.formula', 'median', 'boxplot.stats', 'is.na', 'lm', 'rpart', 'as.factor', 'sapply', 'str_extract', 'read.csv', 'table', 'as.data.frame', 'c', 'rbind', 'ifelse', 'predict', 'write.csv', 'list.files', 'user defined', 'library']",[],"['paulbisto-r-titanic-script-practice', 'suraj915-titanic-suraj', 'predact-easy-r-titanic-predictive-model', 'utkarsh1997-kaggle-titanic-rf', 'pradeeptripathi-prediction-of-titanic-survival-using-r', 'pradeeptripathi-prediction-of-titanic-survival-using-random-forest', 'lokesharun-titanic', 'mailakshdeep-titanic-survival-prediction-r', 'acrespop-titanic1', 'hisnibs-titanic-enhancing-the-training-data-and-kis']","[0.9408706299096873, 0.9391460211276598, 0.932165908805524, 0.9077087151541804, 0.8708724079991157, 0.8703075757007375, 0.8388541595107099, 0.7659891350528263, 0.7453187471765634, 0.6982110988624993]","{'character(0)': ['randomForest'], 'package:base': ['as.data.frame', 'as.factor', 'c', 'ifelse', 'is.na', 'library', 'list.files', 'nrow', 'rbind', 'sapply', 'table'], 'package:grDevices': ['boxplot.stats'], 'package:rpart': ['rpart'], 'package:stats': ['as.formula', 'lm', 'median', 'predict'], 'package:stringr': ['str_extract'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""randomForest""], ""package:base"": [""as.data.frame"", ""as.factor"", ""c"", ""ifelse"", ""is.na"", ""library"", ""list.files"", ""nrow"", ""rbind"", ""sapply"", ""table""], ""package:grDevices"": [""boxplot.stats""], ""package:rpart"": [""rpart""], ""package:stats"": [""as.formula"", ""lm"", ""median"", ""predict""], ""package:stringr"": [""str_extract""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 randomForest packagebase asdataframe asfactor c ifelse isna library listfiles nrow rbind sapply table packagegrDevices boxplotstats packagerpart rpart packagestats asformula lm median predict packagestringr strextract packageutils readcsv writecsv,"library(tidyverse)
list.files(path = ""../input"")
library(tidyverse)
list.files(path = ""../input"")
titanic.train <- read.csv(file = ""../input/train.csv"", stringsAsFactors = FALSE, header = TRUE)
titanic.test <- read.csv(file = ""../input/test.csv"", stringsAsFactors = FALSE, header = TRUE)
titanic.train$IstrainSet <- TRUE
titanic.test$IstrainSet <- FALSE
titanic.test$Survived <- NA
titanic.full <- rbind(titanic.train, titanic.test)
median(titanic.train$Age)
table(titanic.full$Embarked)
titanic.full[titanic.full$Embarked == """", ""Embarked""]
titanic.full[titanic.full$Embarked == """", ""Embarked""] <- ""S""
library(stringr)
Title <- str_extract(titanic.full$Name, "" ([A-Za-z]+)[.]"")
titanic.full$Title <- Title
library(dplyr)
upper.whisker <- boxplot.stats(titanic.full$Fare)$stats[5]
nonoutlier <- titanic.full$Fare < upper.whisker
titanic.full$Embarked <- as.factor(titanic.full$Embarked)
titanic.full$Name <- as.factor(titanic.full$Name)
titanic.full$Sex <- as.factor(titanic.full$Sex)
titanic.full$Title <- as.factor(titanic.full$Title)
titanic.full$Ticket <- as.factor(titanic.full$Ticket)
titanic.full$FamilySize <- titanic.full$SibSp + titanic.full$Parch + 1
table(titanic.full$FamilySize)
titanic.full$FamilySizelabel <- sapply(1:nrow(titanic.full), function(x) ifelse(titanic.full$FamilySize[x] == 1, ""Single"", ifelse(titanic.full$FamilySize[x] > 4, ""Large"", ""Small"")))
titanic.full$FamilySizelabel <- as.factor(titanic.full$FamilySizelabel)
library(rpart)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize + Ticket, data = titanic.full[!is.na(titanic.full$Age), ], method = ""anova"")
titanic.full$Age[is.na(titanic.full$Age)] <- predict(Agefit, titanic.full[is.na(titanic.full$Age), ])
fare.eq = ""Fare~Pclass+Sex+Parch+Age+SibSp+Embarked+Title+FamilySizelabel""
fare.model <- lm(formula = fare.eq, data = titanic.full[nonoutlier, ])
fare.row <- titanic.full[is.na(titanic.full$Fare), c(""Pclass"", ""Sex"", ""Age"", ""Embarked"", ""SibSp"", ""Parch"", ""Title"", ""FamilySizelabel"")]
fare.predictions <- predict(fare.model, newdata = fare.row)
titanic.full[is.na(titanic.full$Fare), ""Fare""] <- fare.predictions
titanic.full$Embarked <- as.factor(titanic.full$Embarked)
titanic.full$Name <- as.factor(titanic.full$Name)
titanic.full$Sex <- as.factor(titanic.full$Sex)
titanic.full$FamilySizelabel <- as.factor(titanic.full$FamilySizelabel)
titanic.full$Title <- as.factor(titanic.full$Title)
titanic.full$Ticket <- as.factor(titanic.full$Ticket)
titanic.train <- titanic.full[titanic.full$IstrainSet == TRUE, ]
titanic.test <- titanic.full[titanic.full$IstrainSet == FALSE, ]
titanic.train$Survived <- as.factor(titanic.train$Survived)
Survived.eq <- ""Survived ~ Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+FamilySize+FamilySizelabel+Title""
survive.formula <- as.formula(Survived.eq)
titanic.model <- randomForest(formula = survive.formula, data = titanic.train, ntree = 2000, mtry = 3, nodesize = 0.01 * nrow(titanic.test))
Survived <- predict(titanic.model, titanic.test, OOB = TRUE, type = ""response"")
PassengerId <- titanic.test$PassengerId
output.df <- as.data.frame(PassengerId)
output.df$Survived <- Survived
write.csv(output.df, file = ""titanic_kaggle_13.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,1,0,0,0,0
215,dleprovost-simple-titanic-exploration,0.763,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.data.frame', 'as.factor', 'as.integer', 'as.numeric', 'c', 'colnames', 'cumsum', 'cut', 'data.frame', 'factor', 'is.na', 'length', 'library', 'list', 'mean', 'names', 'ncol', 'nrow', 'rbind', 'rep', 'return', 'round', 'row.names', 'sample', 'sapply', 'seq', 'set.seed', 'split', 'subset', 'sum', 'summary', 'suppressMessages', 'suppressWarnings', 'which.min', 'within', 'legend', 'plot', 'aggregate', 'cor', 'filter', 'median', 'predict', 'reorder', 'setNames', 'read.csv', 'stack', 'str', 'write.csv']",['base'],29.0000429153442,"['which.min', 'nrow', 'list', 'mean', 'median', 'split', 'cor', 'is.na', 'subset', 'names', 'ncol', 'stack', 'as.factor', 'summary', 'filter', 'round', 'sapply', 'rep', 'str', 'set.seed', 'factor', 'as.integer', 'colnames', 'cumsum', 'suppressWarnings', 'aggregate', 'cut', 'within', 'length', 'read.csv', 'suppressMessages', 'return', 'as.data.frame', 'row.names', 'c', 'rbind', 'sample', 'as.numeric', 'sum', 'plot', 'legend', 'predict', 'seq', 'reorder', 'setNames', 'write.csv', 'data.frame', 'user defined', 'library']",[],"['vishnusaiv-titanic-data-analysis', 'xuhuiz0918-initial-eda-and-lm-on-titanic-dataset', 'pradeeptripathi-prediction-of-titanic-survival-using-r', 'pradeeptripathi-prediction-of-titanic-survival-using-random-forest', 'paulbisto-r-titanic-script-practice', 'lokesharun-titanic', 'predact-easy-r-titanic-predictive-model', 'divyasshree-titanic-ml-club', 'utkarsh1997-kaggle-titanic-rf', 'suraj915-titanic-suraj']","[0.5069634741512232, 0.4900218310907871, 0.4833485689462033, 0.4833380777392197, 0.47918937582967974, 0.4726808550625561, 0.4713133588019609, 0.470346739207311, 0.4545530353556169, 0.45162809592741743]","{'character(0)': ['add_mSurv', 'aes', 'bind_rows', 'coord_flip', 'corrplot', 'facet_grid', 'facet_wrap', 'geom_bar', 'geom_boxplot', 'geom_histogram', 'geom_hline', 'getScores', 'ggplot', 'guide_legend', 'guides', 'importance', 'labs', 'ldply', 'left_join', 'multiplot', 'plotcp', 'prp', 'prune', 'qplot', 'quiet', 'randomForest', 'revalue', 'rpart', 'rpart.control', 'scale_linetype_manual', 'score', 'select', 'svm', 'theme'], 'package:base': ['as.data.frame', 'as.factor', 'as.integer', 'as.numeric', 'c', 'colnames', 'cumsum', 'cut', 'data.frame', 'factor', 'is.na', 'length', 'library', 'list', 'mean', 'names', 'ncol', 'nrow', 'rbind', 'rep', 'return', 'round', 'row.names', 'sample', 'sapply', 'seq', 'set.seed', 'split', 'subset', 'sum', 'summary', 'suppressMessages', 'suppressWarnings', 'which.min', 'within'], 'package:graphics': ['legend', 'plot'], 'package:stats': ['aggregate', 'cor', 'filter', 'median', 'predict', 'reorder', 'setNames'], 'package:utils': ['read.csv', 'stack', 'str', 'write.csv']}","{""character(0)"": [""add_mSurv"", ""aes"", ""bind_rows"", ""coord_flip"", ""corrplot"", ""facet_grid"", ""facet_wrap"", ""geom_bar"", ""geom_boxplot"", ""geom_histogram"", ""geom_hline"", ""getScores"", ""ggplot"", ""guide_legend"", ""guides"", ""importance"", ""labs"", ""ldply"", ""left_join"", ""multiplot"", ""plotcp"", ""prp"", ""prune"", ""qplot"", ""quiet"", ""randomForest"", ""revalue"", ""rpart"", ""rpart.control"", ""scale_linetype_manual"", ""score"", ""select"", ""svm"", ""theme""], ""package:base"": [""as.data.frame"", ""as.factor"", ""as.integer"", ""as.numeric"", ""c"", ""colnames"", ""cumsum"", ""cut"", ""data.frame"", ""factor"", ""is.na"", ""length"", ""library"", ""list"", ""mean"", ""names"", ""ncol"", ""nrow"", ""rbind"", ""rep"", ""return"", ""round"", ""row.names"", ""sample"", ""sapply"", ""seq"", ""set.seed"", ""split"", ""subset"", ""sum"", ""summary"", ""suppressMessages"", ""suppressWarnings"", ""which.min"", ""within""], ""package:graphics"": [""legend"", ""plot""], ""package:stats"": [""aggregate"", ""cor"", ""filter"", ""median"", ""predict"", ""reorder"", ""setNames""], ""package:utils"": [""read.csv"", ""stack"", ""str"", ""write.csv""]}",character0 addmSurv aes bindrows coordflip corrplot facetgrid facetwrap geombar geomboxplot geomhistogram geomhline getScores ggplot guidelegend guides importance labs ldply leftjoin multiplot plotcp prp prune qplot quiet randomForest revalue rpart rpartcontrol scalelinetypemanual score select svm theme packagebase asdataframe asfactor asinteger asnumeric c colnames cumsum cut dataframe factor isna length library list mean names ncol nrow rbind rep return round rownames sample sapply seq setseed split subset sum summary suppressMessages suppressWarnings whichmin within packagegraphics legend plot packagestats aggregate cor filter median predict reorder setNames packageutils readcsv stack str writecsv,"quiet <- function(x) {
    suppressWarnings(suppressMessages(x))
}
quiet(library(plyr))
quiet(library(dplyr))
quiet(library(ggplot2))
quiet(library(Rmisc))
quiet(library(corrplot))
quiet(library(rpart))
quiet(library(rpart.plot))
quiet(library(randomForest))
quiet(library(e1071))
quiet(library(caret))
titanic_train <- read.csv(file = ""../input/train.csv"", head = TRUE)
titanic_test <- read.csv(file = ""../input/test.csv"", head = TRUE)
suppressWarnings(titanic <- bind_rows(titanic_train, titanic_test))
str(titanic)
summary(titanic)
mSurv <- mean(titanic_train$Survived)
titanic_train <- within(titanic_train, {
    Survived[Survived == 1] <- ""Yes""
    Survived[Survived == 0] <- ""No""
})
add_mSurv <- function(x) {
    return(x + geom_hline(aes(yintercept = mSurv, linetype = factor(mSurv)), show.legend = TRUE) + scale_linetype_manual(name = ""Survival"", values = ""dashed"", label = ""average"") + guides(fill = guide_legend(override.aes = list(linetype = ""blank""))))
}
g1 <- ggplot(titanic_train) + geom_bar(aes(Pclass, fill = Survived)) + labs(x = ""Passenger's class"", y = ""Count"")
g2 <- add_mSurv(ggplot(titanic_train) + geom_bar(aes(Pclass, fill = Survived), position = ""fill"") + labs(x = ""Passenger's class"", y = ""Part""))
multiplot(g1, g2, cols = 2)
g1 <- ggplot(titanic_train) + geom_bar(aes(Sex, fill = Survived))
g2 <- add_mSurv(ggplot(titanic_train) + geom_bar(aes(Sex, fill = Survived), position = ""fill""))
multiplot(g1, g2, cols = 2)
g1 <- ggplot(titanic_train) + geom_histogram(aes(Age, fill = Survived), binwidth = 5, na.rm = TRUE)
g2 <- add_mSurv(ggplot(titanic_train) + geom_histogram(aes(Age, fill = Survived), binwidth = 5, na.rm = TRUE, position = ""fill""))
multiplot(g1, g2, cols = 2)
g1 <- ggplot(titanic_train) + geom_histogram(aes(Fare, fill = Survived), binwidth = 20, na.rm = TRUE)
g2 <- add_mSurv(ggplot(titanic_train) + geom_histogram(aes(Fare, fill = Survived), binwidth = 20, na.rm = TRUE, position = ""fill""))
multiplot(g1, g2, cols = 2)
g1 <- ggplot(titanic_train) + geom_bar(aes(Embarked, fill = Survived))
g2 <- add_mSurv(ggplot(titanic_train) + geom_bar(aes(Embarked, fill = Survived), position = ""fill""))
multiplot(g1, g2, cols = 2)
ggplot(titanic_train) + geom_bar(aes(Pclass, fill = Survived)) + facet_wrap(~Embarked)
g1 <- ggplot(titanic_train) + geom_bar(aes(Parch, fill = Survived))
g2 <- add_mSurv(ggplot(titanic_train) + geom_bar(aes(Parch, fill = Survived), position = ""fill""))
multiplot(g1, g2, cols = 2)
ggplot(filter(titanic_train, Parch > 0)) + geom_histogram(aes(Age, fill = Survived), binwidth = 5, na.rm = TRUE) + facet_grid(Parch ~ Sex)
g1 <- ggplot(titanic_train) + geom_bar(aes(SibSp, fill = Survived))
g2 <- add_mSurv(ggplot(titanic_train) + geom_bar(aes(SibSp, fill = Survived), position = ""fill""))
multiplot(g1, g2, cols = 2)
ggplot(filter(titanic_train, SibSp > 0)) + geom_histogram(aes(Age, fill = Survived), binwidth = 5, na.rm = TRUE) + facet_grid(SibSp ~ Sex)
titanic_train$FamilyOnBoard <- titanic_train$Parch + titanic_train$SibSp
g1 <- ggplot(titanic_train) + geom_bar(aes(FamilyOnBoard, fill = Survived))
g2 <- add_mSurv(ggplot(titanic_train) + geom_bar(aes(FamilyOnBoard, fill = Survived), position = ""fill""))
multiplot(g1, g2, cols = 2)
titanic_train$Family[(titanic_train$Parch + titanic_train$SibSp) == 0] <- ""single""
titanic_train$Family[(titanic_train$Parch + titanic_train$SibSp) > 0 & (titanic_train$Parch + titanic_train$SibSp) < 4] <- ""small""
titanic_train$Family[(titanic_train$Parch + titanic_train$SibSp) > 3] <- ""large""
titanic_train$Family = as.factor(titanic_train$Family)
titanic_train$Family = factor(titanic_train$Family, levels = c(""single"", ""small"", ""large""))
g1 <- ggplot(titanic_train) + geom_bar(aes(Family, fill = Survived))
g2 <- add_mSurv(ggplot(titanic_train) + geom_bar(aes(Family, fill = Survived), position = ""fill""))
multiplot(g1, g2, cols = 2)
filter(titanic, Ticket == ""PC 17599"")$Fare
filter(titanic, Ticket == ""19950"")$Fare
filter(titanic, Ticket == ""3101295"")$Fare
cor(filter(titanic, !is.na(Fare))[, c(""Pclass"", ""Fare"")])
pplOnTicket <- setNames(aggregate(titanic$Ticket, list(titanic$Ticket), length), c(""Ticket"", ""PplOnTicket""))
titanic <- left_join(titanic, pplOnTicket, by = ""Ticket"")
titanic[""FarePerson""] <- titanic$Fare/titanic$PplOnTicket
cor(filter(titanic, !is.na(FarePerson))[, c(""Pclass"", ""FarePerson"")])
titanic$Family[(titanic$Parch + titanic$SibSp) == 0] <- ""single""
titanic$Family[(titanic$Parch + titanic$SibSp) > 0 & (titanic$Parch + titanic$SibSp) < 4] <- ""small""
titanic$Family[(titanic$Parch + titanic$SibSp) > 3] <- ""large""
titanic$Family = factor(titanic$Family, levels = c(""single"", ""small"", ""large""))
sapply(titanic, function(x) sum(is.na(x) | x == """"))
filter(titanic, is.na(Fare))
median(filter(titanic, Family == ""single"", Pclass == 3, Embarked == ""S"")$Fare, na.rm = TRUE)
titanic$Fare[1044] <- median(filter(titanic, Family == ""single"", Pclass == 3, Embarked == ""S"")$Fare, na.rm = TRUE)
titanic$FarePerson[1044] <- titanic$Fare[1044]
filter(titanic, Embarked == """")
ggplot(filter(titanic, Embarked != """")) + geom_boxplot(aes(Embarked, FarePerson, color = Embarked), na.rm = TRUE) + geom_hline(yintercept = 40, colour = ""darkred"")
titanic$Embarked[titanic$Embarked == """"] <- ""C""
predicted_ages <- rpart(Age ~ Pclass + Sex + Family + FarePerson + Embarked, data = filter(titanic, !is.na(Age)))
titanic$Age[is.na(titanic$Age)] <- predict(predicted_ages, filter(titanic, is.na(Age)))
corr <- select(titanic, -Ticket, -Fare, -Cabin, -Name, -Family)
corr$Sex <- as.numeric(revalue(corr$Sex, c(male = 1, female = 2)))
corr$Embarked <- as.numeric(revalue(corr$Embarked, c(S = 1, C = 2, Q = 3)))
corr$Survived <- as.numeric(corr$Survived)
corr$Pclass <- as.numeric(corr$Pclass)
corr$PplOnTicket <- as.numeric(corr$PplOnTicket)
corr$FamilySize <- as.numeric(corr$SibSp + corr$Parch + 1)
corr <- select(corr, -SibSp, -Parch)
corrplot(cor(corr), method = ""circle"")
corrplot(cor(filter(subset(corr, select = -PassengerId), !is.na(Survived))), method = ""circle"")
titanic <- select(titanic, -SibSp, -Parch, -Ticket, -Fare, -Cabin, -Name)
titanic$Survived <- as.factor(titanic$Survived)
titanic$Embarked <- as.factor(titanic$Embarked)
titanic$Sex <- as.factor(titanic$Sex)
titanic$Age <- as.numeric(titanic$Age)
titanic$Pclass <- as.factor(titanic$Pclass)
titanic$PplOnTicket <- as.integer(titanic$PplOnTicket)
titanic$FarePerson <- as.numeric(titanic$FarePerson)
titanic$Family <- as.factor(titanic$Family)
titanic_train <- filter(titanic, !is.na(Survived))
titanic_test <- filter(titanic, is.na(Survived))
titanic_formula <- (Survived ~ Pclass + Sex + Age + Embarked + PplOnTicket + FarePerson + Family)
spec <- c(train = 0.7, test = 0.3)
g <- sample(cut(seq(nrow(titanic_train)), nrow(titanic_train) * cumsum(c(0, spec)), labels = names(spec)))
my_titanic <- split(titanic_train, g)
my_titanic_tree <- rpart(titanic_formula, data = my_titanic$train, control = rpart.control(minsplit = 5, cp = 0))
plotcp(my_titanic_tree)
my_titanic_tree_optimal <- prune(my_titanic_tree, cp = my_titanic_tree$cptable[which.min(my_titanic_tree$cptable[, 4]), 1])
prp(my_titanic_tree_optimal, extra = 1)
isCorrect <- predict(my_titanic_tree_optimal, newdata = my_titanic$test, type = ""class"") == my_titanic$test$Survived
dt_score <- sum(isCorrect)/length(isCorrect)
dt_score
titanic_tree <- rpart(titanic_formula, data = titanic_train, control = rpart.control(minsplit = 5, cp = 0))
plotcp(titanic_tree)
titanic_tree_optimal <- prune(titanic_tree, cp = titanic_tree$cptable[which.min(titanic_tree$cptable[, 4]), 1])
prp(titanic_tree_optimal, extra = 1)
set.seed(19150415)
my_titanic_rf <- randomForest(titanic_formula, data = my_titanic$train)
plot(my_titanic_rf, ylim = c(0, 0.4))
legend(""topright"", colnames(my_titanic_rf$err.rate), col = 1:3, fill = 1:3)
my_titanic_rf_importance <- importance(my_titanic_rf)
vars_importance <- data.frame(Variables = row.names(my_titanic_rf_importance), importance = round(my_titanic_rf_importance[, ""MeanDecreaseGini""], 2))
ggplot(vars_importance, aes(fill = importance)) + geom_bar(aes(reorder(Variables, importance), importance), stat = ""identity"") + coord_flip()
isCorrect <- predict(my_titanic_rf, newdata = my_titanic$test, type = ""class"") == my_titanic$test$Survived
rf_score <- sum(isCorrect)/length(isCorrect)
rf_score
set.seed(19150415)
titanic_rf <- randomForest(titanic_formula, data = titanic_train)
plot(titanic_rf)
titanic_rf_importance <- importance(titanic_rf)
vars_importance <- data.frame(Variables = row.names(titanic_rf_importance), importance = round(titanic_rf_importance[, ""MeanDecreaseGini""], 2))
ggplot(vars_importance, aes(fill = importance)) + geom_bar(aes(reorder(Variables, importance), importance), stat = ""identity"") + coord_flip()
svm_model <- svm(titanic_formula, data = my_titanic$train)
isCorrect <- predict(svm_model, newdata = my_titanic$test, type = ""class"") == my_titanic$test$Survived
svm_score <- sum(isCorrect)/length(isCorrect)
svm_score
data.frame(Method = c(""Decision Tree"", ""Random Forest"", ""Support Vector Machine""), Score = c(dt_score, rf_score, svm_score))
score <- function(model, vData) {
    isCorrect <- predict(model, newdata = vData, type = ""class"") == vData$Survived
    score <- sum(isCorrect)/length(isCorrect)
    return(score)
}
getScores <- function(formula, tData, vData) {
    tree <- rpart(formula, data = tData, control = rpart.control(minsplit = 5, cp = 0))
    tree_model <- prune(tree, cp = tree$cptable[which.min(tree$cptable[, 4]), 1])
    tree_score <- score(tree_model, vData)
    rf_model <- randomForest(formula, data = tData)
    rf_score <- score(rf_model, vData)
    svm_model <- svm(formula, data = tData)
    svm_score <- score(svm_model, vData)
    return(data.frame(DecisionTree = tree_score, RandomForest = rf_score, SVM = svm_score))
}
validation <- data.frame()
for (n in seq(2, 10, by = 2)) {
    folds <- split(titanic_train, cut(sample(1:nrow(titanic_train)), 10))
    x <- data.frame()
    for (i in 1:length(folds)) {
        test <- ldply(folds[i], data.frame)
        train <- ldply(folds[-i], data.frame)
        x <- rbind(x, getScores(titanic_formula, train, test))
    }
    validation <- rbind(validation, data.frame(DecisionTree = mean(x$DecisionTree), RandomForest = mean(x$RandomForest), SVM = mean(x$SVM)))
}
sa <- stack(as.data.frame(validation))
sa$x <- rep(seq(2, 2 * nrow(validation), by = 2), ncol(validation))
qplot(x, values, data = sa, colour = ind, geom = ""line"", xlab = ""cross validation folds number"", ylab = ""score"") + labs(colour = ""Methods"") + theme(legend.position = ""bottom"")
prediction <- predict(titanic_rf, titanic_test)
summary(prediction)/length(prediction)
solution <- data.frame(PassengerID = titanic_test$PassengerId, Survived = prediction)
write.csv(solution, file = ""solution.csv"", row.names = FALSE)",0,0,0,0,1,0,0,0,0,0,0,0,0,0
216,wtjw1993-predicting-survival-on-the-titanic,0.754,"['filter', 'as.factor', 'attr', 'c', 'data.frame', 'factor', 'gsub', 'ifelse', 'lapply', 'length', 'library', 'names', 'paste', 'rep', 'sapply', 'seq', 'set.seed', 'strsplit', 'which.max', 'bind_rows', 'svm', 'complete', 'md.pattern', 'mice', 'randomForest', 'glm', 'median', 'predict', 'read.csv', 'write.csv']","['dplyr', 'mice', 'randomForest', 'e1071', 'base']",1.4715899984041798,"['complete', 'which.max', 'median', 'lapply', 'md.pattern', 'svm', 'glm', 'names', 'as.factor', 'filter', 'sapply', 'mice', 'rep', 'set.seed', 'gsub', 'factor', 'length', 'read.csv', 'attr', 'randomForest', 'c', 'paste', 'ifelse', 'predict', 'write.csv', 'seq', 'bind_rows', 'data.frame', 'strsplit', 'library']",[],"['venkatko-titanic-survival1', 'abedben-exploring-survival-on-the-titanic', 'tetyama-trial-titanic', 'hemingwei-titanic-r-solution-from-megan-risdal', 'arunkumarramanan-data-science-in-r-and-titanic-survival-prediction', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'bonesaw98616-exploring-survival-on-the-titanic', 'krupan-exploring-survival-on-the-titanic', 'mira5b-exploring-survival-on-the-titanic']","[0.612207098547842, 0.6062708080618272, 0.60113720605241, 0.6007249012331355, 0.6006624825721206, 0.600312082418552, 0.600312082418552, 0.5980612747129879, 0.5970836444892478, 0.5967903363879817]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'attr', 'c', 'data.frame', 'factor', 'gsub', 'ifelse', 'lapply', 'length', 'library', 'names', 'paste', 'rep', 'sapply', 'seq', 'set.seed', 'strsplit', 'which.max'], 'package:dplyr': ['bind_rows'], 'package:e1071': ['svm'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['randomForest'], 'package:stats': ['glm', 'median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""attr"", ""c"", ""data.frame"", ""factor"", ""gsub"", ""ifelse"", ""lapply"", ""length"", ""library"", ""names"", ""paste"", ""rep"", ""sapply"", ""seq"", ""set.seed"", ""strsplit"", ""which.max""], ""package:dplyr"": [""bind_rows""], ""package:e1071"": [""svm""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""glm"", ""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor attr c dataframe factor gsub ifelse lapply length library names paste rep sapply seq setseed strsplit whichmax packagedplyr bindrows packagee1071 svm packagemice complete mdpattern mice packagerandomForest randomForest packagestats glm median predict packageutils readcsv writecsv,"library(""dplyr"")
library(""mice"")
library(""randomForest"")
library(""e1071"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
full$Embarked[c(62, 830)] <- ""C""
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(42)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
full$Age <- mice_output$Age
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
full$Child <- factor(full$Child)
md.pattern(full)
full$Survived <- as.factor(full$Survived)
train <- full[1:891, ]
test <- full[892:1309, ]
train$Deck <- NULL
test$Deck <- NULL
test$Survived <- NULL
logit_model <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child, data = train, family = binomial)
logit_probabilities <- predict(logit_model, test, type = ""response"")
logit_prediction <- data.frame(PassengerID = test$PassengerId, Survived = ifelse(logit_probabilities > 0.5, 1, 0))
write.csv(logit_prediction, file = ""logit_prediction.csv"", row.names = FALSE)
svc_cost <- 10^seq(-2, 2, 1)
svc_linear_cv <- rep(0, length(svc_cost))
for (i in 1:length(svc_cost)) {
    set.seed(2017)
    svc_linear <- svm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child, data = train, kernel = ""linear"", cost = svc_cost[i], probability = TRUE, cross = 10)
    svc_linear_cv[i] <- svc_linear$tot.accuracy
}
svc_linear <- svm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child, data = train, kernel = ""linear"", cost = svc_cost[which.max(svc_linear_cv)], probability = TRUE, cross = 10)
svc_linear_prob <- predict(svc_linear, test, probability = TRUE)
svc_linear_prob <- attr(svc_linear_prob, ""probabilities"")[, 2]
svc_linear_pred <- data.frame(PassengerID = test$PassengerId, Survived = ifelse(svc_linear_prob > 0.5, 1, 0))
write.csv(svc_linear_pred, file = ""svc_linear_pred.csv"", row.names = FALSE)
svc_poly_cv <- rep(0, 9)
for (deg in 2:9) {
    set.seed(2017)
    svc_poly <- svm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child, data = train, kernel = ""polynomial"", degree = deg, probability = TRUE, cross = 10)
    svc_poly_cv[deg] <- svc_poly$tot.accuracy
}
svc_poly_degree <- which.max(svc_poly_cv)
svc_poly_cv <- rep(0, length(svc_cost))
for (i in 1:length(svc_poly_cv)) {
    set.seed(2017)
    svc_poly <- svm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child, data = train, kernel = ""polynomial"", degree = svc_poly_degree, cost = svc_cost[i], probability = TRUE, cross = 10)
    svc_poly_cv[i] <- svc_poly$tot.accuracy
}
svc_poly <- svm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child, data = train, kernel = ""polynomial"", degree = svc_poly_degree, cost = svc_cost[which.max(svc_poly_cv)], probability = TRUE, cross = 10)
svc_poly_prob <- predict(svc_poly, test, probability = TRUE)
svc_poly_prob <- attr(svc_poly_prob, ""probabilities"")[, 2]
svc_poly_pred <- data.frame(PassengerID = test$PassengerId, Survived = ifelse(svc_poly_prob > 0.5, 1, 0))
write.csv(svc_poly_pred, file = ""svc_poly_pred.csv"", row.names = FALSE)
set.seed(2017)
rf_model <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child, data = train)
rf_probabilities <- predict(rf_model, test, type = ""prob"")[, 2]
rf_prediction <- data.frame(PassengerID = test$PassengerId, Survived = ifelse(rf_probabilities > 0.5, 1, 0))
write.csv(rf_prediction, file = ""rf_prediction.csv"", row.names = FALSE)",1,0,0,1,0,0,0,0,0,0,0,1,0,0
217,qianbi-titanic-voting,0.7340000000000001,"['as.numeric', 'c', 'data.frame', 'factor', 'gsub', 'ifelse', 'lapply', 'library', 'nrow', 'round', 'bind_rows', 'svm', 'complete', 'mice', 'nnet', 'randomForest', 'rpart', 'glm', 'predict', 'read.csv', 'write.csv']","['dplyr', 'mice', 'nnet', 'randomForest', 'rpart', 'e1071', 'base']",18.609266042709397,"['nrow', 'complete', 'lapply', 'svm', 'glm', 'nnet', 'rpart', 'round', 'mice', 'gsub', 'factor', 'read.csv', 'randomForest', 'c', 'as.numeric', 'ifelse', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'library']",[],"['qianbi-titanic-voting-2', 'qianbi-titanic-rpart-2', 'qianbi-titanic-rpart', 'qianbi-titanic-nnet', 'qianbi-titanic-svm', 'qianbi-titanic-randomforest', 'qianbi-titanic-logistic-2', 'qianbi-titanic-rpart-3', 'jasonhit-first-script-for-kaggle-titanic', 'venkatko-titanic-survival1']","[0.7651794092722722, 0.562641037377273, 0.5535251378917199, 0.5056037468555354, 0.4902047821698579, 0.4841818636725836, 0.4821792970107861, 0.4039510192972283, 0.4017957169102123, 0.39876188347366914]","{'package:base': ['as.numeric', 'c', 'data.frame', 'factor', 'gsub', 'ifelse', 'lapply', 'library', 'nrow', 'round'], 'package:dplyr': ['bind_rows'], 'package:e1071': ['svm'], 'package:mice': ['complete', 'mice'], 'package:nnet': ['nnet'], 'package:randomForest': ['randomForest'], 'package:rpart': ['rpart'], 'package:stats': ['glm', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.numeric"", ""c"", ""data.frame"", ""factor"", ""gsub"", ""ifelse"", ""lapply"", ""library"", ""nrow"", ""round""], ""package:dplyr"": [""bind_rows""], ""package:e1071"": [""svm""], ""package:mice"": [""complete"", ""mice""], ""package:nnet"": [""nnet""], ""package:randomForest"": [""randomForest""], ""package:rpart"": [""rpart""], ""package:stats"": [""glm"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase asnumeric c dataframe factor gsub ifelse lapply library nrow round packagedplyr bindrows packagee1071 svm packagemice complete mice packagennet nnet packagerandomForest randomForest packagerpart rpart packagestats glm predict packageutils readcsv writecsv,"library(dplyr)
library(mice)
library(nnet)
library(randomForest)
library(rpart)
library(e1071)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE, na.strings = """")
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE, na.strings = """")
full <- bind_rows(train, test)
full$Title <- gsub(""^.*, |\\. .*$"", """", full$Name)
Mr <- c(""Col"", ""Don"", ""Jonkheer"", ""Sir"")
Mrs <- c(""Dona"", ""Lady"", ""Mme"", ""the Countess"")
Miss <- c(""Mlle"", ""Ms"")
full$Title[full$Title %in% Mr] <- ""Mr""
full$Title[full$Title %in% Mrs] <- ""Mrs""
full$Title[full$Title %in% Miss] <- ""Miss""
full$Fsize <- full$SibSp + full$Parch + 1
full$FsizeD[full$Fsize == 1] <- ""Singleton""
full$FsizeD[full$Fsize > 1 & full$Fsize < 5] <- ""Small""
full$FsizeD[full$Fsize > 4] <- ""Large""
factor_var <- c(""Survived"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""FsizeD"")
full[factor_var] <- lapply(full[factor_var], factor)
res <- data.frame(PassengerId = test[, 1], Survived = 0)
for (i in 1:5) {
    full_mice <- full
    mice_mod <- mice(full_mice[, c(3, 5:8, 10, 12)], method = ""rf"")
    mice_output <- complete(mice_mod)
    full_mice[, c(6, 10, 12)] <- mice_output[, c(3, 6, 7)]
    full_mice$Embarked <- factor(full_mice$Embarked)
    full_mice$Child <- factor(ifelse(full_mice$Age <= 12, 1, 0))
    full_mice <- full_mice[, -c(9, 11)]
    train <- full_mice[1:nrow(train), ]
    test <- full_mice[(nrow(train) + 1):nrow(full_mice), -2]
    logistic_mod <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child, family = binomial, data = train)
    res$Survived <- res$Survived + round(predict(logistic_mod, test, type = ""response""), 0)
    nn_mod <- nnet(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child, data = train, size = 10, decay = 0.01)
    res$Survived <- res$Survived + as.numeric(predict(nn_mod, test, type = ""class""))
    rf_mod <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child, data = train)
    res$Survived <- res$Survived + as.numeric(predict(rf_mod, test))
    svm_mod <- svm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child, data = train)
    res$Survived <- res$Survived + as.numeric(predict(svm_mod, test))
    rpart_mod <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child, data = train, method = ""class"")
    rpart_predict <- predict(rpart_mod, newdata = test)
    res$Survived <- res$Survived + ifelse(rpart_predict[, 1] < rpart_predict[, 2], 1, 0)
}
res$Survived <- ifelse(res$Survived > 12, 1, 0)
write.csv(res, file = ""Titanic_voting.csv"", row.names = FALSE)",1,0,0,1,0,0,0,0,0,1,0,1,0,0
218,venkatko-titanic-survival1,0.7440000000000001,"['filter', 'as.factor', 'as.matrix', 'c', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'paste', 'sapply', 'set.seed', 'strsplit', 'sum', 'system', 'bind_rows', 'complete', 'md.pattern', 'mice', 'randomForest', 'median', 'predict', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",32.226943016052196,"['complete', 'median', 'lapply', 'md.pattern', 'is.na', 'names', 'as.factor', 'filter', 'sapply', 'mice', 'str', 'as.matrix', 'set.seed', 'gsub', 'factor', 'read.csv', 'randomForest', 'c', 'paste', 'sum', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'strsplit', 'library', 'system']",[],"['abedben-exploring-survival-on-the-titanic', 'arunkumarramanan-data-science-in-r-and-titanic-survival-prediction', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'tetyama-trial-titanic', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'hemingwei-titanic-r-solution-from-megan-risdal', 'mira5b-exploring-survival-on-the-titanic', 'birudvora-test-titanic', 'mohankanni-exploring-survival-on-the-titanic']","[0.9694747188702441, 0.962852323791541, 0.9602114918550516, 0.9598657133563706, 0.9582326090046275, 0.9582326090046275, 0.9575424913371998, 0.9509840021224258, 0.9507678762609992, 0.9505552166964587]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'as.matrix', 'c', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'paste', 'sapply', 'set.seed', 'strsplit', 'sum', 'system'], 'package:dplyr': ['bind_rows'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['randomForest'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""as.matrix"", ""c"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""paste"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""system""], ""package:dplyr"": [""bind_rows""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor asmatrix c dataframe factor gsub isna lapply library names paste sapply setseed strsplit sum system packagedplyr bindrows packagemice complete mdpattern mice packagerandomForest randomForest packagestats median predict packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
system(""ls ../input"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
full$Age <- mice_output$Age
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
str(full)
temp <- full[, c(3, 5, 6, 7, 8, 10, 12, 13, 17, 18, 19, 20)]
str(temp)
X <- as.matrix(sapply(temp, as.numeric))
str(X)
write.csv(X, file = ""test.csv"", row.names = F)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
220,naomi7-survival-on-the-titanic,0.737,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",24.558641910553003,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['naomi7-survival-on-the-titanic', 'rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic', 'datascikrid-exploring-survival-on-the-titanic', 'anishmayaramka-the-titanic-datset']","[0.9999999999999999, 0.9981202203758754, 0.9981202203758754, 0.9981202203758754, 0.9981202203758754, 0.9981202203758754, 0.9981202203758754, 0.9981202203758754, 0.9981202203758754, 0.9981202203758754]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- gsub(""(,.*)"", """", full$Name)
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Surname[full$Fsize < 4] <- ""Individual""
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(752)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother + Surname, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
221,econdata-machine-learning-on-titanic-dataset,0.7559999999999999,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.factor', 'c', 'data.frame', 'is.na', 'library', 'list.files', 'return', 'row.names', 'set.seed', 'aes', 'coord_flip', 'element_text', 'geom_bar', 'ggplot', 'ggsave', 'ggtitle', 'theme', 'theme_light', 'xlab', 'ylab', 'importance', 'randomForest', 'median', 'predict', 'reorder', 'read.csv', 'write.csv']","['tidyverse', 'ggplot2', 'randomForest', 'base']",2.12341713905334,"['median', 'element_text', 'coord_flip', 'theme', 'is.na', 'ggsave', 'as.factor', 'importance', 'theme_light', 'set.seed', 'xlab', 'geom_bar', 'read.csv', 'randomForest', 'return', 'row.names', 'c', 'aes', 'ylab', 'reorder', 'predict', 'write.csv', 'list.files', 'ggtitle', 'data.frame', 'ggplot', 'user defined', 'library']",[],"['francoisolivier-titanic-20', 'areebaatif-titanic', 'zhxiangxyang-titanic', 'johno883-john-orr-titanic-random-forest', 'yinpatt-patrick-s-titanic', 'francoisolivier-fork-of-titanic-20', 'fredman-titanic-barebones-benchmark-r', 'diegosiebra-rf-titanic-prediction-th3one', 'panda1023-svm-example-for-titanic', 'manskj-machine-learning-and-titanic']","[0.9945317933598672, 0.9945317933598672, 0.9945317933598672, 0.9932749243276986, 0.9117721189092378, 0.8940757468080639, 0.8937469085235961, 0.878038418583065, 0.8234754761810333, 0.5875948341060949]","{'character(0)': ['extractFeatures'], 'package:base': ['as.factor', 'c', 'data.frame', 'is.na', 'library', 'list.files', 'return', 'row.names', 'set.seed'], 'package:ggplot2': ['aes', 'coord_flip', 'element_text', 'geom_bar', 'ggplot', 'ggsave', 'ggtitle', 'theme', 'theme_light', 'xlab', 'ylab'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""extractFeatures""], ""package:base"": [""as.factor"", ""c"", ""data.frame"", ""is.na"", ""library"", ""list.files"", ""return"", ""row.names"", ""set.seed""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""element_text"", ""geom_bar"", ""ggplot"", ""ggsave"", ""ggtitle"", ""theme"", ""theme_light"", ""xlab"", ""ylab""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 extractFeatures packagebase asfactor c dataframe isna library listfiles return rownames setseed packageggplot2 aes coordflip elementtext geombar ggplot ggsave ggtitle theme themelight xlab ylab packagerandomForest importance randomForest packagestats median predict reorder packageutils readcsv writecsv,"library(tidyverse)
list.files(path = ""../input"")
library(ggplot2)
library(randomForest)
set.seed(1)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
extractFeatures <- function(data) {
    features <- c(""Pclass"", ""Age"", ""Sex"", ""Parch"", ""SibSp"", ""Fare"", ""Embarked"")
    fea <- data[, features]
    fea$Age[is.na(fea$Age)] <- -1
    fea$Fare[is.na(fea$Fare)] <- median(fea$Fare, na.rm = TRUE)
    fea$Embarked[fea$Embarked == """"] = ""S""
    fea$Sex <- as.factor(fea$Sex)
    fea$Embarked <- as.factor(fea$Embarked)
    return(fea)
}
rf <- randomForest(extractFeatures(train), as.factor(train$Survived), ntree = 100, importance = TRUE)
submission <- data.frame(PassengerId = test$PassengerId)
submission$Survived <- predict(rf, extractFeatures(test))
write.csv(submission, file = ""1_random_forest_r_submission.csv"", row.names = FALSE)
imp <- importance(rf, type = 1)
featureImportance <- data.frame(Feature = row.names(imp), Importance = imp[, 1])
p <- ggplot(featureImportance, aes(x = reorder(Feature, Importance), y = Importance)) + geom_bar(stat = ""identity"", fill = ""#53cfff"") + coord_flip() + theme_light(base_size = 20) + xlab("""") + ylab(""Importance"") + ggtitle(""Random Forest Feature Importance\n"") + theme(plot.title = element_text(size = 18))
ggsave(""2_feature_importance.png"", p)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
222,waithira-titanic-analysis-with-r,0.7609999999999999,"['user defined', 'user defined', 'user defined', 'apply', 'as.factor', 'c', 'colSums', 'data.frame', 'dim', 'gsub', 'ifelse', 'is.na', 'length', 'library', 'mean', 'names', 'sample', 'sum', 'summary', 'table', 'unique', 'bind_rows', 'aes', 'facet_wrap', 'geom_bar', 'geom_histogram', 'ggplot', 'ylab', 'plot', 'randomForest', 'rpart', 'rpart.plot', 'binomial', 'glm', 'predict', 'read.csv', 'str', 'write.csv']","['ggplot2', 'dplyr', 'GGally', 'rpart', 'rpart.plot', 'randomForest', 'base']",2.8401057720184304,"['mean', 'facet_wrap', 'is.na', 'glm', 'colSums', 'names', 'rpart', 'as.factor', 'summary', 'geom_histogram', 'str', 'gsub', 'dim', 'unique', 'geom_bar', 'apply', 'length', 'binomial', 'read.csv', 'table', 'randomForest', 'c', 'aes', 'ylab', 'sample', 'ifelse', 'sum', 'plot', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'ggplot', 'rpart.plot', 'user defined', 'library']",[],"['dsvijayaraghavan-vra-titanic', 'shashank74-titanic-disaster-data-exploration-and-modelling', 'researchbigd-titanic-forkedfrommeganscript', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'yuanwxu-exploring-survival-on-the-titanic', 'tetyama-trial-titanic', 'msantos68-exploring-survival-on-the-titanic', 'xxxmatxxx-titanic-getting-started-with-randomforest']","[0.9802023170574876, 0.5084728755874212, 0.4860563041782727, 0.4855824177280074, 0.48531797463781706, 0.48531797463781706, 0.4837760645346373, 0.483478214020258, 0.4818727600920931, 0.48152550268300687]","{'character(0)': ['set'], 'package:base': ['apply', 'as.factor', 'c', 'colSums', 'data.frame', 'dim', 'gsub', 'ifelse', 'is.na', 'length', 'library', 'mean', 'names', 'sample', 'sum', 'summary', 'table', 'unique'], 'package:dplyr': ['bind_rows'], 'package:ggplot2': ['aes', 'facet_wrap', 'geom_bar', 'geom_histogram', 'ggplot', 'ylab'], 'package:graphics': ['plot'], 'package:randomForest': ['randomForest'], 'package:rpart': ['rpart'], 'package:rpart.plot': ['rpart.plot'], 'package:stats': ['binomial', 'glm', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""character(0)"": [""set""], ""package:base"": [""apply"", ""as.factor"", ""c"", ""colSums"", ""data.frame"", ""dim"", ""gsub"", ""ifelse"", ""is.na"", ""length"", ""library"", ""mean"", ""names"", ""sample"", ""sum"", ""summary"", ""table"", ""unique""], ""package:dplyr"": [""bind_rows""], ""package:ggplot2"": [""aes"", ""facet_wrap"", ""geom_bar"", ""geom_histogram"", ""ggplot"", ""ylab""], ""package:graphics"": [""plot""], ""package:randomForest"": [""randomForest""], ""package:rpart"": [""rpart""], ""package:rpart.plot"": [""rpart.plot""], ""package:stats"": [""binomial"", ""glm"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",character0 set packagebase apply asfactor c colSums dataframe dim gsub ifelse isna length library mean names sample sum summary table unique packagedplyr bindrows packageggplot2 aes facetwrap geombar geomhistogram ggplot ylab packagegraphics plot packagerandomForest randomForest packagerpart rpart packagerpartplot rpartplot packagestats binomial glm predict packageutils readcsv str writecsv,"knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(GGally)
library(rpart)
library(rpart.plot)
library(randomForest)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
full <- bind_rows(train, test)
LT = dim(train)[1]
str(full)
colSums(is.na(full))
colSums(full == """")
full$Embarked[full$Embarked == """"] = ""C""
apply(full, 2, function(x) length(unique(x)))
cols <- c(""Survived"", ""Pclass"", ""Sex"", ""Embarked"")
for (i in cols) {
    full[, i] <- as.factor(full[, i])
}
str(full)
ggplot(data = full[1:LT, ], aes(x = Sex, fill = Survived)) + geom_bar()
ggplot(data = full[1:LT, ], aes(x = Embarked, fill = Survived)) + geom_bar(position = ""fill"") + ylab(""Frequency"")
t <- table(full[1:LT, ]$Embarked, full[1:LT, ]$Survived)
for (i in 1:dim(t)[1]) {
    t[i, ] <- t[i, ]/sum(t[i, ]) * 100
}
t
ggplot(data = full[1:LT, ], aes(x = Pclass, fill = Survived)) + geom_bar(position = ""fill"") + ylab(""Frequency"")
ggplot(data = full[1:LT, ], aes(x = Embarked, fill = Survived)) + geom_bar(position = ""fill"") + facet_wrap(~Pclass)
ggplot(data = full[1:LT, ], aes(x = SibSp, fill = Survived)) + geom_bar()
ggplot(data = full[1:LT, ], aes(x = Parch, fill = Survived)) + geom_bar()
full$FamilySize <- full$SibSp + full$Parch + 1
full1 <- full[1:LT, ]
ggplot(data = full1[!is.na(full[1:LT, ]$FamilySize), ], aes(x = FamilySize, fill = Survived)) + geom_histogram(binwidth = 1, position = ""fill"") + ylab(""Frequency"")
ggplot(data = full1[!(is.na(full[1:LT, ]$Age)), ], aes(x = Age, fill = Survived)) + geom_histogram(binwidth = 3)
ggplot(data = full1[!is.na(full[1:LT, ]$Age), ], aes(x = Age, fill = Survived)) + geom_histogram(binwidth = 3, position = ""fill"") + ylab(""Frequency"")
ggplot(data = full[1:LT, ], aes(x = Fare, fill = Survived)) + geom_histogram(binwidth = 20, position = ""fill"")
full$Fare[is.na(full$Fare)] <- mean(full$Fare, na.rm = T)
sum(is.na(full$Age))
full$Age[is.na(full$Age)] <- mean(full$Age, na.rm = T)
sum(is.na(full$Age))
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title == ""Lady""] <- ""Miss""
full$Title[full$Title == ""Dona""] <- ""Miss""
officer <- c(""Capt"", ""Col"", ""Don"", ""Dr"", ""Jonkheer"", ""Major"", ""Rev"", ""Sir"", ""the Countess"")
full$Title[full$Title %in% officer] <- ""Officer""
full$Title <- as.factor(full$Title)
ggplot(data = full[1:LT, ], aes(x = Title, fill = Survived)) + geom_bar(position = ""fill"") + ylab(""Frequency"")
train_im <- full[1:LT, c(""Survived"", ""Pclass"", ""Sex"", ""Age"", ""Fare"", ""SibSp"", ""Parch"", ""Title"")]
ind <- sample(1:dim(train_im)[1], 500)
train1 <- train_im[ind, ]
train2 <- train_im[-ind, ]
model <- glm(Survived ~ ., family = binomial(link = ""logit""), data = train1)
summary(model)
pred.train <- predict(model, train2)
pred.train <- ifelse(pred.train > 0.5, 1, 0)
mean(pred.train == train2$Survived)
t1 <- table(pred.train, train2$Survived)
presicion <- t1[1, 1]/(sum(t1[1, ]))
recall <- t1[1, 1]/(sum(t1[, 1]))
presicion
recall
F1 <- 2 * presicion * recall/(presicion + recall)
F1
test_im <- full[LT + 1:1309, c(""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Title"")]
pred.test <- predict(model, test_im)[1:418]
pred.test <- ifelse(pred.test > 0.5, 1, 0)
res <- data.frame(test$PassengerId, pred.test)
names(res) <- c(""PassengerId"", ""Survived"")
write.csv(res, file = ""res.csv"", row.names = F)
model_dt <- rpart(Survived ~ ., data = train1, method = ""class"")
rpart.plot(model_dt)
pred.train.dt <- predict(model_dt, train2, type = ""class"")
mean(pred.train.dt == train2$Survived)
t2 <- table(pred.train.dt, train2$Survived)
presicion_dt <- t2[1, 1]/(sum(t2[1, ]))
recall_dt <- t2[1, 1]/(sum(t2[, 1]))
presicion_dt
recall_dt
F1_dt <- 2 * presicion_dt * recall_dt/(presicion_dt + recall_dt)
F1_dt
pred.test.dt <- predict(model_dt, test_im, type = ""class"")[1:418]
res_dt <- data.frame(test$PassengerId, pred.test.dt)
names(res_dt) <- c(""PassengerId"", ""Survived"")
write.csv(res_dt, file = ""res_dt.csv"", row.names = F)
model_rf <- randomForest(Survived ~ ., data = train1)
plot(model_rf)
pred.train.rf <- predict(model_rf, train2)
mean(pred.train.rf == train2$Survived)
t1 <- table(pred.train.rf, train2$Survived)
presicion <- t1[1, 1]/(sum(t1[1, ]))
recall <- t1[1, 1]/(sum(t1[, 1]))
presicion
recall
F1 <- 2 * presicion * recall/(presicion + recall)
F1
pred.test.rf <- predict(model_rf, test_im)[1:418]
res_rf <- data.frame(test$PassengerId, pred.test.rf)
names(res_rf) <- c(""PassengerId"", ""Survived"")
write.csv(res_rf, file = ""res_rf.csv"", row.names = F)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
223,orbanjan-exploring-survival-on-the-titanic-new,0.7440000000000001,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",27.5028700828552,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic', 'datascikrid-exploring-survival-on-the-titanic', 'anishmayaramka-the-titanic-datset', 'aturner-exploring-survival-on-the-titanic']","[0.9968953251547249, 0.9968953251547249, 0.9968953251547249, 0.9968953251547249, 0.9968953251547249, 0.9968953251547249, 0.9968953251547249, 0.9968953251547249, 0.9968953251547249, 0.9968953251547249]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 14] <- ""Child""
full$Child[full$Age >= 14] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 14 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
224,karnakarthoorpu-titanicanalysis-r,0.648,"['data.frame', 'is.na', 'library', 'set.seed', 'summary', 'system', 'table', 'createDataPartition', 'class.ind', 'nnet', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['caret', 'nnet', 'base']",2.2041609287262003,"['nnet', 'createDataPartition', 'predict', 'write.csv', 'class.ind', 'data.frame', 'read.csv', 'table', 'summary', 'head', 'library', 'str', 'is.na', 'system', 'set.seed']",[],"['brirush-logistic-regression-for-titanic', 'scout16-titanic-disaster-in-r', 'andrecn-random-forest-caret-model-prediction-titanic', 'stevencahill-titanic-machine-learning-from-disaster', 'sudheer464-prediction-1-on-titanic-dataset', 'tsfitz-titanic', 'jerlinraj-titanic-machine-learning-from-disaster', 'zhaotianjing-titanic', 'sawajid-titanic-test', 'overdose-titanic-basic-modelling']","[0.3348508211696935, 0.09813665672386536, 0.09599188185555559, 0.09348831339332857, 0.08810101775635333, 0.08579600199700105, 0.08508825982846109, 0.08179622228057135, 0.08023775163194974, 0.0794053597832415]","{'package:base': ['data.frame', 'is.na', 'library', 'set.seed', 'summary', 'system', 'table'], 'package:caret': ['createDataPartition'], 'package:nnet': ['class.ind', 'nnet'], 'package:stats': ['predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""package:base"": [""data.frame"", ""is.na"", ""library"", ""set.seed"", ""summary"", ""system"", ""table""], ""package:caret"": [""createDataPartition""], ""package:nnet"": [""class.ind"", ""nnet""], ""package:stats"": [""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",packagebase dataframe isna library setseed summary system table packagecaret createDataPartition packagennet classind nnet packagestats predict packageutils head readcsv str writecsv,"system(""ls ../input"")
trainfile = read.csv(""../input/train.csv"", header = TRUE)
testfile = read.csv(""../input/test.csv"", header = TRUE)
str(trainfile)
set.seed(5221)
library(caret)
intrain <- createDataPartition(trainfile$Survived, p = 0.75, list = FALSE)
trained <- trainfile[intrain, ]
localtest <- trainfile[-intrain, ]
library(nnet)
trained$Survived <- class.ind(trained$Survived)
localtest$Survived <- class.ind(localtest$Survived)
neurafit <- nnet(Survived ~ Sex + Age + Pclass, trained, size = 1, softmax = TRUE)
summary(neurafit)
table(data.frame(predicted = predict(neurafit, localtest)[, 2] > 0.5, actual = localtest[, 2] > 0.5))
predicted <- predict(neurafit, testfile)[, 2]
predicted[is.na(predicted)] <- 0
head(predicted)
predicted[predicted > 0.5] <- 1
predicted[predicted < 0.5] <- 0
testfile$Survived <- predicted
testfile$Survived
str(testfile)
write.csv(testfile[, 1:12], ""predicted_file.csv"", row.names = FALSE)",0,0,1,0,0,0,0,1,0,0,0,0,0,0
225,lizpund-titanic-competition-kernel,0.7559999999999999,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'c', 'data.frame', 'factor', 'length', 'library', 'prop.table', 'rbind', 'rep', 'sapply', 'strsplit', 'sub', 'sum', 'summary', 'table', 'plot', 'text', 'rpart', 'rpart.control', 'prp', 'aggregate', 'predict', 'install.packages', 'read.csv', 'write.csv']","['rpart', 'rpart.plot', 'RColorBrewer', 'base']",4.98940491676331,"['install.packages', 'as.character', 'sub', 'rpart.control', 'prop.table', 'rpart', 'summary', 'text', 'sapply', 'rep', 'prp', 'factor', 'aggregate', 'length', 'read.csv', 'table', 'c', 'rbind', 'sum', 'plot', 'predict', 'write.csv', 'data.frame', 'strsplit', 'user defined', 'library']",[],"['alejandrorivas-titanic-beginners-principiantes-espa-ol', 'ammara-titanic-competition-script-using-rf-2', 'ccheng2016-titanic-survival', 'jmercer187-fork-of-titanic2', 'ammara-titanic-competition-using-boosting', 'mmaguero-titanic-majority-vote-of-ridge-rf-and-gbm', 'byrony-titanic-majority-vote-of-ridge-rf-and-gbm', 'arjunrampal-titanic-eda-rf', 'aravind5-titanic', 'yugrao-titanic2']","[0.8188392677015222, 0.683325069987466, 0.6773655608859341, 0.6728655698354049, 0.6396043748326955, 0.6289704669723956, 0.6289704669723956, 0.627746521307621, 0.6081306769619078, 0.6081306769619078]","{'character(0)': ['fancyRpartPlot'], 'package:base': ['as.character', 'c', 'data.frame', 'factor', 'length', 'library', 'prop.table', 'rbind', 'rep', 'sapply', 'strsplit', 'sub', 'sum', 'summary', 'table'], 'package:graphics': ['plot', 'text'], 'package:rpart': ['rpart', 'rpart.control'], 'package:rpart.plot': ['prp'], 'package:stats': ['aggregate', 'predict'], 'package:utils': ['install.packages', 'read.csv', 'write.csv']}","{""character(0)"": [""fancyRpartPlot""], ""package:base"": [""as.character"", ""c"", ""data.frame"", ""factor"", ""length"", ""library"", ""prop.table"", ""rbind"", ""rep"", ""sapply"", ""strsplit"", ""sub"", ""sum"", ""summary"", ""table""], ""package:graphics"": [""plot"", ""text""], ""package:rpart"": [""rpart"", ""rpart.control""], ""package:rpart.plot"": [""prp""], ""package:stats"": [""aggregate"", ""predict""], ""package:utils"": [""install.packages"", ""read.csv"", ""write.csv""]}",character0 fancyRpartPlot packagebase ascharacter c dataframe factor length library proptable rbind rep sapply strsplit sub sum summary table packagegraphics plot text packagerpart rpart rpartcontrol packagerpartplot prp packagestats aggregate predict packageutils installpackages readcsv writecsv,"train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
table(train$Survived)
prop.table(table(train$Survived))
test$Survived <- rep(0, 418)
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = ""theyallperish.csv"", row.names = FALSE)
summary(train$Sex)
prop.table(summary(train$Sex))
prop.table(table(train$Sex, train$Survived))
prop.table(table(train$Sex, train$Survived), 1)
test$Survived <- 0
test$Survived[test$Sex == ""female""] <- 1
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = ""allmenperish.csv"", row.names = FALSE)
summary(train$Age)
train$Child <- 0
train$Child[train$Age < 18] <- 1
aggregate(Survived ~ Child + Sex, data = train, FUN = sum)
aggregate(Survived ~ Child + Sex, data = train, FUN = length)
aggregate(Survived ~ Child + Sex, data = train, FUN = function(x) {
    sum(x)/length(x)
})
train$Fare2 <- ""30+""
train$Fare2[train$Fare < 30 & train$Fare >= 20] <- ""20-30""
train$Fare2[train$Fare < 20 & train$Fare >= 10] <- ""10-20""
train$Fare2[train$Fare < 10] <- ""<10""
aggregate(Survived ~ Fare2 + Pclass + Sex, data = train, FUN = (function(x) {
    sum(x)/length(x)
}))
test$Survived <- 0
test$Survived[test$Sex == ""female""] <- 1
test$Survived[test$Sex == ""female"" & test$Pclass == 3 & test$Fare > 20] <- 0
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = ""allmenandsomewomenperish.csv"", row.names = FALSE)
library(rpart)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = ""class"")
plot(fit)
text(fit)
install.packages(""rpart.plot"")
install.packages(""RColorBrewer"")
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(fit)
Prediction <- predict(fit, test, type = ""class"")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = ""myfirstdtree.csv"", row.names = FALSE)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = ""class"", control = rpart.control(minsplit = 2, cp = 0))
fancyRpartPlot(fit)
Prediction <- predict(fit, test, type = ""class"")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = ""myseconddtree.csv"", row.names = FALSE)
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = ""class"", control = rpart.control(minsplit = 10, cp = 0.005))
new.fit <- prp(fit, snip = TRUE)$obj
fancyRpartPlot(new.fit)
Prediction <- predict(new.fit, test, type = ""class"")
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = ""mythirddtree.csv"", row.names = FALSE)
train$Name[1]
test$Survived <- NA
test$Fare2 <- NA
test$Child <- NA
combi <- rbind(train, test)
combi$Name <- as.character(combi$Name)
combi$Name[1]
strsplit(combi$Name[1], split = ""[,.]"")
strsplit(combi$Name[1], split = ""[,.]"")[[1]][2]
combi$Title <- sapply(combi$Name, FUN = function(x) {
    strsplit(x, split = ""[,.]"")[[1]][2]
})
combi$Title <- sub("" "", """", combi$Title)
table(combi$Title)
combi$Title[combi$Title %in% c(""Mme"", ""Mlle"")] <- ""Mlle""
combi$Title[combi$Title %in% c(""Capt"", ""Don"", ""Major"", ""Sir"")] <- ""Sir""
combi$Title[combi$Title %in% c(""Dona"", ""Lady"", ""the Countess"", ""Jonkheer"")] <- ""Lady""
combi$Title <- factor(combi$Title)
combi$FamilySize <- combi$SibSp + combi$Parch + 1",0,0,0,0,0,0,0,0,0,1,0,0,0,0
226,bubblride-titanic-e1071-c-svc-fares-only,0.667,"['as.factor', 'is.na', 'library', 'list.files', 'options', 'print', 'set.seed', 'summary', 'unname', 'confusionMatrix', 'createDataPartition', 'mutate', 'select', 'svm', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['e1071', 'caret', 'tidyverse', 'base']",2.5205469131469704,"['svm', 'is.na', 'confusionMatrix', 'options', 'print', 'as.factor', 'summary', 'str', 'set.seed', 'read.csv', 'mutate', 'createDataPartition', 'predict', 'write.csv', 'list.files', 'unname', 'head', 'library', 'select']",[],"['bubblride-titanic-e1071-nu-svc', 'bubblride-titanic-e1071-c-svc-five-features', 'seshadrikolluri-predicting-survival-on-titanic', 'rkumar3147-exploring-survival-on-the-titanic1', 'vizcharlie-exploring-survival-on-the-titanic', 'qianbi-titanic-voting-2', 'mustfkeskin-titanic-xgboost', 'hertan-titanic-surviving-dataset-simple-expression', 'qianbi-titanic-voting', 'jaimisk-titanic-survival-logistic-regression']","[0.95475567436889, 0.6051153767373889, 0.38704298631029116, 0.29078061191887883, 0.29078061191887883, 0.2686353234054647, 0.23569521837813784, 0.23208540563614571, 0.2277476958904204, 0.22526033225007752]","{'package:base': ['as.factor', 'is.na', 'library', 'list.files', 'options', 'print', 'set.seed', 'summary', 'unname'], 'package:caret': ['confusionMatrix', 'createDataPartition'], 'package:dplyr': ['mutate', 'select'], 'package:e1071': ['svm'], 'package:stats': ['predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""package:base"": [""as.factor"", ""is.na"", ""library"", ""list.files"", ""options"", ""print"", ""set.seed"", ""summary"", ""unname""], ""package:caret"": [""confusionMatrix"", ""createDataPartition""], ""package:dplyr"": [""mutate"", ""select""], ""package:e1071"": [""svm""], ""package:stats"": [""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",packagebase asfactor isna library listfiles options print setseed summary unname packagecaret confusionMatrix createDataPartition packagedplyr mutate select packagee1071 svm packagestats predict packageutils head readcsv str writecsv,"options(echo = FALSE)
library(e1071)
library(caret)
library(tidyverse)
list.files(path = ""../input"")
df <- read.csv(""../input/train.csv"")
str(df)
print(""No Feature Engineering :("")
set.seed(42)
idx_train <- createDataPartition(df$PassengerId, p = 0.5, list = FALSE, times = 1)
df_train <- df[idx_train, ]
df_valid <- df[-idx_train, ]
model <- svm(x = df_train$Fare, y = as.factor(df_train$Survived), scale = FALSE, na.action = na.omit, type = ""C-classification"", kernel = ""radial"", gamma = 2, cost = 10)
summary(model)
yhat <- predict(model, df_valid$Fare)
res <- confusionMatrix(as.factor(yhat), as.factor(df_valid$Survived))
acc <- unname(res$overall[1])
res
df_test <- read.csv(""../input/test.csv"")
df_test$Fare[is.na(df_test$Fare)] <- 0
yhat <- predict(model, df_test$Fare)
res <- df_test %>% select(PassengerId) %>% mutate(Survived = yhat)
head(res)
write.csv(res, file = ""my_submission.csv"", row.names = F)",0,0,1,0,0,0,0,1,0,0,0,1,0,0
227,imendoza-titanic-rf-prediction,0.763,"['user defined', 'user defined', 'user defined', 'apply', 'as.integer', 'as.numeric', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'list', 'mean', 'paste0', 'print', 'rep', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'suppressMessages', 'table', 'tapply', 'legend', 'mosaicplot', 'plot', 'hcl', 'importance', 'randomForest', 'varImpPlot', 'aggregate', 'cor', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['randomForest', 'base']",3.993577003479,"['list', 'mean', 'median', 'hcl', 'cor', 'is.na', 'print', 'summary', 'sapply', 'round', 'rep', 'mosaicplot', 'importance', 'varImpPlot', 'str', 'set.seed', 'gsub', 'factor', 'as.integer', 'colnames', 'aggregate', 'apply', 'read.csv', 'paste0', 'suppressMessages', 'table', 'randomForest', 'row.names', 'c', 'as.numeric', 'sum', 'plot', 'legend', 'predict', 'reorder', 'write.csv', 'data.frame', 'strsplit', 'tapply', 'user defined', 'library']",[],"['jenioai-titanic-data-analysis-rf-prediction-0-81818', 'vincentlugat-titanic-data-analysis-rf-prediction-0-81818', 'kapillehar-titanic-rf-prediction-0-81818', 'vikasht34-titanic-rf-prediction-0-81818', 'ashutoshds-titanic-rf-prediction-0-81818', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'libra202ma-exploring-survival-on-the-titanic', 'bonesaw98616-exploring-survival-on-the-titanic']","[0.9801339202416555, 0.960537936220937, 0.8536099705038702, 0.8536099705038702, 0.825311815802906, 0.6597358664178433, 0.659250902397554, 0.659250902397554, 0.6541903708080461, 0.6537671429713466]","{'character(0)': ['aes', 'bind_rows', 'coord_flip', 'corrplot', 'dense_rank', 'desc', 'dollar_format', 'element_blank', 'facet_grid', 'facet_wrap', 'geom_bar', 'geom_density', 'geom_histogram', 'geom_jitter', 'geom_text', 'geom_vline', 'ggplot', 'ggtitle', 'labs', 'mutate', 'revalue', 'scale_fill_discrete', 'scale_x_continuous', 'theme', 'theme_few', 'xlab', 'ylab'], 'package:base': ['apply', 'as.integer', 'as.numeric', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'list', 'mean', 'paste0', 'print', 'rep', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'suppressMessages', 'table', 'tapply'], 'package:graphics': ['legend', 'mosaicplot', 'plot'], 'package:grDevices': ['hcl'], 'package:randomForest': ['importance', 'randomForest', 'varImpPlot'], 'package:stats': ['aggregate', 'cor', 'median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""character(0)"": [""aes"", ""bind_rows"", ""coord_flip"", ""corrplot"", ""dense_rank"", ""desc"", ""dollar_format"", ""element_blank"", ""facet_grid"", ""facet_wrap"", ""geom_bar"", ""geom_density"", ""geom_histogram"", ""geom_jitter"", ""geom_text"", ""geom_vline"", ""ggplot"", ""ggtitle"", ""labs"", ""mutate"", ""revalue"", ""scale_fill_discrete"", ""scale_x_continuous"", ""theme"", ""theme_few"", ""xlab"", ""ylab""], ""package:base"": [""apply"", ""as.integer"", ""as.numeric"", ""c"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""library"", ""list"", ""mean"", ""paste0"", ""print"", ""rep"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""summary"", ""suppressMessages"", ""table"", ""tapply""], ""package:graphics"": [""legend"", ""mosaicplot"", ""plot""], ""package:grDevices"": [""hcl""], ""package:randomForest"": [""importance"", ""randomForest"", ""varImpPlot""], ""package:stats"": [""aggregate"", ""cor"", ""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",character0 aes bindrows coordflip corrplot denserank desc dollarformat elementblank facetgrid facetwrap geombar geomdensity geomhistogram geomjitter geomtext geomvline ggplot ggtitle labs mutate revalue scalefilldiscrete scalexcontinuous theme themefew xlab ylab packagebase apply asinteger asnumeric c colnames dataframe factor gsub isna library list mean paste0 print rep round rownames sapply setseed strsplit sum summary suppressMessages table tapply packagegraphics legend mosaicplot plot packagegrDevices hcl packagerandomForest importance randomForest varImpPlot packagestats aggregate cor median predict reorder packageutils readcsv str writecsv,"suppressMessages(library(""ggplot2""))
suppressMessages(library(""ggthemes""))
suppressMessages(library(""scales""))
suppressMessages(library(""dplyr""))
suppressMessages(library(""randomForest""))
suppressMessages(library(""corrplot""))
suppressMessages(library(""plyr""))
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
summary(full)
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram(bins = 30) + theme_few() + xlab(""Age"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Age vs Survived"")
ggplot(full[1:891, ], aes(Sex, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + theme_few() + xlab(""Sex"") + ylab(""Count"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Sex vs Survived"")
tapply(full[1:891, ]$Survived, full[1:891, ]$Sex, mean)
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram(bins = 30) + theme_few() + xlab(""Age"") + ylab(""Count"") + facet_grid(. ~ Sex) + scale_fill_discrete(name = ""Survived"") + theme_few() + ggtitle(""Age vs Sex vs Survived"")
tapply(full[1:891, ]$Survived, full[1:891, ]$Pclass, mean)
ggplot(full[1:891, ], aes(Pclass, fill = factor(Survived))) + geom_bar(stat = ""count"") + theme_few() + xlab(""Pclass"") + facet_grid(. ~ Sex) + ylab(""Count"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Pclass vs Sex vs Survived"")
ggplot(full[1:891, ], aes(x = Age, y = Sex)) + geom_jitter(aes(colour = factor(Survived))) + theme_few() + theme(legend.title = element_blank()) + facet_wrap(~Pclass) + labs(x = ""Age"", y = ""Sex"", title = ""Pclass vs Sex vs Age vs Survived"") + scale_fill_discrete(name = ""Survived"") + scale_x_continuous(name = ""Age"", limits = c(0, 81))
ggplot(full[1:891, ], aes(x = Fare, y = Pclass)) + geom_jitter(aes(colour = factor(Survived))) + theme_few() + theme(legend.title = element_blank()) + labs(x = ""Age"", y = ""Pclass"", title = ""Fare vs Pclass"") + scale_fill_discrete(name = ""Survived"") + scale_x_continuous(name = ""Fare"", limits = c(0, 270), breaks = c(0, 40, 80, 120, 160, 200, 240, 280))
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
officer <- c(""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"")
royalty <- c(""Dona"", ""Lady"", ""the Countess"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% royalty] <- ""Royalty""
full$Title[full$Title %in% officer] <- ""Officer""
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
ggplot(full[1:891, ], aes(Title, fill = factor(Survived))) + geom_bar(stat = ""count"") + xlab(""Title"") + ylab(""Count"") + scale_fill_discrete(name = "" Survived"") + ggtitle(""Title vs Survived"") + theme_few()
tapply(full[1:891, ]$Survived, full[1:891, ]$Title, mean)
full$Fsize <- full$SibSp + full$Parch + 1
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + xlab(""Family Size"") + ylab(""Count"") + theme_few() + scale_fill_discrete(name = ""Survived"") + ggtitle(""Family Size vs Survived"")
tapply(full[1:891, ]$Survived, full[1:891, ]$Fsize, mean)
full$FsizeD[full$Fsize == 1] <- ""Alone""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""Small""
full$FsizeD[full$Fsize > 4] <- ""Big""
tapply(full[1:891, ]$Survived, full[1:891, ]$FsizeD, mean)
mosaicplot(table(full$FsizeD, full$Survived), main = ""FsizeD vs Survived"", ylab = ""Survived"", xlab = ""FsizeD"", col = hcl(c(50, 120)), )
tapply(full$Embarked, full$Pclass, median, na.rm = TRUE)
full[c(62, 830), ""Embarked""]
full$Embarked[c(62, 830)] <- ""S""
ggplot(full[1:891, ], aes(Pclass, fill = factor(Survived))) + geom_bar(stat = ""count"") + theme_few() + xlab(""Pclass"") + ylab(""Count"") + facet_wrap(~Embarked) + scale_fill_discrete(name = ""Survived"") + ggtitle(""Embarked vs Pclass vs Survived"")
full[1044, ]
ggplot(full[full$Pclass == ""3"", ], aes(x = Fare)) + geom_density(fill = ""lightgrey"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""darkred"", linetype = ""dashed"", lwd = 1) + xlab(""Fare"") + ggtitle(""Pclass = 3"") + ylab(""Density"") + scale_x_continuous(labels = dollar_format()) + theme_few()
tapply(full$Fare, full$Pclass, median, na.rm = TRUE)
full$Fare[1044] <- median(full[full$Pclass == ""3"", ]$Fare, na.rm = TRUE)
tapply(full$Age, full$Pclass, median, na.rm = TRUE)
tapply(full$Age, full$Title, median, na.rm = TRUE)
title.age <- aggregate(full$Age, by = list(full$Title), FUN = function(x) median(x, na.rm = T))
full[is.na(full$Age), ""Age""] <- apply(full[is.na(full$Age), ], 1, function(x) title.age[title.age[, 1] == x[""Title""], 2])
sum(is.na(full$Age))
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
ggplot(full[1:891, ][full[1:891, ]$Child == ""Child"", ], aes(Sex, fill = factor(Survived))) + geom_bar(stat = ""count"") + xlab(""Sex"") + ylab(""Count"") + facet_wrap(~Pclass) + scale_fill_discrete(name = ""Survived"") + ggtitle(""Child vs Sex vs Pclass vs Survived"") + theme_few()
tapply(full[1:891, ]$Survived, full[1:891, ]$Child, mean)
table(full$Child, full$Survived)
corr_data <- full[1:891, ]
corr_data$Embarked <- revalue(corr_data$Embarked, c(S = 1, Q = 2, C = 3))
corr_data$Sex <- revalue(corr_data$Sex, c(male = 1, female = 2))
corr_data$Title <- revalue(corr_data$Title, c(Mr = 1, Master = 2, Officer = 3, Mrs = 4, Royalty = 5, Miss = 5))
corr_data$FsizeD <- revalue(corr_data$FsizeD, c(Small = 1, Alone = 2, Big = 3))
corr_data$Child <- revalue(corr_data$Child, c(Adult = 1, Child = 2))
corr_data$FsizeD <- as.numeric(corr_data$FsizeD)
corr_data$Child <- as.numeric(corr_data$Child)
corr_data$Sex <- as.numeric(corr_data$Sex)
corr_data$Embarked <- as.numeric(corr_data$Embarked)
corr_data$Title <- as.numeric(corr_data$Title)
corr_data$Pclass <- as.numeric(corr_data$Pclass)
corr_data$Survived <- as.numeric(corr_data$Survived)
corr_data <- corr_data[, c(""Survived"", ""Pclass"", ""Sex"", ""FsizeD"", ""Fare"", ""Embarked"", ""Title"", ""Child"")]
str(corr_data)
mcorr_data <- cor(corr_data)
corrplot(mcorr_data, method = ""circle"")
full$Child <- factor(full$Child)
full$Sex <- factor(full$Sex)
full$Embarked <- factor(full$Embarked)
full$Title <- factor(full$Title)
full$Pclass <- factor(full$Pclass)
full$FsizeD <- factor(full$FsizeD)
full1 <- full[, -9]
full_mod <- full1[, -10]
train <- full_mod[1:891, ]
test <- full_mod[892:1309, ]
library(""randomForest"")
set.seed(123)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Fare + Embarked + Title + FsizeD + Child, data = train)
rf.fitted = predict(rf_model)
ans_rf = rep(NA, 891)
for (i in 1:891) {
    ans_rf[i] = as.integer(rf.fitted[[i]]) - 1
}
table(ans_rf)
print(rf_model)
mean(ans_rf == train$Survived)
varImpPlot(rf_model, main = ""RF_MODEL"")
train <- full_mod[1:580, ]
valid <- full_mod[581:891, ]
test <- full_mod[892:1309, ]
set.seed(123)
rf_model_train <- randomForest(factor(Survived) ~ Pclass + Sex + Fare + Embarked + Title + FsizeD + Child, data = train)
rf_model_train.fitted = predict(rf_model_train)
ans_rf_train = rep(NA, 580)
for (i in 1:580) {
    ans_rf_train[i] = as.integer(rf_model_train.fitted[[i]]) - 1
}
table(ans_rf_train)
print(rf_model_train)
mean(ans_rf_train == train$Survived)
set.seed(123)
rf_model_val <- randomForest(factor(Survived) ~ Pclass + Sex + Fare + Embarked + Title + FsizeD + Child, data = valid)
rf_model_val.fitted = predict(rf_model_val)
ans_rf_val = rep(NA, 311)
for (i in 1:311) {
    ans_rf_val[i] = as.integer(rf_model_val.fitted[[i]]) - 1
}
table(ans_rf_val)
print(rf_model_val)
mean(ans_rf_val == valid$Survived)
prediction <- predict(rf_model, test)
solution <- data.frame(Survived = prediction, PassengerID = test$PassengerId)
write.csv(solution, file = ""rf_model_sol.csv"", row.names = F)
plot(rf_model, ylim = c(0, 0.36), main = ""RF_MODEL"")
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()",1,0,0,0,0,0,0,0,0,0,0,0,0,0
228,suraj915-titanic-suraj,0.763,"['as.data.frame', 'as.factor', 'is.na', 'library', 'nrow', 'rbind', 'randomForest', 'as.formula', 'median', 'predict', 'read.csv', 'tail', 'write.csv']","['randomForest', 'base']",0.750647068023682,"['rbind', 'nrow', 'predict', 'write.csv', 'as.formula', 'median', 'tail', 'read.csv', 'randomForest', 'as.factor', 'library', 'as.data.frame', 'is.na']",[],"['paulbisto-r-titanic-script-practice', 'predact-easy-r-titanic-predictive-model', 'utkarsh1997-kaggle-titanic-rf', 'pavani2018-titanicr-random-forests', 'pradeeptripathi-prediction-of-titanic-survival-using-r', 'pradeeptripathi-prediction-of-titanic-survival-using-random-forest', 'lokesharun-titanic', 'acrespop-titanic1', 'mailakshdeep-titanic-survival-prediction-r', 'supriya675-titanic-prediction-simplified-for-beginners']","[0.9740289818085214, 0.9589811340751226, 0.9403899713163916, 0.9391460211276598, 0.8955669677206812, 0.8952375303427353, 0.8540334405218628, 0.791770219685815, 0.7842768323517635, 0.7187860711136922]","{'package:base': ['as.data.frame', 'as.factor', 'is.na', 'library', 'nrow', 'rbind'], 'package:randomForest': ['randomForest'], 'package:stats': ['as.formula', 'median', 'predict'], 'package:utils': ['read.csv', 'tail', 'write.csv']}","{""package:base"": [""as.data.frame"", ""as.factor"", ""is.na"", ""library"", ""nrow"", ""rbind""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""as.formula"", ""median"", ""predict""], ""package:utils"": [""read.csv"", ""tail"", ""write.csv""]}",packagebase asdataframe asfactor isna library nrow rbind packagerandomForest randomForest packagestats asformula median predict packageutils readcsv tail writecsv,"titanic.test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
titanic.train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
titanic.train$isTrainSet <- TRUE
titanic.test$isTrainSet <- FALSE
titanic.test$Survived <- NA
titanic.full <- rbind(titanic.train, titanic.test)
titanic.full$Embarked == """"
titanic.full[titanic.full$Embarked == """", ""Embarked""] <- ""S""
median.age <- median(titanic.full$Age, na.rm = TRUE)
titanic.full[is.na(titanic.full$Age), ""Age""] <- median.age
median.fare <- median(titanic.full$Fare, na.rm = TRUE)
titanic.full[is.na(titanic.full$Fare), ""Fare""] <- median.fare
titanic.full$Pclass <- as.factor(titanic.full$Pclass)
titanic.full$Sex <- as.factor(titanic.full$Sex)
titanic.full$Embarked <- as.factor(titanic.full$Embarked)
titanic.test <- titanic.full[titanic.full$isTrainSet == FALSE, ]
titanic.train <- titanic.full[titanic.full$isTrainSet == TRUE, ]
titanic.train$Survived <- as.factor(titanic.train$Survived)
survived.equation <- ""Survived ~ Pclass + Age + Sex + SibSp + Parch + Fare + Embarked ""
survived.formula <- as.formula(survived.equation)
library(randomForest)
titanic.model <- randomForest(formula = survived.formula, data = titanic.train, ntree = 500, mtry = 3, nodesize = 0.01 * nrow(titanic.test))
features.equation <- ""Pclass + Age + Sex + SibSp + Parch + Fare + Embarked ""
survived <- predict(titanic.model, newdata = titanic.test)
PassengerId <- titanic.test$PassengerId
output.df <- as.data.frame(PassengerId)
output.df$Survived <- survived
tail(output.df)
write.csv(output.df, file = ""kaggle_submission_suraj.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
229,benybrahim-best-titanic-benchmark,0.754,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.factor', 'c', 'data.frame', 'exp', 'factor', 'gsub', 'I', 'lapply', 'library', 'names', 'print', 'sapply', 'set.seed', 'strsplit', 'which', 'train', 'bind_rows', 'complete', 'mice', 'revalue', 'median', 'predict', 'str_sub', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'plyr', 'stringr', 'caret', 'base']",55.4761829376221,"['exp', 'complete', 'median', 'lapply', 'which', 'names', 'revalue', 'print', 'as.factor', 'sapply', 'mice', 'str', 'set.seed', 'gsub', 'factor', 'read.csv', 'train', 'c', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'strsplit', 'str_sub', 'I', 'user defined', 'library']",[],"['venkatko-titanic-survival1', 'abedben-exploring-survival-on-the-titanic', 'tetyama-trial-titanic', 'arunkumarramanan-data-science-in-r-and-titanic-survival-prediction', 'hemingwei-titanic-r-solution-from-megan-risdal', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'vikramatjob-exploring-survival-on-the-titanic-var1', 'mira5b-exploring-survival-on-the-titanic']","[0.877054829887067, 0.866309150504411, 0.8645520960487734, 0.8628124013929312, 0.8617148907371928, 0.8614253881061263, 0.8613708372775708, 0.8613708372775708, 0.8524194514816951, 0.8523800522360372]","{'character(0)': ['isEven', 'isOdd'], 'package:base': ['as.factor', 'c', 'data.frame', 'exp', 'factor', 'gsub', 'I', 'lapply', 'library', 'names', 'print', 'sapply', 'set.seed', 'strsplit', 'which'], 'package:caret': ['train'], 'package:dplyr': ['bind_rows'], 'package:mice': ['complete', 'mice'], 'package:plyr': ['revalue'], 'package:stats': ['median', 'predict'], 'package:stringr': ['str_sub'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""character(0)"": [""isEven"", ""isOdd""], ""package:base"": [""as.factor"", ""c"", ""data.frame"", ""exp"", ""factor"", ""gsub"", ""I"", ""lapply"", ""library"", ""names"", ""print"", ""sapply"", ""set.seed"", ""strsplit"", ""which""], ""package:caret"": [""train""], ""package:dplyr"": [""bind_rows""], ""package:mice"": [""complete"", ""mice""], ""package:plyr"": [""revalue""], ""package:stats"": [""median"", ""predict""], ""package:stringr"": [""str_sub""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",character0 isEven isOdd packagebase asfactor c dataframe exp factor gsub I lapply library names print sapply setseed strsplit which packagecaret train packagedplyr bindrows packagemice complete mice packageplyr revalue packagestats median predict packagestringr strsub packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
library(""plyr"")
library(""stringr"")
library(""caret"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Survived <- revalue(factor(full$Survived), c(`1` = ""Survived"", `0` = ""Perished""))
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
full$Fsize <- full$SibSp + full$Parch + 1
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full$Embarked[c(62, 830)] <- ""C""
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
isEven <- function(x) x %in% c(""0"", ""2"", ""4"", ""6"", ""8"")
isOdd <- function(x) x %in% c(""1"", ""3"", ""5"", ""7"", ""9"")
full$Side <- NA
full$Cabin.last.digit <- str_sub(full$Cabin, -1)
full$Side[which(isEven(full$Cabin.last.digit))] <- ""port""
full$Side[which(isOdd(full$Cabin.last.digit))] <- ""starboard""
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""FsizeD"", ""Side"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
full$Age <- mice_output$Age
full$Deck <- mice_output$Deck
full$Side <- mice_output$Side
full$Child[full$Age < 16] <- ""Child""
full$Child[full$Age >= 16] <- ""Adult""
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0] <- ""Mother""
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- train(Survived ~ Sex:I(Pclass == ""3"") + Age + I(exp(Fare)) + Title + Sex * Child + Pclass:Child + Mother * I(FsizeD == ""large"") + I(FsizeD == ""large"") * Sex + Sex:I(Embarked == ""Q"") + Side:I(Pclass == ""1""), method = ""glm"", data = train)
print(rf_model)
prediction <- predict(rf_model, test)
prediction <- revalue(prediction, c(Survived = ""1"", Perished = ""0""))
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,1,1,0,0,0,1,0,0,0,0,0,0
230,sherrywangjy-titanic-machine-learning-from-disaster,0.7559999999999999,"['densityplot', 'cbind', 'rbind', 'apply', 'as.character', 'as.factor', 'c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'mean', 'names', 'sapply', 'strsplit', 'sum', 'which', 'complete', 'mice', 'randomForest', 'predict', 'read.csv', 'str', 'write.csv']","['randomForest', 'mice', 'lattice', 'base']",2.81108498573303,"['complete', 'densityplot', 'mean', 'which', 'as.character', 'is.na', 'names', 'as.factor', 'sapply', 'mice', 'str', 'gsub', 'factor', 'apply', 'read.csv', 'randomForest', 'c', 'rbind', 'sum', 'predict', 'write.csv', 'data.frame', 'strsplit', 'library', 'cbind']",[],"['paulocressoni-titanic-using-stepwise-linear-regression', 'ezhilvelme-titanic-neural-network-c-4-2', 'nithishthirmul-titanic-data-test1', 'annafreydenzon-titanic-machine-learning-from-disaster', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic']","[0.09651522158084082, 0.08570166939479978, 0.08489723063442181, 0.07708249403312946, 0.07507266017202495, 0.07464867413279815, 0.07461992175478138, 0.07461992175478138, 0.07448636507950863, 0.06416672073788399]","{'c(""package:lattice"", ""package:mice"")': ['densityplot'], 'c(""package:mice"", ""package:base"")': ['cbind', 'rbind'], 'package:base': ['apply', 'as.character', 'as.factor', 'c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'mean', 'names', 'sapply', 'strsplit', 'sum', 'which'], 'package:mice': ['complete', 'mice'], 'package:randomForest': ['randomForest'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:lattice"", ""package:mice"")"": [""densityplot""], ""c(""package:mice"", ""package:base"")"": [""cbind"", ""rbind""], ""package:base"": [""apply"", ""as.character"", ""as.factor"", ""c"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""library"", ""mean"", ""names"", ""sapply"", ""strsplit"", ""sum"", ""which""], ""package:mice"": [""complete"", ""mice""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagelattice packagemice densityplot cpackagemice packagebase cbind rbind packagebase apply ascharacter asfactor c dataframe factor gsub isna library mean names sapply strsplit sum which packagemice complete mice packagerandomForest randomForest packagestats predict packageutils readcsv str writecsv,"library(randomForest)
library(mice)
library(lattice)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
test$Survived <- 0
dataTita <- rbind(train, test)
str(dataTita)
dataTita$Name <- as.character(dataTita$Name)
dataTita$title <- sapply(dataTita$Name, FUN = function(x) {
    strsplit(x, ""[,.]"")[[1]][[2]]
})
dataTita$title <- gsub("" "", """", dataTita$title)
dataTita$title[dataTita$title %in% c(""Mlle"", ""Ms"", ""Lady"")] <- ""Miss""
dataTita$title[dataTita$title == ""Mme""] <- ""Mrs""
dataTita$title[dataTita$title %in% c(""Capt"", ""Col"", ""Don"", ""Dona"", ""Dr"", ""Jonkheer"", ""Master"", ""Major"", ""Rev"", ""Sir"", ""theCountess"")] <- ""rare title""
dataTita$Family <- apply(dataTita[, names(dataTita) %in% c(""SibSp"", ""Parch"")], 1, sum)
apply(dataTita, 2, FUN = function(x) {
    sum(is.na(x))
})
apply(dataTita, 2, FUN = function(x) {
    sum(x == """")
})
dataTita$Embarked[c(62, 830)] <- ""S""
dataTita$Fare[1044] <- mean(dataTita[which(dataTita$Pclass == 3 & dataTita$PassengerId != 1044), 9])
imp <- mice(dataTita[, names(dataTita) %in% c(""Pclass"", ""Age"", ""SibSp"", ""Parch"", ""Fare"")], m = 5, meth = ""rf"", seed = 1234)
densityplot(imp)
dataTita <- cbind(dataTita[, !names(dataTita) %in% c(""Pclass"", ""Age"", ""SibSp"", ""Parch"", ""Fare"")], complete(imp, 1))
dataTita$title <- as.factor(dataTita$title)
dataTita$Embarked <- as.factor(dataTita$Embarked)
dataTita$Sex <- as.factor(dataTita$Sex)
train <- dataTita[1:891, ]
test <- dataTita[892:1309, !names(dataTita) %in% c(""Survived"")]
train$title <- as.factor(train$title)
train$Embarked <- as.factor(train$Embarked)
train$Sex <- as.factor(train$Sex)
train.rf <- randomForest(factor(Survived) ~ Age + Pclass + Family + Fare + title + Embarked + Sex, data = train, ntree = 50)
train.rf
test.rf <- predict(train.rf, test)
testresult <- data.frame(PassengerId = test$PassengerId, Survived = test.rf)
write.csv(testresult, ""result.csv"", row.names = FALSE)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
233,loveautumnlan-exploratoryanalysis-prediction-titanic,0.763,"['densityplot', 'stripplot', 'xyplot', 'rbind', 'as.character', 'as.factor', 'as.vector', 'attach', 'c', 'colnames', 'data.frame', 'do.call', 'factor', 'grep', 'ifelse', 'is.na', 'library', 'list', 'nrow', 'paste', 'print', 'prop.table', 'round', 'sample', 'sapply', 'set.seed', 'strsplit', 'sub', 'sum', 'table', 'which', 'which.min', 'with', 'aes', 'facet_wrap', 'geom_bar', 'geom_boxplot', 'geom_histogram', 'ggplot', 'ggtitle', 'xlab', 'ylab', 'hist', 'legend', 'par', 'plot', 'grid.arrange', 'complete', 'mice', 'randomForest', 'varImpPlot', 'melt', 'prune', 'rpart', 'rpart.plot', 'aggregate', 'median', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['ggplot2', 'gridExtra', 'dplyr', 'mice', 'lattice', 'reshape2', 'scales', 'rpart', 'rpart.plot', 'randomForest', 'base']",5.77183699607849,"['which.min', 'nrow', 'list', 'complete', 'densityplot', 'facet_wrap', 'median', 'do.call', 'grep', 'which', 'as.character', 'is.na', 'sub', 'geom_boxplot', 'attach', 'print', 'prop.table', 'prune', 'melt', 'rpart', 'as.factor', 'round', 'sapply', 'geom_histogram', 'hist', 'mice', 'varImpPlot', 'str', 'set.seed', 'xlab', 'factor', 'colnames', 'aggregate', 'geom_bar', 'grid.arrange', 'read.csv', 'as.vector', 'table', 'par', 'randomForest', 'stripplot', 'c', 'aes', 'ylab', 'rbind', 'paste', 'ifelse', 'sample', 'sum', 'legend', 'plot', 'predict', 'xyplot', 'ggtitle', 'write.csv', 'data.frame', 'strsplit', 'ggplot', 'rpart.plot', 'head', 'library', 'with']",[],"['kapillehar-titanic-rf-prediction-0-81818', 'vikasht34-titanic-rf-prediction-0-81818', 'ashutoshds-titanic-rf-prediction-0-81818', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic']","[0.14063247950170338, 0.14063247950170338, 0.13946532366143613, 0.13403372003794917, 0.13390341083981425, 0.13390341083981425, 0.13373021465817642, 0.13373021465817642, 0.13337818431645124, 0.13337818431645124]","{'c(""package:lattice"", ""package:mice"")': ['densityplot', 'stripplot', 'xyplot'], 'c(""package:mice"", ""package:base"")': ['rbind'], 'package:base': ['as.character', 'as.factor', 'as.vector', 'attach', 'c', 'colnames', 'data.frame', 'do.call', 'factor', 'grep', 'ifelse', 'is.na', 'library', 'list', 'nrow', 'paste', 'print', 'prop.table', 'round', 'sample', 'sapply', 'set.seed', 'strsplit', 'sub', 'sum', 'table', 'which', 'which.min', 'with'], 'package:ggplot2': ['aes', 'facet_wrap', 'geom_bar', 'geom_boxplot', 'geom_histogram', 'ggplot', 'ggtitle', 'xlab', 'ylab'], 'package:graphics': ['hist', 'legend', 'par', 'plot'], 'package:gridExtra': ['grid.arrange'], 'package:mice': ['complete', 'mice'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:reshape2': ['melt'], 'package:rpart': ['prune', 'rpart'], 'package:rpart.plot': ['rpart.plot'], 'package:stats': ['aggregate', 'median', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""c(""package:lattice"", ""package:mice"")"": [""densityplot"", ""stripplot"", ""xyplot""], ""c(""package:mice"", ""package:base"")"": [""rbind""], ""package:base"": [""as.character"", ""as.factor"", ""as.vector"", ""attach"", ""c"", ""colnames"", ""data.frame"", ""do.call"", ""factor"", ""grep"", ""ifelse"", ""is.na"", ""library"", ""list"", ""nrow"", ""paste"", ""print"", ""prop.table"", ""round"", ""sample"", ""sapply"", ""set.seed"", ""strsplit"", ""sub"", ""sum"", ""table"", ""which"", ""which.min"", ""with""], ""package:ggplot2"": [""aes"", ""facet_wrap"", ""geom_bar"", ""geom_boxplot"", ""geom_histogram"", ""ggplot"", ""ggtitle"", ""xlab"", ""ylab""], ""package:graphics"": [""hist"", ""legend"", ""par"", ""plot""], ""package:gridExtra"": [""grid.arrange""], ""package:mice"": [""complete"", ""mice""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:reshape2"": [""melt""], ""package:rpart"": [""prune"", ""rpart""], ""package:rpart.plot"": [""rpart.plot""], ""package:stats"": [""aggregate"", ""median"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",cpackagelattice packagemice densityplot stripplot xyplot cpackagemice packagebase rbind packagebase ascharacter asfactor asvector attach c colnames dataframe docall factor grep ifelse isna library list nrow paste print proptable round sample sapply setseed strsplit sub sum table which whichmin with packageggplot2 aes facetwrap geombar geomboxplot geomhistogram ggplot ggtitle xlab ylab packagegraphics hist legend par plot packagegridExtra gridarrange packagemice complete mice packagerandomForest randomForest varImpPlot packagereshape2 melt packagerpart prune rpart packagerpartplot rpartplot packagestats aggregate median predict packageutils head readcsv str writecsv,"t_test <- read.csv(""../input/test.csv"", header = T)
t_train <- read.csv(""../input/train.csv"", header = T)
t_train$Survived_ <- as.factor(with(t_train, ifelse(Survived == ""1"", ""Survived"", ifelse(Survived == 0, ""Died"", ""N/A""))))
t_test[, c(""Survived"", ""Survived_"")] <- NA
t_full <- rbind(t_train, t_test)
str(t_full)
prop.table(table(t_train$Survived_))
prop.table(table(t_train$Survived_[which(t_train$Sex == ""female"")]))
sapply(t_full, function(x) sum(is.na(x)))
sapply(t_full, function(x) sum((x) == """"))
t_full[is.na(t_full$Fare), ]
library(ggplot2)
library(gridExtra)
library(dplyr)
ggplot(t_full, aes(factor(Embarked), Fare, fill = factor(Pclass))) + geom_boxplot() + ggtitle(""Fare by Embarked and Pclass"")
t_full$Fare[is.na(t_full$Fare)] <- median(t_full$Fare[which(t_full$Pclass == ""3"" & t_full$Embarked == ""S"")], na.rm = T)
t_full[t_full[, ""Embarked""] == """", ]
t_full$Name <- as.character(t_full$Name)
str <- grep(""George Nelson"", t_full$Name, perl = T)
select_row <- t_full[str, c(""Name"", ""Embarked"")]
select_row
E_F <- with(t_full[t_full$Fare < 500, ], aggregate(Fare, list(Embarked = Embarked, Pclass = Pclass), mean, na.rm = T))
E_F
t_full$Embarked[c(62, 830)] = ""S""
t_full$Embarked <- factor(t_full$Embarked)
library(mice)
library(lattice)
imp_ <- mice(t_full[, c(""Pclass"", ""Sex"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked"", ""Age"")], m = 5, method = ""pmm"", seed = 500)
print(imp_)
p1 <- xyplot(imp_, Age ~ Pclass, pch = 20, cex = 1.4)
p2 <- densityplot(imp_)
grid.arrange(p1, p2, nrow = 1, ncol = 2)
stripplot(imp_, pch = 20, cex = 1.2)
imp_output1 <- complete(imp_, 1)
imp_output2 <- complete(imp_, 2)
imp_output3 <- complete(imp_, 3)
imp_output4 <- complete(imp_, 4)
imp_output5 <- complete(imp_, 5)
par(mfrow = c(2, 3))
hist(t_full$Age, main = ""Original Age"", xlab = ""Age"", col = ""blue"")
hist(imp_output1$Age, main = ""Imputed1 Age"", xlab = ""Age"", col = ""pink"")
hist(imp_output2$Age, main = ""Imputed2 Age"", xlab = ""Age"", col = ""pink"")
hist(imp_output3$Age, main = ""Imputed3 Age"", xlab = ""Age"", col = ""pink"")
hist(imp_output4$Age, main = ""Imputed4 Age"", xlab = ""Age"", col = ""pink"")
hist(imp_output5$Age, main = ""Imputed5 Age"", xlab = ""Age"", col = ""pink"")
t_full$Age <- imp_output2$Age
child <- with(t_full, ifelse(Age < 18, ""Y"", ""N""))
t_full$Child <- as.factor(child)
name <- data.frame(do.call(rbind, strsplit(as.vector(t_full$Name), split = ""[,.]"")))
head(name)
t_full$Title <- sub("" "", """", name$X2)
H_title <- c(""Capt"", ""Col"", ""Don"", ""Dona"", ""Dr"", ""Jonkheer"", ""Lady"", ""Major"", ""Rev"", ""Sir"", ""the Countess"")
O_title <- c(""Master"", ""Miss"", ""Mlle"", ""Mme"", ""Mr"", ""Mrs"", ""Ms"", ""Mrs"", ""Ms"")
Title <- with(t_full, ifelse(Title %in% H_title, ""Honorific_title"", ifelse(Title %in% O_title, ""Ordinal_title"", ""other"")))
t_full$Title <- as.factor(Title)
prop.table(table(t_full$Survived_, t_full$Title), 2)
library(reshape2)
library(scales)
t_train <- t_full[!is.na(t_full$Survived), ]
t_test <- t_full[is.na(t_full$Survived), ]
attach(t_train)
Gender_S <- melt(prop.table(table(Sex, Survived_), 1))
Child_S <- melt(prop.table(table(Child, Survived_), 1))
Title_S <- with(t_train, melt(prop.table(table(Title, Survived_), 1)))
Pclass_S <- melt(prop.table(table(Pclass, Survived_), 1))
Embarked_S <- melt(prop.table(table(Embarked, Survived_), 1))
SibSp_S <- with(t_train, melt(prop.table(table(SibSp, Survived_), 1)))
p1 <- ggplot(Gender_S) + geom_bar(aes(Sex, value, fill = factor(Survived_)), stat = ""identity"") + ggtitle(""Gender vs. Survived"") + xlab("""") + ylab(""%"")
p2 <- ggplot(Child_S) + geom_bar(aes(Child, value, fill = factor(Survived_)), stat = ""identity"") + ggtitle(""Child vs. Survived"") + xlab("""") + ylab(""%"")
p3 <- ggplot(Title_S) + geom_bar(aes(Title, value, fill = factor(Survived_)), stat = ""identity"") + ggtitle(""Title vs. Survived"") + xlab("""") + ylab(""%"")
p4 <- ggplot(Pclass_S) + geom_bar(aes(Pclass, value, fill = factor(Survived_)), stat = ""identity"") + ggtitle(""Pclass vs. Survived"") + xlab("""") + ylab(""%"")
p5 <- ggplot(Embarked_S) + geom_bar(aes(Embarked, value, fill = factor(Survived_)), stat = ""identity"") + ggtitle(""Embarked vs. Survived"") + xlab("""") + ylab(""%"")
p6 <- ggplot(SibSp_S) + geom_bar(aes(SibSp, value, fill = factor(Survived_)), stat = ""identity"") + ggtitle(""SibSp vs. Survived"") + xlab("""") + ylab(""%"")
p7 <- ggplot(t_train, aes(x = Age, fill = factor(Survived_))) + geom_histogram(position = ""dodge"", binwidth = 1.5) + ggtitle(""Age vs. Survived"") + xlab(""Age"")
p8 <- ggplot(t_train[Fare < 500, ], aes(factor(Survived), Fare, fill = factor(Survived_))) + geom_boxplot() + ggtitle(""Fare(less than 500) vs. Survived"") + xlab("""")
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2)
grid.arrange(p5, p6, p7, p8, nrow = 2, ncol = 2)
a <- prop.table(table(Sex, Survived_, Embarked), c(1, 3))
b <- melt(a)
b$Freq <- paste(round(b$value * 100, digits = 1), ""%"", sep = """")
p9 <- ggplot(b, aes(x = Embarked, y = value, fill = factor(Survived_))) + geom_bar(stat = ""identity"") + facet_wrap(~Sex, ncol = 2) + ggtitle(""Survival on Gender and Embarked"") + xlab(""Embarked"") + ylab(""%"")
p9
b2 <- melt(prop.table(table(Sex, Survived, Pclass), c(1, 3)))
b2$Freq <- paste(round(b2$value * 100, digits = 1), ""%"", sep = """")
p10 <- ggplot(b2, aes(x = Pclass, y = value, fill = factor(Survived))) + geom_bar(stat = ""identity"") + facet_wrap(~Sex, ncol = 2) + ggtitle(""Survival on Gender and Class"") + xlab(""Pclass"") + ylab(""%"")
p10
set.seed(100)
dt <- sample(nrow(t_train), nrow(t_train) * 0.8)
t_train_model <- t_train[dt, ]
t_train_test <- t_train[-dt, ]
library(rpart)
library(rpart.plot)
set.seed(231)
tree.train <- rpart(factor(Survived_) ~ Pclass + Sex + Age + Child + SibSp + Parch + Fare + Embarked + Title, data = t_train_model, method = ""class"")
par(mfrow = c(1, 1))
rpart.plot(tree.train, box.col = c(""#FF6666"", ""#33CCCC"")[tree.train$frame$yval], cex = 0.8)
tree.train$cptable
tree.prun <- prune(tree.train, cp = tree.train$cptable[which.min(tree.train$cptable[, ""xerror""]), ""CP""])
pr.yhat = predict(tree.prun, newdata = t_train_test, type = ""class"")
sum(t_train_test$Survived_ == pr.yhat)/nrow(t_train_test)
library(randomForest)
set.seed(122)
rf.train <- randomForest(factor(Survived_) ~ Pclass + Sex + Age + Child + SibSp + Parch + Fare + Embarked + Title, data = t_train_model, mtry = 3, importance = TRUE)
plot(rf.train)
legend(""topright"", colnames(rf.train$err.rate), col = 1:3, fill = 1:3)
varImpPlot(rf.train)
rf.yhat = predict(rf.train, newdata = t_train_test, type = ""class"")
sum(t_train_test$Survived_ == rf.yhat)/nrow(t_train_test)
set.seed(221)
bag.train <- randomForest(factor(Survived) ~ Pclass + Sex + Age + Child + SibSp + Parch + Fare + Embarked + Title, data = t_train_model, mtry = 9, importance = TRUE)
plot(bag.train)
legend(""topright"", colnames(rf.train$err.rate), col = 1:3, fill = 1:3)
varImpPlot(bag.train)
bag.yhat = predict(bag.train, newdata = t_train_test, type = ""class"")
sum(t_train_test$Survived == bag.yhat)/nrow(t_train_test)
set.seed(122)
rf.train <- randomForest(factor(Survived) ~ Pclass + Sex + Age + Child + SibSp + Parch + Fare + Embarked + Title, data = t_train, mtry = 3, importance = TRUE)
rf.yhat = predict(rf.train, newdata = t_test, type = ""class"")
Prediction <- data.frame(PassengerID = t_test$PassengerId, Survived = rf.yhat)
write.csv(Prediction, file = ""rf_prediction.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,1,0,0,0,0
234,ammara-titanic-competition-script-using-rf-2,0.7490000000000001,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.factor', 'c', 'data.frame', 'factor', 'is.na', 'library', 'paste', 'rbind', 'return', 'sapply', 'set.seed', 'strsplit', 'sub', 'randomForest', 'varImpPlot', 'rpart', 'median', 'predict', 'read.csv', 'write.csv']","['randomForest', 'rpart', 'base']",3.6690070629119904,"['median', 'as.character', 'sub', 'is.na', 'rpart', 'as.factor', 'sapply', 'varImpPlot', 'set.seed', 'factor', 'read.csv', 'randomForest', 'return', 'c', 'rbind', 'paste', 'predict', 'write.csv', 'data.frame', 'strsplit', 'user defined', 'library']",[],"['alejandrorivas-titanic-beginners-principiantes-espa-ol', 'ammara-titanic-competition-using-boosting', 'jmercer187-fork-of-titanic2', 'mmaguero-titanic-majority-vote-of-ridge-rf-and-gbm', 'byrony-titanic-majority-vote-of-ridge-rf-and-gbm', 'aravind5-titanic', 'yugrao-titanic2', 'yugrao-titanic', 'aravind5-kaggle-titanic', 'ccheng2016-titanic-survival']","[0.9469493749543024, 0.937107483825739, 0.9285357558981081, 0.8393726436010709, 0.8393726436010709, 0.8256882437749873, 0.8256882437749873, 0.8256882437749873, 0.8256882437749873, 0.8025047964466487]","{'character(0)': ['feature_eng'], 'package:base': ['as.character', 'as.factor', 'c', 'data.frame', 'factor', 'is.na', 'library', 'paste', 'rbind', 'return', 'sapply', 'set.seed', 'strsplit', 'sub'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:rpart': ['rpart'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""feature_eng""], ""package:base"": [""as.character"", ""as.factor"", ""c"", ""data.frame"", ""factor"", ""is.na"", ""library"", ""paste"", ""rbind"", ""return"", ""sapply"", ""set.seed"", ""strsplit"", ""sub""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:rpart"": [""rpart""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 featureeng packagebase ascharacter asfactor c dataframe factor isna library paste rbind return sapply setseed strsplit sub packagerandomForest randomForest varImpPlot packagerpart rpart packagestats median predict packageutils readcsv writecsv,"library(randomForest)
library(rpart)
set.seed(415)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
feature_eng <- function(train_df, test_df) {
    test_df$Survived <- NA
    combi <- rbind(train_df, test_df)
    combi$Name <- as.character(combi$Name)
    combi$Title <- sapply(combi$Name, FUN = function(x) {
        strsplit(x, split = ""[,.]"")[[1]][2]
    })
    combi$Title <- sub("" "", """", combi$Title)
    combi$Title[combi$Title %in% c(""Mme"", ""Mlle"")] <- ""Mlle""
    combi$Title[combi$Title %in% c(""Capt"", ""Don"", ""Major"", ""Sir"")] <- ""Sir""
    combi$Title[combi$Title %in% c(""Dona"", ""Lady"", ""the Countess"", ""Jonkheer"")] <- ""Lady""
    combi$Title <- factor(combi$Title)
    combi$FamilySize <- combi$SibSp + combi$Parch + 1
    combi$Surname <- sapply(combi$Name, FUN = function(x) {
        strsplit(x, split = ""[,.]"")[[1]][1]
    })
    combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep = """")
    combi$FamilyID[combi$FamilySize <= 2] <- ""Small""
    combi$FamilyID <- factor(combi$FamilyID)
    Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize, data = combi[!is.na(combi$Age), ], method = ""anova"")
    combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age), ])
    combi$Embarked[c(62, 830)] = ""S""
    combi$Embarked <- factor(combi$Embarked)
    combi$Fare[1044] <- median(combi$Fare, na.rm = TRUE)
    combi$FamilyID2 <- combi$FamilyID
    combi$FamilyID2 <- as.character(combi$FamilyID2)
    combi$FamilyID2[combi$FamilySize <= 3] <- ""Small""
    combi$FamilyID2 <- factor(combi$FamilyID2)
    return(combi)
}
data <- feature_eng(train, test)
train <- data[1:891, ]
test <- data[892:1309, ]
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID2, data = train, importance = TRUE, ntree = 2000)
varImpPlot(fit)
Prediction <- predict(fit, test)
submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
write.csv(submit, file = ""firstforest.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
235,mihaque313-first-submission-to-titanic-problem,0.7440000000000001,"['data.frame', 'library', 'read_csv', 'write.csv']","['readr', 'base']",0.448981046676636,"['read_csv', 'data.frame', 'write.csv', 'library']",[],"['scout16-titanic-disaster-in-r', 'sawajid-titanic-test', 'zhaotianjing-titanic', 'jerlinraj-titanic-machine-learning-from-disaster', 'sudheer464-prediction-1-on-titanic-dataset', 'amodi8-titanic-exploring-survival-using-machine-learning', 'lagprophet-titanic', 'stevencahill-titanic-machine-learning-from-disaster', 'lizpund-titanic-competition-kernel', 'ivanbaj-part-2-titanic-encounters-vowpal-wabbit-and-r']","[0.6475442674129269, 0.6086455979533469, 0.6054393218208189, 0.5890918320649003, 0.58368465266433, 0.486022351545455, 0.46747809384401384, 0.4361946809909503, 0.365374973291541, 0.35996627387706215]","{'package:base': ['data.frame', 'library'], 'package:readr': ['read_csv'], 'package:utils': ['write.csv']}","{""package:base"": [""data.frame"", ""library""], ""package:readr"": [""read_csv""], ""package:utils"": [""write.csv""]}",packagebase dataframe library packagereadr readcsv packageutils writecsv,"library(readr)
train <- read_csv(""../input/train.csv"")
test <- read_csv(""../input/test.csv"")
test$Survived <- 0
test$Survived[test$Sex == ""female""] <- 1
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = ""Result.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,0,0,0,0,0
236,vyordanov-titanic-disaster-logistic-regression-0-7655,0.7490000000000001,"['user defined', 'user defined', 'user defined', 'as.character', 'as.factor', 'c', 'data.frame', 'factor', 'is.na', 'library', 'round', 'subset', 'summary', 'table', 'aes', 'facet_grid', 'geom_histogram', 'ggplot', 'complete', 'mice', 'glm', 'predict', 'read.csv', 'str', 'write.csv']","['ggplot2', 'mice', 'base']",3.87580299377441,"['complete', 'as.character', 'subset', 'glm', 'is.na', 'as.factor', 'summary', 'round', 'mice', 'geom_histogram', 'str', 'factor', 'read.csv', 'table', 'c', 'aes', 'predict', 'write.csv', 'data.frame', 'ggplot', 'user defined', 'library', 'facet_grid']",[],"['dascanvas-titanic-random-forest', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'devanshugupta27-predicting-the-titanic-survival-rate', 'erskumars-titanic-survival-eda-and-survival-rate-prediction', 'liudj2008-fork-of-titanic', 'liudj2008-titanic', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'anweshaghosh-titanic-forkofmultiplescripts-r']","[0.2647143115841338, 0.22184205619233863, 0.22184205619233863, 0.22047395108077814, 0.21949893967790823, 0.21087311449842072, 0.21046604281124368, 0.20631595895010238, 0.20631595895010238, 0.20533665194999287]","{'character(0)': ['set'], 'package:base': ['as.character', 'as.factor', 'c', 'data.frame', 'factor', 'is.na', 'library', 'round', 'subset', 'summary', 'table'], 'package:ggplot2': ['aes', 'facet_grid', 'geom_histogram', 'ggplot'], 'package:mice': ['complete', 'mice'], 'package:stats': ['glm', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""character(0)"": [""set""], ""package:base"": [""as.character"", ""as.factor"", ""c"", ""data.frame"", ""factor"", ""is.na"", ""library"", ""round"", ""subset"", ""summary"", ""table""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""geom_histogram"", ""ggplot""], ""package:mice"": [""complete"", ""mice""], ""package:stats"": [""glm"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",character0 set packagebase ascharacter asfactor c dataframe factor isna library round subset summary table packageggplot2 aes facetgrid geomhistogram ggplot packagemice complete mice packagestats glm predict packageutils readcsv str writecsv,"knitr::opts_chunk$set(echo = TRUE)
train = read.csv(""../input/train.csv"", stringsAsFactors = F)
test = read.csv(""../input/test.csv"", stringsAsFactors = F)
str(train)
train$Survived = as.factor(as.character(train$Survived))
train$Pclass = as.factor(as.character(train$Pclass))
train$Sex = as.factor(as.character(train$Sex))
train$Embarked = as.factor(as.character(train$Embarked))
test$Pclass = as.factor(as.character(test$Pclass))
test$Sex = as.factor(as.character(test$Sex))
test$Embarked = as.factor(as.character(test$Embarked))
summary(train)
missing = subset(train, is.na(Age))
summary(missing)
library(ggplot2)
ggplot() + geom_histogram(data = train, mapping = aes(x = Fare), fill = ""blue"", bins = 5) + geom_histogram(data = missing, mapping = aes(x = Fare), fill = ""red"", bins = 5) + facet_grid(. ~ Pclass)
table(missing$Pclass, missing$Sex)
library(mice)
imputed = complete(mice(train, m = 5, maxit = 50, meth = ""pmm"", seed = 500))
ggplot() + geom_histogram(data = imputed, mapping = aes(x = Age), fill = ""red"", bins = 10) + geom_histogram(data = train, mapping = aes(x = Age), fill = ""black"", bins = 10, alpha = 0.4) + facet_grid(. ~ Sex)
table(train$Survived)
ggplot() + geom_histogram(data = imputed, mapping = aes(x = Survived, fill = factor(Sex)), alpha = 0.8, stat = ""count"")
ggplot() + geom_histogram(data = imputed, mapping = aes(x = Age, fill = factor(Survived)), bins = 10) + facet_grid(. ~ Sex)
ggplot() + geom_histogram(data = imputed, mapping = aes(x = Pclass, fill = factor(Survived)), stat = ""count"") + facet_grid(. ~ Sex)
ggplot() + geom_histogram(data = imputed, mapping = aes(x = SibSp, fill = factor(Survived)), stat = ""count"") + facet_grid(. ~ Sex)
ggplot() + geom_histogram(data = imputed, mapping = aes(x = Parch, fill = factor(Survived)), stat = ""count"") + facet_grid(. ~ Sex)
ggplot() + geom_histogram(data = imputed, mapping = aes(x = Embarked, fill = factor(Survived)), stat = ""count"") + facet_grid(. ~ Sex)
imputed = subset(imputed, select = -c(PassengerId))
model1 = glm(Survived ~ Sex + Pclass + Embarked + SibSp, data = imputed, family = binomial)
predict1 = predict(model1, type = ""response"")
a = table(imputed$Survived, predict1 >= 0.5)
TP = a[2, 2]
TN = a[1, 1]
FP = a[1, 2]
FN = a[2, 1]
sensitivity = TP/(TP + FN)
specificity = TN/(TN + FN)
accuracy = (TN + TP)/(TN + TP + FP + FN)
prediction <- predict(model1, newdata = test, type = ""response"")
solution <- data.frame(PassengerID = test$PassengerId, Survived = round(prediction, 0))
write.csv(solution, file = ""model1_Solution.csv"", row.names = F)",0,0,0,1,0,0,0,0,0,0,0,0,0,0
237,jww001-exploring-survival-on-the-titanicqw,0.737,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",1.81698226928711,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['jww001-exploring-survival-on-the-titanicqw', 'mira5b-exploring-survival-on-the-titanic', 'rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic', 'datascikrid-exploring-survival-on-the-titanic']","[0.9999999999999999, 0.9971822267097548, 0.9971593473386299, 0.9971593473386299, 0.9971593473386299, 0.9971593473386299, 0.9971593473386299, 0.9971593473386299, 0.9971593473386299, 0.9971593473386299]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"", ""Parch"", ""SibSp"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""Ticket"", ""Cabin"", ""Family"", ""Survived"", ""Parch"", ""SibSp"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Original Age Distribution"", col = ""yellow"", ylim = c(0, 0.04))
hist(full$Age, freq = F, main = ""Mice Age Distribution"", col = ""Orange"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
238,petenice-titanickernel,0.5670000000000001,"['vars', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.data.frame', 'as.factor', 'c', 'colnames', 'grepl', 'gsub', 'ifelse', 'is.na', 'length', 'library', 'merge', 'rbind', 'round', 'sample', 'set.seed', 'subset', 'unique', 'which', 'count', 'group_by', 'group_by_at', 'mutate', 'n', 'select', 'trim', 'rpart', 'median', 'predict', 'read.csv', 'write.csv']","['caret', 'randomForest', 'lava', 'dplyr', 'rpart', 'ggplot2', 'data.table', 'xgboost', 'base']",3.79954481124878,"['median', 'merge', 'which', 'as.character', 'subset', 'is.na', 'trim', 'count', 'rpart', 'as.factor', 'round', 'n', 'set.seed', 'gsub', 'colnames', 'unique', 'length', 'group_by_at', 'read.csv', 'as.data.frame', 'group_by', 'c', 'mutate', 'rbind', 'sample', 'ifelse', 'predict', 'write.csv', 'grepl', 'user defined', 'library', 'vars', 'select']",[],"['tetyama-trial-titanic', 'venkatko-titanic-survival1', 'researchbigd-titanic-forkedfrommeganscript', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'hemingwei-titanic-r-solution-from-megan-risdal', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'allanwbrooks-exploring-survival-on-the-titanic', 'abedben-exploring-survival-on-the-titanic', 'bonesaw98616-exploring-survival-on-the-titanic']","[0.15282291510584037, 0.15277975953421039, 0.15194981341387748, 0.15191944733049784, 0.15191944733049784, 0.15178468820064014, 0.15174614207585493, 0.1513476183314268, 0.15131430453515185, 0.15083457013071616]","{'c(""package:dplyr"", ""package:lava"", ""package:ggplot2"")': ['vars'], 'character(0)': ['AdjustGroupNumber'], 'package:base': ['as.character', 'as.data.frame', 'as.factor', 'c', 'colnames', 'grepl', 'gsub', 'ifelse', 'is.na', 'length', 'library', 'merge', 'rbind', 'round', 'sample', 'set.seed', 'subset', 'unique', 'which'], 'package:dplyr': ['count', 'group_by', 'group_by_at', 'mutate', 'n', 'select'], 'package:lava': ['trim'], 'package:rpart': ['rpart'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:dplyr"", ""package:lava"", ""package:ggplot2"")"": [""vars""], ""character(0)"": [""AdjustGroupNumber""], ""package:base"": [""as.character"", ""as.data.frame"", ""as.factor"", ""c"", ""colnames"", ""grepl"", ""gsub"", ""ifelse"", ""is.na"", ""length"", ""library"", ""merge"", ""rbind"", ""round"", ""sample"", ""set.seed"", ""subset"", ""unique"", ""which""], ""package:dplyr"": [""count"", ""group_by"", ""group_by_at"", ""mutate"", ""n"", ""select""], ""package:lava"": [""trim""], ""package:rpart"": [""rpart""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackagedplyr packagelava packageggplot2 vars character0 AdjustGroupNumber packagebase ascharacter asdataframe asfactor c colnames grepl gsub ifelse isna length library merge rbind round sample setseed subset unique which packagedplyr count groupby groupbyat mutate n select packagelava trim packagerpart rpart packagestats median predict packageutils readcsv writecsv,"library(caret)
library(randomForest)
library(lava)
library(dplyr)
library(rpart)
library(ggplot2)
library(data.table)
library(xgboost)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
test$Survived = NA
full = rbind(train, test)
full$LastName <- gsub(""^(.*), .*?\\..*$"", ""\\1"", full$Name)
full$Title <- trim(gsub(""^.*,(.*?)\\..*$"", ""\\1"", full$Name))
full$Title <- lava::trim(full$Title)
full$FirstName <- gsub(""^.*,.*?\\.[[:space:]]([[:graph:]]*).*$"", ""\\1"", full$Name)
full$FirstName <- gsub(""[\\(|\\)]"", """", full$FirstName)
full$OtherName <- ifelse(grepl(""^.+\\({1}.+[[:space:]](\\w*)\\){1}$"", full$Name), gsub(""^.+\\({1}.+[[:space:]](\\w*)\\){1}$"", ""\\1"", full$Name), """")
set.seed(1232313)
full$Ticket <- as.character(full$Ticket)
InGroups <- full %>% group_by_at(vars(LastName, Ticket)) %>% dplyr::mutate(GroupNumber = sample(1:1e+06, 1))
set.seed(1232313)
InGroups <- full %>% group_by(Ticket) %>% dplyr::mutate(GroupNumber = sample(1:1e+06, 1))
AdjustGroupNumber <- function(GroupNumber, LastName) {
    NumGroupNumbers <- length(unique(GroupNumber))
    if (NumGroupNumbers == 1) {
        GroupNumber
    }
    else {
        newGroupNumber = sample(1:1e+06, 1)
        gn <- unique(GroupNumber)
        for (each in gn) {
            InGroups[which(InGroups$GroupNumber == each), ]$GroupNumber <- newGroupNumber
        }
        newGroupNumber
    }
}
InGroups <- InGroups %>% group_by(LastName) %>% mutate(GroupNumber = AdjustGroupNumber(GroupNumber, LastName))
InGroups <- InGroups %>% group_by(GroupNumber) %>% mutate(NumInGroupNumber = n())
InGroups <- InGroups %>% group_by_at(vars(SibSp, Parch, Sex)) %>% mutate(Age = ifelse(is.na(Age), median(Age, na.rm = TRUE), Age), ImputedAge = median(Age, na.rm = TRUE))
ticketNumbers <- plyr::count(InGroups, c(""Ticket""))
colnames(ticketNumbers)[2] <- ""PeoplePerTicket""
InGroups <- merge(InGroups, ticketNumbers, by = ""Ticket"", all.x = TRUE)
InGroups <- InGroups %>% dplyr::mutate(FarePerPerson = Fare/PeoplePerTicket)
MedianFare <- median(subset(InGroups, Pclass == 3 & FarePerPerson < 19)$FarePerPerson)
InGroups$Fare[is.na(InGroups$Fare)] = MedianFare
InGroups$FarePerPerson[is.na(InGroups$FarePerPerson)] = MedianFare
InGroups$Pclass <- as.factor(InGroups$Pclass)
InGroups$Survived <- as.factor(InGroups$Survived)
InGroups$GroupNumber <- as.factor(InGroups$GroupNumber)
test <- InGroups[is.na(InGroups$Survived), ]
train <- InGroups[!is.na(InGroups$Survived), ]
test$Set <- ""test""
train$Set <- ""train""
fit <- rpart(Survived ~ Pclass + Sex + Age + NumInGroupNumber + FarePerPerson, data = train)
predict <- predict(fit, test)
predict <- as.data.frame(predict)
test$Survived <- round(predict$""1"")
output <- test %>% select(PassengerId, Survived)
write.csv(output, ""output.csv"", row.names = FALSE)",1,0,1,0,0,0,0,1,1,1,0,0,0,0
239,adambarnes-titanic-first-random-forest,0.758,"['filter', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'c', 'data.frame', 'factor', 'gregexpr', 'gsub', 'is.na', 'library', 'mean', 'nrow', 'options', 'round', 'rownames', 'substr', 'sum', 'unlist', 'anti_join', 'bind_rows', 'group_by', 'if_else', 'left_join', 'mutate', 'select', 'summarize', 'aes', 'facet_grid', 'geom_bar', 'ggplot', 'scale_x_discrete', 'importance', 'randomForest', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['dplyr', 'ggplot2', 'randomForest', 'base']",1.96849679946899,"['gregexpr', 'nrow', 'unlist', 'mean', 'is.na', 'options', 'left_join', 'filter', 'round', 'importance', 'str', 'gsub', 'factor', 'if_else', 'geom_bar', 'summarize', 'read.csv', 'randomForest', 'group_by', 'scale_x_discrete', 'c', 'aes', 'mutate', 'sum', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'rownames', 'ggplot', 'head', 'substr', 'user defined', 'library', 'anti_join', 'select', 'facet_grid']",[],"['deltaforce126-titanic-randomforest', 'peggy88-titanic-data-eda-by-peggy', 'cdeotte-titanic-deep-net-0-82296', 'ablearcher-my-titanic', 'ccheng2016-titanic-survival', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic']","[0.19832908105323802, 0.18674156616346177, 0.1861639487605778, 0.14853442112155216, 0.1456705359057534, 0.14262192041059224, 0.14262192041059224, 0.1414483310657859, 0.1414483310657859, 0.14096291794462262]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'character(0)': ['ageClass'], 'package:base': ['c', 'data.frame', 'factor', 'gregexpr', 'gsub', 'is.na', 'library', 'mean', 'nrow', 'options', 'round', 'rownames', 'substr', 'sum', 'unlist'], 'package:dplyr': ['anti_join', 'bind_rows', 'group_by', 'if_else', 'left_join', 'mutate', 'select', 'summarize'], 'package:ggplot2': ['aes', 'facet_grid', 'geom_bar', 'ggplot', 'scale_x_discrete'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""character(0)"": [""ageClass""], ""package:base"": [""c"", ""data.frame"", ""factor"", ""gregexpr"", ""gsub"", ""is.na"", ""library"", ""mean"", ""nrow"", ""options"", ""round"", ""rownames"", ""substr"", ""sum"", ""unlist""], ""package:dplyr"": [""anti_join"", ""bind_rows"", ""group_by"", ""if_else"", ""left_join"", ""mutate"", ""select"", ""summarize""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""geom_bar"", ""ggplot"", ""scale_x_discrete""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter character0 ageClass packagebase c dataframe factor gregexpr gsub isna library mean nrow options round rownames substr sum unlist packagedplyr antijoin bindrows groupby ifelse leftjoin mutate select summarize packageggplot2 aes facetgrid geombar ggplot scalexdiscrete packagerandomForest importance randomForest packagestats predict packageutils head readcsv str writecsv,"options(stringsAsFactors = FALSE)
library(dplyr)
library(ggplot2)
trainData <- read.csv(""../input/train.csv"")
testData <- read.csv(""../input/test.csv"")
fullData <- trainData %>% bind_rows(testData)
str(trainData)
ageClass <- function(Age) {
    if_else(Age < 10, ""0-9"", if_else(Age < 20, ""10-19"", if_else(Age < 30, ""20-29"", if_else(Age < 40, ""30-39"", if_else(Age < 50, ""40-49"", if_else(Age < 60, ""50-59"", ""60+""))))))
}
workData <- trainData %>% bind_rows(testData) %>% mutate(AgeClass = ageClass(Age), CabinClass = substr(Cabin, 1, 1), Title = substr(Name, unlist(gregexpr("","", Name)) + 2, unlist(gregexpr("","", Name)) + 4), Title = gsub(""\\."", """", Title), Title = factor(gsub("" "", """", Title)), Sex = factor(Sex), CabinClass = factor(CabinClass), Embarked = factor(Embarked), Survived = factor(Survived), Pclass = factor(Pclass)) %>% anti_join(testData, by = ""PassengerId"")
str(workData)
ggplot(workData, aes(x = Sex)) + geom_bar(aes(fill = factor(Survived))) + scale_x_discrete(labels = c(""F"", ""M"")) + facet_grid(Pclass ~ AgeClass)
avAges <- workData %>% filter(!is.na(Age)) %>% group_by(Sex, Pclass, Parch) %>% summarize(AvAge = round(mean(Age), 0))
avFare <- workData %>% filter(!is.na(Fare)) %>% group_by(Pclass, Embarked) %>% summarize(AvFare = mean(Fare))
head(avFare, 20)
workData <- workData %>% left_join(avAges, by = c(Sex = ""Sex"", Pclass = ""Pclass"", Parch = ""Parch"")) %>% left_join(avFare, by = c(Pclass = ""Pclass"", Embarked = ""Embarked"")) %>% mutate(Age = if_else(is.na(Age), round(AvAge, 0), Age), AgeClass = factor(ageClass(Age)), Fare = if_else(is.na(Fare), round(AvFare, 0), Fare))
head(workData)
rownames(workData) <- NULL
library(randomForest)
forData <- workData %>% select(Survived, Sex, Fare, Pclass, Age, Title, SibSp, Parch, Embarked)
rf1 <- randomForest(Survived ~ ., data = forData, mtry = 2, ntree = 50, importance = TRUE)
importance(rf1, type = 1)
resultSet <- data.frame(ID = workData$PassengerId, Act = workData$Survived, Pred = predict(rf1, workData))
sum(resultSet$Act == resultSet$Pred)/nrow(resultSet)
avAgesTest <- fullData %>% filter(!is.na(Age)) %>% group_by(Pclass, Parch) %>% summarize(AvAge = mean(Age))
avFareTest <- testData %>% filter(!is.na(Fare)) %>% group_by(Pclass, Embarked) %>% summarize(AvFare = mean(Fare))
modTestData <- testData %>% bind_rows(trainData) %>% left_join(avAgesTest, by = c(Pclass = ""Pclass"", Parch = ""Parch"")) %>% left_join(avFareTest, by = c(Pclass = ""Pclass"", Embarked = ""Embarked"")) %>% mutate(Age = if_else(is.na(Age), round(AvAge, 0), Age), Age = if_else(is.na(Age), mean(Age, na.rm = TRUE), Age), Fare = if_else(is.na(Fare), round(AvFare, 0), Fare), AgeClass = ageClass(Age), CabinClass = substr(Cabin, 1, 1), Title = substr(Name, unlist(gregexpr("","", Name)) + 2, unlist(gregexpr("","", Name)) + 
    4), Title = gsub(""\\."", """", Title), Title = factor(gsub("" "", """", Title)), Sex = factor(Sex), CabinClass = factor(CabinClass), Embarked = factor(Embarked), Pclass = factor(Pclass)) %>% anti_join(trainData, by = ""PassengerId"") %>% select(-Survived)
rownames(modTestData) <- NULL
submitData <- data.frame(PassengerId = modTestData$PassengerId, Survived = predict(rf1, modTestData), row.names = NULL)
str(submitData)
head(submitData)
write.csv(submitData, ""submission.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
240,skhawaja-titanic-disaster-survival-099,0.742,"['head', 'tail', 'predict', 'filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'reorder', 'read.csv', 'str', 'write.csv']","['mice', 'dplyr', 'randomForest', 'arulesViz', 'ggplot2', 'ggthemes', 'scales', 'base']",27.2206380367279,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'round', 'sapply', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'tail', 'mutate', 'paste', 'geom_vline', 'sum', 'predict', 'legend', 'plot', 'dollar_format', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'head', 'library', 'facet_grid']",[],"['lich070192-titanic-test', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'krupan-exploring-survival-on-the-titanic', 'vikramatjob-exploring-survival-on-the-titanic-var2', 'mhamano-titanic-r-script', 'bonesaw98616-exploring-survival-on-the-titanic', 'oreddo-exploring-survival-on-the-titanic', 'lucasguarisco-exploring-survival-on-the-titanic', 'mac4vity-exploring-survival-on-the-titanic', 'rayuga-exploring-survival-on-the-titanic']","[0.3575109880764195, 0.3422613276904166, 0.33644027754514066, 0.32021748727275723, 0.314389846938469, 0.31375696626444843, 0.3099943341285984, 0.3085180117150928, 0.3084802899545881, 0.3084723727722158]","{'c(""package:arules"", ""package:Matrix"", ""package:utils"")': ['head', 'tail'], 'c(""package:arules"", ""package:stats"")': ['predict'], 'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:arules"", ""package:Matrix"", ""package:utils"")"": [""head"", ""tail""], ""c(""package:arules"", ""package:stats"")"": [""predict""], ""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagearules packageMatrix packageutils head tail cpackagearules packagestats predict cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median reorder packageutils readcsv str writecsv,"library(mice)
library(dplyr)
library(randomForest)
library(arulesViz)
library(ggplot2)
library(ggthemes)
library(scales)
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
head(train)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
head(test)
t <- bind_rows(train, test)
tail(t)
t[890, ]
t[980, ]
str(t)
t$Title <- gsub(""(.*, )|(\\..*)"", """", t$Name)
table(t$Sex, t$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
t$Title[t$Title == ""Mlle""] <- ""Miss""
t$Title[t$Title == ""Ms""] <- ""Miss""
t$Title[t$Title == ""Mme""] <- ""Mrs""
t$Title[t$Title %in% rare_title] <- ""Rare Title""
table(t$Sex, t$Title)
t$Surname <- sapply(t$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have "", nlevels(factor(t$Surname)), "" unique Surnames onboard Titanic.""))
t$Fsize <- t$SibSp + t$Parch + 1
t$Family <- paste(t$Surname, t$Fsize, sep = ""_"")
par(mar = c(2, 2, 2, 1), mfrow = c(1, 1))
ggplot(t, aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
t$FsizeD[t$Fsize == 1] <- ""singleton""
t$FsizeD[t$Fsize < 5 & t$Fsize > 1] <- ""small""
t$FsizeD[t$Fsize > 4] <- ""large""
mosaicplot(table(t$FsizeD, t$Survived), main = ""Family Size by Survival"", shade = TRUE)
t$Cabin[1:50]
strsplit(t$Cabin[2], NULL)[[1]]
t$Deck <- factor(sapply(t$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
t[t$Embarked == """", ]
t[t$Ticket == 113572, ]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid $"", t[62, ""Fare""][[1]][1], ""and $"", t[830, ""Fare""][[1]][1], ""respectively and their classes are"", t[62, ""Pclass""][[1]][1], ""and"", t[830, ""Pclass""][[1]][1], "". So from where did they embark?""))
embark_fare <- t %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
t$Embarked[c(62, 830)] <- ""C""
t[t$Ticket == 113572, ]
t[1044, ]
ggplot(t[t$Pclass == ""3"" & t$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous() + theme_few()
t$Fare[1044] <- median(t[t$Pclass == ""3"" & t$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(t$Age))
fac_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
t[fac_vars] <- lapply(t[fac_vars], function(x) as.factor(x))
set.seed(11)
mice_mod <- mice(t[, !names(t) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(t$Age, freq = F, main = ""Age: Original Data"", col = ""blue"", ylim = c(0, 0.04), border = ""white"")
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""dodgerblue"", ylim = c(0, 0.04), border = ""white"")
t$Age <- mice_output$Age
sum(is.na(t$Age))
ggplot(t[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
t$AgeAC[t$Age < 18] <- ""Child""
t$AgeAC[t$Age >= 18] <- ""Adult""
table(t$AgeAC, t$Survived)
t$Mother <- ""Not Mother""
t$Mother[t$Sex == ""female"" & t$Parch > 0 & t$Age > 18 & t$Title != ""Miss""] <- ""Mother""
table(t$Mother, t$Survived)
t$AgeAC <- factor(t$AgeAC)
t$Mother <- factor(t$Mother)
md.pattern(t)
train <- t[1:891, ]
test <- t[892:1309, ]
set.seed(1942)
rf_m <- randomForest(factor(Survived) ~ Pclass + Sex + Age + AgeAC + SibSp + Parch + Fare + Embarked + Title + FsizeD + Mother, data = train)
plot(rf_m, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_m$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_m)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_m, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""titanic-survival-arkitekt.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
241,jkevin2010-improved-model-for-titanic-survival,0.754,"['data.frame', 'library', 'nrow', 'plot', 'text', 'fancyRpartPlot', 'rpart', 'rpart.control', 'predict', 'read.csv', 'str', 'write.csv']","['ggplot2', 'readr', 'rpart', 'rattle', 'rpart.plot', 'RColorBrewer', 'base']",0.9931600093841548,"['nrow', 'plot', 'predict', 'write.csv', 'rpart.control', 'data.frame', 'read.csv', 'rpart', 'library', 'text', 'str', 'fancyRpartPlot']",[],"['alexgomes3-titanic-with-r-datacamp-tutorial', 'jkevin2010-titanic-survival-using-decision-trees', 'researchbigd-titanic-r-researchbigd', 'srinivasarajui-srini-s-r-titanic-solution', 'zahraatashgahy-r-titanic-1', 'tsfitz-titanic', 'turntrout-titanic-data-exploration', 'goblin-titanic-test', 'lagprophet-titanic', 'danr87946-titanic-practice']","[0.7050415684576659, 0.539397570823222, 0.47159614198590255, 0.44472768521202877, 0.41379971261422915, 0.2857725327900777, 0.27435095211668165, 0.26915925017694087, 0.26839948508640166, 0.25383306993464305]","{'package:base': ['data.frame', 'library', 'nrow'], 'package:graphics': ['plot', 'text'], 'package:rattle': ['fancyRpartPlot'], 'package:rpart': ['rpart', 'rpart.control'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""data.frame"", ""library"", ""nrow""], ""package:graphics"": [""plot"", ""text""], ""package:rattle"": [""fancyRpartPlot""], ""package:rpart"": [""rpart"", ""rpart.control""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase dataframe library nrow packagegraphics plot text packagerattle fancyRpartPlot packagerpart rpart rpartcontrol packagestats predict packageutils readcsv str writecsv,"library(ggplot2)
library(readr)
library(rpart)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
str(train)
str(test)
my_tree_two <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = ""class"")
my_tree_three <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = ""class"", control = rpart.control(minsplit = 50, cp = 0))
plot(my_tree_three)
text(my_tree_three)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(my_tree_three)
my_prediction <- predict(my_tree_three, newdata = test, type = ""class"")
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
nrow(my_solution)
write.csv(my_solution, file = ""my_solution.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,1,0,0,0,0
242,athi94-a-beginner-s-stab-at-titanic,0.754,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'abs', 'as.character', 'as.data.frame.matrix', 'as.factor', 'as.numeric', 'c', 'cbind', 'ceiling', 'colnames', 'data.frame', 'dim', 'droplevels', 'duplicated', 'factor', 'ifelse', 'is.na', 'length', 'library', 'list', 'mean', 'names', 'nchar', 'nrow', 'rbind', 'rep', 'return', 'round', 'row.names', 'sapply', 'seq', 'seq_along', 'set.seed', 'sort', 'split', 'strsplit', 'subset', 'substr', 'sum', 'summary', 'table', 'trimws', 'unique', 'which', 'which.max', 'tune', 'aes', 'geom_bar', 'geom_col', 'geom_violin', 'ggplot', 'hist', 'legend', 'par', 'plot', 'randomForest', 'varImpPlot', 'melt', 'lm', 'na.omit', 'predict', 'residuals', 'rnorm', 'head', 'read.csv', 'str', 'write.csv']","['ggplot2', 'reshape2', 'e1071', 'randomForest', 'base']",10.744343996048,"['nrow', 'list', 'mean', 'which.max', 'split', 'nchar', 'which', 'as.character', 'residuals', 'is.na', 'duplicated', 'subset', 'as.data.frame.matrix', 'droplevels', 'seq_along', 'sort', 'names', 'melt', 'geom_col', 'lm', 'na.omit', 'as.factor', 'summary', 'round', 'sapply', 'rep', 'hist', 'varImpPlot', 'str', 'set.seed', 'factor', 'colnames', 'dim', 'unique', 'geom_bar', 'length', 'read.csv', 'table', 'par', 'return', 'randomForest', 'abs', 'c', 'row.names', 'aes', 'rbind', 'as.numeric', 'ifelse', 'sum', 'geom_violin', 'legend', 'seq', 'plot', 'predict', 'rnorm', 'data.frame', 'strsplit', 'ggplot', 'write.csv', 'head', 'substr', 'user defined', 'ceiling', 'library', 'trimws', 'cbind', 'tune']",[],"['monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'jacekpardyak-mytitanicscript', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'erskumars-titanic-survival-eda-and-survival-rate-prediction', 'tsfitz-titanic']","[0.08378464999143619, 0.08378464999143619, 0.07956685856424953, 0.07956685856424953, 0.07916531627732959, 0.07916531627732959, 0.07888568811574066, 0.07762427179145456, 0.07756173640431151, 0.07718008415685512]","{'character(0)': ['naSummary'], 'package:base': ['abs', 'as.character', 'as.data.frame.matrix', 'as.factor', 'as.numeric', 'c', 'cbind', 'ceiling', 'colnames', 'data.frame', 'dim', 'droplevels', 'duplicated', 'factor', 'ifelse', 'is.na', 'length', 'library', 'list', 'mean', 'names', 'nchar', 'nrow', 'rbind', 'rep', 'return', 'round', 'row.names', 'sapply', 'seq', 'seq_along', 'set.seed', 'sort', 'split', 'strsplit', 'subset', 'substr', 'sum', 'summary', 'table', 'trimws', 'unique', 'which', 'which.max'], 'package:e1071': ['tune'], 'package:ggplot2': ['aes', 'geom_bar', 'geom_col', 'geom_violin', 'ggplot'], 'package:graphics': ['hist', 'legend', 'par', 'plot'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:reshape2': ['melt'], 'package:stats': ['lm', 'na.omit', 'predict', 'residuals', 'rnorm'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""character(0)"": [""naSummary""], ""package:base"": [""abs"", ""as.character"", ""as.data.frame.matrix"", ""as.factor"", ""as.numeric"", ""c"", ""cbind"", ""ceiling"", ""colnames"", ""data.frame"", ""dim"", ""droplevels"", ""duplicated"", ""factor"", ""ifelse"", ""is.na"", ""length"", ""library"", ""list"", ""mean"", ""names"", ""nchar"", ""nrow"", ""rbind"", ""rep"", ""return"", ""round"", ""row.names"", ""sapply"", ""seq"", ""seq_along"", ""set.seed"", ""sort"", ""split"", ""strsplit"", ""subset"", ""substr"", ""sum"", ""summary"", ""table"", ""trimws"", ""unique"", ""which"", ""which.max""], ""package:e1071"": [""tune""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""geom_col"", ""geom_violin"", ""ggplot""], ""package:graphics"": [""hist"", ""legend"", ""par"", ""plot""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:reshape2"": [""melt""], ""package:stats"": [""lm"", ""na.omit"", ""predict"", ""residuals"", ""rnorm""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",character0 naSummary packagebase abs ascharacter asdataframematrix asfactor asnumeric c cbind ceiling colnames dataframe dim droplevels duplicated factor ifelse isna length library list mean names nchar nrow rbind rep return round rownames sapply seq seqalong setseed sort split strsplit subset substr sum summary table trimws unique which whichmax packagee1071 tune packageggplot2 aes geombar geomcol geomviolin ggplot packagegraphics hist legend par plot packagerandomForest randomForest varImpPlot packagereshape2 melt packagestats lm naomit predict residuals rnorm packageutils head readcsv str writecsv,"fr_train = read.csv(""../input/train.csv"", na.strings = """")
fr_test = read.csv(""../input/test.csv"", na.strings = """")
fr_test$Survived = rep(NA, nrow(fr_test))
fr_train$Set = rep(""train"", nrow(fr_train))
fr_test$Set = rep(""test"", nrow(fr_test))
fr_titanic = rbind(fr_train, fr_test)
dim(fr_train)
head(fr_train)
summary(fr_train)
naSummary = function(df) {
    naCount = sapply(df, function(col) {
        sum(is.na(col))
    })
    return(data.frame(naCount, naPc = naCount/nrow(df)))
}
naSummary(fr_titanic)
str(fr_titanic)
fr_titanic$Survived = as.factor(fr_titanic$Survived)
fr_titanic = subset(fr_titanic, select = -c(PassengerId))
str(fr_titanic)
mcl = fr_titanic$Embarked[which.max(fr_titanic$Embarked)]
fr_titanic$Embarked[which(is.na(fr_train$Embarked))] = mcl
naSummary(fr_titanic)
fr_titanic$Fare[which(is.na(fr_titanic$Fare))] = mean(fr_titanic$Fare, na.rm = TRUE)
naSummary(fr_titanic)
getTitle = function(name) {
    postcom = trimws(strsplit(as.character(name), "","")[[1]][2])
    title = strsplit(postcom, "" "")[[1]][1]
    return(substr(title, 1, nchar(title) - 1))
}
fr_titanic$Title = as.factor(sapply(fr_titanic$Name, getTitle))
fr_titanic = fr_titanic[c(""Survived"", ""Pclass"", ""Name"", ""Title"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Ticket"", ""Fare"", ""Cabin"", ""Embarked"", ""Set"")]
head(fr_titanic)
table(fr_titanic$Title)
mr_alias = c(""Dr"", ""Rev"", ""Major"", ""Col"", ""Jonkheer"", ""Don"", ""Sir"", ""Capt"")
mrs_alias = c(""Dona"", ""Lady"", ""Mme"", ""th"")
miss_alias = c(""Mlle"", ""Ms"")
fr_titanic$Title[which(fr_titanic$Title %in% mr_alias)] = ""Mr""
fr_titanic$Title[which(fr_titanic$Title %in% mrs_alias)] = ""Mrs""
fr_titanic$Title[which(fr_titanic$Title %in% miss_alias)] = ""Miss""
fr_titanic$Title = droplevels(fr_titanic$Title)
summary(fr_titanic$Title)
rr_train = subset(fr_titanic, select = -c(Survived, Name, Ticket, Cabin, Set))
rr_train = na.omit(rr_train)
head(rr_train)
lm.fit = lm(Age ~ ., data = rr_train)
summary(lm.fit)
plot(as.factor(rr_train$Pclass), rr_train$Age, xlab = ""Passenger Class"", ylab = ""Age"")
plot(as.factor(rr_train$SibSp), rr_train$Age, xlab = ""# siblings + spouses"", ylab = ""Age"")
lm.fit = lm(Age ~ Pclass + Title + SibSp + Embarked, data = rr_train)
summary(lm.fit)
missing_age_masters = which(fr_titanic$Title == ""Master"" & is.na(fr_titanic$Age))
fr_titanic[missing_age_masters, ]
set.seed(10)
det_imputed = predict(lm.fit, fr_titanic[which(is.na(fr_titanic$Age)), ])
random_imputed = rnorm(length(det_imputed), det_imputed, abs(residuals(lm.fit)))
det_imputed[which(det_imputed < 0)] = 1
det_imputed = round(det_imputed)
random_imputed[which(random_imputed < 0)] = 1
random_imputed = round(random_imputed)
par(mfrow = c(3, 1))
hist(rr_train$Age, breaks = 10, freq = F)
hist(det_imputed, breaks = 10, freq = F)
hist(random_imputed, breaks = 10, freq = F)
library(ggplot2)
kde_mat = rbind(cbind(rr_train$Age, rep(""Original"", length(rr_train$Age))), cbind(det_imputed, rep(""Deterministic Imputation"", length(det_imputed))), cbind(random_imputed, rep(""Randomised Imputation"", length(random_imputed))))
kde_df = data.frame(Age = as.numeric(kde_mat[, 1]), Source = as.factor(kde_mat[, 2]))
ggplot(kde_df, aes(x = Source, y = Age, fill = Source)) + geom_violin()
fr_titanic$Age[which(is.na(fr_titanic$Age))] = random_imputed
naSummary(fr_titanic)
fr_titanic[missing_age_masters, ]
library(reshape2)
fr_titanic$hasCabin = as.factor(!is.na(fr_titanic$Cabin))
Survived_Desc = ifelse(fr_titanic$Survived == 1, ""Survived"", ""Died"")
freq = table(fr_titanic$hasCabin, Survived_Desc)
freq_df = as.data.frame.matrix(freq)
freq_df = data.frame(Cabin = row.names(freq_df), freq_df)
freq_df = melt(freq_df, id.vars = ""Cabin"")
ggplot(freq_df, aes(x = Cabin, y = value)) + geom_bar(aes(fill = variable), position = ""dodge"", stat = ""identity"")
fr_titanic$Deck = sapply(fr_titanic$Cabin, function(cabin) {
    substr(as.character(cabin), 1, 1)
})
fr_titanic$Deck[which(is.na(fr_titanic$Deck))] = ""None""
fr_titanic$Deck = as.factor(fr_titanic$Deck)
summary(fr_titanic$Deck)
fr_titanic$Deck[which(fr_titanic$Deck == ""T"")] = as.factor(""None"")
fr_titanic$Deck = droplevels(fr_titanic$Deck)
freq = table(fr_titanic$Deck, Survived_Desc)
freq_df = as.data.frame.matrix(freq)
freq_df = data.frame(Deck = row.names(freq_df), freq_df)
freq_df = melt(freq_df, id.vars = ""Deck"")
ggplot(freq_df, aes(x = Deck, y = value)) + geom_bar(aes(fill = variable), position = ""dodge"", stat = ""identity"")
inGroup = as.factor(duplicated(fr_titanic$Ticket))
freq_df = as.data.frame.matrix(table(inGroup, Survived_Desc))
freq_df = data.frame(inGroup = row.names(freq_df), freq_df)
freq_df = melt(freq_df, id.vars = ""inGroup"")
ggplot(freq_df, aes(x = inGroup, y = value)) + geom_bar(aes(fill = variable), position = ""dodge"", stat = ""identity"")
fr_titanic$inGroup = inGroup
fr_train = fr_titanic[which(fr_titanic$Set == ""train""), ]
uniq_ages = sort(unique(fr_train$Age))
survival_rates_by_age = sapply(uniq_ages, function(age) {
    mean(fr_train[which(fr_train$Age == age), ]$Survived == 1)
})
uniq_ages
fr_train$Age = round(fr_train$Age)
uniq_ages = sort(unique(fr_train$Age))
survival_rates_by_age = sapply(uniq_ages, function(age) {
    selection = fr_train[which(fr_train$Age == age), ]$Survived
    mean(selection == 1)
})
age_surv_rate_df = data.frame(Age = uniq_ages, SurvivalRate = survival_rates_by_age)
ggplot(age_surv_rate_df, aes(x = Age, y = SurvivalRate)) + geom_col()
age_bins = split(uniq_ages, ceiling(seq_along(uniq_ages)/5))
binned_surv_rate = sapply(age_bins, function(bin) {
    mean(age_surv_rate_df[which(age_surv_rate_df$Age %in% bin), ]$SurvivalRate)
})
binned_age_surv_df = data.frame(AgeBin = factor(names(age_bins), levels = names(age_bins)), SurvivalRate = binned_surv_rate)
ggplot(binned_age_surv_df, aes(x = AgeBin, y = SurvivalRate)) + geom_col()
fr_titanic$AgeGroup = sapply(fr_titanic$Age, function(age) {
    if (age < 5) {
        return(1)
    }
    else if (age >= 5 && age < 18) {
        return(2)
    }
    else {
        return(3)
    }
})
table(as.factor(fr_titanic$AgeGroup))
fr_train = fr_titanic[which(fr_titanic$Set == ""train""), ]
fr_test = fr_titanic[which(fr_titanic$Set == ""test""), ]
fr_train = subset(fr_train, select = -c(Name, Ticket, Set, Cabin))
fr_test = subset(fr_test, select = -c(Name, Ticket, Set, Cabin, Survived))
head(fr_train)
str(fr_train)
str(fr_test)
library(e1071)
set.seed(7)
tuned = tune(svm, Survived ~ ., data = fr_train, kernel = ""linear"", scale = TRUE, ranges = list(cost = seq(0.3, 0.6, length = 20)))
summary(tuned)
svm.fit = tuned$best.model
library(randomForest)
set.seed(7)
rf.fit = randomForest(Survived ~ ., data = fr_train)
summary(rf.fit$err.rate)
plot(rf.fit, ylim = c(0, 0.36))
legend(""top"", colnames(rf.fit$err.rate), col = 1:3, fill = 1:3, bty = ""n"")
varImpPlot(rf.fit)
rf.preds = predict(rf.fit, fr_test)
rf.submission = data.frame(PassengerId = names(rf.preds), Survived = rf.preds)
write.csv(rf.submission, file = ""rf_submission.csv"", row.names = FALSE)
svm.preds = predict(svm.fit, fr_test)
svm.submission = data.frame(PassengerId = names(svm.preds), Survived = svm.preds)
write.csv(svm.submission, file = ""svm_submission.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,0,0,1,0,0
243,kronprinserik-exploring-survival-on-the-titanic,0.7340000000000001,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",28.666327953338598,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['mira5b-exploring-survival-on-the-titanic', 'rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic', 'datascikrid-exploring-survival-on-the-titanic', 'anishmayaramka-the-titanic-datset']","[0.970428315764277, 0.9704041303242474, 0.9704041303242474, 0.9704041303242474, 0.9704041303242474, 0.9704041303242474, 0.9704041303242474, 0.9704041303242474, 0.9704041303242474, 0.9704041303242474]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Elderly[full$Age < 65] <- ""Adult or Child""
full$Elderly[full$Age >= 65] <- ""Elderly""
table(full$Elderly, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Elderly <- factor(full$Elderly)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Elderly + Mother, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
244,sandraezidiegwu-exploratoryanalysis-prediction-titanic,0.7440000000000001,"['c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'mean', 'names', 'paste', 'rbind', 'sum', 'summary', 'table', 'aes', 'geom_bar', 'ggplot', 'labs', 'scale_x_continuous', 'theme_linedraw', 'hist', 'mosaicplot', 'par', 'prune', 'prune.rpart', 'rpart', 'rpart.control', 'rpart.plot', 'median', 'predict', 'read.csv', 'str', 'write.csv']","['rpart', 'rpart.plot', 'ggplot2', 'dplyr', 'base']",1.61690402030945,"['labs', 'mean', 'median', 'is.na', 'theme_linedraw', 'names', 'scale_x_continuous', 'rpart.control', 'prune', 'rpart', 'summary', 'mosaicplot', 'hist', 'str', 'gsub', 'factor', 'geom_bar', 'read.csv', 'table', 'par', 'prune.rpart', 'c', 'aes', 'rbind', 'paste', 'sum', 'predict', 'write.csv', 'data.frame', 'ggplot', 'rpart.plot', 'library']",[],"['maza91-titanic-logistic-regression', 'djohnbar-titanic-rf', 'domini-titanic-data-exploration-and-modelling', 'djohnbar-fork-of-titanic-rf-w-titles', 'harsh2-exploring-the-titanic-dataset', 'zahoorahmad-titanic-2nd-degree-families-and-majority-voting', 'ushasri-titanic-2nd-degree-families-and-majority-voting', 'erikbruin-titanic-2nd-degree-families-and-majority-voting', 'ravikrishnareddy-titanic-survival-prediction', 'ablearcher-my-titanic']","[0.4770888975043576, 0.45604440986692524, 0.45032138976385644, 0.44564254687336213, 0.4429317539641505, 0.43817415986141794, 0.43817415986141794, 0.4376868406099609, 0.4330168189926415, 0.4215958778124881]","{'package:base': ['c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'mean', 'names', 'paste', 'rbind', 'sum', 'summary', 'table'], 'package:ggplot2': ['aes', 'geom_bar', 'ggplot', 'labs', 'scale_x_continuous', 'theme_linedraw'], 'package:graphics': ['hist', 'mosaicplot', 'par'], 'package:rpart': ['prune', 'prune.rpart', 'rpart', 'rpart.control'], 'package:rpart.plot': ['rpart.plot'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""c"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""library"", ""mean"", ""names"", ""paste"", ""rbind"", ""sum"", ""summary"", ""table""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""theme_linedraw""], ""package:graphics"": [""hist"", ""mosaicplot"", ""par""], ""package:rpart"": [""prune"", ""prune.rpart"", ""rpart"", ""rpart.control""], ""package:rpart.plot"": [""rpart.plot""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase c dataframe factor gsub isna library mean names paste rbind sum summary table packageggplot2 aes geombar ggplot labs scalexcontinuous themelinedraw packagegraphics hist mosaicplot par packagerpart prune prunerpart rpart rpartcontrol packagerpartplot rpartplot packagestats median predict packageutils readcsv str writecsv,"library(rpart)
library(rpart.plot)
library(ggplot2)
library(dplyr)
test <- read.csv(""../input/test.csv"")
train <- read.csv(""../input/train.csv"")
names(test)
names(train)
test$Survived <- 0
all.pass <- rbind(train, test)
str(all.pass)
summary(all.pass)
all.pass$Title <- gsub(""(.*, )|(\\..*)"", """", all.pass$Name)
table(all.pass$Sex, all.pass$Title)
all.pass$Title[all.pass$Title %in% c(""Mlle"", ""Ms"")] <- ""Miss""
all.pass$Title[all.pass$Title %in% c(""Dona"", ""the Countess"", ""Lady"", ""Don"", ""Jonkheer"", ""Major"", ""Sir"")] <- ""Affluent""
all.pass$Title[all.pass$Title %in% c(""Master"", ""Rev"", ""Capt"", ""Col"")] <- ""Mr""
all.pass$Title[all.pass$Title %in% ""Mme""] <- ""Mrs""
table(all.pass$Sex, all.pass$Title)
ggplot(all.pass, aes(x = Title, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"")
all.pass$FSize <- all.pass$SibSp + all.pass$Parch + 1
all.pass$FName <- paste(all.pass$Surname, all.pass$FSize, sep = ""_"")
ggplot(all.pass, aes(x = FSize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_linedraw()
ggplot(all.pass, aes(x = FSize, fill = factor(Title))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_linedraw()
par(mfrow = c(1, 1))
mosaicplot(table(all.pass$Title, all.pass$Survived), main = ""Survival by Title"", shade = TRUE)
sum(is.na(all.pass$Fare))
na.fare <- all.pass[is.na(all.pass$Fare), ]
na.fare
all.pass$Fare[153] <- median(all.pass[all.pass$Pclass == ""3"" & all.pass$Embarked == ""S"", ]$Fare, na.rm = T)
par(mfrow = c(1, 1))
hist(all.pass$Age, main = ""Age Distribution aboard the Titanic"", xlab = ""Age"", col = ""lightblue"")
sum(is.na(all.pass$Age))
actual <- all.pass
actual2 <- all.pass
age.part <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Ticket + Fare + Cabin + FSize + Title, data = all.pass[!is.na(all.pass$Age), ], method = ""anova"")
age.pred <- predict(age.part, all.pass[is.na(all.pass$Age), ])
actual$Age[is.na(actual$Age)] <- age.pred
age.prune <- prune.rpart(age.part, cp = 0.1)
age.pred2 <- predict(age.prune, all.pass[is.na(all.pass$Age), ])
actual2$Age[is.na(actual2$Age)] <- age.pred2
mean(actual2$Age != actual$Age)
par(mfrow = c(1, 3))
hist(all.pass$Age, col = ""blue"", main = ""Actual Age Values"", xlab = ""Age"")
hist(actual$Age, col = ""lightblue"", main = ""Predicted Age Values"", xlab = ""Age"")
hist(actual2$Age, col = ""lightblue"", main = ""Pruned Predicted Age Values"", xlab = ""Age"")
all.pass$Age[is.na(all.pass$Age)] <- age.pred2
sum(is.na(all.pass$Age))
all.pass$AgeDist[all.pass$Age < 18] <- ""Child""
all.pass$AgeDist[all.pass$Age >= 18] <- ""Adult""
all.pass$AgeDist <- factor(all.pass$AgeDist)
table(all.pass$AgeDist, all.pass$Survived)
test_data <- all.pass[892:1309, ]
train_data <- all.pass[1:891, ]
test_data$Survived <- NULL
model_part <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Fare + Title + FSize + AgeDist, data = train_data, method = ""class"", control = rpart.control(cp = 1e-04))
par(mfrow = c(1, 1))
rpart.plot(model_part)
model_pred <- predict(model_part, test_data, type = ""class"")
solution <- data.frame(PassengerID = test_data$PassengerId, Survived = model_pred)
solution[1:10, ]
model_prune <- prune(model_part, cp = 0.1)
model_prune.pred <- predict(model_prune, test_data, type = ""class"")
prune_solution <- data.frame(PassengerID = test_data$PassengerId, Survived = model_prune.pred)
prune_solution[1:10, ]
write.csv(prune_solution, file = ""rpart-solution.csv"", row.names = F)
final_solution <- read.csv(""rpart-solution.csv"", sep = "","", header = TRUE)
final_solution[1:10, ]",0,0,0,0,0,0,0,0,0,1,0,0,0,0
245,ashutoshds-titanic-rf-prediction-0-81818,0.763,"['user defined', 'user defined', 'user defined', 'apply', 'as.integer', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'list', 'mean', 'paste0', 'print', 'rep', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'suppressMessages', 'table', 'tapply', 'legend', 'mosaicplot', 'plot', 'hcl', 'importance', 'randomForest', 'varImpPlot', 'aggregate', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['randomForest', 'base']",2.88351893424988,"['list', 'mean', 'median', 'hcl', 'is.na', 'print', 'summary', 'sapply', 'round', 'rep', 'mosaicplot', 'importance', 'varImpPlot', 'str', 'set.seed', 'gsub', 'factor', 'colnames', 'as.integer', 'aggregate', 'apply', 'read.csv', 'paste0', 'suppressMessages', 'table', 'randomForest', 'row.names', 'c', 'reorder', 'sum', 'plot', 'legend', 'predict', 'write.csv', 'data.frame', 'strsplit', 'tapply', 'user defined', 'library']",[],"['kapillehar-titanic-rf-prediction-0-81818', 'vikasht34-titanic-rf-prediction-0-81818', 'jenioai-titanic-data-analysis-rf-prediction-0-81818', 'delasupreme-titanic-data-analysis-rf-prediction-0-81818', 'pranaytiwari-titanic-data-analysis-rf-prediction-0-81818', 'imendoza-titanic-rf-prediction', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'researchbigd-titanic-forkedfrommeganscript']","[0.9678754236259707, 0.9678754236259707, 0.8381112118012799, 0.825311815802906, 0.825311815802906, 0.825311815802906, 0.8041998092861368, 0.8035628035828007, 0.8035628035828007, 0.7967814326381308]","{'character(0)': ['aes', 'bind_rows', 'coord_flip', 'dense_rank', 'desc', 'dollar_format', 'element_blank', 'facet_grid', 'facet_wrap', 'geom_bar', 'geom_density', 'geom_histogram', 'geom_jitter', 'geom_text', 'geom_vline', 'ggplot', 'ggtitle', 'labs', 'mutate', 'scale_fill_discrete', 'scale_x_continuous', 'theme', 'theme_few', 'xlab', 'ylab'], 'package:base': ['apply', 'as.integer', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'list', 'mean', 'paste0', 'print', 'rep', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'suppressMessages', 'table', 'tapply'], 'package:graphics': ['legend', 'mosaicplot', 'plot'], 'package:grDevices': ['hcl'], 'package:randomForest': ['importance', 'randomForest', 'varImpPlot'], 'package:stats': ['aggregate', 'median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""character(0)"": [""aes"", ""bind_rows"", ""coord_flip"", ""dense_rank"", ""desc"", ""dollar_format"", ""element_blank"", ""facet_grid"", ""facet_wrap"", ""geom_bar"", ""geom_density"", ""geom_histogram"", ""geom_jitter"", ""geom_text"", ""geom_vline"", ""ggplot"", ""ggtitle"", ""labs"", ""mutate"", ""scale_fill_discrete"", ""scale_x_continuous"", ""theme"", ""theme_few"", ""xlab"", ""ylab""], ""package:base"": [""apply"", ""as.integer"", ""c"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""library"", ""list"", ""mean"", ""paste0"", ""print"", ""rep"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""summary"", ""suppressMessages"", ""table"", ""tapply""], ""package:graphics"": [""legend"", ""mosaicplot"", ""plot""], ""package:grDevices"": [""hcl""], ""package:randomForest"": [""importance"", ""randomForest"", ""varImpPlot""], ""package:stats"": [""aggregate"", ""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",character0 aes bindrows coordflip denserank desc dollarformat elementblank facetgrid facetwrap geombar geomdensity geomhistogram geomjitter geomtext geomvline ggplot ggtitle labs mutate scalefilldiscrete scalexcontinuous theme themefew xlab ylab packagebase apply asinteger c colnames dataframe factor gsub isna library list mean paste0 print rep round rownames sapply setseed strsplit sum summary suppressMessages table tapply packagegraphics legend mosaicplot plot packagegrDevices hcl packagerandomForest importance randomForest varImpPlot packagestats aggregate median predict reorder packageutils readcsv str writecsv,"suppressMessages(library(""ggplot2""))
suppressMessages(library(""ggthemes""))
suppressMessages(library(""scales""))
suppressMessages(library(""dplyr""))
suppressMessages(library(""randomForest""))
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
summary(full)
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram(bins = 30) + theme_few() + xlab(""Age"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Age vs Survived"")
ggplot(full[1:891, ], aes(Sex, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + theme_few() + xlab(""Sexe"") + ylab(""Count"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Sex vs Survived"")
tapply(full[1:891, ]$Survived, full[1:891, ]$Sex, mean)
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram(bins = 30) + theme_few() + xlab(""Age"") + ylab(""Count"") + facet_grid(. ~ Sex) + scale_fill_discrete(name = ""Survived"") + theme_few() + ggtitle(""Age vs Sex vs Survived"")
tapply(full[1:891, ]$Survived, full[1:891, ]$Pclass, mean)
ggplot(full[1:891, ], aes(Pclass, fill = factor(Survived))) + geom_bar(stat = ""count"") + theme_few() + xlab(""Pclass"") + facet_grid(. ~ Sex) + ylab(""Count"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Pclass vs Sexe vs Survived"")
ggplot(full[1:891, ], aes(x = Age, y = Sex)) + geom_jitter(aes(colour = factor(Survived))) + theme_few() + theme(legend.title = element_blank()) + facet_wrap(~Pclass) + labs(x = ""Age"", y = ""Sex"", title = ""Pclass vs Sex vs Age vs Survived"") + scale_fill_discrete(name = ""Survived"") + scale_x_continuous(name = ""Age"", limits = c(0, 81))
ggplot(full[1:891, ], aes(x = Fare, y = Pclass)) + geom_jitter(aes(colour = factor(Survived))) + theme_few() + theme(legend.title = element_blank()) + labs(x = ""Age"", y = ""Pclass"", title = ""Fare vs Pclass"") + scale_fill_discrete(name = ""Survived"") + scale_x_continuous(name = ""Fare"", limits = c(0, 270), breaks = c(0, 40, 80, 120, 160, 200, 240, 280))
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
officer <- c(""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"")
royalty <- c(""Dona"", ""Lady"", ""the Countess"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% royalty] <- ""Royalty""
full$Title[full$Title %in% officer] <- ""Officer""
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
ggplot(full[1:891, ], aes(Title, fill = factor(Survived))) + geom_bar(stat = ""count"") + xlab(""Title"") + ylab(""Count"") + scale_fill_discrete(name = "" Survived"") + ggtitle(""Title vs Survived"") + theme_few()
tapply(full[1:891, ]$Survived, full[1:891, ]$Title, mean)
full$Fsize <- full$SibSp + full$Parch + 1
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + xlab(""Family Size"") + ylab(""Count"") + theme_few() + scale_fill_discrete(name = ""Survived"") + ggtitle(""Family Size vs Survived"")
tapply(full[1:891, ]$Survived, full[1:891, ]$Fsize, mean)
full$FsizeD[full$Fsize == 1] <- ""Alone""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""Small""
full$FsizeD[full$Fsize > 4] <- ""Big""
tapply(full[1:891, ]$Survived, full[1:891, ]$FsizeD, mean)
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size vs Survived"", ylab = ""Survived"", xlab = ""Family Size"", col = hcl(c(50, 120)), )
tapply(full$Embarked, full$Pclass, median, na.rm = TRUE)
full[c(62, 830), ""Embarked""]
full$Embarked[c(62, 830)] <- ""S""
ggplot(full[1:891, ], aes(Pclass, fill = factor(Survived))) + geom_bar(stat = ""count"") + theme_few() + xlab(""Pclasse"") + ylab(""Count"") + facet_wrap(~Embarked) + scale_fill_discrete(name = ""Survived"") + ggtitle(""Embarked vs Pclass vs Survived"")
full[1044, ]
ggplot(full[full$Pclass == ""3"", ], aes(x = Fare)) + geom_density(fill = ""lightgrey"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""darkred"", linetype = ""dashed"", lwd = 1) + xlab(""Fare"") + ggtitle(""Pclass = 3"") + ylab(""Density"") + scale_x_continuous(labels = dollar_format()) + theme_few()
tapply(full$Fare, full$Pclass, median, na.rm = TRUE)
full$Fare[1044] <- median(full[full$Pclass == ""3"", ]$Fare, na.rm = TRUE)
tapply(full$Age, full$Pclass, median, na.rm = TRUE)
tapply(full$Age, full$Title, median, na.rm = TRUE)
title.age <- aggregate(full$Age, by = list(full$Title), FUN = function(x) median(x, na.rm = T))
full[is.na(full$Age), ""Age""] <- apply(full[is.na(full$Age), ], 1, function(x) title.age[title.age[, 1] == x[""Title""], 2])
sum(is.na(full$Age))
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
ggplot(full[1:891, ][full[1:891, ]$Child == ""Child"", ], aes(Sex, fill = factor(Survived))) + geom_bar(stat = ""count"") + xlab(""Sex"") + ylab(""Count"") + facet_wrap(~Pclass) + scale_fill_discrete(name = ""Survie"") + ggtitle(""Child vs Sex vs Pclass vs Survived"") + theme_few()
tapply(full[1:891, ]$Survived, full[1:891, ]$Child, mean)
table(full$Child, full$Survived)
full$Child <- factor(full$Child)
full$Sex <- factor(full$Sex)
full$Embarked <- factor(full$Embarked)
full$Title <- factor(full$Title)
full$Pclass <- factor(full$Pclass)
full$FsizeD <- factor(full$FsizeD)
full1 <- full[, -9]
full_mod <- full1[, -10]
train <- full_mod[1:891, ]
test <- full_mod[892:1309, ]
library(""randomForest"")
set.seed(123)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Fare + Embarked + Title + FsizeD + Child, data = train)
rf.fitted = predict(rf_model)
ans_rf = rep(NA, 891)
for (i in 1:891) {
    ans_rf[i] = as.integer(rf.fitted[[i]]) - 1
}
mean(ans_rf == train$Survived)
table(ans_rf)
print(rf_model)
mean(ans_rf == train$Survived)
varImpPlot(rf_model)
prediction <- predict(rf_model, test)
solution <- data.frame(Survived = prediction, PassengerID = test$PassengerId)
write.csv(solution, file = ""rf_model_sol.csv"", row.names = F)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()",1,0,0,0,0,0,0,0,0,0,0,0,0,0
247,nrutyam-predictions-on-titanic,0.758,"['count', 'missmap', 'as.character', 'as.factor', 'c', 'data.frame', 'gsub', 'ifelse', 'is.na', 'library', 'mean', 'nrow', 'options', 'prop.table', 'rbind', 'sapply', 'strsplit', 'table', 'naiveBayes', 'svm', 'boxplot', 'aggregate', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['dplyr', 'plyr', 'randomForest', 'bit64', 'Amelia', 'e1071', 'base']",1.29500889778137,"['nrow', 'mean', 'svm', 'as.character', 'is.na', 'options', 'prop.table', 'count', 'as.factor', 'naiveBayes', 'sapply', 'str', 'boxplot', 'missmap', 'gsub', 'aggregate', 'read.csv', 'table', 'c', 'rbind', 'ifelse', 'predict', 'write.csv', 'data.frame', 'strsplit', 'head', 'library']",[],"['nrutyam-predictions-on-titanic', 'qianbi-titanic-logistic', 'quentinalais-kerneltitanicquentin', 'waiyujack-titanic-random-search-in-r', 'amodi8-titanic-exploring-survival-using-machine-learning', 'tobybot11-toby-s-titanic-analysis', 'paulocressoni-titanic-using-stepwise-linear-regression', 'lizpund-titanic-competition-kernel', 'stevencahill-titanic-machine-learning-from-disaster', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic']","[0.9999999999999999, 0.22701204992176127, 0.22404972841849616, 0.1145280360191904, 0.09722342526395693, 0.08950379196337885, 0.08587453520359259, 0.06566226333893432, 0.06070446277557137, 0.059041710655285115]","{'c(""package:plyr"", ""package:dplyr"")': ['count'], 'package:Amelia': ['missmap'], 'package:base': ['as.character', 'as.factor', 'c', 'data.frame', 'gsub', 'ifelse', 'is.na', 'library', 'mean', 'nrow', 'options', 'prop.table', 'rbind', 'sapply', 'strsplit', 'table'], 'package:e1071': ['naiveBayes', 'svm'], 'package:graphics': ['boxplot'], 'package:stats': ['aggregate', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""c(""package:plyr"", ""package:dplyr"")"": [""count""], ""package:Amelia"": [""missmap""], ""package:base"": [""as.character"", ""as.factor"", ""c"", ""data.frame"", ""gsub"", ""ifelse"", ""is.na"", ""library"", ""mean"", ""nrow"", ""options"", ""prop.table"", ""rbind"", ""sapply"", ""strsplit"", ""table""], ""package:e1071"": [""naiveBayes"", ""svm""], ""package:graphics"": [""boxplot""], ""package:stats"": [""aggregate"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",cpackageplyr packagedplyr count packageAmelia missmap packagebase ascharacter asfactor c dataframe gsub ifelse isna library mean nrow options proptable rbind sapply strsplit table packagee1071 naiveBayes svm packagegraphics boxplot packagestats aggregate predict packageutils head readcsv str writecsv,"library(dplyr)
library(plyr)
library(randomForest)
library(bit64)
library(Amelia)
library(e1071)
options(scipen = 999)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
str(train)
str(test)
sapply(train, summary)
sapply(test, summary)
test$Survived <- NA
missmap(train)
missmap(test)
both <- rbind(train, test)
sapply(both, summary)
aggregate(Age ~ Sex, both, mean)
for (i in 1:nrow(both)) {
    if (both$Sex[i] == ""male"" && is.na(both$Age[i]) == TRUE) {
        both$Age[i] <- 30.58
    }
    else if (both$Sex[i] == ""female"" && is.na(both$Age[i]) == TRUE) {
        both$Age[i] <- 28.68
    }
    else {
        both$Age[i] <- both$Age[i]
    }
}
aggregate(Fare ~ Pclass + Embarked, both, range)
table(both$Embarked)
both$Embarked[c(62, 830)] <- ""S""
aggregate(Fare ~ Pclass, both, median)
both$Fare[c(1044)] <- 8.05
t = count(both, ""Cabin"")
t
1014/1309
both$Ticket <- as.character(both$Ticket)
both$Name <- as.character(both$Name)
missmap(both)
both$IsChild <- ifelse(both$Age < 18, 1, 0)
both$Fsize <- both$SibSp + both$Parch + 1
table(both$Fsize)
both$Fcat <- ""Large""
both$Fcat[both$Fsize == 1] <- ""Single""
both$Fcat[both$Fsize > 1 & both$Fsize <= 4] <- ""Small""
head(both$Name)
both$Title <- sapply(both$Name, FUN = function(x) {
    strsplit(x, split = ""[,.]"")[[1]][2]
})
both$Title <- gsub("" "", """", both$Title)
table(both$Title)
lowcnt_title <- c(""Dona"", ""Lady"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"", ""theCountess"")
both$Title[both$Title %in% c(""Ms"", ""Mlle"")] <- ""Miss""
both$Title[both$Title == ""Mme""] <- ""Mrs""
both$Title[both$Title %in% lowcnt_title] <- ""Others""
table(both$Title)
both$Fare2 <- ""30+""
both$Fare2[both$Fare < 30 & both$Fare >= 20] <- ""20-30""
both$Fare2[both$Fare < 20 & both$Fare >= 10] <- ""10-20""
both$Fare2[both$Fare < 10] <- ""<10""
both$Age2 <- ""Above 50""
both$Age2[both$Age <= 50 & both$Age > 40] <- ""41-50""
both$Age2[both$Age <= 40 & both$Age > 30] <- ""31-40""
both$Age2[both$Age <= 30 & both$Age > 20] <- ""21-30""
both$Age2[both$Age <= 20 & both$Age > 10] <- ""11-20""
both$Age2[both$Age <= 10] <- ""Within 10""
both$Title <- as.factor(both$Title)
both$Fcat <- as.factor(both$Fcat)
both$SibSp <- as.factor(both$SibSp)
both$Parch <- as.factor(both$Parch)
both$Pclass <- as.factor(both$Pclass)
both$Fare2 <- as.factor(both$Fare2)
both$IsChild <- as.factor(both$IsChild)
both$Age2 <- as.factor(both$Age2)
data_train <- both[1:891, ]
data_test <- both[892:1309, ]
table(data_train$Survived)
prop.table(table(data_train$Survived))
data_test$Survived <- 0
table(data_train$Sex, data_train$Survived)
prop.table(table(data_train$Sex, data_train$Survived), 1)
t = count(data_train, c(""Survived"", ""IsChild"", ""Sex""))
t
boxplot(data_train$Survived ~ data_train$Embarked)
table(data_train$Embarked, data_train$Survived)
prop.table(table(data_train$Embarked, data_train$Survived), 1)
boxplot(data_train$Survived ~ data_train$Pclass)
table(data_train$Pclass, data_train$Survived)
prop.table(table(data_train$Pclass, data_train$Survived), 1)
aggregate(Survived ~ Pclass + Embarked, data_train, sum)
aggregate(Survived ~ Pclass + Sex + Embarked, data_train, sum)
data_test$Survived <- ifelse(data_test$Sex == ""female"", 1, 0)
data_train$Survived <- as.factor(data_train$Survived)
data_test$Survived <- as.factor(data_test$Survived)
data_1 <- data_train[, c(""Survived"", ""Pclass"", ""Sex"", ""SibSp"", ""Parch"", ""Fare2"", ""Embarked"", ""Fcat"", ""Title"", ""Age2"")]
data_test1 <- data_test[, c(2, 3, 5, 7, 8, 12, 15, 16, 17, 18)]
nb_model <- naiveBayes(Survived ~ ., data = data_1)
nb_model
nb_test_predict <- predict(nb_model, data_test1[, -1])
table(pred = nb_test_predict, true = data_test1$Survived)
mean(nb_test_predict == data_test1$Survived)
svm_model <- svm(Survived ~ ., data = data_1)
svm_model
svm_test_predict <- predict(svm_model, data_test1[, -1])
table(pred = svm_test_predict, true = data_test1$Survived)
mean(svm_test_predict == data_test1$Survived)
MyOutput <- data.frame(PassengerId = data_test$PassengerId, Survived = svm_test_predict)
write.csv(MyOutput, ""MyOutput.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,0,0,1,0,1
248,neveldo-titanic-eda-predictions-attempt,0.742,"['filter', 'tibble', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.factor', 'as.integer', 'c', 'factor', 'ifelse', 'is.factor', 'is.na', 'levels', 'library', 'mean', 'nrow', 'paste', 'print', 'rep', 'sample', 'scale', 'seq', 'set.seed', 'subset', 'summary', 'table', 'knn', 'arrange', 'group_by', 'mutate', 'summarize', 'aes', 'coord_flip', 'geom_bar', 'geom_boxplot', 'geom_col', 'geom_freqpoly', 'geom_path', 'ggplot', 'labs', 'grid.arrange', 'qda', 'map_dbl', 'col_factor', 'cols', 'read_csv', 'write_csv', 'glm', 'median', 'predict', 'regex', 'str_extract']","['tidyverse', 'MASS', 'class', 'grid', 'gridExtra', 'stringr', 'base']",45.94076800346371,"['labs', 'cols', 'nrow', 'regex', 'mean', 'median', 'write_csv', 'coord_flip', 'geom_path', 'is.na', 'levels', 'subset', 'col_factor', 'glm', 'geom_boxplot', 'print', 'geom_col', 'as.factor', 'summary', 'filter', 'rep', 'tibble', 'str_extract', 'set.seed', 'qda', 'factor', 'as.integer', 'arrange', 'geom_bar', 'summarize', 'grid.arrange', 'table', 'map_dbl', 'scale', 'read_csv', 'group_by', 'c', 'is.factor', 'aes', 'mutate', 'sample', 'paste', 'ifelse', 'knn', 'predict', 'seq', 'ggplot', 'user defined', 'library', 'geom_freqpoly']",[],"['iherbert-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'prabhulingayya-titanic-prediction-using-logistic-regression', 'cnusapbo-titanic-r-code', 'turntrout-titanic-data-exploration', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic']","[0.11248485735792266, 0.10272880307140997, 0.10272880307140997, 0.10262299010549365, 0.10262299010549365, 0.10011925006358167, 0.10010921065727378, 0.0984678501394218, 0.0971583463019597, 0.0971583463019597]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'c(""package:dplyr"", ""package:tidyr"", ""package:tibble"")': ['tibble'], 'character(0)': ['analysePredictorResponse', 'kable', 'set'], 'package:base': ['as.factor', 'as.integer', 'c', 'factor', 'ifelse', 'is.factor', 'is.na', 'levels', 'library', 'mean', 'nrow', 'paste', 'print', 'rep', 'sample', 'scale', 'seq', 'set.seed', 'subset', 'summary', 'table'], 'package:class': ['knn'], 'package:dplyr': ['arrange', 'group_by', 'mutate', 'summarize'], 'package:ggplot2': ['aes', 'coord_flip', 'geom_bar', 'geom_boxplot', 'geom_col', 'geom_freqpoly', 'geom_path', 'ggplot', 'labs'], 'package:gridExtra': ['grid.arrange'], 'package:MASS': ['qda'], 'package:purrr': ['map_dbl'], 'package:readr': ['col_factor', 'cols', 'read_csv', 'write_csv'], 'package:stats': ['glm', 'median', 'predict'], 'package:stringr': ['regex', 'str_extract']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""c(""package:dplyr"", ""package:tidyr"", ""package:tibble"")"": [""tibble""], ""character(0)"": [""analysePredictorResponse"", ""kable"", ""set""], ""package:base"": [""as.factor"", ""as.integer"", ""c"", ""factor"", ""ifelse"", ""is.factor"", ""is.na"", ""levels"", ""library"", ""mean"", ""nrow"", ""paste"", ""print"", ""rep"", ""sample"", ""scale"", ""seq"", ""set.seed"", ""subset"", ""summary"", ""table""], ""package:class"": [""knn""], ""package:dplyr"": [""arrange"", ""group_by"", ""mutate"", ""summarize""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""geom_bar"", ""geom_boxplot"", ""geom_col"", ""geom_freqpoly"", ""geom_path"", ""ggplot"", ""labs""], ""package:gridExtra"": [""grid.arrange""], ""package:MASS"": [""qda""], ""package:purrr"": [""map_dbl""], ""package:readr"": [""col_factor"", ""cols"", ""read_csv"", ""write_csv""], ""package:stats"": [""glm"", ""median"", ""predict""], ""package:stringr"": [""regex"", ""str_extract""]}",cpackagedplyr packagestats filter cpackagedplyr packagetidyr packagetibble tibble character0 analysePredictorResponse kable set packagebase asfactor asinteger c factor ifelse isfactor isna levels library mean nrow paste print rep sample scale seq setseed subset summary table packageclass knn packagedplyr arrange groupby mutate summarize packageggplot2 aes coordflip geombar geomboxplot geomcol geomfreqpoly geompath ggplot labs packagegridExtra gridarrange packageMASS qda packagepurrr mapdbl packagereadr colfactor cols readcsv writecsv packagestats glm median predict packagestringr regex strextract,"library(tidyverse)
library(MASS)
library(class)
library(grid)
library(gridExtra)
library(stringr)
knitr::opts_chunk$set(message = FALSE, warning = FALSE, fig.width = 6, fig.asp = 0.618, out.width = ""80%"", fig.align = ""center"")
trainFile <- ""../input/train.csv""
testFile <- ""../input/test.csv""
titanicTrainingDataset <- read_csv(trainFile)
knitr::kable(titanicTrainingDataset[1:10, ], caption = ""Titanic training dataset overview"")
map_dbl(titanicTrainingDataset, function(x) mean(is.na(x)))
titanicTrainingDataset <- read_csv(trainFile, col_types = cols(Survived = col_factor(0:1), Pclass = col_factor(1:3), Sex = col_factor(c(""male"", ""female"")), Embarked = col_factor(c(""C"", ""Q"", ""S"")))) %>% filter(!is.na(Embarked)) %>% mutate(Age = ifelse(is.na(Age), median(Age, na.rm = T), Age))
titanicTrainingDataset <- titanicTrainingDataset %>% mutate(Title = as.factor(str_extract(Name, regex(""([a-z]+\\.)"", ignore_case = T))))
levels(titanicTrainingDataset$Title)
summary(titanicTrainingDataset)
titanicTrainingDataset %>% ggplot(aes(x = Survived)) + geom_bar()
analysePredictorResponse <- function(data, predictor, response) {
    if (is.factor(data[[predictor]])) {
        ggplot(mapping = aes(data[[predictor]], fill = data[[response]])) + geom_bar() + labs(title = paste(predictor, ""vs"", response), x = predictor, fill = response)
    }
    else {
        chart1 <- ggplot(mapping = aes(data[[response]], data[[predictor]])) + geom_boxplot() + labs(title = paste(predictor, ""vs"", response), x = response, y = predictor)
        chart2 <- ggplot(mapping = aes(x = data[[predictor]], , y = ..density.., colour = data[[response]])) + geom_freqpoly(position = ""dodge"") + labs(title = paste(predictor, ""vs"", response), colour = response, x = predictor)
        grid.arrange(chart1, chart2)
    }
}
analysePredictorResponse(titanicTrainingDataset, ""Age"", ""Survived"")
analysePredictorResponse(titanicTrainingDataset, ""Sex"", ""Survived"")
titanicTrainingDataset %>% group_by(Sex) %>% summarize(SurvivedRatio = mean(Survived == 1))
analysePredictorResponse(titanicTrainingDataset, ""Pclass"", ""Survived"")
titanicTrainingDataset %>% group_by(Pclass) %>% summarize(SurvivedRatio = mean(Survived == 1))
analysePredictorResponse(titanicTrainingDataset, ""SibSp"", ""Survived"")
analysePredictorResponse(titanicTrainingDataset, ""Parch"", ""Survived"")
analysePredictorResponse(titanicTrainingDataset, ""Fare"", ""Survived"")
analysePredictorResponse(titanicTrainingDataset, ""Embarked"", ""Survived"")
titanicTrainingDataset %>% group_by(Embarked) %>% summarize(SurvivedRatio = mean(Survived == 1))
titanicTrainingDataset %>% ggplot(mapping = aes(Pclass, Fare)) + geom_boxplot()
titanicTrainingDataset %>% ggplot(mapping = aes(Embarked, fill = Pclass)) + geom_bar()
titanicTrainingDataset %>% group_by(Title) %>% summarize(SurvivedRatio = mean(Survived == 1)) %>% arrange(SurvivedRatio) %>% mutate(Title = factor(Title, levels = Title)) %>% ggplot(aes(x = Title, y = SurvivedRatio)) + geom_col() + coord_flip()
titanicTrainingDataset <- titanicTrainingDataset %>% mutate(RefinedTitle = factor(ifelse(Title %in% c(""Capt."", ""Don"", ""Jonkheer."", ""Rev."", ""Mr.""), 1, ifelse(Title %in% c(""Col."", ""Dr."", ""Major."", ""Master.""), 2, 3))))
model <- glm(Survived ~ RefinedTitle + Pclass + SibSp + Embarked + Age + Sex + Parch, data = titanicTrainingDataset %>% filter(!is.na(Age)), family = binomial)
summary(model)
model <- glm(Survived ~ RefinedTitle + Pclass + SibSp + Age, data = titanicTrainingDataset, family = binomial)
summary(model)
for (j in seq(0.1, 0.9, 0.1)) {
    predictions <- rep(0, nrow(titanicTrainingDataset))
    for (i in 1:nrow(titanicTrainingDataset)) {
        model <- glm(Survived ~ RefinedTitle + Pclass + SibSp + Age, data = titanicTrainingDataset, family = binomial, subset = -i)
        predictions[i] <- predict(model, titanicTrainingDataset[i, ], type = ""response"") > j
    }
    print(paste(""Decision boundary value :"", j))
    print(table(predictions, titanicTrainingDataset$Survived))
    print(mean(predictions != titanicTrainingDataset$Survived))
}
model <- glm(Survived ~ RefinedTitle + Pclass + SibSp + Age, data = titanicTrainingDataset, family = binomial)
titanicTestDataset <- read_csv(testFile, col_types = cols(Pclass = col_factor(1:3), Sex = col_factor(c(""male"", ""female"")), Embarked = col_factor(c(""C"", ""Q"", ""S"")))) %>% mutate(Title = as.factor(str_extract(Name, regex(""([a-z]+\\.)"", ignore_case = T)))) %>% mutate(RefinedTitle = factor(ifelse(Title %in% c(""Capt."", ""Don"", ""Jonkheer."", ""Rev."", ""Mr.""), 1, ifelse(Title %in% c(""Col."", ""Dr."", ""Major."", ""Master.""), 2, 3)))) %>% mutate(Age = ifelse(is.na(Age), median(Age, na.rm = T), Age))
predictions <- predict(model, titanicTestDataset, type = ""response"") > 0.6
tibble(PassengerId = titanicTestDataset$PassengerId, Survived = as.integer(predictions)) %>% write_csv(""predictions-logistic-regression.csv"")
model <- qda(Survived ~ RefinedTitle + Pclass + SibSp + Age, data = titanicTrainingDataset, family = binomial)
model
predictions <- factor(rep(0, nrow(titanicTrainingDataset)), levels = 0:1)
for (i in 1:nrow(titanicTrainingDataset)) {
    model <- qda(Survived ~ RefinedTitle + Pclass + SibSp + Age, data = titanicTrainingDataset, subset = -i)
    predictions[i] <- predict(model, titanicTrainingDataset[i, ])$class
}
table(predictions, titanicTrainingDataset$Survived)
mean(predictions != titanicTrainingDataset$Survived)
model <- qda(Survived ~ RefinedTitle + Pclass + SibSp + Age, data = titanicTrainingDataset)
predictions <- predict(model, titanicTestDataset)$class
tibble(PassengerId = titanicTestDataset$PassengerId, Survived = predictions) %>% write_csv(""predictions-qda.csv"")
set.seed(1)
titanicTrainingDatasetKnn <- titanicTrainingDataset
titanicTrainingDatasetKnn$RefinedTitle = as.integer(titanicTrainingDatasetKnn$RefinedTitle)
titanicTrainingDatasetKnn$Pclass = as.integer(titanicTrainingDatasetKnn$Pclass)
testSampleSize <- 150
isTest <- sample(nrow(titanicTrainingDataset), testSampleSize)
knnTrainDataset <- titanicTrainingDatasetKnn[-isTest, ] %>% subset(select = c(RefinedTitle, Pclass, SibSp, Age)) %>% scale()
knnTestDataset <- titanicTrainingDatasetKnn[isTest, ] %>% subset(select = c(RefinedTitle, Pclass, SibSp, Age)) %>% scale()
cl <- titanicTrainingDatasetKnn[-isTest, ]$Survived
errorsRate <- rep(0, testSampleSize)
for (k in 1:testSampleSize) {
    predictions <- knn(knnTrainDataset, knnTestDataset, cl, k)
    errorsRate[k] = mean(predictions != titanicTrainingDatasetKnn[isTest, ]$Survived)
}
tibble(k = 1:testSampleSize, errorsRate = errorsRate) %>% ggplot(aes(x = k, y = errorsRate)) + geom_path()
titanicTestDatasetKnn <- titanicTestDataset %>% mutate(RefinedTitle = as.integer(RefinedTitle)) %>% mutate(Pclass = as.integer(Pclass))
knnTrainDataset <- titanicTrainingDatasetKnn %>% subset(select = c(RefinedTitle, Pclass, SibSp, Age)) %>% scale()
knnTestDataset <- titanicTestDatasetKnn %>% subset(select = c(RefinedTitle, Pclass, SibSp, Age)) %>% scale()
cl <- titanicTrainingDatasetKnn$Survived
predictions <- knn(knnTrainDataset, knnTestDataset, cl, 35)
tibble(PassengerId = titanicTestDataset$PassengerId, Survived = predictions) %>% write_csv(""predictions-knn.csv"")",0,0,0,0,0,0,1,0,0,0,0,0,0,0
249,djohnbar-the-titanic-using-knn,0.763,"['as.data.frame', 'as.factor', 'as.integer', 'as.numeric', 'c', 'cat', 'colSums', 'data.frame', 'gsub', 'is.na', 'lapply', 'length', 'library', 'list.files', 'ls', 'max', 'min', 'names', 'return', 'rm', 'scale', 'sqrt', 'table', 'which', 'knn', 'bind_rows', 'lm', 'median', 'predict', 'head', 'read.csv', 'write.csv']","['tidyverse', 'class', 'base']",1.56713509559631,"['median', 'lapply', 'min', 'which', 'cat', 'is.na', 'colSums', 'names', 'lm', 'as.factor', 'gsub', 'as.integer', 'max', 'length', 'read.csv', 'table', 'return', 'as.data.frame', 'rm', 'scale', 'c', 'as.numeric', 'ls', 'knn', 'predict', 'write.csv', 'list.files', 'sqrt', 'bind_rows', 'data.frame', 'head', 'library']",[],"['hertan-titanic-surviving-dataset-simple-expression', 'djohnbar-titanic-rf', 'djohnbar-fork-of-titanic-rf-w-titles', 'maza91-titanic-logistic-regression', 'domini-titanic-data-exploration-and-modelling', 'harsh2-exploring-the-titanic-dataset', 'zahoorahmad-titanic-2nd-degree-families-and-majority-voting', 'ushasri-titanic-2nd-degree-families-and-majority-voting', 'erikbruin-titanic-2nd-degree-families-and-majority-voting', 'ravikrishnareddy-titanic-survival-prediction']","[0.7676616572976939, 0.6610661624407481, 0.6331228295038138, 0.6122401818390663, 0.5485061796198313, 0.539165719488435, 0.5342017318977831, 0.5342017318977831, 0.5326233409011202, 0.5264834614212489]","{'package:base': ['as.data.frame', 'as.factor', 'as.integer', 'as.numeric', 'c', 'cat', 'colSums', 'data.frame', 'gsub', 'is.na', 'lapply', 'length', 'library', 'list.files', 'ls', 'max', 'min', 'names', 'return', 'rm', 'scale', 'sqrt', 'table', 'which'], 'package:class': ['knn'], 'package:dplyr': ['bind_rows'], 'package:stats': ['lm', 'median', 'predict'], 'package:utils': ['head', 'read.csv', 'write.csv']}","{""package:base"": [""as.data.frame"", ""as.factor"", ""as.integer"", ""as.numeric"", ""c"", ""cat"", ""colSums"", ""data.frame"", ""gsub"", ""is.na"", ""lapply"", ""length"", ""library"", ""list.files"", ""ls"", ""max"", ""min"", ""names"", ""return"", ""rm"", ""scale"", ""sqrt"", ""table"", ""which""], ""package:class"": [""knn""], ""package:dplyr"": [""bind_rows""], ""package:stats"": [""lm"", ""median"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""write.csv""]}",packagebase asdataframe asfactor asinteger asnumeric c cat colSums dataframe gsub isna lapply length library listfiles ls max min names return rm scale sqrt table which packageclass knn packagedplyr bindrows packagestats lm median predict packageutils head readcsv writecsv,"library(tidyverse)
library(class)
list.files(path = ""../input"")
rm(list = ls())
t1 <- read.csv(""../input/test.csv"", as.is = T)
t2 <- read.csv(""../input/train.csv"", as.is = T)
all <- bind_rows(t2, t1)
colSums(is.na(all))
all$Sex <- gsub(""female"", ""1"", all$Sex)
all$Sex <- gsub(""male"", ""0"", all$Sex)
all$Sex <- as.numeric(all$Sex)
missing.a <- all[which(is.na(all$Age)), ]
train <- all[which(!is.na(all$Age)), ]
model <- lm(Age ~ Pclass + Sex, data = train)
pred <- predict(model, missing.a)
pred <- as.data.frame(pred)
count <- 0
for (i in which(is.na(all$Age))) {
    count <- count + 1
    all$Age[i] <- pred$pred[count]
}
colSums(is.na(all))
all$Fare[all$Fare == 0] <- NA
all$Embarked[which(all$Embarked == """")] <- ""S""
all$Fare <- as.numeric(all$Fare)
colSums(is.na(all))
all$Fare[which(is.na(all$Fare))] <- median(all$Fare, na.rm = T)
colSums(is.na(all))
data.frame(num = 1:length(names(all)), names = names(all))
df <- all[-c(1, 4, 9, 11)]
head(df)
df$Survived <- as.factor(df$Survived)
df$Embarked[which(df$Embarked == ""C"")] <- 0
df$Embarked[which(df$Embarked == ""Q"")] <- 1
df$Embarked[which(df$Embarked == ""S"")] <- 2
df$Embarked <- as.numeric(df$Embarked)
norm <- function(x) {
    return((x - min(x))/(max(x) - min(x)))
}
train_target <- df[1:579, 1]
test_target <- df[580:891, 1]
df_z <- df
df <- as.data.frame(lapply(df[, c(2:8)], norm))
x <- df
df <- df[1:891, ]
train <- df[1:579, ]
test <- df[580:891, ]
k <- as.integer(sqrt(579))
model <- knn(train = train, test = test, cl = train_target, k = k)
t <- table(test_target, model)
t
accuracy <- 100 - ((t[2] + t[3])/length(model)) * 100
cat(""\n"")
cat(""accuracy = "", accuracy, ""%"")
df_z1 <- as.data.frame(scale(df_z[-c(1)]))
df_z1_train <- df_z1[1:579, ]
df_z1_test <- df_z1[580:891, ]
df_z1_train_target <- df_z[1:579, 1]
df_z1_test_target <- df_z[580:891, 1]
k <- 5
model <- knn(train = df_z1_train, test = df_z1_test, cl = df_z1_train_target, k = k)
t <- table(df_z1_test_target, model)
t
accuracy <- 100 - ((t[2] + t[3])/length(model)) * 100
cat(""\n"")
cat(""accuracy = "", accuracy, ""%"")
k <- 5
model <- knn(train = df_z1_train, test = x[892:1309, ], cl = df_z1_train_target, k = k)
submit <- data.frame(PassengerId = 892:1309, Survived = model)
write.csv(submit, file = ""score.csv"", row.names = F)",0,0,0,0,0,0,0,0,0,0,0,0,0,0
251,liudj2008-titanic,0.7609999999999999,"['as.character', 'as.factor', 'c', 'data.frame', 'is.na', 'levels', 'library', 'mean', 'names', 'rep', 'sample', 'set.seed', 'summary', 'system', 'table', 'randomForest', 'predict', 'head', 'read.csv', 'write.csv']","['ggplot2', 'readr', 'randomForest', 'base']",1.3007199764251698,"['mean', 'as.character', 'is.na', 'levels', 'names', 'as.factor', 'summary', 'rep', 'set.seed', 'read.csv', 'table', 'randomForest', 'c', 'sample', 'predict', 'write.csv', 'data.frame', 'head', 'library', 'system']",[],"['liudj2008-fork-of-titanic', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'seajaye-titanic-logistic-regression-0-78947', 'jacekpardyak-mytitanicscript', 'paulocressoni-titanic-using-stepwise-linear-regression', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'gravitymhxy2-titanic', 'ezhilvelme-titanic-neural-network-c-4-2', 'annafreydenzon-titanic-machine-learning-from-disaster']","[0.9967505065251305, 0.619555260083933, 0.619555260083933, 0.5834235935856085, 0.5306453508496771, 0.46392335637382054, 0.4636036661177879, 0.4591042909652162, 0.45691798033651265, 0.45615497582641634]","{'package:base': ['as.character', 'as.factor', 'c', 'data.frame', 'is.na', 'levels', 'library', 'mean', 'names', 'rep', 'sample', 'set.seed', 'summary', 'system', 'table'], 'package:randomForest': ['randomForest'], 'package:stats': ['predict'], 'package:utils': ['head', 'read.csv', 'write.csv']}","{""package:base"": [""as.character"", ""as.factor"", ""c"", ""data.frame"", ""is.na"", ""levels"", ""library"", ""mean"", ""names"", ""rep"", ""sample"", ""set.seed"", ""summary"", ""system"", ""table""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""predict""], ""package:utils"": [""head"", ""read.csv"", ""write.csv""]}",packagebase ascharacter asfactor c dataframe isna levels library mean names rep sample setseed summary system table packagerandomForest randomForest packagestats predict packageutils head readcsv writecsv,"library(ggplot2)
library(readr)
system(""ls ../input"")
train = read.csv(""../input/train.csv"")
train = train[, -c(1, 4, 9, 11)]
set.seed(1)
train$Age[is.na(train$Age)] = sample(train$Age[!is.na(train$Age)], 177)
set.seed(2)
train$Embarked[train$Embarked == """"] = sample(train$Embarked[train$Embarked != """"], 2)
train$Embarked = as.character(train$Embarked)
train$Embarked = as.factor(train$Embarked)
train$Survived = as.factor(train$Survived)
summary(train)
library(randomForest)
set.seed(3)
rf.fit = randomForest(Survived ~ ., data = train, mtry = 2.3)
rf.pred = predict(rf.fit, newdata = train)
table(true = train$Survived, pred = rf.pred)
mean(train$Survived == rf.pred)
test_original = read.csv(""../input/test.csv"")
test = test_original
test = test[, -c(1, 3, 8, 10)]
test = data.frame(Survived = as.factor(rep(0, 418)), test)
set.seed(1)
test$Age[is.na(test$Age)] = sample(test$Age[!is.na(test$Age)], 86)
set.seed(2)
test$Fare[is.na(test$Fare)] = sample(test$Fare[!is.na(test$Fare)], 1)
names(test)
levels(test$Survived) = levels(train$Survived)
levels(test$Embarked) = levels(train$Embarked)
test$Survived = predict(rf.fit, test)
prediction = data.frame(PassengerId = test_original$PassengerId, Survived = test$Survived)
summary(prediction)
head(prediction)
write.csv(prediction, ""gender_submission.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
253,tsfitz-titanic,0.7659999999999999,"['data.frame', 'library', 'summary', 'table', 'fancyRpartPlot', 'rpart', 'predict', 'head', 'read.csv', 'write.csv']","['caret', 'rpart', 'rpart.plot', 'rattle', 'RColorBrewer', 'base']",2.41667604446411,"['predict', 'write.csv', 'data.frame', 'read.csv', 'table', 'summary', 'rpart', 'library', 'head', 'fancyRpartPlot']",[],"['lagprophet-titanic', 'jacekpardyak-mytitanicscript', 'joelweiss-titanic-data-r', 'danr87946-titanic-practice', 'lizpund-titanic-competition-kernel', 'liudj2008-fork-of-titanic', 'liudj2008-titanic', 'tobybot11-toby-s-titanic-analysis', 'prabhulingayya-titanic-prediction-using-logistic-regression', 'cnusapbo-titanic-r-code']","[0.46084170986107176, 0.40150666622523895, 0.39203276637140305, 0.39029537783266205, 0.38146540165373694, 0.3800511086018453, 0.37999893818798175, 0.3707793005275024, 0.37005216678140546, 0.36961558906063335]","{'package:base': ['data.frame', 'library', 'summary', 'table'], 'package:rattle': ['fancyRpartPlot'], 'package:rpart': ['rpart'], 'package:stats': ['predict'], 'package:utils': ['head', 'read.csv', 'write.csv']}","{""package:base"": [""data.frame"", ""library"", ""summary"", ""table""], ""package:rattle"": [""fancyRpartPlot""], ""package:rpart"": [""rpart""], ""package:stats"": [""predict""], ""package:utils"": [""head"", ""read.csv"", ""write.csv""]}",packagebase dataframe library summary table packagerattle fancyRpartPlot packagerpart rpart packagestats predict packageutils head readcsv writecsv,"library(caret)
data = read.csv(""../input/train.csv"", header = T, sep = "","")
test = read.csv(""../input/test.csv"", header = T, sep = "","")
summary(data)
table(data$Sex, data$Survived)
data$Child = 0
data$Child[data$Age < 18] = 1
summary(data)
table(data$Child, data$Survived)
library(rpart)
library(rpart.plot)
library(rattle)
library(RColorBrewer)
fit = rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked, data = data, method = ""class"")
fancyRpartPlot(fit)
summary(fit)
pred = predict(fit, test, type = ""class"")
head(pred)
PassengerId = test$PassengerId
Survived = pred
solution <- data.frame(PassengerId, Survived)
head(solution)
write.csv(solution, file = ""gender_submission.csv"", row.names = F)",0,0,1,0,0,0,0,1,0,1,0,0,0,0
254,bluemachine-predicting-chances-of-survival-on-the-titanic,0.5479999999999999,"['barplot', 'unique', 'as.factor', 'predict', 'mean', 'rbind', 'importance', 'row.names', 'desc', 'mutate', 'as.matrix', 'colnames', 'str', 'sample', 'plot', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'c', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'paste0', 'return', 'round', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'dense_rank', 'aes', 'coord_flip', 'geom_bar', 'geom_text', 'ggplot', 'labs', 'theme_few', 'hist', 'legend', 'par', 'rainbow', 'randomForest', 'sqldf', 'reorder', 'str_locate', 'str_sub', 'read.csv', 'write.csv']","['ggplot2', 'ggthemes', 'dplyr', 'randomForest', 'sqldf', 'stringr', 'base']",2.34023404121399,"['labs', 'mean', 'geom_text', 'rainbow', 'lapply', 'coord_flip', 'dense_rank', 'is.na', 'sqldf', 'theme_few', 'as.factor', 'round', 'sapply', 'str', 'importance', 'as.matrix', 'hist', 'desc', 'set.seed', 'gsub', 'factor', 'colnames', 'unique', 'geom_bar', 'str_locate', 'read.csv', 'paste0', 'table', 'par', 'return', 'randomForest', 'row.names', 'c', 'aes', 'mutate', 'rbind', 'sample', 'reorder', 'plot', 'predict', 'sum', 'legend', 'write.csv', 'data.frame', 'strsplit', 'ggplot', 'str_sub', 'user defined', 'library', 'barplot']",[],"['iherbert-titanic', 'skhawaja-titanic-disaster-survival-099', 'windowbyryeol-kernel-titanic', 'stevengolo-titanic-machine-learning-from-disaster', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'vasuls-predictive-analysis-of-survival-rate-on-titanic']","[0.12525634235016478, 0.099375562213794, 0.09410647018396671, 0.07760687413000616, 0.07582577780106585, 0.06727187925463365, 0.06727187925463365, 0.0666046132749339, 0.0666046132749339, 0.06645621074766198]","{'c(""package:flexclust"", ""package:graphics"")': ['barplot'], 'c(""package:flexmix"", ""package:rJava"", ""package:arules"", ""package:base"")': ['unique'], 'c(""package:generics"", ""package:base"")': ['as.factor'], 'c(""package:kernlab"", ""package:flexmix"", ""package:flexclust"", ""package:arules"", ""package:stats"")': ['predict'], 'c(""package:Matrix"", ""package:base"")': ['mean'], 'c(""package:mice"", ""package:spam"", ""package:base"")': ['rbind'], 'c(""package:rattle"", ""package:ranger"", ""package:randomForest"")': ['importance'], 'c(""package:rgeos"", ""package:base"")': ['row.names'], 'c(""package:rstatix"", ""package:plyr"", ""package:desc"", ""package:dplyr"")': ['desc'], 'c(""package:rstatix"", ""package:plyr"", ""package:plotly"", ""package:ggpubr"", ""package:dplyr"")': ['mutate'], 'c(""package:SparseM"", ""package:spam"", ""package:timeSeries"", ""package:proxy"", ""package:Matrix"", ""package:base"")': ['as.matrix'], 'c(""package:timeSeries"", ""package:base"")': ['colnames'], 'c(""package:timeSeries"", ""package:rJava"", ""package:utils"")': ['str'], 'c(""package:timeSeries"", ""package:timeDate"", ""package:arules"", ""package:base"")': ['sample'], 'c(""package:urca"", ""package:ROCR"", ""package:robustbase"", ""package:rgeos"", ""package:sp"", ""package:kernlab"", ""package:hexbin"", ""package:flexmix"", ""package:flexclust"", ""package:stats4"", ""package:timeSeries"", ""package:timeDate"", ""package:colorspace"", ""package:graphics"")': ['plot'], 'character(0)': ['random.imp'], 'package:base': ['c', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'paste0', 'return', 'round', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['dense_rank'], 'package:ggplot2': ['aes', 'coord_flip', 'geom_bar', 'geom_text', 'ggplot', 'labs'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'par'], 'package:grDevices': ['rainbow'], 'package:randomForest': ['randomForest'], 'package:sqldf': ['sqldf'], 'package:stats': ['reorder'], 'package:stringr': ['str_locate', 'str_sub'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:flexclust"", ""package:graphics"")"": [""barplot""], ""c(""package:flexmix"", ""package:rJava"", ""package:arules"", ""package:base"")"": [""unique""], ""c(""package:generics"", ""package:base"")"": [""as.factor""], ""c(""package:kernlab"", ""package:flexmix"", ""package:flexclust"", ""package:arules"", ""package:stats"")"": [""predict""], ""c(""package:Matrix"", ""package:base"")"": [""mean""], ""c(""package:mice"", ""package:spam"", ""package:base"")"": [""rbind""], ""c(""package:rattle"", ""package:ranger"", ""package:randomForest"")"": [""importance""], ""c(""package:rgeos"", ""package:base"")"": [""row.names""], ""c(""package:rstatix"", ""package:plyr"", ""package:desc"", ""package:dplyr"")"": [""desc""], ""c(""package:rstatix"", ""package:plyr"", ""package:plotly"", ""package:ggpubr"", ""package:dplyr"")"": [""mutate""], ""c(""package:SparseM"", ""package:spam"", ""package:timeSeries"", ""package:proxy"", ""package:Matrix"", ""package:base"")"": [""as.matrix""], ""c(""package:timeSeries"", ""package:base"")"": [""colnames""], ""c(""package:timeSeries"", ""package:rJava"", ""package:utils"")"": [""str""], ""c(""package:timeSeries"", ""package:timeDate"", ""package:arules"", ""package:base"")"": [""sample""], ""c(""package:urca"", ""package:ROCR"", ""package:robustbase"", ""package:rgeos"", ""package:sp"", ""package:kernlab"", ""package:hexbin"", ""package:flexmix"", ""package:flexclust"", ""package:stats4"", ""package:timeSeries"", ""package:timeDate"", ""package:colorspace"", ""package:graphics"")"": [""plot""], ""character(0)"": [""random.imp""], ""package:base"": [""c"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""paste0"", ""return"", ""round"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""dense_rank""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""geom_bar"", ""geom_text"", ""ggplot"", ""labs""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""par""], ""package:grDevices"": [""rainbow""], ""package:randomForest"": [""randomForest""], ""package:sqldf"": [""sqldf""], ""package:stats"": [""reorder""], ""package:stringr"": [""str_locate"", ""str_sub""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackageflexclust packagegraphics barplot cpackageflexmix packagerJava packagearules packagebase unique cpackagegenerics packagebase asfactor cpackagekernlab packageflexmix packageflexclust packagearules packagestats predict cpackageMatrix packagebase mean cpackagemice packagespam packagebase rbind cpackagerattle packageranger packagerandomForest importance cpackagergeos packagebase rownames cpackagerstatix packageplyr packagedesc packagedplyr desc cpackagerstatix packageplyr packageplotly packageggpubr packagedplyr mutate cpackageSparseM packagespam packagetimeSeries packageproxy packageMatrix packagebase asmatrix cpackagetimeSeries packagebase colnames cpackagetimeSeries packagerJava packageutils str cpackagetimeSeries packagetimeDate packagearules packagebase sample cpackageurca packageROCR packagerobustbase packagergeos packagesp packagekernlab packagehexbin packageflexmix packageflexclust packagestats4 packagetimeSeries packagetimeDate packagecolorspace packagegraphics plot character0 randomimp packagebase c dataframe factor gsub isna lapply library paste0 return round sapply setseed strsplit sum table packagedplyr denserank packageggplot2 aes coordflip geombar geomtext ggplot labs packageggthemes themefew packagegraphics hist legend par packagegrDevices rainbow packagerandomForest randomForest packagesqldf sqldf packagestats reorder packagestringr strlocate strsub packageutils readcsv writecsv,"After studying data science and R for almost a year, I thought its time for me to make my first submission. 
To begin with, I picked up this competition. Comments and suggestions are most welcome.
Packages used:
For this submission, I have used the following packages:
ggplot2
ggthemes
dplyr
randomForest
sqldf
stringr

Since I have some PL/SQL development experience too, I have used **sqldf** package in this submission.
It made my work easy and really helped to get some logical information. I however, strongly believe that to learn R, its important to leave the comfort zone and thus I have shared the codes using both sqldf and other functions.

Finally, I too have used random forest classification method at the end to derive the probability of survival of the passengers on the Titanic. 


1. Loading the packages

library(""ggplot2"")
library(""ggthemes"")
library(""dplyr"")
library(""randomForest"")
library(""sqldf"")
library(""stringr"")
2. Merging data into single data frame
Assuming that both test and train CSVs need work in terms of treating missing values, transformation, etc; 
we will merge them into one dataframe first so that these operations need to be performed only once. Before we can merge these data frames, we will have to add survived column to the test data frame.

train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test$Survived <- 0
merged_data <- rbind(train, test)
str(merged_data)

3. Data munging
The next step that I decided to take is to check the structure of the data frame and vectors using different ways and try to find out if there are:
	1) any missing values like NULLs and empty strings
	2) any columns that need some modifications to make more sense

#Using unique function we will see which data needs cleansing/transformation or if there are any missing values.

unique(merged_data$Pclass)
unique(merged_data$Name)
unique(merged_data$Sex)
unique(merged_data$Age)
unique(merged_data$SibSp)
unique(merged_data$Parch)
unique(merged_data$Ticket)
unique(merged_data$Fare)
unique(merged_data$Cabin)
unique(merged_data$Embarked)

I have used SQLDF package to find out the number of missing values(only for the columns that are not OK above)

sqldf(""select count(*) from merged_data where Name is null"")
sqldf(""select count(*) from merged_data where age is null"")
sqldf(""select count(*) from merged_data where ticket is null"")
sqldf(""select count(*) from merged_data where fare is null"")
sqldf(""select count(*) from merged_data where cabin is null"")
sqldf(""select count(*) from merged_data where embarked is null"")
The same can be done using the combination of sum and is.na too
sum(is.na(merged_data$Name))
sum(is.na(merged_data$Age))
sum(is.na(merged_data$Ticket))
sum(is.na(merged_data$Fare))
sum(is.na(merged_data$Cabin))
sum(is.na(merged_data$Embarked))
So, before we can make any sense out of this data we will need to do some cleansing. We will also need to decide which column needs to be picked first since the data is interdependent.

3.1 Missing-data imputation (Age)
There are a lot of missing values in the dataset and age is an important factor that can contribute to the survival of the passengers.
you can use different functions in different packages(for example mice) for imputation based on the missing data and its relationship with other columns. 
I have however, created a function here based on the observed data for age. 

random.imp <- function(a) {
    missing <- is.na(a)
    count.missing <- sum(missing)
    not_missing.data <- a[!missing]
    imputed <- a
    imputed[missing] <- sample(not_missing.data, count.missing, replace = TRUE)
    return(imputed)
}
Age <- random.imp(merged_data$Age)
imputed_age <- data.frame(Age)
Lets create a graph to see if the imputed data for Age looks similar to the non-imputed data. if it will then we can say that our imputation function has worked well.
par(mfrow = c(1, 2))
hist(merged_data$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(imputed_age$Age, freq = F, main = ""Age: Imputed Output"", col = ""lightgreen"", ylim = c(0, 0.04))
The output of the graph looks good and therefore this function suits our requirement. We will thus update the age with the new imputed age.
merged_data$Age <- imputed_age$Age
3.2 Extracting surnames

we need the surname to find out the family size given the fact that we do have the columns Parch and SibSp collumns to support this value. I have used strsplit function and extracted everything before the comma(,). The output can be properly formatted using sapply. below are the two ways in which this can be achieved.

Surname <- sapply(strsplit(merged_data$Name, "",""), `[`, 1)
merged_data$Surname <- Surname
3.3 Extracting Titles
We do have the column sex to know the gender of the passenger. But to understand if there were any male or female kids in the ship too, we need to extract the titles.
Extracting titles is a bit tricky. Here we have used str_locate() to find the beginning and end of the Title. beginning must be 2 spaces after the comma(,). So we have used +2.
End should be one space before the dot(.) so we have used -1. [,1] has been used for all the rows.

title <- str_sub(merged_data$Name, str_locate(merged_data$Name, "","")[, 1] + 2, str_locate(merged_data$Name, ""\\."")[, 1] - 1)
merged_data$Titles <- title
3.3.1: Simplifying the titles
For the sake of simplicity, I decided to have only 4 titles viz. Mr., Mrs., Master and Miss.

unique(merged_data$Titles)
merged_data$Titles <- gsub(""Dona|Lady|Madame|the Countess|Mme"", ""Mrs"", merged_data$Titles)
merged_data$Titles <- gsub(""Don|Jonkheer|Sir|Dr|Major|Col|Capt|Rev"", ""Mr"", merged_data$Titles)
merged_data$Titles <- gsub(""Ms|Mlle"", ""Miss"", merged_data$Titles)
unique(merged_data$Titles)
Looks good now.
merged_data$Titles <- as.factor(merged_data$Titles)
3.4. Age category
Its natural to think that people of certain age may have higher survival rate as compared to others. We therefore would create the age category as well

merged_data$Age_category[merged_data$Age < 18] <- ""Child""
merged_data$Age_category[merged_data$Age >= 18] <- ""Adult""

3.5. Missing fare
Because the fare can depend on Age category and title, we can now find the missing fare too even though there is just one missing value and it may not have a huge impact on our prediction.

sqldf(""select * from merged_data where fare is null"")

We see that passengerid 1044 has missing fare. I am sharing two methods here.

merged_data$Fare[1044] <- mean(merged_data[merged_data$Pclass == ""3"" & merged_data$Embarked == ""S"" & merged_data$Age_category == ""Adult"" & merged_data$Titles == ""Mr"", ]$Fare, na.rm = TRUE)

3.6. Missing Embarkment values
We can find the missing embarkment values using sqldf function or which function.

sqldf(""select * from merged_data where embarked isnull or Embarked=''"")

The next step is to find the average fare nearest to 80 keeping in mind that the passenger is a female travelling in 1st class and category is adult. I have shared two methods below

sqldf(""select avg(fare),embarked from merged_data where Pclass=1 and Age_category ='Adult' and Sex='female' and Ticket!=113572 group by embarked"")
mean(merged_data[merged_data$Pclass == ""1"" & merged_data$Age_category == ""Adult"" & merged_data$Sex == ""female"" & merged_data$Embarked == ""C"" & merged_data$Ticket != 113572, ]$Fare, na.rm = FALSE)
mean(merged_data[merged_data$Pclass == ""1"" & merged_data$Age_category == ""Adult"" & merged_data$Sex == ""female"" & merged_data$Embarked == ""Q"" & merged_data$Ticket != 113572, ]$Fare, na.rm = FALSE)
mean(merged_data[merged_data$Pclass == ""1"" & merged_data$Age_category == ""Adult"" & merged_data$Sex == ""female"" & merged_data$Embarked == ""S"" & merged_data$Ticket != 113572, ]$Fare, na.rm = FALSE)

We see that the average fare at Embankment Q is closest to 80. Thus we insert Q into the missing embankment values

merged_data$Embarked[merged_data$Embarked == """" & merged_data$Ticket == ""113572""] <- ""Q""
3.7 impact of family size on survival
Its very natural to think that in a situation where its the question of life, family size does matter. 
Lets first create the new column Fsize and then later on in section 4, check if it can help us in improving our prediction or not.

merged_data$Fsize <- sqldf(""select (sibsp+parch+1) family_size from merged_data"")
merged_data$Fsize <- merged_data$SibSp + merged_data$Parch + 1
str(merged_data$Fsize)

3.8. Sorting out the cabin names
cabin names are a bit un-formatted. So, I have cleaned up this column a bit.

merged_data$cabin_name <- str_sub(merged_data$Cabin, 1, 1)
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Titles"", ""Surname"", ""Fsize"")
merged_data[factor_vars] <- lapply(merged_data[factor_vars], function(x) as.factor(x))

4. Finding the relationship between survival and different columns
I'm now done with cleaning up the data. I have created new column that I think are required and took care of missing values mostly(except cabin).
At this stage I decided to ask myself the questions that may influence the prediction.


Q1: has the travel class influenced the rate of survival?
Based on the outcome below, its a clear that passenger class has big impact on the chances on survival.

survived_by_class <- sqldf(c(""select sum(survived) total_survived,count(survived) total_passengers, ((sum(survived)*100/count(survived))) percentage_survived, PClass from merged_data where passengerid<=891 group by PClass order by PClass""))
barplot(as.matrix(survived_by_class$percentage_survived), col = rainbow(11), beside = T, ylab = ""Percent_survived"", xlab = ""Class"", names.arg = c(""1"", ""2"", ""3""), axis.lty = 1, offset = 0, ylim = c(0, 100))
legend(""topright"", c(""1"", ""2"", ""3""), cex = 0.9, bty = ""n"", fill = rainbow(5))

Q2: Has gender influenced the rate of survival?
Based on the outcome below, its a clear that gender has a big impact on the chances on survival.

survived_by_gender <- sqldf(c(""select sum(survived) total_survived,count(survived) total_passengers, ((sum(survived)*100/count(survived))) percentage_survived, Sex from merged_data where passengerid<=891 group by Sex order by Sex""))
barplot(as.matrix(survived_by_gender$percentage_survived), col = rainbow(11), beside = T, ylab = ""Percent_survived"", xlab = ""Gender"", names.arg = c(""FEMALE"", ""MALE""), axis.lty = 1, offset = 0, ylim = c(0, 100))
legend(""topright"", c(""MALE"", ""FEMALE""), cex = 0.9, bty = ""n"", fill = rainbow(5))

Q3: has age played any role?
From the output below it looks like that there is a bit of influence here.

survived_by_age <- sqldf(c(""select Age_category, sum(survived) as Survived, (sum(survived)*100)/count(passengerid) as pct_survived from merged_data where (survived =1 or survived =0) and passengerid<=891 group by Age_category""))
barplot(as.matrix(survived_by_age$pct_survived), col = rainbow(11), beside = T, ylab = ""%survived"", xlab = ""Age"", names.arg = c(""Adult"", ""Child""), axis.lty = 1, offset = 0, ylim = c(0, 100))
legend(""topright"", c(""Adult"", ""Child""), cex = 0.6, bty = ""n"", fill = rainbow(5))

Q4: Has familysize any impact on chances of survival?
The output is really quite interesting.  Passengers with no family have a low survival rate. Passengers with a family size of 2, 3 and 4 have very high chances. Finally, passengers with family size of 5,6,7,8 and 11 have a low rate of survival. This really makes sense. So, the family size dues infulence the chances of survival.

survived_by_family <- sqldf(c(""select sum(survived) total_survived,count(survived) total_passengers, ((sum(survived)*100/count(survived))) percentage_survived, Fsize from merged_data where passengerid<=891 group by Fsize order by Fsize""))
barplot(as.matrix(survived_by_family$percentage_survived), col = rainbow(11), beside = T, ylab = ""Percent_survived"", xlab = ""Family_size"", names.arg = c(""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""11""), axis.lty = 1, offset = 0, ylim = c(0, 100))
legend(""topright"", c(""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""11""), cex = 0.6, bty = ""n"", fill = rainbow(5))

Q5: Does being a mother impacted the survival rate?
There is a bit of impact it seems although not much.

merged_data$Mother <- ""Not Mother""
merged_data$Mother[merged_data$Sex == ""female"" & merged_data$Parch > 0 & merged_data$Age > 18 & merged_data$Title != ""Miss""] <- ""Mother""
survived_by_mother <- sqldf(c(""select Mother as is_mother,sum(survived) total_survived,count(passengerid) total_female_passengers, ((sum(survived)*100/count(passengerid))) percentage_females_survived from merged_data where passengerid<=891 and sex ='female' group by Mother order by mother""))
barplot(as.matrix(survived_by_mother$percentage_females_survived), col = rainbow(11), beside = T, ylab = ""Percent_survived"", xlab = ""Is_Mother"", names.arg = c(""Mother"", ""Not_mother""), axis.lty = 1, offset = 0, ylim = c(0, 100))
legend(""topright"", c(""Mother"", ""Not_mother""), cex = 0.9, bty = ""n"", fill = rainbow(5))

Q6: Does being a father impacted the survival rate?
The results clearly shows that the rat of survivals of the fathers are almost 50% to that of non-fathers

merged_data$Father <- ""Not Father""
merged_data$Father[merged_data$Sex == ""male"" & merged_data$Parch > 0 & merged_data$Age > 18 & merged_data$Title != ""Master""] <- ""Father""
table(merged_data$Father, merged_data$Survived)
survived_by_father <- sqldf(c(""select Father as is_father,sum(survived) total_survived,count(passengerid) total_male_passengers, ((sum(survived)*100/count(passengerid))) percentage_males_survived from merged_data where passengerid<=891 and sex ='male' group by Father order by Father""))
barplot(as.matrix(survived_by_father$percentage_males_survived), col = rainbow(11), beside = T, ylab = ""Percent_survived"", xlab = ""Is_Father"", names.arg = c(""Father"", ""Not_Father""), axis.lty = 1, offset = 0, ylim = c(0, 100))
legend(""topright"", c(""Father"", ""Not_Father""), cex = 0.9, bty = ""n"", fill = rainbow(5))

6.Splitting the data

merged_data$Mother <- factor(merged_data$Mother)
merged_data$Father <- factor(merged_data$Father)
merged_data$Pclass <- factor(merged_data$Pclass)
merged_data$Sex <- factor(merged_data$Sex)
merged_data$Embarked <- factor(merged_data$Embarked)
merged_data$Titles <- factor(merged_data$Titles)
merged_data$Age_category <- factor(merged_data$Age_category)
train <- merged_data[1:891, ]
test <- merged_data[892:1309, ]

7. Building the model
Finally, its time to build the prediction model based on the factors that contributes the most.

set.seed(123)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + Fsize + Father + Mother + Titles + Age_category, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3, border = 1)

8. Ranking the prediction variables
We would now see the ranking given to the variables that we have chosen to build the model

importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()

9. Making the prediction
We will not predict the survival of passengers from test dataset based on the model that we have created.

prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
256,sausen7-titanic-first-kernel,0.773,"['user defined', 'user defined', 'user defined', 'as.factor', 'as.numeric', 'colSums', 'data.frame', 'factor', 'is.na', 'library', 'nrow', 'set.seed', 'summary', 'confusionMatrix', 'createDataPartition', 'read_csv', 'glm', 'predict', 'head', 'write.csv']","['tidyverse', 'caret', 'base']",3.5112099647522004,"['factor', 'as.numeric', 'nrow', 'confusionMatrix', 'createDataPartition', 'predict', 'write.csv', 'data.frame', 'set.seed', 'head', 'as.factor', 'user defined', 'library', 'summary', 'read_csv', 'is.na', 'glm', 'colSums']",[],"['seanangio-predicting-titanic-survival', 'andrecn-random-forest-caret-model-prediction-titanic', 'tsfitz-titanic', 'gravitymhxy2-titanic', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'cnusapbo-titanic-r-code', 'prabhulingayya-titanic-prediction-using-logistic-regression', 'seajaye-titanic-logistic-regression-0-78947', 'danr87946-titanic-practice']","[0.5990000422377777, 0.3200043450140907, 0.15852320653023572, 0.15211287600582177, 0.1382881150178703, 0.13765361554041217, 0.13080770103291608, 0.13038125249975166, 0.13016836858667882, 0.12346973161824763]","{'character(0)': ['set'], 'package:base': ['as.factor', 'as.numeric', 'colSums', 'data.frame', 'factor', 'is.na', 'library', 'nrow', 'set.seed', 'summary'], 'package:caret': ['confusionMatrix', 'createDataPartition'], 'package:readr': ['read_csv'], 'package:stats': ['glm', 'predict'], 'package:utils': ['head', 'write.csv']}","{""character(0)"": [""set""], ""package:base"": [""as.factor"", ""as.numeric"", ""colSums"", ""data.frame"", ""factor"", ""is.na"", ""library"", ""nrow"", ""set.seed"", ""summary""], ""package:caret"": [""confusionMatrix"", ""createDataPartition""], ""package:readr"": [""read_csv""], ""package:stats"": [""glm"", ""predict""], ""package:utils"": [""head"", ""write.csv""]}",character0 set packagebase asfactor asnumeric colSums dataframe factor isna library nrow setseed summary packagecaret confusionMatrix createDataPartition packagereadr readcsv packagestats glm predict packageutils head writecsv,"knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
gender <- read_csv(""../input/gender_submission.csv"")
training <- read_csv(""../input/train.csv"")
training$Survived <- factor(training$Survived)
training$Pclass <- factor(training$Pclass)
training$Embarked <- factor(training$Embarked)
training$Sex <- factor(training$Sex)
training$PassengerId <- NULL
head(training)
logit <- glm(Survived ~ ., data = training, family = ""binomial"")
colSums(is.na(training)) * 100/nrow(training)
set.seed(42)
inTrain <- createDataPartition(y = training$Survived, p = 0.8, list = FALSE)
modeltrainset <- training[inTrain, ]
modeltestset <- training[-inTrain, ]
logit2 <- glm(Survived ~ Pclass + Sex + Age + Embarked, data = modeltrainset, family = ""binomial"")
summary(logit2)
pred <- predict(logit2, modeltestset, type = ""response"")
pred[pred > 0.5] <- 1
pred[pred < 0.5 | is.na(pred)] <- 0
pred <- as.factor(pred)
confusionMatrix(pred, modeltestset$Survived)$overall[1]
logit3 <- glm(Survived ~ Pclass + Sex + Age + Embarked + Fare, data = modeltrainset, family = ""binomial"")
summary(logit3)
logit4 <- glm(Survived ~ Pclass + Sex + Age + Embarked + Fare + SibSp, data = modeltrainset, family = ""binomial"")
summary(logit4)
pred2 <- predict(logit4, modeltestset, type = ""response"")
pred2[pred2 > 0.5] <- 1
pred2[pred2 < 0.5 | is.na(pred2)] <- 0
pred2 <- as.factor(pred2)
confusionMatrix(pred2, modeltestset$Survived)$overall[1]
testing <- read_csv(""../input/test.csv"")
testing$Pclass <- factor(testing$Pclass)
testing$Embarked <- factor(testing$Embarked)
testing$Sex <- factor(testing$Sex)
pred_final <- predict(logit4, testing, type = ""response"")
pred_final[pred_final > 0.5] <- 1
pred_final[pred_final < 0.5 | is.na(pred_final)] <- 0
submission_df <- data.frame(PassengerId = testing$PassengerId, Survived = as.numeric(pred_final))
write.csv(submission_df, file = ""submission.csv"", row.names = FALSE)",0,0,1,0,0,0,0,1,0,0,0,0,0,0
257,lokesharun-titanic,0.758,"['as.factor', 'c', 'colSums', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'round', 'row.names', 'set.seed', 'sum', 'summary', 'table', 'bind_rows', 'aes', 'facet_grid', 'geom_bar', 'geom_histogram', 'ggplot', 'ggtitle', 'labs', 'xlab', 'ylab', 'theme_few', 'hist', 'complete', 'mice', 'importance', 'randomForest', 'predict', 'read.csv', 'str', 'write.csv']","['dplyr', 'mice', 'ggplot2', 'ggthemes', 'Hmisc', 'caret', 'randomForest', 'e1071', 'base']",4.7781269550323495,"['labs', 'complete', 'lapply', 'is.na', 'colSums', 'names', 'theme_few', 'as.factor', 'summary', 'round', 'mice', 'geom_histogram', 'hist', 'importance', 'str', 'set.seed', 'gsub', 'xlab', 'factor', 'geom_bar', 'read.csv', 'table', 'randomForest', 'row.names', 'c', 'aes', 'ylab', 'sum', 'predict', 'write.csv', 'bind_rows', 'ggtitle', 'data.frame', 'ggplot', 'library', 'facet_grid']",[],"['pradeeptripathi-prediction-of-titanic-survival-using-random-forest', 'pradeeptripathi-prediction-of-titanic-survival-using-r', 'paulbisto-r-titanic-script-practice', 'predact-easy-r-titanic-predictive-model', 'utkarsh1997-kaggle-titanic-rf', 'suraj915-titanic-suraj', 'pavani2018-titanicr-random-forests', 'mailakshdeep-titanic-survival-prediction-r', 'acrespop-titanic1', 'hisnibs-titanic-enhancing-the-training-data-and-kis']","[0.9335045189166102, 0.9333316957960868, 0.8940320253248307, 0.8853147862612912, 0.8733736921272887, 0.8540334405218628, 0.8388541595107099, 0.8210817805269698, 0.7871776163895714, 0.7545499176677428]","{'package:base': ['as.factor', 'c', 'colSums', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'round', 'row.names', 'set.seed', 'sum', 'summary', 'table'], 'package:dplyr': ['bind_rows'], 'package:ggplot2': ['aes', 'facet_grid', 'geom_bar', 'geom_histogram', 'ggplot', 'ggtitle', 'labs', 'xlab', 'ylab'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist'], 'package:mice': ['complete', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""as.factor"", ""c"", ""colSums"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""round"", ""row.names"", ""set.seed"", ""sum"", ""summary"", ""table""], ""package:dplyr"": [""bind_rows""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""geom_bar"", ""geom_histogram"", ""ggplot"", ""ggtitle"", ""labs"", ""xlab"", ""ylab""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist""], ""package:mice"": [""complete"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase asfactor c colSums dataframe factor gsub isna lapply library names round rownames setseed sum summary table packagedplyr bindrows packageggplot2 aes facetgrid geombar geomhistogram ggplot ggtitle labs xlab ylab packageggthemes themefew packagegraphics hist packagemice complete mice packagerandomForest importance randomForest packagestats predict packageutils readcsv str writecsv,"library(""dplyr"")
library(""mice"")
library(""ggplot2"")
library(""ggthemes"")
library(""Hmisc"")
library(""caret"")
library(""randomForest"")
library(""e1071"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
Titanic <- bind_rows(train, test)
summary(Titanic)
str(Titanic)
colSums(Titanic == """")
colSums(is.na(Titanic))
ggplot(Titanic[1:891, ], aes(x = Pclass, fill = factor(Survived))) + geom_bar() + ggtitle(""Pclass versus Survival Rate"") + xlab(""Pclass"") + ylab(""Count"") + labs(fill = ""Survived"")
Titanic$Title <- gsub(""(.*, )|(\\..*)"", """", Titanic$Name)
table(Titanic$Title)
table(Titanic$Sex, Titanic$Title)
Titanic$Title[Titanic$Title == ""Ms""] <- ""Miss""
Titanic$Title[Titanic$Title == ""Lady""] <- ""Miss""
Titanic$Title[Titanic$Title == ""Mme""] <- ""Mrs""
Titanic$Title[Titanic$Title == ""Mlle""] <- ""Miss""
rare_title <- c(""Dona"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
Titanic$Title[Titanic$Title %in% rare_title] <- ""Officer""
table(Titanic$Sex, Titanic$Title)
ggplot(Titanic[1:891, ], aes(x = Title, fill = factor(Survived))) + geom_bar() + ggtitle(""Title Versus Survival rate"") + xlab(""Title"") + ylab(""Count"") + labs(fill = ""Survived"")
sum(is.na(Titanic$Age))
variables <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"")
Titanic[variables] <- lapply(Titanic[variables], function(x) as.factor(x))
mice_mod <- mice(Titanic[, !names(Titanic) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Sibsp"", ""Parch"", ""Survived"", ""Fare"")], method = ""rf"")
mice_output <- complete(mice_mod)
hist(Titanic$Age, freq = F, main = ""Original Age "", col = ""darkgreen"", ylim = c(0, 0.05))
hist(mice_output$Age, freq = F, main = ""MICE Output Age"", col = ""Red"", ylim = c(0, 0.05))
Titanic$Age <- mice_output$Age
sum(is.na(Titanic$Age))
ggplot(Titanic[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
Titanic$FamilySize <- Titanic$SibSp + Titanic$Parch + 1
Titanic$FamilySized[Titanic$FamilySize == 1] <- ""Single""
Titanic$FamilySized[Titanic$FamilySize < 5 & Titanic$FamilySize >= 2] <- ""Small""
Titanic$FamilySized[Titanic$FamilySize >= 5] <- ""Big""
Titanic$FamilySized = as.factor(Titanic$FamilySized)
ggplot(Titanic[1:891, ], aes(x = FamilySized, fill = factor(Survived))) + geom_bar() + ggtitle(""Family Size V/S Survival Rate"") + xlab(""FamilySize"") + ylab(""Total Count"") + labs(fill = ""Survived"")
table(Titanic$Embarked)
Titanic$Embarked[Titanic$Embarked == """"] = ""S""
table(Titanic$Embarked)
ggplot(Titanic[1:891, ], aes(x = Embarked, fill = factor(Survived))) + geom_bar() + ggtitle(""Embarked vs Survival"") + xlab(""Embarked"") + ylab(""Total Count"") + labs(fill = ""Survived"")
Train <- Titanic[1:600, ]
Train_1 <- Titanic[601:891, ]
Test <- Titanic[892:1309, ]
set.seed(754)
Model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Title + FamilySized, data = Train)
importance <- importance(Model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
prediction <- predict(Model, Test)
solution <- data.frame(PassengerID = Test$PassengerId, Survived = prediction)
write.csv(solution, file = ""Solution_Test.csv"", row.names = F)",1,0,1,1,0,0,0,1,0,0,0,1,0,0
258,bdcallen-titanic-knn-r,0.763,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.numeric', 'c', 'data.frame', 'factor', 'grep', 'is.na', 'length', 'library', 'max', 'merge', 'min', 'rep', 'return', 'set.seed', 'knn', 'rpart', 'median', 'predict', 'read.csv', 'write.csv']","['class', 'readr', 'rpart', 'base']",0.7097070217132572,"['median', 'min', 'merge', 'grep', 'is.na', 'rpart', 'rep', 'set.seed', 'factor', 'max', 'length', 'read.csv', 'return', 'c', 'as.numeric', 'knn', 'predict', 'write.csv', 'data.frame', 'user defined', 'library']",[],"['parthchaudhary-titanic-submission', 'kazimanil-titanic-submission', 'wongalan2002-titanic-with-neural-network', 'frankfeng-titanic', 'aer503-titanic-exploring-survival-and-random-forest-test', 'juverstraeten-titanic-test-5-decision-tree-w-cabin', 'alwortman-titanic-test-script', 'srinivasarajui-srini-s-r-titanic-solution', 'pranavsid-analyzing-the-titanic-disaster', 'paulocressoni-titanic-using-stepwise-linear-regression']","[0.1780820397559148, 0.15696769154904225, 0.1245489499574497, 0.12188745344519365, 0.1211790348657784, 0.11667419168581655, 0.0968838620096577, 0.08980883646768288, 0.0842565059868486, 0.08310104771094277]","{'character(0)': ['findTitle', 'normalize_row'], 'package:base': ['as.numeric', 'c', 'data.frame', 'factor', 'grep', 'is.na', 'length', 'library', 'max', 'merge', 'min', 'rep', 'return', 'set.seed'], 'package:class': ['knn'], 'package:rpart': ['rpart'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""findTitle"", ""normalize_row""], ""package:base"": [""as.numeric"", ""c"", ""data.frame"", ""factor"", ""grep"", ""is.na"", ""length"", ""library"", ""max"", ""merge"", ""min"", ""rep"", ""return"", ""set.seed""], ""package:class"": [""knn""], ""package:rpart"": [""rpart""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 findTitle normalizerow packagebase asnumeric c dataframe factor grep isna length library max merge min rep return setseed packageclass knn packagerpart rpart packagestats median predict packageutils readcsv writecsv,"library(class)
library(readr)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
train$Embarked[c(62, 830)] <- ""S""
train$Embarked <- factor(train$Embarked)
test$Embarked <- factor(test$Embarked)
test$Fare[153] <- median(c(train$Fare, test$Fare), na.rm = TRUE)
train_labels <- train$Survived
train$Survived <- NULL
findTitle <- function(x) {
    y <- rep(NA, length(x))
    y[grep(""Mr."", x, fixed = TRUE)] <- ""Mr""
    y[grep(""Mrs."", x, fixed = TRUE)] <- ""Mrs""
    y[grep(""Master."", x, fixed = TRUE)] <- ""Master""
    y[grep(""Miss."", x, fixed = TRUE)] <- ""Miss""
    y[grep(""Col."", x, fixed = TRUE)] <- ""Col""
    y[grep(""Dr."", x, fixed = TRUE)] <- ""Dr""
    y[grep(""Rev."", x, fixed = TRUE)] <- ""Rev""
    y[c(grep(""Mlle."", x, fixed = TRUE), grep(""Mme."", x, fixed = TRUE))] <- ""Mlle""
    y[c(grep(""Sir."", x, fixed = TRUE), grep(""Don."", x, fixed = TRUE), grep(""Major."", x, fixed = TRUE), grep(""Capt."", x, fixed = TRUE))] <- ""Sir""
    y[grep(""Ms."", x, fixed = TRUE)] <- ""Ms""
    y[c(grep(""Lady."", x, fixed = TRUE), grep(""Countess."", x, fixed = TRUE), grep(""Jonkheer."", x, fixed = TRUE), grep(""Dona."", x, fixed = TRUE))] <- ""Lady""
    return(y)
}
train$Title <- findTitle(train$Name)
test$Title <- findTitle(test$Name)
all_data <- merge(train, test, all = TRUE)
library(rpart)
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title, data = all_data[!is.na(all_data$Age), ], method = ""anova"")
all_data$Age[is.na(all_data$Age)] <- predict(predicted_age, all_data[is.na(all_data$Age), ])
train <- all_data[1:891, ]
test <- all_data[892:1309, ]
knn_train <- train
knn_test <- test
knn_train$TitleNum[knn_train$Title == ""Mr""] <- 1
knn_train$TitleNum[knn_train$Title == ""Mrs""] <- 2
knn_train$TitleNum[knn_train$Title == ""Miss""] <- 3
knn_train$TitleNum[knn_train$Title == ""Master""] <- 4
knn_train$TitleNum[knn_train$Title == ""Sir""] <- 5
knn_train$TitleNum[knn_train$Title == ""Rev""] <- 6
knn_train$TitleNum[knn_train$Title == ""Dr""] <- 7
knn_train$TitleNum[knn_train$Title == ""Mlle""] <- 8
knn_train$TitleNum[knn_train$Title == ""Ms""] <- 9
knn_train$TitleNum[knn_train$Title == ""Lady""] <- 10
knn_train$TitleNum[knn_train$Title == ""Col""] <- 11
knn_test$TitleNum[knn_test$Title == ""Mr""] <- 1
knn_test$TitleNum[knn_test$Title == ""Mrs""] <- 2
knn_test$TitleNum[knn_test$Title == ""Miss""] <- 3
knn_test$TitleNum[knn_test$Title == ""Master""] <- 4
knn_test$TitleNum[knn_test$Title == ""Sir""] <- 5
knn_test$TitleNum[knn_test$Title == ""Rev""] <- 6
knn_test$TitleNum[knn_test$Title == ""Dr""] <- 7
knn_test$TitleNum[knn_test$Title == ""Mlle""] <- 8
knn_test$TitleNum[knn_test$Title == ""Ms""] <- 9
knn_test$TitleNum[knn_test$Title == ""Lady""] <- 10
knn_test$TitleNum[knn_test$Title == ""Col""] <- 11
min_tnum <- min(knn_train$TitleNum)
max_tnum <- max(knn_train$TitleNum)
knn_train$TitleNum <- (knn_train$TitleNum - min_tnum)/(max_tnum - min_tnum)
knn_test$TitleNum <- (knn_test$TitleNum - min_tnum)/(max_tnum - min_tnum)
knn_train$Sex <- as.numeric(knn_train$Sex)
knn_test$Sex <- as.numeric(knn_test$Sex)
knn_train$Embarked <- as.numeric(knn_train$Embarked)
knn_test$Embarked <- as.numeric(knn_test$Embarked)
knn_train$Name <- NULL
knn_test$Name <- NULL
knn_train$Ticket <- NULL
knn_test$Ticket <- NULL
knn_train$Cabin <- NULL
knn_test$Cabin <- NULL
knn_train$Title <- NULL
knn_test$Title <- NULL
knn_all <- merge(knn_train, knn_test, all = TRUE)
to_normalize_list <- c(""TitleNum"", ""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked"")
normalize_row <- function(x) {
    min_x <- min(x)
    max_x <- max(x)
    normed_x <- (x - min_x)/(max_x - min_x)
    return(normed_x)
}
for (col in to_normalize_list) {
    knn_all[, col] <- normalize_row(knn_all[, col])
}
knn_train <- knn_all[1:891, ]
knn_test <- knn_all[892:1309, ]
knn_train$PassengerId <- NULL
knn_test$PassengerId <- NULL
set.seed(123)
pred <- knn(knn_train, knn_test, train_labels, 20)
my_results <- data.frame(PassengerId = test$PassengerId, Survived = pred)
write.csv(my_results, file = ""my_solution_knn.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,1,0,0,0,0
259,vikramatjob-exploring-survival-on-the-titanic-var1,0.7440000000000001,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",26.1113312244415,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic', 'datascikrid-exploring-survival-on-the-titanic', 'anishmayaramka-the-titanic-datset', 'aturner-exploring-survival-on-the-titanic']","[0.9976187819649676, 0.9976187819649676, 0.9976187819649676, 0.9976187819649676, 0.9976187819649676, 0.9976187819649676, 0.9976187819649676, 0.9976187819649676, 0.9976187819649676, 0.9976187819649676]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. ""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
full$Fare[1044]
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
factor_vars
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
full[factor_vars]
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
rf_model
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
importance
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""vikram_rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
260,liwenhuang-titanic-logistic-tree-rf,0.7440000000000001,"['cbind', 'plot', 'as.factor', 'c', 'colnames', 'data.frame', 'dim', 'factor', 'gsub', 'ifelse', 'is.na', 'length', 'library', 'print', 'round', 'sapply', 'set.seed', 'sum', 'summary', 'table', 'unlist', 'vector', 'which', 'which.max', 'fread', 'set', 'bind_rows', 'mutate_if', 'aes', 'coord_cartesian', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'ggplot', 'ggtitle', 'abline', 'hist', 'legend', 'lines', 'par', 'slot', 'complete', 'mice', 'pR2', 'randomForest', 'varImpPlot', 'fancyRpartPlot', 'performance', 'prediction', 'rpart', 'aggregate', 'anova', 'chisq.test', 'cor', 'density', 'glm', 'predict', 'head', 'str', 'write.csv']","['data.table', 'ggplot2', 'dplyr', 'mice', 'ROCR', 'pscl', 'tibble', 'rpart', 'rattle', 'rpart.plot', 'RColorBrewer', 'randomForest', 'dplyr', 'base']",5.97831892967224,"['unlist', 'complete', 'which.max', 'lines', 'vector', 'set', 'which', 'cor', 'slot', 'density', 'is.na', 'glm', 'geom_boxplot', 'print', 'mutate_if', 'rpart', 'as.factor', 'summary', 'sapply', 'round', 'geom_histogram', 'hist', 'mice', 'geom_hline', 'varImpPlot', 'set.seed', 'gsub', 'str', 'factor', 'colnames', 'dim', 'aggregate', 'geom_bar', 'length', 'performance', 'table', 'par', 'randomForest', 'fread', 'c', 'aes', 'fancyRpartPlot', 'chisq.test', 'coord_cartesian', 'anova', 'pR2', 'ifelse', 'plot', 'sum', 'legend', 'predict', 'write.csv', 'bind_rows', 'ggtitle', 'data.frame', 'ggplot', 'geom_density', 'head', 'prediction', 'library', 'cbind', 'abline']",[],"['tetyama-trial-titanic', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'allanwbrooks-exploring-survival-on-the-titanic', 'krupan-exploring-survival-on-the-titanic', 'bonesaw98616-exploring-survival-on-the-titanic', 'researchbigd-titanic-forkedfrommeganscript', 'mira5b-exploring-survival-on-the-titanic', 'oldflag-exploring-survival-on-the-titanic-inr-frommegan']","[0.5014805130229116, 0.5013812526648002, 0.5012348994502879, 0.5012348994502879, 0.5010248683865595, 0.5004604844237008, 0.4975960633398805, 0.4963888543055952, 0.4957874991628931, 0.4955751545385391]","{'c(""package:mice"", ""package:base"")': ['cbind'], 'c(""package:ROCR"", ""package:graphics"")': ['plot'], 'package:base': ['as.factor', 'c', 'colnames', 'data.frame', 'dim', 'factor', 'gsub', 'ifelse', 'is.na', 'length', 'library', 'print', 'round', 'sapply', 'set.seed', 'sum', 'summary', 'table', 'unlist', 'vector', 'which', 'which.max'], 'package:data.table': ['fread', 'set'], 'package:dplyr': ['bind_rows', 'mutate_if'], 'package:ggplot2': ['aes', 'coord_cartesian', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'ggplot', 'ggtitle'], 'package:graphics': ['abline', 'hist', 'legend', 'lines', 'par'], 'package:methods': ['slot'], 'package:mice': ['complete', 'mice'], 'package:pscl': ['pR2'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:rattle': ['fancyRpartPlot'], 'package:ROCR': ['performance', 'prediction'], 'package:rpart': ['rpart'], 'package:stats': ['aggregate', 'anova', 'chisq.test', 'cor', 'density', 'glm', 'predict'], 'package:utils': ['head', 'str', 'write.csv']}","{""c(""package:mice"", ""package:base"")"": [""cbind""], ""c(""package:ROCR"", ""package:graphics"")"": [""plot""], ""package:base"": [""as.factor"", ""c"", ""colnames"", ""data.frame"", ""dim"", ""factor"", ""gsub"", ""ifelse"", ""is.na"", ""length"", ""library"", ""print"", ""round"", ""sapply"", ""set.seed"", ""sum"", ""summary"", ""table"", ""unlist"", ""vector"", ""which"", ""which.max""], ""package:data.table"": [""fread"", ""set""], ""package:dplyr"": [""bind_rows"", ""mutate_if""], ""package:ggplot2"": [""aes"", ""coord_cartesian"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""ggplot"", ""ggtitle""], ""package:graphics"": [""abline"", ""hist"", ""legend"", ""lines"", ""par""], ""package:methods"": [""slot""], ""package:mice"": [""complete"", ""mice""], ""package:pscl"": [""pR2""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:rattle"": [""fancyRpartPlot""], ""package:ROCR"": [""performance"", ""prediction""], ""package:rpart"": [""rpart""], ""package:stats"": [""aggregate"", ""anova"", ""chisq.test"", ""cor"", ""density"", ""glm"", ""predict""], ""package:utils"": [""head"", ""str"", ""write.csv""]}",cpackagemice packagebase cbind cpackageROCR packagegraphics plot packagebase asfactor c colnames dataframe dim factor gsub ifelse isna length library print round sapply setseed sum summary table unlist vector which whichmax packagedatatable fread set packagedplyr bindrows mutateif packageggplot2 aes coordcartesian geombar geomboxplot geomdensity geomhistogram geomhline ggplot ggtitle packagegraphics abline hist legend lines par packagemethods slot packagemice complete mice packagepscl pR2 packagerandomForest randomForest varImpPlot packagerattle fancyRpartPlot packageROCR performance prediction packagerpart rpart packagestats aggregate anova chisqtest cor density glm predict packageutils head str writecsv,"knitr::opts_chunk$set(echo = TRUE)
library(data.table)
library(ggplot2)
library(dplyr)
train <- fread(""../input/train.csv"")
test <- fread(""../input/test.csv"")
submission <- fread(""../input/gender_submission.csv"")
full <- bind_rows(train, test)
str(train)
head(train)
sapply(full, function(x) sum(is.na(x) | x == """"))
train$Female <- train$Sex == ""female""
ggplot(full, aes(group = as.factor(Pclass), y = Fare, color = as.factor(Pclass))) + geom_boxplot() + coord_cartesian(xlim = c(-0.5, 0.5), ylim = c(-50, 300))
aggregate(Fare ~ Pclass, data = train, mean)
full[full$Embarked == """"]
ggplot(data = full, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 1)
full$Embarked[full$Embarked == """"] <- ""C""
full[is.na(full$Fare), ]
full$Fare[which(is.na(full$Fare))] <- 13.67555
cor(train[, -c(""PassengerId"", ""Sex"", ""Name"", ""Ticket"", ""Cabin"", ""Embarked"")])
ggplot(data = train, aes(x = Survived, fill = Sex)) + geom_bar(width = 0.5, position = ""dodge"")
ggplot(data = train, aes(x = Survived, fill = as.factor(Pclass))) + geom_bar(width = 0.5, position = ""dodge"")
cor(train[, -c(""PassengerId"", ""Sex"", ""Name"", ""Ticket"", ""Cabin"", ""Embarked"")], use = ""complete.obs"")
cor(full[, -c(""PassengerId"", ""Sex"", ""Name"", ""Ticket"", ""Cabin"", ""Embarked"")], use = ""complete.obs"")
train_logit1 <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, family = ""binomial"")
summary(train_logit1)
hist(train$Age, breaks = 50, col = ""lightblue"", freq = F)
lines(density(train$Age, na.rm = T), col = ""red"")
lines(density(train$Age, adjust = 4, na.rm = T), lty = ""dotted"", col = ""darkgreen"", lwd = 2)
hist(test$Age, breaks = 50, col = ""lightblue"", freq = F)
lines(density(test$Age, na.rm = T), col = ""red"")
lines(density(test$Age, adjust = 4, na.rm = T), lty = ""dotted"", col = ""darkgreen"", lwd = 2)
hist(full$Age, breaks = 50, col = ""lightblue"", freq = F)
lines(density(full$Age, na.rm = T), col = ""red"")
lines(density(full$Age, adjust = 4, na.rm = T), lty = ""dotted"", col = ""darkgreen"", lwd = 2)
summary(train$Age, rm.na = T)
summary(test$Age, rm.na = T)
summary(full$Age, rm.na = T)
Age_missing <- full[is.na(full$Age)]
table(full$Pclass)
table(full$Pclass)/dim(full)[1]
table(Age_missing$Pclass)
table(Age_missing$Pclass)/dim(Age_missing)[1]
table(full$Sex)
table(full$Sex)/dim(full)[1]
table(Age_missing$Sex)
table(Age_missing$Sex)/dim(Age_missing)[1]
ggplot(data = full, aes(Age, fill = as.factor(Pclass))) + geom_histogram(aes(y = ..density..), alpha = 0.7, position = ""identity"", binwidth = 2, na.rm = T) + geom_density(alpha = 0.2, linetype = ""dotted"", na.rm = T)
summary(full$Age[full$Pclass == 1])
summary(full$Age[full$Pclass == 2])
summary(full$Age[full$Pclass == 3])
ggplot(data = full, aes(Age, fill = Sex)) + geom_histogram(aes(y = ..density..), alpha = 0.7, position = ""identity"", binwidth = 2, na.rm = T) + geom_density(alpha = 0.2, linetype = ""dotted"", na.rm = T)
library(mice)
mice_mod <- mice(data = full[, c(""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Cabin"", ""Embarked"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, breaks = 50, col = ""darkblue"", freq = F, main = ""Age: Original Data"")
lines(density(full$Age, na.rm = T), col = ""red"")
lines(density(full$Age, adjust = 4, na.rm = T), lty = ""dotted"", col = ""darkgreen"", lwd = 2)
hist(mice_output$Age, breaks = 50, col = ""lightblue"", freq = F, main = ""Age: MICE output"")
lines(density(mice_output$Age, na.rm = T), col = ""red"")
lines(density(mice_output$Age, adjust = 4, na.rm = T), lty = ""dotted"", col = ""darkgreen"", lwd = 2)
par(mfrow = c(1, 2))
ggplot(data = full, aes(Age, fill = as.factor(Pclass))) + geom_histogram(aes(y = ..density..), alpha = 0.7, position = ""identity"", binwidth = 2, na.rm = T) + geom_density(alpha = 0.2, linetype = ""dotted"", na.rm = T) + ggtitle(""Age: Original Data"")
ggplot(data = mice_output, aes(Age, fill = as.factor(Pclass))) + geom_histogram(aes(y = ..density..), alpha = 0.7, position = ""identity"", binwidth = 2, na.rm = T) + geom_density(alpha = 0.2, linetype = ""dotted"", na.rm = T) + ggtitle(""Age: MICE output"")
full$Age <- mice_output$Age
sum(is.na(full$Age))
full$Cabin[1:30]
train_logit2 <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = full[!is.na(full$Survived), ], family = ""binomial"")
summary(train_logit1)
summary(train_logit2)
anova(train_logit1, test = ""Chisq"")
anova(train_logit2, test = ""Chisq"")
train_predict1 <- predict(train_logit1, data = full[1:891, ], type = ""response"")
train_predict2 <- predict(train_logit2, data = full[1:891, ], type = ""response"")
train_1 <- cbind(train, train_predict1)
train_2 <- cbind(train, train_predict2)
ggplot(data = train, aes(train_predict2, fill = as.factor(Survived))) + geom_histogram(alpha = 0.5, position = ""identity"", binwidth = 0.01) + ggtitle(""MICE outcome"")
library(ROCR)
result2 <- prediction(train_predict2, train$Survived)
evaluation2 <- performance(result2, ""acc"")
plot(evaluation2)
abline(v = 0.6, col = ""red"")
abline(h = 0.81, col = ""red"")
max_index2 <- which.max(slot(evaluation2, ""y.values"")[[1]])
max_index2
acc2 <- slot(evaluation2, ""y.values"")[[1]][max_index2]
cut_off2 <- slot(evaluation2, ""x.values"")[[1]][max_index2]
print(c(Accuracy = acc2, Cutoff = cut_off2))
train_outcome2 <- ifelse(train_predict2 > 0.6121, 1, 0)
conf_table2 <- table(train$Survived, train_outcome2)
conf_table2
conf_table2[2, 2]/sum(conf_table2[, 2])
conf_table2[2, 1]/sum(conf_table2[, 1])
roc2 <- performance(result2, ""tpr"", ""fpr"")
plot(roc2, colorize = T)
abline(a = 0, b = 1, col = ""grey"")
auc2 <- performance(result2, ""auc"") %>% slot(., ""y.values"") %>% unlist() %>% round(., 4)
auc2
plot(roc2, colorize = T)
abline(a = 0, b = 1, col = ""grey"")
legend(0.65, 0.2, auc2, title = ""AUC2"")
library(pscl)
pR2(train_logit2)
full$Name[1:20]
Title <- gsub(""(.*,\\s)|(\\..*)"", """", full$Name)
table(Title, full$Sex)
table(Title[1:891], train$Survived)
Title[Title == ""Mlle"" | Title == ""Mme"" | Title == ""Ms""] <- ""Miss""
Title[Title == ""Don"" | Title == ""Dona"" | Title == ""Master"" | Title == ""Lady"" | Title == ""Sir"" | Title == ""Jonkheer"" | Title == ""the Countess""] <- ""Upper""
Title[Title == ""Capt"" | Title == ""Col"" | Title == ""Major"" | Title == ""Rev"" | Title == ""Dr""] <- ""Service""
tb_ts <- table(Title[1:891], train$Survived)
tb_ts
chisq.test(tb_ts)
table(full$SibSp, full$Survived)
table(full$Parch, full$Survived)
Fam_size <- full$Parch + full$SibSp
tb_fams <- table(Fam_size, full$Survived)
tb_fams
Fam_sizeD <- vector(mode = ""numeric"", length = length(Fam_size))
Fam_sizeD[Fam_size == 0] <- ""Singleton""
Fam_sizeD[Fam_size > 0 & Fam_size < 5] <- ""Small""
Fam_sizeD[Fam_size >= 5] <- ""Big""
tb_fams <- table(Fam_sizeD, full$Survived)
tb_fams
chisq.test(tb_fams)
library(tibble)
full$Title <- Title
full$Fam_sizeD <- Fam_sizeD
train_logit3 <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Fam_sizeD + Title, family = ""binomial"", data = full[1:891, ])
summary(train_logit3)
train_predict3 <- predict(train_logit3, full[1:891], type = ""response"")
result3 <- prediction(train_predict3, train$Survived)
evaluation3 <- performance(result3, ""acc"")
plot(evaluation3)
abline(v = 0.6, col = ""red"")
abline(h = 0.81, col = ""red"")
max_index3 <- which.max(slot(evaluation3, ""y.values"")[[1]])
max_index3
acc3 <- slot(evaluation3, ""y.values"")[[1]][max_index3]
cut_off3 <- slot(evaluation3, ""x.values"")[[1]][max_index3]
print(c(Accuracy = acc3, Cutoff = cut_off3))
train_outcome3 <- ifelse(train_predict3 > 0.6291, 1, 0)
conf_table3 <- table(train$Survived, train_outcome3)
conf_table3
conf_table3[2, 2]/sum(conf_table3[, 2])
conf_table3[2, 1]/sum(conf_table3[, 1])
auc3 <- performance(result3, ""auc"") %>% slot(., ""y.values"") %>% unlist() %>% round(., 4)
auc3
roc3 <- performance(result3, ""tpr"", ""fpr"")
plot(roc3, colorize = T)
abline(a = 0, b = 1, col = ""grey"")
legend(0.85, 0.2, auc3, title = ""AUC3"")
auc2
pR2(train_logit3)
pR2(train_logit2)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
train_tree <- rpart(formula = Survived ~ as.factor(Pclass) + Sex + Age + SibSp + Parch + Fare + Embarked + Fam_sizeD + Title, data = full[1:891, ], method = ""class"")
fancyRpartPlot(train_tree)
tree_predict <- predict(train_tree, data = full[1:891, ], type = ""class"")
conf_table4 <- table(train$Survived, tree_predict)
conf_table4
conf_table4[2, 2]/sum(conf_table4[, 2])
conf_table4[2, 1]/sum(conf_table4[, 1])
library(randomForest)
library(dplyr)
full = full %>% mutate_if(is.character, as.factor)
set.seed(111)
train_rf <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Fam_sizeD + Title, data = full[1:891, ], importance = T)
train_rf$confusion
varImpPlot(train_rf)
plot(train_rf, ylim = c(0, 0.36))
legend(""topright"", colnames(train_rf$err.rate), col = 1:3, fill = 1:3)
test_predict <- predict(train_rf, full[892:1309, ])
solution <- data.frame(PassengerID = test$PassengerId, Survived = test_predict)
write.csv(solution, file = ""rf_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,1,0,0,0,0
261,shashank74-titanic-disaster-data-exploration-and-modelling,0.754,"['as.factor', 'c', 'cat', 'colnames', 'cut', 'data.frame', 'factor', 'is.na', 'length', 'library', 'match', 'mean', 'names', 'nrow', 'paste0', 'rbind', 'round', 'row.names', 'sapply', 'set.seed', 'sum', 'table', 'which', 'dense_rank', 'desc', 'group_by', 'mutate', 'n', 'summarise', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_histogram', 'geom_point', 'geom_text', 'ggplot', 'labs', 'scale_x_continuous', 'theme_few', 'legend', 'plot', 'importance', 'randomForest', 'median', 'predict', 'reorder', 'str_extract', 'head', 'read.csv', 'write.csv']","['ggplot2', 'dplyr', 'stringr', 'ggthemes', 'randomForest', 'base']",4.0891649723053,"['summarise', 'labs', 'nrow', 'mean', 'geom_text', 'median', 'which', 'coord_flip', 'cat', 'dense_rank', 'is.na', 'names', 'scale_x_continuous', 'theme_few', 'as.factor', 'sapply', 'round', 'n', 'geom_histogram', 'importance', 'str_extract', 'desc', 'set.seed', 'factor', 'colnames', 'match', 'cut', 'geom_bar', 'length', 'read.csv', 'paste0', 'table', 'randomForest', 'group_by', 'row.names', 'c', 'aes', 'mutate', 'rbind', 'reorder', 'sum', 'geom_point', 'legend', 'plot', 'predict', 'write.csv', 'data.frame', 'ggplot', 'head', 'library', 'facet_grid']",[],"['hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'msantos68-exploring-survival-on-the-titanic', 'bonesaw98616-exploring-survival-on-the-titanic', 'tetyama-trial-titanic', 'mira5b-exploring-survival-on-the-titanic', 'jww001-exploring-survival-on-the-titanicqw', 'kyanyoga-exploring-survival-on-the-titanic', 'mohankanni-exploring-survival-on-the-titanic']","[0.847454623664731, 0.8468423982497998, 0.8468423982497998, 0.8439034073943896, 0.8419147420689895, 0.841248684176364, 0.8402862580532416, 0.8401430520562457, 0.8394207013249604, 0.8392332580241181]","{'package:base': ['as.factor', 'c', 'cat', 'colnames', 'cut', 'data.frame', 'factor', 'is.na', 'length', 'library', 'match', 'mean', 'names', 'nrow', 'paste0', 'rbind', 'round', 'row.names', 'sapply', 'set.seed', 'sum', 'table', 'which'], 'package:dplyr': ['dense_rank', 'desc', 'group_by', 'mutate', 'n', 'summarise'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_histogram', 'geom_point', 'geom_text', 'ggplot', 'labs', 'scale_x_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['legend', 'plot'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['median', 'predict', 'reorder'], 'package:stringr': ['str_extract'], 'package:utils': ['head', 'read.csv', 'write.csv']}","{""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""cut"", ""data.frame"", ""factor"", ""is.na"", ""length"", ""library"", ""match"", ""mean"", ""names"", ""nrow"", ""paste0"", ""rbind"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""sum"", ""table"", ""which""], ""package:dplyr"": [""dense_rank"", ""desc"", ""group_by"", ""mutate"", ""n"", ""summarise""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_histogram"", ""geom_point"", ""geom_text"", ""ggplot"", ""labs"", ""scale_x_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""legend"", ""plot""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:stringr"": [""str_extract""], ""package:utils"": [""head"", ""read.csv"", ""write.csv""]}",packagebase asfactor c cat colnames cut dataframe factor isna length library match mean names nrow paste0 rbind round rownames sapply setseed sum table which packagedplyr denserank desc groupby mutate n summarise packageggplot2 aes coordflip facetgrid geombar geomhistogram geompoint geomtext ggplot labs scalexcontinuous packageggthemes themefew packagegraphics legend plot packagerandomForest importance randomForest packagestats median predict reorder packagestringr strextract packageutils head readcsv writecsv,"library(ggplot2)
library(dplyr)
library(stringr)
library(ggthemes)
library(randomForest)
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
test$Survived <- NA
test <- test[, c(1, 12, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)]
head(test)
full <- rbind(train, test)
sapply(full, function(x) {
    sum(is.na(x) | x == """")
})
which(is.na(full$Fare))
full[1044, ]
mean(full$Fare[full$Pclass == 3 & full$Sex == ""male""], na.rm = TRUE)
median(full$Fare[full$Pclass == 3 & full$Sex == ""male""], na.rm = TRUE)
ggplot(full[full$Pclass == 3 & full$Sex == ""male"", ], aes(x = Fare, y = Pclass)) + geom_point()
full$Fare[is.na(full$Fare)] <- mean(full$Fare[full$Pclass == 3 & full$Sex == ""male""], na.rm = TRUE)
sum(full$Cabin == """")/nrow(full)
which(full$Embarked == """")
full[c(62, 830), ]
full[full$Ticket == 113572, ]
full[full$Cabin == ""B28"", ]
ggplot(full[full$Pclass == 1, ], aes(x = Embarked)) + geom_bar() + facet_grid(. ~ Sex)
t <- full[full$Fare > 75 & full$Fare < 85, ]
t %>% group_by(Embarked) %>% summarise(n())
full$Embarked[full$Embarked == """"] <- ""C""
sum(is.na(full$Age))
full$Title <- str_extract(string = full$Name, pattern = ""(Mr|Master|Mrs|Miss)\\."")
table(full$Title)
length(which(is.na(full$Title)))
full$Title[is.na(full$Title)] <- ""Rare""
m <- c(""Mr."", ""Mrs."", ""Miss."", ""Master."", ""Rare"")
for (i in 1:length(m)) {
    cat(""NA in Age having title"", m[i], nrow(full[is.na(full$Age) & full$Title == m[i], ]), ""\n"")
}
for (i in 1:length(m)) {
    full$Age[(is.na(full$Age) & full$Title == m[i])] <- round(mean(full$Age[full$Title == m[i]], na.rm = T), 2)
}
full$family_size <- full$SibSp + full$Parch + 1
ggplot(full[1:891, ], aes(x = family_size, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"")
table(full$Pclass, full$Survived)
ggplot(full[1:891, ], aes(x = Pclass, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + labs(x = ""Pclass"") + theme_few()
ggplot(full[1:891, ], aes(x = Sex, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + labs(x = ""Gender"") + theme_few()
ggplot(full[1:891, ], aes(x = Title, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + labs(x = ""Title"") + theme_few()
table(cut(full$Age, 10), full$Survived)
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram(bins = 20) + theme_few()
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram(bins = 10) + facet_grid(. ~ Sex) + theme_few()
table(full$Embarked, full$Survived)
ggplot(full[1:891, ], aes(x = Embarked, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + labs(x = ""Embarked"") + theme_few()
l <- c(""Survived"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"")
index <- match(l, names(full))
for (i in index) {
    full[, i] <- as.factor(full[, i])
}
train2 <- full[1:891, ]
test2 <- full[892:1309, ]
set.seed(754)
rf_model_test <- randomForest(factor(Survived) ~ Pclass + Age + Sex + Title + Fare + family_size + Embarked, data = train2)
importance(rf_model_test)
rf_model_test <- randomForest(factor(Survived) ~ Pclass + Age + Sex + Title + Fare + family_size, data = train2)
rf_model_test <- randomForest(factor(Survived) ~ Pclass + Age + Sex + Title + Fare, data = train2)
rf_model_test <- randomForest(factor(Survived) ~ Pclass + Age + Title + Fare + family_size, data = train2)
rf_model_test <- randomForest(factor(Survived) ~ Age + Title + Fare + family_size, data = train2)
rf_model <- randomForest(factor(Survived) ~ Pclass + Age + Title + Fare + family_size, data = train2)
plot(rf_model, ylim = c(0, 0.4))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test2)
sol <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(sol, file = ""Survived.csv"", row.names = F)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
262,cbrioso-titanic-rf,0.773,"['setdiff', 'filter', 'cbind', 'rbind', 'as.data.frame', 'as.factor', 'as.integer', 'as.matrix', 'as.numeric', 'c', 'colnames', 'dimnames', 'factor', 'grepl', 'ifelse', 'is.na', 'library', 'list', 'names', 'prop.table', 'set.seed', 'substr', 'sum', 'table', 'anti_join', 'group_by', 'left_join', 'mutate', 'n', 'ntile', 'sample_frac', 'select', 'summarize', 'aes', 'facet_grid', 'geom_bar', 'ggplot', 'missForest', 'randomForest', 'varImpPlot', 'median', 'predict', 'word', 'read.csv', 'str', 'write.csv', 'xgb.DMatrix', 'xgb.importance', 'xgb.train']","['caret', 'dplyr', 'stringr', 'xgboost', 'mice', 'randomForest', 'Amelia', 'missForest', 'randomForest', 'base']",11.0586731433868,"['list', 'ntile', 'median', 'xgb.importance', 'is.na', 'names', 'prop.table', 'missForest', 'as.factor', 'left_join', 'filter', 'dimnames', 'n', 'varImpPlot', 'str', 'as.matrix', 'set.seed', 'setdiff', 'factor', 'as.integer', 'colnames', 'sample_frac', 'geom_bar', 'summarize', 'read.csv', 'table', 'randomForest', 'xgb.DMatrix', 'as.data.frame', 'group_by', 'c', 'aes', 'mutate', 'rbind', 'as.numeric', 'ifelse', 'sum', 'predict', 'write.csv', 'grepl', 'ggplot', 'word', 'substr', 'anti_join', 'library', 'xgb.train', 'cbind', 'select', 'facet_grid']",[],"['divyabudale-conditional-inference-tree-model-titanic', 'pliptor-optimal-titanic-for-pclass-only-0-65550', 'pliptor-optimal-titanic-for-gender-only-0-7655', 'rboimistruk-titanic-survivals-analysis', 'meggles-titanic-svm-submission-1-0', 'iherbert-titanic', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'paulocressoni-titanic-using-stepwise-linear-regression']","[0.4083294976139523, 0.3254056712857587, 0.22467919739123596, 0.18590304901785396, 0.16659336266540686, 0.1537414096512671, 0.14780325233900082, 0.1475646937766548, 0.14641694306132771, 0.14602711997859869]","{'c(""package:dplyr"", ""package:base"")': ['setdiff'], 'c(""package:dplyr"", ""package:stats"")': ['filter'], 'c(""package:mice"", ""package:base"")': ['cbind', 'rbind'], 'package:base': ['as.data.frame', 'as.factor', 'as.integer', 'as.matrix', 'as.numeric', 'c', 'colnames', 'dimnames', 'factor', 'grepl', 'ifelse', 'is.na', 'library', 'list', 'names', 'prop.table', 'set.seed', 'substr', 'sum', 'table'], 'package:dplyr': ['anti_join', 'group_by', 'left_join', 'mutate', 'n', 'ntile', 'sample_frac', 'select', 'summarize'], 'package:ggplot2': ['aes', 'facet_grid', 'geom_bar', 'ggplot'], 'package:missForest': ['missForest'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:stats': ['median', 'predict'], 'package:stringr': ['word'], 'package:utils': ['read.csv', 'str', 'write.csv'], 'package:xgboost': ['xgb.DMatrix', 'xgb.importance', 'xgb.train']}","{""c(""package:dplyr"", ""package:base"")"": [""setdiff""], ""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""c(""package:mice"", ""package:base"")"": [""cbind"", ""rbind""], ""package:base"": [""as.data.frame"", ""as.factor"", ""as.integer"", ""as.matrix"", ""as.numeric"", ""c"", ""colnames"", ""dimnames"", ""factor"", ""grepl"", ""ifelse"", ""is.na"", ""library"", ""list"", ""names"", ""prop.table"", ""set.seed"", ""substr"", ""sum"", ""table""], ""package:dplyr"": [""anti_join"", ""group_by"", ""left_join"", ""mutate"", ""n"", ""ntile"", ""sample_frac"", ""select"", ""summarize""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""geom_bar"", ""ggplot""], ""package:missForest"": [""missForest""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:stats"": [""median"", ""predict""], ""package:stringr"": [""word""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""], ""package:xgboost"": [""xgb.DMatrix"", ""xgb.importance"", ""xgb.train""]}",cpackagedplyr packagebase setdiff cpackagedplyr packagestats filter cpackagemice packagebase cbind rbind packagebase asdataframe asfactor asinteger asmatrix asnumeric c colnames dimnames factor grepl ifelse isna library list names proptable setseed substr sum table packagedplyr antijoin groupby leftjoin mutate n ntile samplefrac select summarize packageggplot2 aes facetgrid geombar ggplot packagemissForest missForest packagerandomForest randomForest varImpPlot packagestats median predict packagestringr word packageutils readcsv str writecsv packagexgboost xgbDMatrix xgbimportance xgbtrain,"library(caret)
library(dplyr)
library(stringr)
library(xgboost)
library(mice)
library(randomForest)
library(Amelia)
library(missForest)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
str(train)
table(train$Survived)
prop.table(table(train$Survived))
comb <- rbind(train, test %>% mutate(Survived = NA))
comb <- comb %>% mutate(title = ifelse(grepl(""Mr. "", Name), ""Mr"", ifelse(grepl(""Mrs."", Name), ""Mrs"", ifelse(grepl(""Rev."", Name), ""Rev"", ifelse(grepl(""Col."", Name), ""Col"", ifelse(grepl(""Miss."", Name), ""Miss"", ifelse(grepl(""Dr."", Name), ""Dr"", ifelse(grepl(""Master"", Name), ""Master"", ""Nothing""))))))), Ticket_ = ifelse(grepl(""SC"", Ticket), ""SC"", ifelse(grepl(""PC"", Ticket), ""PC"", ifelse(grepl(""S.A."", Ticket), ""S.A."", ifelse(grepl(""SOTON"", Ticket), ""SOTON"", ifelse(grepl(""A/5"", Ticket), ""A/5"", ifelse(grepl(""PP"", 
    Ticket), ""PP"", ifelse(grepl(""W.C."", Ticket), ""WC"", ifelse(grepl(""C.A."", Ticket), ""CA"", substr(Ticket, 1, 1))))))))), surname = word(Name, 1, sep = "", ""), FamSize = SibSp + Parch + 1, Cabin_ = ifelse(substr(Cabin, 1, 1) == """", ""Z"", substr(Cabin, 1, 1)), Age_ = ntile(Age, 5))
comb <- comb %>% select(-SibSp, -Parch)
ggplot(comb, aes(Survived), color = factor(Sex)) + geom_bar() + facet_grid(Sex ~ .)
ggplot(comb, aes(Survived)) + geom_bar() + facet_grid(Age_ ~ .)
ggplot(comb, aes(Survived)) + geom_bar() + facet_grid(Embarked ~ .)
ggplot(comb, aes(Survived)) + geom_bar() + facet_grid(Ticket_ ~ .)
age_ave <- comb %>% group_by(title) %>% summarize(ave_age = as.integer(median(Age, na.rm = TRUE)))
comb <- comb %>% left_join(age_ave) %>% mutate(Age = ifelse(is.na(Age), ave_age, Age)) %>% select(-ave_age)
comb_ <- comb %>% mutate(Pclass = as.numeric(Pclass) - 1, Sex = as.numeric(Sex) - 1, Age, Fare, Cabin = as.numeric(Cabin) - 1, Embarked = as.numeric(Embarked) - 1, title = as.numeric(as.factor(title)) - 1, Cabin_ = as.numeric(as.factor(Cabin_)) - 1, Ticket_ = as.numeric(Ticket) - 1, surname = as.numeric(as.factor(surname)) - 1) %>% select(-PassengerId, -Ticket, -Age_, -Name, -Cabin)
train_ <- comb_ %>% filter(!is.na(Survived)) %>% mutate(Survived = as.numeric(Survived))
test_ <- comb_ %>% filter(is.na(Survived))
train_t <- sample_frac(train_, 0.8)
train_v <- train_ %>% anti_join(train_t)
train_m <- as.matrix(train_t %>% select(-Survived))
train_m_l <- as.matrix(train_t %>% select(Survived))
val_m <- as.matrix(train_v %>% select(-Survived))
val_m_l <- as.matrix(train_v %>% select(Survived))
test_m <- as.matrix(test_ %>% select(-Survived))
dtrain <- xgb.DMatrix(data = train_m, label = train_m_l, missing = NA)
dval <- xgb.DMatrix(data = as.matrix(train_v %>% select(-Survived)), label = as.matrix(train_v %>% select(Survived)), missing = NA)
dtest <- xgb.DMatrix(data = as.matrix(test_ %>% select(-Survived)), label = as.matrix(test_ %>% select(Survived)), missing = NA)
param <- list(objective = ""binary:logistic"")
nround = 20
watchlist <- list(val = dval, train = dtrain)
bst <- xgb.train(param, dtrain, nthread = 12, nround = 20, watchlist, metric = ""error"")
names <- dimnames(train_m)[[2]]
importance_matrix <- xgb.importance(names, model = bst)
ggplot(data = as.data.frame(importance_matrix), aes(x = Feature, y = Gain)) + geom_bar(stat = ""identity"")
pred_bst_test <- predict(bst, test_m, missing = NA)
predict <- as.data.frame(pred_bst_test) %>% mutate(Survived = ifelse(pred_bst_test > 0.5, 1, 0)) %>% select(-pred_bst_test)
predict <- cbind(test$PassengerId, predict)
colnames(predict) <- c(""PassengerId"", ""Survived"")
write.csv(predict, ""bst_Titanic3.csv"")
comb1_ <- comb %>% mutate(Pclass = factor(Pclass), title = factor(title), Ticket_ = factor(Ticket_), surname = factor(surname), Cabin_ = factor(Cabin_))
set.seed(144)
vars.for.imputation = setdiff(names(comb1_), c(""PassengerId"", ""Survived"", ""Age_"", ""Name"", ""Ticket"", ""Cabin"", ""surname""))
comb1_.imp <- missForest(comb1_[vars.for.imputation], verbose = TRUE)
comb1_[vars.for.imputation] <- comb1_.imp$ximp
train1_ <- comb1_ %>% filter(!is.na(Survived)) %>% mutate(Survived = as.numeric(Survived))
test1_ <- comb1_ %>% filter(is.na(Survived))
train1_t <- sample_frac(train1_, 0.8)
train1_v <- train1_ %>% anti_join(train1_t)
set.seed(123)
library(""randomForest"")
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + FamSize + Fare + Embarked + title + Ticket_, data = train1_t, importance = TRUE, ntree = 3000)
val_pred <- as.data.frame(predict(fit, train1_v))
val_comp <- cbind(pred = val_pred, Survived = train1_v$Survived)
colnames(val_comp) <- c(""pred"", ""act"")
val_comp %>% mutate(correct = ifelse(pred == act, 1, 0)) %>% summarize(ratio = sum(correct)/n())
varImpPlot(fit)
Prediction <- predict(fit, test1_)
submit <- cbind(test$PassengerId, Prediction)
write.csv(submit, ""rf_Titanic5.csv"", row.names = FALSE)",1,0,1,1,0,0,0,1,1,0,0,0,0,1
263,hegdekarthik-titanic-prediction-beginner-level-decision-tree,0.758,"['as.character', 'as.factor', 'c', 'data.frame', 'expand.grid', 'factor', 'is.na', 'levels', 'library', 'ls', 'nrow', 'rbind', 'rm', 'sapply', 'seq', 'set.seed', 'strsplit', 'sub', 'sum', 'summary', 'table', 'which', 'confusionMatrix', 'precision', 'train', 'trainControl', 'rpart', 'prp', 'median', 'predict', 'head', 'read.csv', 'str', 'tail', 'write.csv']","['caret', 'e1071', 'rpart', 'rpart.plot', 'base']",5.442790985107419,"['nrow', 'median', 'which', 'as.character', 'sub', 'is.na', 'levels', 'confusionMatrix', 'precision', 'expand.grid', 'rpart', 'as.factor', 'summary', 'sapply', 'str', 'set.seed', 'prp', 'factor', 'read.csv', 'table', 'rm', 'train', 'c', 'tail', 'rbind', 'sum', 'ls', 'predict', 'write.csv', 'seq', 'data.frame', 'strsplit', 'head', 'library', 'trainControl']",[],"['paulocressoni-titanic-using-stepwise-linear-regression', 'nithishthirmul-titanic-data-test1', 'cnusapbo-titanic-r-code', 'prabhulingayya-titanic-prediction-using-logistic-regression', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic', 'goblin-titanic-test', 'ezhilvelme-titanic-neural-network-c-4-2', 'skhawaja-titanic-disaster-survival-099', 'vasuls-predictive-analysis-of-survival-rate-on-titanic']","[0.06455756060312423, 0.06032846365903624, 0.05147432063297889, 0.05076668436283875, 0.04762866061957003, 0.04762866061957003, 0.04711400628585552, 0.046610957536198545, 0.04502989715616104, 0.04472309587553153]","{'package:base': ['as.character', 'as.factor', 'c', 'data.frame', 'expand.grid', 'factor', 'is.na', 'levels', 'library', 'ls', 'nrow', 'rbind', 'rm', 'sapply', 'seq', 'set.seed', 'strsplit', 'sub', 'sum', 'summary', 'table', 'which'], 'package:caret': ['confusionMatrix', 'precision', 'train', 'trainControl'], 'package:rpart': ['rpart'], 'package:rpart.plot': ['prp'], 'package:stats': ['median', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'tail', 'write.csv']}","{""package:base"": [""as.character"", ""as.factor"", ""c"", ""data.frame"", ""expand.grid"", ""factor"", ""is.na"", ""levels"", ""library"", ""ls"", ""nrow"", ""rbind"", ""rm"", ""sapply"", ""seq"", ""set.seed"", ""strsplit"", ""sub"", ""sum"", ""summary"", ""table"", ""which""], ""package:caret"": [""confusionMatrix"", ""precision"", ""train"", ""trainControl""], ""package:rpart"": [""rpart""], ""package:rpart.plot"": [""prp""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""tail"", ""write.csv""]}",packagebase ascharacter asfactor c dataframe expandgrid factor isna levels library ls nrow rbind rm sapply seq setseed strsplit sub sum summary table which packagecaret confusionMatrix precision train trainControl packagerpart rpart packagerpartplot prp packagestats median predict packageutils head readcsv str tail writecsv,"rm(list = ls())
library(caret)
library(e1071)
library(rpart)
library(rpart.plot)
trainTitanic = read.csv(""../input/train.csv"", header = TRUE)
testTitanic = read.csv(""../input/test.csv"", header = TRUE)
str(trainTitanic)
str(testTitanic)
testTitanic$Survived = NA
completeTitanic = rbind(trainTitanic, testTitanic)
head(completeTitanic)
sapply(completeTitanic[, -c(2)], function(x) {
    sum(is.na(x))
})
sapply(completeTitanic[, -c(2)], function(x) {
    sum(x == """")
})
completeTitanic$Fare[is.na(completeTitanic$Fare)] = median(completeTitanic$Fare, na.rm = TRUE)
completeTitanic$Embarked[completeTitanic$Embarked == """"] <- ""S""
completeTitanic$FamilySize <- completeTitanic$SibSp + completeTitanic$Parch + 1
completeTitanic$Title <- sapply(as.character(completeTitanic$Name), FUN = function(x) {
    strsplit(x, split = ""[,.]"")[[1]][2]
})
completeTitanic$Title <- sub("" "", """", completeTitanic$Title)
completeTitanic$Title <- as.character(completeTitanic$Title)
completeTitanic$Title[completeTitanic$Title %in% c(""Dona"", ""Lady"", ""the Countess"", ""Ms"", ""Mme"", ""Mlle"")] <- ""Mrs""
completeTitanic$Title[completeTitanic$Title %in% c(""Capt"", ""Col"", ""Don"", ""Dr"", ""Jonkheer"", ""Major"", ""Rev"", ""Sir"")] <- ""Others""
levels(as.factor(completeTitanic$Title))
table(completeTitanic$Title)
completeTitanic$Age[which(is.na(completeTitanic$Age) & completeTitanic$Title == ""Mr"")] <- median(completeTitanic$Age[completeTitanic$Title == ""Mr""], na.rm = TRUE)
completeTitanic$Age[which(is.na(completeTitanic$Age) & completeTitanic$Title == ""Mrs"")] <- median(completeTitanic$Age[completeTitanic$Title == ""Mrs""], na.rm = TRUE)
completeTitanic$Age[which(is.na(completeTitanic$Age) & completeTitanic$Title == ""Master"")] <- median(completeTitanic$Age[completeTitanic$Title == ""Master""], na.rm = TRUE)
completeTitanic$Age[which(is.na(completeTitanic$Age) & completeTitanic$Title == ""Miss"")] <- median(completeTitanic$Age[completeTitanic$Title == ""Miss""], na.rm = TRUE)
completeTitanic$Age[which(is.na(completeTitanic$Age) & completeTitanic$Title == ""Others"")] <- median(completeTitanic$Age[completeTitanic$Title == ""Others""], na.rm = TRUE)
completeTitanic$Title[completeTitanic$Age < 18] <- ""Children""
completeTitanic$Title <- factor(completeTitanic$Title)
levels(completeTitanic$Title)
completeTitanic$Survived = factor(completeTitanic$Survived)
completeTitanic$Pclass = factor(completeTitanic$Pclass)
completeTitanic$Name = as.character(completeTitanic$Name)
completeTitanic$Title = factor(completeTitanic$Title)
summary(completeTitanic)
columnToDelete <- c(""Cabin"", ""PassengerId"", ""Name"", ""Ticket"")
completeTitanic[, columnToDelete] <- NULL
trainTitanicData <- head(completeTitanic, n = nrow(trainTitanic))
testTitanicData <- tail(completeTitanic, n = nrow(testTitanic))
set.seed(1)
numfold = trainControl(method = ""cv"", number = 10)
cpgrid = expand.grid(.cp = seq(0.01, 0.7, 0.01))
cpVal = train(Survived ~ ., data = trainTitanicData, method = ""rpart"", trControl = numfold, tuneGrid = cpgrid)
cpVal
dec_tree <- rpart(Survived ~ ., data = trainTitanicData, cp = 0.02, method = ""class"")
prp(dec_tree)
pv2 <- predict(dec_tree, type = ""class"")
table(trainTitanicData$Survived, pv2)
predictTrain <- predict(dec_tree, type = ""class"")
actualTrain <- trainTitanicData$Survived
table(predictTrain, actualTrain)
confusionMatrix(predictTrain, actualTrain)
precision(predictTrain, actualTrain)
predictTest <- predict(dec_tree, newdata = testTitanicData, type = ""class"")
table(predictTest)
newdf_ <- data.frame(PassengerId = testTitanic$PassengerId, Survived = 0)
newdf_$Survived <- predictTest
write.csv(newdf_, ""output_file.csv"", row.names = FALSE)",0,0,1,0,0,0,0,1,0,1,0,1,0,0
264,maza91-titanic-logistic-regression,0.7490000000000001,"['user defined', 'apply', 'as.factor', 'as.numeric', 'c', 'factor', 'gsub', 'ifelse', 'is.na', 'library', 'rbind', 'set.seed', 'strsplit', 'sum', 'summary', 'fread', 'rpart', 'binomial', 'glm', 'median', 'predict', 'str', 'write.csv']","['data.table', 'rpart', 'base']",0.5620388984680179,"['median', 'is.na', 'glm', 'rpart', 'as.factor', 'summary', 'str', 'set.seed', 'gsub', 'factor', 'apply', 'binomial', 'fread', 'c', 'rbind', 'as.numeric', 'ifelse', 'sum', 'predict', 'write.csv', 'strsplit', 'user defined', 'library']",[],"['maza91-titanic-neural-network-try', 'djohnbar-titanic-rf', 'djohnbar-fork-of-titanic-rf-w-titles', 'domini-titanic-data-exploration-and-modelling', 'harsh2-exploring-the-titanic-dataset', 'zahoorahmad-titanic-2nd-degree-families-and-majority-voting', 'ushasri-titanic-2nd-degree-families-and-majority-voting', 'erikbruin-titanic-2nd-degree-families-and-majority-voting', 'ravikrishnareddy-titanic-survival-prediction', 'ablearcher-my-titanic']","[0.8229330906887993, 0.8084337144335718, 0.7848760528263978, 0.7843981076035755, 0.7586502069295339, 0.7507775855376154, 0.7507775855376154, 0.7492360071242202, 0.7402755390613335, 0.7359164164292843]","{'character(0)': ['.', '`:=`'], 'package:base': ['apply', 'as.factor', 'as.numeric', 'c', 'factor', 'gsub', 'ifelse', 'is.na', 'library', 'rbind', 'set.seed', 'strsplit', 'sum', 'summary'], 'package:data.table': ['fread'], 'package:rpart': ['rpart'], 'package:stats': ['binomial', 'glm', 'median', 'predict'], 'package:utils': ['str', 'write.csv']}","{""character(0)"": [""."", ""`:=`""], ""package:base"": [""apply"", ""as.factor"", ""as.numeric"", ""c"", ""factor"", ""gsub"", ""ifelse"", ""is.na"", ""library"", ""rbind"", ""set.seed"", ""strsplit"", ""sum"", ""summary""], ""package:data.table"": [""fread""], ""package:rpart"": [""rpart""], ""package:stats"": [""binomial"", ""glm"", ""median"", ""predict""], ""package:utils"": [""str"", ""write.csv""]}",character0   packagebase apply asfactor asnumeric c factor gsub ifelse isna library rbind setseed strsplit sum summary packagedatatable fread packagerpart rpart packagestats binomial glm median predict packageutils str writecsv,"set.seed(300)
library(data.table)
library(rpart)
train <- fread(""../input/train.csv"", na.strings = c(""NA"", """"))
test <- fread(""../input/test.csv"", na.strings = c(""NA"", """"))
str(train)
str(test)
all <- rbind(train, test[, `:=`(Survived, 0)])
apply(all, 2, function(x) sum(is.na(x)))
all[is.na(Embarked), `:=`(Embarked, ""S"")]
all[is.na(Fare), `:=`(Fare, median(all[, Fare], na.rm = TRUE))]
all[, `:=`(FamSize, SibSp + Parch)]
all[, `:=`(Embarked, as.factor(Embarked))]
all[, `:=`(Sex, as.factor(Sex))]
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + FamSize, data = all[!is.na(Age), ], method = ""anova"")
all[is.na(Age), `:=`(Age, predict(predicted_age, all[is.na(Age), ]))]
apply(all, 2, function(x) sum(is.na(x)))
all[, `:=`(Sex, as.factor(Sex))]
all[, `:=`(Embarked, as.factor(Embarked))]
all[, `:=`(Cabin, NULL)]
train <- all[1:891, ]
test <- all[892:1309, ]
model <- glm(Survived ~ Pclass + Age + Sex, family = binomial(link = ""logit""), data = train)
summary(model)
fitted.results <- predict(model, newdata = test[, .(Pclass, Age, Sex)], type = ""response"")
test[, `:=`(Survived, ifelse(fitted.results > 0.5, 1, 0))]
my_solution <- test[, .(PassengerId, Survived)]
write.csv(my_solution, row.names = FALSE, file = ""my_solution.csv"")
str(train)
str(test)
all <- rbind(train, test[, `:=`(Survived, 0)])
apply(all, 2, function(x) sum(is.na(x)))
all[is.na(Embarked), `:=`(Embarked, ""S"")]
all[is.na(Fare), `:=`(Fare, median(all[, Fare], na.rm = TRUE))]
all[, `:=`(FamSize, SibSp + Parch)]
all[, `:=`(Title, gsub("" "", """", strsplit(Name, split = ""[,.]"")[[1]][2])), by = PassengerId]
all[Title %in% c(""Mme"", ""Mlle""), `:=`(Title, ""Mlle"")]
all[Title %in% c(""Capt"", ""Don"", ""Major"", ""Sir""), `:=`(Title, ""Sir"")]
all[Title %in% c(""Dona"", ""Lady"", ""the Countess"", ""Jonkheer""), `:=`(Title, ""Lady"")]
all[, `:=`(Title, as.factor(Title))]
all[, `:=`(Embarked, as.factor(Embarked))]
all[, `:=`(Sex, as.factor(Sex))]
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamSize, data = all[!is.na(Age), ], method = ""anova"")
all[is.na(Age), `:=`(Age, predict(predicted_age, all[is.na(Age), ]))]
apply(all, 2, function(x) sum(is.na(x)))
all[, `:=`(Sex, as.numeric(factor(Sex)))]
all[, `:=`(Title, as.numeric(factor(Title)))]
all[, `:=`(Embarked, as.numeric(factor(Embarked)))]
model <- glm(Survived ~ Pclass + Age + Sex, family = binomial(link = ""logit""), data = train)
summary(model)
fitted.results <- predict(model, newdata = test[, .(Pclass, Age, Sex)], type = ""response"")
test[, `:=`(Survived, ifelse(fitted.results > 0.5, 1, 0))]
my_solution <- test[, .(PassengerId, Survived)]
write.csv(my_solution, row.names = FALSE, file = ""my_solution.csv"")",0,0,0,0,0,0,0,0,0,1,0,0,0,0
268,samuelh-barebones-titanic-logistic-regression-test,0.7340000000000001,"['abs', 'as.integer', 'as.logical', 'as.numeric', 'c', 'data.frame', 'factor', 'format', 'ifelse', 'library', 'missing', 'on.exit', 'paste0', 'sapply', 'summary', 'system', 'mutate', 'select', 'pairs', 'par', 'strwidth', 'text', 'mice', 'read_csv', 'write_csv', 'cor', 'glm', 'predict.glm', 'str_extract', 'head']","['ggplot2', 'readr', 'tidyverse', 'mice', 'base']",4.46237301826477,"['missing', 'as.logical', 'on.exit', 'write_csv', 'cor', 'glm', 'format', 'summary', 'text', 'sapply', 'mice', 'str_extract', 'factor', 'as.integer', 'paste0', 'par', 'read_csv', 'abs', 'c', 'predict.glm', 'mutate', 'as.numeric', 'ifelse', 'pairs', 'data.frame', 'head', 'strwidth', 'library', 'select', 'system']",[],"['rkumar3147-exploring-survival-on-the-titanic1', 'vizcharlie-exploring-survival-on-the-titanic', 'cganxs-is-62-the-right-titanic-model-threshold', 'hertan-titanic-surviving-dataset-simple-expression', 'jaimisk-titanic-survival-logistic-regression', 'vishaljindal0-titanic-r-code', 'djohnbar-the-titanic-using-knn', 'danr87946-titanic-practice', 'rennocks-titanicmodel', 'andrecn-random-forest-caret-model-prediction-titanic']","[0.5267277246860085, 0.5267277246860085, 0.4919466986885739, 0.47949031182891333, 0.3896422210327055, 0.3870677940607138, 0.36347401174167, 0.35891323283463805, 0.2779580157837705, 0.24855070877260285]","{'package:base': ['abs', 'as.integer', 'as.logical', 'as.numeric', 'c', 'data.frame', 'factor', 'format', 'ifelse', 'library', 'missing', 'on.exit', 'paste0', 'sapply', 'summary', 'system'], 'package:dplyr': ['mutate', 'select'], 'package:graphics': ['pairs', 'par', 'strwidth', 'text'], 'package:mice': ['mice'], 'package:readr': ['read_csv', 'write_csv'], 'package:stats': ['cor', 'glm', 'predict.glm'], 'package:stringr': ['str_extract'], 'package:utils': ['head']}","{""package:base"": [""abs"", ""as.integer"", ""as.logical"", ""as.numeric"", ""c"", ""data.frame"", ""factor"", ""format"", ""ifelse"", ""library"", ""missing"", ""on.exit"", ""paste0"", ""sapply"", ""summary"", ""system""], ""package:dplyr"": [""mutate"", ""select""], ""package:graphics"": [""pairs"", ""par"", ""strwidth"", ""text""], ""package:mice"": [""mice""], ""package:readr"": [""read_csv"", ""write_csv""], ""package:stats"": [""cor"", ""glm"", ""predict.glm""], ""package:stringr"": [""str_extract""], ""package:utils"": [""head""]}",packagebase abs asinteger aslogical asnumeric c dataframe factor format ifelse library missing onexit paste0 sapply summary system packagedplyr mutate select packagegraphics pairs par strwidth text packagemice mice packagereadr readcsv writecsv packagestats cor glm predictglm packagestringr strextract packageutils head,"library(ggplot2)
library(readr)
system(""ls ../input"")
library(tidyverse)
library(mice)
df.train = read_csv(""../input/train.csv"")
df.test = read_csv(""../input/test.csv"")
df.example = read_csv(""../input/gender_submission.csv"")
df.train %>% head(100)
df.train %>% sapply(class)
summary(df.train)
df.example %>% head(10)
df.example %>% sapply(class)
summary(df.example)
df.train2 = df.train %>% mutate(Cabin = ifelse(Cabin == """", NA, Cabin)) %>% mutate(Embarked = ifelse(Embarked == """", NA, Embarked)) %>% mutate(Pclass = factor(Pclass), Sex = factor(Sex), age_minor = Age < 18, cabin_code = factor(str_extract(Cabin, ""[A-Z]+"")), Embarked = factor(Embarked)) %>% select(PassengerId, Survived, Pclass, Sex, age_minor, Fare, cabin_code, Embarked)
df.test2 = df.test %>% mutate(Cabin = ifelse(Cabin == """", NA, Cabin)) %>% mutate(Embarked = ifelse(Embarked == """", NA, Embarked)) %>% mutate(Pclass = factor(Pclass), Sex = factor(Sex), age_minor = Age < 18, cabin_code = factor(str_extract(Cabin, ""[A-Z]+"")), Embarked = factor(Embarked)) %>% select(PassengerId, Pclass, Sex, age_minor, Fare, cabin_code, Embarked)
df.train3 = mice(df.train2) %>% complete %>% mutate(age_minor = as.logical(age_minor))
df.test3 = mice(df.test2) %>% complete %>% mutate(age_minor = as.logical(age_minor))
panel.cor <- function(x, y, digits = 2, prefix = """", cex.cor, ...) {
    usr <- par(""usr"")
    on.exit(par(usr))
    par(usr = c(0, 1, 0, 1))
    r <- abs(cor(x, y, use = ""complete.obs""))
    txt <- format(c(r, 0.123456789), digits = digits)[1]
    txt <- paste0(prefix, txt)
    if (missing(cex.cor)) 
        cex.cor <- 0.8/strwidth(txt)
    text(0.5, 0.5, txt, cex = cex.cor * r)
}
df.train3 %>% select(-PassengerId) %>% pairs(upper.panel = panel.cor)
model.logit = glm(Survived ~ Pclass + Sex + age_minor + Fare + cabin_code + Embarked, data = df.train3, family = binomial)
summary(model.logit)
vt.predicted <- predict.glm(object = model.logit, newdata = df.test3, type = ""response"")
df.submission = data.frame(PassengerId = as.integer(df.test3$PassengerId), Survived = as.numeric(vt.predicted > 0.5))
df.submission
write_csv(df.submission, ""logistic_reg_sub_ex.csv"")",0,0,0,1,0,0,0,0,0,0,0,0,0,0
270,rjhere23-predictive-analysis-of-survival-rate-on-titanic,0.758,"['as.integer', 'c', 'cut', 'data.frame', 'factor', 'is.na', 'length', 'library', 'mean', 'names', 'nchar', 'options', 'rbind', 'rep', 'round', 'sample', 'set.seed', 'strsplit', 'sum', 'table', 'tapply', 'svm', 'aes', 'geom_histogram', 'ggplot', 'barplot', 'hist', 'par', 'randomForest', 'rpart', 'glm', 'median', 'na.omit', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['dplyr', 'ggplot2', 'ggthemes', 'randomForest', 'rpart', 'e1071', 'base']",2.75277304649353,"['mean', 'median', 'nchar', 'svm', 'is.na', 'glm', 'names', 'options', 'na.omit', 'rpart', 'round', 'rep', 'geom_histogram', 'hist', 'str', 'set.seed', 'factor', 'as.integer', 'cut', 'length', 'read.csv', 'table', 'par', 'randomForest', 'c', 'aes', 'rbind', 'sample', 'sum', 'predict', 'write.csv', 'data.frame', 'strsplit', 'tapply', 'ggplot', 'head', 'library', 'barplot']",[],"['vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic', 'kapillehar-titanic-rf-prediction-0-81818', 'vikasht34-titanic-rf-prediction-0-81818', 'ashutoshds-titanic-rf-prediction-0-81818', 'delasupreme-titanic-data-analysis-rf-prediction-0-81818', 'pranaytiwari-titanic-data-analysis-rf-prediction-0-81818', 'imendoza-titanic-rf-prediction']","[0.9971127351624687, 0.9971127351624687, 0.8524237054336411, 0.8524237054336411, 0.47454560355475534, 0.47454560355475534, 0.4633414128962, 0.40946240470686857, 0.40946240470686857, 0.40946240470686857]","{'package:base': ['as.integer', 'c', 'cut', 'data.frame', 'factor', 'is.na', 'length', 'library', 'mean', 'names', 'nchar', 'options', 'rbind', 'rep', 'round', 'sample', 'set.seed', 'strsplit', 'sum', 'table', 'tapply'], 'package:e1071': ['svm'], 'package:ggplot2': ['aes', 'geom_histogram', 'ggplot'], 'package:graphics': ['barplot', 'hist', 'par'], 'package:randomForest': ['randomForest'], 'package:rpart': ['rpart'], 'package:stats': ['glm', 'median', 'na.omit', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""package:base"": [""as.integer"", ""c"", ""cut"", ""data.frame"", ""factor"", ""is.na"", ""length"", ""library"", ""mean"", ""names"", ""nchar"", ""options"", ""rbind"", ""rep"", ""round"", ""sample"", ""set.seed"", ""strsplit"", ""sum"", ""table"", ""tapply""], ""package:e1071"": [""svm""], ""package:ggplot2"": [""aes"", ""geom_histogram"", ""ggplot""], ""package:graphics"": [""barplot"", ""hist"", ""par""], ""package:randomForest"": [""randomForest""], ""package:rpart"": [""rpart""], ""package:stats"": [""glm"", ""median"", ""na.omit"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",packagebase asinteger c cut dataframe factor isna length library mean names nchar options rbind rep round sample setseed strsplit sum table tapply packagee1071 svm packageggplot2 aes geomhistogram ggplot packagegraphics barplot hist par packagerandomForest randomForest packagerpart rpart packagestats glm median naomit predict packageutils head readcsv str writecsv,"library(""dplyr"")
library(""ggplot2"")
library(""ggthemes"")
options(warn = -1)
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
test$Survived <- NA
full <- rbind(train, test)
head(full)
str(full)
age <- full$Age
n = length(age)
set.seed(123)
for (i in 1:n) {
    if (is.na(age[i])) {
        age[i] = sample(na.omit(full$Age), 1)
    }
}
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Before Replacement"", col = ""lightblue"", ylim = c(0, 0.04), xlab = ""age"")
hist(age, freq = F, main = ""After Replacement"", col = ""darkblue"", ylim = c(0, 0.04))
cabin <- full$Cabin
n = length(cabin)
for (i in 1:n) {
    if (nchar(cabin[i]) == 0) {
        cabin[i] = 0
    }
    else {
        s = strsplit(cabin[i], "" "")
        cabin[i] = length(s[[1]])
    }
}
table(cabin)
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
embarked <- full$Embarked
n = length(embarked)
for (i in 1:n) {
    if (embarked[i] != ""S"" && embarked[i] != ""C"" && embarked[i] != ""Q"") {
        embarked[i] = ""S""
    }
}
table(embarked)
d <- data.frame(Age = age[1:891], Survived = train$Survived)
ggplot(d, aes(Age, fill = factor(Survived))) + geom_histogram()
cuts <- cut(d$Age, hist(d$Age, 10, plot = F)$breaks)
rate <- tapply(d$Survived, cuts, mean)
d2 <- data.frame(age = names(rate), rate)
barplot(d2$rate, xlab = ""age"", ylab = ""survival rate"")
ggplot(train, aes(Sex, fill = factor(Survived))) + geom_histogram(stat = ""count"")
tapply(train$Survived, train$Sex, mean)
n = length(full$Survived)
title = rep(NA, n)
for (i in 1:n) {
    lastname = strsplit(full$Name[i], "", "")[[1]][2]
    title[i] = strsplit(lastname, "". "")[[1]][1]
}
d <- data.frame(title = title[1:891], Survived = train$Survived)
ggplot(d, aes(title, fill = factor(Survived))) + geom_histogram(stat = ""count"")
table(title)
tapply(d$Survived, d$title, mean)
title[title != ""Mr"" & title != ""Miss"" & title != ""Mrs"" & title != ""Master""] <- ""Rare""
table(title)
ggplot(train, aes(Pclass, fill = factor(Survived))) + geom_histogram(stat = ""count"")
tapply(train$Survived, train$Pclass, mean)
ggplot(train, aes(Parch, fill = factor(Survived))) + geom_histogram(stat = ""count"")
ggplot(train, aes(SibSp, fill = factor(Survived))) + geom_histogram(stat = ""count"")
family <- full$SibSp + full$Parch
d <- data.frame(family = family[1:891], Survived = train$Survived)
ggplot(d, aes(family, fill = factor(Survived))) + geom_histogram(stat = ""count"")
tapply(d$Survived, d$family, mean)
d <- data.frame(Cabin = cabin[1:891], Survived = train$Survived)
ggplot(d, aes(Cabin, fill = factor(Survived))) + geom_histogram(stat = ""count"")
tapply(d$Survived, d$Cabin, mean)
ggplot(train, aes(Fare, fill = factor(Survived))) + geom_histogram()
cuts <- cut(train$Fare, hist(train$Fare, 10, plot = F)$breaks)
rate <- tapply(train$Survived, cuts, mean)
d <- data.frame(fare = names(rate), rate)
barplot(d$rate, xlab = ""fare"", ylab = ""survival rate"")
d <- data.frame(Embarked = embarked[1:891], Survived = train$Survived)
ggplot(d, aes(Embarked, fill = factor(Survived))) + geom_histogram(stat = ""count"")
tapply(train$Survived, train$Embarked, mean)
f.survived = train$Survived
f.age = age[1:891]
t.age = age[892:1309]
f.fare = full$Fare[1:891]
t.fare = full$Fare[892:1309]
f.cabin = cabin[1:891]
t.cabin = cabin[892:1309]
f.title = title[1:891]
t.title = title[892:1309]
family <- full$SibSp + full$Parch
f.family = family[1:891]
t.family = family[892:1309]
f.pclass = train$Pclass
t.pclass = test$Pclass
f.sex = train$Sex
t.sex = test$Sex
f.embarked = embarked[1:891]
t.embarked = embarked[892:1309]
new_train = data.frame(survived = f.survived, age = f.age, fare = f.fare, sex = f.sex, embarked = f.embarked, family = f.family, title = f.title, cabin = f.cabin, pclass = f.pclass)
fit_logit <- glm(factor(survived) ~ age + fare + sex + embarked + family + title + cabin + pclass, data = new_train, family = binomial)
ans_logit = rep(NA, 891)
for (i in 1:891) {
    ans_logit[i] = round(fit_logit$fitted.values[[i]], 0)
}
mean(ans_logit == train$Survived)
table(ans_logit)
library(""randomForest"")
set.seed(123)
fit_rf <- randomForest(factor(survived) ~ age + fare + sex + embarked + family + title + cabin + pclass, data = new_train)
rf.fitted = predict(fit_rf)
ans_rf = rep(NA, 891)
for (i in 1:891) {
    ans_rf[i] = as.integer(rf.fitted[[i]]) - 1
}
mean(ans_rf == train$Survived)
table(ans_rf)
library(rpart)
fit_dt <- rpart(factor(survived) ~ age + fare + sex + embarked + family + title + cabin + pclass, data = new_train)
dt.fitted = predict(fit_dt)
ans_dt = rep(NA, 891)
for (i in 1:891) {
    if (dt.fitted[i, 1] >= dt.fitted[i, 2]) {
        ans_dt[i] = 0
    }
    else {
        ans_dt[i] = 1
    }
}
mean(ans_dt == train$Survived)
table(ans_dt)
library(e1071)
fit_svm <- svm(factor(survived) ~ age + fare + sex + embarked + family + title + cabin + pclass, data = new_train)
svm.fitted = predict(fit_svm)
ans_svm = rep(NA, 891)
for (i in 1:891) {
    ans_svm[i] = as.integer(svm.fitted[[i]]) - 1
}
mean(ans_svm == train$Survived)
table(ans_svm)
a = sum(ans_logit == 1 & f.survived == 1)
b = sum(ans_logit == 1 & f.survived == 0)
c = sum(ans_logit == 0 & f.survived == 1)
d = sum(ans_logit == 0 & f.survived == 0)
data.frame(a, b, c, d)
a = sum(ans_rf == 1 & f.survived == 1)
b = sum(ans_rf == 1 & f.survived == 0)
c = sum(ans_rf == 0 & f.survived == 1)
d = sum(ans_rf == 0 & f.survived == 0)
data.frame(a, b, c, d)
a = sum(ans_dt == 1 & f.survived == 1)
b = sum(ans_dt == 1 & f.survived == 0)
c = sum(ans_dt == 0 & f.survived == 1)
d = sum(ans_dt == 0 & f.survived == 0)
data.frame(a, b, c, d)
a = sum(ans_svm == 1 & f.survived == 1)
b = sum(ans_svm == 1 & f.survived == 0)
c = sum(ans_svm == 0 & f.survived == 1)
d = sum(ans_svm == 0 & f.survived == 0)
data.frame(a, b, c, d)
test_data_set <- data.frame(age = t.age, fare = t.fare, sex = t.sex, embarked = t.embarked, family = t.family, title = t.title, cabin = t.cabin, pclass = t.pclass)
svm_predict = predict(fit_svm, newdata = test_data_set)
ans_svm_predict = rep(NA, 418)
for (i in 1:418) {
    ans_svm_predict[i] = as.integer(svm_predict[[i]]) - 1
}
table(ans_svm_predict)
d <- data.frame(PassengerId = test$PassengerId, Survived = ans_svm_predict)
write.csv(d, file = ""TitanicResult.csv"", row.names = F)",1,0,0,0,0,0,0,0,0,1,0,1,0,0
271,qianbi-titanic-rpart-3,0.763,"['c', 'gsub', 'ifelse', 'is.na', 'lapply', 'library', 'sapply', 'table', 'bind_rows', 'rpart', 'predict', 'read.csv', 'write.csv']","['dplyr', 'rpart', 'base']",3.59496212005615,"['gsub', 'ifelse', 'predict', 'write.csv', 'bind_rows', 'lapply', 'read.csv', 'table', 'rpart', 'library', 'sapply', 'c', 'is.na']",[],"['venkatko-titanic-survival1', 'qianbi-titanic-rpart-2', 'abedben-exploring-survival-on-the-titanic', 'qianbi-titanic-logistic-2', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'tetyama-trial-titanic', 'arunkumarramanan-data-science-in-r-and-titanic-survival-prediction', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n']","[0.801837215441806, 0.8004070715276985, 0.7935043459963382, 0.7926898504610425, 0.7917714314152894, 0.7904992620282469, 0.7899676407373523, 0.7898360307671792, 0.7891946450312174, 0.7891946450312174]","{'package:base': ['c', 'gsub', 'ifelse', 'is.na', 'lapply', 'library', 'sapply', 'table'], 'package:dplyr': ['bind_rows'], 'package:rpart': ['rpart'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""c"", ""gsub"", ""ifelse"", ""is.na"", ""lapply"", ""library"", ""sapply"", ""table""], ""package:dplyr"": [""bind_rows""], ""package:rpart"": [""rpart""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase c gsub ifelse isna lapply library sapply table packagedplyr bindrows packagerpart rpart packagestats predict packageutils readcsv writecsv,"library(dplyr)
library(rpart)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE, na.strings = """")
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE, na.strings = """")
full <- bind_rows(train, test)
full$Title <- gsub(""^.*, |\\. .*$"", """", full$Name)
Mr <- c(""Col"", ""Don"", ""Jonkheer"", ""Sir"")
Mrs <- c(""Dona"", ""Lady"", ""Mme"", ""the Countess"")
Miss <- c(""Mlle"", ""Ms"")
full$Title[full$Title %in% Mr] <- ""Mr""
full$Title[full$Title %in% Mrs] <- ""Mrs""
full$Title[full$Title %in% Miss] <- ""Miss""
full$Fsize <- full$SibSp + full$Parch + 1
full$FsizeD[full$Fsize == 1] <- ""Singleton""
full$FsizeD[full$Fsize > 1 & full$Fsize < 5] <- ""Small""
full$FsizeD[full$Fsize > 4] <- ""Large""
full$Child <- ifelse(full$Age <= 12, 1, 0)
full$Mother <- ifelse(full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss"", 1, 0)
full$nTicket[!is.na(full$Ticket)] <- sapply(full$Ticket[!is.na(full$Ticket)], function(e) table(full$Ticket)[[e]])
full$fTicket <- full$Ticket
full$fTicket[full$nTicket == 1] <- NA
full$fTicket[!full$fTicket %in% full$fTicket[1:891]] <- NA
full$nCabin[!is.na(full$Cabin)] <- sapply(full$Cabin[!is.na(full$Cabin)], function(e) table(full$Cabin)[[e]])
full$fCabin <- full$Cabin
full$fCabin[full$nCabin == 1] <- NA
full$fCabin[!full$fCabin %in% full$fCabin[1:891]] <- NA
full$Fare[full$Fare[!is.na(full$Fare)] == 0] <- NA
factor_var <- c(""Survived"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""FsizeD"", ""Child"", ""Mother"", ""fTicket"", ""fCabin"")
full[factor_var] <- lapply(full[factor_var], factor)
train <- full[1:891, ]
test <- full[892:1309, ]
fit <- rpart(Survived ~ Pclass + Sex + Age + Fare + Embarked + Title + FsizeD + Child + Mother + fTicket + fCabin, data = train, method = ""class"")
res <- predict(fit, newdata = test)
test$Survived <- ifelse(res[, 1] < res[, 2], 1, 0)
write.csv(test[, c(1, 2)], file = ""Titanic_rpart_3.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,1,0,0,0,0
272,maitree-titanic-survival-list-using-random-forest,0.483,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.factor', 'as.numeric', 'c', 'class', 'data.frame', 'factor', 'is.na', 'length', 'library', 'mean', 'names', 'nrow', 'rbind', 'rep', 'replace', 'return', 'sapply', 'strsplit', 'subset', 'sum', 'summary', 'system', 'which', 'aes', 'geom_bar', 'ggplot', 'position_dodge', 'randomForest', 'predict', 'read.csv', 'str', 'write.csv']","['ggplot2', 'readr', 'ggplot2', 'dplyr', 'randomForest', 'base']",1.08771085739136,"['nrow', 'mean', 'replace', 'which', 'as.character', 'is.na', 'subset', 'names', 'class', 'as.factor', 'summary', 'sapply', 'rep', 'str', 'factor', 'position_dodge', 'geom_bar', 'length', 'read.csv', 'randomForest', 'return', 'c', 'aes', 'rbind', 'as.numeric', 'sum', 'predict', 'write.csv', 'data.frame', 'strsplit', 'ggplot', 'user defined', 'library', 'system']",[],"['maitree-titanic-survival-list-using-classification', 'mrstepanovic-using-random-forests-to-identify-titanic-survivors', 'tosnaldo10-titanic-challange', 'erskumars-titanic-survival-eda-and-survival-rate-prediction', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'amodi8-titanic-exploring-survival-using-machine-learning', 'jacekpardyak-mytitanicscript', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic']","[0.9908302848690036, 0.9375256144339168, 0.9231016571844601, 0.12583970882138945, 0.117702585135249, 0.11734500571844435, 0.11415408539412188, 0.11238999984227659, 0.1105320952713266, 0.1105320952713266]","{'character(0)': ['cabin_no', 'mean_class'], 'package:base': ['as.character', 'as.factor', 'as.numeric', 'c', 'class', 'data.frame', 'factor', 'is.na', 'length', 'library', 'mean', 'names', 'nrow', 'rbind', 'rep', 'replace', 'return', 'sapply', 'strsplit', 'subset', 'sum', 'summary', 'system', 'which'], 'package:ggplot2': ['aes', 'geom_bar', 'ggplot', 'position_dodge'], 'package:randomForest': ['randomForest'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""character(0)"": [""cabin_no"", ""mean_class""], ""package:base"": [""as.character"", ""as.factor"", ""as.numeric"", ""c"", ""class"", ""data.frame"", ""factor"", ""is.na"", ""length"", ""library"", ""mean"", ""names"", ""nrow"", ""rbind"", ""rep"", ""replace"", ""return"", ""sapply"", ""strsplit"", ""subset"", ""sum"", ""summary"", ""system"", ""which""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""ggplot"", ""position_dodge""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",character0 cabinno meanclass packagebase ascharacter asfactor asnumeric c class dataframe factor isna length library mean names nrow rbind rep replace return sapply strsplit subset sum summary system which packageggplot2 aes geombar ggplot positiondodge packagerandomForest randomForest packagestats predict packageutils readcsv str writecsv,"library(ggplot2)
library(readr)
system(""ls ../input"")
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
sapply(train, function(x) sum(is.na(x)))
sapply(train, function(x) summary(is.na(x)))
train1 <- train
train$Survived <- NULL
combo <- rbind(train, test)
library(ggplot2)
ggplot(data = combo, aes(x = factor(Pclass), y = Age, fill = factor(Pclass))) + geom_bar(stat = ""identity"", position = position_dodge())
ggplot(combo, aes(Age, fill = factor(Pclass))) + geom_bar(binwidth = 1, position = position_dodge())
mean_class <- function(class) {
    classvec <- subset(combo, Pclass == class)
    mean_age <- mean(classvec$Age, na.rm = TRUE)
    return(mean_age)
}
l_age <- length(combo$Age)
library(dplyr)
i <- 1
for (i in 1:l_age) {
    if (is.na(combo$Age[i]) == TRUE) {
        class_value <- combo$Pclass[i]
        combo$Age[i] <- mean_class(class_value)
    }
}
ggplot(combo, aes(Fare, fill = factor(Pclass))) + geom_bar(stat = ""identity"", position = position_dodge(), binwidth = 5)
fare_na_index <- which(is.na(combo$Fare))
df <- subset(combo, Pclass = 3)
vec <- df$Fare
mean(vec, na.rm = TRUE)
combo$Fare[fare_na_index] <- mean(vec, na.rm = TRUE)
cabin_no <- function(string) {
    return(length(strsplit(string, "" "")[[1]]))
}
l_cabin <- length(combo$Cabin)
combo$Cabin <- as.character(combo$Cabin)
l <- 0
for (l in 1:l_cabin) {
    cabin_string <- combo$Cabin[l]
    if (cabin_string == "" "") {
        combo$Cabin[l] <- 0
    }
    else {
        cabin_count <- cabin_no(cabin_string)
        combo$Cabin[l] <- cabin_count
    }
}
combo$Cabin <- as.numeric(combo$Cabin)
combo$Sex <- factor(x = combo$Sex, labels = c(1, 2))
combo$Embarked <- replace(combo$Embarked, combo$Embarked == """", ""S"")
combo$Embarked <- factor(x = combo$Embarked, labels = c(1, 2, 3))
names(combo)
combo$family <- combo$SibSp + combo$Parch
combo$SibSp <- NULL
combo$Parch <- NULL
combo$Name <- NULL
combo$Ticket <- NULL
names(combo)
nrow(train)
nrow(test)
train <- combo[1:891, ]
test <- combo[892:1309, ]
train$Survived <- train1$Survived
names(train)
library(randomForest)
train$Survived <- as.character(train$Survived)
train$Survived <- as.factor(train$Survived)
classifier <- randomForest(x = train[-8], y = train$Survived, ntree = 500)
class(train$Survived)
test$Survived <- rep(c(0, 1))
test$Survived <- as.factor(test$Survived)
str(train)
str(test)
y_pred = predict(classifier, newdata = test)
test$Survived <- y_pred
submit <- data.frame(test$PassengerId, test$Survived)
names(submit) <- c(""PassengerId"", ""Survived"")
write.csv(submit, file = ""survivalRF.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
273,utkarsh1997-kaggle-titanic-rf,0.763,"['as.data.frame', 'as.factor', 'attributes', 'colnames', 'dim', 'is.na', 'library', 'ncol', 'print', 'rbind', 'sum', 'summary', 'table', 'hist', 'plot', 'randomForest', 'treesize', 'varImpPlot', 'median', 'predict', 'head', 'read.csv', 'str', 'tail', 'write.csv']","['randomForest', 'caret', 'lubridate', 'lattice', 'ggplot2', 'base']",2.18018198013306,"['median', 'is.na', 'print', 'ncol', 'as.factor', 'summary', 'varImpPlot', 'str', 'hist', 'colnames', 'dim', 'read.csv', 'table', 'randomForest', 'as.data.frame', 'tail', 'rbind', 'sum', 'plot', 'predict', 'write.csv', 'head', 'treesize', 'attributes', 'library']",[],"['paulbisto-r-titanic-script-practice', 'predact-easy-r-titanic-predictive-model', 'suraj915-titanic-suraj', 'pradeeptripathi-prediction-of-titanic-survival-using-random-forest', 'pradeeptripathi-prediction-of-titanic-survival-using-r', 'pavani2018-titanicr-random-forests', 'lokesharun-titanic', 'mailakshdeep-titanic-survival-prediction-r', 'acrespop-titanic1', 'hisnibs-titanic-enhancing-the-training-data-and-kis']","[0.9573997138530091, 0.9460666543109195, 0.9403899713163916, 0.9170546030009129, 0.9170535879080536, 0.9077087151541804, 0.8733736921272887, 0.8196507883367948, 0.8033081048366797, 0.7297754820857529]","{'package:base': ['as.data.frame', 'as.factor', 'attributes', 'colnames', 'dim', 'is.na', 'library', 'ncol', 'print', 'rbind', 'sum', 'summary', 'table'], 'package:graphics': ['hist', 'plot'], 'package:randomForest': ['randomForest', 'treesize', 'varImpPlot'], 'package:stats': ['median', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'tail', 'write.csv']}","{""package:base"": [""as.data.frame"", ""as.factor"", ""attributes"", ""colnames"", ""dim"", ""is.na"", ""library"", ""ncol"", ""print"", ""rbind"", ""sum"", ""summary"", ""table""], ""package:graphics"": [""hist"", ""plot""], ""package:randomForest"": [""randomForest"", ""treesize"", ""varImpPlot""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""tail"", ""write.csv""]}",packagebase asdataframe asfactor attributes colnames dim isna library ncol print rbind sum summary table packagegraphics hist plot packagerandomForest randomForest treesize varImpPlot packagestats median predict packageutils head readcsv str tail writecsv,"titanic.train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
titanic.test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
str(titanic.train)
str(titanic.train)
summary(titanic.train)
summary(titanic.train)
sum(is.na(titanic.train))
sum(is.na(titanic.train$Age))
table(titanic.train$Embarked)
sum(is.na(titanic.train$Fare))
sum(is.na(titanic.test))
sum(is.na(titanic.test$Age))
table(titanic.test$Embarked)
sum(is.na(titanic.test$Fare))
ncol(titanic.train)
ncol(titanic.test)
titanic.train$isTrainSet <- TRUE
titanic.test$isTrainSet <- FALSE
colnames(titanic.train)
colnames(titanic.test)
titanic.test$Survived <- NA
dim(titanic.train)
dim(titanic.test)
Titanic.full <- rbind(titanic.train, titanic.test)
418 + 891
sum(is.na(Titanic.full))
table(Titanic.full$Embarked)
Titanic.full[Titanic.full$Embarked == """", ""Embarked""] <- ""S""
table(is.na(Titanic.full$Age))
sum(is.na(Titanic.full$Age))
titanic.age_median <- median(Titanic.full$Age, na.rm = TRUE)
Titanic.full[is.na(Titanic.full$Age), ""Age""] <- titanic.age_median
table(is.na(Titanic.full$Fare))
sum(is.na(Titanic.full$Fare))
titanic.fare_median <- median(Titanic.full$Fare, na.rm = TRUE)
Titanic.full[is.na(Titanic.full$Fare), ""Fare""] <- titanic.fare_median
Titanic.full$Pclass <- as.factor(Titanic.full$Pclass)
Titanic.full$Sex <- as.factor(Titanic.full$Sex)
Titanic.full$Embarked <- as.factor(Titanic.full$Embarked)
str(Titanic.full)
titanic.train <- Titanic.full[Titanic.full$isTrainSet == TRUE, ]
titanic.test <- Titanic.full[Titanic.full$isTrainSet == FALSE, ]
sum(is.na(titanic.train$Age))
sum(is.na(titanic.train$Fare))
sum(is.na(titanic.train$Embarked))
sum(is.na(titanic.test$Age))
sum(is.na(titanic.test$Fare))
sum(is.na(titanic.test$Embarked))
sum(is.na(titanic.train))
sum(is.na(titanic.test))
titanic.train$isTrainSet <- NULL
titanic.test$isTrainSet <- NULL
titanic.test$Survived <- NULL
titanic.train$Survived <- as.factor(titanic.train$Survived)
colnames(titanic.train)
library(randomForest)
rf <- randomForest(formula = Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = titanic.train, ntree = 300)
print(rf)
attributes(rf)
library(caret)
library(lubridate)
library(lattice)
library(ggplot2)
prd.train <- predict(rf, titanic.train)
print(head(prd.train))
prd.test <- predict(rf, titanic.test)
print(head(prd.test))
print(tail(prd.test))
plot(rf)
PassengerId <- titanic.test$PassengerId
str(PassengerId)
PassengerId.df <- as.data.frame(PassengerId)
str(PassengerId.df)
PassengerId.df$Survived <- prd.test
tail(PassengerId.df)
write.csv(PassengerId.df, file = ""Titanic_Kaggle_Submission.csv"", row.names = FALSE)
hist(treesize(rf), main = ""no of nodes per tress"", col = ""green"")
varImpPlot(rf)
varImpPlot(rf, sort = TRUE, n.var = 5)",1,0,1,0,0,0,0,1,0,0,0,0,0,0
274,birudvora-test-titanic,0.7440000000000001,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'system', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",30.192813873291,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'facet_grid', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'write.csv', 'library', 'system']",[],"['mhamano-titanic-r-script', 'rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic', 'datascikrid-exploring-survival-on-the-titanic', 'anishmayaramka-the-titanic-datset']","[0.9996650413650733, 0.9995511894352215, 0.9995511894352215, 0.9995511894352215, 0.9995511894352215, 0.9995511894352215, 0.9995511894352215, 0.9995511894352215, 0.9995511894352215, 0.9995511894352215]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'system', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""system"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum system table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
system(""ls ../input"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
275,windowbyryeol-kernel-titanic,0.763,"['setdiff', 'print', 'summary', 'user defined', 'user defined', 'user defined', 'as.factor', 'as.numeric', 'as.ordered', 'c', 'cat', 'ifelse', 'is.na', 'length', 'library', 'list.files', 'nrow', 'rbind', 'sample', 'sapply', 'set.seed', 'sum', 'with', 'glimpse', 'aes', 'geom_bar', 'geom_label', 'ggplot', 'labs', 'theme', 'sqldf', 'glm', 'predict', 'install.packages', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ISLR', 'MASS', 'glmnet', 'randomForest', 'gbm', 'rpart', 'boot', 'dplyr', 'sqldf', 'base']",19.9503271579742,"['labs', 'as.ordered', 'nrow', 'geom_label', 'install.packages', 'cat', 'glimpse', 'theme', 'is.na', 'glm', 'sqldf', 'print', 'as.factor', 'summary', 'sapply', 'str', 'set.seed', 'setdiff', 'geom_bar', 'length', 'read.csv', 'c', 'aes', 'rbind', 'sample', 'as.numeric', 'ifelse', 'sum', 'predict', 'write.csv', 'list.files', 'ggplot', 'user defined', 'library', 'with']",[],"['vishnusaiv-titanic-data-analysis', 'xuhuiz0918-initial-eda-and-lm-on-titanic-dataset', 'divyasshree-titanic-ml-club', 'dleprovost-simple-titanic-exploration', 'dascanvas-titanic-random-forest', 'karlkonz-exploring-the-titanic-dataset-with-r', 'retrospectprospect-titanic-machine-learning-from-eda-to-xgb', 'rtreit-kaggle-titanic-tutorial', 'ravikrishnareddy-titanic-survival-prediction', 'vasuls-predictive-analysis-of-survival-rate-on-titanic']","[0.5255189500547878, 0.5141351714417186, 0.45874880543673263, 0.36181099693718416, 0.21156741852214958, 0.1521474659507101, 0.13957466532627102, 0.13730250927145146, 0.13329706542400746, 0.11999781118243541]","{'c(""package:dplyr"", ""package:base"")': ['setdiff'], 'c(""package:Matrix"", ""package:base"")': ['print', 'summary'], 'character(0)': ['`?`'], 'package:base': ['as.factor', 'as.numeric', 'as.ordered', 'c', 'cat', 'ifelse', 'is.na', 'length', 'library', 'list.files', 'nrow', 'rbind', 'sample', 'sapply', 'set.seed', 'sum', 'with'], 'package:dplyr': ['glimpse'], 'package:ggplot2': ['aes', 'geom_bar', 'geom_label', 'ggplot', 'labs', 'theme'], 'package:sqldf': ['sqldf'], 'package:stats': ['glm', 'predict'], 'package:utils': ['install.packages', 'read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:base"")"": [""setdiff""], ""c(""package:Matrix"", ""package:base"")"": [""print"", ""summary""], ""character(0)"": [""`?`""], ""package:base"": [""as.factor"", ""as.numeric"", ""as.ordered"", ""c"", ""cat"", ""ifelse"", ""is.na"", ""length"", ""library"", ""list.files"", ""nrow"", ""rbind"", ""sample"", ""sapply"", ""set.seed"", ""sum"", ""with""], ""package:dplyr"": [""glimpse""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""geom_label"", ""ggplot"", ""labs"", ""theme""], ""package:sqldf"": [""sqldf""], ""package:stats"": [""glm"", ""predict""], ""package:utils"": [""install.packages"", ""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagebase setdiff cpackageMatrix packagebase print summary character0  packagebase asfactor asnumeric asordered c cat ifelse isna length library listfiles nrow rbind sample sapply setseed sum with packagedplyr glimpse packageggplot2 aes geombar geomlabel ggplot labs theme packagesqldf sqldf packagestats glm predict packageutils installpackages readcsv str writecsv,"install.packages(c(""ggplot2"", ""ISLR"", ""MASS"", ""glmnet"", ""randomForest"", ""gbm"", ""rpart"", ""boot""))
install.packages(""dplyr"")
library(ggplot2)
library(ISLR)
library(MASS)
library(glmnet)
library(randomForest)
library(gbm)
library(rpart)
library(boot)
library(dplyr)
select <- dplyr::select
titanic_train <- read.csv(""../input/train.csv"", stringsAsFactors = F, na.strings = c(""NA"", """"))
titanic_test <- read.csv(""../input/test.csv"", stringsAsFactors = F, na.strings = c(""NA"", """"))
`?`(read.csv)
glimpse(titanic_train)
str(titanic_train)
glimpse(titanic_test)
titanic_test$Survived <- NA
titanic_all <- rbind(titanic_train, titanic_test)
titanic_all$Sex <- as.factor(titanic_all$Sex)
titanic_all$Survived <- as.factor(titanic_all$Survived)
titanic_all$Pclass <- as.ordered(titanic_all$Pclass)
sapply(titanic_all, function(x) {
    sum(is.na(x))
})
sapply(titanic_train, function(x) {
    sum(is.na(x))
})
ggplot(titanic_train[!is.na(titanic_train$Survived), ], aes(x = Survived, fill = Survived)) + geom_bar(stat = ""count"") + labs(x = ""타이타닉 생존"") + geom_label(stat = ""count"", aes(label = ..count..), size = 7)
ggplot(titanic_train, aes(x = Sex, fill = Sex)) + geom_bar(stat = ""count"", position = ""dodge"")
labs(x = ""train_성별"") + geom_label(stat = ""count"", aes(label = ..count..))
ggplot(titanic_train, aes(x = Pclass, fill = Pclass)) + geom_bar(stat = ""count"", position = ""dodge"") + labs(x = ""Pclass, train_좌석등급"") + geom_label(stat = ""count"", aes(label = ..count..)) + theme(legend.position = ""none"")
install.packages(""sqldf"")
library(sqldf)
sqldf(""select *, (Survived/Total)\n       from( select A.Survived, B.Total, A.sex \n             from(select count(*) Survived, Sex\n                  from titanic_train\n                  where Survived = 1\n                  group by Sex ) A\n             inner join (select count(*) Total, Sex\n                    from titanic_train\n                    group by Sex) B\n        on A.Sex = B.Sex \n       ) T\n      "")
sqldf(""select *, (Survived/Total)\n       from(select A.Survived, B.Total, A.Pclass \n            from(select count(*) Survived, Pclass\n                 from titanic_train\n                 where Survived = 1 \n                 group by Pclass) A\n                  inner join (select count(*) Total, Pclass\n                              from titanic_train\n                              group by Pclass) B\n        on A.Pclass = B.Pclass \n      ) T\n      "")
sqldf(""select *\n       from (select A.Survived, B.Total, A.Pclass, A.Sex \n            from (select count(*) Survived, Pclass, Sex\n                  from titanic_train\n                  where Survived = 1 \n                  group by Sex, Pclass) A\n                    inner join (select count(*) Total, Pclass, Sex\n                                from titanic_train\n                                group by Sex, Pclass) B\n                  on A.Pclass = B.Pclass \n                  and A.Sex = B.Sex\n            ) T\n     "")
sqldf(""select A.sibsp, Survived, Total\n       from (select sibsp, count(*) Survived \n             from titanic_train \n             where Survived = 1\n             group by sibsp) A \n       inner join ( select sibsp, count(*) Total \n                     from titanic_train \n                     group by sibsp\n                    ) B\n        on A.sibsp = B.sibsp \n      "")
sqldf(""select A.Parch, Survived, Total\n       from (select Parch, count(*) Survived \n             from titanic_train \n             where Survived = 1\n             group by Parch) A \n       inner join ( select Parch, count(*) Total \n                    from titanic_train \n                    group by Parch\n                  ) B\n       on A.Parch = B.Parch \n      "")
sqldf(""select A.Embarked, Survived, Total\n       from (select Embarked, count(*) Survived \n            from titanic_train \n            where Survived = 1\n            group by Embarked) A \n            inner join ( select Embarked, count(*) Total \n                          from titanic_train \n                          group by Embarked\n                          ) B\n      on A.Embarked = B.Embarked \n      "")
set.seed(1777)
n <- nrow(titanic_train)
idx <- 1:n
`?`(sample)
training_idx <- sample(idx, n * 0.8)
validate_idx <- setdiff(idx, training_idx)
length(training_idx)
length(validate_idx)
training <- titanic_train[training_idx, ]
validation <- titanic_train[validate_idx, ]
glm_first <- glm(Survived ~ Age + Pclass + Sex + SibSp + Parch + Fare, data = training, family = binomial)
summary(glm_first)
glm_predictions <- predict(glm_first, newdata = validation, type = ""response"")
validation$pred_survived <- as.numeric(glm_predictions > 0.5)
validation$pred_survived <- ifelse(is.na(validation$pred_survived), 0, validation$pred_survived)
print(validation$pred_survived)
got_right <- with(validation, pred_survived == Survived)
got_wrong <- with(validation, pred_survived != Survived)
n_right <- sum(got_right, na.rm = TRUE)
n_wrong <- sum(got_wrong, na.rm = TRUE)
accuracy <- n_right/(n_right + n_wrong)
cat(""accuracy: "", accuracy, ""\n"")
titanic_test$Survived <- ifelse(predict(glm_first, titanic_test, type = ""response"") > 0.5, 1, 0)
titanic_test$Survived <- ifelse(is.na(titanic_test$Survived), 0, titanic_test$Survived)
submission <- titanic_test[, c(""PassengerId"", ""Survived"")]
glimpse(submission)
write.csv(submission, ""submission.csv"", row.names = FALSE)
print(list.files())",1,0,0,0,0,1,1,0,0,1,0,0,0,0
276,jnrahul92-titanic-analysis-using-logistic-regression,0.7490000000000001,"['filter', 'as.character', 'as.factor', 'c', 'class', 'colSums', 'data.frame', 'factor', 'gsub', 'ifelse', 'is.na', 'library', 'names', 'nrow', 'sum', 'summary', 'table', 'trimws', 'unique', 'which', 'vif', 'summarise', 'aes', 'geom_boxplot', 'geom_histogram', 'ggplot', 'hist', 'par', 'complete', 'mice', 'glm', 'median', 'predict', 'read.csv', 'str', 'View', 'write.csv']","['dplyr', 'ggplot2', 'mice', 'car', 'base']",3.96882390975952,"['summarise', 'nrow', 'complete', 'median', 'which', 'as.character', 'is.na', 'glm', 'colSums', 'names', 'vif', 'geom_boxplot', 'class', 'as.factor', 'summary', 'filter', 'mice', 'geom_histogram', 'hist', 'str', 'gsub', 'View', 'factor', 'unique', 'read.csv', 'table', 'par', 'c', 'aes', 'ifelse', 'sum', 'predict', 'write.csv', 'data.frame', 'ggplot', 'library', 'trimws']",[],"['shashankseth-basic-eda-and-ml-on-titanic-dataset', 'mullayilkannan-randomforest-with-knn-imputation-titanic', 'alamgirm-predicting-survival-on-titanic-dataset', 'paulocressoni-titanic-using-stepwise-linear-regression', 'jeetranjeet619-titanic-dataset-play-around-in-r', 'nithishthirmul-titanic-data-test1', 'ilijaf-titanic', 'skhawaja-titanic-disaster-survival-099', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic']","[0.17994653308185354, 0.10350046651824588, 0.09770630084463258, 0.07079390342469152, 0.06568591254125718, 0.056977121259178774, 0.052192023205253346, 0.052021276447915606, 0.04897624850401922, 0.04897624850401922]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.character', 'as.factor', 'c', 'class', 'colSums', 'data.frame', 'factor', 'gsub', 'ifelse', 'is.na', 'library', 'names', 'nrow', 'sum', 'summary', 'table', 'trimws', 'unique', 'which'], 'package:car': ['vif'], 'package:dplyr': ['summarise'], 'package:ggplot2': ['aes', 'geom_boxplot', 'geom_histogram', 'ggplot'], 'package:graphics': ['hist', 'par'], 'package:mice': ['complete', 'mice'], 'package:stats': ['glm', 'median', 'predict'], 'package:utils': ['read.csv', 'str', 'View', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.character"", ""as.factor"", ""c"", ""class"", ""colSums"", ""data.frame"", ""factor"", ""gsub"", ""ifelse"", ""is.na"", ""library"", ""names"", ""nrow"", ""sum"", ""summary"", ""table"", ""trimws"", ""unique"", ""which""], ""package:car"": [""vif""], ""package:dplyr"": [""summarise""], ""package:ggplot2"": [""aes"", ""geom_boxplot"", ""geom_histogram"", ""ggplot""], ""package:graphics"": [""hist"", ""par""], ""package:mice"": [""complete"", ""mice""], ""package:stats"": [""glm"", ""median"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""View"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase ascharacter asfactor c class colSums dataframe factor gsub ifelse isna library names nrow sum summary table trimws unique which packagecar vif packagedplyr summarise packageggplot2 aes geomboxplot geomhistogram ggplot packagegraphics hist par packagemice complete mice packagestats glm median predict packageutils readcsv str View writecsv,"training_set <- read.csv(""../input/train.csv"", na.strings = """")
test_set <- read.csv(""../input/test.csv"", na.strings = """")
library(dplyr)
library(ggplot2)
library(mice)
library(car)
summary(training_set)
names(training_set)
str(training_set)
class(training_set$Survived)
training_set$Survived <- factor(training_set$Survived, labels = c(0, 1))
View(training_set)
colSums(is.na(training_set))
training_set$Title <- gsub(""(.*,)|(\\..*)"", """", training_set$Name)
test_set$Title <- gsub(""(.*,)|(\\..*)"", """", test_set$Name)
training_set$Title <- trimws(training_set$Title)
test_set$Title <- trimws(test_set$Title)
table(training_set$Sex, training_set$Title)
table(test_set$Sex, test_set$Title)
rare_title <- c(""Capt"", ""Col"", ""Don"", ""Jonkheer"", ""Lady"", ""Major"", ""Rev"", ""Sir"", ""the Countess"", ""Dona"", ""Dr"")
training_set$Title[training_set$Title == ""Mlle""] <- ""Miss""
training_set$Title[training_set$Title == ""Ms""] <- ""Miss""
training_set$Title[training_set$Title == ""Mme""] <- ""Mrs""
training_set$Title[training_set$Title %in% rare_title] <- ""Rare Title""
test_set$Title[test_set$Title == ""Mlle""] <- ""Miss""
test_set$Title[test_set$Title == ""Ms""] <- ""Miss""
test_set$Title[test_set$Title == ""Mme""] <- ""Mrs""
test_set$Title[test_set$Title %in% rare_title] <- ""Rare Title""
table(training_set$Sex, training_set$Title)
table(test_set$Sex, test_set$Title)
training_set$familysize <- training_set$Parch + training_set$SibSp + 1
test_set$familysize <- test_set$Parch + test_set$SibSp + 1
ggplot(data = training_set, aes(x = familysize, fill = Survived)) + geom_histogram(bins = 10, position = ""dodge"")
training_set$FSizeD <- ifelse(training_set$familysize == 1, ""Singleton"", ifelse(training_set$familysize < 5, ""small"", ""large""))
test_set$FSizeD <- ifelse(test_set$familysize == 1, ""Singleton"", ifelse(test_set$familysize < 5, ""small"", ""large""))
sum(is.na(training_set$Cabin))
sum(is.na(test_set$Cabin))
training_set$Cabin_1 <- ifelse(is.na(training_set$Cabin), ""Missing"", as.character(training_set$Cabin))
test_set$Cabin_1 <- ifelse(is.na(test_set$Cabin), ""Missing"", as.character(test_set$Cabin))
sum(is.na(training_set$Cabin_1))
sum(is.na(test_set$Cabin_1))
training_set <- training_set[, -11]
test_set <- test_set[, -10]
colSums(is.na(training_set))
colSums(is.na(test_set))
index1 <- which(is.na(training_set$Embarked))
training_set[index1, ]
unique(training_set$Pclass)
unique(training_set$Embarked)
ggplot(data = training_set, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot()
training_set[index1, ""Embarked""] <- ""C""
colSums(is.na(training_set))
colSums(is.na(test_set))
index2 <- which(is.na(test_set$Fare))
test_set[index2, ]
test_set %>% filter(Pclass == 3 & Embarked == ""S"") %>% summarise(median(x = Fare, na.rm = T))
test_set[index2, ""Fare""] <- 8.05
colSums(is.na(training_set))
colSums(is.na(test_set))
training_set$PassengerId <- as.factor(training_set$PassengerId)
training_set$Sex <- as.factor(training_set$Sex)
training_set$Pclass <- as.factor(training_set$Pclass)
training_set$Embarked <- as.factor(training_set$Embarked)
training_set$Title <- as.factor(training_set$Title)
training_set$FSizeD <- as.factor(training_set$FSizeD)
training_set$Cabin_1 <- as.factor(training_set$Cabin_1)
test_set$PassengerId <- as.factor(test_set$PassengerId)
test_set$Sex <- as.factor(test_set$Sex)
test_set$Pclass <- as.factor(test_set$Pclass)
test_set$Embarked <- as.factor(test_set$Embarked)
test_set$Title <- as.factor(test_set$Title)
test_set$FSizeD <- as.factor(test_set$FSizeD)
test_set$Cabin_1 <- as.factor(test_set$Cabin_1)
str(training_set)
mice_mod <- mice(training_set[, !names(training_set) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin_1"", ""Survived"")], method = ""rf"")
mice_ouput <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(training_set$Age)
hist(mice_ouput$Age)
training_set$Age <- mice_ouput$Age
mice_mod2 <- mice(test_set[, !names(test_set) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin_1"")], method = ""rf"")
mice_ouput2 <- complete(mice_mod2)
par(mfrow = c(1, 2))
hist(test_set$Age)
hist(mice_ouput2$Age)
test_set$Age <- mice_ouput2$Age
colSums(is.na(training_set))
colSums(is.na(test_set))
training_set$Child <- ifelse(training_set$Age < 18, 1, 0)
test_set$Child <- ifelse(test_set$Age < 18, 1, 0)
training_set$Child <- as.factor(training_set$Child)
test_set$Child <- as.factor(test_set$Child)
mod <- glm(Survived ~ ., training_set[-c(1, 4, 9)], family = ""binomial"")
summary(mod)
unique(training_set$Title)
training_set$Mr <- ifelse(training_set$Title == ""Mr"", 1, 0)
training_set$Mrs <- ifelse(training_set$Title == ""Mrs"", 1, 0)
training_set$Miss <- ifelse(training_set$Title == ""Miss"", 1, 0)
training_set$Master <- ifelse(training_set$Title == ""Master"", 1, 0)
training_set$RareTitle <- ifelse(training_set$Title == ""Rare Title"", 1, 0)
training_set <- training_set[-12]
test_set$Mr <- ifelse(test_set$Title == ""Mr"", 1, 0)
test_set$Mrs <- ifelse(test_set$Title == ""Mrs"", 1, 0)
test_set$Miss <- ifelse(test_set$Title == ""Miss"", 1, 0)
test_set$Master <- ifelse(test_set$Title == ""Master"", 1, 0)
test_set$RareTitle <- ifelse(test_set$Title == ""Rare Title"", 1, 0)
test_set <- test_set[-11]
mod3 <- glm(Survived ~ Master + Sex + Age + Pclass + FSizeD, data = training_set, family = ""binomial"")
summary(mod3)
vif(mod3)
pred <- predict(object = mod3, newdata = test_set, type = ""response"")
table(training_set$Survived)/nrow(training_set)
test_set$Survived <- ifelse(pred > 0.5, 1, 0)
solution <- data.frame(PassengerID = test_set$PassengerId, Survived = test_set$Survived)
write.csv(solution, ""Log_Solution.csv"", row.names = F)",0,0,0,1,0,0,0,1,0,0,0,0,0,0
277,srinivasarajui-srini-s-r-titanic-solution,0.758,"['as.factor', 'c', 'data.frame', 'factor', 'is.na', 'library', 'nrow', 'prop.table', 'set.seed', 'table', 'plot', 'text', 'randomForest', 'fancyRpartPlot', 'rpart', 'rpart.control', 'median', 'predict', 'read.csv', 'str', 'write.csv']","['rpart', 'rattle', 'rpart.plot', 'RColorBrewer', 'rpart', 'randomForest', 'base']",2.14763307571411,"['nrow', 'median', 'is.na', 'rpart.control', 'prop.table', 'rpart', 'as.factor', 'text', 'str', 'set.seed', 'factor', 'read.csv', 'table', 'randomForest', 'fancyRpartPlot', 'c', 'plot', 'predict', 'write.csv', 'data.frame', 'library']",[],"['frankfeng-titanic', 'wongalan2002-titanic-with-neural-network', 'aer503-titanic-exploring-survival-and-random-forest-test', 'juverstraeten-titanic-test-5-decision-tree-w-cabin', 'parthchaudhary-titanic-submission', 'jkevin2010-titanic-survival-using-decision-trees', 'alwortman-titanic-test-script', 'alexgomes3-titanic-with-r-datacamp-tutorial', 'jkevin2010-improved-model-for-titanic-survival', 'researchbigd-titanic-r-researchbigd']","[0.6690654309381864, 0.6345993166496086, 0.5737158560669717, 0.5390786785945582, 0.5286093601867965, 0.48197591470928614, 0.47941764051135105, 0.4465784292773819, 0.44472768521202877, 0.4328283526838356]","{'package:base': ['as.factor', 'c', 'data.frame', 'factor', 'is.na', 'library', 'nrow', 'prop.table', 'set.seed', 'table'], 'package:graphics': ['plot', 'text'], 'package:randomForest': ['randomForest'], 'package:rattle': ['fancyRpartPlot'], 'package:rpart': ['rpart', 'rpart.control'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""as.factor"", ""c"", ""data.frame"", ""factor"", ""is.na"", ""library"", ""nrow"", ""prop.table"", ""set.seed"", ""table""], ""package:graphics"": [""plot"", ""text""], ""package:randomForest"": [""randomForest""], ""package:rattle"": [""fancyRpartPlot""], ""package:rpart"": [""rpart"", ""rpart.control""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase asfactor c dataframe factor isna library nrow proptable setseed table packagegraphics plot text packagerandomForest randomForest packagerattle fancyRpartPlot packagerpart rpart rpartcontrol packagestats median predict packageutils readcsv str writecsv,"train_url <- ""http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/train.csv""
train <- read.csv(train_url)
test_url <- ""http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/test.csv""
test <- read.csv(test_url)
train
test
str(train)
str(test)
table(train$Survived)
prop.table(table(train$Survived))
table(train$Sex, train$Survived)
prop.table(table(train$Sex, train$Survived), margin = 1)
prop.table(table(train$Sex, train$Survived), margin = 2)
str(train)
str(test)
train$Child <- NA
train$Child[train$Age < 18] <- ""Child""
train$Child[train$Age >= 18] <- ""Adult""
prop.table(table(train$Child, train$Survived), margin = 1)
str(train)
str(test)
test_one <- test
test_one$Survived <- 0
test_one$Survived[test_one$Sex == ""female""] <- 1
library(rpart)
str(train)
str(test)
my_tree_two <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = ""class"")
plot(my_tree_two)
text(my_tree_two)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(my_tree_two)
my_prediction <- predict(my_tree_two, test, type = ""class"")
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
nrow(my_solution)
write.csv(my_solution, file = ""my_solution.csv"", row.names = FALSE)
my_tree_three <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = ""class"", control = rpart.control(minsplit = 50, cp = 0))
fancyRpartPlot(my_tree_three)
train_two <- train
train_two$family_size <- train_two$SibSp + train_two$Parch + 1
my_tree_four <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + family_size, data = train_two, method = ""class"")
fancyRpartPlot(my_tree_four)
my_tree_five <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title, data = train_new, method = ""class"")
fancyRpartPlot(my_tree_five)
my_prediction <- predict(my_tree_five, test_new, type = ""class"")
my_solution <- data.frame(PassengerId = test_new$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = ""my_solution.csv"", row.names = FALSE)
all_data
all_data$Embarked[c(62, 830)] <- ""S""
all_data$Embarked <- factor(all_data$Embarked)
all_data$Fare[1044] <- median(all_data$Fare, na.rm = TRUE)
library(rpart)
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + family_size, data = all_data[!is.na(all_data$Age), ], method = ""anova"")
all_data$Age[is.na(all_data$Age)] <- predict(predicted_age, all_data[is.na(all_data$Age), ])
train <- all_data[1:891, ]
test <- all_data[892:1309, ]
str(train)
str(test)
library(randomForest)
str(train)
str(test)
set.seed(111)
my_forest <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title, data = train, importance = TRUE, ntree = 1000)
my_prediction <- predict(my_forest, test)
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = ""my_solution2.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
278,vishaljindal0-titanic-r-code,0.7559999999999999,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.data.frame', 'as.factor', 'c', 'cbind', 'colnames', 'colSums', 'dim', 'factor', 'getwd', 'is.na', 'levels', 'library', 'list', 'mean', 'names', 'nrow', 'seq', 'strsplit', 'substring', 'summary', 'table', 'trimws', 'which', 'which.max', 'recode', 'dummyVars', 'as.data.table', 'fwrite', 'setnames', 'aes', 'geom_bar', 'geom_histogram', 'ggplot', 'xlab', 'ylab', 'plot', 'randomForest', 'tuneRF', 'aggregate', 'predict', 'read.csv', 'str']","['car', 'ggplot2', 'data.table', 'earth', 'caret', 'car', 'randomForest', 'rpart.plot', 'caret', 'e1071', 'data.table', 'gbm', 'ranger', 'caTools', 'base']",5.76865291595459,"['nrow', 'list', 'mean', 'which.max', 'setnames', 'which', 'recode', 'as.character', 'is.na', 'levels', 'colSums', 'names', 'as.factor', 'summary', 'dummyVars', 'geom_histogram', 'str', 'xlab', 'factor', 'colnames', 'dim', 'aggregate', 'tuneRF', 'geom_bar', 'read.csv', 'table', 'randomForest', 'getwd', 'as.data.frame', 'substring', 'c', 'fwrite', 'aes', 'ylab', 'plot', 'predict', 'seq', 'strsplit', 'ggplot', 'user defined', 'library', 'trimws', 'cbind', 'as.data.table']",[],"['rkumar3147-exploring-survival-on-the-titanic1', 'vizcharlie-exploring-survival-on-the-titanic', 'hertan-titanic-surviving-dataset-simple-expression', 'cganxs-is-62-the-right-titanic-model-threshold', 'jaimisk-titanic-survival-logistic-regression', 'samuelh-barebones-titanic-logistic-regression-test', 'djohnbar-the-titanic-using-knn', 'danr87946-titanic-practice', 'rennocks-titanicmodel', 'andrecn-random-forest-caret-model-prediction-titanic']","[0.5039922764933844, 0.5039922764933844, 0.45278782650681354, 0.43809183395991735, 0.3893303065913523, 0.3870677940607138, 0.33066610238632027, 0.3213656554104641, 0.24295174068002656, 0.2396466249800761]","{'character(0)': ['Age_Na_Treatment_Test', 'Age_Na_Treatment_Train', 'mode_embarked'], 'package:base': ['as.character', 'as.data.frame', 'as.factor', 'c', 'cbind', 'colnames', 'colSums', 'dim', 'factor', 'getwd', 'is.na', 'levels', 'library', 'list', 'mean', 'names', 'nrow', 'seq', 'strsplit', 'substring', 'summary', 'table', 'trimws', 'which', 'which.max'], 'package:car': ['recode'], 'package:caret': ['dummyVars'], 'package:data.table': ['as.data.table', 'fwrite', 'setnames'], 'package:ggplot2': ['aes', 'geom_bar', 'geom_histogram', 'ggplot', 'xlab', 'ylab'], 'package:graphics': ['plot'], 'package:randomForest': ['randomForest', 'tuneRF'], 'package:stats': ['aggregate', 'predict'], 'package:utils': ['read.csv', 'str']}","{""character(0)"": [""Age_Na_Treatment_Test"", ""Age_Na_Treatment_Train"", ""mode_embarked""], ""package:base"": [""as.character"", ""as.data.frame"", ""as.factor"", ""c"", ""cbind"", ""colnames"", ""colSums"", ""dim"", ""factor"", ""getwd"", ""is.na"", ""levels"", ""library"", ""list"", ""mean"", ""names"", ""nrow"", ""seq"", ""strsplit"", ""substring"", ""summary"", ""table"", ""trimws"", ""which"", ""which.max""], ""package:car"": [""recode""], ""package:caret"": [""dummyVars""], ""package:data.table"": [""as.data.table"", ""fwrite"", ""setnames""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""geom_histogram"", ""ggplot"", ""xlab"", ""ylab""], ""package:graphics"": [""plot""], ""package:randomForest"": [""randomForest"", ""tuneRF""], ""package:stats"": [""aggregate"", ""predict""], ""package:utils"": [""read.csv"", ""str""]}",character0 AgeNaTreatmentTest AgeNaTreatmentTrain modeembarked packagebase ascharacter asdataframe asfactor c cbind colnames colSums dim factor getwd isna levels library list mean names nrow seq strsplit substring summary table trimws which whichmax packagecar recode packagecaret dummyVars packagedatatable asdatatable fwrite setnames packageggplot2 aes geombar geomhistogram ggplot xlab ylab packagegraphics plot packagerandomForest randomForest tuneRF packagestats aggregate predict packageutils readcsv str,"TrainTitanic = read.csv(""../input/train.csv"", header = TRUE, na.strings = c("""", "" "", ""NA""))
str(TrainTitanic)
TrainTitanic$Survived = as.factor(TrainTitanic$Survived)
TrainTitanic$Pclass = as.factor(TrainTitanic$Pclass)
summary(TrainTitanic)
colSums(is.na(TrainTitanic))
library(car)
library(ggplot2)
library(data.table)
TrainTitanic$Age[is.na(TrainTitanic$Age)] = mean(TrainTitanic$Age, na.rm = TRUE)
ggplot(TrainTitanic, aes(x = Age, fill = factor(Survived))) + geom_histogram(breaks = seq(0, 80, by = 4), colour = ""black"") + xlab(""Age"") + ylab(""Passengers"")
ggplot(TrainTitanic, aes(x = Survived, fill = Sex)) + geom_bar()
ggplot(TrainTitanic, aes(x = Fare, fill = factor(Survived))) + geom_histogram(breaks = seq(0, 550, by = 10), colour = ""black"") + xlab(""Fare"") + ylab(""Passengers"")
Fare_mean_Pclass = aggregate(TrainTitanic$Fare, list(TrainTitanic$Pclass), mean)
colnames(Fare_mean_Pclass) <- c(""pclass"", ""mean"")
ggplot(Fare_mean_Pclass, aes(x = pclass, y = mean)) + geom_bar(stat = ""identity"")
plot(TrainTitanic$Age, TrainTitanic$Fare, pch = 9, col = c(""red"", ""green"")[TrainTitanic$Survived])
ggplot(TrainTitanic, aes(x = Survived, fill = Embarked)) + geom_bar()
Train = read.csv(""../input/train.csv"", header = TRUE, na.strings = c("""", "" "", ""NA""))
Train$Name = as.character(Train$Name)
Train$Survived = as.factor(Train$Survived)
Train$Pclass = as.factor(Train$Pclass)
str(Train)
for (i in 1:nrow(Train)) {
    Train$Title[i] <- as.character(trimws(strsplit(strsplit(Train$Name[i], "","")[[1]][2], ""[.]"")[[1]][1]))
}
table(Train$Title)
Train$Title = as.factor(Train$Title)
Train$Title = recode(Train$Title, ""c('Don','Jonkheer','Lady','Sir','the Countess','Don','Capt','Col','Major','Dr','Rev')='Less';\n       c('Miss','Mlle','Ms')='Miss';c('Mrs','Mme')='Mrs'"")
colSums(is.na(Train))
aggregate(x = Train$Age, by = list(Train$Sex, Train$Pclass, Train$Title), FUN = mean, na.rm = TRUE)
Age_Na_Treatment_Train <- function(df) {
    for (i in 1:nrow(df)) {
        if (is.na(df$Age[i])) {
            if (df$Sex[i] == ""female"" && df$Pclass[i] == 1) {
                if (df$Title[i] == ""Less"") {
                  df$Age[i] = 43.33
                }
                else if (df$Title[i] == ""Miss"") {
                  df$Age[i] = 29.74
                }
                else if (df$Title[i] == ""Mrs"") {
                  df$Age[i] = 40.4
                }
            }
            else if (df$Sex[i] == ""female"" && df$Pclass[i] == 2) {
                if (df$Title[i] == ""Miss"") {
                  df$Age[i] = 22.56
                }
                else if (df$Title[i] == ""Mrs"") {
                  df$Age[i] = 33.68
                }
            }
            else if (df$Sex[i] == ""female"" && df$Pclass[i] == 3) {
                if (df$Title[i] == ""Miss"") {
                  df$Age[i] = 16.12
                }
                else if (df$Title[i] == ""Mrs"") {
                  df$Age[i] = 33.51
                }
            }
            else if (df$Sex[i] == ""male"" && df$Pclass[i] == 1) {
                if (df$Title[i] == ""Less"") {
                  df$Age[i] = 48.7272
                }
                else if (df$Title[i] == ""Master"") {
                  df$Age[i] = 5.3
                }
                else if (df$Title[i] == ""Mr"") {
                  df$Age[i] = 41.58
                }
            }
            else if (df$Sex[i] == ""male"" && df$Pclass[i] == 2) {
                if (df$Title[i] == ""Less"") {
                  df$Age[i] = 42
                }
                else if (df$Title[i] == ""Master"") {
                  df$Age[i] = 2.25
                }
                else if (df$Title[i] == ""Mr"") {
                  df$Age[i] = 32.76
                }
            }
            else if (df$Sex[i] == ""male"" && df$Pclass[i] == 3) {
                if (df$Title[i] == ""Master"") {
                  df$Age[i] = 5.35
                }
                else if (df$Title[i] == ""Mr"") {
                  df$Age[i] = 28.72
                }
            }
        }
    }
    df
}
Train_Age_Imputed = Age_Na_Treatment_Train(Train)
colSums(is.na(Train_Age_Imputed))
str(Train_Age_Imputed)
Train_Name_PassId_removed = Train_Age_Imputed[, c(-1, -4)]
colSums(is.na(Train_Name_PassId_removed))
mode_embarked <- function(columnName) {
    max_embarked = table(columnName)
    names(max_embarked[which.max(max_embarked)])
}
mode_embarked(Train_Name_PassId_removed$Embarked)
Train_Name_PassId_removed$Embarked[is.na(Train_Name_PassId_removed$Embarked)] <- mode_embarked(Train_Name_PassId_removed$Embarked)
colSums(is.na(Train_Name_PassId_removed))
Train_Name_PassId_removed$Cabin = factor(Train_Name_PassId_removed$Cabin, levels = c(levels(Train_Name_PassId_removed$Cabin), ""U""))
Train_Name_PassId_removed$Cabin[is.na(Train_Name_PassId_removed$Cabin)] = ""U""
colSums(is.na(Train_Name_PassId_removed))
str(Train_Name_PassId_removed)
for (i in 1:nrow(Train_Name_PassId_removed)) {
    Train_Name_PassId_removed$Cabin_Encoded[i] <- as.character(trimws(substring(Train_Name_PassId_removed$Cabin[i], 1, 1)))
}
Train_Name_PassId_removed$Cabin_Encoded = as.factor(Train_Name_PassId_removed$Cabin_Encoded)
Train_Name_PassId_removed = Train_Name_PassId_removed[, -9]
str(Train_Name_PassId_removed)
for (i in 1:nrow(Train_Name_PassId_removed)) {
    Train_Name_PassId_removed$Family_Size[i] <- Train_Name_PassId_removed$SibSp[i] + Train_Name_PassId_removed$Parch[i] + 1
}
str(Train_Name_PassId_removed)
for (i in 1:nrow(Train_Name_PassId_removed)) {
    if (Train_Name_PassId_removed$Family_Size[i] == 1) {
        Train_Name_PassId_removed$Family_Type[i] = ""Single""
    }
    else if (Train_Name_PassId_removed$Family_Size[i] >= 2 && Train_Name_PassId_removed$Family_Size[i] <= 4) {
        Train_Name_PassId_removed$Family_Type[i] = ""Small""
    }
    else {
        Train_Name_PassId_removed$Family_Type[i] = ""Large""
    }
}
Train_Name_PassId_removed$Family_Type = as.factor(Train_Name_PassId_removed$Family_Type)
str(Train_Name_PassId_removed)
str(Train_Name_PassId_removed)
Train_Name_PassId_removed = Train_Name_PassId_removed[, -7]
Train_Name_PassId_removed = Train_Name_PassId_removed[, c(-11)]
str(Train_Name_PassId_removed)
library(earth)
library(caret)
dummies <- caret::dummyVars(Survived ~ ., data = Train_Name_PassId_removed)
Train_Encoded = predict(dummies, newdata = Train_Name_PassId_removed)
Train_Encoded = as.data.frame(Train_Encoded)
Train_Encoded = cbind(Train_Name_PassId_removed[, 1], Train_Encoded)
setnames(Train_Encoded, ""Train_Name_PassId_removed[, 1]"", ""Survived"")
Test = read.csv(""../input/test.csv"", header = TRUE, na.strings = c("""", "" "", ""NA""))
str(Test)
Test$Pclass = as.factor(Test$Pclass)
Test$Name = as.character(Test$Name)
for (i in 1:nrow(Test)) {
    Test$Title[i] <- as.character(trimws(strsplit(strsplit(Test$Name[i], "","")[[1]][2], ""[.]"")[[1]][1]))
}
table(Test$Title)
library(car)
Test$Title = recode(Test$Title, ""c('Don','Jonkheer','Lady','Sir','the Countess','Don','Dona','Capt','Col','Major','Dr','Rev')='Less';\n                  c('Miss','Mlle','Ms')='Miss';c('Mrs','Mme')='Mrs'"")
Test$Title = as.factor(Test$Title)
colSums(is.na(Test))
aggregate(x = Test$Age, by = list(Test$Sex, Test$Pclass, Test$Title), FUN = mean, na.rm = TRUE)
Age_Na_Treatment_Test <- function(df) {
    for (i in 1:nrow(df)) {
        if (is.na(df$Age[i])) {
            if (df$Sex[i] == ""female"" && df$Pclass[i] == 1) {
                if (df$Title[i] == ""Miss"") {
                  df$Age[i] = 31.42
                }
                else if (df$Title[i] == ""Mrs"") {
                  df$Age[i] = 45.6
                }
                else if (df$Title[i] == ""Less"") {
                  df$Age[i] = 39
                }
            }
            else if (df$Sex[i] == ""female"" && df$Pclass[i] == 2) {
                if (df$Title[i] == ""Miss"") {
                  df$Age[i] = 17.37
                }
                else if (df$Title[i] == ""Mrs"") {
                  df$Age[i] = 33
                }
            }
            else if (df$Sex[i] == ""female"" && df$Pclass[i] == 3) {
                if (df$Title[i] == ""Miss"") {
                  df$Age[i] = 19.87
                }
                else if (df$Title[i] == ""Mrs"") {
                  df$Age[i] = 29.87
                }
            }
            else if (df$Sex[i] == ""male"" && df$Pclass[i] == 1) {
                if (df$Title[i] == ""Less"") {
                  df$Age[i] = 51
                }
                else if (df$Title[i] == ""Master"") {
                  df$Age[i] = 9.5
                }
                else if (df$Title[i] == ""Mr"") {
                  df$Age[i] = 41.2
                }
            }
            else if (df$Sex[i] == ""male"" && df$Pclass[i] == 2) {
                if (df$Title[i] == ""Less"") {
                  df$Age[i] = 35.5
                }
                else if (df$Title[i] == ""Master"") {
                  df$Age[i] = 5
                }
                else if (df$Title[i] == ""Mr"") {
                  df$Age[i] = 31.71
                }
            }
            else if (df$Sex[i] == ""male"" && df$Pclass[i] == 3) {
                if (df$Title[i] == ""Master"") {
                  df$Age[i] = 7.45
                }
                else if (df$Title[i] == ""Mr"") {
                  df$Age[i] = 27.2
                }
            }
        }
    }
    df
}
Test_Age_Imputed = Age_Na_Treatment_Test(Test)
colSums(is.na(Test_Age_Imputed))
str(Test_Age_Imputed)
Test_Name_removed = Test_Age_Imputed[, -3]
str(Test_Name_removed)
colSums(is.na(Test_Name_removed))
Test_Name_removed$Cabin = factor(Test_Name_removed$Cabin, levels = c(levels(Test_Name_removed$Cabin), ""U""))
Test_Name_removed$Cabin[is.na(Test_Name_removed$Cabin)] = ""U""
colSums(is.na(Test_Name_removed))
str(Test_Name_removed)
for (i in 1:nrow(Test_Name_removed)) {
    Test_Name_removed$Cabin_Encoded[i] <- as.character(trimws(substring(Test_Name_removed$Cabin[i], 1, 1)))
}
Test_Name_removed$Cabin_Encoded = as.factor(Test_Name_removed$Cabin_Encoded)
Test_Name_PaTest_Age_Imputed = Test_Name_removed[, -9]
str(Test_Name_PaTest_Age_Imputed)
colSums(is.na(Test_Name_PaTest_Age_Imputed))
Test_Name_PaTest_Age_Imputed$Fare[is.na(Test_Name_PaTest_Age_Imputed$Fare)] = mean(Test_Name_PaTest_Age_Imputed$Fare, na.rm = TRUE)
colSums(is.na(Test_Name_PaTest_Age_Imputed))
for (i in 1:nrow(Test_Name_PaTest_Age_Imputed)) {
    Test_Name_PaTest_Age_Imputed$Family_Size[i] <- Test_Name_PaTest_Age_Imputed$SibSp[i] + Test_Name_PaTest_Age_Imputed$Parch[i] + 1
}
str(Test_Name_PaTest_Age_Imputed)
for (i in 1:nrow(Test_Name_PaTest_Age_Imputed)) {
    if (Test_Name_PaTest_Age_Imputed$Family_Size[i] == 1) {
        Test_Name_PaTest_Age_Imputed$Family_Type[i] = ""Single""
    }
    else if (Test_Name_PaTest_Age_Imputed$Family_Size[i] >= 2 && Test_Name_PaTest_Age_Imputed$Family_Size[i] <= 4) {
        Test_Name_PaTest_Age_Imputed$Family_Type[i] = ""Small""
    }
    else {
        Test_Name_PaTest_Age_Imputed$Family_Type[i] = ""Large""
    }
}
Test_Name_PaTest_Age_Imputed$Family_Type = as.factor(Test_Name_PaTest_Age_Imputed$Family_Type)
str(Test_Name_PaTest_Age_Imputed)
colSums(is.na(Test_Name_PaTest_Age_Imputed))
Test_Name_PaTest_Age_Imputed = Test_Name_PaTest_Age_Imputed[, -7]
str(Test_Name_PaTest_Age_Imputed)
Test_Selected = Test_Name_PaTest_Age_Imputed[, c(-11)]
str(Test_Selected)
dummies_Test <- caret::dummyVars(PassengerId ~ ., data = Test_Selected)
Test_Encoded = predict(dummies_Test, newdata = Test_Selected)
Test_Encoded = as.data.frame(Test_Encoded)
Test_Encoded = cbind(Test_Selected[, 1], Test_Encoded)
setnames(Test_Encoded, ""Test_Selected[, 1]"", ""PassengerId"")
str(Test_Encoded)
str(Train_Encoded)
library(randomForest)
library(rpart.plot)
library(caret)
library(e1071)
Train_Encoded_Selected = Train_Encoded[, which(names(Train_Encoded) %in% c(""Survived"", ""Sex.female"", ""Title.Mr"", ""Fare"", ""Sex.male"", ""Pclass.3"", ""Age"", ""Title.Miss"", ""Title.Master"", ""Title.Mrs"", ""Cabin_Encoded.U"", ""Embarked.S"", ""Family_Type.Small"", ""Family_Type.Large"", ""Embarked.C"", ""Pclass.2"", ""Pclass.1"", ""Cabin_Encoded.E"", ""Embarked.Q"", ""Family_Type.Small""))]
tRF <- tuneRF(x = Train_Encoded_Selected[, -1], y = Train_Encoded_Selected$Survived, mtryStart = 4, ntreeTry = 151, stepFactor = 1.5, improve = 1e-04, trace = TRUE, plot = TRUE, doBest = TRUE, nodesize = 10, importance = TRUE)
dim(Train_Encoded_Selected)
randomForestModel <- randomForest(Survived ~ ., data = Train_Encoded_Selected, ntree = 151, mtry = 3, nodesize = 10, importance = TRUE)
library(data.table)
library(gbm)
library(ranger)
library(caTools)
Survived = predict(randomForestModel, newdata = Test_Encoded, type = ""class"")
submitfile = as.data.table(Survived)
submitfile = cbind(Test_Encoded$PassengerId, submitfile)
submitfile
setnames(submitfile, ""V1"", ""PassengerId"")
submitfile
fwrite(submitfile, ""submitFile.csv"")
getwd()",1,0,1,0,0,0,0,1,0,1,0,1,0,0
280,mailakshdeep-titanic-survival-prediction-r,0.7509999999999999,"['densityplot', 'as.factor', 'c', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'mean', 'names', 'print', 'rep', 'sum', 'summary', 'table', 'which', 'predict.train', 'train', 'trainControl', 'bind_rows', 'aes', 'geom_boxplot', 'geom_hline', 'ggplot', 'theme_few', 'hist', 'par', 'complete', 'md.pattern', 'mice', 'randomForest', 'glm', 'predict', 'read.csv', 'str', 'write.csv', 'aggr']","['readr', 'dplyr', 'ggplot2', 'ggthemes', 'mice', 'randomForest', 'caret', 'VIM', 'base']",37.963541030883796,"['complete', 'densityplot', 'mean', 'lapply', 'md.pattern', 'which', 'is.na', 'glm', 'names', 'geom_boxplot', 'print', 'theme_few', 'as.factor', 'summary', 'mice', 'rep', 'hist', 'str', 'geom_hline', 'gsub', 'factor', 'aggr', 'read.csv', 'table', 'par', 'randomForest', 'train', 'c', 'aes', 'sum', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'ggplot', 'library', 'trainControl', 'predict.train']",[],"['pradeeptripathi-prediction-of-titanic-survival-using-random-forest', 'pradeeptripathi-prediction-of-titanic-survival-using-r', 'lokesharun-titanic', 'utkarsh1997-kaggle-titanic-rf', 'paulbisto-r-titanic-script-practice', 'predact-easy-r-titanic-predictive-model', 'suraj915-titanic-suraj', 'pavani2018-titanicr-random-forests', 'acrespop-titanic1', 'hisnibs-titanic-enhancing-the-training-data-and-kis']","[0.8445153690778266, 0.844509536667054, 0.8210817805269698, 0.8196507883367948, 0.8124805441548573, 0.805331902909992, 0.7842768323517635, 0.7659891350528263, 0.7321276213214911, 0.6979378767239707]","{'c(""package:lattice"", ""package:mice"")': ['densityplot'], 'package:base': ['as.factor', 'c', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'mean', 'names', 'print', 'rep', 'sum', 'summary', 'table', 'which'], 'package:caret': ['predict.train', 'train', 'trainControl'], 'package:dplyr': ['bind_rows'], 'package:ggplot2': ['aes', 'geom_boxplot', 'geom_hline', 'ggplot'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'par'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['randomForest'], 'package:stats': ['glm', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv'], 'package:VIM': ['aggr']}","{""c(""package:lattice"", ""package:mice"")"": [""densityplot""], ""package:base"": [""as.factor"", ""c"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""mean"", ""names"", ""print"", ""rep"", ""sum"", ""summary"", ""table"", ""which""], ""package:caret"": [""predict.train"", ""train"", ""trainControl""], ""package:dplyr"": [""bind_rows""], ""package:ggplot2"": [""aes"", ""geom_boxplot"", ""geom_hline"", ""ggplot""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""par""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""glm"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""], ""package:VIM"": [""aggr""]}",cpackagelattice packagemice densityplot packagebase asfactor c dataframe factor gsub isna lapply library mean names print rep sum summary table which packagecaret predicttrain train trainControl packagedplyr bindrows packageggplot2 aes geomboxplot geomhline ggplot packageggthemes themefew packagegraphics hist par packagemice complete mdpattern mice packagerandomForest randomForest packagestats glm predict packageutils readcsv str writecsv packageVIM aggr,"library(readr)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(mice)
library(randomForest)
library(caret)
titanictrain <- read.csv(""../input/train.csv"", header = TRUE, stringsAsFactors = FALSE)
titanictest <- read.csv(""../input/test.csv"", header = TRUE, stringsAsFactors = FALSE)
titanic = bind_rows(titanictrain, titanictest)
titanic$Surname = gsub(""(,.*)"", """", titanic$Name)
titanic$Title = gsub(""(.*, )|(\\..*)"", """", titanic$Name)
table(titanic$Title)
titanic[titanic$Title %in% c(""Ms"", ""Mlle""), ]$Title = ""Miss""
table(titanic$Title)
titanic[!(titanic$Title %in% c(""Miss"", ""Mr"", ""Mrs"", ""Master"")), ]$Title = ""Special""
table(titanic$Title)
titanic$FamilySize = titanic$SibSp + titanic$Parch + 1
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Survived"")
titanic[factor_vars] <- lapply(titanic[factor_vars], function(x) as.factor(x))
str(titanic)
summary(titanic)
sum(is.na(titanic$Fare))
pcl <- titanic[which(is.na(titanic$Fare)), ]$Pclass
pcl
fillfare <- mean(titanic[!is.na(titanic$Fare) & titanic$Pclass == pcl, ]$Fare)
fillfare
titanic[is.na(titanic$Fare), ]$Fare <- fillfare
sum(is.na(titanic$Fare))
sum(is.na(titanic$Embarked))
titanic[is.na(titanic$Embarked), ]
titanic[is.na(titanic$Embarked), ]$Fare
plot = ggplot(titanic[!is.na(titanic$Embarked), ], aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + theme_few()
titanic[is.na(titanic$Embarked), ]$Embarked
sum(is.na(titanic$Embarked))
sum(is.na(titanic$Age))
md.pattern(titanic)
library(VIM)
aggr_plot = aggr(titanic, col = c(""navyblue"", ""red""), numbers = TRUE, sortVars = TRUE, labels = names(data), cex.axis = 0.7, gap = 3, ylab = c(""Histogram of missing data"", ""Pattern""))
temp_titanic = mice(titanic[, !names(titanic) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""FamilySize"", ""Surname"", ""Survived"")], method = ""rf"", m = 5, maxit = 50, seed = 502)
complete_titanic = complete(temp_titanic)
densityplot(temp_titanic)
par(mfrow = c(1, 2))
hist(titanic$Age, freq = F, col = ""Red"")
hist(complete_titanic$Age, freq = F, col = ""Blue"")
titanic$Age = complete_titanic$Age
sum(is.na(titanic$Age))
titanic$Child[titanic$Age >= 18] = 0
titanic$Child[titanic$Age < 18] = 1
titanic$Child = as.factor(titanic$Child)
train = titanic[1:891, ]
test = titanic[-(1:891), ]
glm.fit = glm(factor(Survived) ~ Pclass + Sex + Age + Embarked + SibSp + Parch + Fare + FamilySize + Child + Title, train, family = binomial, maxit = 100)
summary(glm.fit)
pred = predict(glm.fit, test, type = ""response"")
glm.pred = rep(0, 418)
glm.pred[pred > 0.5] = 1
glm.solution <- data.frame(PassengerID = test$PassengerId, Survived = glm.pred)
glm.solution
write.csv(file = ""GLMSolution.csv"", glm.solution, row.names = F)
rf.fit = randomForest(factor(Survived) ~ Pclass + Sex + Age + Embarked + SibSp + Parch + Fare + FamilySize + Child + Title, train, importance = TRUE)
summary(rf.fit)
rf.pred = predict(rf.fit, test)
rf.solution <- data.frame(PassengerID = test$PassengerId, Survived = rf.pred)
rf.solution
write.csv(file = ""RFSolution.csv"", rf.solution, row.names = F)
tran = titanic[1:891, ]
test = titanic[-(1:891), ]
fit.control = trainControl(method = ""repeatedcv"", number = 5, repeats = 5)
glm.fit = train(y = tran$Survived, x = tran[, c(""Pclass"", ""Sex"", ""Age"", ""Fare"", ""FamilySize"", ""Title"", ""Embarked"", ""SibSp"", ""Parch"", ""Child"")], method = ""glm"", trControl = fit.control)
print(glm.fit)
glm.pred = predict.train(glm.fit, test)
glm.solution <- data.frame(PassengerID = test$PassengerId, Survived = glm.pred)
glm.solution
write.csv(file = ""GLMSolutionCaret.csv"", glm.solution, row.names = F)
rf.fit = train(y = tran$Survived, x = tran[, c(""Pclass"", ""Sex"", ""Age"", ""Fare"", ""FamilySize"", ""Title"", ""Embarked"", ""SibSp"", ""Parch"", ""Child"")], method = ""rf"", trControl = fit.control)
print(rf.fit)
rf.pred = predict.train(rf.fit, test)
rf.solution <- data.frame(PassengerID = test$PassengerId, Survived = rf.pred)
rf.solution
write.csv(file = ""RFSolutionCaret.csv"", rf.solution, row.names = F)",1,0,1,1,0,0,0,1,0,0,0,0,0,0
281,analyticsdojo-titanic-baseline-models-analyticsdojo-r,0.648,"['c', 'names', 'head', 'read.csv', 'write.csv']",['base'],0.235374927520752,"['names', 'write.csv', 'read.csv', 'head', 'c']",[],"['scout16-titanic-disaster-in-r', 'zhaotianjing-titanic', 'jerlinraj-titanic-machine-learning-from-disaster', 'sawajid-titanic-test', 'jacekpardyak-mytitanicscript', 'sudheer464-prediction-1-on-titanic-dataset', 'gravitymhxy2-titanic', 'mihaque313-first-submission-to-titanic-problem', 'overdose-titanic-basic-modelling', 'stevencahill-titanic-machine-learning-from-disaster']","[0.3107773110888978, 0.28937975663698295, 0.2873023229152571, 0.27817905564220075, 0.2731828407725891, 0.27114623436381513, 0.2702499294988333, 0.26322934031549744, 0.2584418778469776, 0.24066430962483013]","{'package:base': ['c', 'names'], 'package:utils': ['head', 'read.csv', 'write.csv']}","{""package:base"": [""c"", ""names""], ""package:utils"": [""head"", ""read.csv"", ""write.csv""]}",packagebase c names packageutils head readcsv writecsv,"train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
head(train)
head(test)
test[""Survived""] = 0
submission = test[, c(""PassengerId"", ""Survived"")]
head(submission)
write.csv(submission, file = ""nosurvivors.csv"", row.names = F)
test[test$Sex == ""male"", ""PredGender""] = 0
test[test$Sex == ""female"", ""PredGender""] = 1
submission = test[, c(""PassengerId"", ""PredGender"")]
names(submission)[2] <- ""Survived""
head(submission)
write.csv(submission, file = ""womensurvive.csv"", row.names = F)",0,0,0,0,1,0,0,0,0,0,0,0,0,0
282,jasminegoel-playing-with-titanic-dataset-r,0.732,"['as.factor', 'c', 'data.frame', 'length', 'library', 'sapply', 'strsplit', 'sub', 'sum', 'system', 'table', 'bind_rows', 'rpart', 'rpart.control', 'prp', 'aggregate', 'predict', 'read.csv', 'str', 'write.csv']","['ggplot2', 'readr', 'dplyr', 'rpart', 'rpart.plot', 'randomForest', 'ggplot2', 'ggthemes', 'base']",1.36377382278442,"['sub', 'rpart.control', 'rpart', 'as.factor', 'sapply', 'str', 'prp', 'aggregate', 'length', 'read.csv', 'table', 'c', 'sum', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'strsplit', 'library', 'system']",[],"['srikantjyrmn-titanic-survivor', 'monfilier-titanic-survival-prediction', 'biohazzzard-titanic-with-tidyverse-and-caret', 'tavoosi-predicting-survival-on-the-titanic-with-rf-lr-nb', 'redroy44-tidy-titanic-script', 'lizpund-titanic-competition-kernel', 'amodi8-titanic-exploring-survival-using-machine-learning', 'paulocressoni-titanic-using-stepwise-linear-regression', 'scout16-titanic-disaster-in-r', 'tobybot11-toby-s-titanic-analysis']","[0.906171867864351, 0.8569233379293605, 0.7500188809705054, 0.7433134951527716, 0.6896624757464074, 0.05933895875158291, 0.058864519725784846, 0.05846068912052133, 0.0520783745517019, 0.05194431408940018]","{'package:base': ['as.factor', 'c', 'data.frame', 'length', 'library', 'sapply', 'strsplit', 'sub', 'sum', 'system', 'table'], 'package:dplyr': ['bind_rows'], 'package:rpart': ['rpart', 'rpart.control'], 'package:rpart.plot': ['prp'], 'package:stats': ['aggregate', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""as.factor"", ""c"", ""data.frame"", ""length"", ""library"", ""sapply"", ""strsplit"", ""sub"", ""sum"", ""system"", ""table""], ""package:dplyr"": [""bind_rows""], ""package:rpart"": [""rpart"", ""rpart.control""], ""package:rpart.plot"": [""prp""], ""package:stats"": [""aggregate"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase asfactor c dataframe length library sapply strsplit sub sum system table packagedplyr bindrows packagerpart rpart rpartcontrol packagerpartplot prp packagestats aggregate predict packageutils readcsv str writecsv,"library(ggplot2)
library(readr)
system(""ls ../input"")
library(dplyr)
library(rpart)
library(rpart.plot)
library(randomForest)
library(ggplot2)
library(ggthemes)
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full_data <- bind_rows(train, test)
str(full_data)
full_data$AgeRange[full_data$Age <= 9] <- ""lessthan9""
full_data$AgeRange[full_data$Age <= 25 & full_data$Age > 9] <- ""bw9and25""
full_data$AgeRange[full_data$Age <= 50 & full_data$Age > 25] <- ""bw25and50""
full_data$AgeRange[full_data$Age > 50] <- ""greaterthan50""
full_data$Title <- sapply(full_data$Name, FUN = function(x) {
    strsplit(x, split = ""[,.]"")[[1]][2]
})
full_data$Title <- sub("" "", """", full_data$Title)
full_data$Title[full_data$Title == ""Mlle""] <- ""Miss""
full_data$Title[full_data$Title == ""Ms""] <- ""Miss""
full_data$Title[full_data$Title == ""Mme""] <- ""Mrs""
high_rank_male <- c(""Capt"", ""Col"", ""Don"", ""Jonkheer"", ""Rev"", ""Sir"")
high_rank_female <- c(""Dona"", ""Lady"", ""the Countess"")
full_data$Title[full_data$Title %in% high_rank_male] <- ""High_rank_male""
full_data$Title[full_data$Title %in% high_rank_female] <- ""High_rank_female""
table(full_data$Title)
full_data$FareRange[full_data$Fare < 10] <- ""lessthan10""
full_data$FareRange[full_data$Fare < 20 & full_data$Fare >= 10] <- ""bw10and20""
full_data$FareRange[full_data$Fare < 30 & full_data$Fare >= 20] <- ""bw20and30""
full_data$FareRange[full_data$Fare >= 30] <- ""morethan30""
table(full_data$FareRange)
full_data$familysize = full_data$SibSp + full_data$Parch + 1
table(full_data$familysize)
full_data$Sex = as.factor(full_data$Sex)
full_data$FareRange = as.factor(full_data$FareRange)
full_data$AgeRange = as.factor(full_data$AgeRange)
mod_train <- full_data[1:891, ]
mod_test <- full_data[892:1309, ]
str(mod_train)
Tree1 <- rpart(Survived ~ Pclass + Sex + AgeRange + FareRange + Embarked + Title + familysize + SibSp + Parch, data = mod_train, method = ""class"", control = rpart.control(minsplit = 2, cp = 0))
prp(Tree1)
Tree1Prediction <- predict(Tree1, mod_test, type = ""class"")
submit <- data.frame(PassengerId = mod_test$PassengerId, Survived = Tree1Prediction)
write.csv(submit, file = ""Tree1Prediction.csv"", row.names = FALSE)
table(mod_test$AgeRange, Tree1Prediction)
aggregate(Survived ~ FareRange + Pclass + Sex, data = mod_train, FUN = function(x) {
    sum(x)/length(x)
})
mod_test2 <- mod_test
table(Tree1Prediction)
mod_test2$Survived <- Tree1Prediction
str(mod_test2)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
283,sudheer464-prediction-1-on-titanic-dataset,0.648,"['data.frame', 'prop.table', 'rep', 'table', 'read.csv', 'str', 'write.csv']",['base'],0.27277898788452104,"['write.csv', 'prop.table', 'data.frame', 'read.csv', 'table', 'rep', 'str']",[],"['zhaotianjing-titanic', 'jerlinraj-titanic-machine-learning-from-disaster', 'sawajid-titanic-test', 'scout16-titanic-disaster-in-r', 'stevencahill-titanic-machine-learning-from-disaster', 'amodi8-titanic-exploring-survival-using-machine-learning', 'mihaque313-first-submission-to-titanic-problem', 'tobybot11-toby-s-titanic-analysis', 'liudj2008-titanic', 'liudj2008-fork-of-titanic']","[0.8017139681741428, 0.7844294517037929, 0.7471574387017648, 0.7136901518959718, 0.7050346206682873, 0.5918477560730513, 0.58368465266433, 0.4797415132918284, 0.43451619192798724, 0.43060804981495104]","{'package:base': ['data.frame', 'prop.table', 'rep', 'table'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""data.frame"", ""prop.table"", ""rep"", ""table""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase dataframe proptable rep table packageutils readcsv str writecsv,"train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
str(train)
str(test)
table(train$Survived)
prop.table(table(train$Survived))
test$Survived <- rep(0, 418)
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, ""1stpred.csv"", row.names = FALSE)",0,0,0,0,1,0,0,0,0,0,0,0,0,0
285,aravind5-titanic,0.7509999999999999,"['as.character', 'c', 'data.frame', 'factor', 'is.na', 'library', 'rbind', 'sapply', 'strsplit', 'sub', 'substr', 'summary', 'rpart', 'rpart.control', 'prp', 'median', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['rpart', 'rpart.plot', 'base']",0.5045478343963621,"['median', 'as.character', 'sub', 'is.na', 'rpart.control', 'rpart', 'summary', 'sapply', 'str', 'prp', 'factor', 'read.csv', 'c', 'rbind', 'predict', 'write.csv', 'data.frame', 'strsplit', 'head', 'substr', 'library']",[],"['ammara-titanic-competition-script-using-rf-2', 'jmercer187-fork-of-titanic2', 'alejandrorivas-titanic-beginners-principiantes-espa-ol', 'ammara-titanic-competition-using-boosting', 'mmaguero-titanic-majority-vote-of-ridge-rf-and-gbm', 'byrony-titanic-majority-vote-of-ridge-rf-and-gbm', 'alwortman-titanic-test-script', 'ccheng2016-titanic-survival', 'arjunrampal-titanic-eda-rf', 'lizpund-titanic-competition-kernel']","[0.8256882437749873, 0.8223729186578673, 0.7926860454516997, 0.779089584973453, 0.7420492128570438, 0.7420492128570438, 0.6830754676313462, 0.6709636163890942, 0.6650531606412976, 0.6081306769619078]","{'package:base': ['as.character', 'c', 'data.frame', 'factor', 'is.na', 'library', 'rbind', 'sapply', 'strsplit', 'sub', 'substr', 'summary'], 'package:rpart': ['rpart', 'rpart.control'], 'package:rpart.plot': ['prp'], 'package:stats': ['median', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""package:base"": [""as.character"", ""c"", ""data.frame"", ""factor"", ""is.na"", ""library"", ""rbind"", ""sapply"", ""strsplit"", ""sub"", ""substr"", ""summary""], ""package:rpart"": [""rpart"", ""rpart.control""], ""package:rpart.plot"": [""prp""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",packagebase ascharacter c dataframe factor isna library rbind sapply strsplit sub substr summary packagerpart rpart rpartcontrol packagerpartplot prp packagestats median predict packageutils head readcsv str writecsv,"library(""rpart"")
library(""rpart.plot"")
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
test$Survived <- 0
combi <- rbind(train, test)
combi$Name <- as.character(combi$Name)
strsplit(combi$Name[1], split = ""[,.]"")
strsplit(combi$Name[1], split = ""[,.]"")[[1]]
strsplit(combi$Name[1], split = ""[,.]"")[[1]][2]
combi$Title <- sapply(combi$Name, FUN = function(x) {
    strsplit(x, split = ""[,.]"")[[1]][2]
})
combi$Title <- sub("" "", """", combi$Title)
combi$Title[combi$PassengerId == 797] <- ""Mrs""
combi$Title[combi$Title %in% c(""Lady"", ""the Countess"", ""Mlle"", ""Mee"", ""Ms"")] <- ""Miss""
combi$Title[combi$Title %in% c(""Capt"", ""Don"", ""Major"", ""Sir"", ""Col"", ""Jonkheer"", ""Rev"", ""Dr"", ""Master"")] <- ""Mr""
combi$Title[combi$Title %in% c(""Dona"")] <- ""Mrs""
combi$Title <- factor(combi$Title)
combi$Embarked[c(62, 830)] = ""S""
combi$Embarked <- factor(combi$Embarked)
combi$Fare[1044] <- median(combi$Fare, na.rm = TRUE)
combi$family_size <- combi$SibSp + combi$Parch + 1
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + family_size, data = combi[!is.na(combi$Age), ], method = ""anova"")
combi$Age[is.na(combi$Age)] <- predict(predicted_age, combi[is.na(combi$Age), ])
train_new <- combi[1:891, ]
test_new <- combi[892:1309, ]
test_new$Survived <- NULL
train_new$Cabin <- substr(train_new$Cabin, 1, 1)
train_new$Cabin[train_new$Cabin == """"] <- ""H""
train_new$Cabin[train_new$Cabin == ""T""] <- ""H""
test_new$Cabin <- substr(test_new$Cabin, 1, 1)
test_new$Cabin[test_new$Cabin == """"] <- ""H""
train_new$Cabin <- factor(train_new$Cabin)
test_new$Cabin <- factor(test_new$Cabin)
str(train_new)
str(test_new)
my_tree <- rpart(Survived ~ Age + Sex + Pclass + family_size, data = train_new, method = ""class"", control = rpart.control(cp = 1e-04))
summary(my_tree)
prp(my_tree, type = 4, extra = 100)
my_prediction <- predict(my_tree, test_new, type = ""class"")
head(my_prediction)
vector_passengerid <- test_new$PassengerId
my_solution <- data.frame(PassengerId = vector_passengerid, Survived = my_prediction)
head(my_solution)
write.csv(my_solution, file = ""my_solution.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,1,0,0,0,0
286,rhyando-r-embulan-titanic,0.722,"['user defined', 'user defined', 'user defined', 'apply', 'as.character', 'as.data.frame', 'as.factor', 'as.numeric', 'c', 'cbind', 'data.frame', 'gsub', 'ifelse', 'is.na', 'lapply', 'length', 'max', 'merge', 'names', 'nrow', 'order', 'rbind', 'round', 'sapply', 'strsplit', 'substr', 'sum', 'table', 'unlist', 'barplot', 'par', 'aggregate', 'median', 'predict', 'quantile', 'str_locate', 'install.packages', 'installed.packages', 'read.csv', 'write.csv']",['base'],3.6053650379180895,"['nrow', 'unlist', 'median', 'install.packages', 'lapply', 'merge', 'as.character', 'is.na', 'names', 'as.factor', 'round', 'sapply', 'gsub', 'aggregate', 'max', 'str_locate', 'apply', 'length', 'read.csv', 'table', 'par', 'as.data.frame', 'c', 'rbind', 'as.numeric', 'ifelse', 'sum', 'predict', 'write.csv', 'order', 'quantile', 'data.frame', 'strsplit', 'installed.packages', 'substr', 'user defined', 'barplot', 'cbind']",[],"['rhyando-r-embulan-titanic', 'rhyando-r-embulan-titanic-notebook', 'mcliff-exploring-survival-on-the-titanic', 'dascanvas-titanic-random-forest', 'karlkonz-exploring-the-titanic-dataset-with-r', 'erskumars-titanic-survival-eda-and-survival-rate-prediction', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic']","[0.9999999999999996, 0.997040854331038, 0.8191217665401987, 0.08851220141476734, 0.07549415143907469, 0.07136075946691685, 0.07055140255806729, 0.07055140255806729, 0.06511901606729587, 0.06511901606729587]","{'character(0)': ['aes', 'element_text', 'geom_bar', 'geom_boxplot', 'ggplot', 'prp', 'rpart', 'rpart.control', 'scale_x_discrete', 'theme'], 'package:base': ['apply', 'as.character', 'as.data.frame', 'as.factor', 'as.numeric', 'c', 'cbind', 'data.frame', 'gsub', 'ifelse', 'is.na', 'lapply', 'length', 'max', 'merge', 'names', 'nrow', 'order', 'rbind', 'round', 'sapply', 'strsplit', 'substr', 'sum', 'table', 'unlist'], 'package:graphics': ['barplot', 'par'], 'package:stats': ['aggregate', 'median', 'predict', 'quantile'], 'package:stringr': ['str_locate'], 'package:utils': ['install.packages', 'installed.packages', 'read.csv', 'write.csv']}","{""character(0)"": [""aes"", ""element_text"", ""geom_bar"", ""geom_boxplot"", ""ggplot"", ""prp"", ""rpart"", ""rpart.control"", ""scale_x_discrete"", ""theme""], ""package:base"": [""apply"", ""as.character"", ""as.data.frame"", ""as.factor"", ""as.numeric"", ""c"", ""cbind"", ""data.frame"", ""gsub"", ""ifelse"", ""is.na"", ""lapply"", ""length"", ""max"", ""merge"", ""names"", ""nrow"", ""order"", ""rbind"", ""round"", ""sapply"", ""strsplit"", ""substr"", ""sum"", ""table"", ""unlist""], ""package:graphics"": [""barplot"", ""par""], ""package:stats"": [""aggregate"", ""median"", ""predict"", ""quantile""], ""package:stringr"": [""str_locate""], ""package:utils"": [""install.packages"", ""installed.packages"", ""read.csv"", ""write.csv""]}",character0 aes elementtext geombar geomboxplot ggplot prp rpart rpartcontrol scalexdiscrete theme packagebase apply ascharacter asdataframe asfactor asnumeric c cbind dataframe gsub ifelse isna lapply length max merge names nrow order rbind round sapply strsplit substr sum table unlist packagegraphics barplot par packagestats aggregate median predict quantile packagestringr strlocate packageutils installpackages installedpackages readcsv writecsv,"list.of.packages <- c(""stringr"", ""data.table"", ""taRifx"", ""methods"", ""rgdal"", ""sp"", ""maptools"", ""zoo"", ""reshape2"", ""plyr"", ""rgeos"", ""reshape"", ""tidyr"", ""ggplot2"", ""rpart"", ""rpart.plot"")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, ""Package""])]
if (length(new.packages)) install.packages(new.packages, repos = ""http://cran.r-project.org"")
lapply(list.of.packages, library, character.only = T)
test <- read.csv(""../input/test.csv"", sep = "","", header = TRUE)
train <- read.csv(""../input/train.csv"", sep = "","", header = TRUE)
test$Survived <- NA
combine <- rbind(test, train)
combine.r <- combine
combine <- as.data.frame(apply(combine, 2, function(x) gsub(""^$|^ $"", NA, x)))
sapply(combine, function(x) sum(is.na(x)))
par(mar = c(7, 4, 4, 2) + 0.1)
barplot(sapply(combine, function(x) sum(is.na(x))), las = 3, mar = c(5, 4, 4, 2), main = ""NA Value Count"")
combine$Pclass <- as.character(combine$Pclass)
combine$Fare <- as.numeric(as.character(combine$Fare))
freq <- combine[, c(""Pclass"", ""Fare"")]
ggplot(freq, aes(as.factor(Pclass), Fare)) + geom_boxplot()
combine$fare.fill <- combine$Fare
combine[is.na(combine$fare.fill), ]$fare.fill <- median(combine[combine$Pclass == combine[is.na(combine$fare.fill), ]$Pclass, ]$fare.fill, na.rm = TRUE)
combine$tittle <- unlist(strsplit(as.character(combine$Name), "",""))[c(F, T)]
combine$tittle <- substr(combine$tittle, 2, str_locate(combine$tittle, ""[.]"")[, 1])
combine$tittle <- as.character(combine$tittle)
combine$Age <- as.numeric(as.character(combine$Age))
freq <- combine[, c(""tittle"", ""Age"")]
ggplot(freq, aes(as.factor(tittle), Age), las = 3) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
combine$Age <- as.numeric(as.character(combine$Age))
sumif <- aggregate(Age ~ tittle, data = combine, median)
names(sumif)[names(sumif) == ""Age""] <- ""mean.tittle""
combine$rownum <- c(1:nrow(combine))
combine <- merge(combine, sumif, by = ""tittle"", all.x = T, sort = FALSE)
combine <- combine[order(combine$rownum), ]
combine$age.fill <- ifelse(is.na(combine$Age), round(combine$mean.tittle, 0), combine$Age)
combine$Embarked <- as.character(combine$Embarked)
combine$embarked.fill <- combine$Embarked
temp <- data.frame(table(combine$embarked.fill))
combine[is.na(combine$embarked.fill), ]$embarked.fill <- as.character(temp[temp$Freq == max(temp$Freq), ]$Var1)
combine$SibS <- as.numeric(as.character(combine$SibS))
combine$Parch <- as.numeric(as.character(combine$Parch))
combine$total.relative <- combine$SibS + combine$Parch
test.edit <- combine[c(1:nrow(test)), ]
train.edit <- combine[c(nrow(test) + 1:nrow(train)), ]
test.edit[test.edit$tittle == ""Dona."", ]$tittle <- ""Lady.""
my_tree <- rpart(Survived ~ Sex + tittle + age.fill + Pclass + fare.fill + total.relative + embarked.fill, data = combine, method = ""class"", control = rpart.control(cp = 1e-04))
prp(my_tree, type = 4, extra = 100)
my_prediction <- predict(my_tree, test.edit, type = ""class"")
test.edit <- cbind(test.edit, my_prediction)
test.result <- as.data.frame(cbind(test.edit$PassengerId, as.character(test.edit$my_prediction)))
names(test.result) <- c(""PassengerId"", ""Survived"")
write.csv(test.result, file = ""R-EMBULAN_Titanic.csv"", sep = "","", row.names = FALSE)
freq <- as.data.frame(table(combine[, c(""Pclass"", ""Survived"")]))
ggplot(freq, aes(Pclass, Freq)) + geom_bar(aes(fill = Survived), stat = ""identity"", position = ""dodge"")
freq <- as.data.frame(table(combine[, c(""embarked.fill"", ""Survived"")]))
ggplot(freq, aes(embarked.fill, Freq)) + geom_bar(aes(fill = Survived), stat = ""identity"", position = ""dodge"")
combine$age.range <- ifelse(combine$age.fill < 5, ""TODDLER"", ifelse(combine$age.fill < 10, ""HIGHSCHOOL"", ifelse(combine$age.fill < 21, ""TEEN"", ifelse(combine$age.fill < 35, ""ADULT"", ifelse(combine$age.fill < 55, ""OLDADULT"", ifelse(combine$age.fill < 200, ""ELDERLY"", ))))))
freq <- as.data.frame(table(combine[, c(""age.range"", ""Survived"")]))
ggplot(freq, aes(age.range, Freq)) + geom_bar(aes(fill = Survived), stat = ""identity"", , position = ""dodge"") + scale_x_discrete(limits = c(""TODDLER"", ""HIGHSCHOOL"", ""TEEN"", ""ADULT"", ""OLDADULT"", ""ELDERLY""))
freq <- as.data.frame(table(combine[, c(""Sex"", ""Survived"")]))
ggplot(freq, aes(Sex, Freq)) + geom_bar(aes(fill = Survived), stat = ""identity"", position = ""dodge"")
freq <- as.data.frame(table(combine[, c(""age.fill"", ""Survived"")]))
ggplot(freq, aes(age.fill, Freq)) + geom_bar(aes(fill = Survived), stat = ""identity"", position = ""dodge"")
freq <- as.data.frame(table(combine[, c(""tittle"", ""Survived"")]))
ggplot(freq, aes(tittle, Freq)) + geom_bar(aes(fill = Survived), stat = ""identity"", position = ""dodge"") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
combine$fare.range <- ifelse(combine$fare.fill == 0, ""FREE"", ifelse(combine$fare.fill <= as.numeric(quantile(combine[combine$fare.fill > 0, ]$fare.fill)[2]), ""CHEAP"", ifelse(combine$fare.fill <= as.numeric(quantile(combine[combine$fare.fill > 0, ]$fare.fill)[3]), ""CHEAP-MODERATE"", ifelse(combine$fare.fill <= as.numeric(quantile(combine[combine$fare.fill > 0, ]$fare.fill)[4]), ""MODERATE-EXPENSIVE"", ifelse(combine$fare.fill <= as.numeric(quantile(combine[combine$fare.fill > 0, ]$fare.fill)[5]), ""EXPENSIVE"", 
    """")))))
freq <- as.data.frame(table(combine[, c(""fare.range"", ""Survived"")]))
ggplot(freq, aes(fare.range, Freq)) + geom_bar(aes(fill = Survived), stat = ""identity"", position = ""dodge"")
combine$relative.range <- ifelse(combine$SibSp == 0 & combine$Parch == 0, ""ALONE"", ""NOT_ALONE"")
freq <- as.data.frame(table(combine[, c(""relative.range"", ""Survived"")]))
ggplot(freq, aes(relative.range, Freq)) + geom_bar(aes(fill = Survived), stat = ""identity"", position = ""dodge"")
combine$total.relative.range <- ifelse(combine$total.relative == 0, ""NO_RELATIVE"", ifelse(combine$total.relative <= as.numeric(quantile(combine[combine$total.relative > 0, ]$total.relative)[2]), ""SMALL_FAMILY"", ifelse(combine$total.relative <= as.numeric(quantile(combine[combine$total.relative > 0, ]$total.relative)[3]), ""SMALL-MODERATE_FAMILY"", ifelse(combine$total.relative <= as.numeric(quantile(combine[combine$total.relative > 0, ]$total.relative)[4]), ""MODERATE-BIG_FAMILY"", ifelse(combine$total.relative <= 
    as.numeric(quantile(combine[combine$total.relative > 0, ]$total.relative)[5]), ""BIG_FAMILY"")))))
freq <- as.data.frame(table(combine[, c(""total.relative.range"", ""Survived"")]))
ggplot(freq, aes(total.relative.range, Freq)) + geom_bar(aes(fill = Survived), stat = ""identity"", position = ""dodge"") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + scale_x_discrete(limits = c(""NO_RELATIVE"", ""SMALL_FAMILY"", ""SMALL-MODERATE_FAMILY"", ""MODERATE-BIG_FAMILY"", ""BIG_FAMILY""))
combine$sibsp.range <- ifelse(combine$SibSp == 0, ""ALONE"", ""NO_SIBSP"")
freq <- as.data.frame(table(combine[, c(""sibsp.range"", ""Survived"")]))
ggplot(freq, aes(sibsp.range, Freq)) + geom_bar(aes(fill = Survived), stat = ""identity"", position = ""dodge"")
combine$parch.range <- ifelse(combine$Parch, ""ALONE"", ""NO_PARCH"")
freq <- as.data.frame(table(combine[, c(""parch.range"", ""Survived"")]))
ggplot(freq, aes(parch.range, Freq)) + geom_bar(aes(fill = Survived), stat = ""identity"", position = ""dodge"")",0,0,0,0,1,0,0,0,0,0,0,0,0,0
287,brirush-titanic-nearest-neighbor-using-squared-correlation,0.7340000000000001,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.numeric', 'as.vector', 'c', 'colnames', 'is.na', 'matrix', 'nrow', 'order', 'return', 'sapply', 'scale', 'cor', 'read.csv', 'str', 'write.csv']",['base'],0.464929103851318,"['matrix', 'colnames', 'as.numeric', 'nrow', 'write.csv', 'order', 'cor', 'read.csv', 'as.vector', 'user defined', 'return', 'scale', 'sapply', 'str', 'c', 'is.na']",[],"['brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'paulocressoni-titanic-using-stepwise-linear-regression', 'ezhilvelme-titanic-neural-network-c-4-2', 'klashgari-titanic', 'liudj2008-fork-of-titanic', 'liudj2008-titanic', 'annafreydenzon-titanic-machine-learning-from-disaster', 'jacekpardyak-mytitanicscript', 'erskumars-titanic-survival-eda-and-survival-rate-prediction']","[0.40924343952491354, 0.40924343952491354, 0.3315073988859324, 0.33001832648104534, 0.32670033148909, 0.3206160568930289, 0.31973094716297734, 0.31123707435390796, 0.29760864084443295, 0.2799650804023637]","{'character(0)': ['corsquaredist', 'survivalguess', 'TotalSurvival'], 'package:base': ['as.numeric', 'as.vector', 'c', 'colnames', 'is.na', 'matrix', 'nrow', 'order', 'return', 'sapply', 'scale'], 'package:stats': ['cor'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""character(0)"": [""corsquaredist"", ""survivalguess"", ""TotalSurvival""], ""package:base"": [""as.numeric"", ""as.vector"", ""c"", ""colnames"", ""is.na"", ""matrix"", ""nrow"", ""order"", ""return"", ""sapply"", ""scale""], ""package:stats"": [""cor""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",character0 corsquaredist survivalguess TotalSurvival packagebase asnumeric asvector c colnames isna matrix nrow order return sapply scale packagestats cor packageutils readcsv str writecsv,"train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
str(train)
train[is.na(train)] <- 1000
str(train)
train[train == ""female""] <- 0
train[train == ""male""] <- 1
train[train == ""S""] <- 0
train[train == ""Q""] <- 1
train[train == ""C""] <- 2
train[[""Sex""]] <- as.numeric(train[[""Sex""]])
train[[""Embarked""]] <- as.numeric(train[[""Embarked""]])
train[[""Pclass""]] <- as.numeric(train[[""Pclass""]])
train[[""SibSp""]] <- as.numeric(train[[""SibSp""]])
train[[""Parch""]] <- as.numeric(train[[""Parch""]])
train[is.na(train)] <- 0
corvec <- cor(train[[""Survived""]], train[sapply(train, is.numeric)])
corvec <- corvec^2
str(corvec)
train[[""Age""]] <- scale(train[[""Age""]])
train[[""Fare""]] <- scale(train[[""Fare""]])
train[[""Embarked""]] <- scale(train[[""Embarked""]])
train[[""Pclass""]] <- scale(train[[""Pclass""]])
train[[""SibSp""]] <- scale(train[[""SibSp""]])
train[[""Parch""]] <- scale(train[[""Parch""]])
train[[""Sex""]] <- scale(train[[""Sex""]])
test[is.na(test)] <- 1000
str(test)
test[test == ""female""] <- 0
test[test == ""male""] <- 1
test[test == ""S""] <- 0
test[test == ""Q""] <- 1
test[test == ""C""] <- 2
test[[""Sex""]] <- as.numeric(test[[""Sex""]])
test[[""Embarked""]] <- as.numeric(test[[""Embarked""]])
test[[""Pclass""]] <- as.numeric(test[[""Pclass""]])
test[[""SibSp""]] <- as.numeric(test[[""SibSp""]])
test[[""Parch""]] <- as.numeric(test[[""Parch""]])
test[is.na(test)] <- 0
test[[""Age""]] <- scale(test[[""Age""]])
test[[""Fare""]] <- scale(test[[""Fare""]])
test[[""Embarked""]] <- scale(test[[""Embarked""]])
test[[""Pclass""]] <- scale(test[[""Pclass""]])
test[[""SibSp""]] <- scale(test[[""SibSp""]])
test[[""Parch""]] <- scale(test[[""Parch""]])
test[[""Sex""]] <- scale(test[[""Sex""]])
corsquaredist <- function(x, y) {
    PclassComp <- corvec[3] * (as.vector(x[[""Pclass""]]) - as.vector(y[[""Pclass""]]))^2
    SexComp <- corvec[4] * (as.vector(x[[""Sex""]]) - as.vector(y[[""Sex""]]))^2
    AgeComp <- corvec[5] * (as.vector(x[[""Age""]]) - as.vector(y[[""Age""]]))^2
    SibSpComp <- corvec[6] * (as.vector(x[[""SibSp""]]) - as.vector(y[[""SibSp""]]))^2
    ParchComp <- corvec[7] * (as.vector(x[[""Parch""]]) - as.vector(y[[""Parch""]]))^2
    FareComp <- corvec[8] * (as.vector(x[[""Fare""]]) - as.vector(y[[""Fare""]]))^2
    EmbarkedComp <- corvec[9] * (as.vector(x[[""Embarked""]]) - as.vector(y[[""Embarked""]]))^2
    return(PclassComp + SexComp + AgeComp + SibSpComp + ParchComp + FareComp + EmbarkedComp)
}
survivalguess <- function(x, y) {
    templist <- corsquaredist(x, y)
    tempreturn <- order(templist)
    SurvivalFitness <- y[tempreturn[1], 2] + y[tempreturn[2], 2] + y[tempreturn[3], 2]
    if (SurvivalFitness < 2) {
        tempanswer <- 0
    }
    else {
        tempanswer <- 1
    }
    return(tempanswer)
}
TotalSurvival <- function(x) {
    output <- matrix(ncol = 2, nrow = nrow(x))
    for (i in 1:nrow(x)) {
        output[i, 1] = x[i, 1]
        output[i, 2] = survivalguess(x[i, ], train)
    }
    colnames(output) <- c(""PassengerId"", ""Survived"")
    return(output)
}
answer <- TotalSurvival(test)
str(answer)
write.csv(answer, file = ""Rushton_Solution.csv"", row.names = F)",0,0,0,0,1,0,0,0,0,0,0,0,0,0
288,macrosp-logistic-regression-titanic-dataset,0.737,"['as.numeric', 'cat', 'data.frame', 'factor', 'ifelse', 'is.na', 'library', 'names', 'nrow', 'sapply', 'sum', 'summary', 'table', 'glm', 'median', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['MASS', 'base']",0.330227136611938,"['nrow', 'median', 'cat', 'is.na', 'glm', 'names', 'summary', 'sapply', 'str', 'factor', 'read.csv', 'table', 'as.numeric', 'ifelse', 'sum', 'predict', 'write.csv', 'data.frame', 'head', 'library']",[],"['brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'jacekpardyak-mytitanicscript', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'ezhilvelme-titanic-neural-network-c-4-2', 'amodi8-titanic-exploring-survival-using-machine-learning', 'stevencahill-titanic-machine-learning-from-disaster', 'jerlinraj-titanic-machine-learning-from-disaster', 'annafreydenzon-titanic-machine-learning-from-disaster']","[0.3202795964054726, 0.3202795964054726, 0.30064193096817665, 0.300631977495965, 0.2998280969797174, 0.2754566275501681, 0.2641998167853709, 0.26415525421851416, 0.26251277774878085, 0.26235323676476846]","{'package:base': ['as.numeric', 'cat', 'data.frame', 'factor', 'ifelse', 'is.na', 'library', 'names', 'nrow', 'sapply', 'sum', 'summary', 'table'], 'package:stats': ['glm', 'median', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""package:base"": [""as.numeric"", ""cat"", ""data.frame"", ""factor"", ""ifelse"", ""is.na"", ""library"", ""names"", ""nrow"", ""sapply"", ""sum"", ""summary"", ""table""], ""package:stats"": [""glm"", ""median"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",packagebase asnumeric cat dataframe factor ifelse isna library names nrow sapply sum summary table packagestats glm median predict packageutils head readcsv str writecsv,"library(MASS)
test <- read.csv(""../input/test.csv"")
train <- read.csv(""../input/train.csv"")
head(train)
str(train)
summary(train)
train$Pclass <- factor(train$Pclass)
train$Survived <- factor(train$Survived)
test$Pclass <- factor(test$Pclass)
NAvalue_train <- sapply(train, function(x) sum(is.na(x)))
MissingNA_train <- data.frame(index = names(train), Missing_Values = NAvalue_train)
MissingNA_train[MissingNA_train$Missing_Values > 0, ]
NAvalue_test <- sapply(test, function(x) sum(is.na(x)))
MissingNA_test <- data.frame(index = names(test), Missing_Values = NAvalue_test)
MissingNA_test[MissingNA_test$Missing_Values > 0, ]
train$Age[is.na(train$Age)] <- median(train$Age, na.rm = TRUE)
test$Fare[is.na(test$Fare)] <- median(test$Fare, na.rm = TRUE)
test$Age[is.na(test$Age)] <- median(train$Age, na.rm = TRUE)
rl <- glm(Survived ~ Sex + Pclass + Age + SibSp, data = train, family = ""binomial"")
summary(rl)
previsto <- ifelse(predict(rl, newdata = train, type = ""response"") > 0.5, 1, 0)
train$Previsao <- previsto
tb <- table(train$Previsao >= 0.5, train$Survived)
tb
cat(""Accuracy: "", (tb[1, 1] + tb[2, 2])/nrow(train) * 100, ""/ Taxa de acerto:"", (tb[1, 1] + tb[2, 2])/nrow(train) * 100)
predictTest <- predict(rl, newdata = test, type = ""response"")
test$Survived <- as.numeric(predictTest >= 0.5)
table(test$Survived)
subm <- data.frame(test$PassengerId)
names(subm)[1] <- ""PassengerId""
subm$Survived <- test$Survived
write.csv(subm, file = ""titanic_logr_submission.csv"", row.names = FALSE)",0,0,0,0,0,0,1,0,0,0,0,0,0,0
289,hemingwei-titanic-r-solution-from-megan-risdal,0.7440000000000001,"['filter', 'as.factor', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",27.0461230278015,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'tetyama-trial-titanic', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'vikramatjob-exploring-survival-on-the-titanic-var1', 'mira5b-exploring-survival-on-the-titanic', 'mohankanni-exploring-survival-on-the-titanic', 'kyanyoga-exploring-survival-on-the-titanic', 'rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic']","[0.999272422908137, 0.999272422908137, 0.9974416551945161, 0.9926384440691803, 0.9892132043718067, 0.9888081003352308, 0.9886019120301281, 0.9885680347493073, 0.9884946173633953, 0.9884946173633953]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c colnames dataframe factor gsub isna lapply library names paste paste0 round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
290,ravihela-titanic-survival,0.758,"['filter', 'glimpse', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.factor', 'as.integer', 'as.numeric', 'c', 'cbind', 'cut', 'data.frame', 'is.na', 'library', 'list', 'max', 'nrow', 'prop.table', 'rbind', 'return', 'sapply', 'summary', 'system', 'table', 'vector', 'which', 'group_by', 'select', 'summarise', 'aes', 'facet_grid', 'geom_bar', 'geom_jitter', 'ggplot', 'plot', 'boxplot.stats', 'auc', 'roc', 'read_csv', 'addmargins', 'glm', 'lm', 'median', 'predict', 'step', 'str_extract', 'write.csv']","['ggplot2', 'readr', 'tidyverse', 'pROC', 'base']",2.69797587394714,"['summarise', 'step', 'nrow', 'list', 'roc', 'median', 'vector', 'which', 'geom_jitter', 'boxplot.stats', 'glimpse', 'is.na', 'glm', 'auc', 'addmargins', 'prop.table', 'lm', 'as.factor', 'summary', 'filter', 'sapply', 'str_extract', 'as.integer', 'max', 'cut', 'geom_bar', 'table', 'return', 'read_csv', 'group_by', 'c', 'aes', 'rbind', 'as.numeric', 'plot', 'predict', 'write.csv', 'facet_grid', 'data.frame', 'ggplot', 'user defined', 'library', 'cbind', 'select', 'system']",[],"['ljfernando-titanicsurvival', 'erskumars-titanic-survival-eda-and-survival-rate-prediction', 'parthchaudhary-titanic-submission', 'pranavsid-analyzing-the-titanic-disaster', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic']","[0.16943296198539667, 0.10472898039850041, 0.07719675047087801, 0.06650735738396409, 0.06321526071278945, 0.06321526071278945, 0.06266285337846934, 0.06266285337846934, 0.06095857155382909, 0.06095857155382909]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'c(""package:dplyr"", ""package:tibble"")': ['glimpse'], 'character(0)': ['confusionMatrix', 'plugMedAge'], 'package:base': ['as.factor', 'as.integer', 'as.numeric', 'c', 'cbind', 'cut', 'data.frame', 'is.na', 'library', 'list', 'max', 'nrow', 'prop.table', 'rbind', 'return', 'sapply', 'summary', 'system', 'table', 'vector', 'which'], 'package:dplyr': ['group_by', 'select', 'summarise'], 'package:ggplot2': ['aes', 'facet_grid', 'geom_bar', 'geom_jitter', 'ggplot'], 'package:graphics': ['plot'], 'package:grDevices': ['boxplot.stats'], 'package:pROC': ['auc', 'roc'], 'package:readr': ['read_csv'], 'package:stats': ['addmargins', 'glm', 'lm', 'median', 'predict', 'step'], 'package:stringr': ['str_extract'], 'package:utils': ['write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""c(""package:dplyr"", ""package:tibble"")"": [""glimpse""], ""character(0)"": [""confusionMatrix"", ""plugMedAge""], ""package:base"": [""as.factor"", ""as.integer"", ""as.numeric"", ""c"", ""cbind"", ""cut"", ""data.frame"", ""is.na"", ""library"", ""list"", ""max"", ""nrow"", ""prop.table"", ""rbind"", ""return"", ""sapply"", ""summary"", ""system"", ""table"", ""vector"", ""which""], ""package:dplyr"": [""group_by"", ""select"", ""summarise""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""geom_bar"", ""geom_jitter"", ""ggplot""], ""package:graphics"": [""plot""], ""package:grDevices"": [""boxplot.stats""], ""package:pROC"": [""auc"", ""roc""], ""package:readr"": [""read_csv""], ""package:stats"": [""addmargins"", ""glm"", ""lm"", ""median"", ""predict"", ""step""], ""package:stringr"": [""str_extract""], ""package:utils"": [""write.csv""]}",cpackagedplyr packagestats filter cpackagedplyr packagetibble glimpse character0 confusionMatrix plugMedAge packagebase asfactor asinteger asnumeric c cbind cut dataframe isna library list max nrow proptable rbind return sapply summary system table vector which packagedplyr groupby select summarise packageggplot2 aes facetgrid geombar geomjitter ggplot packagegraphics plot packagegrDevices boxplotstats packagepROC auc roc packagereadr readcsv packagestats addmargins glm lm median predict step packagestringr strextract packageutils writecsv,"library(ggplot2)
library(readr)
system(""ls ../input"")
library(tidyverse)
trainT <- read_csv(file = ""../input/train.csv"")
testT <- read_csv(file = ""../input/test.csv"")
glimpse(trainT)
glimpse(testT)
testT$Survived <- NA
testT$Survived <- as.integer(testT$Survived)
t <- testT[, c(1, 12, 2:11)]
testT <- t
trainT$set <- ""training""
testT$set <- ""test""
cmbT_new <- rbind(trainT, testT)
glimpse(cmbT_new)
summary(cmbT_new)
cmbT_new$Sex <- as.factor(cmbT_new$Sex)
cmbT_new$Embarked <- as.factor(cmbT_new$Embarked)
cmbT_new$Survived <- as.factor(cmbT_new$Survived)
cmbT_new %>% filter(set == ""training"") %>% select(Survived) %>% table() %>% addmargins()
cmbT_new %>% filter(set == ""training"") %>% select(Survived) %>% table() %>% prop.table() %>% addmargins()
summary(cmbT_new)
cabinIntial <- ((str_extract(cmbT_new$Cabin, ""^."")))
cmbT_new$CabinInitial <- cabinIntial
cmbT_new$CabinInitial[which(is.na(cmbT_new$CabinInitial))] <- ""NoCabin""
cmbT_new$CabinInitial <- as.factor(cmbT_new$CabinInitial)
cmbT_new %>% ggplot(aes(x = Embarked, fill = as.factor(Pclass))) + geom_bar(position = ""fill"")
cmbT_new %>% ggplot(aes(x = Embarked, fill = CabinInitial)) + geom_bar(position = ""fill"")
cmbT_new$Embarked[which(is.na(cmbT_new$Embarked))] <- ""C""
cmbT_new$Title <- str_extract(cmbT_new$Name, ""[A-Z][a-z]+\\."")
NameMedAge <- cmbT_new %>% filter(!is.na(Age)) %>% group_by(Title) %>% summarise(med = median(Age))
plugMedAge <- function(x, NameMedAge) {
    for (i in 1:nrow(x)) {
        if (is.na(x$Age[i])) {
            x$Age[i] <- as.numeric(NameMedAge[which(NameMedAge$Title == x$Title[i]), 2])
        }
    }
    return(x)
}
cmbT_new <- plugMedAge(cmbT_new, NameMedAge)
cmbT_new$FamSize <- cmbT_new$SibSp + cmbT_new$Parch + 1
plugTitleType <- function(x) {
    if (x %in% c(""Capt."", ""Col."", ""Major."")) {
        return(""officer"")
    }
    else if (x %in% c(""Countess."", ""Don."", ""Dona."", ""Jonkheer."", ""Lady."", ""Mlle."", ""Mme."", ""Sir."")) {
        return(""Royalty"")
    }
    else if (x %in% c(""Dr."")) {
        return(""Professional"")
    }
    else if (x %in% c(""Master."")) {
        return(""boy"")
    }
    else if (x %in% c(""Rev."")) {
        return(""Priest"")
    }
    else if (x %in% c(""Miss."")) {
        return(""Comm_YoungWomen"")
    }
    else {
        return(""Commoner"")
    }
}
cmbT_new$TType <- as.factor(sapply(cmbT_new$Title, plugTitleType))
FamSizeBucket <- function(x) {
    if (x <= 2) {
        return(""small"")
    }
    else if (x <= 4) {
        return(""mid"")
    }
    else if (x <= 8) {
        return(""big"")
    }
    else {
        return(""vbig"")
    }
}
cmbT_new$FamSizeCat <- sapply((cmbT_new$Parch + cmbT_new$SibSp + 1), FamSizeBucket)
cmbT_new$alone <- sapply(cmbT_new$FamSize, function(x) {
    if (x == 1) {
        1
    }
    else {
        0
    }
})
df_fare_evaluation <- cmbT_new %>% filter(cmbT_new$Fare < boxplot.stats(cmbT_new$Fare)$stats[4] & is.na(cmbT_new$Fare) == FALSE)
fare_model <- lm(Fare ~ Pclass + Sex + Age + FamSize + Embarked + TType, data = df_fare_evaluation)
cmbT_new$Fare[which(is.na(cmbT_new$Fare))] <- predict(fare_model, cmbT_new[which(is.na(cmbT_new$Fare)), ])
cmbT_new$FareCat <- cut(cmbT_new$Fare, c(boxplot.stats(cmbT_new$Fare)$stats, max(cmbT_new$Fare)))
cmbT_new$FareCat[which(is.na(cmbT_new$FareCat))] <- ""(0,7.9]""
summary(cmbT_new$FareCat)
cmbT_new$Cabin[(which(is.na(cmbT_new$Cabin)))] <- ""No Cabin""
cmbT_new %>% ggplot(aes(y = Survived, x = Age, color = Sex)) + geom_jitter(aes(size = Fare, alpha = 5e-05)) + facet_grid(Pclass ~ Embarked)
tit <- cmbT_new[, -c(4, 9, 15)]
x <- data.frame(sapply(tit[which(sapply(tit, is.character))], as.factor))
y <- tit[which(!sapply(tit, is.character))]
tit <- cbind(y, x)
tit$Cabin[(which(is.na(tit$Cabin)))] <- ""No Cabin""
tit_train <- tit[which(tit$set == ""training""), ]
tit_train$set <- NULL
tit_train$PassengerId <- NULL
tit_train$Cabin <- NULL
tit_test <- tit[which(tit$set == ""test""), ]
tit_test$set <- NULL
null_model <- glm(Survived ~ 1, data = tit_train, family = ""binomial"")
full_model <- glm(Survived ~ ., data = tit_train, family = ""binomial"")
step_model <- step(null_model, scope = list(lower = null_model, upper = full_model), direction = ""forward"")
step_prob <- predict(step_model, type = ""response"")
library(pROC)
ROC <- roc(tit_train$Survived, step_prob)
plot(ROC, col = ""red"")
auc(ROC)
indexTrain <- which((predict(step_model, tit_train, type = ""response"") < 0.55))
SurvivedTrain <- vector(mode = ""integer"", length = nrow(tit_train))
SurvivedTrain[indexTrain] <- 0
SurvivedTrain[-indexTrain] <- 1
confusionMatrix(as.factor(SurvivedTrain), as.factor(tit_train$Survived))
index <- which((predict(step_model, tit_test, type = ""response"") < 0.6))
Survived <- vector(mode = ""numeric"", length = nrow(tit_test))
Survived[index] <- 0
Survived[-index] <- 1
titLogiSub <- cbind(PassengerId = tit_test$PassengerId, Survived)
write.csv(titLogiSub, ""titLogiSub.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,0,0,0,0,0
291,haroldzhang-exploring-survival-on-the-titanic,0.7490000000000001,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.numeric', 'c', 'data.frame', 'factor', 'floor', 'is.na', 'length', 'library', 'list', 'matrix', 'mean', 'names', 'norm', 'order', 'return', 'table', 'vector', 'which', 'which.max', 'which.min', 'randomForest', 'lm', 'median', 'predict', 'rnorm', 'runif', 'sd', 'read.csv', 'write.csv']","['randomForest', 'base']",9.53116512298584,"['which.min', 'list', 'mean', 'which.max', 'median', 'vector', 'which', 'norm', 'is.na', 'names', 'lm', 'factor', 'matrix', 'length', 'sd', 'read.csv', 'table', 'randomForest', 'return', 'c', 'runif', 'as.numeric', 'predict', 'rnorm', 'write.csv', 'order', 'data.frame', 'user defined', 'library', 'floor']",[],"['haroldzhang-titanic-ace233', 'erskumars-titanic-survival-eda-and-survival-rate-prediction', 'parthchaudhary-titanic-submission', 'c34klh123-using-svm-to-predict-titanic-in-r', 'pranavsid-analyzing-the-titanic-disaster', 'klashgari-titanic', 'iherbert-titanic', 'wjsutton-exploring-surviving-the-titanic', 'diegosiebra-rf-titanic-prediction-th3one', 'vishaljindal0-titanic-r-code']","[0.9998196222829159, 0.10370625711552368, 0.08558084055691756, 0.06871840933865078, 0.06783061425455039, 0.06362317435236235, 0.062484239997799396, 0.06185160485973204, 0.06125169111750168, 0.056236944936830555]","{'character(0)': ['fullfillAgeData', 'fullfillEmbark', 'fullfillFare', 'reAssembleVariable'], 'package:base': ['as.numeric', 'c', 'data.frame', 'factor', 'floor', 'is.na', 'length', 'library', 'list', 'matrix', 'mean', 'names', 'norm', 'order', 'return', 'table', 'vector', 'which', 'which.max', 'which.min'], 'package:randomForest': ['randomForest'], 'package:stats': ['lm', 'median', 'predict', 'rnorm', 'runif', 'sd'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""fullfillAgeData"", ""fullfillEmbark"", ""fullfillFare"", ""reAssembleVariable""], ""package:base"": [""as.numeric"", ""c"", ""data.frame"", ""factor"", ""floor"", ""is.na"", ""length"", ""library"", ""list"", ""matrix"", ""mean"", ""names"", ""norm"", ""order"", ""return"", ""table"", ""vector"", ""which"", ""which.max"", ""which.min""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""lm"", ""median"", ""predict"", ""rnorm"", ""runif"", ""sd""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 fullfillAgeData fullfillEmbark fullfillFare reAssembleVariable packagebase asnumeric c dataframe factor floor isna length library list matrix mean names norm order return table vector which whichmax whichmin packagerandomForest randomForest packagestats lm median predict rnorm runif sd packageutils readcsv writecsv,"library(""randomForest"")
reAssembleVariable = function(trainDataList, type) {
    tmpNames = names(trainDataList)
    for (i in 1:length(tmpNames)) {
        if (tmpNames[i] == ""Survived"") {
            survivedList = trainDataList[i]
        }
        if (tmpNames[i] == ""PassengerId"") {
            passengerList = trainDataList[i]
        }
        if (tmpNames[i] == ""Pclass"") {
            pClassList = trainDataList[i]
        }
        if (tmpNames[i] == ""Name"") {
            nameList = trainDataList[i]
        }
        if (tmpNames[i] == ""Sex"") {
            sexList = trainDataList[i]
            maleVector = vector(""double"", length(sexList[, 1]))
            maleIndex = which(sexList == ""male"")
            maleVector[maleIndex] = 1
            maleList = list(Sex = maleVector)
        }
        if (tmpNames[i] == ""Age"") {
            ageList = trainDataList[i]
        }
        if (tmpNames[i] == ""SibSp"") {
            sibspList = trainDataList[i]
        }
        if (tmpNames[i] == ""Parch"") {
            parchList = trainDataList[i]
        }
        if (tmpNames[i] == ""Ticket"") {
            ticketList = trainDataList[i]
        }
        if (tmpNames[i] == ""Fare"") {
            fareList = trainDataList[i]
        }
        if (tmpNames[i] == ""Cabin"") {
            cabinList = trainDataList[i]
        }
        if (tmpNames[i] == ""Embarked"") {
            embarkedList = trainDataList[i]
            newEmbarkedList = fullfillEmbark(embarkedList)
            isCEList = vector(""double"", length(newEmbarkedList[, 1]))
            isQEList = vector(""double"", length(newEmbarkedList[, 1]))
            ceIndex = which(newEmbarkedList == ""C"")
            qeIndex = which(newEmbarkedList == ""Q"")
            isCEList[ceIndex] = 1
            isQEList[qeIndex] = 1
            isCEList = list(C = isCEList)
            isQEList = list(Q = isQEList)
        }
    }
    newAgeList = fullfillAgeData(ageList[1], nameList[1], sibspList[1], parchList[1], 7)
    newFareList = fullfillFare(fareList)
    if (type == 1) {
        newDataList = data.frame(survivedList, passengerList, pClassList, maleList, newAgeList, sibspList, parchList, newFareList, cabinList, isCEList, isQEList)
    }
    else {
        newDataList = data.frame(passengerList, pClassList, maleList, newAgeList, sibspList, parchList, newFareList, cabinList, isCEList, isQEList)
    }
    return(newDataList)
}
fullfillAgeData = function(ageList, nameList, sibspList, parchList, type) {
    noneAgeIndex = which(is.na(ageList))
    nAgeIndex = which(!is.na(ageList))
    if (type == 1) {
        noneAgeIndex = which(is.na(ageList))
        nAgeIndex = which(!is.na(ageList))
        meanAge = mean(ageList[nAgeIndex, 1])
        ageList[noneAgeIndex, 1] = meanAge
        return(ageList)
    }
    if (type == 2) {
        noneAgeIndex = which(is.na(ageList))
        nAgeIndex = which(!is.na(ageList))
        medianAge = median(ageList[nAgeIndex, 1])
        ageList[noneAgeIndex, 1] = medianAge
        return(ageList)
    }
    if (type == 3) {
        noneAgeIndex = which(is.na(ageList))
        nAgeIndex = which(!is.na(ageList))
        modeAge = which.max(table(ageList[nAgeIndex, 1]))
        modeName = as.numeric(names(modeAge))
        ageList[noneAgeIndex, 1] = modeName
        return(ageList)
    }
    if (type == 4) {
        noneAgeIndex = which(is.na(ageList))
        nAgeIndex = which(!is.na(ageList))
        nAgeList = ageList[nAgeIndex, 1]
        minAge = nAgeList[which.min(nAgeList)]
        maxAge = nAgeList[which.max(nAgeList)]
        rand = runif(length(noneAgeIndex), minAge, maxAge)
        ageList[noneAgeIndex, 1] = rand
        return(ageList)
    }
    if (type == 5) {
        noneAgeIndex = which(is.na(ageList))
        nAgeIndex = which(!is.na(ageList))
        nAgeList = ageList[nAgeIndex, 1]
        meanAge = mean(nAgeList)
        std4age = sd(nAgeList)
        rand = rnorm(length(noneAgeIndex), meanAge, std4age)
        ageList[noneAgeIndex, 1] = rand
        return(ageList)
    }
    if (type == 6) {
    }
    if (type == 7) {
        noneAgeIndex = which(is.na(ageList))
        nAgeIndex = which(!is.na(ageList))
        for (i in 1:length(noneAgeIndex)) {
            dist1 = vector()
            for (j in 1:length(nAgeIndex)) {
                ni = noneAgeIndex[i]
                nj = nAgeIndex[j]
                ma = matrix(c(sibspList[nj, 1] - sibspList[ni, 1], parchList[nj, 1] - parchList[ni, 1]), 1)
                dist1[j] = norm(ma, ""2"")
            }
            distIndex = order(dist1)
            count1 = 0
            count2 = 0
            targetAge = 0
            lastAge = 0
            tAgeList = vector()
            for (k in 1:20) {
                age = nAgeIndex[distIndex[k]]
                age = floor(age/5) * 5 + 2.5
                tAgeList[k] = age
            }
            modeAge = which.max(table(tAgeList))
            modeName = as.numeric(names(modeAge))
            tmpIndex = noneAgeIndex[i]
            ageList[tmpIndex, 1] = modeName
        }
        return(ageList)
    }
}
fullfillEmbark = function(embarkedList) {
    noneEmbarkAgeIndex = which(embarkedList == """")
    nEmbarkAgeIndex = which(embarkedList != """")
    modeEmbark = which.max(table(embarkedList[nEmbarkAgeIndex, 1]))
    embarkName = names(modeEmbark)
    embarkedList[noneEmbarkAgeIndex, 1] = embarkName
    return(embarkedList)
}
fullfillFare = function(fareList) {
    nonefareIndex = which(is.na(fareList))
    nfareIndex = which(!is.na(fareList))
    medianFare = median(fareList[nfareIndex, 1])
    fareList[nonefareIndex, 1] = medianFare
    return(fareList)
}
train_data = read.csv(""../input/train.csv"", header = T)
test_data = read.csv(""../input/test.csv"", header = T)
newTrainData = reAssembleVariable(train_data, 1)
newTestData = reAssembleVariable(test_data, 2)
lm1_model = lm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare, newTrainData)
rf1_model = randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare, newTrainData)
lm1_ans = predict(lm1_model, newTestData)
rf1_ans = predict(rf1_model, newTestData)
passedCoune = 0
for (i in 1:length(lm1_ans)) {
    if (lm1_ans[i] >= 0.5) {
        lm1_ans[i] = 1
    }
    else {
        lm1_ans[i] = 0
    }
}
testAns = data.frame(PassengerID = newTestData$PassengerId, Survived = lm1_ans)
write.csv(testAns, ""ans.csv"")",1,0,0,0,0,0,0,0,0,0,0,0,0,0
293,ep1804-titanic-survival,0.746,"['importance', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'apply', 'as.data.frame', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.character', 'is.na', 'library', 'merge', 'names', 'ncol', 'noquote', 'nrow', 'paste', 'print', 'rownames', 'sum', 'summary', 'table', 'unique', 'train', 'trainControl', 'aes', 'coord_flip', 'geom_bar', 'ggplot', 'ggsave', 'ggtitle', 'xlab', 'theme_few', 'legend', 'plot', 'complete', 'mice', 'randomForest', 'predict', 'reorder', 'head', 'read.csv', 'tail', 'write.csv']","['ggplot2', 'ggthemes', 'mice', 'randomForest', 'caret', 'ranger', 'base']",9.18486094474792,"['nrow', 'complete', 'merge', 'noquote', 'coord_flip', 'cat', 'is.na', 'names', 'print', 'ncol', 'theme_few', 'ggsave', 'summary', 'mice', 'importance', 'xlab', 'gsub', 'factor', 'colnames', 'unique', 'geom_bar', 'apply', 'read.csv', 'table', 'randomForest', 'is.character', 'as.data.frame', 'train', 'aes', 'tail', 'paste', 'reorder', 'sum', 'plot', 'legend', 'predict', 'write.csv', 'ggtitle', 'data.frame', 'rownames', 'ggplot', 'head', 'user defined', 'library', 'trainControl']",[],"['tsfitz-titanic', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'paulocressoni-titanic-using-stepwise-linear-regression', 'ilijaf-titanic', 'lizpund-titanic-competition-kernel', 'lagprophet-titanic', 'macrosp-logistic-regression-titanic-dataset', 'devanshugupta27-predicting-the-titanic-survival-rate']","[0.11103042553473708, 0.08760561153018812, 0.08707907495356038, 0.08582135057899397, 0.08573488055980234, 0.08339503586734276, 0.08238691497984794, 0.07874284961670795, 0.07508819384838034, 0.07345907850327717]","{'c(""package:ranger"", ""package:randomForest"")': ['importance'], 'character(0)': ['extract_title'], 'package:base': ['apply', 'as.data.frame', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.character', 'is.na', 'library', 'merge', 'names', 'ncol', 'noquote', 'nrow', 'paste', 'print', 'rownames', 'sum', 'summary', 'table', 'unique'], 'package:caret': ['train', 'trainControl'], 'package:ggplot2': ['aes', 'coord_flip', 'geom_bar', 'ggplot', 'ggsave', 'ggtitle', 'xlab'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['legend', 'plot'], 'package:mice': ['complete', 'mice'], 'package:randomForest': ['randomForest'], 'package:stats': ['predict', 'reorder'], 'package:utils': ['head', 'read.csv', 'tail', 'write.csv']}","{""c(""package:ranger"", ""package:randomForest"")"": [""importance""], ""character(0)"": [""extract_title""], ""package:base"": [""apply"", ""as.data.frame"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.character"", ""is.na"", ""library"", ""merge"", ""names"", ""ncol"", ""noquote"", ""nrow"", ""paste"", ""print"", ""rownames"", ""sum"", ""summary"", ""table"", ""unique""], ""package:caret"": [""train"", ""trainControl""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""geom_bar"", ""ggplot"", ""ggsave"", ""ggtitle"", ""xlab""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""legend"", ""plot""], ""package:mice"": [""complete"", ""mice""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""predict"", ""reorder""], ""package:utils"": [""head"", ""read.csv"", ""tail"", ""write.csv""]}",cpackageranger packagerandomForest importance character0 extracttitle packagebase apply asdataframe cat colnames dataframe factor gsub ischaracter isna library merge names ncol noquote nrow paste print rownames sum summary table unique packagecaret train trainControl packageggplot2 aes coordflip geombar ggplot ggsave ggtitle xlab packageggthemes themefew packagegraphics legend plot packagemice complete mice packagerandomForest randomForest packagestats predict reorder packageutils head readcsv tail writecsv,"library(ggplot2)
library(ggthemes)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
d0 <- merge(train, test, all = T)
for (i in 1:ncol(d0)) {
    if (is.character(d0[, i])) {
        d0[d0[, i] == """", i] <- NA
    }
}
summary(d0)
apply(d0, 2, function(x) {
    sum(is.na(x))
})
d0$PassengerId <- NULL
unique(d0$Pclass)
d0$Pclass <- factor(d0$Pclass)
extract_title <- function(name) {
    title <- gsub(""(.*, )|(\\..*)"", """", name)
    title[title == ""Mlle""] <- ""Miss""
    title[title == ""Ms""] <- ""Miss""
    title[title == ""Mme""] <- ""Mrs""
    tb <- table(title)
    title[title %in% names(tb)[tb < 10]] <- ""Rare""
    cat(noquote(paste(""Titles summary:"")))
    print(table(d0$Sex, title))
    title
}
d0$Title <- factor(extract_title(d0$Name))
d0$Name <- NULL
d0$Sex <- factor(d0$Sex)
d0$FamilySize <- d0$SibSp + d0$Parch + 1
d0$Cabin <- NULL
d0$Ticket <- NULL
d0$Embarked <- factor(d0$Embarked)
d0$Survived <- factor(d0$Survived)
tr <- head(d0, nrow(train))
cv <- tail(d0, nrow(test))
cv$Survived <- NULL
library(mice)
mice_fit <- mice(tr, method = ""rf"")
tr <- complete(mice_fit)
mice_fit <- mice(cv, method = ""rf"")
cv <- complete(mice_fit)
apply(tr, 2, function(x) {
    sum(is.na(x))
})
apply(cv, 2, function(x) {
    sum(is.na(x))
})
library(randomForest)
fit <- randomForest(Survived ~ ., data = tr)
plot(fit)
legend(""topright"", colnames(fit$err.rate), col = 1:3, fill = 1:3)
imp <- importance(fit)
imp <- as.data.frame(imp)
p <- ggplot(imp, aes(x = reorder(rownames(imp), MeanDecreaseGini), y = MeanDecreaseGini)) + geom_bar(stat = ""identity"") + xlab(""Features"") + ggtitle(""Random Forest Feature Importance\n"") + coord_flip() + theme_few()
ggsave(""feature_importance.png"", p)
library(caret)
library(ranger)
fit <- train(Survived ~ ., data = tr, method = ""ranger"", trControl = trainControl(method = ""cv"", number = 5, verboseIter = TRUE))
plot(fit, main = ""Random Forest Parameter Tuning by CV"")
pred <- data.frame(PassengerId = test$PassengerId, Survived = predict(fit, cv))
write.csv(pred, file = ""pred.csv"", quote = F, row.names = F)",1,0,1,1,0,0,0,1,0,0,0,0,0,0
295,mustfkeskin-titanic-xgboost,0.7490000000000001,"['mean', 'print', 'rowMeans', 'user defined', 'user defined', 'user defined', 'user defined', 'c', 'cat', 'cbind', 'colnames', 'data.matrix', 'factor', 'gc', 'gsub', 'is.na', 'library', 'list', 'ls', 'paste', 'rbind', 'rm', 'sapply', 'set.seed', 'strsplit', 'sum', 'Sys.time', 'unique', 'unlist', 'data.table', 'fread', 'funs', 'summarise_each', 'predict', 'write.table', 'xgb.DMatrix', 'xgb.train']","['data.table', 'Matrix', 'xgboost', 'caret', 'dplyr', 'base']",2.47959303855896,"['unlist', 'gc', 'list', 'mean', 'data.table', 'cat', 'is.na', 'print', 'sapply', 'set.seed', 'gsub', 'Sys.time', 'factor', 'colnames', 'data.matrix', 'unique', 'xgb.DMatrix', 'summarise_each', 'rm', 'fread', 'c', 'rbind', 'paste', 'sum', 'ls', 'funs', 'predict', 'strsplit', 'write.table', 'user defined', 'rowMeans', 'library', 'xgb.train', 'cbind']",[],"['seshadrikolluri-predicting-survival-on-titanic', 'joelweiss-titanic-data-r', 'cnusapbo-titanic-r-code', 'prabhulingayya-titanic-prediction-using-logistic-regression', 'goblin-titanic-test', 'jacekpardyak-mytitanicscript', 'bubblride-titanic-e1071-nu-svc', 'bubblride-titanic-e1071-c-svc-fares-only', 'garciparedes-titanic-getting-started', 'alma123-titanic']","[0.3888080568245823, 0.34178107384203565, 0.3403951550622647, 0.3375602115842577, 0.28278030204847654, 0.25002612728497486, 0.24166355064502243, 0.23569521837813784, 0.232371166190978, 0.22753793766855768]","{'c(""package:Matrix"", ""package:base"")': ['mean', 'print', 'rowMeans'], 'character(0)': ['`:=`'], 'package:base': ['c', 'cat', 'cbind', 'colnames', 'data.matrix', 'factor', 'gc', 'gsub', 'is.na', 'library', 'list', 'ls', 'paste', 'rbind', 'rm', 'sapply', 'set.seed', 'strsplit', 'sum', 'Sys.time', 'unique', 'unlist'], 'package:data.table': ['data.table', 'fread'], 'package:dplyr': ['funs', 'summarise_each'], 'package:stats': ['predict'], 'package:utils': ['write.table'], 'package:xgboost': ['xgb.DMatrix', 'xgb.train']}","{""c(""package:Matrix"", ""package:base"")"": [""mean"", ""print"", ""rowMeans""], ""character(0)"": [""`:=`""], ""package:base"": [""c"", ""cat"", ""cbind"", ""colnames"", ""data.matrix"", ""factor"", ""gc"", ""gsub"", ""is.na"", ""library"", ""list"", ""ls"", ""paste"", ""rbind"", ""rm"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""Sys.time"", ""unique"", ""unlist""], ""package:data.table"": [""data.table"", ""fread""], ""package:dplyr"": [""funs"", ""summarise_each""], ""package:stats"": [""predict""], ""package:utils"": [""write.table""], ""package:xgboost"": [""xgb.DMatrix"", ""xgb.train""]}",cpackageMatrix packagebase mean print rowMeans character0  packagebase c cat cbind colnames datamatrix factor gc gsub isna library list ls paste rbind rm sapply setseed strsplit sum Systime unique unlist packagedatatable datatable fread packagedplyr funs summariseeach packagestats predict packageutils writetable packagexgboost xgbDMatrix xgbtrain,"rm(list = ls())
library(data.table)
library(Matrix)
library(xgboost)
library(caret)
library(dplyr)
cat(""Read data"")
df_train <- fread(""../input/train.csv"", sep = "","", na.strings = ""NA"")
df_test <- fread(""../input/test.csv"", sep = "","", na.strings = ""NA"")
df_test %>% summarise_each(funs(sum(is.na(.))))
df_train %>% summarise_each(funs(sum(is.na(.))))
df_test[is.na(df_test$Age), ""Age""] <- mean(df_test$Age, na.rm = TRUE)
df_train[is.na(df_train$Age), ""Age""] <- mean(df_train$Age, na.rm = TRUE)
data = rbind(df_train, df_test, fill = T)
data$Title <- gsub(""(.*, )|(\\..*)"", """", data$Name)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
data$Title[data$Title == ""Mlle""] <- ""Miss""
data$Title[data$Title == ""Ms""] <- ""Miss""
data$Title[data$Title == ""Mme""] <- ""Mrs""
data$Title[data$Title %in% rare_title] <- ""Rare Title""
data$Surname <- sapply(data$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
data$Fsize <- data$SibSp + data$Parch + 1
data$FsizeD[data$Fsize == 1] <- ""singleton""
data$FsizeD[data$Fsize < 5 & data$Fsize > 1] <- ""small""
data$FsizeD[data$Fsize > 4] <- ""large""
data$isAlone <- 0
data[data$Fsize == 1, ""isAlone""] <- 1
data$Deck <- factor(sapply(data$Cabin, function(x) unlist(strsplit(x, NULL)[[1]][1])))
data <- data[, -c(""Ticket"", ""Name"", ""Surname"", ""Cabin"", ""Deck"")]
ohe_feats = c(""Pclass"", ""Sex"", ""SibSp"", ""Parch"", ""Embarked"", ""Title"", ""FsizeD"", ""isAlone"", ""Fsize"")
for (f in ohe_feats) {
    levels = unique(data[[f]])
    data[[f]] = factor(data[[f]], level = levels)
}
train = data[data$PassengerId %in% df_train$PassengerId, ]
y_train <- train[!is.na(Survived), Survived]
train = train[, `:=`(Survived, NULL)]
train = train[, `:=`(PassengerId, NULL)]
train_sparse <- data.matrix(train)
test = data[data$PassengerId %in% df_test$PassengerId, ]
test_ids <- test[, PassengerId]
test[, `:=`(Survived, NULL)]
test[, `:=`(PassengerId, NULL)]
test_sparse <- data.matrix(test)
dtrain <- xgb.DMatrix(data = train_sparse, label = y_train)
dtest <- xgb.DMatrix(data = test_sparse)
gc()
param <- list(booster = ""gbtree"", eval_metric = ""auc"", objective = ""binary:logistic"", eta = 0.11, gamma = 1, max_depth = 6, min_child_weight = 1, subsample = 0.7, colsample_bytree = 0.7)
rounds = 72
mpreds = data.table(id = test_ids)
for (random.seed.num in 1:10) {
    print(paste(""["", random.seed.num, ""] training xgboost begin "", sep = """", "" : "", Sys.time()))
    set.seed(random.seed.num)
    xgb_model <- xgb.train(data = dtrain, params = param, watchlist = list(train = dtrain), nrounds = rounds, verbose = 1, print_every_n = 5)
    vpreds = predict(xgb_model, dtest)
    mpreds = cbind(mpreds, vpreds)
    colnames(mpreds)[random.seed.num + 1] = paste(""pred_seed_"", random.seed.num, sep = """")
}
mpreds_2 = mpreds[, `:=`(id, NULL)]
mpreds_2 = mpreds_2[, `:=`(y, rowMeans(.SD))]
mpreds_2[mpreds_2$y <= 0.5, ""x""] <- 0
mpreds_2[mpreds_2$y > 0.5, ""x""] <- 1
submission = data.table(PassengerId = test_ids, Survived = mpreds_2$x)
write.table(submission, ""titanic_xgboost.csv"", sep = "","", dec = ""."", quote = FALSE, row.names = FALSE)",0,0,1,0,0,0,0,1,1,0,0,0,0,0
296,parthchaudhary-titanic-submission,0.746,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.factor', 'c', 'data.frame', 'factor', 'grep', 'is.na', 'length', 'library', 'nrow', 'rbind', 'rep', 'return', 'randomForest', 'rpart', 'median', 'predict', 'read.csv', 'write.csv']","['rpart', 'randomForest', 'base']",3.94144105911255,"['nrow', 'median', 'grep', 'as.character', 'is.na', 'rpart', 'as.factor', 'rep', 'factor', 'length', 'read.csv', 'randomForest', 'return', 'c', 'rbind', 'predict', 'write.csv', 'data.frame', 'user defined', 'library']",[],"['frankfeng-titanic', 'wongalan2002-titanic-with-neural-network', 'aer503-titanic-exploring-survival-and-random-forest-test', 'juverstraeten-titanic-test-5-decision-tree-w-cabin', 'srinivasarajui-srini-s-r-titanic-solution', 'alwortman-titanic-test-script', 'pranavsid-analyzing-the-titanic-disaster', 'zahraatashgahy-r-titanic-1', 'erskumars-titanic-survival-eda-and-survival-rate-prediction', 'diegosiebra-rf-titanic-prediction-th3one']","[0.6747350265211708, 0.6572245074309012, 0.6318564150169572, 0.5823173784938019, 0.5286093601867965, 0.49138162869458807, 0.4022758108054966, 0.35695711702685196, 0.34079148998955283, 0.3171909941355702]","{'character(0)': ['extractTitle'], 'package:base': ['as.character', 'as.factor', 'c', 'data.frame', 'factor', 'grep', 'is.na', 'length', 'library', 'nrow', 'rbind', 'rep', 'return'], 'package:randomForest': ['randomForest'], 'package:rpart': ['rpart'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""extractTitle""], ""package:base"": [""as.character"", ""as.factor"", ""c"", ""data.frame"", ""factor"", ""grep"", ""is.na"", ""length"", ""library"", ""nrow"", ""rbind"", ""rep"", ""return""], ""package:randomForest"": [""randomForest""], ""package:rpart"": [""rpart""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 extractTitle packagebase ascharacter asfactor c dataframe factor grep isna length library nrow rbind rep return packagerandomForest randomForest packagerpart rpart packagestats median predict packageutils readcsv writecsv,"train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
train$Child[train$Age < 18] <- 1
train$Child[train$Age >= 18] <- 0
train$Child[is.na(train$Age)] <- NA
test$Child[test$Age < 18] <- 1
test$Child[test$Age >= 18] <- 0
test$Child[is.na(test$Age)] <- NA
library(rpart)
train$family_size <- train$SibSp + train$Parch + 1
test$family_size <- test$SibSp + test$Parch + 1
extractTitle <- function(Name) {
    Name <- as.character(Name)
    if (length(grep(""Miss."", Name)) > 0) {
        return(""Miss."")
    }
    else if (length(grep(""Master."", Name)) > 0) {
        return(""Master."")
    }
    else if (length(grep(""Mrs."", Name)) > 0) {
        return(""Mrs."")
    }
    else if (length(grep(""Mr."", Name)) > 0) {
        return(""Mr."")
    }
    else if (length(grep(""Rev."", Name)) > 0) {
        return(""Rev."")
    }
    else if (length(grep(""Dr."", Name)) > 0) {
        return(""Dr."")
    }
    else if (length(grep(""Lady."", Name)) > 0) {
        return(""Lady."")
    }
    else if (length(grep(""Mlle."", Name)) > 0) {
        return(""Mlle."")
    }
    else {
        return(""Other"")
    }
}
titles <- NULL
for (i in 1:nrow(train)) {
    titles <- c(titles, extractTitle(train[i, 4]))
}
train$Title <- as.factor(titles)
titles <- NULL
for (i in 1:nrow(test)) {
    titles <- c(titles, extractTitle(test[i, 3]))
}
test$Title <- as.factor(titles)
test$Survived <- rep(""None"", nrow(test))
test <- test[c(""PassengerId"", ""Survived"", ""Pclass"", ""Name"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Ticket"", ""Fare"", ""Cabin"", ""Embarked"", ""Child"", ""family_size"", ""Title"")]
all_data <- rbind(train, test)
all_data$Embarked[c(62, 830)] = ""S""
all_data$Embarked <- factor(all_data$Embarked)
all_data$Fare[1044] <- median(all_data$Fare, na.rm = TRUE)
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + family_size, data = all_data[!is.na(all_data$Age), ], method = ""anova"")
all_data$Age[is.na(all_data$Age)] <- predict(predicted_age, all_data[is.na(all_data$Age), ])
train <- all_data[1:891, ]
test <- all_data[892:1309, ]
library(randomForest)
my_forest <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + family_size, data = train, importance = TRUE, ntree = 2000)
my_prediction <- predict(my_forest, test)
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = ""my_solution.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
297,jacekpardyak-mytitanicscript,0.55,"['as.character', 'as.factor', 'c', 'cut', 'data.frame', 'is.na', 'length', 'library', 'names', 'paste', 'pretty', 'rbind', 'require', 'sapply', 'strsplit', 'summary', 'unlist', 'randomForest', 'as.formula', 'median', 'predict', 'read.csv', 'write.csv']","['randomForest', 'randomForest', 'randomForest', 'base']",1.33345413208008,"['unlist', 'as.formula', 'median', 'as.character', 'is.na', 'require', 'names', 'as.factor', 'summary', 'sapply', 'cut', 'length', 'read.csv', 'randomForest', 'c', 'rbind', 'paste', 'pretty', 'predict', 'write.csv', 'data.frame', 'strsplit', 'library']",[],"['liudj2008-fork-of-titanic', 'liudj2008-titanic', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'paulocressoni-titanic-using-stepwise-linear-regression', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'antonov-logistic-regression-for-titanic', 'turntrout-titanic-data-exploration', 'amodi8-titanic-exploring-survival-using-machine-learning', 'peggy88-titanic-data-eda-by-peggy']","[0.531689012947946, 0.5306453508496771, 0.4821851903458181, 0.4821851903458181, 0.4606588131184794, 0.4453802186894064, 0.4283252985304927, 0.4183746196297769, 0.4172919236393404, 0.41508959418256564]","{'package:base': ['as.character', 'as.factor', 'c', 'cut', 'data.frame', 'is.na', 'length', 'library', 'names', 'paste', 'pretty', 'rbind', 'require', 'sapply', 'strsplit', 'summary', 'unlist'], 'package:randomForest': ['randomForest'], 'package:stats': ['as.formula', 'median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.character"", ""as.factor"", ""c"", ""cut"", ""data.frame"", ""is.na"", ""length"", ""library"", ""names"", ""paste"", ""pretty"", ""rbind"", ""require"", ""sapply"", ""strsplit"", ""summary"", ""unlist""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""as.formula"", ""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase ascharacter asfactor c cut dataframe isna length library names paste pretty rbind require sapply strsplit summary unlist packagerandomForest randomForest packagestats asformula median predict packageutils readcsv writecsv,"library(randomForest)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
test$Survived <- NA
train.test <- rbind(train, test)
train.test$Survived <- as.factor(train.test$Survived)
train.test[is.na(train.test$Fare), ""Fare""] <- median(train.test[train.test$Pclass == 3, ""Fare""], na.rm = T)
summary(train.test)
train.test$Cabin <- as.character(train.test$Cabin)
train.test$Cabin <- sapply(train.test$Cabin, function(x) length(unlist(strsplit(x, split = "" ""))))
train.test$Age <- cut(train.test$Age, pretty(train.test$Age, n = 16))
summary(train.test)
age.data <- train.test[!is.na(train.test$Age), ]
no.age.data <- train.test[is.na(train.test$Age), ]
names(age.data)
formula <- as.formula(paste(""Age"", paste(""Pclass"", ""Sex"", ""SibSp"", ""Parch"", ""Fare"", ""Cabin"", ""Embarked"", sep = ""+""), sep = ""~""))
require(randomForest)
fit <- randomForest(formula = formula, data = age.data, na.action = na.omit)
no.age.data$Age <- predict(fit, newdata = no.age.data, type = ""class"")
data <- rbind(age.data, no.age.data)
data.train <- data[!is.na(data$Survived), ]
data.test <- data[is.na(data$Survived), ]
formula <- as.formula(paste(""Survived"", paste(""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Cabin"", ""Embarked"", sep = ""+""), sep = ""~""))
require(randomForest)
fit <- randomForest(formula = formula, data = data.train, na.action = na.omit)
data.test$Survived <- predict(fit, newdata = data.test, type = ""class"")
submission <- data.frame(data.test[, c(""PassengerId"", ""Survived"")])
write.csv(submission, file = ""submission.csv"", row.names = F)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
298,lucasantevere-hello-titanic,0.758,"['c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'mean', 'nrow', 'round', 'sample', 'set.seed', 'sum', 'summary', 'table', 'bind_rows', 'glimpse', 'group_by', 'n', 'select', 'summarise', 'aes', 'geom_bar', 'ggplot', 'importance', 'randomForest', 'predict', 'read.csv', 'write.csv']","['ggplot2', 'dplyr', 'randomForest', 'base']",1.2702820301055902,"['summarise', 'nrow', 'mean', 'glimpse', 'is.na', 'summary', 'round', 'n', 'importance', 'set.seed', 'gsub', 'factor', 'geom_bar', 'read.csv', 'table', 'randomForest', 'group_by', 'c', 'aes', 'sample', 'sum', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'ggplot', 'library', 'select']",[],"['rafaelmdourado-hello-titanic-programmers', 'woliveira-hello-titanic', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'msantos68-exploring-survival-on-the-titanic', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'tetyama-trial-titanic', 'venkatko-titanic-survival1', 'researchbigd-titanic-forkedfrommeganscript']","[0.9962784720504309, 0.9952313285284695, 0.7217191853074666, 0.7212874041307454, 0.7202763240419154, 0.7197136616230997, 0.7197136616230997, 0.7180952256364025, 0.7167465343578395, 0.7164625789079819]","{'package:base': ['c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'mean', 'nrow', 'round', 'sample', 'set.seed', 'sum', 'summary', 'table'], 'package:dplyr': ['bind_rows', 'glimpse', 'group_by', 'n', 'select', 'summarise'], 'package:ggplot2': ['aes', 'geom_bar', 'ggplot'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""c"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""library"", ""mean"", ""nrow"", ""round"", ""sample"", ""set.seed"", ""sum"", ""summary"", ""table""], ""package:dplyr"": [""bind_rows"", ""glimpse"", ""group_by"", ""n"", ""select"", ""summarise""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""ggplot""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase c dataframe factor gsub isna library mean nrow round sample setseed sum summary table packagedplyr bindrows glimpse groupby n select summarise packageggplot2 aes geombar ggplot packagerandomForest importance randomForest packagestats predict packageutils readcsv writecsv,"library(ggplot2)
library(dplyr)
library(randomForest)
train <- read.csv(file = ""../input/train.csv"", stringsAsFactor = FALSE)
test <- read.csv(file = ""../input/test.csv"", stringsAsFactor = FALSE)
train$isTrain <- T
test$isTrain <- F
full <- bind_rows(train, test)
glimpse(full)
summary(full)
full$isFemale <- F
full$isFemale[full$Sex == ""female""] <- T
ggplot(full[full$isTrain, ], aes(x = isFemale, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"")
full$underTen <- F
full$underTen[full$Age > 0 & full$Age < 10] <- T
ggplot(full[full$isTrain, ], aes(x = underTen, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"")
full$Fare <- round(full$Fare)
full[full$isTrain, ] %>% group_by(Survived) %>% summarise(TotalFare = sum(Fare), count = n(), Mean = mean(Fare))
full$FamilySize <- full$SibSp + full$Parch + 1
ggplot(full[full$isTrain, ], aes(x = FamilySize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"")
full$FamilySizeFactor[full$FamilySize == 1] <- ""alone""
full$FamilySizeFactor[full$FamilySize < 5 & full$FamilySize > 1] <- ""small""
full$FamilySizeFactor[full$FamilySize > 4] <- ""large""
full$FamilySizeFactor <- factor(full$FamilySizeFactor)
ggplot(full[full$isTrain, ], aes(x = Pclass, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"")
full$Pclass <- factor(full$Pclass)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full <- full %>% select(PassengerId, Survived, Title, Pclass, FamilySizeFactor, Fare, underTen, isFemale, isTrain)
full$Fare[is.na(full$Fare)] <- 14
full$Title <- factor(full$Title)
summary(full)
set.seed(42)
totalrows <- nrow(full[full$isTrain, ])
trainrows <- sample(c(T, F), totalrows, replace = T, prob = c(0.8, 0.2))
trainningSet <- full[full$isTrain, ][trainrows, ]
testingSet <- full[full$isTrain, ][!trainrows, ]
model <- randomForest(factor(Survived) ~ Title + Pclass + FamilySizeFactor + Fare + underTen + isFemale, data = trainningSet, ntree = 50)
importance(model)
predicted <- predict(model, testingSet)
glimpse(predicted)
confusion_matrix <- table(testingSet$Survived, predicted)
confusion_matrix
TP <- confusion_matrix[2, 2]
TN <- confusion_matrix[1, 1]
acc <- (TP + TN)/nrow(testingSet)
acc
final <- predict(model, full[!full$isTrain, ])
solution <- data.frame(PassengerId = full[!full$isTrain, ]$PassengerId, Survived = final)
write.csv(solution, file = ""out.csv"", row.names = F)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
299,salomao2005-titanic-new-view,0.737,"['user defined', 'user defined', 'user defined', 'apply', 'as.character', 'as.data.frame', 'as.numeric', 'c', 'cat', 'cbind', 'character', 'conditionMessage', 'data.frame', 'factor', 'file.remove', 'gsub', 'ifelse', 'is.na', 'length', 'levels', 'library', 'list', 'list.files', 'mean', 'names', 'nrow', 'numeric', 'options', 'paste', 'paste0', 'print', 'prop.table', 'rbind', 'readRDS', 'return', 'round', 'row.names', 'sapply', 'saveRDS', 'seq', 'set.seed', 'sort', 'subset', 'sum', 'summary', 'Sys.time', 'table', 'tryCatch', 'unique', 'barplot', 'boxplot', 'hist', 'par', 'plot', 'as.formula', 'cor', 'predict', 'head', 'install.packages', 'installed.packages', 'read.csv', 'str']",['base'],1.28181763092677,"['nrow', 'list', 'mean', 'as.formula', 'install.packages', 'saveRDS', 'readRDS', 'cat', 'as.character', 'cor', 'is.na', 'levels', 'subset', 'sort', 'names', 'options', 'print', 'prop.table', 'summary', 'numeric', 'round', 'conditionMessage', 'sapply', 'hist', 'boxplot', 'str', 'set.seed', 'gsub', 'Sys.time', 'factor', 'unique', 'character', 'apply', 'length', 'read.csv', 'paste0', 'table', 'par', 'return', 'as.data.frame', 'file.remove', 'row.names', 'c', 'rbind', 'paste', 'as.numeric', 'ifelse', 'sum', 'tryCatch', 'plot', 'seq', 'list.files', 'predict', 'data.frame', 'installed.packages', 'head', 'user defined', 'library', 'barplot', 'cbind']",[],"['adambarnes-titanic-first-random-forest', 'rtreit-kaggle-titanic-tutorial', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'jacekpardyak-mytitanicscript', 'deltaforce126-titanic-randomforest', 'vikramatjob-exploring-survival-on-the-titanic-var2', 'peggy88-titanic-data-eda-by-peggy', 'rboimistruk-titanic-survivals-analysis', 'cdeotte-titanic-deep-net-0-82296', 'danvargg-titanic-passenger-survival']","[0.09487967865008606, 0.09201612553420323, 0.08703641217374938, 0.08378620025361963, 0.07988946326577762, 0.07408741305954587, 0.07336535536201635, 0.07287062004209037, 0.07226323230760372, 0.06896367575614465]","{'character(0)': ['aes', 'confusionMatrix', 'corrplot', 'createDataPartition', 'createModels', 'data.table', 'dotplot', 'dummyVars', 'fwrite', 'geom_bar', 'getTrainPerf', 'ggplot', 'ggtitle', 'glimpse', 'group_by', 'mutate', 'pr.curve', 'resamples', 'roc.curve', 'scale_fill_discrete', 'select_if', 'set', 'top_n', 'train', 'trainControl', 'varImp', 'xlab', 'ylab'], 'package:base': ['apply', 'as.character', 'as.data.frame', 'as.numeric', 'c', 'cat', 'cbind', 'character', 'conditionMessage', 'data.frame', 'factor', 'file.remove', 'gsub', 'ifelse', 'is.na', 'length', 'levels', 'library', 'list', 'list.files', 'mean', 'names', 'nrow', 'numeric', 'options', 'paste', 'paste0', 'print', 'prop.table', 'rbind', 'readRDS', 'return', 'round', 'row.names', 'sapply', 'saveRDS', 'seq', 'set.seed', 'sort', 'subset', 'sum', 'summary', 'Sys.time', 'table', 'tryCatch', 'unique'], 'package:graphics': ['barplot', 'boxplot', 'hist', 'par', 'plot'], 'package:stats': ['as.formula', 'cor', 'predict'], 'package:utils': ['head', 'install.packages', 'installed.packages', 'read.csv', 'str']}","{""character(0)"": [""aes"", ""confusionMatrix"", ""corrplot"", ""createDataPartition"", ""createModels"", ""data.table"", ""dotplot"", ""dummyVars"", ""fwrite"", ""geom_bar"", ""getTrainPerf"", ""ggplot"", ""ggtitle"", ""glimpse"", ""group_by"", ""mutate"", ""pr.curve"", ""resamples"", ""roc.curve"", ""scale_fill_discrete"", ""select_if"", ""set"", ""top_n"", ""train"", ""trainControl"", ""varImp"", ""xlab"", ""ylab""], ""package:base"": [""apply"", ""as.character"", ""as.data.frame"", ""as.numeric"", ""c"", ""cat"", ""cbind"", ""character"", ""conditionMessage"", ""data.frame"", ""factor"", ""file.remove"", ""gsub"", ""ifelse"", ""is.na"", ""length"", ""levels"", ""library"", ""list"", ""list.files"", ""mean"", ""names"", ""nrow"", ""numeric"", ""options"", ""paste"", ""paste0"", ""print"", ""prop.table"", ""rbind"", ""readRDS"", ""return"", ""round"", ""row.names"", ""sapply"", ""saveRDS"", ""seq"", ""set.seed"", ""sort"", ""subset"", ""sum"", ""summary"", ""Sys.time"", ""table"", ""tryCatch"", ""unique""], ""package:graphics"": [""barplot"", ""boxplot"", ""hist"", ""par"", ""plot""], ""package:stats"": [""as.formula"", ""cor"", ""predict""], ""package:utils"": [""head"", ""install.packages"", ""installed.packages"", ""read.csv"", ""str""]}",character0 aes confusionMatrix corrplot createDataPartition createModels datatable dotplot dummyVars fwrite geombar getTrainPerf ggplot ggtitle glimpse groupby mutate prcurve resamples roccurve scalefilldiscrete selectif set topn train trainControl varImp xlab ylab packagebase apply ascharacter asdataframe asnumeric c cat cbind character conditionMessage dataframe factor fileremove gsub ifelse isna length levels library list listfiles mean names nrow numeric options paste paste0 print proptable rbind readRDS return round rownames sapply saveRDS seq setseed sort subset sum summary Systime table tryCatch unique packagegraphics barplot boxplot hist par plot packagestats asformula cor predict packageutils head installpackages installedpackages readcsv str,"knitr::opts_chunk$set(echo = TRUE)
dateIni <- Sys.time()
cat(""\n Start of execution: "", as.character(dateIni))
libs = c(""data.table"", ""ggplot2"", ""randomForest"", ""ROSE"", ""DMwR"", ""corrplot"", ""caret"", ""xgboost"", ""e1071"", ""PRROC"", ""klaR"", ""dplyr"", ""tidyr"")
for (i in libs) {
    if (i %in% row.names(installed.packages()) == FALSE) {
        cat(""Load/install the library: "", i, ""\n\n"")
        install.packages(i, repos = ""http://cran.us.r-project.org"")
        library(i, character.only = TRUE)
    }
    else {
        cat(""Load the library: "", i, ""\n\n"")
        library(i, character.only = TRUE)
    }
}
trainPath <- ""../input/train.csv""
testPath <- ""../input/test.csv""
trainOri <- read.csv(trainPath, na.strings = c(""NA"", ""NaN"", """"))
testOri <- read.csv(testPath, na.strings = c(""NA"", ""NaN"", """"))
createModels <- function(formula, data, methods, ctrl, preProcess = NULL, tuneLength = 1) {
    options(warn = -1)
    metric <- ""ROC""
    seed <- 54321
    formula <- as.formula(formula)
    modelsOri <- list()
    modelsUp <- list()
    modelsDown <- list()
    modelsRose <- list()
    modelsSmote <- list()
    score <- data.frame(method = character(), score = numeric(), model = character(), stringsAsFactors = FALSE)
    for (i in methods) {
        tryCatch({
            cat(""METHOD: "", i, ""\n\n"")
            ctrl$sampling <- NULL
            nameOri <- paste0(i, "".ori"")
            set.seed(seed)
            modelsOri[[nameOri]] <- train(form = formula, data = data, method = i, metric = metric, preProcess = preProcess, tuneLength = tuneLength, trControl = ctrl)
            cat(""Importance of variables \n\n"")
            tryCatch({
                importanceOri <- varImp(modelsOri[[nameOri]], scale = FALSE)
                print(importanceOri)
                print(plot(importanceOri))
            }, error = function(e) {
                cat(""It wasn't possible to verify the importance of the variables: "", i, "" - ERROR :"", conditionMessage(e), ""\n"")
            })
            cat(""\n\n PERFORMANCE - ORIGINAL MODEL: \n\n"")
            print(getTrainPerf(modelsOri[[nameOri]]))
            nameFile <- paste0(nameOri, "".model.rds"")
            saveRDS(modelsOri[[nameOri]], paste0(""./"", nameFile))
            score[nrow(score) + 1, ] = list(nameOri, getTrainPerf(modelsOri[[nameOri]])[, ""TrainROC""], nameFile)
            ctrl$sampling <- ""up""
            nameUp <- paste0(i, "".up"")
            set.seed(seed)
            modelsUp[[nameUp]] <- train(form = formula, data = data, method = i, metric = metric, preProcess = preProcess, tuneLength = tuneLength, trControl = ctrl)
            cat(""\n\n PERFORMANCE - UP MODEL: \n\n"")
            print(getTrainPerf(modelsUp[[nameUp]]))
            nameFile <- paste0(nameUp, "".model.rds"")
            saveRDS(modelsUp[[nameUp]], paste0(""./"", nameFile))
            score[nrow(score) + 1, ] = list(nameUp, getTrainPerf(modelsUp[[nameUp]])[, ""TrainROC""], nameFile)
            ctrl$sampling <- ""down""
            nameDown <- paste0(i, "".down"")
            set.seed(seed)
            modelsDown[[nameDown]] <- train(form = formula, data = data, method = i, metric = metric, preProcess = preProcess, tuneLength = tuneLength, trControl = ctrl)
            cat(""\n\n PERFORMANCE - DOWN MODEL: \n\n"")
            print(getTrainPerf(modelsDown[[nameDown]]))
            nameFile <- paste0(nameDown, "".model.rds"")
            saveRDS(modelsDown[[nameDown]], paste0(""./"", nameFile))
            score[nrow(score) + 1, ] = list(nameDown, getTrainPerf(modelsDown[[nameDown]])[, ""TrainROC""], nameFile)
            ctrl$sampling <- ""rose""
            nameRose <- paste0(i, "".rose"")
            set.seed(seed)
            modelsRose[[nameRose]] <- train(form = formula, data = data, method = i, metric = metric, preProcess = preProcess, tuneLength = tuneLength, trControl = ctrl)
            cat(""\n\n PERFORMANCE - ROSE MODEL: \n\n"")
            print(getTrainPerf(modelsRose[[nameRose]]))
            nameFile <- paste0(nameRose, "".model.rds"")
            saveRDS(modelsRose[[nameRose]], paste0(""./"", nameFile))
            score[nrow(score) + 1, ] = list(nameRose, getTrainPerf(modelsRose[[nameRose]])[, ""TrainROC""], nameFile)
            ctrl$sampling <- ""smote""
            nameSmote <- paste0(i, "".smote"")
            set.seed(seed)
            modelsSmote[[nameSmote]] <- train(form = formula, data = data, method = i, metric = metric, preProcess = preProcess, tuneLength = tuneLength, trControl = ctrl)
            cat(""\n\n PERFORMANCE - SMOTE MODEL: \n\n"")
            print(getTrainPerf(modelsSmote[[nameSmote]]))
            nameFile <- paste0(nameSmote, "".model.rds"")
            saveRDS(modelsSmote[[nameSmote]], paste0(""./"", nameFile))
            score[nrow(score) + 1, ] = list(nameSmote, getTrainPerf(modelsSmote[[nameSmote]])[, ""TrainROC""], nameFile)
            models <- list(original = modelsOri[[nameOri]], down = modelsDown[[nameDown]], up = modelsUp[[nameUp]], smote = modelsSmote[[nameSmote]], rose = modelsRose[[nameRose]])
            models[sapply(models, is.null)] <- NULL
            cat(""EVALUATE THE MODELS USING THE ROC METRIC \n\n"")
            resampling <- resamples(models)
            print(summary(resampling, metric = metric))
            cat(""DOTPLOT \n\n"")
            scales <- list(x = list(relation = ""free""), y = list(relation = ""free""))
            print(dotplot(resampling, scales = scales, main = paste(""Evaluating all models of the method"", i)))
        }, error = function(e) {
            cat(""It wasn't possible to train the model "", i, "" - ERROR :"", conditionMessage(e), ""\n"")
        })
    }
    modelsList <- c(modelsOri, modelsDown, modelsUp, modelsSmote, modelsRose)
    if (length(modelsOri) > 1) {
        cat(""\n\n EVALUATING THE RESULT OF ALL METHODS AND MODELS \n\n"")
        resampling <- resamples(modelsList)
        print(summary(resampling, metric = metric))
        scales <- list(x = list(relation = ""free""), y = list(relation = ""free""))
        print(dotplot(resampling, scales = scales, main = ""Evaluating all methods used""))
    }
    cat(""\n\n MODEL WITH THE BEST PERFORMANCE: \n\n"")
    best <- score %>% top_n(1, score) %>% head(1)
    print(best)
    rdsFiles = list.files(pattern = "".rds"")
    rdsFiles <- rdsFiles[!rdsFiles %in% best$model]
    file.remove(rdsFiles)
    return(best$model)
}
glimpse(trainOri)
sapply(trainOri, class)
head(trainOri, 5)
glimpse(testOri)
sapply(testOri, class)
head(testOri, 5)
summary(trainOri)
summary(testOri)
sapply(trainOri, function(x) round(sum(is.na(x))/nrow(trainOri) * 100, 1))
sapply(testOri, function(x) round(sum(is.na(x))/nrow(testOri) * 100, 1))
cbind(freq = table(trainOri$Survived), percent = round(prop.table(table(trainOri$Survived)) * 100, 1))
apply(trainOri, 2, function(x) length(unique(x)))
apply(trainOri, 2, function(x) length(unique(x)))
testOri$Survived <- NA
fullData <- rbind(trainOri, testOri)
trainIdx <- seq(nrow(trainOri))
ggplot(fullData[trainIdx, ], aes(Sex, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + xlab(""Sex"") + ylab(""Count"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Sex X Survived"")
ggplot(fullData[trainIdx, ], aes(Pclass, fill = factor(Survived))) + geom_bar(stat = ""count"") + xlab(""Pclass"") + ylab(""Count"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Pclass X Survived"")
numberCols <- dplyr::select_if(trainOri, is.numeric)
par(mfrow = c(2, 2))
for (i in 1:7) {
    hist(numberCols[, i], main = names(numberCols)[i], xlab = """")
}
par(mfrow = c(2, 2))
for (i in 1:7) {
    boxplot(numberCols[, i], main = names(numberCols)[i])
}
par(mfrow = c(2, 2))
for (i in 1:7) {
    barplot(table(numberCols$Survived, numberCols[, i]), main = names(numberCols)[i], legend.text = unique(numberCols$Survived))
}
fullTemp <- fullData %>% group_by(Pclass) %>% mutate(Age = ifelse(is.na(Age), round(mean(Age, na.rm = TRUE)), Age)) %>% mutate(Fare = ifelse(is.na(Fare), round(mean(Fare, na.rm = TRUE)), Fare))
fullData$Age <- fullTemp$Age
fullData$Fare <- fullTemp$Fare
maxEmbarked <- names(sort(table(fullData$Embarked), decreasing = T)[1])
fullData$Embarked[is.na(fullData$Embarked)] <- maxEmbarked
dummies <- predict(dummyVars(~Sex, data = fullData), newdata = fullData)
fullData <- cbind(fullData, dummies)
dummies <- predict(dummyVars(~Embarked, data = fullData), newdata = fullData)
fullData <- cbind(fullData, dummies)
fullData$Pclass <- factor(fullData$Pclass)
dummies <- predict(dummyVars(~Pclass, data = fullData), newdata = fullData)
fullData <- cbind(fullData, dummies)
fullData$Title <- gsub(""(.*, )|(\\..*)"", """", fullData$Name)
officer <- c(""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"")
royalty <- c(""Dona"", ""Lady"", ""the Countess"", ""Sir"", ""Jonkheer"")
fullData$Title[fullData$Title == ""Mlle""] <- ""Miss""
fullData$Title[fullData$Title == ""Ms""] <- ""Miss""
fullData$Title[fullData$Title == ""Mme""] <- ""Mrs""
fullData$Title[fullData$Title %in% royalty] <- ""Royalty""
fullData$Title[fullData$Title %in% officer] <- ""Officer""
fullData$Title <- factor(fullData$Title)
dummies <- predict(dummyVars(~Title, data = fullData), newdata = fullData)
fullData <- cbind(fullData, dummies)
fullData$FamilySize <- fullData$SibSp + fullData$Parch + 1
fullData$FamilyType[fullData$FamilySize == 1] <- ""A""
fullData$FamilyType[fullData$FamilySize > 1 & fullData$FamilySize < 5] <- ""S""
fullData$FamilyType[fullData$FamilySize >= 5] <- ""B""
fullData$FamilyType <- factor(fullData$FamilyType)
dummies <- predict(dummyVars(~FamilyType, data = fullData), newdata = fullData)
fullData <- cbind(fullData, dummies)
ggplot(fullData[trainIdx, ], aes(Title, fill = factor(Survived))) + geom_bar(stat = ""count"") + xlab(""Title"") + ylab(""Count"") + scale_fill_discrete(name = "" Survived"") + ggtitle(""Title X Survived"")
ggplot(fullData[trainIdx, ], aes(FamilyType, fill = factor(Survived))) + geom_bar(stat = ""count"") + xlab(""FamilyType"") + ylab(""Count"") + scale_fill_discrete(name = "" Survived"") + ggtitle(""FamilyType X Survived"")
fullData$Ticket <- NULL
fullData$Cabin <- NULL
fullData$Sex <- NULL
fullData$Embarked <- NULL
fullData$Pclass <- NULL
fullData$Title <- NULL
fullData$Name <- NULL
fullData$FamilyType <- NULL
fullData$FamilySize <- NULL
glimpse(fullData)
cor(fullData[trainIdx, ]) %>% corrplot(addCoef.col = ""grey"", number.cex = 1.4)
trainData <- subset(fullData[trainIdx, ], select = -PassengerId)
trainData$Survived <- factor(trainData$Survived)
levels(trainData$Survived) <- c(""no"", ""yes"")
print(table(trainData$Survived, useNA = ""always""))
index <- createDataPartition(y = trainData$Survived, p = 0.7, list = FALSE)
train <- trainData[index, ]
valid <- trainData[-index, ]
methods <- list(""knn"", ""nb"", ""glmboost"")
formula <- ""Survived ~ .""
preProcess <- c(""center"", ""scale"")
tuneLength <- 25
ctrl <- trainControl(method = ""repeatedcv"", number = 10, repeats = 3, allowParallel = TRUE, summaryFunction = twoClassSummary, classProbs = TRUE)
nameModel <- createModels(formula, train, methods, ctrl, preProcess)
cat(""Best model: "", nameModel)
bestModel <- readRDS(paste0(""./"", nameModel))
print(bestModel$bestTune)
xValid <- subset(valid, select = -Survived)
yValid <- valid$Survived
predValues <- predict(object = bestModel, newdata = xValid, type = ""raw"")
head(predValues, 5)
confusionMatrix(predValues, yValid, positive = ""yes"")
predProbs <- predict(object = bestModel, newdata = xValid, type = ""prob"")[, 2]
head(predProbs)
predPos <- predProbs[yValid == ""yes""]
predNeg <- predProbs[yValid == ""no""]
roc <- PRROC::roc.curve(scores.class0 = predPos, scores.class1 = predNeg, curve = T)
print(roc)
plot(roc)
pr <- PRROC::pr.curve(scores.class0 = predPos, scores.class1 = predNeg, curve = T)
print(pr)
plot(pr)
testData <- subset(fullData[-trainIdx, ], select = -Survived)
print(head(testData, 5))
print(str(testData))
predTestValues <- predict(object = bestModel, newdata = testData[, -1], type = ""raw"")
print(head(predTestValues, 5))
predTest <- as.data.frame(predTestValues)
print(head(predTest, 10))
sub <- data.table(PassengerId = testData$PassengerId, Survived = NA)
sub$Survived = as.numeric(ifelse(predTest == ""no"", 0, 1))
print(head(sub, 10))
nameFile <- paste0(nameModel, "".submission.csv"")
fwrite(sub, nameFile)
dateFin <- Sys.time()
cat(""\n End of execution: "", as.character(dateFin))",0,0,0,0,1,0,0,0,0,0,0,0,0,0
300,qianbi-titanic-logistic,0.737,"['c', 'factor', 'is.na', 'round', 'glm', 'predict', 'read.csv', 'write.table']",['base'],0.293961048126221,"['factor', 'predict', 'read.csv', 'write.table', 'round', 'c', 'is.na', 'glm']",[],"['quentinalais-kerneltitanicquentin', 'waiyujack-titanic-random-search-in-r', 'nrutyam-predictions-on-titanic', 'retrospectprospect-titanic-machine-learning-from-eda-to-xgb', 'seajaye-titanic-logistic-regression-0-78947', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'rboimistruk-titanic-survivals-analysis', 'nithishthirmul-titanic-data-test1', 'jacekpardyak-mytitanicscript']","[0.8990470088520349, 0.4142921303464702, 0.22701204992176127, 0.1416093615002588, 0.11320958529754035, 0.11314244344438876, 0.11221192901565173, 0.10644204018613142, 0.09524204456289058, 0.08136442719621381]","{'package:base': ['c', 'factor', 'is.na', 'round'], 'package:stats': ['glm', 'predict'], 'package:utils': ['read.csv', 'write.table']}","{""package:base"": [""c"", ""factor"", ""is.na"", ""round""], ""package:stats"": [""glm"", ""predict""], ""package:utils"": [""read.csv"", ""write.table""]}",packagebase c factor isna round packagestats glm predict packageutils readcsv writetable,"data_train <- read.csv(""../input/train.csv"", sep = "","", header = TRUE, stringsAsFactors = FALSE, na.strings = """")
data_train$Survived <- factor(data_train$Survived, levels = c(1, 0), labels = c(""Yes"", ""No""))
data_train$Pclass <- factor(data_train$Pclass, levels = c(1, 2, 3))
data_train$Sex <- factor(data_train$Sex, levels = c(""male"", ""female""))
data_train$Age[data_train$Age < 12] <- ""Child""
data_train$Age[is.na(data_train$Age)] <- ""N""
data_train$Age[data_train$Age != ""N"" & data_train$Age != ""Child""] <- ""Adult""
data_train$Age <- factor(data_train$Age, levels = c(""Adult"", ""Child"", ""N""))
data_train$Embarked <- factor(data_train$Embarked, levels = c(""C"", ""Q"", ""S""))
fit <- glm(Survived ~ Pclass + Sex + Age + Embarked, family = binomial, data = data_train)
data_test <- read.csv(""../input/test.csv"", sep = "","", header = TRUE, stringsAsFactors = FALSE, na.strings = """")
data_test$Pclass <- factor(data_test$Pclass, levels = c(1, 2, 3))
data_test$Sex <- factor(data_test$Sex, levels = c(""male"", ""female""))
data_test$Age[data_test$Age < 12] <- ""Child""
data_test$Age[is.na(data_test$Age)] <- ""N""
data_test$Age[data_test$Age != ""N"" & data_test$Age != ""Child""] <- ""Adult""
data_test$Age <- factor(data_test$Age, levels = c(""Adult"", ""Child"", ""N""))
data_test$Embarked <- factor(data_test$Embarked, levels = c(""C"", ""Q"", ""S""))
data_test$Survived <- round(1 - predict(fit, data_test, type = ""response""), 0)
data_res <- data_test[, c(1, 12)]
write.table(data_res, file = ""Titanic_logistic.csv"", sep = "","", row.names = FALSE)",0,0,0,0,1,0,0,0,0,0,0,0,0,0
301,qianbi-titanic-rpart-2,0.763,"['c', 'factor', 'gsub', 'ifelse', 'lapply', 'library', 'nrow', 'bind_rows', 'complete', 'mice', 'rpart', 'predict', 'read.csv', 'write.csv']","['dplyr', 'mice', 'rpart', 'base']",3.886390209198,"['gsub', 'factor', 'ifelse', 'nrow', 'predict', 'complete', 'write.csv', 'bind_rows', 'lapply', 'read.csv', 'rpart', 'library', 'mice', 'c']",[],"['qianbi-titanic-logistic-2', 'qianbi-titanic-svm', 'qianbi-titanic-rpart', 'qianbi-titanic-nnet', 'qianbi-titanic-randomforest', 'venkatko-titanic-survival1', 'jasonhit-first-script-for-kaggle-titanic', 'abedben-exploring-survival-on-the-titanic', 'tetyama-trial-titanic', 'hemingwei-titanic-r-solution-from-megan-risdal']","[0.9640808885287273, 0.9447266991960491, 0.9365054302156886, 0.9285033283579239, 0.9279939346902911, 0.8577853079358932, 0.842928511746107, 0.8415374455443533, 0.8379621513007256, 0.8372489045283356]","{'package:base': ['c', 'factor', 'gsub', 'ifelse', 'lapply', 'library', 'nrow'], 'package:dplyr': ['bind_rows'], 'package:mice': ['complete', 'mice'], 'package:rpart': ['rpart'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""c"", ""factor"", ""gsub"", ""ifelse"", ""lapply"", ""library"", ""nrow""], ""package:dplyr"": [""bind_rows""], ""package:mice"": [""complete"", ""mice""], ""package:rpart"": [""rpart""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase c factor gsub ifelse lapply library nrow packagedplyr bindrows packagemice complete mice packagerpart rpart packagestats predict packageutils readcsv writecsv,"library(dplyr)
library(mice)
library(rpart)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE, na.strings = """")
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE, na.strings = """")
full <- bind_rows(train, test)
full$Title <- gsub(""^.*, |\\. .*$"", """", full$Name)
Mr <- c(""Col"", ""Don"", ""Jonkheer"", ""Sir"")
Mrs <- c(""Dona"", ""Lady"", ""Mme"", ""the Countess"")
Miss <- c(""Mlle"", ""Ms"")
full$Title[full$Title %in% Mr] <- ""Mr""
full$Title[full$Title %in% Mrs] <- ""Mrs""
full$Title[full$Title %in% Miss] <- ""Miss""
full$Fsize <- full$SibSp + full$Parch + 1
full$FsizeD[full$Fsize == 1] <- ""Singleton""
full$FsizeD[full$Fsize > 1 & full$Fsize < 5] <- ""Small""
full$FsizeD[full$Fsize > 4] <- ""Large""
factor_var <- c(""Survived"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""FsizeD"")
full[factor_var] <- lapply(full[factor_var], factor)
mice_mod <- mice(full[, c(3, 5:8, 10, 12)], method = ""rf"")
mice_output <- complete(mice_mod)
full[, c(6, 10, 12)] <- mice_output[, c(3, 6, 7)]
full$Embarked <- factor(full$Embarked)
full$Child <- factor(ifelse(full$Age <= 12, 1, 0))
train <- full[1:nrow(train), ]
test <- full[(nrow(train) + 1):nrow(full), ]
fit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child, data = train, method = ""class"")
res <- predict(fit, newdata = test)
test$Survived <- ifelse(res[, 1] < res[, 2], 1, 0)
write.csv(test[, c(1, 2)], file = ""Titanic_rpart_2.csv"", row.names = FALSE)",0,0,0,1,0,0,0,0,0,1,0,0,0,0
302,researchbigd-titanic-forkedfrommeganscript,0.7340000000000001,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'prop.table', 'sapply', 'set.seed', 'strsplit', 'subset', 'sum', 'summary', 'table', 'bind_rows', 'count', 'sample_n', 'slice', 'aes', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_point', 'geom_vline', 'ggplot', 'labs', 'position_jitterdodge', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'text', 'complete', 'md.pattern', 'mice', 'randomForest', 'varImpPlot', 'fancyRpartPlot', 'rpart', 'rpart.control', 'prp', 'dollar_format', 'median', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'rpart', 'rpart.plot', 'RColorBrewer', 'rattle', 'base']",28.695338010788003,"['labs', 'complete', 'median', 'lapply', 'md.pattern', 'cat', 'str', 'subset', 'is.na', 'names', 'geom_boxplot', 'sample_n', 'scale_x_continuous', 'rpart.control', 'prop.table', 'theme_few', 'count', 'rpart', 'as.factor', 'summary', 'filter', 'text', 'sapply', 'mice', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'varImpPlot', 'set.seed', 'gsub', 'prp', 'factor', 'colnames', 'geom_bar', 'read.csv', 'table', 'par', 'randomForest', 'scale_y_continuous', 'c', 'aes', 'fancyRpartPlot', 'position_jitterdodge', 'paste', 'slice', 'sum', 'geom_point', 'geom_vline', 'legend', 'plot', 'dollar_format', 'bind_rows', 'predict', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'write.csv', 'head', 'library', 'facet_grid']",[],"['researchbigd-titanic-forkedfrommeganscript', 'mira5b-exploring-survival-on-the-titanic', 'kyanyoga-exploring-survival-on-the-titanic', 'mohankanni-exploring-survival-on-the-titanic', 'oldflag-exploring-survival-on-the-titanic-inr-frommegan', 'wendyzhang1020-exploring-survival-on-the-titanic', 'rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic']","[0.9999999999999999, 0.9567537651598056, 0.956246680412919, 0.9562369685348654, 0.955972640195893, 0.9559408398231075, 0.9557929383595307, 0.9557929383595307, 0.9557929383595307, 0.9557929383595307]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'prop.table', 'sapply', 'set.seed', 'strsplit', 'subset', 'sum', 'summary', 'table'], 'package:dplyr': ['bind_rows', 'count', 'sample_n', 'slice'], 'package:ggplot2': ['aes', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_point', 'geom_vline', 'ggplot', 'labs', 'position_jitterdodge', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot', 'text'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:rattle': ['fancyRpartPlot'], 'package:rpart': ['rpart', 'rpart.control'], 'package:rpart.plot': ['prp'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""prop.table"", ""sapply"", ""set.seed"", ""strsplit"", ""subset"", ""sum"", ""summary"", ""table""], ""package:dplyr"": [""bind_rows"", ""count"", ""sample_n"", ""slice""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_point"", ""geom_vline"", ""ggplot"", ""labs"", ""position_jitterdodge"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot"", ""text""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:rattle"": [""fancyRpartPlot""], ""package:rpart"": [""rpart"", ""rpart.control""], ""package:rpart.plot"": [""prp""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste proptable sapply setseed strsplit subset sum summary table packagedplyr bindrows count samplen slice packageggplot2 aes facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geompoint geomvline ggplot labs positionjitterdodge scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot text packagemice complete mdpattern mice packagerandomForest randomForest varImpPlot packagerattle fancyRpartPlot packagerpart rpart rpartcontrol packagerpartplot prp packagescales dollarformat packagestats median predict packageutils head readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
library(""rpart"")
library(""rpart.plot"")
library(""RColorBrewer"")
library(""rattle"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
str(train)
str(test)
full <- bind_rows(train, test)
str(full)
slice(full, 886:896)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
table(full$Survived, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Don"", ""Dr"", ""Major"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
table(full$Survived, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
head(full)
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
sum(is.na(full$Cabin))
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
summary(full)
sample_n(full, 10)
sample_n(full, 10)
subset(full, full$Cabin == """" | full$Cabin == "" "") %>% count()
subset(full, full$Embarked == """" | full$Embarked == "" "") %>% count()
subset(full, full$Deck == """" | full$Deck == "" "") %>% count()
subset(full, is.na(full$Deck)) %>% count()
subset(full, full$Embarked == """" | full$Embarked == "" "")
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
subset(full, full$Surname == ""Stone"" | full$Surname == ""Icard"")
subset(full, full$Fare == 80)
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram(position = ""fill"") + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 6] <- ""Baby""
full$Child[full$Age >= 6 & full$Age < 14] <- ""Kid""
full$Child[full$Age >= 14 & full$Age < 18] <- ""Young""
full$Child[full$Age >= 18 & full$Age < 60] <- ""Adult""
full$Child[full$Age >= 60] <- ""Old""
table(full[1:891, ]$Child, full[1:891, ]$Survived)
prop.table(table(full[1:891, ]$Child, full[1:891, ]$Survived), 1)
ggplot(full[1:891, ], aes(factor(Child), fill = factor(Survived))) + geom_histogram(stat = ""count"", position = ""fill"") + facet_grid(. ~ Sex) + theme_few()
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train, ntree = 100, importance = TRUE)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
varImpPlot(rf_model)
table(full[1:891, ]$Title, full[1:891, ]$Survived)
prop.table(table(full[1:891, ]$Title, full[1:891, ]$Survived), 1)
ggplot(full[1:891, ], aes(factor(Title), fill = factor(Survived))) + geom_histogram(stat = ""count"", position = ""fill"") + theme_few()
posn.jd <- position_jitterdodge(jitter.width = 0.4, dodge.width = 0.5)
ggplot(full[1:891, ], aes(y = Fare, x = Sex, col = factor(Survived))) + geom_point(size = 3, alpha = 0.4, position = posn.jd) + theme_few()
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram(position = ""fill"") + facet_grid(. ~ Sex) + theme_few()
table(full[1:891, ]$Pclass, full[1:891, ]$Survived)
prop.table(table(full[1:891, ]$Pclass, full[1:891, ]$Survived), 1)
ggplot(full[1:891, ], aes(factor(Pclass), fill = factor(Survived))) + geom_histogram(stat = ""count"", position = ""fill"") + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)
set.seed(754)
tree_model <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train, method = ""class"", control = rpart.control(cp = 1e-04))
plot(tree_model)
text(tree_model)
prp(tree_model, type = 4, extra = 100)
fancyRpartPlot(tree_model)
my_prediction <- predict(tree_model, newdata = test, type = ""class"")
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = ""tree_mod_Solution.csv"", row.names = FALSE)",1,0,0,1,0,0,0,0,0,1,0,0,0,0
303,annafreydenzon-titanic-machine-learning-from-disaster,0.746,"['as.character', 'as.factor', 'as.numeric', 'c', 'duplicated', 'grepl', 'gsub', 'is.na', 'library', 'mean', 'rep', 'substr', 'summary', 'toupper', 'train', 'boxplot', 'hist', 'chisq.test', 'kruskal.test', 'median', 'predict', 'wilcox.test', 'read.csv', 'write.csv']","['caret', 'caretEnsemble', 'base']",23.6417210102081,"['mean', 'median', 'as.character', 'wilcox.test', 'is.na', 'duplicated', 'as.factor', 'summary', 'rep', 'hist', 'boxplot', 'gsub', 'toupper', 'read.csv', 'train', 'chisq.test', 'c', 'kruskal.test', 'as.numeric', 'predict', 'write.csv', 'grepl', 'substr', 'library']",[],"['brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'ezhilvelme-titanic-neural-network-c-4-2', 'paulocressoni-titanic-using-stepwise-linear-regression', 'nithishthirmul-titanic-data-test1', 'liudj2008-fork-of-titanic', 'liudj2008-titanic', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'tobybot11-toby-s-titanic-analysis', 'devanshugupta27-predicting-the-titanic-survival-rate']","[0.5356518066388777, 0.5356518066388777, 0.5291120371290049, 0.5025714535073201, 0.47603222987483107, 0.45733678015263945, 0.45615497582641634, 0.4338759320058263, 0.4033171436552146, 0.39868937020100537]","{'package:base': ['as.character', 'as.factor', 'as.numeric', 'c', 'duplicated', 'grepl', 'gsub', 'is.na', 'library', 'mean', 'rep', 'substr', 'summary', 'toupper'], 'package:caret': ['train'], 'package:graphics': ['boxplot', 'hist'], 'package:stats': ['chisq.test', 'kruskal.test', 'median', 'predict', 'wilcox.test'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.character"", ""as.factor"", ""as.numeric"", ""c"", ""duplicated"", ""grepl"", ""gsub"", ""is.na"", ""library"", ""mean"", ""rep"", ""substr"", ""summary"", ""toupper""], ""package:caret"": [""train""], ""package:graphics"": [""boxplot"", ""hist""], ""package:stats"": [""chisq.test"", ""kruskal.test"", ""median"", ""predict"", ""wilcox.test""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase ascharacter asfactor asnumeric c duplicated grepl gsub isna library mean rep substr summary toupper packagecaret train packagegraphics boxplot hist packagestats chisqtest kruskaltest median predict wilcoxtest packageutils readcsv writecsv,"library(caret)
library(caretEnsemble)
test <- read.csv(""../input/test.csv"", colClasses = c(""numeric"", rep(""factor"", 3), rep(""numeric"", 3), ""factor"", ""numeric"", rep(""factor"", 2)))
train <- read.csv(""../input/train.csv"", colClasses = c(""numeric"", rep(""factor"", 4), rep(""numeric"", 3), ""factor"", ""numeric"", rep(""factor"", 2)))
summary(train)
train$Embarked[train$Embarked == """"] <- ""S""
hist(train$Age)
train$Age[is.na(train$Age)] <- median(train$Age, na.rm = TRUE)
boxplot(train$PassengerId ~ train$Survived)
temp <- chisq.test(train$Pclass, train$Survived)
summary(train$Pclass[train$Survived == 0])
summary(train$Pclass[train$Survived == 1])
temp$observed
temp$expected
chisq.test(train$Sex, train$Survived)
boxplot(train$Age ~ train$Survived)
wilcox.test(train$Age ~ train$Survived)
boxplot(train$SibSp ~ train$Survived)
wilcox.test(train$SibSp ~ train$Survived)
mean(train$SibSp[train$Survived == 1])
mean(train$SibSp[train$Survived == 1])
train$SibSpBinary <- 0
train$SibSpBinary[train$SibSp > 0] <- 1
chisq.test(train$SibSpBinary, train$Survived)
boxplot(train$Parch ~ train$Survived)
wilcox.test(train$Parch ~ train$Survived)
boxplot(train$Fare ~ train$Survived)
wilcox.test(train$Fare ~ train$Survived)
kruskal.test(train$Fare ~ train$Pclass)
boxplot(train$Fare ~ train$Pclass)
temp <- chisq.test(train$Embarked, train$Survived)
train$observed
train$expected
train$Title <- gsub(""\\..*"", """", train$Name)
train$Title <- as.factor(gsub("".*, "", """", train$Title))
summary(train$Title)
train$Title[train$Title == ""Mlle"" | train$Title == ""Ms""] <- ""Miss""
train$Title[train$Title == ""Mme""] <- ""Mrs""
train$Title <- as.character(train$Title)
train$Title[train$Title != ""Mrs"" & train$Title != ""Miss"" & train$Title != ""Mr"" & train$Title != ""Master""] <- ""Other""
train$Title <- as.factor(train$Title)
temp <- chisq.test(train$Title, train$Survived)
temp$observed
temp$expected
train$Alias <- 0
train$Alias[grepl(""\\("", train$Name)] <- 1
train$Alias <- as.factor(train$Alias)
temp <- chisq.test(train$Alias, train$Survived)
temp$observed
temp$expected
temp <- chisq.test(train$Alias, train$Title)
temp$observed
train$NickName <- 0
train$NickName[grepl(""\"""", train$Name)] <- 1
temp <- chisq.test(train$NickName, train$Survived)
temp$observed
train$Surname <- as.factor(gsub("",.*"", """", train$Name))
summary(train$Surname)
train$SurnameBinary <- 0
train$SurnameBinary[duplicated(train$Surname)] <- 1
chisq.test(train$SurnameBinary, train$Survived)
train$Cabin <- as.factor(substr(train$Cabin, 0, 1))
summary(train$Cabin)
train$Cabin[train$Cabin == """"] <- NA
chisq.test(train$Cabin, train$Survived)
train$TicketPrefix <- toupper(gsub("" .*$"", """", train$Ticket))
train$TicketPrefix <- gsub(""\\."", """", train$TicketPrefix)
train$TicketPrefix <- gsub(""/"", """", train$TicketPrefix)
train$TicketPrefix <- as.factor(gsub(""[0-9]"", """", train$TicketPrefix))
train$TicketNumber <- as.numeric(gsub(""[^0-9]"", """", train$Ticket))
summary(train$TicketPrefix)
train$HasPrefix <- 0
train$HasPrefix[train$TicketPrefix != """"] <- 1
chisq.test(train$HasPrefix, train$Survived)
model <- train(Survived ~ Pclass + Sex + Parch + Fare + Title, data = train, method = ""rf"")
summary(test)
test$Embarked[test$Embarked == """"] <- ""S""
test$Age[is.na(test$Age)] <- median(test$Age, na.rm = TRUE)
test$Fare[is.na(test$Fare)] <- median(test$Fare, na.rm = TRUE)
test$Title <- as.character(gsub(""\\..*"", """", test$Name))
test$Title <- gsub("".*, "", """", test$Title)
test$Title[test$Title == ""Mlle"" | test$Title == ""Ms""] <- ""Miss""
test$Title[test$Title != ""Mrs"" & test$Title != ""Miss"" & test$Title != ""Mr"" & test$Title != ""Master""] <- ""Other""
test$Title <- as.factor(test$Title)
test$Survived <- predict(model, test)
write.csv(test[c(1, 13)], ""predictions.csv"", row.names = FALSE)",0,0,1,0,0,0,0,1,0,0,1,0,0,0
304,rajasekara-titanic-survival-prediction,0.763,"['as.character', 'as.factor', 'c', 'cut', 'data.frame', 'factor', 'is.na', 'library', 'rbind', 'set.seed', 'sum', 'summary', 'table', 'boxplot.stats', 'randomForest', 'lm', 'median', 'predict', 'install.packages', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'dplyr', 'randomForest', 'base']",4.761480808258058,"['median', 'install.packages', 'boxplot.stats', 'as.character', 'is.na', 'lm', 'as.factor', 'summary', 'str', 'set.seed', 'factor', 'cut', 'read.csv', 'table', 'randomForest', 'c', 'rbind', 'sum', 'predict', 'write.csv', 'data.frame', 'library']",[],"['allanwbrooks-exploring-survival-on-the-titanic', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'venkatko-titanic-survival1', 'tetyama-trial-titanic', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'abedben-exploring-survival-on-the-titanic', 'jww001-exploring-survival-on-the-titanicqw', 'researchbigd-titanic-forkedfrommeganscript']","[0.7841230313322041, 0.7799293142560789, 0.7785477532101179, 0.7769367081140969, 0.7756953839858228, 0.7751329449379311, 0.7751329449379311, 0.7741918519956962, 0.7739801052799659, 0.7733768280707596]","{'package:base': ['as.character', 'as.factor', 'c', 'cut', 'data.frame', 'factor', 'is.na', 'library', 'rbind', 'set.seed', 'sum', 'summary', 'table'], 'package:grDevices': ['boxplot.stats'], 'package:randomForest': ['randomForest'], 'package:stats': ['lm', 'median', 'predict'], 'package:utils': ['install.packages', 'read.csv', 'str', 'write.csv']}","{""package:base"": [""as.character"", ""as.factor"", ""c"", ""cut"", ""data.frame"", ""factor"", ""is.na"", ""library"", ""rbind"", ""set.seed"", ""sum"", ""summary"", ""table""], ""package:grDevices"": [""boxplot.stats""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""lm"", ""median"", ""predict""], ""package:utils"": [""install.packages"", ""read.csv"", ""str"", ""write.csv""]}",packagebase ascharacter asfactor c cut dataframe factor isna library rbind setseed sum summary table packagegrDevices boxplotstats packagerandomForest randomForest packagestats lm median predict packageutils installpackages readcsv str writecsv,"train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
library(ggplot2)
library(ggthemes)
library(dplyr)
test$Survived <- ""NA""
train$TrainOrTest <- ""Train""
test$TrainOrTest <- ""Test""
full <- rbind(train, test)
str(full)
full$FamilySize <- 1 + full$SibSp + full$Parch
table(full$Sex)
sum(is.na(full$Age))
table(full$FamilySize)
sum(is.na(full$Fare))
table(full$Embarked)
table(full$Pclass)
UpperQuartileAge <- boxplot.stats(full$Age)$stats[5]
NonAgeOutliers <- full$Age < UpperQuartileAge
full_NoAgeOutliers <- full[NonAgeOutliers, ]
summary(full_NoAgeOutliers$Age, na.rm = TRUE)
set.seed(123)
Age.equation = ""Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked""
Age_Model <- lm(formula = Age.equation, data = full_NoAgeOutliers)
Blank_Age_Rows <- full[is.na(full$Age), c(""Pclass"", ""Sex"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked"")]
Predicted_Age_Rows <- predict(Age_Model, newdata = Blank_Age_Rows)
full[is.na(full$Age), ""Age""] <- Predicted_Age_Rows
full[is.na(full$Age), ""Age""]
summary(full$Age)
full[full$Age < 0, ""Age""] <- median(full$Age)
UpperQuartileFare <- boxplot.stats(full$Fare)$stats[5]
NonFareOutliers <- full$Fare < UpperQuartileFare
full_NoFareOutliers <- full[NonFareOutliers, ]
summary(full_NoFareOutliers$Fare, na.rm = TRUE)
set.seed(1234)
Fare.equation = ""Fare ~ Pclass + Sex + SibSp + Parch + Age + Embarked""
Fare_Model <- lm(formula = Fare.equation, data = full_NoFareOutliers)
Blank_Fare_Rows <- full[is.na(full$Fare), c(""Pclass"", ""Sex"", ""SibSp"", ""Parch"", ""Age"", ""Embarked"")]
Predicted_Fare_Rows <- predict(Fare_Model, newdata = Blank_Fare_Rows)
full[is.na(full$Fare), ""Fare""] <- Predicted_Fare_Rows
full[is.na(full$Fare), ""Fare""]
full[full$Fare < 0, ""Fare""] <- median(full$Fare)
full[is.na(full$Embarked), ""Embarked""] <- ""S""
str(full)
full$AgeGroup <- cut(full$Age, breaks = c(-1, 5, 10, 20, 30, 40, 50, 60, 70, 80))
full$FareGroup <- cut(full$Fare, breaks = c(-1, 5, 10, 25, 50, 75, 100, 150, 200, 300, 500, 1000))
full$Pclass <- as.factor(full$Pclass)
full$Sex <- as.factor(full$Sex)
full$AgeGroup <- as.factor(full$AgeGroup)
full$FamilySize <- as.factor(full$FamilySize)
full$SibSp <- as.factor(as.character(full$SibSp))
full$Parch <- as.factor(as.character(full$Parch))
full$FareGroup <- as.factor(full$FareGroup)
full$Embarked <- as.factor(full$Embarked)
full$Survived <- as.factor(full$Survived)
str(full)
install.packages(""randomForest"")
library(randomForest)
titanic_model <- randomForest(factor(Survived) ~ Pclass + Sex + AgeGroup + FamilySize + FareGroup + Embarked, data = full[full$TrainOrTest == ""Train"", ])
str(test)
set.seed(12345)
Prediction <- predict(titanic_model, full[full$TrainOrTest == ""Test"", ])
Submission <- data.frame(PassengerID = test$PassengerId, Survived = Prediction)
write.csv(Submission, file = ""Submission.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
305,nibedita84-my-first-kernel-titanic-survival-rate,0.7559999999999999,"['as.factor', 'c', 'data.frame', 'factor', 'is.na', 'library', 'nrow', 'prop.table', 'round', 'set.seed', 'subset', 'summary', 'table', 'bind_rows', 'select', 'gbm.fit', 'gbm.perf', 'aes', 'geom_boxplot', 'ggplot', 'randomForest', 'fancyRpartPlot', 'rpart', 'median', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['ggplot2', 'rpart', 'rattle', 'dplyr', 'rpart.plot', 'RColorBrewer', 'randomForest', 'gbm', 'base']",5.48950386047363,"['nrow', 'median', 'subset', 'is.na', 'geom_boxplot', 'prop.table', 'rpart', 'as.factor', 'summary', 'round', 'str', 'set.seed', 'factor', 'gbm.perf', 'read.csv', 'table', 'randomForest', 'c', 'aes', 'fancyRpartPlot', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'ggplot', 'gbm.fit', 'head', 'library', 'select']",[],"['zahraatashgahy-r-titanic-1', 'tsfitz-titanic', 'peggy88-titanic-data-eda-by-peggy', 'tobybot11-toby-s-titanic-analysis', 'srinivasarajui-srini-s-r-titanic-solution', 'amodi8-titanic-exploring-survival-using-machine-learning', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'liudj2008-titanic', 'turntrout-titanic-data-exploration']","[0.11400751234657598, 0.08539267807407505, 0.08056160106433717, 0.07764235714825585, 0.07204058252708774, 0.06961159557179557, 0.06872299918793874, 0.06872299918793874, 0.06860637954075709, 0.06825417421468795]","{'package:base': ['as.factor', 'c', 'data.frame', 'factor', 'is.na', 'library', 'nrow', 'prop.table', 'round', 'set.seed', 'subset', 'summary', 'table'], 'package:dplyr': ['bind_rows', 'select'], 'package:gbm': ['gbm.fit', 'gbm.perf'], 'package:ggplot2': ['aes', 'geom_boxplot', 'ggplot'], 'package:randomForest': ['randomForest'], 'package:rattle': ['fancyRpartPlot'], 'package:rpart': ['rpart'], 'package:stats': ['median', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""package:base"": [""as.factor"", ""c"", ""data.frame"", ""factor"", ""is.na"", ""library"", ""nrow"", ""prop.table"", ""round"", ""set.seed"", ""subset"", ""summary"", ""table""], ""package:dplyr"": [""bind_rows"", ""select""], ""package:gbm"": [""gbm.fit"", ""gbm.perf""], ""package:ggplot2"": [""aes"", ""geom_boxplot"", ""ggplot""], ""package:randomForest"": [""randomForest""], ""package:rattle"": [""fancyRpartPlot""], ""package:rpart"": [""rpart""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",packagebase asfactor c dataframe factor isna library nrow proptable round setseed subset summary table packagedplyr bindrows select packagegbm gbmfit gbmperf packageggplot2 aes geomboxplot ggplot packagerandomForest randomForest packagerattle fancyRpartPlot packagerpart rpart packagestats median predict packageutils head readcsv str writecsv,"library(""ggplot2"")
library(""rpart"")
library(""rattle"")
library(""dplyr"")
library(""rpart.plot"")
library(""RColorBrewer"")
library(""randomForest"")
library(""gbm"")
traindata <- read.csv(""../input/train.csv"")
testdata <- read.csv(""../input/test.csv"")
totaldata <- bind_rows(traindata, testdata)
str(totaldata)
totaldata$Family_size <- totaldata$SibSp + totaldata$Parch + 1
totaldata
str(totaldata)
embark1 <- subset(totaldata, !(PassengerId == 62 | PassengerId == 830))
ggplot(embark1, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot()
totaldata$Embarked[c(62, 830)] <- ""C""
totaldata$Embarked <- factor(totaldata$Embarked)
age_predicted <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Family_size, data = totaldata[!is.na(totaldata$Age), ], method = ""anova"")
totaldata$Age[is.na(totaldata$Age)] <- predict(age_predicted, totaldata[is.na(totaldata$Age), ])
totaldata$Fare[1044] <- median(totaldata[totaldata$Pclass == ""3"" & totaldata$Embarked == ""S"", ]$Fare, na.rm = TRUE)
totaldata$Fare[1044]
totaldata$Child <- NA
totaldata$Child[totaldata$Age < 18] <- 1
totaldata$Child[totaldata$Age >= 18] <- 0
str(totaldata)
prop.table(table(totaldata$Child, totaldata$Survived), 1)
prop.table(table(totaldata$Family_size, totaldata$Survived), 1)
str(totaldata)
train <- totaldata[1:891, ]
test <- totaldata[892:1309, ]
model1 <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Family_size + Child, data = train, method = ""class"")
fancyRpartPlot(model1)
prediction1 <- predict(model1, train, type = ""class"")
summary(prediction1)
set.seed(111)
model2 <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Child + Family_size, data = train, importance = TRUE, ntree = 1000)
prediction2 <- predict(model2, train, type = ""class"")
summary(prediction2)
prediction <- predict(model2, test, type = ""class"")
solution <- data.frame(PassengerId = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_solution.csv"", row.names = FALSE)
totaldata = select(totaldata, Pclass, Sex, Age, SibSp, Parch, Fare, Embarked, Child, Family_size)
end_trn = nrow(train)
end = nrow(totaldata)
model3 = gbm.fit(x = totaldata[1:end_trn, ], y = train$Survived, shrinkage = 0.01, distribution = ""bernoulli"", interaction.depth = 3, nTrain = round(end_trn * 0.8), n.minobsinnode = 10, n.trees = 3000, verbose = T)
summary(model3)
gbm.perf(model3)
predictiontest <- predict(object = model3, newdata = totaldata[1:end_trn, ], n.trees = gbm.perf(model3, plot.it = F), type = ""response"")
predictiontest <- round(predictiontest)
head(predictiontest, n = 20)
head(train$Survived, n = 20)
prediction3 <- predict(object = model3, newdata = totaldata[(end_trn + 1):end, ], n.trees = gbm.perf(model3, plot.it = F), type = ""response"")
prediction3 <- round(prediction3)
solution2 <- data.frame(PassengerId = test$PassengerId, Survived = prediction3)
write.csv(solution2, file = ""gbm_solution.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
306,monfilier-titanic-survival-prediction,0.7440000000000001,"['user defined', 'user defined', 'user defined', 'as.factor', 'c', 'colnames', 'data.frame', 'dim', 'gsub', 'is.na', 'lapply', 'library', 'names', 'round', 'set.seed', 'sum', 'summary', 'suppressMessages', 'suppressWarnings', 'table', 'legend', 'plot', 'filter', 'median', 'predict', 'read.csv', 'write.csv']",['base'],4.93208694458008,"['median', 'lapply', 'is.na', 'names', 'as.factor', 'summary', 'filter', 'round', 'set.seed', 'gsub', 'colnames', 'dim', 'suppressWarnings', 'read.csv', 'suppressMessages', 'table', 'c', 'sum', 'plot', 'legend', 'predict', 'write.csv', 'data.frame', 'user defined', 'library']",[],"['srikantjyrmn-titanic-survivor', 'jasminegoel-playing-with-titanic-dataset-r', 'biohazzzard-titanic-with-tidyverse-and-caret', 'tavoosi-predicting-survival-on-the-titanic-with-rf-lr-nb', 'redroy44-tidy-titanic-script', 'emj777-decision-tree-titanic-r', 'paulocressoni-titanic-using-stepwise-linear-regression', 'skhawaja-titanic-disaster-survival-099', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'ezhilvelme-titanic-neural-network-c-4-2']","[0.9151600239502754, 0.8569233379293605, 0.7680998597006918, 0.7654240657740825, 0.7094866478745119, 0.17385877429290178, 0.1305956487543651, 0.1121777283871669, 0.11131855500684448, 0.10172538767633146]","{'character(0)': ['aes', 'bind_rows', 'complete', 'densityplot', 'dotplot', 'element_blank', 'element_rect', 'element_text', 'everything', 'geom_bar', 'geom_density', 'geom_text', 'geom_vline', 'ggplot', 'ggtitle', 'glimpse', 'group_by', 'mice', 'missmap', 'randomForest', 'scale_x_continuous', 'select', 'summarise', 'theme', 'xlab', 'ylab'], 'package:base': ['as.factor', 'c', 'colnames', 'data.frame', 'dim', 'gsub', 'is.na', 'lapply', 'library', 'names', 'round', 'set.seed', 'sum', 'summary', 'suppressMessages', 'suppressWarnings', 'table'], 'package:graphics': ['legend', 'plot'], 'package:stats': ['filter', 'median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""aes"", ""bind_rows"", ""complete"", ""densityplot"", ""dotplot"", ""element_blank"", ""element_rect"", ""element_text"", ""everything"", ""geom_bar"", ""geom_density"", ""geom_text"", ""geom_vline"", ""ggplot"", ""ggtitle"", ""glimpse"", ""group_by"", ""mice"", ""missmap"", ""randomForest"", ""scale_x_continuous"", ""select"", ""summarise"", ""theme"", ""xlab"", ""ylab""], ""package:base"": [""as.factor"", ""c"", ""colnames"", ""data.frame"", ""dim"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""round"", ""set.seed"", ""sum"", ""summary"", ""suppressMessages"", ""suppressWarnings"", ""table""], ""package:graphics"": [""legend"", ""plot""], ""package:stats"": [""filter"", ""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 aes bindrows complete densityplot dotplot elementblank elementrect elementtext everything geombar geomdensity geomtext geomvline ggplot ggtitle glimpse groupby mice missmap randomForest scalexcontinuous select summarise theme xlab ylab packagebase asfactor c colnames dataframe dim gsub isna lapply library names round setseed sum summary suppressMessages suppressWarnings table packagegraphics legend plot packagestats filter median predict packageutils readcsv writecsv,"suppressWarnings(suppressMessages(library(tidyverse)))
suppressWarnings(suppressMessages(library(caret)))
suppressWarnings(suppressMessages(library(mice)))
suppressWarnings(suppressMessages(library(Amelia)))
suppressWarnings(suppressMessages(library(randomForest)))
train <- read.csv(""../input/train.csv"", header = TRUE, stringsAsFactors = FALSE, na.strings = c("""", ""NA""))
test <- read.csv(""../input/test.csv"", header = TRUE, stringsAsFactors = FALSE, na.strings = c("""", ""NA""))
train$Dataset <- ""train""
test$Dataset <- ""test""
full_data <- bind_rows(train, test)
glimpse(full_data)
fctr <- c(""PassengerId"", ""Survived"", ""Pclass"", ""Sex"", ""Embarked"", ""Dataset"")
full_data[fctr] <- lapply(full_data[fctr], function(x) as.factor(x))
dim(full_data)
full_data$Title <- gsub(""(.*, )|(\\..*)"", """", full_data$Name)
ggplot(full_data, aes(Title)) + geom_bar() + ylab(""Number of times a title appears in the dataset"") + xlab(""Title"") + ggtitle(""Titles in Titanic data"")
table(full_data$Sex, full_data$Title)
others <- c(""Jonkheer"", ""Sir"", ""Major"", ""Dr"", ""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Rev"")
full_data$Title[full_data$Title == ""Mme""] <- ""Mrs""
full_data$Title[full_data$Title == ""Ms""] <- ""Miss""
full_data$Title[full_data$Title == ""Mlle""] <- ""Miss""
full_data$Title[full_data$Title %in% others] <- ""Other""
table(full_data$Sex, full_data$Title)
full_data$Title <- as.factor(full_data$Title)
missmap(full_data, col = c(""wheat"", ""darkred""), y.cex = 0.4, x.cex = 0.8, legend = TRUE, rank.order = TRUE)
full_data %>% filter(is.na(Fare))
ggplot(full_data[full_data$Pclass == ""3"" & full_data$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""lightblue"", alpha = 0.5) + geom_vline(aes(xintercept = median(Fare, na.rm = TRUE)), colour = ""red"", linetype = ""dashed"", lwd = 1) + geom_text(aes(x = median(Fare, na.rm = TRUE), y = -0.005, label = round(median(Fare, na.rm = TRUE), digits = 2)), hjust = -0.3, size = 6) + scale_x_continuous() + ggtitle(label = ""Median for passengers who embarked \n in Southampton as 3rd class"") + theme(panel.grid.major = element_blank(), 
    plot.title = element_text(hjust = 0.5, face = ""bold"", size = 15))
full_data$Fare[full_data$PassengerId[1044]] <- 8.05
full_data %>% filter(is.na(Embarked))
full_data %>% group_by(Embarked, Pclass) %>% filter(Pclass == ""1"") %>% summarise(median = median(Fare))
full_data$Embarked[full_data$PassengerId[c(62, 830)]] <- ""C""
set.seed(123)
full_data_mice <- mice(full_data[, !names(full_data) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
densityplot(full_data_mice)
mice_output <- complete(full_data_mice)
plot <- ggplot() + geom_density(aes(x = full_data$Age, y = ..density..), fill = ""red"", alpha = 0.5) + geom_density(aes(x = mice_output$Age, y = ..density..), fill = ""yellow"", alpha = 0.5) + theme(panel.background = element_rect(fill = ""white"", colour = ""white"")) + ggtitle(""Comparison between original and imputed data"") + theme(plot.title = element_text(hjust = 0.5)) + xlab(""Age"") + ylab(""Density"")
plot
full_data$Age <- mice_output$Age
sum(is.na(full_data$Age))
train <- full_data %>% filter(Dataset == ""train"") %>% select(everything(), -Dataset)
test <- full_data %>% filter(Dataset == ""test"") %>% select(everything(), -Dataset)
set.seed(123)
rf_model <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
summary(train$Survived)
dotplot(rf_model$importance)
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",0,0,0,0,1,0,0,0,0,0,0,0,0,0
308,quentinalais-kerneltitanicquentin,0.7490000000000001,"['as.numeric', 'c', 'data.frame', 'getwd', 'ifelse', 'is.na', 'library', 'round', 'scale', 'summary', 'lda', 'predict', 'setNames', 'read.csv', 'str', 'write.csv']","['MASS', 'base']",0.549015998840332,"['lda', 'as.numeric', 'ifelse', 'predict', 'write.csv', 'setNames', 'data.frame', 'scale', 'read.csv', 'summary', 'getwd', 'library', 'round', 'str', 'c', 'is.na']",[],"['qianbi-titanic-logistic', 'waiyujack-titanic-random-search-in-r', 'nrutyam-predictions-on-titanic', 'lagprophet-titanic', 'retrospectprospect-titanic-machine-learning-from-eda-to-xgb', 'garciparedes-titanic-getting-started', 'rboimistruk-titanic-survivals-analysis', 'antonov-logistic-regression-for-titanic', 'mihaque313-first-submission-to-titanic-problem', 'erskumars-titanic-survival-eda-and-survival-rate-prediction']","[0.8990470088520349, 0.40756868240266997, 0.22404972841849616, 0.16753418676072382, 0.15156798791545686, 0.11436392566401272, 0.09052115079849192, 0.07608982421227732, 0.07430264779109237, 0.06425559845217924]","{'package:base': ['as.numeric', 'c', 'data.frame', 'getwd', 'ifelse', 'is.na', 'library', 'round', 'scale', 'summary'], 'package:MASS': ['lda'], 'package:stats': ['predict', 'setNames'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""as.numeric"", ""c"", ""data.frame"", ""getwd"", ""ifelse"", ""is.na"", ""library"", ""round"", ""scale"", ""summary""], ""package:MASS"": [""lda""], ""package:stats"": [""predict"", ""setNames""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase asnumeric c dataframe getwd ifelse isna library round scale summary packageMASS lda packagestats predict setNames packageutils readcsv str writecsv,"data_train = read.csv(""../input/train.csv"")
data_test = read.csv(""../input/test.csv"")
str(data_train)
data_train
data_test
data_train = data_train[, c(-4, -9, -11)]
data_train
data_train$Sex = ifelse(data_train$Sex == ""male"", 1, 0)
data_train$Embarked = as.numeric(data_train$Embarked)
m = 0
a = 0
k = 0
for (i in 1:891) {
    if (is.na(data_train$Age[i])) {
        k = k + 1
    }
    else {
        a = a + data_train$Age[i]
        k = k + 1
    }
}
m = a/k
for (i in 1:891) {
    if (is.na(data_train$Age[i])) {
        data_train$Age[i] = m
    }
}
data_train$Age = round(data_train$Age, 0)
data_train$Fare = scale(data_train$Fare)
data_train$Age = scale(data_train$Age)
data_train
library(MASS)
classifier.lda = lda(Survived ~ ., data = data_train)
summary(classifier.lda)
data_test = data_test[, c(-3, -8, -10)]
data_test$Embarked = as.numeric(data_test$Embarked)
data_test$Sex = ifelse(data_test$Sex == ""male"", 1, 0)
data_test$Age = scale(data_test$Age)
data_test$Fare = scale(data_test$Fare)
data_test
m = 0
a = 0
k = 0
for (i in 1:418) {
    if (is.na(data_test$Age[i])) {
        k = k + 1
    }
    else {
        a = a + data_test$Age[i]
        k = k + 1
    }
}
m = a/k
for (i in 1:418) {
    if (is.na(data_test$Age[i])) {
        data_test$Age[i] = m
    }
}
data_test$Age = round(data_test$Age, 0)
prediction.lda = predict(classifier.lda, newdata = data_test, type = ""prob"")
prediction.lda$class
result = data.frame(data_test$PassengerId, prediction.lda$class)
result <- setNames(result, c(""PassengerId"", ""Survived""))
for (i in 1:418) {
    if (is.na(result$Survived[i])) {
        result$Survived[i] = 0
    }
}
summary(result)
getwd()
write.csv(result, file = ""gender_submission_quentin_alais.csv"", row.names = FALSE)
str(result)",0,0,0,0,0,0,1,0,0,0,0,0,0,0
309,sociopath00-sociopath-titanic,0.763,"['as.data.frame', 'as.factor', 'as.ordered', 'is.na', 'library', 'nrow', 'rbind', 'summary', 'randomForest', 'as.formula', 'median', 'predict', 'read.csv', 'write.csv']","['randomForest', 'base']",0.641988039016724,"['as.ordered', 'nrow', 'rbind', 'predict', 'write.csv', 'as.formula', 'median', 'read.csv', 'randomForest', 'as.factor', 'summary', 'library', 'as.data.frame', 'is.na']",[],"['turntrout-titanic-data-exploration', 'ezhilvelme-titanic-neural-network-c-4-2', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'jacekpardyak-mytitanicscript', 'chuanhuiliu-one-solution-to-titanic-survival-analysis', 'acrespop-titanic1', 'divy44-titanic1']","[0.135930387898215, 0.0963253206937315, 0.09323425773888881, 0.09323425773888881, 0.09233988457941118, 0.08969489627655992, 0.0890532538141362, 0.08802903251100906, 0.08654761172644941, 0.08490189957312094]","{'package:base': ['as.data.frame', 'as.factor', 'as.ordered', 'is.na', 'library', 'nrow', 'rbind', 'summary'], 'package:randomForest': ['randomForest'], 'package:stats': ['as.formula', 'median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.data.frame"", ""as.factor"", ""as.ordered"", ""is.na"", ""library"", ""nrow"", ""rbind"", ""summary""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""as.formula"", ""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase asdataframe asfactor asordered isna library nrow rbind summary packagerandomForest randomForest packagestats asformula median predict packageutils readcsv writecsv,"library(randomForest)
train <- read.csv(""../input/train.csv"")
test1 <- read.csv(""../input/test.csv"")
summary(train)
train$isTrain <- TRUE
test1$isTrain <- FALSE
test1$Survived <- NA
titanicFull <- rbind(train, test1)
m1 <- median(titanicFull$Age, na.rm = T)
titanicFull[is.na(titanicFull$Age), ""Age""] <- m1
titanicFull[titanicFull$Embarked == """", ""Embarked""] <- ""S""
m2 <- median(titanicFull$Fare, na.rm = T)
titanicFull[is.na(titanicFull$Fare), ""Fare""] <- m2
titanicFull$Pclass <- as.ordered(titanicFull$Pclass)
titanicFull$Sex <- as.factor(titanicFull$Sex)
titanicFull$Embarked <- as.factor(titanicFull$Embarked)
train <- titanicFull[titanicFull$isTrain == TRUE, ]
test1 <- titanicFull[titanicFull$isTrain == FALSE, ]
train$Survived <- as.factor(train$Survived)
fml <- ""Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked + Fare""
fml <- as.formula(fml)
titanic.model <- randomForest(fml, train, ntree = 500, mtry = 3, nodesize = 0.01 * nrow(train))
Survived <- predict(titanic.model, test1)
PassengerId <- test1$PassengerId
op <- as.data.frame(PassengerId)
op$Survived <- Survived
write.csv(op, file = ""Titanic_socio.csv"", row.names = F)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
310,chuckivan-titanic-logit,0.742,"['as.data.frame', 'as.factor', 'c', 'dim', 'is.na', 'library', 'rbind', 'rep', 'summary', 'plot', 'boxplot.stats', 'anova', 'glm', 'lm', 'predict', 'read.csv', 'write.csv']","['tidyverse', 'base']",1.70698499679565,"['rbind', 'anova', 'dim', 'plot', 'predict', 'write.csv', 'read.csv', 'lm', 'as.factor', 'summary', 'library', 'as.data.frame', 'boxplot.stats', 'rep', 'c', 'is.na', 'glm']",[],"['chuckivan-titanic-logit', 'rajasekara-titanic-survival-prediction', 'venkatko-titanic-survival1', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'hemingwei-titanic-r-solution-from-megan-risdal', 'tetyama-trial-titanic', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'abedben-exploring-survival-on-the-titanic', 'mohankanni-exploring-survival-on-the-titanic']","[0.9999999999999999, 0.5380792318510548, 0.5374415844612217, 0.5357120342866364, 0.5345100706403121, 0.5345009492401784, 0.5341800694345065, 0.5341800694345065, 0.5326817309700709, 0.5319427983387508]","{'package:base': ['as.data.frame', 'as.factor', 'c', 'dim', 'is.na', 'library', 'rbind', 'rep', 'summary'], 'package:graphics': ['plot'], 'package:grDevices': ['boxplot.stats'], 'package:stats': ['anova', 'glm', 'lm', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.data.frame"", ""as.factor"", ""c"", ""dim"", ""is.na"", ""library"", ""rbind"", ""rep"", ""summary""], ""package:graphics"": [""plot""], ""package:grDevices"": [""boxplot.stats""], ""package:stats"": [""anova"", ""glm"", ""lm"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase asdataframe asfactor c dim isna library rbind rep summary packagegraphics plot packagegrDevices boxplotstats packagestats anova glm lm predict packageutils readcsv writecsv,"library(tidyverse)
train = read.csv(""../input/train.csv"", stringsAsFactors = FALSE, header = TRUE)
test = read.csv(""../input/test.csv"", stringsAsFactors = FALSE, header = TRUE)
train$IsTrain = TRUE
test$IsTrain = FALSE
test$Survived = NA
full = rbind(train, test)
full = full[!(full$Embarked == """"), ]
fare_mean = summary(full$Fare)[4]
full[is.na(full$Fare), ]$Fare = fare_mean
age_outlier_filter = full$Age < boxplot.stats(full$Age)$stats[5]
age_model = lm(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked, data = full[age_outlier_filter, ])
age_missing = full[is.na(full$Age), c(""Pclass"", ""Sex"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked"")]
age_pred = predict(age_model, newdata = age_missing)
full[is.na(full$Age), ""Age""] = age_pred
full$Pclass = as.factor(full$Pclass)
full$Sex = as.factor(full$Sex)
full$Embarked = as.factor(full$Embarked)
train = full[full$IsTrain == TRUE, ]
test = full[full$IsTrain == FALSE, ]
logit_model_null = glm(Survived ~ 1, data = train, family = binomial)
summary(logit_model_null)
logit_model_prime = glm(Survived ~ . - (Name + Ticket + Cabin), data = train, family = binomial)
summary(logit_model_prime)
logit_model = glm(Survived ~ Pclass + Sex + Age + SibSp, data = train, family = binomial)
summary(logit_model)
anova(logit_model_null, logit_model_prime, logit_model, test = ""Chisq"")
logit_prob = predict(logit_model, test, type = ""response"")
logit_pred = rep(0, dim(test)[1])
plot(logit_prob)
logit_pred[logit_prob > 0.5] = 1
PassengerId = test$PassengerId
output_df = as.data.frame(PassengerId)
output_df$Survived = logit_pred
write.csv(output_df, file = ""titanic_logit_submission.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,0,0,0,0,0
314,tetyama-trial-titanic,0.7440000000000001,"['filter', 'as.factor', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'par', 'plot', 'complete', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'xgboost', 'base']",25.0747740268707,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'coord_flip', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mice', 'geom_hline', 'desc', 'set.seed', 'gsub', 'importance', 'factor', 'colnames', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'vikramatjob-exploring-survival-on-the-titanic-var1', 'mira5b-exploring-survival-on-the-titanic', 'mohankanni-exploring-survival-on-the-titanic', 'kyanyoga-exploring-survival-on-the-titanic', 'rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic']","[0.9974416551945161, 0.9967815556994365, 0.9967815556994365, 0.9906794813717286, 0.9872206049023498, 0.9867679045023673, 0.9865257685837179, 0.9864919624479094, 0.9863976797316245, 0.9863976797316245]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'par', 'plot'], 'package:mice': ['complete', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""par"", ""plot""], ""package:mice"": [""complete"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c colnames dataframe factor gsub isna lapply library names paste paste0 round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend par plot packagemice complete mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
library(""xgboost"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,1,0,0,0,0,0
315,harsh2-exploring-the-titanic-dataset,0.778,"['summarize', 'filter', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.factor', 'as.numeric', 'as.ordered', 'c', 'cbind', 'colnames', 'data.frame', 'factor', 'ifelse', 'is.na', 'length', 'library', 'max', 'mean', 'nrow', 'paste', 'prop.table', 'range', 'rbind', 'rm', 'round', 'rownames', 'rowSums', 'sapply', 'set.seed', 'strsplit', 'sub', 'substring', 'sum', 'summary', 'table', 'unique', 'which', 'train', 'trainControl', 'plot_grid', 'arrange', 'group_by', 'left_join', 'n', 'select', 'summarise', 'aes', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_label', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme', 'hist', 'par', 'cut2', 'kable', 'varImpPlot', 'lm', 'median', 'predict', 'read.csv', 'str', 'tail', 'write.csv']","['Hmisc', 'knitr', 'ggplot2', 'dplyr', 'caret', 'randomForest', 'cowplot', 'ROCR', 'e1071', 'base']",10.4711899757385,"['summarise', 'as.ordered', 'nrow', 'labs', 'geom_label', 'mean', 'median', 'which', 'as.character', 'theme', 'str', 'is.na', 'sub', 'scale_x_continuous', 'geom_boxplot', 'prop.table', 'lm', 'cut2', 'as.factor', 'range', 'filter', 'summary', 'round', 'sapply', 'left_join', 'n', 'geom_histogram', 'hist', 'kable', 'set.seed', 'rowSums', 'varImpPlot', 'factor', 'colnames', 'plot_grid', 'arrange', 'unique', 'max', 'geom_bar', 'summarize', 'length', 'read.csv', 'table', 'par', 'rm', 'substring', 'group_by', 'train', 'c', 'aes', 'scale_y_continuous', 'tail', 'rbind', 'paste', 'as.numeric', 'ifelse', 'sum', 'predict', 'write.csv', 'data.frame', 'rownames', 'strsplit', 'ggplot', 'geom_density', 'user defined', 'library', 'trainControl', 'cbind', 'select', 'facet_grid']",[],"['zahoorahmad-titanic-2nd-degree-families-and-majority-voting', 'ushasri-titanic-2nd-degree-families-and-majority-voting', 'erikbruin-titanic-2nd-degree-families-and-majority-voting', 'maza91-titanic-logistic-regression', 'ravikrishnareddy-titanic-survival-prediction', 'domini-titanic-data-exploration-and-modelling', 'djohnbar-titanic-rf', 'djohnbar-fork-of-titanic-rf-w-titles', 'aeintngon-titanic-exploratory-analysis', 'ablearcher-my-titanic']","[0.9697038119098774, 0.9697038119098774, 0.9687338566529745, 0.7586502069295339, 0.755388322076559, 0.7324849070570568, 0.7277531858154402, 0.7152622321265243, 0.7032554309392224, 0.699308334788702]","{'c(""package:dplyr"", ""package:Hmisc"")': ['summarize'], 'c(""package:dplyr"", ""package:stats"")': ['filter'], 'character(0)': ['pretty_breaks'], 'package:base': ['as.character', 'as.factor', 'as.numeric', 'as.ordered', 'c', 'cbind', 'colnames', 'data.frame', 'factor', 'ifelse', 'is.na', 'length', 'library', 'max', 'mean', 'nrow', 'paste', 'prop.table', 'range', 'rbind', 'rm', 'round', 'rownames', 'rowSums', 'sapply', 'set.seed', 'strsplit', 'sub', 'substring', 'sum', 'summary', 'table', 'unique', 'which'], 'package:caret': ['train', 'trainControl'], 'package:cowplot': ['plot_grid'], 'package:dplyr': ['arrange', 'group_by', 'left_join', 'n', 'select', 'summarise'], 'package:ggplot2': ['aes', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_label', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme'], 'package:graphics': ['hist', 'par'], 'package:Hmisc': ['cut2'], 'package:knitr': ['kable'], 'package:randomForest': ['varImpPlot'], 'package:stats': ['lm', 'median', 'predict'], 'package:utils': ['read.csv', 'str', 'tail', 'write.csv']}","{""c(""package:dplyr"", ""package:Hmisc"")"": [""summarize""], ""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""character(0)"": [""pretty_breaks""], ""package:base"": [""as.character"", ""as.factor"", ""as.numeric"", ""as.ordered"", ""c"", ""cbind"", ""colnames"", ""data.frame"", ""factor"", ""ifelse"", ""is.na"", ""length"", ""library"", ""max"", ""mean"", ""nrow"", ""paste"", ""prop.table"", ""range"", ""rbind"", ""rm"", ""round"", ""rownames"", ""rowSums"", ""sapply"", ""set.seed"", ""strsplit"", ""sub"", ""substring"", ""sum"", ""summary"", ""table"", ""unique"", ""which""], ""package:caret"": [""train"", ""trainControl""], ""package:cowplot"": [""plot_grid""], ""package:dplyr"": [""arrange"", ""group_by"", ""left_join"", ""n"", ""select"", ""summarise""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_label"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous"", ""theme""], ""package:graphics"": [""hist"", ""par""], ""package:Hmisc"": [""cut2""], ""package:knitr"": [""kable""], ""package:randomForest"": [""varImpPlot""], ""package:stats"": [""lm"", ""median"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""tail"", ""write.csv""]}",cpackagedplyr packageHmisc summarize cpackagedplyr packagestats filter character0 prettybreaks packagebase ascharacter asfactor asnumeric asordered c cbind colnames dataframe factor ifelse isna length library max mean nrow paste proptable range rbind rm round rownames rowSums sapply setseed strsplit sub substring sum summary table unique which packagecaret train trainControl packagecowplot plotgrid packagedplyr arrange groupby leftjoin n select summarise packageggplot2 aes facetgrid geombar geomboxplot geomdensity geomhistogram geomlabel ggplot labs scalexcontinuous scaleycontinuous theme packagegraphics hist par packageHmisc cut2 packageknitr kable packagerandomForest varImpPlot packagestats lm median predict packageutils readcsv str tail writecsv,"library(Hmisc)
library(knitr)
library(ggplot2)
library(dplyr)
library(caret)
library(randomForest)
library(cowplot)
library(ROCR)
library(e1071)
train <- read.csv(""../input/train.csv"", stringsAsFactors = F, na.strings = c(""NA"", """"))
test <- read.csv(""../input/test.csv"", stringsAsFactors = F, na.strings = c(""NA"", """"))
str(train)
str(test)
test$Survived <- NA
all <- rbind(train, test)
sapply(all, function(x) {
    sum(is.na(x))
})
all$Sex <- as.factor(all$Sex)
all$Survived <- as.factor(all$Survived)
all$Pclass <- as.ordered(all$Pclass)
ggplot(all[!is.na(all$Survived), ], aes(x = Survived, fill = Survived)) + geom_bar(stat = ""count"") + labs(x = ""How many people died and survived on the Titanic?"") + geom_label(stat = ""count"", aes(label = ..count..))
p1 <- ggplot(all, aes(x = Sex, fill = Sex)) + geom_bar(stat = ""count"", position = ""dodge"") + labs(x = ""All data"") + geom_label(stat = ""count"", aes(label = ..count..))
p2 <- ggplot(all[!is.na(all$Survived), ], aes(x = Sex, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"") + labs(x = ""Training data only"") + geom_label(stat = ""count"", aes(label = ..count..))
plot_grid(p1, p2)
p3 <- ggplot(all, aes(x = Pclass, fill = Pclass)) + geom_bar(stat = ""count"", position = ""dodge"") + labs(x = ""Pclass, All data"") + geom_label(stat = ""count"", aes(label = ..count..)) + theme(legend.position = ""none"")
p4 <- ggplot(all[!is.na(all$Survived), ], aes(x = Pclass, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"") + labs(x = ""Training data only"") + theme(legend.position = ""none"")
p5 <- ggplot(all[!is.na(all$Survived), ], aes(x = Pclass, fill = Survived)) + geom_bar(stat = ""count"", position = ""stack"") + labs(x = ""Training data only"", y = ""Count"") + facet_grid(. ~ Sex) + theme(legend.position = ""none"")
p6 <- ggplot(all[!is.na(all$Survived), ], aes(x = Pclass, fill = Survived)) + geom_bar(stat = ""count"", position = ""fill"") + labs(x = ""Training data only"", y = ""Percent"") + facet_grid(. ~ Sex) + theme(legend.position = ""none"")
plot_grid(p3, p4, p5, p6, ncol = 2)
all$PclassSex[all$Pclass == ""1"" & all$Sex == ""male""] <- ""P1Male""
all$PclassSex[all$Pclass == ""2"" & all$Sex == ""male""] <- ""P2Male""
all$PclassSex[all$Pclass == ""3"" & all$Sex == ""male""] <- ""P3Male""
all$PclassSex[all$Pclass == ""1"" & all$Sex == ""female""] <- ""P1Female""
all$PclassSex[all$Pclass == ""2"" & all$Sex == ""female""] <- ""P2Female""
all$PclassSex[all$Pclass == ""3"" & all$Sex == ""female""] <- ""P3Female""
all$PclassSex <- as.factor(all$PclassSex)
all$Surname <- sapply(all$Name, function(x) {
    strsplit(x, split = ""[,.]"")[[1]][1]
})
all$Surname <- sapply(all$Surname, function(x) {
    strsplit(x, split = ""[-]"")[[1]][1]
})
all$Title <- sapply(all$Name, function(x) {
    strsplit(x, split = ""[,.]"")[[1]][2]
})
all$Title <- sub("" "", """", all$Title)
kable(table(all$Sex, all$Title))
all$Title[all$Title %in% c(""Mlle"", ""Ms"")] <- ""Miss""
all$Title[all$Title == ""Mme""] <- ""Mrs""
all$Title[!(all$Title %in% c(""Master"", ""Miss"", ""Mr"", ""Mrs""))] <- ""Rare Title""
all$Title <- as.factor(all$Title)
kable(table(all$Sex, all$Title))
ggplot(all[!is.na(all$Survived), ], aes(x = Title, fill = Survived)) + geom_bar(stat = ""count"", position = ""stack"") + labs(x = ""Title"")
all$Fsize <- all$SibSp + all$Parch + 1
ggplot(all[!is.na(all$Survived), ], aes(x = Fsize, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"")
all$FsizeName <- paste(as.character(all$Fsize), all$Surname, sep = """")
SizeCheck <- all %>% group_by(FsizeName, Fsize) %>% summarise(NumObs = n())
SizeCheck$NumFam <- SizeCheck$NumObs/SizeCheck$Fsize
SizeCheck$modulo <- SizeCheck$NumObs%%SizeCheck$Fsize
SizeCheck <- SizeCheck[SizeCheck$modulo != 0, ]
sum(SizeCheck$NumObs)
kable(tail(SizeCheck))
kable(all[all$Ticket %in% c(""29104"", ""29105"", ""29106""), c(2, 3, 4, 5, 6, 7, 8, 9, 15)])
NC <- all[all$FsizeName %in% SizeCheck$FsizeName, ]
NC$Name <- sub(""\\s$"", """", NC$Name)
NC$Maiden <- sub("".*[^\\)]$"", """", NC$Name)
NC$Maiden <- sub("".*\\s(.*)\\)$"", ""\\1"", NC$Maiden)
NC$Maiden[NC$Title != ""Mrs""] <- """"
NC$Maiden <- sub(""^\\("", """", NC$Maiden)
NC$Maiden[NC$Name == ""Andersen-Jensen, Miss. Carla Christine Nielsine""] <- ""Jensen""
NC$Maiden2[NC$Maiden %in% NC$Surname] <- NC$Maiden[NC$Maiden %in% NC$Surname]
NC$Combi[!is.na(NC$Maiden2)] <- paste(NC$Surname[!is.na(NC$Maiden2)], NC$Maiden[!is.na(NC$Maiden2)])
labels1 <- NC[!is.na(NC$Combi), c(""Surname"", ""Combi"")]
labels2 <- NC[!is.na(NC$Combi), c(""Maiden"", ""Combi"")]
colnames(labels2) <- c(""Surname"", ""Combi"")
labels1 <- rbind(labels1, labels2)
NC$Combi <- NULL
NC <- left_join(NC, labels1, by = ""Surname"")
CombiMaxF <- NC[!is.na(NC$Combi), ] %>% group_by(Combi) %>% summarise(MaxF = max(Fsize))
NC <- left_join(NC, CombiMaxF, by = ""Combi"")
NC$FsizeCombi[!is.na(NC$Combi)] <- paste(as.character(NC$Fsize[!is.na(NC$Combi)]), NC$Combi[!is.na(NC$Combi)], sep = """")
FamMaid <- NC[!is.na(NC$FsizeCombi), ] %>% group_by(FsizeCombi, MaxF, Fsize) %>% summarise(NumObs = n())
FamMaidWrong <- FamMaid[FamMaid$MaxF != FamMaid$NumObs, ]
kable(unique(NC[!is.na(NC$Combi) & NC$FsizeCombi %in% FamMaidWrong$FsizeCombi, c(""Combi"", ""MaxF"")]))
NC$MaxF <- NULL
FamMale <- NC[is.na(NC$Combi), ] %>% group_by(Surname) %>% summarise(MaxF = max(Fsize))
NC <- left_join(NC, FamMale, by = ""Surname"")
NCMale <- NC[is.na(NC$Combi), ] %>% group_by(Surname, FsizeName, MaxF) %>% summarise(count = n()) %>% group_by(Surname, MaxF) %>% filter(n() > 1) %>% summarise(NumFsizes = n())
NC$Combi[NC$Surname %in% NCMale$Surname] <- NC$Surname[NC$Surname %in% NCMale$Surname]
kable(NCMale[, c(1, 2)])
kable(all[all$Surname == ""Vander Planke"", c(2, 3, 4, 5, 6, 7, 8, 9, 15)])
NC <- NC[(NC$FsizeCombi %in% FamMaidWrong$FsizeCombi) | (NC$Surname %in% NCMale$Surname), ]
NC1 <- NC %>% group_by(Combi) %>% summarise(Favg = mean(Fsize))
kable(NC1)
NC <- left_join(NC, NC1, by = ""Combi"")
NC$Favg <- round(NC$Favg)
NC <- NC[, c(""PassengerId"", ""Favg"")]
all <- left_join(all, NC, by = ""PassengerId"")
all$Fsize[!is.na(all$Favg)] <- all$Favg[!is.na(all$Favg)]
kable(all[all$Ticket == ""1601"", c(""Survived"", ""Pclass"", ""Title"", ""Surname"", ""Age"", ""Ticket"", ""SibSp"", ""Parch"", ""Fsize"")])
TicketGroup <- all %>% select(Ticket) %>% group_by(Ticket) %>% summarise(Tsize = n())
all <- left_join(all, TicketGroup, by = ""Ticket"")
ggplot(all[!is.na(all$Survived), ], aes(x = Tsize, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Ticket Size"")
all$Group <- all$Fsize
for (i in 1:nrow(all)) {
    all$Group[i] <- max(all$Group[i], all$Tsize[i])
}
all$Ticket2 <- sub(""..$"", ""xx"", all$Ticket)
rest <- all %>% select(PassengerId, Title, Age, Ticket, Ticket2, Surname, Group) %>% filter(Group == ""1"") %>% group_by(Ticket2, Surname) %>% summarise(count = n())
rest <- rest[rest$count > 1, ]
rest1 <- all[(all$Ticket2 %in% rest$Ticket2 & all$Surname %in% rest$Surname & all$Group == ""1""), c(""PassengerId"", ""Surname"", ""Title"", ""Age"", ""Ticket"", ""Ticket2"", ""Group"", ""SibSp"", ""Parch"")]
rest1 <- left_join(rest1, rest, by = c(""Surname"", ""Ticket2""))
rest1 <- rest1 %>% arrange(Ticket2, Surname)
kable(rest1[1:12, ])
all <- left_join(all, rest1)
for (i in 1:nrow(all)) {
    if (!is.na(all$count[i])) {
        all$Group[i] <- all$count[i]
    }
}
ggplot(all[!is.na(all$Survived), ], aes(x = Group, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Final Groups"")
all$GroupSize[all$Group == 1] <- ""solo""
all$GroupSize[all$Group == 2] <- ""duo""
all$GroupSize[all$Group >= 3 & all$Group <= 4] <- ""group""
all$GroupSize[all$Group >= 5] <- ""large group""
all$GroupSize <- as.factor(all$GroupSize)
ggplot(all[!is.na(all$Survived), ], aes(x = GroupSize, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"") + labs(x = ""Final Group Sizes"")
all$count <- NULL
all$Name <- NULL
rm(CombiMaxF)
rm(FamMaid)
rm(FamMaidWrong)
rm(FamMale)
rm(labels1)
rm(labels2)
rm(NC)
rm(NC1)
rm(NCMale)
rm(rest)
rm(rest1)
rm(SizeCheck)
rm(TicketGroup)
rm(p1)
rm(p2)
rm(p3)
rm(p4)
rm(p5)
rm(p6)
kable(all[which(is.na(all$Embarked)), c(""Surname"", ""Title"", ""Survived"", ""Pclass"", ""Age"", ""SibSp"", ""Parch"", ""Ticket"", ""Fare"", ""Cabin"", ""Embarked"", ""Group"")])
all$FarePP <- all$Fare/all$Tsize
tab2 <- all[(!is.na(all$Embarked) & !is.na(all$Fare)), ] %>% group_by(Embarked, Pclass) %>% summarise(FarePP = median(FarePP))
kable(tab2)
all$Embarked[all$Ticket == ""113572""] <- ""C""
all$Embarked <- as.factor(all$Embarked)
all$FarePP[1044] <- 7.8
tab3 <- all[(!is.na(all$FarePP)), ] %>% group_by(Pclass) %>% summarise(MedianFarePP = median(FarePP))
all <- left_join(all, tab3, by = ""Pclass"")
all$FarePP[which(all$FarePP == 0)] <- all$MedianFarePP[which(all$FarePP == 0)]
hist(all$FarePP, main = ""Histogram of Fare Per Person"", col = ""blue"", xlab = ""Fare Per Person"")
all$FareBins <- cut2(all$FarePP, g = 5)
table(all$FareBins)
ggplot(all[(!is.na(all$Survived) & !is.na(all$Age)), ], aes(x = Age, fill = Survived)) + geom_density(alpha = 0.5, aes(fill = factor(Survived))) + labs(title = ""Survival density and Age"") + scale_x_continuous(breaks = scales::pretty_breaks(n = 10))
ggplot(all[!is.na(all$Age), ], aes(x = Title, y = Age, fill = Pclass)) + geom_boxplot() + scale_y_continuous(breaks = scales::pretty_breaks(n = 10))
set.seed(12000)
AgeLM <- lm(Age ~ Pclass + Sex + SibSp + Parch + Embarked + Title + GroupSize, data = all[!is.na(all$Age), ])
summary(AgeLM)
all$AgeLM <- predict(AgeLM, all)
par(mfrow = c(1, 2))
hist(all$Age[!is.na(all$Age)], main = ""Original data, non-missing"", xlab = ""Age"", col = ""green"")
hist(all$AgeLM[is.na(all$Age)], main = ""LM NA predictions"", xlab = ""Age"", col = ""orange"", xlim = range(0:80))
all[(is.na(all$Age) & all$AgeLM < 18), c(""Sex"", ""SibSp"", ""Parch"", ""Title"", ""Pclass"", ""Survived"", ""AgeLM"")]
indexMissingAge <- which(is.na(all$Age))
indexAgeSurvivedNotNA <- which(!is.na(all$Age) & (!is.na(all$Survived)))
all$Age[indexMissingAge] <- all$AgeLM[indexMissingAge]
all$Cabin[is.na(all$Cabin)] <- ""U""
all$Cabin <- substring(all$Cabin, 1, 1)
all$Cabin <- as.factor(all$Cabin)
ggplot(all[(!is.na(all$Survived) & all$Cabin != ""U""), ], aes(x = Cabin, fill = Survived)) + geom_bar(stat = ""count"") + facet_grid(. ~ Pclass) + labs(title = ""Survivor split by class and Cabin"")
c1 <- round(prop.table(table(all$Survived[(!is.na(all$Survived) & all$Cabin != ""U"")], all$Cabin[(!is.na(all$Survived) & all$Cabin != ""U"")]), 2) * 100)
kable(c1)
ggplot(all[all$Age < 14.5 & !is.na(all$Survived), ], aes(x = Pclass, fill = Survived)) + geom_bar(stat = ""count"")
all$IsChildP12 <- ""No""
all$IsChildP12[all$Age <= 14.5 & all$Pclass %in% c(""1"", ""2"")] <- ""Yes""
all$IsChildP12 <- as.factor(all$IsChildP12)
d1 <- ggplot(all[!is.na(all$Survived), ], aes(x = Embarked, fill = Survived)) + geom_bar(stat = ""count"") + labs(x = ""Embarked"", y = ""Count"")
d2 <- ggplot(all[!is.na(all$Survived), ], aes(x = Embarked, fill = Survived)) + geom_bar(stat = ""count"", position = ""fill"") + labs(x = ""Embarked"", y = ""Percent"")
plot_grid(d1, d2)
ggplot(all[indexAgeSurvivedNotNA, ], aes(x = Age, fill = Survived)) + geom_histogram(aes(fill = factor(Survived))) + labs(title = ""Survival density, known-ages, and Embarked"") + scale_x_continuous(breaks = scales::pretty_breaks(n = 5)) + facet_grid(. ~ Embarked)
tab1 <- rbind(table(all$Embarked[!is.na(all$Survived)]), table(all$Embarked[indexAgeSurvivedNotNA]))
tab1 <- cbind(tab1, (rowSums(tab1)))
tab1 <- rbind(tab1, tab1[1, ] - tab1[2, ])
tab1 <- rbind(tab1, round((tab1[3, ]/tab1[1, ]) * 100))
rownames(tab1) <- c(""All"", ""With Age"", ""Missing Age"", ""Percent Missing"")
colnames(tab1) <- c(""C"", ""Q"", ""S"", ""Total"")
kable(tab1)
TicketSurvivors <- all %>% group_by(Ticket) %>% summarize(Tsize = length(Survived), NumNA = sum(is.na(Survived)), SumSurvived = sum(as.numeric(Survived) - 1, na.rm = T))
all <- left_join(all, TicketSurvivors)
all$AnySurvivors[all$Tsize == 1] <- ""other""
all$AnySurvivors[all$Tsize >= 2] <- ifelse(all$SumSurvived[all$Tsize >= 2] >= 1, ""survivors in group"", ""other"")
all$AnySurvivors <- as.factor(all$AnySurvivors)
table(all$AnySurvivors)
all$PassengerId <- NULL
all$SibSp <- NULL
all$Parch <- NULL
all$Ticket <- NULL
all$Fare <- NULL
all$Cabin <- NULL
all$Surname <- NULL
all$Fsize <- NULL
all$FsizeName <- NULL
all$Favg <- NULL
all$Tsize <- NULL
all$Group <- NULL
all$Ticket2 <- NULL
all$AgeLM <- NULL
all$Child <- NULL
all$HasParch <- NULL
all$MedianFarePP <- NULL
rm(tab1)
rm(tab2)
rm(tab3)
rm(AgeLM)
rm(c1)
rm(d1)
rm(d2)
trainClean <- all[!is.na(all$Survived), ]
testClean <- all[is.na(all$Survived), ]
set.seed(2017)
caret_matrix <- train(x = trainClean[, c(""PclassSex"", ""GroupSize"", ""FarePP"", ""AnySurvivors"", ""IsChildP12"")], y = trainClean$Survived, data = trainClean, method = ""rf"", trControl = trainControl(method = ""cv"", number = 7))
caret_matrix
caret_matrix$resample
caret_matrix$results
varImpPlot(caret_matrix$finalModel, main = "" Variable importance"")
solution_rf <- predict(caret_matrix, testClean)
submission_rf <- data.frame(PassengerId = test$PassengerId, Survived = solution_rf)
write.csv(submission_rf, file = ""Titanic_rf.csv"", row.names = F)",1,0,1,0,0,0,0,1,0,0,0,1,0,0
316,vishnusaiv-titanic-data-analysis,0.7609999999999999,"['filter', 'as.factor', 'c', 'factor', 'ifelse', 'is.na', 'levels', 'library', 'max', 'min', 'round', 'sum', 'summary', 'glimpse', 'mutate', 'select', 'aes', 'geom_bar', 'geom_density', 'ggplot', 'ggtitle', 'scale_fill_discrete', 'scale_x_discrete', 'xlab', 'ylab', 'theme_few', 'lm', 'predict', 'read.csv', 'write.csv']","['ggplot2', 'dplyr', 'ggthemes', 'base']",1.39934420585632,"['min', 'glimpse', 'is.na', 'levels', 'theme_few', 'scale_fill_discrete', 'lm', 'as.factor', 'summary', 'filter', 'round', 'xlab', 'factor', 'max', 'geom_bar', 'read.csv', 'scale_x_discrete', 'c', 'aes', 'ylab', 'mutate', 'ifelse', 'sum', 'predict', 'write.csv', 'ggtitle', 'ggplot', 'geom_density', 'library', 'select']",[],"['vishnusaiv-titanic-data-analysis', 'xuhuiz0918-initial-eda-and-lm-on-titanic-dataset', 'divyasshree-titanic-ml-club', 'windowbyryeol-kernel-titanic', 'dleprovost-simple-titanic-exploration', 'thilakshasilva-predicting-titanic-survival-using-five-algorithms', 'piyushjhamb-predicting-titanic-survival', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'vasuls-predictive-analysis-of-survival-rate-on-titanic']","[0.9999999999999998, 0.9910474996417968, 0.8805599997344629, 0.5255189500547878, 0.5069634741512232, 0.09637771253670863, 0.09637771253670863, 0.08751146420318823, 0.08751146420318823, 0.08711341412163297]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'factor', 'ifelse', 'is.na', 'levels', 'library', 'max', 'min', 'round', 'sum', 'summary'], 'package:dplyr': ['glimpse', 'mutate', 'select'], 'package:ggplot2': ['aes', 'geom_bar', 'geom_density', 'ggplot', 'ggtitle', 'scale_fill_discrete', 'scale_x_discrete', 'xlab', 'ylab'], 'package:ggthemes': ['theme_few'], 'package:stats': ['lm', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""factor"", ""ifelse"", ""is.na"", ""levels"", ""library"", ""max"", ""min"", ""round"", ""sum"", ""summary""], ""package:dplyr"": [""glimpse"", ""mutate"", ""select""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""geom_density"", ""ggplot"", ""ggtitle"", ""scale_fill_discrete"", ""scale_x_discrete"", ""xlab"", ""ylab""], ""package:ggthemes"": [""theme_few""], ""package:stats"": [""lm"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c factor ifelse isna levels library max min round sum summary packagedplyr glimpse mutate select packageggplot2 aes geombar geomdensity ggplot ggtitle scalefilldiscrete scalexdiscrete xlab ylab packageggthemes themefew packagestats lm predict packageutils readcsv writecsv,"library(ggplot2)
library(dplyr)
library(ggthemes)
Titanic_train <- read.csv(""../input/train.csv"")
Titanic_test <- read.csv(""../input/test.csv"")
glimpse(Titanic_train)
Titanic_train$Pclass <- as.factor(Titanic_train$Pclass)
levels(Titanic_train$Pclass) <- c(""Upper"", ""Middle"", ""Lower"")
glimpse(Titanic_train)
Titanic_train$Sex <- as.factor(Titanic_train$Sex)
levels(Titanic_train$Sex) <- c(""Female"", ""Male"")
glimpse(Titanic_train)
sum(Titanic_train$Survived == 1)
sum(Titanic_train$Survived == 0)
Sex_Distribution <- ggplot(data = Titanic_train, aes(x = Sex)) + geom_bar(fill = ""green"", width = 0.7) + ylab(""num_of_passenger"") + ggtitle(""Sex and passenger numbers relationship"")
Sex_Distribution
sum(Titanic_train$Survived == 1 & Titanic_train$Sex == ""Female"")
sum(Titanic_train$Survived == 1 & Titanic_train$Sex == ""Male"")
sum(Titanic_train$Survived == 0 & Titanic_train$Sex == ""Female"")
sum(Titanic_train$Survived == 0 & Titanic_train$Sex == ""Male"")
Titanic_train1 <- Titanic_train %>% select(Survived, Pclass, Sex, Age) %>% filter(Age >= 0)
Age_Distribution <- ggplot() + geom_density(data = Titanic_train1, aes(x = Age), fill = ""yellow"", alpha = 0.7)
Age_Distribution
max(Titanic_train$Age, na.rm = TRUE)
min(Titanic_train$Age, na.rm = TRUE)
sum(Titanic_train1$Age < 10 & Titanic_train1$Survived == 1)/sum(Titanic_train1$Age < 10)
sum(Titanic_train1$Age >= 10 & Titanic_train1$Age < 30 & Titanic_train1$Survived == 1)/sum(Titanic_train1$Age >= 10 & Titanic_train1$Age < 30)
sum(Titanic_train1$Age >= 30 & Titanic_train1$Age < 50 & Titanic_train1$Survived == 1)/sum(Titanic_train1$Age >= 30 & Titanic_train1$Age < 50)
sum(Titanic_train1$Age >= 50 & Titanic_train1$Survived == 1)/sum(Titanic_train1$Age >= 50)
Pclass_Distribution <- ggplot(data = Titanic_train, aes(x = Pclass)) + geom_bar(fill = ""blue"", width = 0.7) + ylab(""num_of_passenger"") + ggtitle(""Relationship between Pclass and passenger numbers"")
Pclass_Distribution
sum(Titanic_train$Pclass == ""Upper"" & Titanic_train$Survived == 1)/sum(Titanic_train$Pclass == ""Upper"")
sum(Titanic_train$Pclass == ""Middle"" & Titanic_train$Survived == 1)/sum(Titanic_train$Pclass == ""Middle"")
sum(Titanic_train$Pclass == ""Lower"" & Titanic_train$Survived == 1)/sum(Titanic_train$Pclass == ""Lower"")
Titanic_train$FamilySize <- ifelse(Titanic_train$SibSp + Titanic_train$Parch + 1 == 1, ""Single"", ifelse(Titanic_train$SibSp + Titanic_train$Parch + 1 < 4, ""Small"", ""Large""))
FamilySize_Distribution <- ggplot(Titanic_train, aes(FamilySize)) + geom_bar(position = ""dodge"", fill = ""orange"") + scale_x_discrete(limits = c(""Single"", ""Small"", ""Large"")) + ylab(""num_of_passenger"") + ggtitle(""Family size and passenger numbers"")
FamilySize_Distribution
Familysize_Survived <- ggplot(Titanic_train, aes(FamilySize, fill = factor(Survived))) + geom_bar() + theme_few() + xlab(""Familysize"") + ylab(""num_of_passengers"") + scale_fill_discrete(name = ""Survived"") + theme_few() + ggtitle(""Relationship between Familysize and Survived"")
Familysize_Survived
sum(Titanic_train$FamilySize == ""Single"" & Titanic_train$Survived == 1)/sum(Titanic_train$FamilySize == ""Single"")
sum(Titanic_train$FamilySize == ""Small"" & Titanic_train$Survived == 1)/sum(Titanic_train$FamilySize == ""Small"")
sum(Titanic_train$FamilySize == ""Large"" & Titanic_train$Survived == 1)/sum(Titanic_train$FamilySize == ""Large"")
Titanic_train_model <- Titanic_train %>% filter(Age >= 0) %>% select(Sex, Age, Pclass, FamilySize, Survived)
Titanic_model <- lm(Survived ~ Sex + Age + Pclass + FamilySize, data = Titanic_train_model)
summary(Titanic_model)
Titanic_test$FamilySize <- ifelse(Titanic_test$SibSp + Titanic_test$Parch + 1 == 1, ""Single"", ifelse(Titanic_test$SibSp + Titanic_test$Parch + 1 < 4, ""Small"", ""Large""))
Titanic_test$Pclass <- as.factor(Titanic_test$Pclass)
levels(Titanic_test$Pclass) <- c(""Upper"", ""Middle"", ""Lower"")
Titanic_test$Sex <- as.factor(Titanic_test$Sex)
levels(Titanic_test$Sex) <- c(""Female"", ""Male"")
submission <- Titanic_test %>% mutate(Survived = round(predict(Titanic_model, Titanic_test))) %>% select(PassengerId, Survived)
submission[is.na(submission)] <- 0
submission
write.csv(submission, file = ""Titanic.csv"", row.names = F)",0,0,0,0,0,0,0,0,0,0,0,0,0,0
320,qianbi-titanic-rpart,0.7609999999999999,"['c', 'gsub', 'ifelse', 'lapply', 'library', 'bind_rows', 'rpart', 'predict', 'read.csv', 'write.csv']","['dplyr', 'rpart', 'base']",0.55147910118103,"['gsub', 'ifelse', 'predict', 'write.csv', 'bind_rows', 'lapply', 'read.csv', 'rpart', 'library', 'c']",[],"['qianbi-titanic-rpart-2', 'qianbi-titanic-logistic-2', 'qianbi-titanic-svm', 'qianbi-titanic-nnet', 'qianbi-titanic-randomforest', 'venkatko-titanic-survival1', 'jasonhit-first-script-for-kaggle-titanic', 'abedben-exploring-survival-on-the-titanic', 'hemingwei-titanic-r-solution-from-megan-risdal', 'tetyama-trial-titanic']","[0.9365054302156886, 0.9031936833355108, 0.8947666378075023, 0.8775525812821684, 0.8772711933600361, 0.8186241193215685, 0.8161898031376525, 0.8053100030792082, 0.8006581152772538, 0.8005181410175111]","{'package:base': ['c', 'gsub', 'ifelse', 'lapply', 'library'], 'package:dplyr': ['bind_rows'], 'package:rpart': ['rpart'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""c"", ""gsub"", ""ifelse"", ""lapply"", ""library""], ""package:dplyr"": [""bind_rows""], ""package:rpart"": [""rpart""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase c gsub ifelse lapply library packagedplyr bindrows packagerpart rpart packagestats predict packageutils readcsv writecsv,"library(dplyr)
library(rpart)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE, na.strings = """")
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE, na.strings = """")
full <- bind_rows(train, test)
full$Title <- gsub(""^.*, |\\. .*$"", """", full$Name)
Mr <- c(""Col"", ""Don"", ""Jonkheer"", ""Sir"")
Mrs <- c(""Dona"", ""Lady"", ""Mme"", ""the Countess"")
Miss <- c(""Mlle"", ""Ms"")
full$Title[full$Title %in% Mr] <- ""Mr""
full$Title[full$Title %in% Mrs] <- ""Mrs""
full$Title[full$Title %in% Miss] <- ""Miss""
full$Fsize <- full$SibSp + full$Parch + 1
full$FsizeD[full$Fsize == 1] <- ""Singleton""
full$FsizeD[full$Fsize > 1 & full$Fsize < 5] <- ""Small""
full$FsizeD[full$Fsize > 4] <- ""Large""
full$Child <- ifelse(full$Age <= 12, 1, 0)
factor_var <- c(""Survived"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""FsizeD"", ""Child"")
full[factor_var] <- lapply(full[factor_var], factor)
train <- full[1:891, ]
test <- full[892:1309, ]
fit1 <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + Fsize + FsizeD + Child, data = train, method = ""class"")
res <- predict(fit1, newdata = test)
test$Survived <- ifelse(res[, 1] < res[, 2], 1, 0)
write.csv(test[, c(1, 2)], file = ""Titanic_rpart.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,1,0,0,0,0
321,rhyando-r-embulan-titanic-notebook,0.722,"['user defined', 'user defined', 'user defined', 'apply', 'as.character', 'as.data.frame', 'as.factor', 'as.numeric', 'c', 'cbind', 'data.frame', 'gsub', 'ifelse', 'is.na', 'lapply', 'length', 'max', 'merge', 'names', 'nrow', 'order', 'rbind', 'round', 'sapply', 'strsplit', 'substr', 'sum', 'table', 'unlist', 'barplot', 'par', 'aggregate', 'median', 'predict', 'quantile', 'str_locate', 'head', 'install.packages', 'installed.packages', 'read.csv', 'write.csv']",['base'],2.7776432037353502,"['nrow', 'unlist', 'median', 'install.packages', 'lapply', 'merge', 'as.character', 'is.na', 'names', 'as.factor', 'round', 'sapply', 'gsub', 'aggregate', 'max', 'str_locate', 'apply', 'length', 'read.csv', 'table', 'par', 'as.data.frame', 'c', 'rbind', 'as.numeric', 'ifelse', 'sum', 'predict', 'write.csv', 'order', 'quantile', 'data.frame', 'strsplit', 'installed.packages', 'head', 'substr', 'user defined', 'barplot', 'cbind']",[],"['rhyando-r-embulan-titanic', 'mcliff-exploring-survival-on-the-titanic', 'dascanvas-titanic-random-forest', 'karlkonz-exploring-the-titanic-dataset-with-r', 'erskumars-titanic-survival-eda-and-survival-rate-prediction', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic', 'somtom-titanic-random-icebergs', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic']","[0.997040854331038, 0.8212631346519738, 0.09663305546870714, 0.08118349374878861, 0.06820725330266342, 0.06421240582464348, 0.06421240582464348, 0.06074468236040141, 0.05994494738793329, 0.05994494738793329]","{'character(0)': ['aes', 'element_text', 'geom_bar', 'geom_boxplot', 'ggplot', 'prp', 'rpart', 'rpart.control', 'scale_x_discrete', 'theme'], 'package:base': ['apply', 'as.character', 'as.data.frame', 'as.factor', 'as.numeric', 'c', 'cbind', 'data.frame', 'gsub', 'ifelse', 'is.na', 'lapply', 'length', 'max', 'merge', 'names', 'nrow', 'order', 'rbind', 'round', 'sapply', 'strsplit', 'substr', 'sum', 'table', 'unlist'], 'package:graphics': ['barplot', 'par'], 'package:stats': ['aggregate', 'median', 'predict', 'quantile'], 'package:stringr': ['str_locate'], 'package:utils': ['head', 'install.packages', 'installed.packages', 'read.csv', 'write.csv']}","{""character(0)"": [""aes"", ""element_text"", ""geom_bar"", ""geom_boxplot"", ""ggplot"", ""prp"", ""rpart"", ""rpart.control"", ""scale_x_discrete"", ""theme""], ""package:base"": [""apply"", ""as.character"", ""as.data.frame"", ""as.factor"", ""as.numeric"", ""c"", ""cbind"", ""data.frame"", ""gsub"", ""ifelse"", ""is.na"", ""lapply"", ""length"", ""max"", ""merge"", ""names"", ""nrow"", ""order"", ""rbind"", ""round"", ""sapply"", ""strsplit"", ""substr"", ""sum"", ""table"", ""unlist""], ""package:graphics"": [""barplot"", ""par""], ""package:stats"": [""aggregate"", ""median"", ""predict"", ""quantile""], ""package:stringr"": [""str_locate""], ""package:utils"": [""head"", ""install.packages"", ""installed.packages"", ""read.csv"", ""write.csv""]}",character0 aes elementtext geombar geomboxplot ggplot prp rpart rpartcontrol scalexdiscrete theme packagebase apply ascharacter asdataframe asfactor asnumeric c cbind dataframe gsub ifelse isna lapply length max merge names nrow order rbind round sapply strsplit substr sum table unlist packagegraphics barplot par packagestats aggregate median predict quantile packagestringr strlocate packageutils head installpackages installedpackages readcsv writecsv,"list.of.packages <- c(""stringr"", ""data.table"", ""taRifx"", ""methods"", ""rgdal"", ""sp"", ""maptools"", ""zoo"", ""reshape2"", ""plyr"", ""rgeos"", ""reshape"", ""tidyr"", ""ggplot2"", ""rpart"", ""rpart.plot"")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, ""Package""])]
if (length(new.packages)) install.packages(new.packages, repos = ""http://cran.r-project.org"")
lapply(list.of.packages, library, character.only = T)
test <- read.csv(""../input/test.csv"", sep = "","", header = TRUE)
train <- read.csv(""../input/train.csv"", sep = "","", header = TRUE)
head(train)
test$Survived <- NA
combine <- rbind(test, train)
combine.r <- combine
combine <- as.data.frame(apply(combine, 2, function(x) gsub(""^$|^ $"", NA, x)))
sapply(combine, function(x) sum(is.na(x)))
par(mar = c(7, 4, 4, 2) + 0.1)
barplot(sapply(combine, function(x) sum(is.na(x))), las = 3, mar = c(5, 4, 4, 2), main = ""NA Value Count"")
combine$Pclass <- as.character(combine$Pclass)
combine$Fare <- as.numeric(as.character(combine$Fare))
freq <- combine[, c(""Pclass"", ""Fare"")]
ggplot(freq, aes(as.factor(Pclass), Fare)) + geom_boxplot()
combine$fare.fill <- combine$Fare
combine[is.na(combine$fare.fill), ]$fare.fill <- median(combine[combine$Pclass == combine[is.na(combine$fare.fill), ]$Pclass, ]$fare.fill, na.rm = TRUE)
combine$tittle <- unlist(strsplit(as.character(combine$Name), "",""))[c(F, T)]
combine$tittle <- substr(combine$tittle, 2, str_locate(combine$tittle, ""[.]"")[, 1])
combine$tittle <- as.character(combine$tittle)
combine$Age <- as.numeric(as.character(combine$Age))
freq <- combine[, c(""tittle"", ""Age"")]
ggplot(freq, aes(as.factor(tittle), Age), las = 3) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
combine$Age <- as.numeric(as.character(combine$Age))
sumif <- aggregate(Age ~ tittle, data = combine, median)
names(sumif)[names(sumif) == ""Age""] <- ""mean.tittle""
combine$rownum <- c(1:nrow(combine))
combine <- merge(combine, sumif, by = ""tittle"", all.x = T, sort = FALSE)
combine <- combine[order(combine$rownum), ]
combine$age.fill <- ifelse(is.na(combine$Age), round(combine$mean.tittle, 0), combine$Age)
combine$Embarked <- as.character(combine$Embarked)
combine$embarked.fill <- combine$Embarked
temp <- data.frame(table(combine$embarked.fill))
combine[is.na(combine$embarked.fill), ]$embarked.fill <- as.character(temp[temp$Freq == max(temp$Freq), ]$Var1)
combine$SibS <- as.numeric(as.character(combine$SibS))
combine$Parch <- as.numeric(as.character(combine$Parch))
combine$total.relative <- combine$SibS + combine$Parch
freq <- as.data.frame(table(combine[, c(""tittle"", ""Survived"")]))
ggplot(freq, aes(tittle, Freq)) + geom_bar(aes(fill = Survived), stat = ""identity"", position = ""dodge"") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
freq <- as.data.frame(table(combine[, c(""Sex"", ""Survived"")]))
ggplot(freq, aes(Sex, Freq)) + geom_bar(aes(fill = Survived), stat = ""identity"", position = ""dodge"")
combine$age.range <- ifelse(combine$age.fill < 5, ""TODDLER"", ifelse(combine$age.fill < 10, ""HIGHSCHOOL"", ifelse(combine$age.fill < 21, ""TEEN"", ifelse(combine$age.fill < 35, ""ADULT"", ifelse(combine$age.fill < 55, ""OLDADULT"", ifelse(combine$age.fill < 200, ""ELDERLY"", ))))))
freq <- as.data.frame(table(combine[, c(""age.range"", ""Survived"")]))
ggplot(freq, aes(age.range, Freq)) + geom_bar(aes(fill = Survived), stat = ""identity"", , position = ""dodge"") + scale_x_discrete(limits = c(""TODDLER"", ""HIGHSCHOOL"", ""TEEN"", ""ADULT"", ""OLDADULT"", ""ELDERLY""))
freq <- as.data.frame(table(combine[, c(""Pclass"", ""Survived"")]))
ggplot(freq, aes(Pclass, Freq)) + geom_bar(aes(fill = Survived), stat = ""identity"", position = ""dodge"")
combine$fare.range <- ifelse(combine$fare.fill == 0, ""FREE"", ifelse(combine$fare.fill <= as.numeric(quantile(combine[combine$fare.fill > 0, ]$fare.fill)[2]), ""CHEAP"", ifelse(combine$fare.fill <= as.numeric(quantile(combine[combine$fare.fill > 0, ]$fare.fill)[3]), ""CHEAP-MODERATE"", ifelse(combine$fare.fill <= as.numeric(quantile(combine[combine$fare.fill > 0, ]$fare.fill)[4]), ""MODERATE-EXPENSIVE"", ifelse(combine$fare.fill <= as.numeric(quantile(combine[combine$fare.fill > 0, ]$fare.fill)[5]), ""EXPENSIVE"", 
    """")))))
freq <- as.data.frame(table(combine[, c(""fare.range"", ""Survived"")]))
ggplot(freq, aes(fare.range, Freq)) + geom_bar(aes(fill = Survived), stat = ""identity"", position = ""dodge"")
combine$total.relative.range <- ifelse(combine$total.relative == 0, ""NO_RELATIVE"", ifelse(combine$total.relative <= as.numeric(quantile(combine[combine$total.relative > 0, ]$total.relative)[2]), ""SMALL_FAMILY"", ifelse(combine$total.relative <= as.numeric(quantile(combine[combine$total.relative > 0, ]$total.relative)[3]), ""SMALL-MODERATE_FAMILY"", ifelse(combine$total.relative <= as.numeric(quantile(combine[combine$total.relative > 0, ]$total.relative)[4]), ""MODERATE-BIG_FAMILY"", ifelse(combine$total.relative <= 
    as.numeric(quantile(combine[combine$total.relative > 0, ]$total.relative)[5]), ""BIG_FAMILY"")))))
freq <- as.data.frame(table(combine[, c(""total.relative.range"", ""Survived"")]))
ggplot(freq, aes(total.relative.range, Freq)) + geom_bar(aes(fill = Survived), stat = ""identity"", position = ""dodge"") + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + scale_x_discrete(limits = c(""NO_RELATIVE"", ""SMALL_FAMILY"", ""SMALL-MODERATE_FAMILY"", ""MODERATE-BIG_FAMILY"", ""BIG_FAMILY""))
freq <- as.data.frame(table(combine[, c(""embarked.fill"", ""Survived"")]))
ggplot(freq, aes(embarked.fill, Freq)) + geom_bar(aes(fill = Survived), stat = ""identity"", position = ""dodge"")
test.edit <- combine[c(1:nrow(test)), ]
train.edit <- combine[c(nrow(test) + 1:nrow(train)), ]
test.edit[test.edit$tittle == ""Dona."", ]$tittle <- ""Lady.""
my_tree <- rpart(Survived ~ Sex + tittle + age.fill + Pclass + fare.fill + total.relative + embarked.fill, data = combine, method = ""class"", control = rpart.control(cp = 1e-04))
prp(my_tree, type = 4, extra = 100)
my_prediction <- predict(my_tree, test.edit, type = ""class"")
test.edit <- cbind(test.edit, my_prediction)
test.result <- as.data.frame(cbind(test.edit$PassengerId, as.character(test.edit$my_prediction)))
names(test.result) <- c(""PassengerId"", ""Survived"")
write.csv(test.result, file = ""R-EMBULAN_Titanic.csv"", sep = "","", row.names = FALSE)
head(test.result)",0,0,0,0,1,0,0,0,0,0,0,0,0,0
323,dascanvas-titanic-random-forest,0.7659999999999999,"['missmap', 'c', 'data.frame', 'factor', 'is.na', 'library', 'mean', 'require', 'sapply', 'set.seed', 'subset', 'sum', 'table', 'sample.split', 'hist', 'complete', 'mice', 'rbind.fill', 'importance', 'randomForest', 'na.omit', 'predict', 'str_locate', 'str_sub', 'read.csv', 'str', 'write.csv']","['plyr', 'stringr', 'Amelia', 'Amelia', 'mice', 'caTools', 'randomForest', 'base']",2.2594609260559104,"['complete', 'mean', 'subset', 'is.na', 'require', 'na.omit', 'sapply', 'mice', 'importance', 'hist', 'str', 'set.seed', 'missmap', 'factor', 'rbind.fill', 'str_locate', 'read.csv', 'table', 'randomForest', 'c', 'sum', 'predict', 'write.csv', 'data.frame', 'str_sub', 'library', 'sample.split']",[],"['karlkonz-exploring-the-titanic-dataset-with-r', 'vyordanov-titanic-disaster-logistic-regression-0-7655', 'windowbyryeol-kernel-titanic', 'somtom-titanic-random-icebergs', 'imitation-exploring-survival-on-the-titanic', 'rhyando-r-embulan-titanic-notebook', 'rhyando-r-embulan-titanic', 'paulocressoni-titanic-using-stepwise-linear-regression', 'pliptor-optimal-titanic-for-gender-only-0-7655', 'chuanhuiliu-one-solution-to-titanic-survival-analysis']","[0.42571258018641656, 0.2647143115841338, 0.21156741852214958, 0.1618879511927856, 0.09722721009792469, 0.09663305546870714, 0.08851220141476734, 0.0786440430950317, 0.07814117296852863, 0.07606244813415557]","{'package:Amelia': ['missmap'], 'package:base': ['c', 'data.frame', 'factor', 'is.na', 'library', 'mean', 'require', 'sapply', 'set.seed', 'subset', 'sum', 'table'], 'package:caTools': ['sample.split'], 'package:graphics': ['hist'], 'package:mice': ['complete', 'mice'], 'package:plyr': ['rbind.fill'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['na.omit', 'predict'], 'package:stringr': ['str_locate', 'str_sub'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:Amelia"": [""missmap""], ""package:base"": [""c"", ""data.frame"", ""factor"", ""is.na"", ""library"", ""mean"", ""require"", ""sapply"", ""set.seed"", ""subset"", ""sum"", ""table""], ""package:caTools"": [""sample.split""], ""package:graphics"": [""hist""], ""package:mice"": [""complete"", ""mice""], ""package:plyr"": [""rbind.fill""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""na.omit"", ""predict""], ""package:stringr"": [""str_locate"", ""str_sub""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packageAmelia missmap packagebase c dataframe factor isna library mean require sapply setseed subset sum table packagecaTools samplesplit packagegraphics hist packagemice complete mice packageplyr rbindfill packagerandomForest importance randomForest packagestats naomit predict packagestringr strlocate strsub packageutils readcsv str writecsv,"train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE, na.strings = c(""NA"", """"))
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE, na.strings = c(""NA"", """"))
str(train)
str(test)
library(plyr)
total <- rbind.fill(train, test)
str(total)
total$Survived <- factor(total$Survived)
total$Pclass <- factor(total$Pclass)
total$Sex <- factor(total$Sex)
total$FamilySize <- 1 + total$SibSp + total$Parch
table(total$FamilySize)
table(total$FamilySize, total$Survived)
total$FamilySize1 <- ""N""
total$FamilySize1[total$FamilySize <= 1] <- ""alone""
total$FamilySize1[total$FamilySize >= 2 & total$FamilySize <= 3] <- ""small_family""
total$FamilySize1[total$FamilySize >= 4 & total$FamilySize <= 7] <- ""medium_family""
total$FamilySize1[total$FamilySize >= 8] <- ""large_family""
table(total$FamilySize1)
table(total$FamilySize1, total$Sex, total$Survived)
table(total$FamilySize1, total$Survived)
total$FamilySize1 <- factor(total$FamilySize1)
library(stringr)
total$title <- str_sub(total$Name, str_locate(total$Name, "","")[, 1] + 2, str_locate(total$Name, ""\\."")[, 1] - 1)
table(total$title)
table(total$title, total$Survived)
Rare_Title <- c(""Mme"", ""Mlle"", ""Don"", ""Lady"", ""Dona"", ""Jonkheer"", ""the Countess"", ""Sir"")
Profession <- c(""Capt"", ""Col"", ""Dr"", ""Major"", ""Rev"")
Female_title <- c(""Miss"", ""Ms"")
Married_Female_title <- c(""Mrs"")
Master_title <- c(""Master"")
Male_title <- c(""Mr"")
total$title[total$title %in% Rare_Title] <- ""Rare_Title""
total$title[total$title %in% Profession] <- ""Profession""
total$title[total$title %in% Female_title] <- ""Female_title""
total$title[total$title %in% Married_Female_title] <- ""Married_Female_title""
total$title[total$title %in% Master_title] <- ""Master_title""
total$title[total$title %in% Male_title] <- ""Male_title""
str(total)
total$title <- factor(total$title)
sapply(total, function(x) sum(is.na(x)))
library(Amelia)
require(Amelia)
missmap(total, main = ""Missing Map"")
library(mice)
init = mice(total, maxit = 0)
meth = init$method
predM = init$predictorMatrix
predM[, c(""PassengerId"", ""Survived"", ""Name"", ""Ticket"", ""Cabin"", ""title"")] = 0
meth[c(""Survived"", ""Cabin"")] = """"
meth[c(""Pclass"")] = ""pmm""
meth[c(""Sex"")] = ""logreg""
meth[c(""SibSp"")] = ""norm""
meth[c(""Parch"")] = ""norm""
meth[c(""Fare"")] = ""norm""
meth[c(""Embarked"")] = ""pmm""
set.seed(103)
imputed <- mice(total, method = meth, predictorMatrix = predM, m = 5)
imputed <- complete(imputed)
sapply(imputed, function(x) sum(is.na(x)))
table(imputed$Embarked)
imputed$Embarked[is.na(imputed$Embarked)] <- ""S""
Clean_data <- na.omit(total$Age)
actual <- Clean_data
predicted <- imputed$Age
mean(actual)
mean(predicted)
hist(Clean_data, main = ""Clean data for Age"", xlab = ""Age"", col = ""green"")
hist(imputed$Age, main = ""Predicted Age"", xlab = ""Age"", col = ""blue"")
table(imputed$Age, imputed$Survived)
imputed$child_adult <- ""N""
str(imputed)
imputed$child_adult[imputed$Age <= 12] <- ""child""
imputed$child_adult[imputed$Age >= 13 & imputed$Age <= 19] <- ""teenager""
imputed$child_adult[imputed$Age >= 20] <- ""adult""
table(imputed$Age)
table(imputed$child_adult, imputed$Survived)
imputed$Embarked <- factor(imputed$Embarked)
imputed$child_adult <- factor(imputed$child_adult)
train1 <- imputed[1:891, ]
test1 <- imputed[892:1309, ]
library(caTools)
set.seed(3000)
spl = sample.split(train1$Survived, SplitRatio = 0.7)
Tra = subset(train1, spl == TRUE)
Tst = subset(train1, spl == FALSE)
str(Tra)
str(Tst)
library(randomForest)
TitanicForest = randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + child_adult + Embarked + FamilySize + FamilySize1 + Fare + title, data = Tra, ntree = 500, nodesize = 25)
PredictForest = predict(TitanicForest, newdata = Tst)
table(Tst$Survived, PredictForest)
(149 + 68)/(149 + 16 + 35 + 68)
importance(TitanicForest)
prediction1 <- predict(TitanicForest, test1)
solution <- data.frame(PassengerID = test1$PassengerId, Survived = prediction1)
write.csv(solution, file = ""RandomForest_mod.csv"", row.names = FALSE)",1,0,0,1,0,0,0,0,0,0,0,0,0,1
325,lagprophet-titanic,0.758,"['data.frame', 'library', 'rpart', 'predict', 'read.csv', 'write.csv']","['rpart', 'base']",0.29099702835083,"['predict', 'write.csv', 'data.frame', 'read.csv', 'rpart', 'library']",[],"['mihaque313-first-submission-to-titanic-problem', 'tsfitz-titanic', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'lizpund-titanic-competition-kernel', 'sawajid-titanic-test', 'danr87946-titanic-practice', 'scout16-titanic-disaster-in-r', 'liudj2008-titanic', 'zhaotianjing-titanic']","[0.46747809384401384, 0.46084170986107176, 0.38240299962632435, 0.38240299962632435, 0.3667622006716048, 0.36327830152272395, 0.36118113068163005, 0.36050318349178845, 0.3579616299992028, 0.35740219791700856]","{'package:base': ['data.frame', 'library'], 'package:rpart': ['rpart'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""data.frame"", ""library""], ""package:rpart"": [""rpart""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase dataframe library packagerpart rpart packagestats predict packageutils readcsv writecsv,"library(rpart)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
fit <- rpart(Survived ~ Pclass + Sex + Age + Fare, data = train, method = ""class"")
prediction <- predict(fit, test, type = ""class"")
result <- data.frame(PassengerId = test$PassengerId, Survived = prediction)
write.csv(result, ""result.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,1,0,0,0,0
326,seshadrikolluri-predicting-survival-on-titanic,0.763,"['as.factor', 'as.numeric', 'c', 'cbind', 'colnames', 'is.na', 'library', 'mean', 'names', 'sort', 'subset', 'summary', 'table', 'train', 'trainControl', 'aes', 'facet_wrap', 'geom_bar', 'geom_density', 'geom_histogram', 'ggplot', 'melt', 'rpart', 'rpart.plot', 'predict', 'head', 'read.csv', 'write.csv']","['ggplot2', 'readr', 'reshape', 'rpart.plot', 'caret', 'base']",22.429700851440398,"['mean', 'facet_wrap', 'subset', 'is.na', 'sort', 'names', 'melt', 'rpart', 'as.factor', 'summary', 'geom_histogram', 'colnames', 'geom_bar', 'read.csv', 'table', 'train', 'c', 'aes', 'as.numeric', 'predict', 'write.csv', 'ggplot', 'geom_density', 'rpart.plot', 'head', 'library', 'trainControl', 'cbind']",[],"['bubblride-titanic-e1071-nu-svc', 'mustfkeskin-titanic-xgboost', 'bubblride-titanic-e1071-c-svc-fares-only', 'bubblride-titanic-e1071-c-svc-five-features', 'vyordanov-titanic-disaster-logistic-regression-0-7655', 'tsfitz-titanic', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic']","[0.3955722046233724, 0.3888080568245823, 0.38704298631029116, 0.27931393543275884, 0.15644734611854766, 0.11666149482812746, 0.10524018393522659, 0.10524018393522659, 0.10408677159339891, 0.10408677159339891]","{'package:base': ['as.factor', 'as.numeric', 'c', 'cbind', 'colnames', 'is.na', 'library', 'mean', 'names', 'sort', 'subset', 'summary', 'table'], 'package:caret': ['train', 'trainControl'], 'package:ggplot2': ['aes', 'facet_wrap', 'geom_bar', 'geom_density', 'geom_histogram', 'ggplot'], 'package:reshape': ['melt'], 'package:rpart': ['rpart'], 'package:rpart.plot': ['rpart.plot'], 'package:stats': ['predict'], 'package:utils': ['head', 'read.csv', 'write.csv']}","{""package:base"": [""as.factor"", ""as.numeric"", ""c"", ""cbind"", ""colnames"", ""is.na"", ""library"", ""mean"", ""names"", ""sort"", ""subset"", ""summary"", ""table""], ""package:caret"": [""train"", ""trainControl""], ""package:ggplot2"": [""aes"", ""facet_wrap"", ""geom_bar"", ""geom_density"", ""geom_histogram"", ""ggplot""], ""package:reshape"": [""melt""], ""package:rpart"": [""rpart""], ""package:rpart.plot"": [""rpart.plot""], ""package:stats"": [""predict""], ""package:utils"": [""head"", ""read.csv"", ""write.csv""]}",packagebase asfactor asnumeric c cbind colnames isna library mean names sort subset summary table packagecaret train trainControl packageggplot2 aes facetwrap geombar geomdensity geomhistogram ggplot packagereshape melt packagerpart rpart packagerpartplot rpartplot packagestats predict packageutils head readcsv writecsv,"library(ggplot2)
library(readr)
df_train <- read.csv(""../input/train.csv"", na.strings = """")
df_test <- read.csv(""../input/test.csv"", na.strings = """")
summary(df_train)
head(df_train)
ggplot(data = df_train, mapping = aes(Age)) + geom_histogram(aes(fill = as.factor(Survived), y = ..density..)) + geom_density()
df_train <- subset(df_train, select = -c(Cabin, Name, Ticket, PassengerId, Age))
summary(df_train)
df_train$Embarked[is.na(df_train$Embarked)] <- names(sort(table(df_train$Embarked), decreasing = TRUE)[1])
summary(df_train)
library(reshape)
df_train_melt <- melt(df_train, id.vars = c(""Survived"", ""Sex"", ""Embarked""))
ggplot(data = df_train_melt, mapping = aes(x = value, fill = as.factor(Survived), color = as.factor(Survived))) + geom_histogram(bins = 10) + facet_wrap(~variable, scales = ""free_x"")
ggplot(data = df_train, mapping = aes(Sex)) + geom_bar(aes(fill = as.factor(Survived)))
library(rpart.plot)
mytree <- rpart(Survived ~ ., data = df_train, method = ""class"")
rpart.plot(mytree, type = 4, extra = 101)
library(caret)
ctrl <- trainControl(method = ""repeatedcv"", number = 10, savePredictions = TRUE)
mod_glm_Sex <- train(as.factor(Survived) ~ Sex, data = df_train, method = ""glm"", family = ""binomial"", trControl = ctrl, tuneLength = 5)
mod_glm_Sex
mod_glm_all <- train(as.factor(Survived) ~ ., data = df_train, method = ""glm"", family = ""binomial"", trControl = ctrl, tuneLength = 5)
mod_glm_all
mod_rf_all <- train(as.factor(Survived) ~ ., data = df_train, method = ""rf"", trControl = ctrl, tuneLength = 5)
mod_rf_all
summary(df_test)
df_test$Fare[is.na(df_test$Fare)] <- mean(df_test$Fare, na.rm = T)
summary(df_test)
predictions_rf2 <- cbind(df_test$PassengerId, as.numeric(predict(mod_rf_all, newdata = df_test)) - 1)
colnames(predictions_rf2) <- c(""PassengerId"", ""Survived"")
write.csv(file = ""prediction_rf2.csv"", predictions_rf2, row.names = F, quote = FALSE)",0,0,1,0,0,0,0,1,0,1,0,0,0,0
327,arunkumarramanan-data-science-in-r-and-titanic-survival-prediction,0.7440000000000001,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'geom_bar', 'geom_text', 'ggplot', 'labs', 'theme_few', 'legend', 'plot', 'complete', 'mice', 'importance', 'randomForest', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",24.873031854629502,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'coord_flip', 'cat', 'dense_rank', 'is.na', 'names', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'mice', 'importance', 'str', 'desc', 'set.seed', 'gsub', 'factor', 'colnames', 'geom_bar', 'read.csv', 'paste0', 'table', 'randomForest', 'row.names', 'c', 'aes', 'mutate', 'paste', 'reorder', 'sum', 'plot', 'legend', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'library']",[],"['mira5b-exploring-survival-on-the-titanic', 'mohankanni-exploring-survival-on-the-titanic', 'kyanyoga-exploring-survival-on-the-titanic', 'rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic']","[0.9867940283192912, 0.9865846817323444, 0.9865508735777072, 0.986415610850698, 0.986415610850698, 0.986415610850698, 0.986415610850698, 0.986415610850698, 0.986415610850698, 0.986415610850698]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'geom_bar', 'geom_text', 'ggplot', 'labs'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['legend', 'plot'], 'package:mice': ['complete', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""geom_bar"", ""geom_text"", ""ggplot"", ""labs""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""legend"", ""plot""], ""package:mice"": [""complete"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip geombar geomtext ggplot labs packageggthemes themefew packagegraphics legend plot packagemice complete mice packagerandomForest importance randomForest packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
full$Age <- mice_output$Age
sum(is.na(full$Age))
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
330,brirush-logistic-regression-for-titanic,0.754,"['cbind', 'colnames', 'data.frame', 'round', 'summary', 'glm', 'predict', 'read.csv', 'write.csv']",['base'],0.3041629791259769,"['colnames', 'predict', 'write.csv', 'data.frame', 'read.csv', 'summary', 'round', 'cbind', 'glm']",[],"['brirush-svm-for-titanic', 'seajaye-titanic-logistic-regression-0-78947', 'karnakarthoorpu-titanicanalysis-r', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'aer503-svm-for-titanic', 'sawajid-titanic-test', 'zhaotianjing-titanic', 'danr87946-titanic-practice', 'jerlinraj-titanic-machine-learning-from-disaster']","[0.35116890120152966, 0.34297038802460833, 0.3348508211696935, 0.3106788618965282, 0.3106788618965282, 0.2985311587808104, 0.265469231216696, 0.26111800505085536, 0.2599211692268439, 0.2540275220749054]","{'package:base': ['cbind', 'colnames', 'data.frame', 'round', 'summary'], 'package:stats': ['glm', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""cbind"", ""colnames"", ""data.frame"", ""round"", ""summary""], ""package:stats"": [""glm"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase cbind colnames dataframe round summary packagestats glm predict packageutils readcsv writecsv,"train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
logistic <- glm(Survived ~ SibSp + Parch + Sex + Pclass, data = train, family = ""binomial"")
summary(logistic)
predicted <- predict(logistic, test, type = ""response"")
predicted <- round(predicted)
output <- data.frame(test$PassengerId, predicted)
colnames(output) <- cbind(""PassengerId"", ""Survived"")
write.csv(output, file = ""Rushton_Solution.csv"", row.names = F)",0,0,0,0,1,0,0,0,0,0,0,0,0,0
333,juverstraeten-titanic-test-5-decision-tree-w-cabin,0.763,"['as.character', 'c', 'data.frame', 'factor', 'library', 'prop.table', 'rbind', 'sapply', 'strsplit', 'sub', 'substr', 'table', 'dev.off', 'png', 'rpart', 'rpart.control', 'prp', 'predict', 'read.csv', 'str', 'write.csv']","['randomForest', 'rpart', 'rpart.plot', 'RColorBrewer', 'base']",0.5688748359680179,"['dev.off', 'as.character', 'sub', 'png', 'rpart.control', 'prop.table', 'rpart', 'sapply', 'str', 'prp', 'factor', 'read.csv', 'table', 'c', 'rbind', 'predict', 'write.csv', 'data.frame', 'strsplit', 'substr', 'library']",[],"['aer503-titanic-exploring-survival-and-random-forest-test', 'wongalan2002-titanic-with-neural-network', 'frankfeng-titanic', 'parthchaudhary-titanic-submission', 'alwortman-titanic-test-script', 'srinivasarajui-srini-s-r-titanic-solution', 'hisnibs-titanic-enhancing-the-training-data-and-kis', 'lokesharun-titanic', 'pradeeptripathi-prediction-of-titanic-survival-using-random-forest', 'pradeeptripathi-prediction-of-titanic-survival-using-r']","[0.879295097364321, 0.8520248535986806, 0.8491033952439205, 0.5823173784938019, 0.5581372709015683, 0.5390786785945582, 0.19163393238676588, 0.18748083569791874, 0.1818100797001409, 0.18169230341502784]","{'package:base': ['as.character', 'c', 'data.frame', 'factor', 'library', 'prop.table', 'rbind', 'sapply', 'strsplit', 'sub', 'substr', 'table'], 'package:grDevices': ['dev.off', 'png'], 'package:rpart': ['rpart', 'rpart.control'], 'package:rpart.plot': ['prp'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""as.character"", ""c"", ""data.frame"", ""factor"", ""library"", ""prop.table"", ""rbind"", ""sapply"", ""strsplit"", ""sub"", ""substr"", ""table""], ""package:grDevices"": [""dev.off"", ""png""], ""package:rpart"": [""rpart"", ""rpart.control""], ""package:rpart.plot"": [""prp""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase ascharacter c dataframe factor library proptable rbind sapply strsplit sub substr table packagegrDevices devoff png packagerpart rpart rpartcontrol packagerpartplot prp packagestats predict packageutils readcsv str writecsv,"library(randomForest)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
titanic <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
str(titanic)
test$Survived <- NA
all_data <- rbind(titanic, test)
all_data$Name <- as.character(all_data$Name)
all_data$Title <- sapply(all_data$Name, FUN = function(x) {
    strsplit(x, split = ""[,.]"")[[1]][2]
})
all_data$Title <- sub("" "", """", all_data$Title)
all_data$Title[all_data$Title %in% c(""Capt"", ""Col"", ""Don"", ""Dr"", ""Jonkheer"", ""Major"", ""Master"", ""Rev"", ""Sir"")] <- ""Honorific_male""
all_data$Title[all_data$Title %in% c(""Dona"", ""Lady"", ""the Countess"")] <- ""Honorific_female""
all_data$Title[all_data$Title %in% c(""Miss"", ""Mlle"", ""Mme"", ""Mrs"", ""Ms"")] <- ""Non_Honorific_female""
all_data$Title[all_data$Title %in% c(""Mr"")] <- ""Non_Honorific_male""
all_data$Title <- factor(all_data$Title)
all_data$CabinGroup <- sapply(all_data$Cabin, FUN = function(x) {
    substr(x, 1, 1)
})
all_data$CabinGroup[all_data$CabinGroup == """"] <- ""no_data""
all_data$CabinGroup <- factor(all_data$CabinGroup)
titanic <- all_data[1:891, ]
test <- all_data[892:1309, ]
prop.table(table(titanic$CabinGroup, titanic$Survived), 1)
tree <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + CabinGroup, data = titanic, method = ""class"", control = rpart.control(minsplit = 5))
png(""1_Visualisation_Tree_Titanic.png"")
prp(tree)
dev.off()
my_prediction <- predict(tree, test, type = ""class"")
submission <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
write.csv(submission, file = ""titanic_submission.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
334,xliang-titanic-survival-prediction,0.7490000000000001,"['cbind', 'rbind', 'summary', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'c', 'data.frame', 'factor', 'is.na', 'levels', 'library', 'mean', 'nrow', 'set.seed', 'sub', 'sum', 'table', 'svm', 'tune.randomForest', 'aes', 'geom_boxplot', 'ggplot', 'md.pattern', 'cforest', 'cforest_unbiased', 'varImpPlot', 'complete.cases', 'cor', 'median', 'predict', 'read.csv', 'str', 'write.csv']","['randomForest', 'party', 'e1071', 'mice', 'ggplot2', 'base']",2.55652054945628,"['nrow', 'mean', 'median', 'md.pattern', 'cforest', 'svm', 'cor', 'sub', 'is.na', 'levels', 'geom_boxplot', 'summary', 'varImpPlot', 'str', 'set.seed', 'factor', 'read.csv', 'table', 'c', 'aes', 'tune.randomForest', 'rbind', 'sum', 'predict', 'write.csv', 'data.frame', 'ggplot', 'user defined', 'library', 'cbind', 'complete.cases', 'cforest_unbiased']",[],"['youhe2482-titanic-a-very-first-step', 'nshrest-titanic-a-very-first-step-54f223', 'nashyegi-who-all-survived-the-titanic', 'monikapeteva-who-all-survived-the-titanic-3b45d7', 'cdeotte-titanic-deep-net-0-82296', 'tsfitz-titanic', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'lagprophet-titanic', 'peggy88-titanic-data-eda-by-peggy']","[0.8983394828279658, 0.8983394828279658, 0.5800083250531682, 0.5800083250531682, 0.3579791239311687, 0.14716103937623076, 0.13300981918602578, 0.13040141771113048, 0.12378087115435034, 0.1189766615727385]","{'c(""package:mice"", ""package:base"")': ['cbind', 'rbind'], 'c(""package:stats4"", ""package:base"")': ['summary'], 'character(0)': ['kagglePred'], 'package:base': ['c', 'data.frame', 'factor', 'is.na', 'levels', 'library', 'mean', 'nrow', 'set.seed', 'sub', 'sum', 'table'], 'package:e1071': ['svm', 'tune.randomForest'], 'package:ggplot2': ['aes', 'geom_boxplot', 'ggplot'], 'package:mice': ['md.pattern'], 'package:party': ['cforest', 'cforest_unbiased'], 'package:randomForest': ['varImpPlot'], 'package:stats': ['complete.cases', 'cor', 'median', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:mice"", ""package:base"")"": [""cbind"", ""rbind""], ""c(""package:stats4"", ""package:base"")"": [""summary""], ""character(0)"": [""kagglePred""], ""package:base"": [""c"", ""data.frame"", ""factor"", ""is.na"", ""levels"", ""library"", ""mean"", ""nrow"", ""set.seed"", ""sub"", ""sum"", ""table""], ""package:e1071"": [""svm"", ""tune.randomForest""], ""package:ggplot2"": [""aes"", ""geom_boxplot"", ""ggplot""], ""package:mice"": [""md.pattern""], ""package:party"": [""cforest"", ""cforest_unbiased""], ""package:randomForest"": [""varImpPlot""], ""package:stats"": [""complete.cases"", ""cor"", ""median"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagemice packagebase cbind rbind cpackagestats4 packagebase summary character0 kagglePred packagebase c dataframe factor isna levels library mean nrow setseed sub sum table packagee1071 svm tunerandomForest packageggplot2 aes geomboxplot ggplot packagemice mdpattern packageparty cforest cforestunbiased packagerandomForest varImpPlot packagestats completecases cor median predict packageutils readcsv str writecsv,"library(randomForest)
library(party)
library(e1071)
library(mice)
library(ggplot2)
trainData <- read.csv(""../input/train.csv"")
testData <- read.csv(""../input/test.csv"")
allData <- rbind(trainData[, -2], testData)
str(allData)
nrow(allData[!complete.cases(allData), ])
md.pattern(allData)
cor(allData[!is.na(allData$Fare), ]$Pclass, allData[!is.na(allData$Fare), ]$Fare)
ggplot(data = allData, aes(x = factor(Pclass), y = Fare, fill = factor(Pclass))) + geom_boxplot(notch = FALSE)
allData[is.na(allData$Fare), ]$Fare <- median(allData[allData$Pclass == 3, ]$Fare, na.rm = TRUE)
allData$Title <- sub("".*, (\\w+)\\. .*"", ""\\1"", allData$Name)
allData[!(allData$Title %in% c(""Miss"", ""Mr"", ""Mrs"", ""Master"")), ]$Title <- ""Respected""
table(allData$Sex, allData$Title)
for (ttl in levels(factor(allData$Title))) {
    allData[(is.na(allData$Age)) & (allData$Title == ttl), ]$Age <- median(allData[allData$Title == ttl, ]$Age, na.rm = TRUE)
}
sum(is.na(allData))
allData$FamilySize <- allData$Parch + allData$SibSp + 1
myfeatures <- c(""Pclass"", ""Sex"", ""Age"", ""Fare"", ""Embarked"", ""Title"", ""FamilySize"")
allData$Pclass <- factor(allData$Pclass)
allData$Title <- factor(allData$Title)
train <- cbind(allData[1:nrow(trainData), myfeatures], trainData[""Survived""])
test <- allData[(nrow(trainData) + 1):nrow(allData), myfeatures]
set.seed(66)
fit.tune <- tune.randomForest(factor(Survived) ~ ., data = train, mtry = c(2:5), ntree = c(500, 1000, 1500, 2000))
summary(fit.tune)
fit.rf <- fit.tune$best.model
mean(fit.rf$predicted == train$Survived)
varImpPlot(fit.rf)
set.seed(66)
fit.cf <- cforest(factor(Survived) ~ ., data = train, controls = cforest_unbiased(ntree = 2000, mtry = 3))
fit.cf
pred.cf <- predict(fit.cf)
mean(pred.cf == train$Survived)
set.seed(66)
fit.svm <- svm(factor(Survived) ~ ., data = train, kernel = ""radial"", gamma = 0.1, cost = 1)
summary(fit.svm)
mean(fit.svm$fitted == train$Survived)
kagglePred <- function(myfit, test, filename, ...) {
    mypred <- predict(myfit, test, ...)
    myresult <- data.frame(PassengerID = testData$PassengerId, Survived = mypred)
    write.csv(myresult, file = filename, row.names = FALSE)
}
kagglePred(fit.rf, test, ""rf.csv"")
kagglePred(fit.cf, test, ""cf.csv"", OOB = TRUE, type = ""response"")
kagglePred(fit.svm, test, ""svm.csv"")",1,0,0,1,0,0,0,0,0,0,0,1,0,0
335,liudj2008-fork-of-titanic,0.7609999999999999,"['as.character', 'as.factor', 'c', 'data.frame', 'is.na', 'levels', 'library', 'mean', 'names', 'rep', 'sample', 'set.seed', 'summary', 'system', 'table', 'randomForest', 'predict', 'head', 'read.csv', 'write.csv']","['ggplot2', 'readr', 'randomForest', 'base']",1.27998399734497,"['mean', 'as.character', 'is.na', 'levels', 'names', 'as.factor', 'summary', 'rep', 'set.seed', 'read.csv', 'table', 'randomForest', 'c', 'sample', 'predict', 'write.csv', 'data.frame', 'head', 'library', 'system']",[],"['liudj2008-titanic', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'seajaye-titanic-logistic-regression-0-78947', 'jacekpardyak-mytitanicscript', 'paulocressoni-titanic-using-stepwise-linear-regression', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'gravitymhxy2-titanic', 'annafreydenzon-titanic-machine-learning-from-disaster', 'ezhilvelme-titanic-neural-network-c-4-2']","[0.9967505065251305, 0.6207687514238172, 0.6207687514238172, 0.5855412096736555, 0.531689012947946, 0.46533235616821783, 0.4632493879911475, 0.45847597605123697, 0.45733678015263945, 0.4550973409473072]","{'package:base': ['as.character', 'as.factor', 'c', 'data.frame', 'is.na', 'levels', 'library', 'mean', 'names', 'rep', 'sample', 'set.seed', 'summary', 'system', 'table'], 'package:randomForest': ['randomForest'], 'package:stats': ['predict'], 'package:utils': ['head', 'read.csv', 'write.csv']}","{""package:base"": [""as.character"", ""as.factor"", ""c"", ""data.frame"", ""is.na"", ""levels"", ""library"", ""mean"", ""names"", ""rep"", ""sample"", ""set.seed"", ""summary"", ""system"", ""table""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""predict""], ""package:utils"": [""head"", ""read.csv"", ""write.csv""]}",packagebase ascharacter asfactor c dataframe isna levels library mean names rep sample setseed summary system table packagerandomForest randomForest packagestats predict packageutils head readcsv writecsv,"library(ggplot2)
library(readr)
system(""ls ../input"")
train = read.csv(""../input/train.csv"")
train = train[, -c(1, 4, 9, 11)]
set.seed(1)
train$Age[is.na(train$Age)] = sample(train$Age[!is.na(train$Age)], 177)
set.seed(2)
train$Embarked[train$Embarked == """"] = sample(train$Embarked[train$Embarked != """"], 2)
train$Embarked = as.character(train$Embarked)
train$Embarked = as.factor(train$Embarked)
train$Survived = as.factor(train$Survived)
summary(train)
library(randomForest)
set.seed(3)
rf.fit = randomForest(Survived ~ ., data = train)
rf.pred = predict(rf.fit, newdata = train)
table(true = train$Survived, pred = rf.pred)
mean(train$Survived == rf.pred)
test_original = read.csv(""../input/test.csv"")
test = test_original
test = test[, -c(1, 3, 8, 10)]
test = data.frame(Survived = as.factor(rep(0, 418)), test)
set.seed(1)
test$Age[is.na(test$Age)] = sample(test$Age[!is.na(test$Age)], 86)
set.seed(2)
test$Fare[is.na(test$Fare)] = sample(test$Fare[!is.na(test$Fare)], 1)
names(test)
levels(test$Survived) = levels(train$Survived)
levels(test$Embarked) = levels(train$Embarked)
test$Survived = predict(rf.fit, test)
prediction = data.frame(PassengerId = test_original$PassengerId, Survived = test$Survived)
summary(prediction)
head(prediction)
write.csv(prediction, ""gender_submission.csv"")",1,0,0,0,0,0,0,0,0,0,0,0,0,0
338,waiyujack-titanic-random-search-in-r,0.7440000000000001,"['setdiff', 'filter', 'user defined', 'user defined', 'user defined', 'apply', 'as.factor', 'as.numeric', 'c', 'cat', 'colnames', 'data.frame', 'ifelse', 'is.na', 'length', 'library', 'list', 'list.files', 'log', 'max', 'mean', 'paste0', 'rbind', 'replace', 'round', 'sample', 'sample.int', 'sapply', 'set.seed', 'subset', 'system.time', 'unique', 'which', 'which.max', 'case_when', 'funs', 'group_by', 'mutate', 'mutate_if', 'n', 'rename', 'select', 'summarise', 'predict', 'runif', 'str_locate', 'str_sub', 'head', 'read.csv', 'write.csv']","['tidyverse', 'base']",1.36246229807536,"['summarise', 'list', 'mean', 'which.max', 'replace', 'system.time', 'which', 'cat', 'rename', 'is.na', 'subset', 'mutate_if', 'log', 'case_when', 'as.factor', 'filter', 'round', 'sapply', 'n', 'set.seed', 'setdiff', 'colnames', 'unique', 'max', 'str_locate', 'apply', 'length', 'read.csv', 'paste0', 'group_by', 'c', 'runif', 'mutate', 'rbind', 'sample', 'as.numeric', 'ifelse', 'funs', 'predict', 'write.csv', 'list.files', 'sample.int', 'data.frame', 'str_sub', 'head', 'user defined', 'library', 'select']",[],"['qianbi-titanic-logistic', 'quentinalais-kerneltitanicquentin', 'retrospectprospect-titanic-machine-learning-from-eda-to-xgb', 'beovulfo-titanic-work-for-beginners', 'rboimistruk-titanic-survivals-analysis', 'mkgiitr-titanic-survival-prediction', 'allanwbrooks-exploring-survival-on-the-titanic', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'venkatko-titanic-survival1', 'yugrao-exploring-survival-on-the-titanic']","[0.4142921303464702, 0.40756868240266997, 0.27890555840093506, 0.23673524915547145, 0.23090603308256746, 0.21980173628643657, 0.21847677347341243, 0.21494735127074674, 0.21408138740794286, 0.2129041559581807]","{'c(""package:dplyr"", ""package:base"")': ['setdiff'], 'c(""package:dplyr"", ""package:stats"")': ['filter'], 'character(0)': ['auc', 'xgb.cv', 'xgb.DMatrix', 'xgb.train'], 'package:base': ['apply', 'as.factor', 'as.numeric', 'c', 'cat', 'colnames', 'data.frame', 'ifelse', 'is.na', 'length', 'library', 'list', 'list.files', 'log', 'max', 'mean', 'paste0', 'rbind', 'replace', 'round', 'sample', 'sample.int', 'sapply', 'set.seed', 'subset', 'system.time', 'unique', 'which', 'which.max'], 'package:dplyr': ['case_when', 'funs', 'group_by', 'mutate', 'mutate_if', 'n', 'rename', 'select', 'summarise'], 'package:stats': ['predict', 'runif'], 'package:stringr': ['str_locate', 'str_sub'], 'package:utils': ['head', 'read.csv', 'write.csv']}","{""c(""package:dplyr"", ""package:base"")"": [""setdiff""], ""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""character(0)"": [""auc"", ""xgb.cv"", ""xgb.DMatrix"", ""xgb.train""], ""package:base"": [""apply"", ""as.factor"", ""as.numeric"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""ifelse"", ""is.na"", ""length"", ""library"", ""list"", ""list.files"", ""log"", ""max"", ""mean"", ""paste0"", ""rbind"", ""replace"", ""round"", ""sample"", ""sample.int"", ""sapply"", ""set.seed"", ""subset"", ""system.time"", ""unique"", ""which"", ""which.max""], ""package:dplyr"": [""case_when"", ""funs"", ""group_by"", ""mutate"", ""mutate_if"", ""n"", ""rename"", ""select"", ""summarise""], ""package:stats"": [""predict"", ""runif""], ""package:stringr"": [""str_locate"", ""str_sub""], ""package:utils"": [""head"", ""read.csv"", ""write.csv""]}",cpackagedplyr packagebase setdiff cpackagedplyr packagestats filter character0 auc xgbcv xgbDMatrix xgbtrain packagebase apply asfactor asnumeric c cat colnames dataframe ifelse isna length library list listfiles log max mean paste0 rbind replace round sample sampleint sapply setseed subset systemtime unique which whichmax packagedplyr casewhen funs groupby mutate mutateif n rename select summarise packagestats predict runif packagestringr strlocate strsub packageutils head readcsv writecsv,"library(tidyverse)
list.files(path = ""../input"")
packagestoinstall <- c(""tidyverse"", ""forcats"", ""stringr"", ""xgboost"", ""MLmetrics"")
sapply(packagestoinstall, require, character = T)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
train$set <- ""train""
test$set <- ""test""
test$Survived <- NA
full <- rbind(train, test)
full <- full %>% mutate_if(is.character, funs(replace(., . == """", NA)))
full <- full %>% mutate(Age = ifelse(is.na(Age), mean(full$Age, na.rm = TRUE), Age), `Age Group` = case_when(Age < 13 ~ ""Age.0012"", Age >= 13 & Age < 18 ~ ""Age.1317"", Age >= 18 & Age < 60 ~ ""Age.1859"", Age >= 60 ~ ""Age.60Ov""))
full$Embarked <- replace(full$Embarked, which(is.na(full$Embarked)), ""S"")
full <- full %>% mutate(Title = as.factor(str_sub(Name, str_locate(Name, "","")[, 1] + 2, str_locate(Name, ""\\."")[, 1] - 1)))
title_tbl <- full %>% group_by(Title) %>% summarise(N = n())
full <- full %>% mutate(`Family Size` = as.numeric(SibSp) + as.numeric(Parch) + 1, `Family Group` = case_when(`Family Size` == 1 ~ ""single"", `Family Size` > 1 & `Family Size` <= 3 ~ ""small"", `Family Size` >= 4 ~ ""large""))
full <- full %>% mutate(Survived = case_when(Survived == 1 ~ ""Yes"", Survived == 0 ~ ""No""))
full_2 <- full %>% select(-Name, -Ticket, -Cabin, -set) %>% mutate(Survived = ifelse(Survived == ""Yes"", 1, 0)) %>% rename(AgeGroup = `Age Group`, FamilySize = `Family Size`, FamilyGroup = `Family Group`)
ohe_cols <- c(""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""AgeGroup"", ""FamilyGroup"")
num_cols <- setdiff(colnames(full_2), ohe_cols)
full_final <- subset(full_2, select = num_cols)
for (var in ohe_cols) {
    values <- unique(full_2[[var]])
    for (j in 1:length(values)) {
        full_final[[paste0(var, ""_"", values[j])]] <- (full_2[[var]] == values[j]) * 1
    }
}
data_train <- full_final %>% filter(!is.na(Survived))
data_test <- full_final %>% filter(is.na(Survived))
data_train %>% colnames()
data_train <- apply(data_train, 2, as.numeric)
dtrain = xgb.DMatrix(data = data_train[, -c(1, 2)], label = data_train[, 2])
best.param = list()
best.seed = 0
best.auc = 0
best.auc.index = 0
timer <- system.time({
    for (iter in 1:50) {
        param = list(objective = ""binary:logistic"", eval_metric = ""logloss"", eval_metric = ""auc"", max_depth = sample(4:8, 1), eta = round(runif(1, 0.01, 0.03), 4), gamma = round(runif(1, 0, 0.2), 4), subsample = round(runif(1, 0.6, 0.9), 4), colsample_bytree = round(runif(1, 0.5, 0.8), 4), min_child_weight = sample(1:40, 1), max_delta_step = sample(1:10, 1))
        seed.number = sample.int(1000, 1)[[1]]
        set.seed(seed.number)
        cat(""Iteration"", iter, ""for random grid search. \n"")
        cv = xgb.cv(params = param, data = dtrain, nfold = 5, nrounds = 1000, verbose = T, early.stop.round = 100, maximize = T)
        max.auc = max(cv$evaluation_log[, test_auc_mean])
        max.auc.index = which.max(cv$evaluation_log[, test_auc_mean])
        if (max.auc > best.auc) {
            best.auc = max.auc
            best.auc.index = max.auc.index
            best.seed = seed.number
            best.param = param
        }
        cat("""", sep = ""\n\n"")
    }
})
set.seed(best.seed)
xgb.valid.fit = xgb.train(data = dtrain, params = best.param, nrounds = best.auc.index, verbose = T, maximize = F)
data_test <- apply(data_test, 2, as.numeric)
data_test %>% head()
test_id <- data_test[, 1]
data_test <- apply(data_test, 2, as.numeric)
pred_test <- predict(xgb.valid.fit, data_test[, -c(1, 2)])
pred_test %>% head()
y_tain_pred <- predict(xgb.valid.fit, data_train[, c(-1, -2)])
pROC::auc(data_train[, 2], y_tain_pred)
mean(-(data_train[, 2] * log(y_tain_pred) + (1 - data_train[, 2]) * (log(1 - y_tain_pred))))
prediction <- data.frame(PassengerID = test_id, Survived = as.numeric(pred_test > 0.5))
prediction %>% head(20)
write.csv(prediction, ""submission.csv"")",0,0,0,0,0,0,0,0,0,0,0,0,0,0
340,allanwbrooks-exploring-survival-on-the-titanic,0.7509999999999999,"['filter', 'user defined', 'user defined', 'user defined', 'user defined', 'as.factor', 'c', 'colnames', 'cut', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'tapply', 'setDT', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'boxplot', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'data.table', 'base']",25.4450800418854,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'mosaicplot', 'hist', 'boxplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'setDT', 'importance', 'cut', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'strsplit', 'tapply', 'ggplot', 'geom_density', 'user defined', 'library']",[],"['hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'tetyama-trial-titanic', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'mira5b-exploring-survival-on-the-titanic', 'mohankanni-exploring-survival-on-the-titanic', 'kyanyoga-exploring-survival-on-the-titanic', 'oldflag-exploring-survival-on-the-titanic-inr-frommegan', 'orbanjan-exploring-survival-on-the-titanic-new']","[0.9632270717010817, 0.962501627376594, 0.962501627376594, 0.962203447362035, 0.9579667429970337, 0.9528031823197459, 0.9524972115229223, 0.9522343905388486, 0.9520867088497046, 0.9520410147756276]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'character(0)': ['`:=`'], 'package:base': ['as.factor', 'c', 'colnames', 'cut', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'tapply'], 'package:data.table': ['setDT'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['boxplot', 'hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""character(0)"": [""`:=`""], ""package:base"": [""as.factor"", ""c"", ""colnames"", ""cut"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table"", ""tapply""], ""package:data.table"": [""setDT""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""boxplot"", ""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter character0  packagebase asfactor c colnames cut dataframe factor gsub isna lapply library names paste paste0 round rownames sapply setseed strsplit sum table tapply packagedatatable setDT packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip geombar geomboxplot geomdensity geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics boxplot hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
table(full$Title[is.na(full$Age)], full$Sex[is.na(full$Age)])
tapply(full$Age[!is.na(full$Age)], full$Title[!is.na(full$Age)], summary)
tapply(full$Age[!is.na(full$Age)], full$Title[!is.na(full$Age)], summary)
library(data.table)
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
agebreaks <- c(0, 1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 500)
agelabels = c(""0-1"", ""1-4"", ""5-9"", ""10-14"", ""15-19"", ""20-24"", ""25-29"", ""30-34"", ""35-39"", ""40-44"", ""45-49"", ""50-54"", ""55-59"", ""60-64"", ""65-69"", ""70-74"", ""75-79"", ""80-84"", ""85+"")
setDT(full)[, `:=`(agegroups, cut(Age, breaks = agebreaks, right = FALSE, labels = agelabels))]
boxplot(full$Age[!is.na(full$Age)] ~ full$Title[!is.na(full$Age)], title = ""Age Distribution by Title"", xlab = ""Title"", ylab = ""Age (Years)"")
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18 & full$Sex == ""female""] <- ""Adult""
full$Child[full$Age >= 14 & full$Sex == ""male""] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + agegroups + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
341,phubert-mackenzie-bigdata-titanic-knn,0.574,"['as.character', 'as.numeric', 'c', 'colnames', 'colSums', 'data.frame', 'is.na', 'levels', 'library', 'matrix', 'max', 'mean', 'min', 'ncol', 'nrow', 'paste0', 'print', 'subset', 'summary', 'which', 'which.max', 'knn', 'plot', 'head', 'read.csv', 'write.csv']","['tidyverse', 'class', 'base']",13.779790163040197,"['nrow', 'mean', 'which.max', 'min', 'which', 'as.character', 'subset', 'is.na', 'levels', 'colSums', 'print', 'ncol', 'summary', 'matrix', 'colnames', 'max', 'read.csv', 'paste0', 'c', 'as.numeric', 'plot', 'knn', 'write.csv', 'data.frame', 'head', 'library']",[],"['phubert-mackenzie-bigdata-titanic-knn', 'phubert-titanic-mackenzie-aula07', 'phubert-titanic-mackenzie-aula08', 'liudj2008-titanic', 'liudj2008-fork-of-titanic', 'jacekpardyak-mytitanicscript', 'scout16-titanic-disaster-in-r', 'paulocressoni-titanic-using-stepwise-linear-regression', 'arjunmalhotra-titanic', 'turntrout-titanic-data-exploration']","[0.9999999999999998, 0.4512939202423702, 0.41193110095318214, 0.11712570835516294, 0.11705378747132947, 0.11467458759305804, 0.11369627998214575, 0.11058550499115702, 0.10626477652569928, 0.10528137076159232]","{'package:base': ['as.character', 'as.numeric', 'c', 'colnames', 'colSums', 'data.frame', 'is.na', 'levels', 'library', 'matrix', 'max', 'mean', 'min', 'ncol', 'nrow', 'paste0', 'print', 'subset', 'summary', 'which', 'which.max'], 'package:class': ['knn'], 'package:graphics': ['plot'], 'package:utils': ['head', 'read.csv', 'write.csv']}","{""package:base"": [""as.character"", ""as.numeric"", ""c"", ""colnames"", ""colSums"", ""data.frame"", ""is.na"", ""levels"", ""library"", ""matrix"", ""max"", ""mean"", ""min"", ""ncol"", ""nrow"", ""paste0"", ""print"", ""subset"", ""summary"", ""which"", ""which.max""], ""package:class"": [""knn""], ""package:graphics"": [""plot""], ""package:utils"": [""head"", ""read.csv"", ""write.csv""]}",packagebase ascharacter asnumeric c colnames colSums dataframe isna levels library matrix max mean min ncol nrow paste0 print subset summary which whichmax packageclass knn packagegraphics plot packageutils head readcsv writecsv,"library(tidyverse)
library(class)
dados = read.csv(""../input/train.csv"", sep = "","", header = T)
colnames(dados)
head(dados)
dados = dados %>% subset(select = -c(PassengerId, Ticket, Name, Cabin, Embarked))
colnames(dados)
colSums(is.na(dados))
dados[which(is.na(dados$Age)), ""Age""] = mean(dados$Age, na.rm = T)
dados$Sex = as.character(dados$Sex)
dados[which(dados$Sex == ""male""), ""Sex""] = 1
dados[which(dados$Sex == ""female""), ""Sex""] = 0
dados$Sex = as.numeric(dados$Sex)
for (i in 1:ncol(dados)) {
    dados[, i] = as.numeric(dados[, i])
    dados[, i] = (dados[, i] - min(dados[, i]))/(max(dados[, i]) - min(dados[, i]))
}
X = dados %>% subset(select = -Survived)
y = dados %>% subset(select = Survived)
maxk = 15
loo.res = matrix(NA, nrow = maxk)
N = nrow(dados)
for (k in 1:maxk) {
    tmp = 0
    for (i in 1:N) {
        Xtest = X[i, ]
        ytest = y[i, ]
        Xtrain = X[-i, ]
        ytrain = y[-i, ]
        mod.knn = knn(train = Xtrain, test = Xtest, cl = ytrain, k = k, prob = FALSE)
        tmp = tmp + ((ytest - as.numeric(levels(mod.knn))[mod.knn])^2)/N
    }
    print(paste0(""k "", k, "" - accuracy = "", tmp))
    loo.res[k] = tmp
}
plot(loo.res, type = ""b"")
print(paste0(""Melhor k = "", which.max(loo.res)))
test = read.csv(""../input/test.csv"", stringsAsFactors = F)
colnames(test)
test = test %>% subset(select = -c(Name, Ticket, Cabin, Embarked))
colSums(is.na(test))
test[which(is.na(test$Age)), ""Age""] = mean(test$Age, na.rm = T)
test[which(is.na(test$Fare)), ""Fare""] = mean(test$Fare, na.rm = T)
test[which(test$Sex == ""male""), ""Sex""] = 1
test[which(test$Sex == ""female""), ""Sex""] = 0
test$Sex = as.numeric(test$Sex)
summary(test)
for (i in ncol(test)) {
    test[, i] = (test[, i] - min(test[, i]))/(max(test[, i]) - min(test[, i]))
}
k = which.max(loo.res)
pred = knn(train = X, test = test[, 2:ncol(test)], cl = y[, ], k, prob = F)
df = data.frame(PassengerID = test[, 1], Survived = pred)
write.csv(df, file = ""knn_submit.csv"", row.names = F)",0,0,0,0,0,0,0,0,0,0,0,0,0,0
342,peggy88-titanic-data-eda-by-peggy,0.758,"['as.character', 'as.factor', 'c', 'colSums', 'data.frame', 'dim', 'is.na', 'library', 'rbind', 'summary', 'table', 'plot', 'rpart', 'complete.cases', 'median', 'predict', 'read.csv', 'str', 'write.csv']","['ggplot2', 'readr', 'rpart', 'base']",0.9363448619842528,"['median', 'as.character', 'is.na', 'colSums', 'rpart', 'as.factor', 'summary', 'str', 'dim', 'read.csv', 'table', 'c', 'rbind', 'plot', 'predict', 'write.csv', 'data.frame', 'library', 'complete.cases']",[],"['turntrout-titanic-data-exploration', 'chuanhuiliu-one-solution-to-titanic-survival-analysis', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'johnlam-titanic-dataset-and-learning-decision-trees', 'cdeotte-titanic-deep-net-0-82296', 'liudj2008-titanic', 'shashank74-titanic-disaster-data-exploration-and-modelling', 'liudj2008-fork-of-titanic', 'lich070192-titanic-test']","[0.5098466994929745, 0.4792787566503243, 0.4787432238328935, 0.4787432238328935, 0.45905707341345464, 0.4427449858305326, 0.4361514224739749, 0.43607976613859756, 0.4358580443522477, 0.4309816441755012]","{'package:base': ['as.character', 'as.factor', 'c', 'colSums', 'data.frame', 'dim', 'is.na', 'library', 'rbind', 'summary', 'table'], 'package:graphics': ['plot'], 'package:rpart': ['rpart'], 'package:stats': ['complete.cases', 'median', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""as.character"", ""as.factor"", ""c"", ""colSums"", ""data.frame"", ""dim"", ""is.na"", ""library"", ""rbind"", ""summary"", ""table""], ""package:graphics"": [""plot""], ""package:rpart"": [""rpart""], ""package:stats"": [""complete.cases"", ""median"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase ascharacter asfactor c colSums dataframe dim isna library rbind summary table packagegraphics plot packagerpart rpart packagestats completecases median predict packageutils readcsv str writecsv,"library(ggplot2)
library(readr)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
str(train)
str(test)
train$Name <- as.character(train$Name)
test$Name <- as.character(test$Name)
train$Survived <- as.factor(train$Survived)
train$Pclass <- as.factor(train$Pclass)
test$Pclass <- as.factor(test$Pclass)
str(train)
table(train$Survived)
summary(train)
plot(train$Sex, train$Survived, col = c(""red"", ""blue""))
colSums(is.na(train))
colSums(is.na(test))
train2 <- train
test2 <- test
test2$Survived <- NA
full <- rbind(train2, test2)
full[!complete.cases(full$Fare), ]
full$Fare[1044] <- median(full$Fare, na.rm = TRUE)
full[!complete.cases(full$Fare), ]
train[is.na(train)] <- median(train$Age, na.rm = TRUE)
test[is.na(test)] <- median(test$Age, na.rm = TRUE)
traindata <- full[1:891, ]
testdata <- full[892:1309, ]
dim(traindata)
dim(testdata)
library(rpart)
dt <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = traindata, method = ""class"")
prediction <- predict(dt, newdata = testdata, type = ""class"")
submission <- data.frame(PassengerId = testdata$PassengerId, Survived = prediction)
write.csv(submission, file = ""gender_submission.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,1,0,0,0,0
343,arjunrampal-titanic-eda-rf,0.742,"['as.character', 'as.factor', 'c', 'cbind', 'cut', 'data.frame', 'factor', 'is.na', 'length', 'library', 'mean', 'nchar', 'nrow', 'prop.table', 'rbind', 'seq', 'set.seed', 'substring', 'sum', 'summary', 'table', 'unique', 'datatable', 'aes', 'geom_bar', 'geom_density', 'ggplot', 'randomForest', 'varImpPlot', 'rpart', 'aggregate', 'predict', 'str_locate', 'str_sub', 'read.csv', 'str', 'write.csv']","['ggplot2', 'stringr', 'DT', 'rpart', 'randomForest', 'base']",7.55278205871582,"['nrow', 'mean', 'nchar', 'as.character', 'is.na', 'prop.table', 'rpart', 'as.factor', 'summary', 'varImpPlot', 'str', 'set.seed', 'factor', 'aggregate', 'unique', 'cut', 'geom_bar', 'str_locate', 'length', 'read.csv', 'datatable', 'table', 'randomForest', 'substring', 'c', 'aes', 'rbind', 'sum', 'predict', 'write.csv', 'seq', 'data.frame', 'ggplot', 'str_sub', 'geom_density', 'library', 'cbind']",[],"['alejandrorivas-titanic-beginners-principiantes-espa-ol', 'ammara-titanic-competition-script-using-rf-2', 'jmercer187-fork-of-titanic2', 'ammara-titanic-competition-using-boosting', 'mmaguero-titanic-majority-vote-of-ridge-rf-and-gbm', 'byrony-titanic-majority-vote-of-ridge-rf-and-gbm', 'aravind5-titanic', 'yugrao-titanic2', 'yugrao-titanic', 'aravind5-kaggle-titanic']","[0.7606854405498205, 0.747547620732075, 0.7396107558484877, 0.708556547221862, 0.6968284213710098, 0.6968284213710098, 0.6650531606412976, 0.6650531606412976, 0.6650531606412976, 0.6650531606412976]","{'package:base': ['as.character', 'as.factor', 'c', 'cbind', 'cut', 'data.frame', 'factor', 'is.na', 'length', 'library', 'mean', 'nchar', 'nrow', 'prop.table', 'rbind', 'seq', 'set.seed', 'substring', 'sum', 'summary', 'table', 'unique'], 'package:DT': ['datatable'], 'package:ggplot2': ['aes', 'geom_bar', 'geom_density', 'ggplot'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:rpart': ['rpart'], 'package:stats': ['aggregate', 'predict'], 'package:stringr': ['str_locate', 'str_sub'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""as.character"", ""as.factor"", ""c"", ""cbind"", ""cut"", ""data.frame"", ""factor"", ""is.na"", ""length"", ""library"", ""mean"", ""nchar"", ""nrow"", ""prop.table"", ""rbind"", ""seq"", ""set.seed"", ""substring"", ""sum"", ""summary"", ""table"", ""unique""], ""package:DT"": [""datatable""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""geom_density"", ""ggplot""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:rpart"": [""rpart""], ""package:stats"": [""aggregate"", ""predict""], ""package:stringr"": [""str_locate"", ""str_sub""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase ascharacter asfactor c cbind cut dataframe factor isna length library mean nchar nrow proptable rbind seq setseed substring sum summary table unique packageDT datatable packageggplot2 aes geombar geomdensity ggplot packagerandomForest randomForest varImpPlot packagerpart rpart packagestats aggregate predict packagestringr strlocate strsub packageutils readcsv str writecsv,"train <- read.csv(""../input/train.csv"", header = T, na.strings = c(""""))
test <- read.csv(""../input/test.csv"", header = T, na.strings = c(""""))
str(train)
library(ggplot2)
table(train$Survived)
prop.table(table(train$Survived))
ggplot(train, aes(Survived, fill = ""salmon"")) + geom_bar()
train$Pclass <- as.factor(train$Pclass)
table(train$Pclass)
ggplot(train, aes(Pclass, ..count.., fill = factor(Survived))) + geom_bar(position = ""dodge"")
library(stringr)
Title <- as.factor(str_sub(train$Name, str_locate(train$Name, "","")[, 1] + 2, str_locate(train$Name, ""\\."")[, 1] - 1))
table(train$Sex, Title)
ggplot(train, aes(Title, ..count.., fill = factor(Survived))) + geom_bar(position = ""dodge"")
NameLength <- nchar(as.character(train$Name))
NameLenCat <- cut(NameLength, seq(12, 82, 5))
table(train$Survived, NameLenCat)
ggplot(train, aes(NameLenCat, ..count.., fill = factor(Survived))) + geom_bar(position = ""dodge"")
ggplot(train, aes(Sex, ..count.., fill = factor(Survived))) + geom_bar(position = ""dodge"")
summary(train$Age)
ggplot(train, aes(Age)) + geom_density(kernel = ""gaussian"")
table(train$Survived, is.na(train$Age))
Age_Null <- is.na(train$Age)
Agecat <- cut(train$Age, seq(0, 85, 8))
ggplot(train, aes(Agecat, ..count.., fill = factor(Survived))) + geom_bar(position = ""dodge"")
table(train$SibSp)
ggplot(train, aes(SibSp, ..count.., fill = factor(Survived))) + geom_bar(position = ""dodge"")
table(train$Parch)
ggplot(train, aes(Parch, ..count.., fill = factor(Survived))) + geom_bar(position = ""dodge"")
TicketType <- substring(train$Ticket, 1, 1)
TicketType2 <- nchar(as.character(train$Ticket))
TicketType <- as.factor(TicketType)
TicketType2 <- as.factor(TicketType2)
ggplot(train, aes(TicketType, ..count.., fill = factor(Survived))) + geom_bar(position = ""dodge"")
ggplot(train, aes(TicketType2, ..count.., fill = factor(Survived))) + geom_bar(position = ""dodge"")
length(unique(train$Fare))
aggregate(Fare ~ Pclass, train, mean)
library(DT)
sum(!is.na(train$Cabin))
length(unique(train$Cabin))
sum(is.na(train$Cabin))
datatable(data.frame(summary(train$Cabin)))
CabinType <- substring(train$Cabin, 1, 1)
ggplot(train, aes(CabinType, ..count.., fill = factor(Survived))) + geom_bar(position = ""dodge"")
table(train$Embarked)
datatable(train[is.na(train$Embarked), ])
ggplot(train, aes(Embarked, ..count.., fill = factor(Survived))) + geom_bar(position = ""dodge"")
ggplot(train, aes(Embarked, ..count.., fill = factor(Pclass))) + geom_bar(position = ""dodge"")
Survived <- train$Survived
train$Survived <- NULL
combi <- rbind(train, test)
combi$Title <- as.factor(str_sub(combi$Name, str_locate(combi$Name, "","")[, 1] + 2, str_locate(combi$Name, ""\\."")[, 1] - 1))
c_NameLength <- nchar(as.character(combi$Name))
combi$NameLenCat <- cut(c_NameLength, seq(11, 86, 5))
combi$FamilySize <- combi$SibSp + combi$Parch + 1
combi$TicketLett <- as.factor(substring(combi$Ticket, 1, 1))
combi$TicketLen <- as.factor(nchar(as.character(combi$Ticket)))
combi$CabinType <- substring(combi$Cabin, 1, 1)
combi$CabinType[is.na(combi$CabinType)] <- ""N""
combi$CabinType <- as.factor(combi$CabinType)
combi$Embarked[is.na(combi$Embarked)] <- ""S""
combi$Fare[is.na(combi$Fare)] <- mean(combi[combi$Pclass == 3 & combi$Embarked == ""S"" & combi$TicketLen == 4 & combi$CabinType == ""N"", ""Fare""], na.rm = TRUE)
library(rpart)
Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + NameLenCat + FamilySize + TicketLett + TicketLen + CabinType, data = combi[!is.na(combi$Age), ], method = ""anova"")
combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age), ])
train <- cbind(Survived, combi[1:nrow(train), c(2, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17)])
test <- combi[(nrow(train) + 1):nrow(combi), c(2, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17)]
library(randomForest)
set.seed(777)
fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + NameLenCat + FamilySize + TicketLett + TicketLen + CabinType, data = train, importance = TRUE, ntree = 2000)
varImpPlot(fit)
Prediction <- predict(fit, test)
submit <- data.frame(PassengerId = c(892:1309), Survived = Prediction)
write.csv(submit, file = ""randomforest.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
346,gravitymhxy2-titanic,0.763,"['cbind', 'as.factor', 'c', 'colSums', 'diag', 'is.na', 'levels', 'library', 'mean', 'set.seed', 'sum', 'table', 'createDataPartition', 'bind_cols', 'randomForest', 'predict', 'read.csv', 'str', 'write.csv', 'aggr']","['caret', 'dplyr', 'VIM', 'mice', 'randomForest', 'base']",7.35818099975586,"['mean', 'is.na', 'levels', 'colSums', 'as.factor', 'str', 'set.seed', 'aggr', 'read.csv', 'table', 'randomForest', 'bind_cols', 'c', 'diag', 'createDataPartition', 'sum', 'predict', 'write.csv', 'library', 'cbind']",[],"['liudj2008-titanic', 'liudj2008-fork-of-titanic', 'seajaye-titanic-logistic-regression-0-78947', 'jacekpardyak-mytitanicscript', 'danr87946-titanic-practice', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'peggy88-titanic-data-eda-by-peggy', 'nithishthirmul-titanic-data-test1', 'tsfitz-titanic']","[0.4591042909652162, 0.45847597605123697, 0.3646943136899605, 0.3114499140928236, 0.30079509999719056, 0.29956707161378404, 0.29956707161378404, 0.2990004611095253, 0.2800028119172353, 0.2715722814566181]","{'c(""package:mice"", ""package:base"")': ['cbind'], 'package:base': ['as.factor', 'c', 'colSums', 'diag', 'is.na', 'levels', 'library', 'mean', 'set.seed', 'sum', 'table'], 'package:caret': ['createDataPartition'], 'package:dplyr': ['bind_cols'], 'package:randomForest': ['randomForest'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'str', 'write.csv'], 'package:VIM': ['aggr']}","{""c(""package:mice"", ""package:base"")"": [""cbind""], ""package:base"": [""as.factor"", ""c"", ""colSums"", ""diag"", ""is.na"", ""levels"", ""library"", ""mean"", ""set.seed"", ""sum"", ""table""], ""package:caret"": [""createDataPartition""], ""package:dplyr"": [""bind_cols""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""], ""package:VIM"": [""aggr""]}",cpackagemice packagebase cbind packagebase asfactor c colSums diag isna levels library mean setseed sum table packagecaret createDataPartition packagedplyr bindcols packagerandomForest randomForest packagestats predict packageutils readcsv str writecsv packageVIM aggr,"library(caret)
library(dplyr)
library(VIM)
library(mice)
library(randomForest)
train <- read.csv(file = ""../input/train.csv"")
test <- read.csv(file = ""../input/test.csv"")
sub <- read.csv(file = ""../input/gender_submission.csv"")
str(train)
str(test)
train$Survived <- as.factor(train$Survived)
levels(test$Embarked) <- levels(train$Embarked)
aggr(train, numbers = TRUE)
colSums(is.na(train))
train$Age[is.na(train$Age)] <- mean(train$Age, na.rm = T)
aggr(test, numbers = TRUE)
colSums(is.na(test))
test$Age[is.na(test$Age)] <- mean(test$Age, na.rm = T)
test$Fare[is.na(test$Fare)] <- mean(test$Fare, na.rm = T)
trainInd <- createDataPartition(train$Survived, p = 0.8, list = FALSE)
train_X <- train[trainInd, ]
train_Y <- train[-trainInd, ]
set.seed(5)
RF <- randomForest(Survived ~ ., data = train_X[, -c(1, 4, 9, 11)], ntree = 2000)
pred <- predict(RF, newdata = train_Y)
pred
pred_result <- bind_cols(train_Y, pred = pred)
pred_result[, c(1, 2, 13)]
cm <- table(train_Y$Survived, pred)
accuracy <- sum(diag(cm))/sum(cm)
accuracy
set.seed(6)
Pred <- predict(RF, newdata = test)
Pred
submission <- cbind(sub, Survived = Pred)
submission <- submission[, c(1, 3)]
write.csv(submission, file = ""submission.csv"", row.names = FALSE)",1,0,1,1,0,0,0,1,0,0,0,0,0,0
347,rennocks-titanicmodel,0.7440000000000001,"['c', 'factor', 'ifelse', 'library', 'summary', 'Sys.sleep', 'confusionMatrix', 'createDataPartition', 'train', 'predict', 'read.csv', 'write.csv']","['caret', 'base']",3.69896697998047,"['factor', 'ifelse', 'confusionMatrix', 'createDataPartition', 'predict', 'write.csv', 'read.csv', 'Sys.sleep', 'summary', 'library', 'train', 'c']",[],"['rkumar3147-exploring-survival-on-the-titanic1', 'vizcharlie-exploring-survival-on-the-titanic', 'hertan-titanic-surviving-dataset-simple-expression', 'cganxs-is-62-the-right-titanic-model-threshold', 'samuelh-barebones-titanic-logistic-regression-test', 'jaimisk-titanic-survival-logistic-regression', 'danr87946-titanic-practice', 'vishaljindal0-titanic-r-code', 'djohnbar-the-titanic-using-knn', 'arjunmalhotra-titanic']","[0.34637795396909893, 0.34637795396909893, 0.3076462474405276, 0.2915113924616612, 0.2779580157837705, 0.2649340804352036, 0.2559412217499425, 0.24295174068002656, 0.24071335020812415, 0.19333249349490259]","{'package:base': ['c', 'factor', 'ifelse', 'library', 'summary', 'Sys.sleep'], 'package:caret': ['confusionMatrix', 'createDataPartition', 'train'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""c"", ""factor"", ""ifelse"", ""library"", ""summary"", ""Sys.sleep""], ""package:caret"": [""confusionMatrix"", ""createDataPartition"", ""train""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase c factor ifelse library summary Syssleep packagecaret confusionMatrix createDataPartition train packagestats predict packageutils readcsv writecsv,"df <- read.csv(""../input/train.csv"", row.names = 1, header = TRUE)
vdf <- read.csv(""../input/test.csv"", header = TRUE)
df$Pclass <- factor(df$Pclass, labels = ""class"")
vdf$Pclass <- factor(vdf$Pclass, labels = ""class"")
df$Survived <- factor(df$Survived, labels = c(""No"", ""Yes""))
summary(df[, c(""Pclass"", ""Survived"")])
library(caret)
resampledataPart <- createDataPartition(df$Survived, list = FALSE)
trainTable <- df[resampledataPart, ]
trainTable
model <- train(Survived ~ Sex, data = trainTable, method = ""glm"")
model
val <- df[-resampledataPart, ]
val_results <- predict(model, val)
val_results
cm <- confusionMatrix(val_results, val$Survived, positive = ""Yes"")
cm$byClass[[""F1""]]
cm
vdf$Survived <- predict(model, vdf, na.action = na.pass)
vdf$Survived <- ifelse(vdf$Survived == ""Yes"", 1, 0)
vdf$Survived
write.csv(vdf[, c(""PassengerId"", ""Survived"")], file = ""submission.csv"", row.names = FALSE)
Sys.sleep(1)",0,0,1,0,0,0,0,1,0,0,0,0,0,0
348,iherbert-titanic,0.7509999999999999,"['filter', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.factor', 'as.integer', 'as.numeric', 'c', 'cbind', 'ceiling', 'data.matrix', 'diag', 'factor', 'floor', 'grepl', 'ifelse', 'is.na', 'length', 'library', 'list.files', 'matrix', 'mean', 'names', 'nrow', 'paste', 'print', 'range', 'return', 'round', 'rowMeans', 'sample', 'set.seed', 'sum', 'summary', 'table', 'vector', 'which', 'train', 'trainControl', 'bind_rows', 'group_by', 'mutate', 'n', 'select', 'summarize', 'aes', 'element_text', 'geom_boxplot', 'geom_col', 'geom_histogram', 'geom_point', 'ggplot', 'labs', 'scale_x_log10', 'theme', 'plot', 'text', 'randomForest', 'read_csv', 'write_csv', 'glm', 'median', 'predict', 'separate', 'tree', 'head', 'str', 'xgb.DMatrix', 'xgb.importance', 'xgb.plot.importance', 'xgb.plot.multi.trees', 'xgboost']","['tidyverse', 'caret', 'tree', 'randomForest', 'xgboost', 'base']",2.05372095108032,"['labs', 'nrow', 'mean', 'median', 'vector', 'element_text', 'write_csv', 'which', 'tree', 'xgb.importance', 'as.character', 'theme', 'xgb.plot.importance', 'separate', 'is.na', 'glm', 'names', 'geom_boxplot', 'print', 'xgboost', 'geom_col', 'as.factor', 'range', 'filter', 'summary', 'round', 'n', 'select', 'geom_histogram', 'text', 'str', 'set.seed', 'factor', 'as.integer', 'matrix', 'data.matrix', 'summarize', 'xgb.plot.multi.trees', 'length', 'table', 'randomForest', 'return', 'xgb.DMatrix', 'scale_x_log10', 'read_csv', 'group_by', 'train', 'c', 'aes', 'diag', 'mutate', 'sample', 'paste', 'as.numeric', 'ifelse', 'sum', 'geom_point', 'plot', 'predict', 'list.files', 'bind_rows', 'grepl', 'ggplot', 'head', 'user defined', 'ceiling', 'library', 'rowMeans', 'cbind', 'trainControl', 'floor']",[],"['jacekpardyak-mytitanicscript', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic', 'turntrout-titanic-data-exploration', 'liudj2008-fork-of-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'liudj2008-titanic', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic']","[0.16400244506448589, 0.1607461029358166, 0.1607461029358166, 0.15721127285526948, 0.15543696292156617, 0.15521666179059546, 0.15521666179059546, 0.15520246185783793, 0.15480332238279979, 0.15480332238279979]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'character(0)': ['bin_namer', 'bind', 'build_models', 'get_predictions', 'test_predict'], 'package:base': ['as.character', 'as.factor', 'as.integer', 'as.numeric', 'c', 'cbind', 'ceiling', 'data.matrix', 'diag', 'factor', 'floor', 'grepl', 'ifelse', 'is.na', 'length', 'library', 'list.files', 'matrix', 'mean', 'names', 'nrow', 'paste', 'print', 'range', 'return', 'round', 'rowMeans', 'sample', 'set.seed', 'sum', 'summary', 'table', 'vector', 'which'], 'package:caret': ['train', 'trainControl'], 'package:dplyr': ['bind_rows', 'group_by', 'mutate', 'n', 'select', 'summarize'], 'package:ggplot2': ['aes', 'element_text', 'geom_boxplot', 'geom_col', 'geom_histogram', 'geom_point', 'ggplot', 'labs', 'scale_x_log10', 'theme'], 'package:graphics': ['plot', 'text'], 'package:randomForest': ['randomForest'], 'package:readr': ['read_csv', 'write_csv'], 'package:stats': ['glm', 'median', 'predict'], 'package:tidyr': ['separate'], 'package:tree': ['tree'], 'package:utils': ['head', 'str'], 'package:xgboost': ['xgb.DMatrix', 'xgb.importance', 'xgb.plot.importance', 'xgb.plot.multi.trees', 'xgboost']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""character(0)"": [""bin_namer"", ""bind"", ""build_models"", ""get_predictions"", ""test_predict""], ""package:base"": [""as.character"", ""as.factor"", ""as.integer"", ""as.numeric"", ""c"", ""cbind"", ""ceiling"", ""data.matrix"", ""diag"", ""factor"", ""floor"", ""grepl"", ""ifelse"", ""is.na"", ""length"", ""library"", ""list.files"", ""matrix"", ""mean"", ""names"", ""nrow"", ""paste"", ""print"", ""range"", ""return"", ""round"", ""rowMeans"", ""sample"", ""set.seed"", ""sum"", ""summary"", ""table"", ""vector"", ""which""], ""package:caret"": [""train"", ""trainControl""], ""package:dplyr"": [""bind_rows"", ""group_by"", ""mutate"", ""n"", ""select"", ""summarize""], ""package:ggplot2"": [""aes"", ""element_text"", ""geom_boxplot"", ""geom_col"", ""geom_histogram"", ""geom_point"", ""ggplot"", ""labs"", ""scale_x_log10"", ""theme""], ""package:graphics"": [""plot"", ""text""], ""package:randomForest"": [""randomForest""], ""package:readr"": [""read_csv"", ""write_csv""], ""package:stats"": [""glm"", ""median"", ""predict""], ""package:tidyr"": [""separate""], ""package:tree"": [""tree""], ""package:utils"": [""head"", ""str""], ""package:xgboost"": [""xgb.DMatrix"", ""xgb.importance"", ""xgb.plot.importance"", ""xgb.plot.multi.trees"", ""xgboost""]}",cpackagedplyr packagestats filter character0 binnamer bind buildmodels getpredictions testpredict packagebase ascharacter asfactor asinteger asnumeric c cbind ceiling datamatrix diag factor floor grepl ifelse isna length library listfiles matrix mean names nrow paste print range return round rowMeans sample setseed sum summary table vector which packagecaret train trainControl packagedplyr bindrows groupby mutate n select summarize packageggplot2 aes elementtext geomboxplot geomcol geomhistogram geompoint ggplot labs scalexlog10 theme packagegraphics plot text packagerandomForest randomForest packagereadr readcsv writecsv packagestats glm median predict packagetidyr separate packagetree tree packageutils head str packagexgboost xgbDMatrix xgbimportance xgbplotimportance xgbplotmultitrees xgboost,"
## Importing packages

# This R environment comes with all of CRAN and many other helpful packages preinstalled.
# You can see which packages are installed by checking out the kaggle/rstats docker image: 
# https://github.com/kaggle/docker-rstats

library(tidyverse) # metapackage with lots of helpful functions

## Running code

# In a notebook, you can run a single code cell by clicking in the cell and then hitting 
# the blue arrow to the left, or by clicking in the cell and pressing Shift+Enter. In a script, 
# you can run code by highlighting the code you want to run and then clicking the blue arrow
# at the bottom of this window.

## Reading in files

# You can access files from datasets you've added to this kernel in the ""../input/"" directory.
# You can see the files added to this kernel by running the code below. 

list.files(path = ""../input"")

## Saving data

# If you save any files or images, these will be put in the ""output"" directory. You 
# can see the output directory by committing and running your kernel (using the 
# Commit & Run button) and then checking out the compiled version of your kernel.



train <- read_csv(""../input/train.csv"")
test <-read_csv(""../input/test.csv"")
gender<-read_csv(""../input/gender_submission.csv"")

str(train)
head(train)
No_cabin<-train%>%filter(is.na(Cabin))%>%summarize(count = n())
No_cabin

useful<- train[,c(""PassengerId"", ""Survived"", ""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked"")]
head(useful)

#Generate counts for NA in each of the remaining fields
length(which(is.na(useful$Pclass)))
length(which(is.na(useful$Sex)))
length(which(is.na(useful$Age)))
length(which(is.na(useful$SibSp)))
length(which(is.na(useful$Parch)))
length(which(is.na(useful$Fare)))
length(which(is.na(useful$Embarked)))

#Find the most common embarkation point, in case it will be sensible to replace missing values with it. 
useful%>%group_by(Embarked)%>%summarize(n())

range(useful$Age, na.rm=TRUE) #it looks like there are a wide range of ages, including a baby of around 5 months
useful%>%filter(Age==0.42) #phew,the baby survived!

median(useful$Age, na.rm=TRUE)
mean(useful$Age, na.rm=TRUE)



ggplot(useful, aes(x=Age))+geom_histogram(binwidth=5)


#Replace NA is Embarked with Southampton
useful_no_na<-useful
useful_no_na$Embarked[which(is.na(useful_no_na$Embarked))]<-""S""

#Replace NA in Age with mean age of other passengers
useful_no_na$Age[which(is.na(useful_no_na$Age))]<-mean(useful_no_na$Age, na.rm=TRUE)


model1 <-glm(Survived ~ ., family = ""binomial"", data = useful_no_na)


length(which(is.na(test$Age))) #=86, which isn't great

mean(test$Age, na.rm=1) 
#but the mean is also around 30, so replacing the missing ages with the mean here doesn't make the test distribution too far from the training one

test_no_na <- test
test_no_na$Age[which(is.na(test$Age))]<-mean(test$Age, na.rm=1)


test_pred1<- predict(model1, newdata= test_no_na, type = ""response"")

#Check how many rows in the test data were missing the other fields we chose to use

length(which(is.na(test_pred1))) #looks like we're just missing data for 1 point. Let's see what it is. 


which(is.na(test_pred1))
test_no_na[153,]

class3fare<-test_no_na%>%filter(Pclass==3)%>%summarize(median(Fare, na.rm=1))
test_no_na[153,""Fare""]<- class3fare
test_no_na[153,]

test_pred1<- predict(model1, newdata= test_no_na, type = ""response"")
head(test_pred1)

submission<-test[""PassengerId""]
submission<-submission%>%mutate(Survived = as.integer(test_pred1>=0.5))
head(submission)


submission%>%filter(Survived ==1)%>%summarize(Test_survive_pct = n()/nrow(submission))

train%>%filter(Survived==1)%>%summarize(Train_survive_pct = n()/nrow(train))



submission<-submission%>%mutate(PassengerId = as.integer(PassengerId))
write_csv(submission, ""submission1.csv"")

#Look at a summary of the model we started with

summary(model1)


model2<-glm(Survived~Pclass+Sex+Age+SibSp, family = ""binomial"", data = useful_no_na)
summary(model2)

test_pred2 = predict(model2, newdata= test_no_na, type = ""response"")
head(test_pred2)


submission2<-test[""PassengerId""]
submission2<-submission2%>%mutate(PassengerId = as.integer(PassengerId))%>%mutate(Survived = as.integer(test_pred2>=0.5))
head(submission2)

submission2%>%filter(Survived==1)%>%summarize(Test_survive_pct = n()/nrow(submission2))

write_csv(submission2, ""submission2.csv"")

model3<-glm(Survived~Pclass+Sex+SibSp, family = ""binomial"", data = useful_no_na)
summary(model3)
test_pred3<-predict(model3, newdata = test_no_na, type= ""response"")
head(test_pred3)

submission3<-test[""PassengerId""]%>%mutate(PassengerId = as.integer(PassengerId))%>%mutate(Survived = as.integer(test_pred3>=0.50))
submission3%>%filter(Survived ==1)%>%summarize(Test_survive_pct = n()/nrow(submission3))
write_csv(submission3, ""submission3.csv"")

# Create new data frames with ""none"" category for unknown ages. 
useful_na_age<-useful
useful_na_age[which(is.na(useful$Age)), ""Age""]<-""none""
head(useful_na_age)

test_na_age<-test
test_na_age[which(is.na(test$Age)), ""Age""]<-""none""


#Make a new model and get its predictions
model4<-glm(Survived~Pclass +Sex+Age+SibSp, family = ""binomial"", data= useful_na_age)
summary(model4)



#test_pred4<-predict(model4, newdata = test_na_age, type = ""response"")
#head(test_pred4)

#Write a function that, for a given bin size, assigns each Age value to a bin named by the range of the bin

bin_namer <-function(x, binsize){
    midpoint<-binsize/2+(binsize*floor(x/binsize))
    boxname<-paste(as.character(binsize*floor(midpoint/binsize)),""-"", as.character(binsize*ceiling(midpoint/binsize)))
    return(boxname)
}
            
        
useful_age_bin<-useful%>%mutate(Age_bin = bin_namer(Age, 10))
       head(useful_age_bin)
test_age_bin<-test%>%mutate(Age_bin = bin_namer(Age, 10))
       head(test_age_bin)

#Check how the survival chances look by age bin

bin_groups<-useful_age_bin%>%group_by(Age_bin)%>%summarize(Percent_survived = length(which(Survived ==1))/n())
ggplot(bin_groups, aes(x=Age_bin, y=Percent_survived))+geom_col()+labs(x=""Age bin"", y=""Percentage of passengers who survived"")


#Construct the model
model4<-glm(Survived~Pclass +Sex+Age_bin+SibSp, family = ""binomial"", data= useful_age_bin)
summary(model4)

#Get the predictions
test_pred4<-predict(model4, newdata = test_age_bin, type = ""response"")
head(test_pred4)

#Prepare the submission
submission4<-test[""PassengerId""]%>%mutate(PassengerId = as.integer(PassengerId))%>%mutate(Survived = as.integer(test_pred4>=0.50))
submission4%>%filter(Survived ==1)%>%summarize(Test_survive_pct = n()/nrow(submission4))
write_csv(submission4, ""submission4.csv"")


useful_age_bin5<-useful%>%mutate(Age_bin = bin_namer(Age, 5))
       head(useful_age_bin5)
test_age_bin5<-test%>%mutate(Age_bin = bin_namer(Age, 5))
       head(test_age_bin5)


#Treat our Age_bin variable as an ordered factor
factored_age_bin5<-useful_age_bin5
ages<- c(""0 - 5"",""5 - 10"",""10 - 15"", ""15 - 20"",""20 - 25"", ""25 - 30"",""30 - 35"", ""35 - 40"", ""40 - 45"", ""45 - 50"", ""50 - 55"", ""55 - 60"", ""60 - 65"", ""65 - 70"", ""70 - 75"", ""75 - 80"", ""80 - 85"", ""NA - NA"" )
factored_age_bin5$Age_bin<-factor(useful_age_bin5$Age_bin, ordered = TRUE, levels = ages)
factored_age_bin5$Survived<-factor(factored_age_bin5$Survived, levels = c(""0"", ""1""))


test_age_bin5<-test%>%mutate(Age_bin = bin_namer(Age, 5))
       head(test_age_bin5)
test_age_bin5$Age_bin<-factor(test_age_bin5$Age_bin, ordered = TRUE, levels = ages)



bin_groups<-factored_age_bin5%>%group_by(Age_bin)%>%mutate(Percent_survived = length(which(Survived ==1))/n())%>%mutate(Bin_count = n())
ggplot(bin_groups, aes(x=Age_bin, y = Percent_survived, size = Bin_count))+geom_point()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))

test_age_bin5%>%filter(Age_bin==""75 - 80"") #See if there are such passengers

#Unfortunately, there is one. 
useful_age_bin5%>%filter(Age_bin==""70 - 75"") #We've got 6 passengers in the training set in bin 70-75, so let's try just throwing Mrs. Cavendish in that bin

which(test_age_bin5$Age_bin == ""75 - 80"")
test_age_bin5[97, ""Age_bin""]<-""70 - 75""

#Now build the model and predictions

model5<-glm(Survived~Pclass +Sex+Age_bin+SibSp, family = ""binomial"", data= useful_age_bin5)
summary(model5)

#Get predictions
test_pred5<-predict(model5, newdata = test_age_bin5, type = ""response"")

#Generate submission
submission5<-test[""PassengerId""]%>%mutate(PassengerId = as.integer(PassengerId))%>%mutate(Survived = as.integer(test_pred5>=0.50))
submission5%>%filter(Survived ==1)%>%summarize(Test_survive_pct = n()/nrow(submission5))
write_csv(submission5, ""submission5.csv"")



#Selecting Cross Validation Sets
set.seed(100)
permutation<-sample(nrow(train))
permuted_train<-train[permutation,]

#Now we've put our training set into a random order. If we just separate it into thirds, each will be randomly selected relative to the other two. 
#Then we can use each two to train a model predicting the third, and average these models together for the test.

train1<-permuted_train[1:(nrow(train)/3),]
train2<-permuted_train[((nrow(train)/3)+1):(2*nrow(train)/3),]
train3<-permuted_train[((2*nrow(train)/3)+1):nrow(train), ]
head(train3)

train12<-bind_rows(train1, train2)
train13<-bind_rows(train1, train3)
train23<-bind_rows(train2, train3)

cvmodel12<-glm(Survived~Pclass+Sex+SibSp, family = ""binomial"", data = train12)
cvmodel13<-glm(Survived~Pclass+Sex+SibSp, family = ""binomial"", data = train13)
cvmodel23<-glm(Survived~Pclass+Sex+SibSp, family = ""binomial"", data = train23)

#Make the predictions for the missing data from each model.
pred12<- predict(cvmodel12, newdata = train3, type = ""response"")
pred13<-predict(cvmodel13, newdata = train2, type = ""response"")
pred23<- predict(cvmodel23, newdata = train1, type = ""response"")

threshold<-0.6
prediction12<-ifelse(pred12>=threshold, 1, 0)
prediction13<-ifelse(pred13>=threshold, 1, 0)
prediction23<-ifelse(pred23>=threshold, 1, 0)

#Let's see how the predictions are working out
conf1<-table(train1$Survived, prediction23)
conf2<-table(train2$Survived, prediction13)
conf3<-table(train3$Survived, prediction12)

conf1
conf2
conf3

accuracy12<-sum(diag(conf3))/sum(conf3)
accuracy13<-sum(diag(conf2))/sum(conf2)
accuracy23<-sum(diag(conf1))/sum(conf1)

c(accuracy12, accuracy13, accuracy23)

test_pred12<-predict(cvmodel12, newdata=test, type=""response"")
test_pred13<-predict(cvmodel13,, newdata=test, type=""response"")
test_pred23<-predict(cvmodel23, newdata=test, type=""response"")

test_pred6<- rowMeans(cbind(test_pred12, test_pred13, test_pred23))
head(test_pred6)

submission6<-test[""PassengerId""]%>%mutate(Survived = as.integer(test_pred6>=0.5), PassengerId = as.integer(PassengerId))

submission6%>%filter(Survived ==1)%>%summarize(n()/nrow(submission6))
write_csv(submission6, ""submission6.csv"")

length(which(submission3$Survived !=submission6$Survived))

#Separate the set into pieces. We'll write actual functions to do it this time. 

separate<-function(df, n){
    pieces<-vector(""list"",n)
    rows<-nrow(df)
    width<-floor(nrow(df)/n) #if n does not evenly divide the number of rows in the dataframe, the last piece will be bigger
    for(i in 1:(n-1)){  
        pieces[[i]] <- df[(((i-1)*width)+1):(i*width),]
        }
    pieces[[n]]<-df[(((n-1)*width)+1):(nrow(df)),]

    return(pieces)   
    }

bind<-function(pieces){
    n<-length(pieces)
    clumps<-vector(""list"", n)
    for(i in (1:n)){
        clumps[[i]]<-bind_rows(pieces[c(-i)])
    }
    return(clumps)    
}



#Now we write functions to build the models from the clumps to predict the pieces.

build_models<-function(clumps){
    clump_models<-vector(""list"", length(clumps))
    for(i in (1:length(clumps))){
        clump_models[[i]]<-glm(Survived~Pclass+Sex+SibSp, family = ""binomial"", data = clumps[[i]])
    }
    return(clump_models)
}


get_predictions<-function(clump_models, pieces){
    n<- length(pieces)
    predictions<-vector(""list"", n)
    for(i in (1:n)){
        predictions[[i]]<-predict(clump_models[[i]], newdata = pieces[[i]], type = ""response"")
    
        
    }  
    return(predictions)
   
}
        
        
        

#Now we actually do the separating and modelling

#Get a random ordering of the training set
set.seed(101)
permutation<-sample(nrow(train))
permuted_train<-train[permutation,]


pieces<-separate(permuted_train,10)
clumps<-bind(pieces)
clump_models<-build_models(clumps)
predicted_chances<-get_predictions(clump_models, pieces)



threshold<- 0.5
predictions<-vector(""list"", length(predicted_chances))
for(i in (1:length(predicted_chances))){
    predictions[[i]]<-ifelse(predicted_chances[[i]]>=threshold, 1, 0)
}

conf<-vector(""list"", length(predictions))
for(i in (1:length(conf))){
    conf[[i]]<-table(pieces[[i]]$Survived, predictions[[i]])
}

accuracy<-(1:length(conf))
for(i in 1:length(conf)){
    accuracy[i]<-sum(diag(conf[[i]]))/sum(conf[[i]])
}

accuracy

#Make predictions on the test set and put them together
test_predict<-function(clump_models){
    test_pred<-vector(""list"", length(clump_models))
    for(i in 1:length(test_pred)){
        test_pred[[i]]<-predict(clump_models[[i]], newdata = test, type = ""response"")
    }
    return(test_pred)
}

test_pred<-test_predict(clump_models)
pred_matrix<-test_pred[[1]]

for(i in 2:length(test_pred)){
    pred_matrix<-cbind(pred_matrix, test_pred[[i]])
}

test_pred7<-rowMeans(pred_matrix)
head(test_pred7)

submission7<-test[""PassengerId""]%>%mutate(Survived = as.integer(test_pred7>=0.5), PassengerId = as.integer(PassengerId))

submission7%>%filter(Survived ==1)%>%summarize(n()/nrow(submission7))
write_csv(submission7, ""submission7.csv"")

head(submission7)

length(which(submission7$Survived!=submission3$Survived))


library(caret)

trainf<-train
trainf$Survived<-as.factor(trainf$Survived)
str(trainf)
loomodel<-train(Survived ~ Pclass+Sex+SibSp, method = ""glm"", data = trainf, trControl = trainControl(method = ""LOOCV""))

test_pred8<-predict(loomodel, newdata = test, type= ""raw"")
head(test_pred8)

test_pred8<-matrix(as.integer(test_pred8), ncol = 1)
test_pred8<-test_pred8 -1
head(test_pred8)
submission8<-test[""PassengerId""]%>%mutate(PassengerId = as.integer(PassengerId), Survived = test_pred8)
head(submission8)
length(which(submission8$Survived!=submission3$Survived))

write_csv(submission8, ""submission8.csv"")

train_tree<-train%>%mutate(Survived = as.factor(ifelse(Survived==1,""Survived"", ""Died"")))%>%mutate(Sex = as.factor(Sex))
train_tree$Embarked[which(is.na(train_tree$Embarked))]<-""S""
train_tree<-train_tree%>%mutate(Embarked = as.factor(Embarked))
head(train_tree)
str(train_tree)

#Let's make a box plot to see how fares are distributed in the 3 classes. 
ggplot(train%>%group_by(Pclass)%>%filter(Fare<500), aes(x=Pclass, y=Fare))+geom_boxplot()

#Build a scatterplot of fares, coloring each dot by whether that passenger survived
ggplot(train%>%filter(Fare<300), aes(x=PassengerId, y=Fare, color = Survived))+geom_point() 
#We have 3 outlier2 who paid 512-pound fares(and all survived), to keep the graph simple we'll exclude them

#First group passengers by fare, rounded to the nearest 5 and calculate the percentage chance of survival in each group
fare_groups<-train_tree%>%mutate(Rounded_fare = 5*round(Fare/5))%>%group_by(Rounded_fare)%>%mutate(Percent_survived = length(which(Survived ==""Survived""))/n() )
ggplot(fare_groups%>%group_by(Rounded_fare)%>%mutate(Fare_count = n(), Average_class = mean(Pclass))%>%filter(Fare<300), aes(x=Rounded_fare, y=Percent_survived, size = Fare_count, color =Average_class))+
geom_point()+scale_x_log10()

fare_groups%>%filter(Rounded_fare<100 & Percent_survived == 0) #It looks like this was mainly a family (with 5 children) who all died together. 
fare_groups%>%filter(Rounded_fare>100 & Percent_survived == 0) #Just an outlier, no extra informations about him

library(tree)

tree_model1<- tree(Survived ~ Pclass+Age + Sex+ Fare+SibSp, data = train_tree)
summary(tree_model1)

plot(tree_model1)
text(tree_model1, pretty = 0)

#Now prepare the test set to fit the model assumptions, and get predictions on it. 
test_tree<-test%>%mutate(Sex = as.factor(Sex), Embarked = as.factor(Embarked))
tree_pred1<-predict(tree_model1, newdata = test_tree, type = ""vector"")
head(tree_pred1)

submission12<-cbind(test[""PassengerId""], as.integer(tree_pred1[,""Survived""]>=0.5))
names(submission12)[2]<-""Survived""

submission12<-submission12%>%mutate(PassengerId = as.integer(PassengerId))
head(submission12)
write_csv(submission12, ""submission12.csv"")

#Replace missing ages with mean
train_tree_age_mean<-train_tree
train_tree_age_mean$Age[which(is.na(train_tree$Age))]<-mean(train_tree$Age, na.rm = TRUE)

#Build a new model with these data included
tree_model2<- tree(Survived ~ Pclass+Age + Sex+ Fare+SibSp, data = train_tree_age_mean)
summary(tree_model2)

plot(tree_model2)
text(tree_model2, pretty = 0)

#Tree looks good. Let's make the predictions and submit. 
tree_pred2<-predict(tree_model2, newdata = test_tree, type = ""vector"")

submission13<-cbind(test[""PassengerId""], as.integer(tree_pred2[,""Survived""]>=0.5))
names(submission13)[2]<-""Survived""

submission13<-submission13%>%mutate(PassengerId = as.integer(PassengerId))
head(submission13)
write_csv(submission13, ""submission13.csv"")

#Create a new data frame, where Age is rounded off and treated as an ordered factor, with an extra 'none' category
train_tree_age_missing<-train_tree%>%mutate(Age_bin = bin_namer(Age, 5))

#Treat our Age_bin variable as an ordered factor
ages<- c(""0 - 5"",""5 - 10"",""10 - 15"", ""15 - 20"",""20 - 25"", ""25 - 30"",""30 - 35"", ""35 - 40"", ""40 - 45"", ""45 - 50"", ""50 - 55"", ""55 - 60"", ""60 - 65"", ""65 - 70"", ""70 - 75"", ""75 - 80"", ""80 - 85"", ""NA - NA"" )

train_tree_age_missing$Age_bin<-factor(train_tree_age_missing$Age_bin, ordered = TRUE, levels = ages)

test_tree_age_missing<-test_tree%>%mutate(Age_bin = bin_namer(Age, 5))
test_tree_age_missing$Age_bin<-factor(test_tree_age_missing$Age_bin, ordered = TRUE, levels = ages)

#Build the tree model on this training set, and see how it goes.

tree_model3<- tree(Survived ~ Pclass+Age_bin + Sex+ Fare+SibSp, data = train_tree_age_missing)
summary(tree_model3)
plot(tree_model3)
text(tree_model3, pretty = 1)

tree_pred3<-predict(tree_model3, newdata = test_tree_age_missing, type = ""vector"")

submission14<-cbind(test[""PassengerId""], as.integer(tree_pred3[,""Survived""]>=0.5))
names(submission14)[2]<-""Survived""

submission14<-submission14%>%mutate(PassengerId = as.integer(PassengerId))
head(submission14)
write_csv(submission14, ""submission14.csv"")

#Make a dataframe containing just the passengers with cabins
cabins<-train%>%filter(!is.na(Cabin))
#Percent chance of survival for passengers in cabins
cabins%>%summarize(Percent_Survived = sum(Survived)/n())

train_tree_cabins<-train_tree_age_mean%>%mutate(Has_cabin = as.integer(!is.na(Cabin)), Deck = Cabin)

train_tree_cabins$Deck[grepl(""^A"", train_tree_cabins$Cabin)]<-""A""
train_tree_cabins$Deck[grepl(""^B"", train_tree_cabins$Cabin)]<-""B""
train_tree_cabins$Deck[grepl(""^C"", train_tree_cabins$Cabin)]<-""C""
train_tree_cabins$Deck[grepl(""^D"", train_tree_cabins$Cabin)]<-""D""
train_tree_cabins$Deck[grepl(""^E"", train_tree_cabins$Cabin)]<-""E""
train_tree_cabins$Deck[grepl(""^F"", train_tree_cabins$Cabin)]<-""F""
train_tree_cabins$Deck[grepl(""^G"", train_tree_cabins$Cabin)]<-""G""
train_tree_cabins$Deck[is.na(train_tree_cabins$Deck)]<-""none""
head(train_tree_cabins)

train_tree_cabins%>%group_by(Deck)%>%summarize(percent_survived = sum(Survived==""Survived"")/n())

#Turn the Deck and Has_cabin variables into factors
train_tree_cabins$Deck<-factor(train_tree_cabins$Deck, ordered = TRUE, levels = c(""none"", ""T"", ""G"", ""F"", ""E"", ""D"", ""C"", ""B"", ""A""))
train_tree_cabins$Has_cabin<-factor(train_tree_cabins$Has_cabin, ordered = TRUE, levels = c(""0"", ""1""))

#Build the model
tree_model4<- tree(Survived ~ Pclass+Age + Sex+ Fare+SibSp+Has_cabin+Deck, data = train_tree_cabins)
summary(tree_model4)
plot(tree_model4)
text(tree_model4, pretty = 0)

#Prepare the Has_cabin and Deck fields for the test set
test_tree_cabins<-test_tree%>%mutate(Has_cabin = as.integer(!is.na(Cabin)), Deck = Cabin)

test_tree_cabins$Deck[grepl(""^A"", test_tree_cabins$Cabin)]<-""A""
test_tree_cabins$Deck[grepl(""^B"", test_tree_cabins$Cabin)]<-""B""
test_tree_cabins$Deck[grepl(""^C"", test_tree_cabins$Cabin)]<-""C""
test_tree_cabins$Deck[grepl(""^D"", test_tree_cabins$Cabin)]<-""D""
test_tree_cabins$Deck[grepl(""^E"", test_tree_cabins$Cabin)]<-""E""
test_tree_cabins$Deck[grepl(""^F"", test_tree_cabins$Cabin)]<-""F""
test_tree_cabins$Deck[grepl(""^G"", test_tree_cabins$Cabin)]<-""G""
test_tree_cabins$Deck[is.na(test_tree_cabins$Deck)]<-""none""

test_tree_cabins$Deck<-factor(test_tree_cabins$Deck, ordered = TRUE, levels = c(""none"", ""T"", ""G"", ""F"", ""E"", ""D"", ""C"", ""B"", ""A""))
test_tree_cabins$Has_cabin<-factor(test_tree_cabins$Has_cabin, ordered = TRUE, levels = c(""0"", ""1""))


#Get the predictions
tree_pred4<-predict(tree_model4, newdata = test_tree_cabins, type = ""vector"")

submission15<-cbind(test[""PassengerId""], as.integer(tree_pred4[,""Survived""]>=0.5))
names(submission15)[2]<-""Survived""

submission15<-submission15%>%mutate(PassengerId = as.integer(PassengerId))
head(submission15)
write_csv(submission15, ""submission15.csv"")

library(randomForest)

#Prepare the training set by removing extraneous variables
train_tree_cabins_nona<-train_tree_cabins[,c(""PassengerId"",""Survived"", ""Pclass"",""Age"",""Sex"", ""Fare"", ""SibSp"",""Has_cabin"",""Deck"")]

#Build a random forest
rf_model<-randomForest(Survived~.-PassengerId, data=train_tree_cabins_nona)

rf_model
plot(rf_model)


#Make predictions on the test data.
#First, fill in the missing Fare and Age values in the test data
test_tree_cabins_nona<-test_tree_cabins
test_tree_cabins_nona$Fare[is.na(test_tree_cabins$Fare)]<-median(filter(test_tree_cabins, Pclass ==  3)$Fare, na.rm=TRUE)
test_tree_cabins_nona$Age[is.na(test_tree_cabins$Age)]<-mean(test_tree_cabins$Age, na.rm=TRUE)
test_tree_cabins_nona<-test_tree_cabins_nona%>%mutate(Survived = as.factor(""unknown""))
test_tree_cabins_nona<-test_tree_cabins_nona[,c(""PassengerId"", ""Survived"", ""Pclass"",""Age"",""Sex"", ""Fare"", ""SibSp"",""Has_cabin"",""Deck"")]
#Now, get the predictions
test_pred_rf<-predict(rf_model, newdata = test_tree_cabins_nona, type = ""prob"")

head(test_pred_rf)

#Prepare the submission
submission16<-cbind(test[""PassengerId""], as.integer(test_pred_rf[,""Survived""]>=0.5))
names(submission16)[2]<-""Survived""

submission16<-submission16%>%mutate(PassengerId = as.integer(PassengerId))
head(submission16)
write_csv(submission16, ""submission16.csv"")
length(which(submission15$Survived!=submission16$Survived))

#XGBOOST
library(xgboost)

#Now, prepare our data into a Dmatrix, so we can build an xgboost model on it. All the data needs to be numeric,
#and we need to remove any fields we're not planning on using. 

xgb_train<-train_tree_cabins%>%select(""Pclass"",""Age"",""Sex"", ""Fare"", ""SibSp"", ""Has_cabin"", ""Deck"")
xgb_train_labels<-train[,""Survived""]
#deck<-model.matrix(~Deck-1,xgb_train)

#Right now, Sex, Has_cabin, and Deck are all factors instead of numbers, but we can easily convert them
xgb_train<-xgb_train%>%mutate(Is_female = as.numeric(Sex==""female""), Has_cabin = as.numeric(Has_cabin)-1, Deck_number = as.numeric(Deck)-1)%>%select(-c(Sex,Deck))

#xgb_train<-cbind(xgb_train, deck)

str(xgb_train)
str(xgb_train_labels)


#Convert our dataframes to matrices, and then to a DMatrix
xgb_train_matrix <- data.matrix(xgb_train)
xgb_train_labels<-data.matrix(xgb_train_labels)
dtrain<-xgb.DMatrix(data = xgb_train_matrix, label= xgb_train_labels)

#Now build the model
modelxgb <- xgboost(data = dtrain, nround = 5, objective = ""binary:logistic"")


#Now we prepare the test data the same way, and then make predictions. 
xgb_test<-test_tree_cabins%>%select(""Pclass"",""Age"",""Sex"", ""Fare"", ""SibSp"",""Has_cabin"",""Deck"")
#test_deck<-model.matrix(~Deck-1,xgb_test)
xgb_test<-xgb_test%>%mutate(Is_female = as.numeric(Sex==""female""), Has_cabin = as.numeric(Has_cabin)-1, Deck_number = as.numeric(Deck)-1)%>%select(-c(Sex, Deck))
xgb_test$Age[which(is.na(xgb_test$Age))]<-mean(xgb_test$Age, na.rm = TRUE)
#xgb_test<-cbind(xgb_test, test_deck)
xgb_test_matrix <- data.matrix(xgb_test)
dtest<-xgb.DMatrix(data = xgb_test_matrix)

#Make predictions
test_pred_xgb<-predict(modelxgb, newdata = dtest)

#Prepare the submission
submission17<-cbind(test[""PassengerId""], as.integer(test_pred_xgb>=0.5))
names(submission17)[2]<-""Survived""

submission17<-submission17%>%mutate(PassengerId = as.integer(PassengerId))
head(submission17)
write_csv(submission17, ""submission17.csv"")


#Randomize a split into a training and crossval set
set.seed(111)
permutation<-sample(nrow(train))
xgb_train_permuted<-xgb_train_matrix[permutation,]
xgb_train_labels_permuted<-xgb_train_labels[permutation,]
head(xgb_train_permuted)

dtrain<-xgb_train_permuted[1:624,]
dcross<-xgb_train_permuted[625:891,]
dtrain_labels<-xgb_train_labels_permuted[1:624]
dcross_labels<-xgb_train_labels_permuted[625:891]

dtrain<-xgb.DMatrix(data = dtrain, label= dtrain_labels)
dcross<-xgb.DMatrix(data = dcross, label = dcross_labels)

#Now build some models
negatives<- sum(dtrain_labels == FALSE)
positives <- sum(dtrain_labels == TRUE)

modelxgb_tune1 <- xgboost(data = dtrain, nround = 11, max.depth = 6, early_stopping_rounds = 3,
                    objective = ""binary:logistic"", 
                    scale_pos_weight = negatives/positives
                         )


#Predict against our crossval set, and see how it does
cross_pred_tune1<-predict(modelxgb_tune1, newdata = dcross)
err <- mean(as.numeric(cross_pred_tune1 > 0.5) != dcross_labels)
print(paste(""test-error="", err))
print(positives)
print(negatives)

xgb.plot.multi.trees(feature_names = names(xgb_train_matrix), model = modelxgb_tune1)
importance_matrix <- xgb.importance(names(xgb_train_matrix), model = modelxgb_tune1)

xgb.plot.importance(importance_matrix)

#Make predictions
test_pred_xgb_tune1<-predict(modelxgb_tune1, newdata = dtest)
submission18<-cbind(test[""PassengerId""], as.integer(test_pred_xgb_tune1>=0.5))
names(submission18)[2]<-""Survived""

submission18<-submission18%>%mutate(PassengerId = as.integer(PassengerId))
head(submission18)
write_csv(submission18, ""submission18.csv"")

which(submission15$Survived!=submission18$Survived)",1,0,1,0,0,0,0,1,1,0,0,0,0,0
350,chemjong-titanic-survival-prediction,0.758,"['filter', 'plot', 'as.factor', 'c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'names', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'substr', 'sum', 'summary', 'bind_rows', 'dense_rank', 'desc', 'distinct', 'glimpse', 'group_by', 'mutate', 'summarise', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'theme_bw', 'hist', 'importance', 'randomForest', 'dollar_format', 'lm', 'median', 'predict', 'reorder', 'str_trim', 'read.csv', 'str', 'write.csv', 'aggr']","['randomForest', 'dplyr', 'ggplot2', 'VIM', 'stringr', 'ggthemes', 'randomForest', 'ROCR', 'mice', 'scales', 'base']",5.07981204986572,"['summarise', 'labs', 'geom_text', 'median', 'str_trim', 'coord_flip', 'glimpse', 'dense_rank', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'lm', 'as.factor', 'summary', 'filter', 'distinct', 'sapply', 'round', 'importance', 'hist', 'str', 'geom_hline', 'desc', 'set.seed', 'gsub', 'factor', 'geom_bar', 'aggr', 'read.csv', 'paste0', 'theme_bw', 'randomForest', 'group_by', 'row.names', 'c', 'aes', 'mutate', 'geom_vline', 'plot', 'sum', 'predict', 'dollar_format', 'reorder', 'write.csv', 'bind_rows', 'data.frame', 'strsplit', 'ggplot', 'geom_density', 'substr', 'library', 'facet_grid']",[],"['uvcelokesh-titanic-survivor-analysis-different-perspectives', 'skhawaja-titanic-disaster-survival-099', 'lich070192-titanic-test', 'paulocressoni-titanic-using-stepwise-linear-regression', 'arpitr-titanic-survival', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'shashank74-titanic-disaster-data-exploration-and-modelling', 'ezhilvelme-titanic-neural-network-c-4-2', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic']","[0.060812128488879034, 0.05454507598706097, 0.05074737857454468, 0.04639459313037819, 0.04502738878266737, 0.044231302435943386, 0.044231302435943386, 0.04325176941392049, 0.04309405928688533, 0.04269777210187346]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'c(""package:ROCR"", ""package:colorspace"", ""package:graphics"")': ['plot'], 'package:base': ['as.factor', 'c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'names', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'substr', 'sum', 'summary'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'distinct', 'glimpse', 'group_by', 'mutate', 'summarise'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'theme_bw'], 'package:graphics': ['hist'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['lm', 'median', 'predict', 'reorder'], 'package:stringr': ['str_trim'], 'package:utils': ['read.csv', 'str', 'write.csv'], 'package:VIM': ['aggr']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""c(""package:ROCR"", ""package:colorspace"", ""package:graphics"")"": [""plot""], ""package:base"": [""as.factor"", ""c"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""library"", ""names"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""substr"", ""sum"", ""summary""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""distinct"", ""glimpse"", ""group_by"", ""mutate"", ""summarise""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""theme_bw""], ""package:graphics"": [""hist""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""lm"", ""median"", ""predict"", ""reorder""], ""package:stringr"": [""str_trim""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""], ""package:VIM"": [""aggr""]}",cpackagedplyr packagestats filter cpackageROCR packagecolorspace packagegraphics plot packagebase asfactor c dataframe factor gsub isna library names paste0 round rownames sapply setseed strsplit substr sum summary packagedplyr bindrows denserank desc distinct glimpse groupby mutate summarise packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhline geomtext geomvline ggplot labs scalexcontinuous themebw packagegraphics hist packagerandomForest importance randomForest packagescales dollarformat packagestats lm median predict reorder packagestringr strtrim packageutils readcsv str writecsv packageVIM aggr,"library(randomForest)
library(dplyr)
library(ggplot2)
library(VIM)
library(stringr)
library(""ggthemes"")
library(""randomForest"")
library(""ROCR"")
library(""mice"")
library(""scales"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
glimpse(train)
glimpse(test)
data1 <- bind_rows(train, test)
visual_na <- aggr(data1, numbers = TRUE, labels = names(data1), cex.axis = 0.5, cex.numbers = 0.5, sortVars = T)
data1$Cabin[data1$Cabin == """"] <- NA
sum(is.na(data1$Cabin))
str(data1)
data1$Title <- gsub(""(.*,)|(\\..*)"", """", data1$Name)
data1$Title <- str_trim(data1$Title)
distinct(data1, Title)
data1$Title <- gsub(""Ms"", ""Miss"", data1$Title, ignore.case = T)
data1$Title <- gsub(""Mlle"", ""Miss"", data1$Title, ignore.case = T)
no_title <- c(""Master"", ""Don"", ""Rev"", ""Dr"", ""Mme"", ""Major"", ""Lady"", ""Sir"", ""Col"", ""Capt"", ""the Countess"", ""Jonkheer"", ""Dona"")
data1$Title[data1$Title %in% no_title] <- ""No Title""
distinct(data1, Title)
data1$Surname <- sapply(data1$Name, function(x) strsplit(x, ""[,.]"")[[1]][1])
filter(data1, is.na(Fare))
str(data1)
data1$Cabin_class <- sapply(data1$Cabin, function(x) substr(x, 1, 1)[[1]][1])
distinct(data1, Embarked)
ggplot(filter(data1, Pclass == 3 & Embarked == ""S""), aes(Fare)) + geom_density(fill = ""green"", alpha = 0.5) + scale_x_continuous(labels = dollar_format(), breaks = c(0, 10, 20, 30, 40, 50, 60, 70)) + geom_vline(aes(xintercept = median(Fare, na.rm = TRUE)), color = ""red"", linetype = ""dashed"")
data1[is.na(data1$Fare), ]
data1[is.na(data1$Fare), ]$Fare <- median(data1[data1$Pclass == 3 & data1$Embarked == ""S"", ]$Fare, na.rm = TRUE)
data1[1044, ]
sum(is.na(data1$Embarked))
glimpse(data1)
summary(as.factor(data1$Embarked))
data1[data1 == """"] <- NA
filter(data1, is.na(Embarked))
ggplot(data1, aes(Embarked, Fare)) + geom_boxplot() + geom_hline(aes(yintercept = 80), col = ""red"", linetype = ""dashed"", lwd = 0.5) + facet_grid(~Pclass) + theme_bw()
median(data1[data1$Embarked == ""C"" & data1$Pclass == 1, ]$Fare, na.rm = T)
data1[data1$PassengerId == 62 | data1$PassengerId == 830, ]$Embarked <- ""C""
data1[data1$PassengerId == 62 | data1$PassengerId == 830, ]
data1$Family_size <- data1$SibSp + data1$Parch + 1
str(data1)
data1$Sex <- as.factor(data1$Sex)
data1$Ticket <- as.factor(data1$Ticket)
data1$Title <- as.factor(data1$Title)
data1$Embarked <- as.factor(data1$Embarked)
data1$Survived <- as.factor(data1$Survived)
data1$Pclass <- as.factor(data1$Pclass)
data1$Family_size <- as.factor(data1$Family_size)
sum(is.na(data1$Age))
hist(data1$Age, na.rm = T, freq = F)
summary(data1$Age)
data1 %>% filter(Age < 0)
summary(data1)
data1 %>% filter(Fare < 5)
data1[data1$Fare < 5, ]
distinct(data1, Ticket)
ggplot(data1[1:418, ], aes(Embarked, Fare)) + geom_boxplot()
train %>% group_by(Embarked, Pclass) %>% summarise(median(Fare))
visual_na2 <- aggr(data1[892:1309, ], numbers = TRUE, labels = names(data1), cex.axis = 0.5, cex.numbers = 0.5, sortVars = T)
age_pred <- lm(Age ~ Fare + Sex + Pclass, data = data1[!is.na(data1$Age), ])
age_pred
summary(age_pred)
data1$Age[is.na(data1$Age)] <- predict(age_pred, data1)[is.na(data1$Age)]
data1$Age <- round(data1$Age)
train_data <- data1[1:891, ]
test_data <- data1[892:1309, ]
set.seed(7)
str(train_data)
model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + Family_size, data = train_data)
model$importance
plot(model)
importance <- importance(model)
VarImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rank_importance <- VarImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
rank_importance
ggplot(rank_importance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + coord_flip() + geom_text(aes(x = Variables, label = Rank, y = 5)) + labs(x = ""Variables"")
prediction <- predict(model, test_data)
summary(prediction)
solution <- data.frame(PassengerID = test_data$PassengerId, Survived = prediction)
write.csv(solution, file = ""test_solution2.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
351,scout16-titanic-disaster-in-r,0.7440000000000001,"['data.frame', 'library', 'prop.table', 'system', 'table', 'read.csv', 'write.csv']","['ggplot2', 'readr', 'base']",0.65402889251709,"['write.csv', 'prop.table', 'data.frame', 'read.csv', 'table', 'library', 'system']",[],"['jerlinraj-titanic-machine-learning-from-disaster', 'sudheer464-prediction-1-on-titanic-dataset', 'zhaotianjing-titanic', 'stevencahill-titanic-machine-learning-from-disaster', 'mihaque313-first-submission-to-titanic-problem', 'sawajid-titanic-test', 'amodi8-titanic-exploring-survival-using-machine-learning', 'tobybot11-toby-s-titanic-analysis', 'liudj2008-titanic', 'liudj2008-fork-of-titanic']","[0.7790692968764954, 0.7136901518959718, 0.6647301291186795, 0.6538601940582149, 0.6475442674129269, 0.6469218328364599, 0.5962849460949229, 0.45950420259081787, 0.4349894851680357, 0.431557972796711]","{'package:base': ['data.frame', 'library', 'prop.table', 'system', 'table'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""data.frame"", ""library"", ""prop.table"", ""system"", ""table""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase dataframe library proptable system table packageutils readcsv writecsv,"library(ggplot2)
library(readr)
system(""ls ../input"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
prop.table(table(train$Sex, train$Survived), 1)
table(test$Sex)
test$Survived <- 0
test$Survived[test$Sex == ""female""] <- 1
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = ""onlyfemale.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,0,0,0,0,0
352,rtreit-kaggle-titanic-tutorial,0.773,"['user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.factor', 'c', 'cbind', 'data.frame', 'dim', 'factor', 'ifelse', 'is.na', 'library', 'list', 'names', 'ncol', 'nrow', 'options', 'order', 'paste', 'print', 'return', 'set.seed', 'summary', 'suppressMessages', 'predict', 'head', 'write.csv']",['base'],37.1051700115204,"['nrow', 'list', 'as.character', 'is.na', 'names', 'options', 'print', 'ncol', 'as.factor', 'summary', 'set.seed', 'factor', 'dim', 'suppressMessages', 'return', 'c', 'paste', 'ifelse', 'predict', 'write.csv', 'order', 'data.frame', 'head', 'user defined', 'library', 'cbind']",[],"['emj777-decision-tree-titanic-r', 'somtom-titanic-random-icebergs', 'jonmak-identify-travel-groups-in-titanic', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'mullayilkannan-decision-tree-titanic', 'vikramatjob-exploring-survival-on-the-titanic-var2', 'liudj2008-titanic', 'danvargg-titanic-passenger-survival', 'liudj2008-fork-of-titanic', 'peggy88-titanic-data-eda-by-peggy']","[0.3984505299771275, 0.33855795290687146, 0.2672313419911298, 0.23890167256912895, 0.21101825199123292, 0.18695160612188222, 0.18121625002276306, 0.1809901217392418, 0.18058774562553212, 0.17878132018167026]","{'character(0)': ['`:=`', 'addcolumns', 'aes', 'bwplot', 'confusionMatrix', 'createDataPartition', 'dotplot', 'dummyVars', 'facet_wrap', 'fread', 'geom_bar', 'geom_density', 'geom_histogram', 'getModelInfo', 'ggplot', 'melt', 'resamples', 'train', 'trainControl'], 'package:base': ['as.character', 'as.factor', 'c', 'cbind', 'data.frame', 'dim', 'factor', 'ifelse', 'is.na', 'library', 'list', 'names', 'ncol', 'nrow', 'options', 'order', 'paste', 'print', 'return', 'set.seed', 'summary', 'suppressMessages'], 'package:stats': ['predict'], 'package:utils': ['head', 'write.csv']}","{""character(0)"": [""`:=`"", ""addcolumns"", ""aes"", ""bwplot"", ""confusionMatrix"", ""createDataPartition"", ""dotplot"", ""dummyVars"", ""facet_wrap"", ""fread"", ""geom_bar"", ""geom_density"", ""geom_histogram"", ""getModelInfo"", ""ggplot"", ""melt"", ""resamples"", ""train"", ""trainControl""], ""package:base"": [""as.character"", ""as.factor"", ""c"", ""cbind"", ""data.frame"", ""dim"", ""factor"", ""ifelse"", ""is.na"", ""library"", ""list"", ""names"", ""ncol"", ""nrow"", ""options"", ""order"", ""paste"", ""print"", ""return"", ""set.seed"", ""summary"", ""suppressMessages""], ""package:stats"": [""predict""], ""package:utils"": [""head"", ""write.csv""]}",character0  addcolumns aes bwplot confusionMatrix createDataPartition dotplot dummyVars facetwrap fread geombar geomdensity geomhistogram getModelInfo ggplot melt resamples train trainControl packagebase ascharacter asfactor c cbind dataframe dim factor ifelse isna library list names ncol nrow options order paste print return setseed summary suppressMessages packagestats predict packageutils head writecsv,"suppressMessages(library(data.table))
suppressMessages(library(tidyverse))
suppressMessages(library(caret))
train <- fread(""../input/train.csv"")
test <- fread(""../input/test.csv"")
names(train)
names(test)
head(train)
head(test)
head(train)
options(repr.plot.width = 8, repr.plot.height = 6)
options(warn = -1)
ggplot(data = melt(train), mapping = aes(x = value)) + geom_histogram(bins = 20) + facet_wrap(~variable, scales = ""free_x"")
train[, .N, by = Embarked][order(-N)]
train[, .N, by = SibSp][order(-N)]
options(repr.plot.width = 4, repr.plot.height = 3)
train[, .N, by = c(""Survived"", ""Sex"")][order(Survived, -N)]
ggplot(data = train, aes(x = Survived, fill = Sex)) + geom_bar()
options(repr.plot.width = 4, repr.plot.height = 3)
train[, .N, by = c(""Survived"", ""Pclass"")][order(Survived, -N)]
ggplot(data = train, aes(x = Survived, fill = as.character(Pclass))) + geom_bar()
ggplot(train, aes(x = Age)) + geom_density(aes(group = Survived, color = Survived))
ggplot(train, aes(x = Pclass)) + geom_density(aes(group = Survived, color = Survived))
summary(test$Age)
summary(train$Age)
ggplot(train, aes(x = Age)) + geom_histogram(binwidth = 5, aes(group = Survived, color = Survived))
addcolumns <- function(dt) {
    dt[Embarked == """", `:=`(Embarked, ""S"")]
    dt[, `:=`(Age_categories_missing, ifelse(is.na(Age), 1, 0))]
    dt[, `:=`(Age_categories_infant, ifelse(Age_categories_missing == 0 & (Age > 0 & Age < 5), 1, 0))]
    dt[, `:=`(Age_categories_child, ifelse(Age_categories_missing == 0 & (Age >= 5 & Age <= 12), 1, 0))]
    dt[, `:=`(Age_categories_teenager, ifelse(Age_categories_missing == 0 & (Age >= 12 & Age <= 18), 1, 0))]
    dt[, `:=`(Age_categories_young_adult, ifelse(Age_categories_missing == 0 & (Age >= 18 & Age <= 35), 1, 0))]
    dt[, `:=`(Age_categories_adult, ifelse(Age_categories_missing == 0 & (Age >= 35 & Age <= 60), 1, 0))]
    dt[, `:=`(Age_categories_senior, ifelse(Age_categories_missing == 0 & (Age >= 60 & Age <= 100), 1, 0))]
    dt[, `:=`(Sex_male, ifelse(Sex == ""male"", 1, 0))]
    dt[, `:=`(Sex_female, ifelse(Sex == ""female"", 1, 0))]
    dmy <- dummyVars("" ~ ."", data = dt[, c(""Embarked"")])
    trsf <- data.frame(predict(dmy, newdata = dt))
    dt <- cbind(dt, trsf)
    for (i in 1:3) {
        col <- paste(""Pclass_"", i, sep = """")
        dt[, `:=`(as.character(col), ifelse(Pclass == i, 1, 0))]
    }
    return(dt)
}
train <- addcolumns(train)
test <- addcolumns(test)
ncol(train)
ncol(test)
names(train)
names(train[, 13:27])
names(test[, 12:26])
dataset <- train[, c(2, 13:27)]
validation_index <- createDataPartition(dataset$Survived, p = 0.8, list = FALSE)
validation <- dataset[-validation_index, ]
dataset <- dataset[validation_index, ]
dim(dataset)
dataset$Survived <- factor(dataset$Survived)
dataset[, `:=`(Survived, ifelse(Survived == 1, ""YES"", ""NO""))]
validation[, `:=`(Survived, ifelse(Survived == 1, ""YES"", ""NO""))]
names(getModelInfo())
getModelInfo()$gbm$type
control <- trainControl(method = ""cv"", number = 5, classProbs = TRUE)
metric <- ""Accuracy""
set.seed(123)
modelXgbTree <- train(Survived ~ ., data = dataset, method = ""xgbTree"", trControl = control, metric = metric)
set.seed(123)
modelXgbLinear <- train(Survived ~ ., data = dataset, method = ""xgbLinear"", trControl = control, metric = metric)
set.seed(123)
modelLda <- train(Survived ~ ., data = dataset, method = ""lda"", trControl = control, metric = metric)
set.seed(123)
modelLogitBoost <- train(Survived ~ ., data = dataset, method = ""LogitBoost"", trControl = control, metric = metric)
set.seed(123)
modelavNNet <- train(Survived ~ ., data = dataset, method = ""avNNet"", trControl = control, metric = metric)
set.seed(123)
modelGbm <- train(Survived ~ ., data = dataset, method = ""gbm"", trControl = control, metric = metric)
set.seed(123)
modelRf <- train(Survived ~ ., data = dataset, method = ""rf"", trControl = control, metric = metric)
set.seed(123)
modelKnn <- train(Survived ~ ., data = dataset, method = ""knn"", trControl = control, metric = metric)
results <- resamples(list(RF = modelRf, GBM = modelGbm, LDA = modelLda, KNN = modelKnn, LB = modelLogitBoost, ANN = modelavNNet, XGBT = modelXgbTree, XGBL = modelXgbLinear))
summary(results)
bwplot(results)
dotplot(results)
lda.confusion <- predict(modelLda, newdata = validation)
confusionMatrix(data = lda.confusion, as.factor(validation$Survived))
rf.confusion <- predict(modelRf, newdata = validation)
confusionMatrix(data = rf.confusion, as.factor(validation$Survived))
gbm.confusion <- predict(modelGbm, newdata = validation)
confusionMatrix(data = gbm.confusion, as.factor(validation$Survived))
knn.confusion <- predict(modelKnn, newdata = validation)
confusionMatrix(data = knn.confusion, as.factor(validation$Survived))
print(""modelavNNet"")
ann.confusion <- predict(modelavNNet, newdata = validation)
confusionMatrix(data = ann.confusion, as.factor(validation$Survived))
print(""modelXgbLinear"")
xgbl.confusion <- predict(modelXgbLinear, newdata = validation)
confusionMatrix(data = xgbl.confusion, as.factor(validation$Survived))
print(""modelXgbTree"")
xgbt.confusion <- predict(modelXgbTree, newdata = validation)
confusionMatrix(data = xgbt.confusion, as.factor(validation$Survived))
test.set <- test[, c(12:26)]
nrow(test.set)
names(test.set)
testResult <- predict(modelXgbTree, newdata = test.set)
end.result <- data.frame(test$PassengerId, data.frame(testResult))
end.result$testResult <- ifelse(end.result$testResult == ""YES"", 1, 0)
names(end.result) <- c(""PassengerId"", ""Survived"")
end.result
write.csv(end.result, file = ""submission.csv"", row.names = FALSE)",0,0,0,0,1,0,0,0,0,0,0,0,0,0
353,haojianfeng-titanic-passenger-survival-forecast-r,0.763,"['filter', 'c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'paste0', 'rbind', 'round', 'row.names', 'sapply', 'set.seed', 'sum', 'table', 'which', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_line', 'geom_text', 'geom_vline', 'ggplot', 'ggtitle', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'mosaicplot', 'grid.arrange', 'importance', 'randomForest', 'rpart', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'rpart', 'randomForest', 'gridExtra', 'dplyr', 'base']",2.18196892738342,"['labs', 'geom_text', 'median', 'which', 'coord_flip', 'dense_rank', 'is.na', 'scale_x_continuous', 'geom_boxplot', 'theme_few', 'rpart', 'filter', 'sapply', 'round', 'geom_histogram', 'mosaicplot', 'importance', 'geom_hline', 'desc', 'set.seed', 'gsub', 'str', 'factor', 'geom_bar', 'grid.arrange', 'read.csv', 'paste0', 'table', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'rbind', 'geom_vline', 'sum', 'predict', 'reorder', 'dollar_format', 'write.csv', 'geom_line', 'ggtitle', 'data.frame', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['c34klh123-using-svm-to-predict-titanic-in-r', 'skhawaja-titanic-disaster-survival-099', 'joelweiss-titanic-data-r', 'lich070192-titanic-test', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'amodi8-titanic-exploring-survival-using-machine-learning', 'krupan-exploring-survival-on-the-titanic', 'vikramatjob-exploring-survival-on-the-titanic-var2', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic']","[0.10913623816305446, 0.07419034709796615, 0.06164802457231691, 0.05498079560839063, 0.05290049831866433, 0.046559693934045764, 0.04577810467813013, 0.04536488413382954, 0.04496699938866322, 0.04496699938866322]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'paste0', 'rbind', 'round', 'row.names', 'sapply', 'set.seed', 'sum', 'table', 'which'], 'package:dplyr': ['dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_line', 'geom_text', 'geom_vline', 'ggplot', 'ggtitle', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['mosaicplot'], 'package:gridExtra': ['grid.arrange'], 'package:randomForest': ['importance', 'randomForest'], 'package:rpart': ['rpart'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""c"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""library"", ""paste0"", ""rbind"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""sum"", ""table"", ""which""], ""package:dplyr"": [""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_line"", ""geom_text"", ""geom_vline"", ""ggplot"", ""ggtitle"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""mosaicplot""], ""package:gridExtra"": [""grid.arrange""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:rpart"": [""rpart""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase c dataframe factor gsub isna library paste0 rbind round rownames sapply setseed sum table which packagedplyr denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomline geomtext geomvline ggplot ggtitle labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics mosaicplot packagegridExtra gridarrange packagerandomForest importance randomForest packagerpart rpart packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""rpart"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
str(train)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
test$Survived <- NA
train_test <- rbind(train, test)
sapply(train_test, function(x) sum(is.na(x)))
sapply(train_test, function(x) sum(x == """"))
faremiss <- which(is.na(train_test$Fare))
train_test[faremiss, ]
Fare1 <- ggplot(train_test[train_test$Pclass == ""3"" & train_test$Embarked == ""S"" & train_test$Age >= 50, ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", led = 1) + ggtitle(""Fare1:Age considered"") + scale_x_continuous(labels = dollar_format()) + theme_few()
Fare2 <- ggplot(train_test[train_test$Pclass == ""3"" & train_test$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", led = 1) + ggtitle(""Fare2:Regardless of age"") + scale_x_continuous(labels = dollar_format()) + theme_few()
library(gridExtra)
grid.arrange(Fare1, Fare2, ncol = 2, nrow = 1)
Fare1 <- median(train_test[train_test$Pclass == ""3"" & train_test$Embarked == ""S"" & train_test$Age >= 50, ]$Fare, na.rm = TRUE)
Fare2 <- median(train_test[train_test$Pclass == ""3"" & train_test$Embarked == ""S"", ]$Fare, na.rm = TRUE)
Fare1
Fare2
train_test$Fare[faremiss] <- 8
ggplot(train_test[1:891, ], aes(x = Fare, color = factor(Survived))) + geom_line(stat = ""count"", position = ""dodge"") + theme_few()
embarkedmiss <- which(train_test$Embarked == """")
train_test[embarkedmiss, ]
library(""dplyr"")
embark_fare <- train_test %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
train_test$Embarked[c(62, 830)] <- ""C""
train_test$Embarked <- factor(train_test$Embarked)
train_test$Fsize <- train_test$SibSp + train_test$Parch + 1
ggplot(train_test[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
train_test$FsizeD[train_test$Fsize == 1] <- ""singleton""
train_test$FsizeD[train_test$Fsize < 5 & train_test$Fsize > 1] <- ""small""
train_test$FsizeD[train_test$Fsize > 4] <- ""large""
train_test$FsizeD <- factor(train_test$FsizeD)
mosaicplot(table(train_test[1:891, ]$FsizeD, train_test[1:891, ]$Survived), main = ""Family Size by Survival"", shade = TRUE)
train_test$Ptitle <- gsub(""(.*, )|(\\..*)"", """", train_test$Name)
table(train_test$Sex, train_test$Ptitle)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
train_test$Ptitle[train_test$Ptitle == ""Mlle""] <- ""Miss""
train_test$Ptitle[train_test$Ptitle == ""Ms""] <- ""Miss""
train_test$Ptitle[train_test$Ptitle == ""Mme""] <- ""Mrs""
train_test$Ptitle[train_test$Ptitle %in% rare_title] <- ""Rare Title""
train_test$Ptitle <- factor(train_test$Ptitle)
table(train_test$Sex, train_test$Ptitle)
age_model <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Ptitle + FsizeD, data = train_test[!is.na(train_test$Age), ], method = ""anova"")
train_test$Age[is.na(train_test$Age)] <- predict(age_model, train_test[is.na(train_test$Age), ])
ggplot(train_test[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
train_test$Age_group[train_test$Age <= 12] <- ""Child""
train_test$Age_group[train_test$Age > 12 & train_test$Age < 18] <- ""youth""
train_test$Age_group[train_test$Age >= 18] <- ""Adult""
train_test$Age_group <- factor(train_test$Age_group)
mosaicplot(table(train_test$Age_group, train_test$Survived), main = ""Comparison of child and adult"", color = c(""pink"", ""lightblue""))
train_test$Mother <- ""Not Mother""
train_test$Mother[train_test$Sex == ""female"" & train_test$Parch > 0 & train_test$Age > 18 & train_test$Ptitle != ""Miss""] <- ""Mother""
mosaicplot(table(train_test$Mother, train_test$Survived), main = ""Comparison of mother and non mother"", color = c(""pink"", ""lightblue""))
train_test$Mother <- factor(train_test$Mother)
train_test$Sex <- factor(train_test$Sex)
train <- train_test[1:891, ]
test <- train_test[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Sex + Ptitle + Pclass + Embarked + Age_group + Mother + Fare + FsizeD, data = train)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""gender_submission.csv"", row.names = F)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
355,xxxmatxxx-titanic-getting-started-with-randomforest,0.7440000000000001,"['filter', 'as.factor', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'system', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'head', 'read.csv', 'str', 'write.csv']","['ggplot2', 'readr', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",25.0112309455872,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'mosaicplot', 'hist', 'mice', 'geom_hline', 'desc', 'set.seed', 'gsub', 'importance', 'factor', 'colnames', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'strsplit', 'ggplot', 'geom_density', 'head', 'library', 'system']",[],"['yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'hemingwei-titanic-r-solution-from-megan-risdal', 'tetyama-trial-titanic', 'kyanyoga-exploring-survival-on-the-titanic', 'vikramatjob-exploring-survival-on-the-titanic-var1', 'mira5b-exploring-survival-on-the-titanic', 'birudvora-test-titanic', 'mohankanni-exploring-survival-on-the-titanic', 'oldflag-exploring-survival-on-the-titanic-inr-frommegan']","[0.9932647324851103, 0.9932647324851103, 0.9926384440691803, 0.9906794813717286, 0.9829521692788212, 0.9826974042763587, 0.9821739299226513, 0.9821489880704958, 0.981955441129375, 0.9817695057114503]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'system', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""system"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c colnames dataframe factor gsub isna lapply library names paste paste0 round rownames sapply setseed strsplit sum system table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip geombar geomboxplot geomdensity geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils head readcsv str writecsv,"library(""ggplot2"")
library(""readr"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
system(""ls ../input"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(train)
str(test)
str(full)
head(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
head(full)
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""Single""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""Small""
full$FsizeD[full$Fsize > 4] <- ""Large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
head(full)
full[c(62, 830), ]
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetyp = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
str(full)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
str(full)
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age:Mice Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
head(full)
str(full)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""Titanic_Solution.csv"", row.names = F)
head(solution)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
357,rafaelmdourado-hello-titanic-programmers,0.758,"['c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'mean', 'nrow', 'round', 'sample', 'set.seed', 'sum', 'summary', 'table', 'bind_rows', 'glimpse', 'group_by', 'n', 'select', 'summarise', 'aes', 'geom_bar', 'ggplot', 'importance', 'randomForest', 'predict', 'read.csv', 'write.csv']","['ggplot2', 'dplyr', 'randomForest', 'base']",1.49458193778992,"['summarise', 'nrow', 'mean', 'glimpse', 'is.na', 'summary', 'round', 'n', 'importance', 'set.seed', 'gsub', 'factor', 'geom_bar', 'read.csv', 'table', 'randomForest', 'group_by', 'c', 'aes', 'sample', 'sum', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'ggplot', 'library', 'select']",[],"['woliveira-hello-titanic', 'lucasantevere-hello-titanic', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'msantos68-exploring-survival-on-the-titanic', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'tetyama-trial-titanic', 'venkatko-titanic-survival1', 'researchbigd-titanic-forkedfrommeganscript']","[0.9989470176977518, 0.9962784720504309, 0.7244723635806872, 0.7240014154998871, 0.7230400781570169, 0.7224751821666199, 0.7224751821666199, 0.7208649888691511, 0.719422302189446, 0.7189100586024187]","{'package:base': ['c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'mean', 'nrow', 'round', 'sample', 'set.seed', 'sum', 'summary', 'table'], 'package:dplyr': ['bind_rows', 'glimpse', 'group_by', 'n', 'select', 'summarise'], 'package:ggplot2': ['aes', 'geom_bar', 'ggplot'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""c"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""library"", ""mean"", ""nrow"", ""round"", ""sample"", ""set.seed"", ""sum"", ""summary"", ""table""], ""package:dplyr"": [""bind_rows"", ""glimpse"", ""group_by"", ""n"", ""select"", ""summarise""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""ggplot""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase c dataframe factor gsub isna library mean nrow round sample setseed sum summary table packagedplyr bindrows glimpse groupby n select summarise packageggplot2 aes geombar ggplot packagerandomForest importance randomForest packagestats predict packageutils readcsv writecsv,"library(ggplot2)
library(dplyr)
library(randomForest)
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
train$isTrain <- T
test$isTrain <- F
full <- bind_rows(train, test)
glimpse(full)
summary(full)
full$isFemale <- F
full$isFemale[full$Sex == ""female""] <- T
ggplot(full[full$isTrain, ], aes(x = isFemale, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"")
full$underTen <- F
full$underTen[full$Age > 0 & full$Age < 10] <- T
ggplot(full[full$isTrain, ], aes(x = underTen, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"")
full$Fare <- round(full$Fare)
full[full$isTrain, ] %>% group_by(Survived) %>% summarise(TotalFare = sum(Fare), count = n(), Mean = mean(Fare))
full$FamilySize <- full$SibSp + full$Parch + 1
ggplot(full[full$isTrain, ], aes(x = FamilySize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"")
full$FamilySizeFactor[full$FamilySize == 1] <- ""alone""
full$FamilySizeFactor[full$FamilySize < 5 & full$FamilySize > 1] <- ""small""
full$FamilySizeFactor[full$FamilySize > 4] <- ""large""
full$FamilySizeFactor <- factor(full$FamilySizeFactor)
ggplot(full[full$isTrain, ], aes(x = Pclass, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"")
full$Pclass <- factor(full$Pclass)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full <- full %>% select(PassengerId, Survived, Title, Pclass, FamilySizeFactor, Fare, underTen, isFemale, isTrain)
full$Fare[is.na(full$Fare)] <- 14
full$Title <- factor(full$Title)
summary(full)
set.seed(42)
totalrows <- nrow(full[full$isTrain, ])
trainrows <- sample(c(T, F), totalrows, replace = T, prob = c(0.8, 0.2))
trainningSet <- full[full$isTrain, ][trainrows, ]
testingSet <- full[full$isTrain, ][!trainrows, ]
model <- randomForest(factor(Survived) ~ Title + Pclass + FamilySizeFactor + Fare + underTen + isFemale, data = trainningSet, ntree = 50)
importance(model)
predicted <- predict(model, testingSet)
glimpse(predicted)
confusion_matrix <- table(testingSet$Survived, predicted)
confusion_matrix
TP <- confusion_matrix[2, 2]
TN <- confusion_matrix[1, 1]
acc <- (TP + TN)/(nrow(testingSet))
acc
final <- predict(model, full[!full$isTrain, ])
solution <- data.frame(PassengerId = full[!full$isTrain, ]$PassengerId, Survived = final)
write.csv(solution, file = ""out.csv"", row.names = F)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
359,c34klh123-using-svm-to-predict-titanic-in-r,0.758,"['union', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'apply', 'as.character', 'as.data.frame', 'as.factor', 'as.name', 'c', 'colnames', 'data.frame', 'diag', 'dim', 'double', 'factor', 'floor', 'gsub', 'is.character', 'is.factor', 'is.integer', 'is.na', 'length', 'levels', 'library', 'list', 'max', 'ncol', 'nrow', 'order', 'prop.table', 'sample', 'sapply', 'seq', 'seq_len', 'set.seed', 'signif', 'strsplit', 'sum', 'table', 'which', 'bind_rows', 'naiveBayes', 'svm', 'tune.svm', 'aes', 'element_text', 'facet_grid', 'geom_bar', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_violin', 'geom_vline', 'ggplot', 'labs', 'position_dodge', 'scale_colour_manual', 'scale_fill_manual', 'scale_x_continuous', 'scale_y_continuous', 'theme', 'plot', 'complete', 'mice', 'randomForest', 'na.omit', 'predict', 'head', 'read.csv', 'str', 'write.csv', 'labeling_cells', 'mosaic']","['ggplot2', 'dplyr', 'e1071', 'mice', 'randomForest', 'vcd', 'base']",5.067269766330719,"['labs', 'union', 'nrow', 'list', 'complete', 'geom_text', 'element_text', 'which', 'svm', 'as.character', 'theme', 'is.na', 'levels', 'scale_x_continuous', 'ncol', 'prop.table', 'na.omit', 'as.factor', 'sapply', 'naiveBayes', 'geom_histogram', 'mice', 'str', 'geom_hline', 'seq_len', 'set.seed', 'gsub', 'scale_colour_manual', 'factor', 'colnames', 'dim', 'position_dodge', 'scale_fill_manual', 'max', 'geom_bar', 'signif', 'apply', 'is.integer', 'length', 'read.csv', 'table', 'randomForest', 'mosaic', 'is.character', 'as.data.frame', 'scale_y_continuous', 'c', 'is.factor', 'aes', 'diag', 'sample', 'geom_vline', 'sum', 'geom_violin', 'plot', 'predict', 'order', 'seq', 'bind_rows', 'facet_grid', 'data.frame', 'double', 'strsplit', 'tune.svm', 'ggplot', 'write.csv', 'head', 'labeling_cells', 'user defined', 'library', 'floor', 'as.name']",[],"['xxxmatxxx-titanic-getting-started-with-randomforest', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'tetyama-trial-titanic', 'researchbigd-titanic-forkedfrommeganscript', 'atuljjoshi05-titanic-random-forest', 'binilkuriachan-titanic-random-forest', 'oldflag-exploring-survival-on-the-titanic-inr-frommegan', 'kyanyoga-exploring-survival-on-the-titanic']","[0.5732010335391445, 0.5688336491375521, 0.5683896956466364, 0.5683896956466364, 0.5668502781281399, 0.5651466976397032, 0.5643327610662988, 0.5643327610662988, 0.5641372745325106, 0.5641066304147645]","{'c(""package:dplyr"", ""package:base"")': ['union'], 'character(0)': ['bar_function', 'grid.arrange', 'my_mosaic'], 'package:base': ['apply', 'as.character', 'as.data.frame', 'as.factor', 'as.name', 'c', 'colnames', 'data.frame', 'diag', 'dim', 'double', 'factor', 'floor', 'gsub', 'is.character', 'is.factor', 'is.integer', 'is.na', 'length', 'levels', 'library', 'list', 'max', 'ncol', 'nrow', 'order', 'prop.table', 'sample', 'sapply', 'seq', 'seq_len', 'set.seed', 'signif', 'strsplit', 'sum', 'table', 'which'], 'package:dplyr': ['bind_rows'], 'package:e1071': ['naiveBayes', 'svm', 'tune.svm'], 'package:ggplot2': ['aes', 'element_text', 'facet_grid', 'geom_bar', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_violin', 'geom_vline', 'ggplot', 'labs', 'position_dodge', 'scale_colour_manual', 'scale_fill_manual', 'scale_x_continuous', 'scale_y_continuous', 'theme'], 'package:graphics': ['plot'], 'package:mice': ['complete', 'mice'], 'package:randomForest': ['randomForest'], 'package:stats': ['na.omit', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv'], 'package:vcd': ['labeling_cells', 'mosaic']}","{""c(""package:dplyr"", ""package:base"")"": [""union""], ""character(0)"": [""bar_function"", ""grid.arrange"", ""my_mosaic""], ""package:base"": [""apply"", ""as.character"", ""as.data.frame"", ""as.factor"", ""as.name"", ""c"", ""colnames"", ""data.frame"", ""diag"", ""dim"", ""double"", ""factor"", ""floor"", ""gsub"", ""is.character"", ""is.factor"", ""is.integer"", ""is.na"", ""length"", ""levels"", ""library"", ""list"", ""max"", ""ncol"", ""nrow"", ""order"", ""prop.table"", ""sample"", ""sapply"", ""seq"", ""seq_len"", ""set.seed"", ""signif"", ""strsplit"", ""sum"", ""table"", ""which""], ""package:dplyr"": [""bind_rows""], ""package:e1071"": [""naiveBayes"", ""svm"", ""tune.svm""], ""package:ggplot2"": [""aes"", ""element_text"", ""facet_grid"", ""geom_bar"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_violin"", ""geom_vline"", ""ggplot"", ""labs"", ""position_dodge"", ""scale_colour_manual"", ""scale_fill_manual"", ""scale_x_continuous"", ""scale_y_continuous"", ""theme""], ""package:graphics"": [""plot""], ""package:mice"": [""complete"", ""mice""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""na.omit"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""], ""package:vcd"": [""labeling_cells"", ""mosaic""]}",cpackagedplyr packagebase union character0 barfunction gridarrange mymosaic packagebase apply ascharacter asdataframe asfactor asname c colnames dataframe diag dim double factor floor gsub ischaracter isfactor isinteger isna length levels library list max ncol nrow order proptable sample sapply seq seqlen setseed signif strsplit sum table which packagedplyr bindrows packagee1071 naiveBayes svm tunesvm packageggplot2 aes elementtext facetgrid geombar geomhistogram geomhline geomtext geomviolin geomvline ggplot labs positiondodge scalecolourmanual scalefillmanual scalexcontinuous scaleycontinuous theme packagegraphics plot packagemice complete mice packagerandomForest randomForest packagestats naomit predict packageutils head readcsv str writecsv packagevcd labelingcells mosaic,"library(ggplot2)
library(dplyr)
library(e1071)
library(mice)
library(randomForest)
library(vcd)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
full <- bind_rows(train, test)
head(full)
full <- full[, -c(1, 9)]
full$family <- full$SibSp + full$Parch + 1
full$Familyd[full$family == 1] <- ""single""
full$Familyd[full$family > 1 & full$family < 5] <- ""small""
full$Familyd[full$family >= 5] <- ""large""
full$Familyd <- as.factor(full$Familyd)
apply(full, 2, function(x) length(which(is.na(x))))
apply(full, 2, function(x) length(which(x == """")))
head(full$Name)
full$Name <- gsub(""(.*, )|(\\. .*)"", """", full$Name)
table(full$Name)
a_name <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Name[full$Name == ""Mlle""] <- ""Miss""
full$Name[full$Name == ""Ms""] <- ""Miss""
full$Name[full$Name == ""Mme""] <- ""Mrs""
full$Name[full$Name %in% a_name] <- ""Rare""
table(full$Name)
age_plot <- ggplot(full, aes(Age)) + geom_histogram(col = ""black"", fill = ""white"") + labs(title = ""Have NA's"")
set.seed(123)
age <- full[!is.na(full$Age), ]
age_pre <- mice(full[, -1], method = ""rf"")
mice_output <- complete(age_pre)
full$Age <- mice_output$Age
age_plot1 <- ggplot(full, aes(Age)) + geom_histogram(col = ""black"", fill = ""white"") + labs(title = ""Remove NA's"")
length(which(is.na(full$Age)))
gridExtra::grid.arrange(age_plot, age_plot1)
full[which(is.na(full$Fare)), ]$Fare <- mice_output[which(is.na(full$Fare)), ]$Fare
length(which(is.na(full$Fare)))
full$Embarked <- as.factor(full$Embarked)
embarked <- naiveBayes(Embarked ~ . - Embarked, full[, -c(1, 9)])
full[which(full$Embarked == """"), ]$Embarked <- predict(embarked, full$Embarked)[which(full$Embarked == """")]
full$Embarked <- as.factor(as.character(full$Embarked))
length(which(full$Embarked == """"))
head(full$Cabin)
length(which(full$Cabin == """"))
full$Cabin <- as.character(full$Cabin)
full$Cabin <- as.factor(sapply(full$Cabin, function(x) strsplit(x, """")[[1]][1]))
head(full$Cabin)
cabin <- full[!is.na(full$Cabin), ]
cabin0 <- full[is.na(full$Cabin), ]
for (i in 1:ncol(cabin)) {
    if (is.integer(cabin[, i])) {
        cabin[, i] <- as.factor(cabin[, i])
    }
    else if (is.character(cabin[, i])) {
        cabin[, i] <- as.factor(cabin[, i])
    }
}
for (i in 1:ncol(cabin0)) {
    if (is.integer(cabin0[, i])) {
        cabin0[, i] <- as.factor(cabin0[, i])
    }
    else if (is.character(cabin0[, i])) {
        cabin0[, i] <- as.factor(cabin0[, i])
    }
}
for (i in 1:ncol(cabin0)) {
    if (is.factor(cabin0[, i])) {
        levels(cabin0[, i]) <- union(levels(cabin0[, i]), levels(cabin[, i]))
    }
}
for (i in 1:ncol(cabin)) {
    if (is.factor(cabin[, i])) {
        levels(cabin[, i]) <- union(levels(cabin0[, i]), levels(cabin[, i]))
    }
}
set.seed(1)
ranavi0 <- randomForest::randomForest(Cabin ~ . - Cabin, na.omit(cabin[, -1]))
full[is.na(full$Cabin), ]$Cabin <- predict(ranavi0, cabin0[, -c(1, 9)])
length(which(is.na(full$Cabin)))
apply(full, 2, function(x) length(which(is.na(x))))
apply(full, 2, function(x) length(which(x == """")))
train <- full[!is.na(full$Survived), ]
test <- full[is.na(full$Survived), ]
dim(train)
head(train)
str(train)
dim(test)
head(test)
str(test)
my_mosaic <- function(file, xcolname, ycolname) {
    file <- file[, c(xcolname, ycolname)]
    cname <- c(xcolname, ycolname)
    a <- file[colnames(file) %in% cname]
    xname <- as.name(xcolname)
    yname <- as.name(ycolname)
    prob <- signif(prop.table(table(a), 1), digits = 2)
    mosaic(prob, pop = F, shade = F, legend = T, rot_lables = c(0, 90, 0, 0), labeling_args = list(set_varnames = c(xname = xcolname, yname = ycolname)), main = ""Survived Rate"")
    labeling_cells(text = prob, margin = 0)(prob)
}
bar_function <- function(x) {
    a <- as.data.frame(table(train[, x], factor(train[, ""Survived""])))
    ggplot(a, aes(Var1, Freq, fill = Var2)) + geom_bar(stat = ""identity"", position = ""dodge"") + geom_text(aes(x = Var1, y = Freq, label = Freq), position = position_dodge(width = 0.8), vjust = -0.2) + labs(x = x, y = ""Freq"", fill = ""Survived"")
}
bar_function(""Pclass"")
my_mosaic(train, ""Pclass"", ""Survived"")
bar_function(""Sex"")
my_mosaic(train, ""Sex"", ""Survived"")
bar_function(""Name"")
my_mosaic(train, ""Name"", ""Survived"")
ggplot(train, aes(as.factor(Survived), Age)) + geom_violin(aes(fill = Survived)) + labs(x = ""Survived"") + geom_hline(aes(yintercept = 10), lty = 2, lwd = 1, col = ""red"") + scale_y_continuous(breaks = seq(0, 80, 10)) + theme(legend.position = ""none"")
bar_function(""family"")
my_mosaic(train, ""Familyd"", ""Survived"")
ggplot(train, aes(as.factor(Survived), Fare)) + geom_violin(aes(fill = Survived)) + labs(x = ""Survived"") + geom_hline(aes(yintercept = max(train[train$Survived == 0, ]$Fare)), lty = 2, lwd = 1, col = ""red"") + scale_y_continuous(breaks = c(seq(0, 200, 100), max(train[train$Survived == 0, ]$Fare), seq(300, 500, 100))) + theme(legend.position = ""none"")
ggplot(train, aes(Fare)) + geom_histogram(data = train[train$Survived == 0, ], aes(fill = ""red""), colour = ""red"", binwidth = 20, alpha = 0.3) + geom_histogram(data = train[train$Survived == 1, ], aes(fill = ""blue""), colour = ""blue"", binwidth = 20, alpha = 0.3) + geom_vline(aes(xintercept = 50), lty = 2, lwd = 0.5) + scale_colour_manual(name = ""Survived"", values = c(red = ""red"", blue = ""blue""), labels = c(red = 0, blue = 1)) + scale_fill_manual(name = ""Survived"", values = c(red = ""red"", blue = ""blue""), 
    labels = c(red = 0, blue = 1)) + scale_x_continuous(breaks = c(0, 50, seq(100, 500, 100))) + labs(title = ""Fare by Embarked & Survived"") + theme(plot.title = element_text(hjust = 0.5)) + facet_grid(. ~ Embarked)
full$Survived <- as.factor(full$Survived)
for (i in c(1, 2, 3, 6, 7, 10)) {
    if (is.integer(full[, i])) {
        full[, i] <- as.factor(full[, i])
    }
    else if (is.character(full[, i])) {
        full[, i] <- as.factor(full[, i])
    }
}
levels(full$Pclass) <- seq(-1, 1, length.out = length(levels(full$Pclass)))
levels(full$Sex) <- seq(-1, 1, length.out = length(levels(full$Sex)))
levels(full$SibSp) <- seq(-1, 1, length.out = length(levels(full$SibSp)))
levels(full$Parch) <- seq(-1, 1, length.out = length(levels(full$Parch)))
levels(full$Cabin) <- seq(-1, 1, length.out = length(levels(full$Cabin)))
levels(full$Embarked) <- seq(-1, 1, length.out = length(levels(full$Embarked)))
levels(full$Name) <- seq(-1, 1, length.out = length(levels(full$Name)))
levels(full$Familyd) <- seq(-1, 1, length.out = length(levels(full$Familyd)))
train <- full[!is.na(full$Survived), ]
test <- full[is.na(full$Survived), ]
dim(train)
dim(test)
head(train)
set.seed(123)
train_train <- train[sample(seq_len(nrow(train)), floor(0.8 * nrow(train))), ]
set.seed(123)
train_test <- train[-sample(seq_len(nrow(train)), floor(0.8 * nrow(train))), ]
svm_test <- tune.svm(Survived ~ . - Survived, data = train_train, gamma = 2^c(-5:5), cost = 2^c(-5:5))
plot(svm_test)
d <- double(nrow(svm_test$performances))
for (i in 1:nrow(svm_test$performances)) {
    b_svm <- svm(Survived ~ . - Survived, train_train, gamma = svm_test$performances[i, 1], cost = svm_test$performances[i, 2], type = ""C-classification"")
    b <- table(train_test[, 1], predict(b_svm, train_test[, -1]))
    d[i] <- sum(diag(b))/sum(b)
}
e <- data.frame(gamma = svm_test$performances[1], cost = svm_test$performances[2], error = svm_test$performances[3], dispersion = svm_test$performances[4], accrancy = d)
e <- e[order(e$acc, decreasing = T), ]
head(e, 10)
svm_test1 <- tune.svm(Survived ~ . - Survived, data = train_train, gamma = seq(0, 1, 0.05), cost = seq(0.05, 4, 0.25))
plot(svm_test1)
d1 <- double(nrow(svm_test1$performances))
for (i in 1:nrow(svm_test1$performances)) {
    b_svm1 <- svm(Survived ~ . - Survived, train_train, gamma = svm_test1$performances[i, 1], cost = svm_test1$performances[i, 2], type = ""C-classification"")
    b1 <- table(train_test[, 1], predict(b_svm1, train_test[, -1]))
    d1[i] <- sum(diag(b1))/sum(b1)
}
e1 <- data.frame(gamma = svm_test1$performances[1], cost = svm_test1$performances[2], error = svm_test1$performances[3], dispersion = svm_test1$performances[4], accrancy = d1)
e1 <- e1[order(e1$acc, decreasing = T), ]
head(e1, 10)
final <- svm(Survived ~ . - Survived, train, gamma = 0.05, cost = 1.8, type = ""C-classification"")
Survived <- predict(final, test[, -1])
solution <- data.frame(PassengerId = 892:1309, Survived = Survived)
write.csv(solution, file = ""svm_predicton.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,1,0,0
361,kyanyoga-exploring-survival-on-the-titanic,0.7440000000000001,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'head', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",28.0753087997437,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'head', 'library', 'facet_grid']",[],"['rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic', 'datascikrid-exploring-survival-on-the-titanic', 'anishmayaramka-the-titanic-datset', 'aturner-exploring-survival-on-the-titanic']","[0.9998880450505403, 0.9998880450505403, 0.9998880450505403, 0.9998880450505403, 0.9998880450505403, 0.9998880450505403, 0.9998880450505403, 0.9998880450505403, 0.9998880450505403, 0.9998880450505403]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils head readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
head(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
362,kapillehar-titanic-rf-prediction-0-81818,0.763,"['user defined', 'user defined', 'user defined', 'apply', 'as.integer', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'list', 'mean', 'paste0', 'print', 'rep', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'suppressMessages', 'table', 'tapply', 'legend', 'mosaicplot', 'plot', 'hcl', 'importance', 'randomForest', 'varImpPlot', 'aggregate', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['randomForest', 'base']",4.09236717224121,"['list', 'mean', 'median', 'hcl', 'is.na', 'print', 'summary', 'sapply', 'round', 'rep', 'mosaicplot', 'importance', 'varImpPlot', 'str', 'set.seed', 'gsub', 'factor', 'colnames', 'as.integer', 'aggregate', 'apply', 'read.csv', 'paste0', 'suppressMessages', 'table', 'randomForest', 'row.names', 'c', 'reorder', 'sum', 'plot', 'legend', 'predict', 'write.csv', 'data.frame', 'strsplit', 'tapply', 'user defined', 'library']",[],"['ashutoshds-titanic-rf-prediction-0-81818', 'delasupreme-titanic-data-analysis-rf-prediction-0-81818', 'pranaytiwari-titanic-data-analysis-rf-prediction-0-81818', 'imendoza-titanic-rf-prediction', 'jenioai-titanic-data-analysis-rf-prediction-0-81818', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'bonesaw98616-exploring-survival-on-the-titanic', 'researchbigd-titanic-forkedfrommeganscript']","[0.9678754236259707, 0.8536099705038702, 0.8536099705038702, 0.8536099705038702, 0.8185926607440859, 0.7758393971897247, 0.775221643855743, 0.775221643855743, 0.7689720648457626, 0.7686534699264339]","{'character(0)': ['aes', 'bind_rows', 'coord_flip', 'dense_rank', 'desc', 'dollar_format', 'element_blank', 'facet_grid', 'facet_wrap', 'geom_bar', 'geom_density', 'geom_histogram', 'geom_jitter', 'geom_text', 'geom_vline', 'ggplot', 'ggtitle', 'labs', 'mutate', 'scale_fill_discrete', 'scale_x_continuous', 'theme', 'theme_few', 'xlab', 'ylab'], 'package:base': ['apply', 'as.integer', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'list', 'mean', 'paste0', 'print', 'rep', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'summary', 'suppressMessages', 'table', 'tapply'], 'package:graphics': ['legend', 'mosaicplot', 'plot'], 'package:grDevices': ['hcl'], 'package:randomForest': ['importance', 'randomForest', 'varImpPlot'], 'package:stats': ['aggregate', 'median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""character(0)"": [""aes"", ""bind_rows"", ""coord_flip"", ""dense_rank"", ""desc"", ""dollar_format"", ""element_blank"", ""facet_grid"", ""facet_wrap"", ""geom_bar"", ""geom_density"", ""geom_histogram"", ""geom_jitter"", ""geom_text"", ""geom_vline"", ""ggplot"", ""ggtitle"", ""labs"", ""mutate"", ""scale_fill_discrete"", ""scale_x_continuous"", ""theme"", ""theme_few"", ""xlab"", ""ylab""], ""package:base"": [""apply"", ""as.integer"", ""c"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""library"", ""list"", ""mean"", ""paste0"", ""print"", ""rep"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""summary"", ""suppressMessages"", ""table"", ""tapply""], ""package:graphics"": [""legend"", ""mosaicplot"", ""plot""], ""package:grDevices"": [""hcl""], ""package:randomForest"": [""importance"", ""randomForest"", ""varImpPlot""], ""package:stats"": [""aggregate"", ""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",character0 aes bindrows coordflip denserank desc dollarformat elementblank facetgrid facetwrap geombar geomdensity geomhistogram geomjitter geomtext geomvline ggplot ggtitle labs mutate scalefilldiscrete scalexcontinuous theme themefew xlab ylab packagebase apply asinteger c colnames dataframe factor gsub isna library list mean paste0 print rep round rownames sapply setseed strsplit sum summary suppressMessages table tapply packagegraphics legend mosaicplot plot packagegrDevices hcl packagerandomForest importance randomForest varImpPlot packagestats aggregate median predict reorder packageutils readcsv str writecsv,"suppressMessages(library(""ggplot2""))
suppressMessages(library(""ggthemes""))
suppressMessages(library(""scales""))
suppressMessages(library(""dplyr""))
suppressMessages(library(""randomForest""))
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
summary(full)
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram(bins = 30) + theme_few() + xlab(""Age"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Age vs Survived"")
ggplot(full[1:891, ], aes(Sex, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + theme_few() + xlab(""Sex"") + ylab(""Count"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Sex vs Survived"")
tapply(full[1:891, ]$Survived, full[1:891, ]$Sex, mean)
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram(bins = 30) + theme_few() + xlab(""Age"") + ylab(""Count"") + facet_grid(. ~ Sex) + scale_fill_discrete(name = ""Survived"") + theme_few() + ggtitle(""Age vs Sex vs Survived"")
tapply(full[1:891, ]$Survived, full[1:891, ]$Pclass, mean)
ggplot(full[1:891, ], aes(Pclass, fill = factor(Survived))) + geom_bar(stat = ""count"") + theme_few() + xlab(""Pclass"") + facet_grid(. ~ Sex) + ylab(""Count"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Pclass vs Sex vs Survived"")
ggplot(full[1:891, ], aes(x = Age, y = Sex)) + geom_jitter(aes(colour = factor(Survived))) + theme_few() + theme(legend.title = element_blank()) + facet_wrap(~Pclass) + labs(x = ""Age"", y = ""Sex"", title = ""Pclass vs Sex vs Age vs Survived"") + scale_fill_discrete(name = ""Survived"") + scale_x_continuous(name = ""Age"", limits = c(0, 81))
ggplot(full[1:891, ], aes(x = Fare, y = Pclass)) + geom_jitter(aes(colour = factor(Survived))) + theme_few() + theme(legend.title = element_blank()) + labs(x = ""Age"", y = ""Pclass"", title = ""Fare vs Pclass"") + scale_fill_discrete(name = ""Survived"") + scale_x_continuous(name = ""Fare"", limits = c(0, 270), breaks = c(0, 40, 80, 120, 160, 200, 240, 280))
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
officer <- c(""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"")
royalty <- c(""Dona"", ""Lady"", ""the Countess"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% royalty] <- ""Royalty""
full$Title[full$Title %in% officer] <- ""Officer""
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
ggplot(full[1:891, ], aes(Title, fill = factor(Survived))) + geom_bar(stat = ""count"") + xlab(""Title"") + ylab(""Count"") + scale_fill_discrete(name = "" Survived"") + ggtitle(""Title vs Survived"") + theme_few()
tapply(full[1:891, ]$Survived, full[1:891, ]$Title, mean)
full$Fsize <- full$SibSp + full$Parch + 1
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + xlab(""Family Size"") + ylab(""Count"") + theme_few() + scale_fill_discrete(name = ""Survived"") + ggtitle(""Family Size vs Survived"")
tapply(full[1:891, ]$Survived, full[1:891, ]$Fsize, mean)
full$FsizeD[full$Fsize == 1] <- ""Alone""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""Small""
full$FsizeD[full$Fsize > 4] <- ""Big""
tapply(full[1:891, ]$Survived, full[1:891, ]$FsizeD, mean)
mosaicplot(table(full$FsizeD, full$Survived), main = ""FsizeD vs Survived"", ylab = ""Survived"", xlab = ""FsizeD"", col = hcl(c(50, 120)), )
tapply(full$Embarked, full$Pclass, median, na.rm = TRUE)
full[c(62, 830), ""Embarked""]
full$Embarked[c(62, 830)] <- ""S""
ggplot(full[1:891, ], aes(Pclass, fill = factor(Survived))) + geom_bar(stat = ""count"") + theme_few() + xlab(""Pclass"") + ylab(""Count"") + facet_wrap(~Embarked) + scale_fill_discrete(name = ""Survived"") + ggtitle(""Embarked vs Pclass vs Survived"")
full[1044, ]
ggplot(full[full$Pclass == ""3"", ], aes(x = Fare)) + geom_density(fill = ""lightgrey"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""darkred"", linetype = ""dashed"", lwd = 1) + xlab(""Fare"") + ggtitle(""Pclass = 3"") + ylab(""Density"") + scale_x_continuous(labels = dollar_format()) + theme_few()
tapply(full$Fare, full$Pclass, median, na.rm = TRUE)
full$Fare[1044] <- median(full[full$Pclass == ""3"", ]$Fare, na.rm = TRUE)
tapply(full$Age, full$Pclass, median, na.rm = TRUE)
tapply(full$Age, full$Title, median, na.rm = TRUE)
title.age <- aggregate(full$Age, by = list(full$Title), FUN = function(x) median(x, na.rm = T))
full[is.na(full$Age), ""Age""] <- apply(full[is.na(full$Age), ], 1, function(x) title.age[title.age[, 1] == x[""Title""], 2])
sum(is.na(full$Age))
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
ggplot(full[1:891, ][full[1:891, ]$Child == ""Child"", ], aes(Sex, fill = factor(Survived))) + geom_bar(stat = ""count"") + xlab(""Sex"") + ylab(""Count"") + facet_wrap(~Pclass) + scale_fill_discrete(name = ""Survived"") + ggtitle(""Child vs Sex vs Pclass vs Survived"") + theme_few()
tapply(full[1:891, ]$Survived, full[1:891, ]$Child, mean)
table(full$Child, full$Survived)
full$Child <- factor(full$Child)
full$Sex <- factor(full$Sex)
full$Embarked <- factor(full$Embarked)
full$Title <- factor(full$Title)
full$Pclass <- factor(full$Pclass)
full$FsizeD <- factor(full$FsizeD)
full1 <- full[, -9]
full_mod <- full1[, -10]
train <- full_mod[1:891, ]
test <- full_mod[892:1309, ]
library(""randomForest"")
set.seed(123)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Fare + Embarked + Title + FsizeD + Child, data = train)
rf.fitted = predict(rf_model)
ans_rf = rep(NA, 891)
for (i in 1:891) {
    ans_rf[i] = as.integer(rf.fitted[[i]]) - 1
}
table(ans_rf)
print(rf_model)
mean(ans_rf == train$Survived)
varImpPlot(rf_model, main = ""RF_MODEL"")
train <- full_mod[1:580, ]
valid <- full_mod[581:891, ]
test <- full_mod[892:1309, ]
set.seed(123)
rf_model_train <- randomForest(factor(Survived) ~ Pclass + Sex + Fare + Embarked + Title + FsizeD + Child, data = train)
rf_model_train.fitted = predict(rf_model_train)
ans_rf_train = rep(NA, 580)
for (i in 1:580) {
    ans_rf_train[i] = as.integer(rf_model_train.fitted[[i]]) - 1
}
table(ans_rf_train)
print(rf_model_train)
mean(ans_rf_train == train$Survived)
set.seed(123)
rf_model_val <- randomForest(factor(Survived) ~ Pclass + Sex + Fare + Embarked + Title + FsizeD + Child, data = valid)
rf_model_val.fitted = predict(rf_model_val)
ans_rf_val = rep(NA, 311)
for (i in 1:311) {
    ans_rf_val[i] = as.integer(rf_model_val.fitted[[i]]) - 1
}
table(ans_rf_val)
print(rf_model_val)
mean(ans_rf_val == valid$Survived)
prediction <- predict(rf_model, test)
solution <- data.frame(Survived = prediction, PassengerID = test$PassengerId)
write.csv(solution, file = ""rf_model_sol.csv"", row.names = F)
plot(rf_model, ylim = c(0, 0.36), main = ""RF_MODEL"")
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()",1,0,0,0,0,0,0,0,0,0,0,0,0,0
363,libra202ma-exploring-survival-on-the-titanic,0.7440000000000001,"['filter', 'as.factor', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'lapply', 'library', 'names', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'legend', 'mosaicplot', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",28.290195941925006,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'dense_rank', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'mosaicplot', 'mice', 'geom_hline', 'desc', 'set.seed', 'gsub', 'importance', 'factor', 'colnames', 'geom_bar', 'read.csv', 'paste0', 'table', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'plot', 'predict', 'legend', 'dollar_format', 'reorder', 'write.csv', 'bind_rows', 'data.frame', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'tetyama-trial-titanic', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'vikramatjob-exploring-survival-on-the-titanic-var1', 'mira5b-exploring-survival-on-the-titanic', 'mohankanni-exploring-survival-on-the-titanic', 'bonesaw98616-exploring-survival-on-the-titanic', 'kyanyoga-exploring-survival-on-the-titanic']","[0.9798072441731005, 0.9791312920649177, 0.9791312920649177, 0.9766873102216462, 0.9717430353520088, 0.9695623558663624, 0.9683092348172531, 0.9679665898611194, 0.9679544127937112, 0.967933419708816]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'colnames', 'data.frame', 'factor', 'gsub', 'lapply', 'library', 'names', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['legend', 'mosaicplot', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""lapply"", ""library"", ""names"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""legend"", ""mosaicplot"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c colnames dataframe factor gsub lapply library names paste paste0 round rownames sapply setseed strsplit table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics legend mosaicplot plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv writecsv,"library(ggplot2)
library(ggthemes)
library(scales)
library(dplyr)
library(mice)
library(randomForest)
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Capt"", ""Col"", ""Don"", ""Dona"", ""Dr"", ""Jonkheer"", ""Lady"", ""Major"", ""Rev"", ""Sir"", ""the Countess"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = """")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Suvival"", shade = TRUE)
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mince_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mince_mod
mince_output <- complete(mince_mod)
full$Age <- mince_output$Age
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
rf_model
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
importance
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
rankImportance
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
365,birger-titanic-competition-score-0-8134,0.7609999999999999,"['user defined', 'user defined', 'user defined', 'as.character', 'as.factor', 'c', 'data.frame', 'factor', 'gsub', 'ifelse', 'is.na', 'lapply', 'library', 'names', 'nchar', 'paste', 'paste0', 'print', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'subset', 'sum', 'summary', 'suppressMessages', 'table', 'within', 'hist', 'mosaicplot', 'par', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']",['base'],6.3418710231781,"['median', 'lapply', 'nchar', 'as.character', 'is.na', 'subset', 'names', 'print', 'as.factor', 'summary', 'sapply', 'round', 'mosaicplot', 'hist', 'str', 'set.seed', 'gsub', 'factor', 'within', 'read.csv', 'paste0', 'suppressMessages', 'table', 'par', 'row.names', 'c', 'paste', 'ifelse', 'sum', 'predict', 'reorder', 'write.csv', 'data.frame', 'strsplit', 'user defined', 'library']",[],"['hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'tetyama-trial-titanic', 'atuljjoshi05-titanic-random-forest', 'binilkuriachan-titanic-random-forest', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'mira5b-exploring-survival-on-the-titanic', 'mohankanni-exploring-survival-on-the-titanic', 'kyanyoga-exploring-survival-on-the-titanic']","[0.9439456131982054, 0.9431612406894876, 0.9431612406894876, 0.9416285090406548, 0.9412699980486977, 0.9412699980486977, 0.9401817610944415, 0.9338304057643566, 0.9334972544891672, 0.933272760889766]","{'character(0)': ['aes', 'bind_rows', 'complete', 'coord_flip', 'dense_rank', 'desc', 'dollar_format', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'importance', 'labs', 'md.pattern', 'mice', 'mutate', 'randomForest', 'scale_x_continuous', 'scale_y_continuous', 'theme_few'], 'package:base': ['as.character', 'as.factor', 'c', 'data.frame', 'factor', 'gsub', 'ifelse', 'is.na', 'lapply', 'library', 'names', 'nchar', 'paste', 'paste0', 'print', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'subset', 'sum', 'summary', 'suppressMessages', 'table', 'within'], 'package:graphics': ['hist', 'mosaicplot', 'par'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""character(0)"": [""aes"", ""bind_rows"", ""complete"", ""coord_flip"", ""dense_rank"", ""desc"", ""dollar_format"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""importance"", ""labs"", ""md.pattern"", ""mice"", ""mutate"", ""randomForest"", ""scale_x_continuous"", ""scale_y_continuous"", ""theme_few""], ""package:base"": [""as.character"", ""as.factor"", ""c"", ""data.frame"", ""factor"", ""gsub"", ""ifelse"", ""is.na"", ""lapply"", ""library"", ""names"", ""nchar"", ""paste"", ""paste0"", ""print"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""subset"", ""sum"", ""summary"", ""suppressMessages"", ""table"", ""within""], ""package:graphics"": [""hist"", ""mosaicplot"", ""par""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",character0 aes bindrows complete coordflip denserank desc dollarformat facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot importance labs mdpattern mice mutate randomForest scalexcontinuous scaleycontinuous themefew packagebase ascharacter asfactor c dataframe factor gsub ifelse isna lapply library names nchar paste paste0 print round rownames sapply setseed strsplit subset sum summary suppressMessages table within packagegraphics hist mosaicplot par packagestats median predict reorder packageutils readcsv str writecsv,"suppressMessages(library(""ggplot2""))
suppressMessages(library(""ggthemes""))
suppressMessages(library(""scales""))
suppressMessages(library(""dplyr""))
suppressMessages(library(""mice""))
suppressMessages(library(""randomForest""))
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full[full == """"] <- NA
sapply(full, function(x) sum(is.na(x)))
full$Title <- gsub("".*, ([^.]*)\\..*"", ""\\1"", full$Name)
table(full$Title, full$Survived)
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
officer <- c(""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"")
royalty <- c(""Dona"", ""Lady"", ""the Countess"", ""Sir"", ""Jonkheer"")
full$Title[full$Title %in% officer] <- ""officer""
full$Title[full$Title %in% royalty] <- ""royalty""
table(full$Sex, full$Title)
full$Surname <- gsub(""([^,]*),.*"", ""\\1"", full$Name)
str(factor(full$Surname))
full$Deck <- sapply(as.character(full$Cabin), function(x) strsplit(x, NULL)[[1]][1])
full <- within(full, Deck <- ifelse(is.na(Deck), ""U"", Deck))
full$Deck[full$Deck == ""A"" | full$Deck == ""B""] <- ""upper_deck""
full$Deck[full$Deck == ""C"" | full$Deck == ""D""] <- ""middle_deck""
full$Deck[full$Deck == ""E"" | full$Deck == ""F"" | full$Deck == ""G"" | full$Deck == ""T""] <- ""lower_deck""
full$Deck <- factor(full$Deck)
print(summary(full$Deck))
full$Fsize <- full$SibSp + full$Parch + 1
cabins <- full$Cabin
n_occur <- data.frame(table(Var1 = cabins))
n_occur <- subset(n_occur, nchar(as.character(Var1)) > 1)
sharedCabins <- n_occur$Var1[n_occur$Freq > 1]
sharedInd <- full$Fsize == 1 & full$Cabin %in% sharedCabins
full$Fsize[sharedInd] <- 2
full$Family <- paste(full$Surname, full$FsizeAdj, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
str(factor(full$Embarked))
full$PassengerId[full$Embarked == """"]
full$Pclass[full$Embarked == """"]
ggplot(full, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
str(factor(full$Fare))
full$PassengerId[is.na(full$Fare) == TRUE]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Title) + theme_few()
sum(is.na(full$Age))
sum(is.na(full$Age[full$Title == ""Master""]))
summary(full$Age[full$Title == ""Master""])
full$Age[is.na(full$Age) & full$Title == ""Master""] <- 4
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Deck"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"", ""Deck"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Title) + theme_few()
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Fare + Embarked + Title + FsizeD + Child, data = train)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
rf_prediction <- predict(rf_model, test)
rf_solution <- data.frame(PassengerID = test$PassengerId, Survived = rf_prediction)
write.csv(rf_solution, file = ""Titanic_rf_Solution.csv"", row.names = F)",0,0,0,0,1,0,0,0,0,0,0,0,0,0
366,diegosiebra-rf-titanic-prediction-th3one,0.7609999999999999,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'apply', 'as.character', 'as.factor', 'c', 'data.frame', 'grep', 'is.na', 'length', 'library', 'return', 'row.names', 'set.seed', 'aes', 'element_text', 'geom_bar', 'ggplot', 'ggsave', 'ggtitle', 'theme', 'theme_bw', 'xlab', 'ylab', 'ylim', 'importance', 'randomForest', 'median', 'predict', 'reorder', 'read.csv', 'write.csv']","['ggplot2', 'randomForest', 'base']",1.58213996887207,"['median', 'element_text', 'grep', 'as.character', 'theme', 'is.na', 'ggsave', 'as.factor', 'importance', 'set.seed', 'xlab', 'geom_bar', 'apply', 'length', 'read.csv', 'theme_bw', 'randomForest', 'return', 'row.names', 'c', 'aes', 'ylab', 'reorder', 'predict', 'write.csv', 'ggtitle', 'data.frame', 'ggplot', 'user defined', 'library', 'ylim']",[],"['francoisolivier-titanic-20', 'areebaatif-titanic', 'zhxiangxyang-titanic', 'johno883-john-orr-titanic-random-forest', 'econdata-machine-learning-on-titanic-dataset', 'yinpatt-patrick-s-titanic', 'fredman-titanic-barebones-benchmark-r', 'francoisolivier-fork-of-titanic-20', 'panda1023-svm-example-for-titanic', 'manskj-machine-learning-and-titanic']","[0.8829555809809544, 0.8829555809809544, 0.8829555809809544, 0.8827054077321027, 0.878038418583065, 0.8136239118940944, 0.8101306221358483, 0.8085490730549473, 0.7512111429324929, 0.5635396466754626]","{'character(0)': ['extractFeatures'], 'package:base': ['apply', 'as.character', 'as.factor', 'c', 'data.frame', 'grep', 'is.na', 'length', 'library', 'return', 'row.names', 'set.seed'], 'package:ggplot2': ['aes', 'element_text', 'geom_bar', 'ggplot', 'ggsave', 'ggtitle', 'theme', 'theme_bw', 'xlab', 'ylab', 'ylim'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""extractFeatures""], ""package:base"": [""apply"", ""as.character"", ""as.factor"", ""c"", ""data.frame"", ""grep"", ""is.na"", ""length"", ""library"", ""return"", ""row.names"", ""set.seed""], ""package:ggplot2"": [""aes"", ""element_text"", ""geom_bar"", ""ggplot"", ""ggsave"", ""ggtitle"", ""theme"", ""theme_bw"", ""xlab"", ""ylab"", ""ylim""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 extractFeatures packagebase apply ascharacter asfactor c dataframe grep isna length library return rownames setseed packageggplot2 aes elementtext geombar ggplot ggsave ggtitle theme themebw xlab ylab ylim packagerandomForest importance randomForest packagestats median predict reorder packageutils readcsv writecsv,"library(ggplot2)
library(randomForest)
set.seed(1)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
extractTitle <- function(name) {
    name <- as.character(name)
    if (length(grep(""Miss."", name)) > 0) {
        return(""Miss."")
    }
    else if (length(grep(""Master."", name)) > 0) {
        return(""Master."")
    }
    else if (length(grep(""Mrs."", name)) > 0) {
        return(""Mrs."")
    }
    else if (length(grep(""Mr."", name)) > 0) {
        return(""Mr."")
    }
    else {
        return(""Other"")
    }
}
extractFeatures <- function(data) {
    features <- c(""Pclass"", ""Age"", ""Sex"", ""Parch"", ""SibSp"", ""Fare"", ""Embarked"", ""Title"")
    fea <- data[, features]
    fea$Age[is.na(fea$Age)] <- -1
    fea$Fare[is.na(fea$Fare)] <- median(fea$Fare, na.rm = TRUE)
    fea$Embarked[fea$Embarked == """"] = ""S""
    fea$Sex <- as.factor(fea$Sex)
    fea$Embarked <- as.factor(fea$Embarked)
    fea$Title <- as.factor(fea$Title)
    return(fea)
}
train$Title <- as.factor(apply(train[c(""Name"")], 1, extractTitle))
test$Title <- as.factor(apply(test[c(""Name"")], 1, extractTitle))
rf <- randomForest(extractFeatures(train), as.factor(train$Survived), ntree = 100, importance = TRUE)
submission <- data.frame(PassengerId = test$PassengerId)
submission$Survived <- predict(rf, extractFeatures(test))
write.csv(submission, file = ""1_random_forest_r_submission.csv"", row.names = FALSE)
imp <- importance(rf, type = 1)
featureImportance <- data.frame(Feature = row.names(imp), Importance = imp[, 1])
p <- ggplot(featureImportance, aes(x = reorder(Feature, -Importance), y = Importance)) + geom_bar(stat = ""identity"", fill = ""#53cfff"") + theme_bw() + ylim(0, 20) + xlab(""Feature"") + ylab(""Importance"") + ggtitle(""Random Forest Feature Importance\n"") + theme(axis.text = element_text(size = 8))
ggsave(""2_feature_importance.png"", p)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
367,hertan-titanic-surviving-dataset-simple-expression,0.7609999999999999,"['cbind', 'as.character', 'as.factor', 'as.numeric', 'c', 'colnames', 'data.frame', 'grep', 'is.na', 'library', 'mean', 'names', 'paste0', 'round', 'row.names', 'rownames', 'sapply', 'strsplit', 'substr', 'sum', 'table', 'unlist', 'which', 'bind_rows', 'dense_rank', 'desc', 'glimpse', 'group_by', 'left_join', 'mutate', 'n', 'select', 'summarize', 'aes', 'coord_flip', 'facet_wrap', 'geom_bar', 'geom_hline', 'geom_point', 'geom_text', 'geom_vline', 'ggplot', 'ggtitle', 'labs', 'scale_color_discrete', 'scale_fill_discrete', 'xlab', 'ylab', 'complete', 'mice', 'importance', 'randomForest', 'median', 'predict', 'reorder', 'read.csv', 'write.csv']","['dplyr', 'randomForest', 'ggplot2', 'mice', 'base']",7.44625616073608,"['labs', 'unlist', 'complete', 'mean', 'facet_wrap', 'geom_text', 'median', 'grep', 'which', 'coord_flip', 'as.character', 'glimpse', 'dense_rank', 'is.na', 'names', 'scale_color_discrete', 'scale_fill_discrete', 'as.factor', 'left_join', 'sapply', 'round', 'n', 'mice', 'importance', 'geom_hline', 'desc', 'xlab', 'colnames', 'geom_bar', 'summarize', 'read.csv', 'paste0', 'table', 'randomForest', 'group_by', 'row.names', 'c', 'aes', 'ylab', 'mutate', 'as.numeric', 'sum', 'geom_point', 'geom_vline', 'predict', 'reorder', 'write.csv', 'bind_rows', 'ggtitle', 'data.frame', 'rownames', 'strsplit', 'ggplot', 'substr', 'library', 'cbind', 'select']",[],"['djohnbar-the-titanic-using-knn', 'rkumar3147-exploring-survival-on-the-titanic1', 'vizcharlie-exploring-survival-on-the-titanic', 'cganxs-is-62-the-right-titanic-model-threshold', 'maza91-titanic-logistic-regression', 'djohnbar-titanic-rf', 'domini-titanic-data-exploration-and-modelling', 'djohnbar-fork-of-titanic-rf-w-titles', 'harsh2-exploring-the-titanic-dataset', 'zahoorahmad-titanic-2nd-degree-families-and-majority-voting']","[0.7676616572976939, 0.6175457553900362, 0.6175457553900362, 0.5446021194938724, 0.5432726905773335, 0.5269168690753927, 0.5266169818066547, 0.5163107596679358, 0.5146925658744401, 0.5098732265536251]","{'c(""package:mice"", ""package:base"")': ['cbind'], 'package:base': ['as.character', 'as.factor', 'as.numeric', 'c', 'colnames', 'data.frame', 'grep', 'is.na', 'library', 'mean', 'names', 'paste0', 'round', 'row.names', 'rownames', 'sapply', 'strsplit', 'substr', 'sum', 'table', 'unlist', 'which'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'glimpse', 'group_by', 'left_join', 'mutate', 'n', 'select', 'summarize'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_wrap', 'geom_bar', 'geom_hline', 'geom_point', 'geom_text', 'geom_vline', 'ggplot', 'ggtitle', 'labs', 'scale_color_discrete', 'scale_fill_discrete', 'xlab', 'ylab'], 'package:mice': ['complete', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:mice"", ""package:base"")"": [""cbind""], ""package:base"": [""as.character"", ""as.factor"", ""as.numeric"", ""c"", ""colnames"", ""data.frame"", ""grep"", ""is.na"", ""library"", ""mean"", ""names"", ""paste0"", ""round"", ""row.names"", ""rownames"", ""sapply"", ""strsplit"", ""substr"", ""sum"", ""table"", ""unlist"", ""which""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""glimpse"", ""group_by"", ""left_join"", ""mutate"", ""n"", ""select"", ""summarize""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_wrap"", ""geom_bar"", ""geom_hline"", ""geom_point"", ""geom_text"", ""geom_vline"", ""ggplot"", ""ggtitle"", ""labs"", ""scale_color_discrete"", ""scale_fill_discrete"", ""xlab"", ""ylab""], ""package:mice"": [""complete"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackagemice packagebase cbind packagebase ascharacter asfactor asnumeric c colnames dataframe grep isna library mean names paste0 round rownames rownames sapply strsplit substr sum table unlist which packagedplyr bindrows denserank desc glimpse groupby leftjoin mutate n select summarize packageggplot2 aes coordflip facetwrap geombar geomhline geompoint geomtext geomvline ggplot ggtitle labs scalecolordiscrete scalefilldiscrete xlab ylab packagemice complete mice packagerandomForest importance randomForest packagestats median predict reorder packageutils readcsv writecsv,"library(""dplyr"")
library(""randomForest"")
library(""ggplot2"")
library(""mice"")
path <- ""../input/""
train.df <- read.csv(paste0(path, ""train.csv""), na.strings = c(""""), stringsAsFactors = FALSE)
test.df <- read.csv(paste0(path, ""test.csv""), na.strings = c(""""), stringsAsFactors = FALSE)
all.df <- bind_rows(train.df, test.df)
all.df$Survived <- as.factor(all.df$Survived)
all.df$Pclass <- as.factor(all.df$Pclass)
all.df$Sex <- as.factor(all.df$Sex)
all.df$Embarked <- as.factor(all.df$Embarked)
all.df$Cabin <- as.character(all.df$Cabin)
all.df$Name <- as.character(all.df$Name)
all.df$Ticket <- as.character(all.df$Ticket)
all.df$Set <- ""Train""
all.df[892:1309, ]$Set <- ""Test""
title <- sapply(all.df$Name, function(x) substr(x, grep("","", unlist(strsplit(x, """"))) + 2, which(strsplit(x, """")[[1]] == ""."") - 1))
title[title == ""Mlle""] <- ""Miss""
title[title == ""Ms""] <- ""Miss""
title[title == ""Mme""] <- ""Mrs""
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
title[title %in% rare_title] <- ""Rare""
title <- as.factor(title)
all.df$Title <- title
ggplot(all.df[all.df$Set == ""Train"", ], aes(Title, fill = Survived)) + geom_bar(stat = ""count"") + xlab(""Title"") + ylab(""Count"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Title vs Survived"")
all.df$RelativeNumber <- all.df$SibSp + all.df$Parch + 1
ggplot(all.df[all.df$Set == ""Train"", ], aes(RelativeNumber, fill = Survived)) + geom_bar(stat = ""count"") + xlab(""RelativeNumber"") + ylab(""Count"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""RelativeNumber vs Survived"")
all.df$FamilySize[all.df$RelativeNumber == 1] <- ""single""
all.df$FamilySize[all.df$RelativeNumber > 1 & all.df$RelativeNumber < 5] <- ""small""
all.df$FamilySize[all.df$RelativeNumber > 4] <- ""large""
all.df$FamilySize <- as.factor(all.df$FamilySize)
all.df$CabinInfo <- NA
all.df[is.na(all.df$Cabin), ]$CabinInfo <- ""NA""
all.df[!is.na(all.df$Cabin), ]$CabinInfo <- substr(all.df[!is.na(all.df$Cabin), ]$Cabin, 1, 1)
all.df[all.df$CabinInfo == ""T"", ]$CabinInfo <- ""NA""
all.df[all.df$CabinInfo == ""G"", ]$CabinInfo <- ""NA""
ggplot(all.df[all.df$Set == ""Train"", ], aes(CabinInfo, fill = Survived)) + geom_bar(stat = ""count"") + xlab(""CabinInfo"") + ylab(""Count"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""CabinInfo vs Survived"")
all.df[all.df$CabinInfo == ""B"", ]$CabinInfo <- ""BDE""
all.df[all.df$CabinInfo == ""D"", ]$CabinInfo <- ""BDE""
all.df[all.df$CabinInfo == ""E"", ]$CabinInfo <- ""BDE""
all.df[all.df$CabinInfo == ""A"", ]$CabinInfo <- ""ACF""
all.df[all.df$CabinInfo == ""C"", ]$CabinInfo <- ""ACF""
all.df[all.df$CabinInfo == ""F"", ]$CabinInfo <- ""ACF""
all.df$CabinInfo <- as.factor(all.df$CabinInfo)
mice_model <- mice(all.df[, c(""Age"", ""Pclass"", ""Sex"", ""SibSp"", ""Parch"", ""Embarked"", ""Title"", ""RelativeNumber"", ""FamilySize"")], method = ""rf"", printFlag = FALSE)
mice_output <- complete(mice_model)
all.df[is.na(all.df$Age), ""Age""] <- mice_output[which(is.na(all.df$Age)), ""Age""]
all.df$Age <- round(all.df$Age)
na.fare <- all.df[which(is.na(all.df$Fare)), ]
all.df$Fare[1044] <- median(all.df[all.df$Pclass == 3 & all.df$Embarked == ""S"" & all.df$Title == ""Mr"", ]$Fare, na.rm = TRUE)
na.embarked <- all.df[which(is.na(all.df$Embarked)), ]
C_Fare <- mean(all.df[all.df$Embarked == ""C"", ]$Fare, na.rm = T)
S_Fare <- mean(all.df[all.df$Embarked == ""S"", ]$Fare, na.rm = T)
Q_Fare <- mean(all.df[all.df$Embarked == ""Q"", ]$Fare, na.rm = T)
all.df$Embarked[62] <- as.factor(""C"")
all.df$Embarked[830] <- as.factor(""C"")
train.class3 <- all.df[all.df$Pclass == 3 & all.df$Set == ""Train"", ]
train.class2 <- all.df[all.df$Pclass == 2 & all.df$Set == ""Train"", ]
train.class1 <- all.df[all.df$Pclass == 1 & all.df$Set == ""Train"", ]
ggplot(train.class3, aes(y = train.class3$Pclass, x = train.class3$Fare)) + geom_point(aes(color = train.class3$Survived), position = ""jitter"") + xlab(""Fare"") + ylab(""Pclass"") + geom_vline(aes(xintercept = 10), colour = ""black"", linetype = ""dashed"", lwd = 1) + geom_vline(aes(xintercept = 20), colour = ""black"", linetype = ""dashed"", lwd = 1) + scale_color_discrete(name = ""Survived"") + ggtitle(""Pclass1 vs Fare vs Survived"")
ggplot(train.class2, aes(y = train.class2$Pclass, x = train.class2$Fare)) + xlab(""Fare"") + ylab(""Pclass"") + scale_color_discrete(name = ""Survived"") + geom_point(aes(color = train.class2$Survived), position = ""jitter"") + geom_vline(aes(xintercept = 20), colour = ""black"", linetype = ""dashed"", lwd = 1) + ggtitle(""Pclass2 vs Fare vs Survived"")
ggplot(train.class1, aes(y = train.class1$Pclass, x = train.class1$Fare)) + xlab(""Fare"") + ylab(""Pclass"") + scale_color_discrete(name = ""Survived"") + geom_point(aes(color = train.class1$Survived), position = ""jitter"") + geom_vline(aes(xintercept = 50), colour = ""black"", linetype = ""dashed"", lwd = 1) + geom_vline(aes(xintercept = 120), colour = ""black"", linetype = ""dashed"", lwd = 1) + ggtitle(""Pclass3 vs Fare vs Survived"")
all.df$Class.fare.level[all.df$Pclass == 3 & all.df$Fare < 10] <- ""P3_1""
all.df$Class.fare.level[all.df$Pclass == 3 & all.df$Fare >= 10 & all.df$Fare < 20] <- ""P3_2""
all.df$Class.fare.level[all.df$Pclass == 3 & all.df$Fare >= 20] <- ""P3_3""
all.df$Class.fare.level[all.df$Pclass == 2 & all.df$Fare < 20] <- ""P2_1""
all.df$Class.fare.level[all.df$Pclass == 2 & all.df$Fare >= 20] <- ""P2_2""
all.df$Class.fare.level[all.df$Pclass == 1 & all.df$Fare < 50] <- ""P1_1""
all.df$Class.fare.level[all.df$Pclass == 1 & all.df$Fare >= 50 & all.df$Fare < 120] <- ""P1_2""
all.df$Class.fare.level[all.df$Pclass == 1 & all.df$Fare >= 120] <- ""P1_3""
all.df$Class.fare.level <- as.factor(all.df$Class.fare.level)
train.female <- all.df[all.df$Sex == ""female"" & all.df$Set == ""Train"", ]
train.male <- all.df[all.df$Sex == ""male"" & all.df$Set == ""Train"", ]
age.survived.female <- table(train.female$Age, train.female$Survived)
age.survived.female <- cbind(age.survived.female, age.survived.female[, 1]/(age.survived.female[, 1] + age.survived.female[, 2]))
age.survived.female.df <- data.frame(age.survived.female)
age.survived.female.df <- cbind(age.survived.female.df, rownames(age.survived.female.df))
colnames(age.survived.female.df) <- c(""not_survived"", ""survived"", ""death_rate"", ""age"")
age.survived.female.df <- cbind(age.survived.female.df, total = age.survived.female.df$not_survived + age.survived.female.df$survived)
age.survived.male <- table(train.male$Age, train.male$Survived)
age.survived.male <- cbind(age.survived.male, age.survived.male[, 1]/(age.survived.male[, 1] + age.survived.male[, 2]))
age.survived.male.df <- data.frame(age.survived.male)
age.survived.male.df <- cbind(age.survived.male.df, rownames(age.survived.male.df))
colnames(age.survived.male.df) <- c(""not_survived"", ""survived"", ""death_rate"", ""age"")
age.survived.male.df <- cbind(age.survived.male.df, total = age.survived.male.df$not_survived + age.survived.male.df$survived)
glimpse(age.survived.female.df)
ggplot(data = age.survived.female.df, aes(y = age.survived.female.df$death_rate, x = age.survived.female.df$age)) + geom_point(size = age.survived.female.df$total, alpha = 0.3) + geom_hline(aes(yintercept = 0.5), colour = ""red"", linetype = ""dashed"", lwd = 1) + xlab(""Age"") + ylab(""Death Rate"")
ggplot(data = age.survived.male.df, aes(y = age.survived.male.df$death_rate, x = age.survived.male.df$age)) + geom_point(size = age.survived.male.df$total, alpha = 0.3) + geom_hline(aes(yintercept = 0.5), colour = ""red"", linetype = ""dashed"", lwd = 1) + xlab(""Age"") + ylab(""Death Rate"")
ggplot(all.df[all.df$Set == ""Train"", ], aes(y = all.df[all.df$Set == ""Train"", ]$Pclass, x = all.df[all.df$Set == ""Train"", ]$Age)) + facet_wrap(~Sex) + xlab(""Age"") + ylab(""Pclass"") + scale_color_discrete(name = ""Survived"") + geom_point(aes(color = all.df[all.df$Set == ""Train"", ]$Survived), position = ""jitter"") + geom_vline(aes(xintercept = 10), colour = ""black"", linetype = ""dashed"", lwd = 1) + geom_vline(aes(xintercept = 40), colour = ""black"", linetype = ""dashed"", lwd = 1) + ggtitle(""Pclass vs Age vs Sex vs Survived"")
all.df$Class.sex.age.level <- NA
all.df[all.df$Age <= 10 & all.df$Sex == ""female"" & all.df$Pclass == 1, ]$Class.sex.age.level <- ""cF1""
all.df[all.df$Age <= 10 & all.df$Sex == ""male"" & all.df$Pclass == 1, ]$Class.sex.age.level <- ""cM1""
all.df[all.df$Age <= 10 & all.df$Sex == ""female"" & all.df$Pclass == 2, ]$Class.sex.age.level <- ""cF2""
all.df[all.df$Age <= 10 & all.df$Sex == ""male"" & all.df$Pclass == 2, ]$Class.sex.age.level <- ""cM2""
all.df[all.df$Age <= 10 & all.df$Sex == ""female"" & all.df$Pclass == 3, ]$Class.sex.age.level <- ""cF3""
all.df[all.df$Age <= 10 & all.df$Sex == ""male"" & all.df$Pclass == 3, ]$Class.sex.age.level <- ""cM3""
all.df[all.df$Age > 10 & all.df$Age <= 40 & all.df$Sex == ""female"" & all.df$Pclass == 1, ]$Class.sex.age.level <- ""aF1""
all.df[all.df$Age > 10 & all.df$Age <= 40 & all.df$Sex == ""male"" & all.df$Pclass == 1, ]$Class.sex.age.level <- ""aM1""
all.df[all.df$Age > 10 & all.df$Age <= 40 & all.df$Sex == ""female"" & all.df$Pclass == 2, ]$Class.sex.age.level <- ""aF2""
all.df[all.df$Age > 10 & all.df$Age <= 40 & all.df$Sex == ""male"" & all.df$Pclass == 2, ]$Class.sex.age.level <- ""aM2""
all.df[all.df$Age > 10 & all.df$Age <= 40 & all.df$Sex == ""female"" & all.df$Pclass == 3, ]$Class.sex.age.level <- ""aF3""
all.df[all.df$Age > 10 & all.df$Age <= 40 & all.df$Sex == ""male"" & all.df$Pclass == 3, ]$Class.sex.age.level <- ""aM3""
all.df[all.df$Age > 40 & all.df$Sex == ""female"" & all.df$Pclass == 1, ]$Class.sex.age.level <- ""oF1""
all.df[all.df$Age > 40 & all.df$Sex == ""male"" & all.df$Pclass == 1, ]$Class.sex.age.level <- ""oM1""
all.df[all.df$Age > 40 & all.df$Sex == ""female"" & all.df$Pclass == 2, ]$Class.sex.age.level <- ""oF2""
all.df[all.df$Age > 40 & all.df$Sex == ""male"" & all.df$Pclass == 2, ]$Class.sex.age.level <- ""oM2""
all.df[all.df$Age > 40 & all.df$Sex == ""female"" & all.df$Pclass == 3, ]$Class.sex.age.level <- ""oF3""
all.df[all.df$Age > 40 & all.df$Sex == ""male"" & all.df$Pclass == 3, ]$Class.sex.age.level <- ""oM3""
all.df[all.df$Class.sex.age.level %in% c(""aF3"", ""aM1"", ""cF1"", ""cF3"", ""cM1"", ""cM3""), ]$Class.sex.age.level <- ""other""
all.df$Class.sex.age.level <- as.factor(all.df$Class.sex.age.level)
ggplot(all.df[all.df$Set == ""Train"", ], aes(Class.sex.age.level, fill = Survived)) + geom_bar(stat = ""count"") + xlab(""Class.sex.age.level"") + ylab(""Count"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Class.sex.age.level vs Survived"")
all.df$Surname <- sapply(all.df$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
passenger_stats <- all.df %>% group_by(Surname, RelativeNumber, Ticket, Cabin) %>% summarize(family.size = n(), unknown = sum(is.na(Survived)), survived.info = sum(as.numeric(Survived) - 1, na.rm = T), death.info = family.size - (unknown + survived.info))
all.df <- cbind(all.df, all.df %>% left_join(passenger_stats, c(""Surname"", ""RelativeNumber"", ""Ticket"", ""Cabin"")) %>% select(""family.size"", ""unknown"", ""survived.info"", ""death.info""))
all.df$Travelling.together <- NA
all.df[all.df$family.size == 1, ]$Travelling.together <- ""alone""
all.df[all.df$family.size > 1 & all.df$survived.info == 0 & all.df$death.info == 0, ]$Travelling.together <- ""no_info""
for (i in 1:891) {
    if ((all.df$family.size[i] > 1) & (all.df$survived.info[i] > 0 | all.df$death.info[i] > 0)) {
        if (all.df$Survived[i] == 1) {
            all.df[i, ]$Travelling.together <- round((all.df$survived.info[i] - 1)/(all.df$family.size[i] - 1), 2)
        }
        else {
            all.df[i, ]$Travelling.together <- round(all.df$survived.info[i]/(all.df$family.size[i] - 1), 2)
        }
    }
}
for (i in 892:1309) {
    if ((all.df$family.size[i] > 1) & (all.df$survived.info[i] > 0 | all.df$death.info[i] > 0)) {
        all.df[i, ]$Travelling.together <- round((all.df$survived.info[i]/all.df$family.size[i]), 2)
    }
}
ggplot(all.df[all.df$Set == ""Train"", ], aes(Travelling.together, fill = Survived)) + geom_bar(stat = ""count"") + xlab(""Travelling.together"") + ylab(""Count"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Train Travelling.together vs Survived"")
ggplot(all.df[all.df$Set == ""Test"", ], aes(Travelling.together)) + geom_bar(stat = ""count"") + xlab(""Travelling.together"") + ylab(""Count"") + ggtitle(""Test Travelling.together vs Survived"")
all.df[!(all.df$Travelling.together %in% c(""alone"", ""0"", ""no_info"")), ]$Travelling.together <- ""survived_in_group""
all.df$Travelling.together <- as.factor(all.df$Travelling.together)
ggplot(all.df[all.df$Set == ""Train"", ], aes(Travelling.together, fill = Survived)) + geom_bar(stat = ""count"") + xlab(""Travelling.together"") + ylab(""Count"") + scale_fill_discrete(name = ""Survived"") + ggtitle(""Train Travelling.together vs Survived"")
ggplot(all.df[all.df$Set == ""Test"", ], aes(Travelling.together)) + geom_bar(stat = ""count"") + xlab(""Travelling.together"") + ylab(""Count"") + ggtitle(""Test Travelling.together vs Survived"")
feature.set <- c(""Survived"", ""Pclass"", ""Sex"", ""Age"", ""Fare"", ""Embarked"", ""Title"", ""FamilySize"", ""CabinInfo"", ""Class.fare.level"", ""Class.sex.age.level"", ""Travelling.together"")
all.df.model.input <- all.df[, feature.set]
train.df <- all.df.model.input[1:891, ]
test.df <- all.df.model.input[892:1309, ]
fit.model.randomforest <- randomForest(Survived ~ ., data = train.df, importance = TRUE, keep.forest = TRUE)
pred <- predict(fit.model.randomforest, test.df[, -1], type = ""class"")
predictions <- data.frame(c(892:1309), pred)
names(predictions) <- c(""PassengerId"", ""Survived"")
write.csv(predictions, ""rf_model_prediction.csv"", row.names = FALSE)
importance <- importance(fit.model.randomforest)
Feature.importance <- data.frame(Features = row.names(importance), Importance = round(importance[, ""MeanDecreaseAccuracy""], 2))
Feature.importance <- Feature.importance %>% mutate(Rank = dense_rank(desc(Importance)))
ggplot(Feature.importance, aes(x = reorder(Features, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Features, label = Rank), size = 5, y = 0.5, colour = ""red"") + labs(x = ""Features"") + coord_flip()",1,0,0,1,0,0,0,0,0,0,0,0,0,0
369,erikbruin-titanic-2nd-degree-families-and-majority-voting,0.797,"['summarize', 'filter', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.data.frame', 'as.factor', 'as.numeric', 'as.ordered', 'c', 'cat', 'cbind', 'colnames', 'data.frame', 'factor', 'ifelse', 'is.na', 'length', 'library', 'max', 'mean', 'nrow', 'paste', 'print', 'prop.table', 'range', 'rbind', 'rm', 'round', 'row.names', 'rownames', 'rowSums', 'sapply', 'seq', 'set.seed', 'strsplit', 'sub', 'substring', 'sum', 'summary', 'table', 'unique', 'which', 'train', 'trainControl', 'varImp', 'corrplot.mixed', 'arrange', 'group_by', 'left_join', 'n', 'select', 'summarise', 'aes', 'coord_flip', 'element_text', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_label', 'ggplot', 'ggtitle', 'labs', 'scale_fill_manual', 'scale_x_continuous', 'scale_x_discrete', 'scale_y_continuous', 'theme', 'theme_grey', 'xlab', 'hist', 'par', 'grid.arrange', 'cut2', 'kable', 'cor', 'lm', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['Hmisc', 'knitr', 'ggplot2', 'dplyr', 'caret', 'randomForest', 'gridExtra', 'ROCR', 'corrplot', 'base']",15.2318501472473,"['as.ordered', 'theme', 'lm', 'range', 'set.seed', 'scale_fill_manual', 'grid.arrange', 'length', 'read.csv', 'table', 'par', 'row.names', 'paste', 'reorder', 'sum', 'ggtitle', 'library', 'facet_grid', 'summarise', 'as.character', 'is.na', 'sub', 'scale_x_continuous', 'geom_boxplot', 'print', 'prop.table', 'left_join', 'filter', 'colnames', 'arrange', 'unique', 'as.data.frame', 'aes', 'rbind', 'predict', 'write.csv', 'data.frame', 'rownames', 'ggplot', 'cbind', 'select', 'geom_label', 'mean', 'element_text', 'which', 'cor', 'kable', 'str', 'max', 'geom_bar', 'rm', 'substring', 'scale_y_continuous', 'train', 'corrplot.mixed', 'strsplit', 'user defined', 'trainControl', 'labs', 'nrow', 'median', 'coord_flip', 'cat', 'as.factor', 'summary', 'round', 'sapply', 'n', 'geom_histogram', 'hist', 'xlab', 'rowSums', 'factor', 'summarize', 'varImp', 'group_by', 'scale_x_discrete', 'c', 'theme_grey', 'as.numeric', 'ifelse', 'seq', 'geom_density', 'cut2']",[],"['zahoorahmad-titanic-2nd-degree-families-and-majority-voting', 'ushasri-titanic-2nd-degree-families-and-majority-voting', 'harsh2-exploring-the-titanic-dataset', 'ravikrishnareddy-titanic-survival-prediction', 'maza91-titanic-logistic-regression', 'domini-titanic-data-exploration-and-modelling', 'djohnbar-titanic-rf', 'djohnbar-fork-of-titanic-rf-w-titles', 'aeintngon-titanic-exploratory-analysis', 'ablearcher-my-titanic']","[0.999330334203471, 0.999330334203471, 0.9687338566529745, 0.7758320324463651, 0.7492360071242202, 0.7277147430342431, 0.7172829397026096, 0.7049627792271166, 0.7000139440320656, 0.6923308956533324]","{'c(""package:dplyr"", ""package:Hmisc"")': ['summarize'], 'c(""package:dplyr"", ""package:stats"")': ['filter'], 'character(0)': ['pretty_breaks', 'set'], 'package:base': ['as.character', 'as.data.frame', 'as.factor', 'as.numeric', 'as.ordered', 'c', 'cat', 'cbind', 'colnames', 'data.frame', 'factor', 'ifelse', 'is.na', 'length', 'library', 'max', 'mean', 'nrow', 'paste', 'print', 'prop.table', 'range', 'rbind', 'rm', 'round', 'row.names', 'rownames', 'rowSums', 'sapply', 'seq', 'set.seed', 'strsplit', 'sub', 'substring', 'sum', 'summary', 'table', 'unique', 'which'], 'package:caret': ['train', 'trainControl', 'varImp'], 'package:corrplot': ['corrplot.mixed'], 'package:dplyr': ['arrange', 'group_by', 'left_join', 'n', 'select', 'summarise'], 'package:ggplot2': ['aes', 'coord_flip', 'element_text', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_label', 'ggplot', 'ggtitle', 'labs', 'scale_fill_manual', 'scale_x_continuous', 'scale_x_discrete', 'scale_y_continuous', 'theme', 'theme_grey', 'xlab'], 'package:graphics': ['hist', 'par'], 'package:gridExtra': ['grid.arrange'], 'package:Hmisc': ['cut2'], 'package:knitr': ['kable'], 'package:stats': ['cor', 'lm', 'median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:Hmisc"")"": [""summarize""], ""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""character(0)"": [""pretty_breaks"", ""set""], ""package:base"": [""as.character"", ""as.data.frame"", ""as.factor"", ""as.numeric"", ""as.ordered"", ""c"", ""cat"", ""cbind"", ""colnames"", ""data.frame"", ""factor"", ""ifelse"", ""is.na"", ""length"", ""library"", ""max"", ""mean"", ""nrow"", ""paste"", ""print"", ""prop.table"", ""range"", ""rbind"", ""rm"", ""round"", ""row.names"", ""rownames"", ""rowSums"", ""sapply"", ""seq"", ""set.seed"", ""strsplit"", ""sub"", ""substring"", ""sum"", ""summary"", ""table"", ""unique"", ""which""], ""package:caret"": [""train"", ""trainControl"", ""varImp""], ""package:corrplot"": [""corrplot.mixed""], ""package:dplyr"": [""arrange"", ""group_by"", ""left_join"", ""n"", ""select"", ""summarise""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""element_text"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_label"", ""ggplot"", ""ggtitle"", ""labs"", ""scale_fill_manual"", ""scale_x_continuous"", ""scale_x_discrete"", ""scale_y_continuous"", ""theme"", ""theme_grey"", ""xlab""], ""package:graphics"": [""hist"", ""par""], ""package:gridExtra"": [""grid.arrange""], ""package:Hmisc"": [""cut2""], ""package:knitr"": [""kable""], ""package:stats"": [""cor"", ""lm"", ""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packageHmisc summarize cpackagedplyr packagestats filter character0 prettybreaks set packagebase ascharacter asdataframe asfactor asnumeric asordered c cat cbind colnames dataframe factor ifelse isna length library max mean nrow paste print proptable range rbind rm round rownames rownames rowSums sapply seq setseed strsplit sub substring sum summary table unique which packagecaret train trainControl varImp packagecorrplot corrplotmixed packagedplyr arrange groupby leftjoin n select summarise packageggplot2 aes coordflip elementtext facetgrid geombar geomboxplot geomdensity geomhistogram geomlabel ggplot ggtitle labs scalefillmanual scalexcontinuous scalexdiscrete scaleycontinuous theme themegrey xlab packagegraphics hist par packagegridExtra gridarrange packageHmisc cut2 packageknitr kable packagestats cor lm median predict reorder packageutils readcsv str writecsv,"knitr::opts_chunk$set(echo = TRUE)
library(Hmisc)
library(knitr)
library(ggplot2)
library(dplyr)
library(caret)
library(randomForest)
library(gridExtra)
library(ROCR)
library(corrplot)
train <- read.csv(""../input/train.csv"", stringsAsFactors = F, na.strings = c(""NA"", """"))
test <- read.csv(""../input/test.csv"", stringsAsFactors = F, na.strings = c(""NA"", """"))
str(train)
test$Survived <- NA
all <- rbind(train, test)
sapply(all, function(x) {
    sum(is.na(x))
})
all$Sex <- as.factor(all$Sex)
all$Survived <- as.factor(all$Survived)
all$Pclass <- as.ordered(all$Pclass)
ggplot(all[!is.na(all$Survived), ], aes(x = Survived, fill = Survived)) + geom_bar(stat = ""count"") + labs(x = ""How many people died and survived on the Titanic?"") + geom_label(stat = ""count"", aes(label = ..count..), size = 7) + theme_grey(base_size = 18)
p1 <- ggplot(all, aes(x = Sex, fill = Sex)) + geom_bar(stat = ""count"", position = ""dodge"") + theme_grey() + labs(x = ""All data"") + geom_label(stat = ""count"", aes(label = ..count..)) + scale_fill_manual(""legend"", values = c(female = ""pink"", male = ""green""))
p2 <- ggplot(all[!is.na(all$Survived), ], aes(x = Sex, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"") + theme_grey() + labs(x = ""Training data only"") + geom_label(stat = ""count"", aes(label = ..count..))
grid.arrange(p1, p2, nrow = 1)
p3 <- ggplot(all, aes(x = Pclass, fill = Pclass)) + geom_bar(stat = ""count"", position = ""dodge"") + labs(x = ""Pclass, All data"") + geom_label(stat = ""count"", aes(label = ..count..)) + theme(legend.position = ""none"") + theme_grey()
p4 <- ggplot(all[!is.na(all$Survived), ], aes(x = Pclass, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"") + labs(x = ""Training data only"") + theme(legend.position = ""none"") + theme_grey()
p5 <- ggplot(all[!is.na(all$Survived), ], aes(x = Pclass, fill = Survived)) + geom_bar(stat = ""count"", position = ""stack"") + labs(x = ""Training data only"", y = ""Count"") + facet_grid(. ~ Sex) + theme(legend.position = ""none"") + theme_grey()
p6 <- ggplot(all[!is.na(all$Survived), ], aes(x = Pclass, fill = Survived)) + geom_bar(stat = ""count"", position = ""fill"") + labs(x = ""Training data only"", y = ""Percent"") + facet_grid(. ~ Sex) + theme(legend.position = ""none"") + theme_grey()
grid.arrange(p3, p4, p5, p6, ncol = 2)
all$PclassSex[all$Pclass == ""1"" & all$Sex == ""male""] <- ""P1Male""
all$PclassSex[all$Pclass == ""2"" & all$Sex == ""male""] <- ""P2Male""
all$PclassSex[all$Pclass == ""3"" & all$Sex == ""male""] <- ""P3Male""
all$PclassSex[all$Pclass == ""1"" & all$Sex == ""female""] <- ""P1Female""
all$PclassSex[all$Pclass == ""2"" & all$Sex == ""female""] <- ""P2Female""
all$PclassSex[all$Pclass == ""3"" & all$Sex == ""female""] <- ""P3Female""
all$PclassSex <- as.factor(all$PclassSex)
all$Surname <- sapply(all$Name, function(x) {
    strsplit(x, split = ""[,.]"")[[1]][1]
})
all$Surname <- sapply(all$Surname, function(x) {
    strsplit(x, split = ""[-]"")[[1]][1]
})
all$Title <- sapply(all$Name, function(x) {
    strsplit(x, split = ""[,.]"")[[1]][2]
})
all$Title <- sub("" "", """", all$Title)
kable(table(all$Sex, all$Title))
all$Title[all$Title %in% c(""Mlle"", ""Ms"")] <- ""Miss""
all$Title[all$Title == ""Mme""] <- ""Mrs""
all$Title[!(all$Title %in% c(""Master"", ""Miss"", ""Mr"", ""Mrs""))] <- ""Rare Title""
all$Title <- as.factor(all$Title)
kable(table(all$Sex, all$Title))
ggplot(all[!is.na(all$Survived), ], aes(x = Title, fill = Survived)) + geom_bar(stat = ""count"", position = ""stack"") + labs(x = ""Title"") + theme_grey()
all$Fsize <- all$SibSp + all$Parch + 1
ggplot(all[!is.na(all$Survived), ], aes(x = Fsize, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_grey()
all$FsizeName <- paste(as.character(all$Fsize), all$Surname, sep = """")
SizeCheck <- all %>% group_by(FsizeName, Fsize) %>% summarise(NumObs = n())
SizeCheck$NumFam <- SizeCheck$NumObs/SizeCheck$Fsize
SizeCheck$modulo <- SizeCheck$NumObs%%SizeCheck$Fsize
SizeCheck <- SizeCheck[SizeCheck$modulo != 0, ]
sum(SizeCheck$NumObs)
kable(SizeCheck[SizeCheck$FsizeName %in% c(""3Davies"", ""5Hocking"", ""6Richards"", ""2Wilkes"", ""3Richards"", ""4Hocking""), ])
kable(all[all$FsizeName == ""3Davies"", c(2, 3, 14, 5, 6, 7, 8, 17, 9, 15)])
all$FsizeName[c(550, 1222)] <- ""2Davies""
all$SibSp[550] <- 0
all$Parch[1222] <- 1
all$Fsize[c(550, 1222)] <- 2
kable(all[all$FsizeName == ""2Davies"", c(2, 3, 14, 5, 6, 7, 8, 17, 9, 15)])
kable(all[all$Ticket %in% c(""29104"", ""29105"", ""29106""), c(2, 3, 4, 5, 6, 7, 8, 9, 15)])
NC <- all[all$FsizeName %in% SizeCheck$FsizeName, ]
NC$Name <- sub(""\\s$"", """", NC$Name)
NC$Maiden <- sub("".*[^\\)]$"", """", NC$Name)
NC$Maiden <- sub("".*\\s(.*)\\)$"", ""\\1"", NC$Maiden)
NC$Maiden[NC$Title != ""Mrs""] <- """"
NC$Maiden <- sub(""^\\("", """", NC$Maiden)
NC$Maiden[NC$Name == ""Andersen-Jensen, Miss. Carla Christine Nielsine""] <- ""Jensen""
NC$Maiden2[NC$Maiden %in% NC$Surname] <- NC$Maiden[NC$Maiden %in% NC$Surname]
NC$Combi[!is.na(NC$Maiden2)] <- paste(NC$Surname[!is.na(NC$Maiden2)], NC$Maiden[!is.na(NC$Maiden2)])
labels1 <- NC[!is.na(NC$Combi), c(""Surname"", ""Combi"")]
labels2 <- NC[!is.na(NC$Combi), c(""Maiden"", ""Combi"")]
colnames(labels2) <- c(""Surname"", ""Combi"")
labels1 <- rbind(labels1, labels2)
NC$Combi <- NULL
NC <- left_join(NC, labels1, by = ""Surname"")
CombiMaxF <- NC[!is.na(NC$Combi), ] %>% group_by(Combi) %>% summarise(MaxF = max(Fsize))
NC <- left_join(NC, CombiMaxF, by = ""Combi"")
NC$FsizeCombi[!is.na(NC$Combi)] <- paste(as.character(NC$Fsize[!is.na(NC$Combi)]), NC$Combi[!is.na(NC$Combi)], sep = """")
FamMaid <- NC[!is.na(NC$FsizeCombi), ] %>% group_by(FsizeCombi, MaxF, Fsize) %>% summarise(NumObs = n())
FamMaidWrong <- FamMaid[FamMaid$MaxF != FamMaid$NumObs, ]
kable(unique(NC[!is.na(NC$Combi) & NC$FsizeCombi %in% FamMaidWrong$FsizeCombi, c(""Combi"", ""MaxF"")]))
NC$MaxF <- NULL
FamMale <- NC[is.na(NC$Combi), ] %>% group_by(Surname) %>% summarise(MaxF = max(Fsize))
NC <- left_join(NC, FamMale, by = ""Surname"")
NCMale <- NC[is.na(NC$Combi), ] %>% group_by(Surname, FsizeName, MaxF) %>% summarise(count = n()) %>% group_by(Surname, MaxF) %>% filter(n() > 1) %>% summarise(NumFsizes = n())
NC$Combi[NC$Surname %in% NCMale$Surname] <- NC$Surname[NC$Surname %in% NCMale$Surname]
kable(NCMale[, c(1, 2)])
kable(all[all$Surname == ""Vander Planke"", c(2, 3, 4, 5, 6, 7, 8, 9, 15)])
NC <- NC[(NC$FsizeCombi %in% FamMaidWrong$FsizeCombi) | (NC$Surname %in% NCMale$Surname), ]
NC1 <- NC %>% group_by(Combi) %>% summarise(Favg = mean(Fsize))
kable(NC1)
NC <- left_join(NC, NC1, by = ""Combi"")
NC$Favg <- round(NC$Favg)
NC <- NC[, c(""PassengerId"", ""Favg"")]
all <- left_join(all, NC, by = ""PassengerId"")
all$Fsize[!is.na(all$Favg)] <- all$Favg[!is.na(all$Favg)]
all$Ticket2 <- sub(""..$"", ""xx"", all$Ticket)
rest <- all %>% select(PassengerId, Title, Age, Ticket, Ticket2, Surname, Fsize) %>% filter(Fsize == ""1"") %>% group_by(Ticket2, Surname) %>% summarise(count = n())
rest <- rest[rest$count > 1, ]
rest1 <- all[(all$Ticket2 %in% rest$Ticket2 & all$Surname %in% rest$Surname & all$Fsize == ""1""), c(""PassengerId"", ""Surname"", ""Title"", ""Age"", ""Ticket"", ""Ticket2"", ""Fsize"", ""SibSp"", ""Parch"")]
rest1 <- left_join(rest1, rest, by = c(""Surname"", ""Ticket2""))
rest1 <- rest1[!is.na(rest1$count), ]
rest1 <- rest1 %>% arrange(Surname, Ticket2)
kable(rest1[1:12, ])
all <- left_join(all, rest1)
for (i in 1:nrow(all)) {
    if (!is.na(all$count[i])) {
        all$Fsize[i] <- all$count[i]
    }
}
kable(all[all$Ticket == ""1601"", c(""Survived"", ""Pclass"", ""Title"", ""Surname"", ""Age"", ""Ticket"", ""SibSp"", ""Parch"", ""Fsize"")])
TicketGroup <- all %>% select(Ticket) %>% group_by(Ticket) %>% summarise(Tsize = n())
all <- left_join(all, TicketGroup, by = ""Ticket"")
ggplot(all[!is.na(all$Survived), ], aes(x = Tsize, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Ticket Size"") + theme_grey()
all$Group <- all$Fsize
for (i in 1:nrow(all)) {
    all$Group[i] <- max(all$Group[i], all$Tsize[i])
}
all$GroupSize[all$Group == 1] <- ""solo""
all$GroupSize[all$Group == 2] <- ""duo""
all$GroupSize[all$Group >= 3 & all$Group <= 4] <- ""group""
all$GroupSize[all$Group >= 5] <- ""large group""
all$GroupSize <- as.factor(all$GroupSize)
g1 <- ggplot(all[!is.na(all$Survived), ], aes(x = Group, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Final Group Sizes"") + theme_grey()
g2 <- ggplot(all[!is.na(all$Survived), ], aes(x = GroupSize, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"") + labs(x = ""Final Group Categories"") + theme_grey() + scale_x_discrete(limits = c(""solo"", ""duo"", ""group"", ""large group""))
grid.arrange(g2, g1)
all$count <- NULL
all$Name <- NULL
rm(CombiMaxF)
rm(FamMaid)
rm(FamMaidWrong)
rm(FamMale)
rm(labels1)
rm(labels2)
rm(NC)
rm(NC1)
rm(NCMale)
rm(rest)
rm(SizeCheck)
rm(TicketGroup)
rm(p1)
rm(p2)
rm(p3)
rm(p4)
rm(p5)
rm(p6)
kable(all[which(is.na(all$Embarked)), c(""Surname"", ""Title"", ""Survived"", ""Pclass"", ""Age"", ""SibSp"", ""Parch"", ""Ticket"", ""Fare"", ""Cabin"", ""Embarked"", ""Group"")])
all$FarePP <- all$Fare/all$Tsize
tab2 <- all[(!is.na(all$Embarked) & !is.na(all$Fare)), ] %>% group_by(Embarked, Pclass) %>% summarise(FarePP = median(FarePP))
kable(tab2)
all$Embarked[all$Ticket == ""113572""] <- ""C""
all$Embarked <- as.factor(all$Embarked)
kable(all[which(is.na(all$Fare)), c(""Surname"", ""Title"", ""Survived"", ""Pclass"", ""Age"", ""SibSp"", ""Parch"", ""Ticket"", ""Fare"", ""Cabin"", ""Embarked"", ""Group"")])
all$FarePP[1044] <- 7.8
tab3 <- all[(!is.na(all$FarePP)), ] %>% group_by(Pclass) %>% summarise(MedianFarePP = median(FarePP))
all <- left_join(all, tab3, by = ""Pclass"")
all$FarePP[which(all$FarePP == 0)] <- all$MedianFarePP[which(all$FarePP == 0)]
ggplot(all, aes(x = FarePP)) + geom_histogram(binwidth = 5, fill = ""blue"") + theme_grey() + scale_x_continuous(breaks = seq(0, 150, by = 10))
all$FareBins <- cut2(all$FarePP, g = 5)
ggplot(all[!is.na(all$Survived), ], aes(x = FareBins, fill = Survived)) + geom_bar(stat = ""count"") + theme_grey() + facet_grid(. ~ Pclass) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(all[(!is.na(all$Survived) & !is.na(all$Age)), ], aes(x = Age, fill = Survived)) + geom_density(alpha = 0.5, aes(fill = factor(Survived))) + labs(title = ""Survival density and Age"") + scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) + theme_grey()
ggplot(all[!is.na(all$Age), ], aes(x = Title, y = Age, fill = Pclass)) + geom_boxplot() + scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) + theme_grey()
set.seed(12000)
AgeLM <- lm(Age ~ Pclass + Sex + SibSp + Parch + Embarked + Title + GroupSize, data = all[!is.na(all$Age), ])
summary(AgeLM)
all$AgeLM <- predict(AgeLM, all)
par(mfrow = c(1, 2))
hist(all$Age[!is.na(all$Age)], main = ""Original data, non-missing"", xlab = ""Age"", col = ""green"")
hist(all$AgeLM[is.na(all$Age)], main = ""LM NA predictions"", xlab = ""Age"", col = ""orange"", xlim = range(0:80))
all[(is.na(all$Age) & all$AgeLM < 18), c(""Sex"", ""SibSp"", ""Parch"", ""Title"", ""Pclass"", ""Survived"", ""AgeLM"")]
indexMissingAge <- which(is.na(all$Age))
indexAgeSurvivedNotNA <- which(!is.na(all$Age) & (!is.na(all$Survived)))
all$Age[indexMissingAge] <- all$AgeLM[indexMissingAge]
all$Cabin[is.na(all$Cabin)] <- ""U""
all$Cabin <- substring(all$Cabin, 1, 1)
all$Cabin <- as.factor(all$Cabin)
ggplot(all[(!is.na(all$Survived) & all$Cabin != ""U""), ], aes(x = Cabin, fill = Survived)) + geom_bar(stat = ""count"") + theme_grey() + facet_grid(. ~ Pclass) + labs(title = ""Survivor split by class and Cabin"")
c1 <- round(prop.table(table(all$Survived[(!is.na(all$Survived) & all$Cabin != ""U"")], all$Cabin[(!is.na(all$Survived) & all$Cabin != ""U"")]), 2) * 100)
kable(c1)
ggplot(all[all$Age < 14.5 & !is.na(all$Survived), ], aes(x = Pclass, fill = Survived)) + geom_bar(stat = ""count"") + theme_grey(base_size = 18)
all$IsChildP12 <- ""No""
all$IsChildP12[all$Age <= 14.5 & all$Pclass %in% c(""1"", ""2"")] <- ""Yes""
all$IsChildP12 <- as.factor(all$IsChildP12)
d1 <- ggplot(all[!is.na(all$Survived), ], aes(x = Embarked, fill = Survived)) + geom_bar(stat = ""count"") + theme_grey() + labs(x = ""Embarked"", y = ""Count"")
d2 <- ggplot(all[!is.na(all$Survived), ], aes(x = Embarked, fill = Survived)) + geom_bar(stat = ""count"", position = ""fill"") + theme_grey() + labs(x = ""Embarked"", y = ""Percent"")
grid.arrange(d1, d2, nrow = 1)
ggplot(all[indexAgeSurvivedNotNA, ], aes(x = Age, fill = Survived)) + geom_histogram(aes(fill = factor(Survived))) + labs(title = ""Survival density, known-ages, and Embarked"") + scale_x_continuous(breaks = scales::pretty_breaks(n = 5)) + theme_grey() + facet_grid(. ~ Embarked)
tab1 <- rbind(table(all$Embarked[!is.na(all$Survived)]), table(all$Embarked[indexAgeSurvivedNotNA]))
tab1 <- cbind(tab1, (rowSums(tab1)))
tab1 <- rbind(tab1, tab1[1, ] - tab1[2, ])
tab1 <- rbind(tab1, round((tab1[3, ]/tab1[1, ]) * 100))
rownames(tab1) <- c(""All"", ""With Age"", ""Missing Age"", ""Percent Missing"")
colnames(tab1) <- c(""C"", ""Q"", ""S"", ""Total"")
kable(tab1)
TicketSurvivors <- all %>% group_by(Ticket) %>% summarize(Tsize = length(Survived), NumNA = sum(is.na(Survived)), SumSurvived = sum(as.numeric(Survived) - 1, na.rm = T))
all <- left_join(all, TicketSurvivors)
all$AnySurvivors[all$Tsize == 1] <- ""other""
all$AnySurvivors[all$Tsize >= 2] <- ifelse(all$SumSurvived[all$Tsize >= 2] >= 1, ""survivors in group"", ""other"")
all$AnySurvivors <- as.factor(all$AnySurvivors)
kable(x = table(all$AnySurvivors), col.names = c(""AnySurvivors"", ""Frequency""))
all$IsSolo[all$SibSp == 0] <- ""Yes""
all$IsSolo[all$SibSp != 0] <- ""No""
all$IsSolo <- as.factor(all$IsSolo)
ggplot(all[!is.na(all$Survived), ], aes(x = IsSolo, fill = Survived)) + geom_bar(stat = ""count"") + theme_grey(base_size = 18)
all$PassengerId <- NULL
all$SibSp <- NULL
all$Parch <- NULL
all$Ticket <- NULL
all$Fare <- NULL
all$Cabin <- NULL
all$Surname <- NULL
all$Fsize <- NULL
all$FsizeName <- NULL
all$Favg <- NULL
all$Tsize <- NULL
all$Ticket2 <- NULL
all$AgeLM <- NULL
all$Child <- NULL
all$HasParch <- NULL
all$MedianFarePP <- NULL
rm(tab1)
rm(tab2)
rm(tab3)
rm(AgeLM)
rm(c1)
rm(d1)
rm(d2)
trainClean <- all[!is.na(all$Survived), ]
testClean <- all[is.na(all$Survived), ]
set.seed(2017)
caret_matrix <- train(x = trainClean[, c(""PclassSex"", ""GroupSize"", ""FarePP"", ""AnySurvivors"", ""IsChildP12"")], y = trainClean$Survived, data = trainClean, method = ""rf"", trControl = trainControl(method = ""cv"", number = 5))
caret_matrix
caret_matrix$results
rf_imp <- varImp(caret_matrix, scale = FALSE)
rf_imp <- rf_imp$importance
rf_gini <- data.frame(Variables = row.names(rf_imp), MeanDecreaseGini = rf_imp$Overall)
ggplot(rf_gini, aes(x = reorder(Variables, MeanDecreaseGini), y = MeanDecreaseGini, fill = MeanDecreaseGini)) + geom_bar(stat = ""identity"") + coord_flip() + theme(legend.position = ""none"") + labs(x = """") + ggtitle(""Variable Importance Random Forest"") + theme(plot.title = element_text(hjust = 0.5))
solution_rf <- predict(caret_matrix, testClean)
set.seed(2017)
caret_svm <- train(Survived ~ PclassSex + FarePP + AnySurvivors + IsChildP12 + IsSolo, data = trainClean, method = ""svmRadial"", preProcess = c(""center"", ""scale""), trControl = trainControl(method = ""cv"", number = 5))
caret_svm
caret_svm$results
solution_svm <- predict(caret_svm, testClean)
set.seed(2017)
caret_boost <- train(Survived ~ PclassSex + GroupSize + FareBins + AnySurvivors + IsChildP12, data = trainClean, method = ""gbm"", preProcess = c(""center"", ""scale""), trControl = trainControl(method = ""cv"", number = 7), verbose = FALSE)
print(caret_boost)
solution_boost <- predict(caret_boost, testClean)
testClean$RF <- as.numeric(solution_rf) - 1
testClean$SVM <- as.numeric(solution_svm) - 1
testClean$Boost <- as.numeric(solution_boost) - 1
corrplot.mixed(cor(testClean[, c(""RF"", ""SVM"", ""Boost"")]), order = ""hclust"", tl.col = ""black"")
testClean$Sum <- testClean$RF + testClean$SVM + testClean$Boost
testClean$Majority <- ifelse(testClean$Sum <= 1, 0, 1)
testClean$DisagreeSVM <- ifelse(testClean$RF == testClean$Boost & testClean$SVM != testClean$RF, testClean$RF, testClean$SVM)
trainClean$RF <- predict(caret_matrix, trainClean)
trainClean$SVM <- predict(caret_svm, trainClean)
trainClean$Boost <- predict(caret_boost, trainClean)
f1 <- ggplot(trainClean[trainClean$Survived != trainClean$RF, ], aes(x = PclassSex, fill = RF)) + geom_bar(stat = ""count"") + labs(title = ""FP and FN, RF model"") + theme_grey() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + theme(legend.position = ""none"") + xlab("""")
f2 <- ggplot(trainClean[trainClean$Survived != trainClean$SVM, ], aes(x = PclassSex, fill = SVM)) + geom_bar(stat = ""count"") + labs(title = ""FP and FN, SVM"") + theme_grey() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + theme(legend.position = ""none"") + xlab("""")
f3 <- ggplot(trainClean[trainClean$Survived != trainClean$Boost, ], aes(x = PclassSex, fill = Boost)) + geom_bar(stat = ""count"") + labs(title = ""FP and FN, GBM"") + theme_grey() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + theme(legend.position = ""none"") + xlab("""")
grid.arrange(f1, f2, f3, nrow = 1)
testClean$Select <- ifelse(testClean$Pclass != 3, testClean$SVM, testClean$Boost)
submission_select <- data.frame(PassengerId = test$PassengerId, Survived = testClean$Select)
write.csv(submission_select, file = ""Titanic_select.csv"", row.names = F)
cat(""Total number of Male passengers in P1 in the test set is"", length(testClean$Survived[testClean$PclassSex == ""P1Male""]))
p1m_surv <- as.data.frame(sapply(testClean[testClean$PclassSex == ""P1Male"", c(""RF"", ""SVM"", ""Boost"")], function(x) {
    sum(x)
}))
kable(x = p1m_surv, col.names = c(""Predicted number of survivors""))
p1m1 <- ggplot(all[indexAgeSurvivedNotNA, ] %>% filter(PclassSex == ""P1Male""), aes(x = Age, fill = Survived)) + geom_density(alpha = 0.5, aes(fill = factor(Survived))) + labs(title = ""Survival density and Age P1 Male"") + theme_grey()
all$P1AgeMale[indexAgeSurvivedNotNA = T & all$PclassSex == ""P1Male"" & all$Age < 40] <- ""Under40""
all$P1AgeMale[indexAgeSurvivedNotNA = T & all$PclassSex == ""P1Male"" & all$Age >= 40] <- ""Over40""
p1m2 <- ggplot(all[!is.na(all$Survived) & !is.na(all$P1AgeMale), ], aes(x = P1AgeMale, fill = Survived)) + geom_bar(stat = ""count"", position = ""fill"") + theme(legend.position = ""none"")
grid.arrange(p1m1, p1m2, widths = c(2, 1))
ggplot(all[!is.na(all$Survived), ], aes(x = IsSolo, fill = Survived)) + geom_bar(stat = ""count"", position = ""fill"") + facet_grid(. ~ Pclass + Sex)",1,0,1,0,0,0,0,1,0,0,0,0,0,0
370,mira5b-exploring-survival-on-the-titanic,0.7440000000000001,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",24.532159805297894,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic', 'datascikrid-exploring-survival-on-the-titanic', 'anishmayaramka-the-titanic-datset', 'aturner-exploring-survival-on-the-titanic']","[0.9999082947975734, 0.9999082947975734, 0.9999082947975734, 0.9999082947975734, 0.9999082947975734, 0.9999082947975734, 0.9999082947975734, 0.9999082947975734, 0.9999082947975734, 0.9999082947975734]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
table(full$Pclass, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
371,jkevin2010-titanic-survival-using-decision-trees,0.758,"['data.frame', 'library', 'nrow', 'plot', 'text', 'fancyRpartPlot', 'rpart', 'predict', 'read.csv', 'str', 'write.csv']","['ggplot2', 'readr', 'rpart', 'rattle', 'rpart.plot', 'RColorBrewer', 'base']",0.971025943756104,"['nrow', 'plot', 'predict', 'write.csv', 'data.frame', 'read.csv', 'rpart', 'library', 'text', 'str', 'fancyRpartPlot']",[],"['researchbigd-titanic-r-researchbigd', 'alexgomes3-titanic-with-r-datacamp-tutorial', 'jkevin2010-improved-model-for-titanic-survival', 'srinivasarajui-srini-s-r-titanic-solution', 'zahraatashgahy-r-titanic-1', 'tsfitz-titanic', 'turntrout-titanic-data-exploration', 'goblin-titanic-test', 'lagprophet-titanic', 'scout16-titanic-disaster-in-r']","[0.813343098193091, 0.7967193047178759, 0.539397570823222, 0.48197591470928614, 0.3506896885679336, 0.2621692354576332, 0.2587121843469679, 0.25119242307896833, 0.24338953676167494, 0.23478473433693672]","{'package:base': ['data.frame', 'library', 'nrow'], 'package:graphics': ['plot', 'text'], 'package:rattle': ['fancyRpartPlot'], 'package:rpart': ['rpart'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""data.frame"", ""library"", ""nrow""], ""package:graphics"": [""plot"", ""text""], ""package:rattle"": [""fancyRpartPlot""], ""package:rpart"": [""rpart""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase dataframe library nrow packagegraphics plot text packagerattle fancyRpartPlot packagerpart rpart packagestats predict packageutils readcsv str writecsv,"library(ggplot2)
library(readr)
library(rpart)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
str(train)
str(test)
my_tree_two <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = ""class"")
plot(my_tree_two)
text(my_tree_two)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(my_tree_two)
my_prediction <- predict(my_tree_two, newdata = test, type = ""class"")
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
nrow(my_solution)
write.csv(my_solution, file = ""my_solution.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,1,0,0,0,0
372,harryem-titanic-comparing-two-approaches-for-missing-data,0.529,"['count', 'summarise', 'rbind', 'complete', 'as.factor', 'as.integer', 'c', 'colSums', 'data.frame', 'factor', 'file.exists', 'findInterval', 'gsub', 'I', 'is.na', 'length', 'library', 'mean', 'names', 'order', 'paste', 'print', 'set.seed', 'subset', 'sum', 'table', 'unique', 'createDataPartition', 'group_by', 'n', 'aes', 'element_blank', 'element_text', 'facet_wrap', 'geom_bar', 'geom_point', 'ggplot', 'labs', 'qplot', 'scale_shape_manual', 'scale_y_continuous', 'theme', 'theme_bw', 'theme_set', 'xlim', 'viewport', 'cut2', 'mice', '.', 'ddply', 'join', 'importance', 'randomForest', 'varImpPlot', 'percent_format', 'predict', 'gather', 'head', 'object.size', 'read.csv', 'write.csv']","['ggplot2', 'scales', 'grid', 'plyr', 'dplyr', 'tidyr', 'Hmisc', 'mice', 'randomForest', 'caret', 'base']",9.21123504638672,"['summarise', 'labs', 'complete', 'mean', 'facet_wrap', '.', 'percent_format', 'findInterval', 'element_text', 'xlim', 'theme', 'object.size', 'is.na', 'subset', 'colSums', 'theme_set', 'viewport', 'names', 'print', 'count', 'as.factor', 'element_blank', 'n', 'qplot', 'mice', 'importance', 'varImpPlot', 'gather', 'set.seed', 'gsub', 'factor', 'as.integer', 'unique', 'join', 'geom_bar', 'length', 'scale_shape_manual', 'read.csv', 'theme_bw', 'table', 'randomForest', 'group_by', 'scale_y_continuous', 'c', 'aes', 'rbind', 'paste', 'createDataPartition', 'sum', 'geom_point', 'predict', 'write.csv', 'order', 'data.frame', 'ggplot', 'I', 'head', 'file.exists', 'library', 'cut2', 'ddply']",[],"['terfilip-titanic', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic', 'skhawaja-titanic-disaster-survival-099', 'rboimistruk-titanic-survivals-analysis', 'anweshaghosh-titanic-forkofmultiplescripts-r']","[0.828654160390233, 0.10143514910673265, 0.10143514910673265, 0.10117643671882062, 0.10117643671882062, 0.09334104438029998, 0.09334104438029998, 0.08565051785375814, 0.0827058344476585, 0.0800729454877466]","{'c(""package:dplyr"", ""package:plyr"")': ['count', 'summarise'], 'c(""package:mice"", ""package:base"")': ['rbind'], 'c(""package:mice"", ""package:tidyr"")': ['complete'], 'package:base': ['as.factor', 'as.integer', 'c', 'colSums', 'data.frame', 'factor', 'file.exists', 'findInterval', 'gsub', 'I', 'is.na', 'length', 'library', 'mean', 'names', 'order', 'paste', 'print', 'set.seed', 'subset', 'sum', 'table', 'unique'], 'package:caret': ['createDataPartition'], 'package:dplyr': ['group_by', 'n'], 'package:ggplot2': ['aes', 'element_blank', 'element_text', 'facet_wrap', 'geom_bar', 'geom_point', 'ggplot', 'labs', 'qplot', 'scale_shape_manual', 'scale_y_continuous', 'theme', 'theme_bw', 'theme_set', 'xlim'], 'package:grid': ['viewport'], 'package:Hmisc': ['cut2'], 'package:mice': ['mice'], 'package:plyr': ['.', 'ddply', 'join'], 'package:randomForest': ['importance', 'randomForest', 'varImpPlot'], 'package:scales': ['percent_format'], 'package:stats': ['predict'], 'package:tidyr': ['gather'], 'package:utils': ['head', 'object.size', 'read.csv', 'write.csv']}","{""c(""package:dplyr"", ""package:plyr"")"": [""count"", ""summarise""], ""c(""package:mice"", ""package:base"")"": [""rbind""], ""c(""package:mice"", ""package:tidyr"")"": [""complete""], ""package:base"": [""as.factor"", ""as.integer"", ""c"", ""colSums"", ""data.frame"", ""factor"", ""file.exists"", ""findInterval"", ""gsub"", ""I"", ""is.na"", ""length"", ""library"", ""mean"", ""names"", ""order"", ""paste"", ""print"", ""set.seed"", ""subset"", ""sum"", ""table"", ""unique""], ""package:caret"": [""createDataPartition""], ""package:dplyr"": [""group_by"", ""n""], ""package:ggplot2"": [""aes"", ""element_blank"", ""element_text"", ""facet_wrap"", ""geom_bar"", ""geom_point"", ""ggplot"", ""labs"", ""qplot"", ""scale_shape_manual"", ""scale_y_continuous"", ""theme"", ""theme_bw"", ""theme_set"", ""xlim""], ""package:grid"": [""viewport""], ""package:Hmisc"": [""cut2""], ""package:mice"": [""mice""], ""package:plyr"": [""."", ""ddply"", ""join""], ""package:randomForest"": [""importance"", ""randomForest"", ""varImpPlot""], ""package:scales"": [""percent_format""], ""package:stats"": [""predict""], ""package:tidyr"": [""gather""], ""package:utils"": [""head"", ""object.size"", ""read.csv"", ""write.csv""]}",cpackagedplyr packageplyr count summarise cpackagemice packagebase rbind cpackagemice packagetidyr complete packagebase asfactor asinteger c colSums dataframe factor fileexists findInterval gsub I isna length library mean names order paste print setseed subset sum table unique packagecaret createDataPartition packagedplyr groupby n packageggplot2 aes elementblank elementtext facetwrap geombar geompoint ggplot labs qplot scaleshapemanual scaleycontinuous theme themebw themeset xlim packagegrid viewport packageHmisc cut2 packagemice mice packageplyr  ddply join packagerandomForest importance randomForest varImpPlot packagescales percentformat packagestats predict packagetidyr gather packageutils head objectsize readcsv writecsv,"library(ggplot2)
library(scales)
library(grid)
library(plyr)
library(dplyr)
library(tidyr)
library(Hmisc)
library(mice)
library(randomForest)
library(caret)
traindata <- read.csv(""../input/train.csv"", stringsAsFactors = F)
testdata <- read.csv(""../input/test.csv"", stringsAsFactors = F)
c(object.size(traindata), object.size(testdata))
testdata$Survived <- ""NA""
merged <- rbind(traindata, testdata)
length(unique(merged$PassengerId)) == length(merged$PassengerId)
head(merged)
colSums(is.na(merged))
colSums(merged == """")
a <- colSums(is.na(testdata)) + colSums(testdata == """")
a <- names(a[is.na(a) | a != 0])
a
missing <- c()
for (i in a) {
    missing <- paste(missing, as.integer(!is.na(merged[i])^!merged[i] == """"), sep = """")
}
merged[missing == ""100"", ]
table(missing)
merged$Missing <- missing
merged$Pclass <- as.factor(merged$Pclass)
merged$Sex <- as.factor(merged$Sex)
g <- ggplot(merged[1:891, ], aes(x = Pclass, fill = factor(Survived))) + geom_bar(pos = ""dodge"") + labs(fill = ""Survived"", title = ""Survivor split by ticket class"")
dftemp <- merged[1:891, ] %>% group_by(Pclass) %>% summarise(Survive = sum(Survived == 1)/n(), DidNotSurvive = sum(Survived == 0)/n()) %>% gather(key = Group, value = Surv, Survive:DidNotSurvive)
gn <- ggplot(dftemp, aes(x = Pclass, y = Surv, fill = as.factor(Group))) + geom_bar(position = ""dodge"", stat = ""identity"") + scale_y_continuous(labels = percent_format()) + labs(y = ""Proportion Survived"", title = ""Survivor split by ticket class - Normalized"") + theme(legend.title = element_blank(), plot.title = element_text(size = 14))
vp <- viewport(width = 0.3, height = 0.3, x = 0.85, y = 0.85)
print(gn)
theme_set(theme_bw(base_size = 8))
print(g, vp = vp)
g <- ggplot(merged[1:891, ], aes(x = Pclass, fill = factor(Survived))) + geom_bar(pos = ""fill"") + facet_wrap(~Sex) + labs(y = ""Proportion Survived"", fill = ""Survived"", title = ""Survivor split by ticket class and gender"")
g + theme(plot.title = element_text(size = 14))
qplot(merged$Age, fill = I(""red""), xlab = ""Age"")
agebrackets <- c(0, 13, 18, 30, 55)
merged$Agebracket <- findInterval(merged$Age, agebrackets)
agetable <- data.frame(Agebracket = c(1, 2, 3, 4, 5), Age_range = c(""<13"", ""13-17"", ""18-29"", ""30-54"", ""55+""))
merged <- join(merged, agetable, by = ""Agebracket"")
merged$Agebracket <- as.factor(merged$Agebracket)
g <- ggplot(merged[1:891, ], aes(x = Age_range, fill = factor(Survived))) + geom_bar(pos = ""dodge"") + labs(fill = ""Survived"", title = ""Survivor split by age group"") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
dftemp <- merged[1:891, ] %>% group_by(Age_range) %>% summarise(Survive = sum(Survived == 1)/n(), DidNotSurvive = sum(Survived == 0)/n()) %>% gather(key = Group, value = Surv, Survive:DidNotSurvive)
gn <- ggplot(dftemp, aes(x = Age_range, y = Surv, fill = as.factor(Group))) + geom_bar(position = ""dodge"", stat = ""identity"") + scale_y_continuous(labels = percent_format()) + labs(y = ""Proportion Survived"", title = ""Survivor split by age group - Normalized"") + theme(legend.title = element_blank(), plot.title = element_text(size = 14))
vp <- viewport(width = 0.3, height = 0.3, x = 0.85, y = 0.85)
print(gn)
theme_set(theme_bw(base_size = 8))
print(g, vp = vp)
g <- ggplot(merged[1:891, ], aes(x = Age_range, fill = factor(Survived))) + geom_bar(pos = ""fill"") + labs(y = ""Proportion Survived"", fill = ""Survived"", title = ""Survivor split by age and gender - Normalized"") + facet_wrap(~Sex)
g + theme(plot.title = element_text(size = 14))
head(merged$Cabin, 30)
length(unique(merged$Cabin))/length(merged$Cabin)
merged$Cabin[28]
subset(merged, Cabin == ""C23 C25 C27"")
merged$HasCabin <- as.factor(!(merged$Cabin == """"))
g <- ggplot(merged[1:891, ], aes(x = HasCabin, fill = factor(Survived))) + geom_bar()
g <- g + facet_wrap(~Pclass) + labs(title = ""Survivor split by class and Cabin"") + theme(axis.text.x = element_text(angle = 90, hjust = 1))
gn <- ggplot(merged[1:891, ], aes(x = HasCabin, fill = factor(Survived))) + geom_bar(pos = ""fill"")
gn <- gn + facet_wrap(~Pclass) + labs(y = ""Proportion Survived"", fill = ""Survived"", title = ""Survivor split by class and Cabin - Normalized"") + theme(plot.title = element_text(size = 14))
vp <- viewport(width = 0.35, height = 0.35, x = 0.85, y = 0.8)
print(gn)
theme_set(theme_bw(base_size = 8))
print(g, vp = vp)
qplot(merged$Fare, bins = 150, fill = I(""red""), xlab = ""Fare"")
a <- subset(merged, is.na(merged$Fare))
a
merged[a[, 1], ]$Fare <- mean(subset(merged, Pclass == 3)$Fare, na.rm = TRUE)
merged$Farebracket <- as.factor(cut2(merged$Fare, g = 5))
g <- ggplot(merged[1:891, ], aes(x = Farebracket, fill = factor(Survived))) + geom_bar(pos = ""fill"")
g <- g + facet_wrap(~Pclass) + labs(y = ""Proportion Survived"", fill = ""Survived"", title = ""Survivor split by class and Fare Bracket - Normalized"")
g <- g + theme(axis.text.x = element_text(angle = 90, hjust = 1), plot.title = element_text(size = 14))
g
subset(merged, Fare == 0)
head(order(merged$Fare, decreasing = TRUE))
merged[259, ]
subset(merged, Fare == merged$Fare[259])
g <- ggplot(merged[1:891, ], aes(x = Fare, y = Age, shape = factor(Survived), color = factor(Survived))) + geom_point() + scale_shape_manual(values = c(1, 3)) + xlim(0, 300)
g <- g + facet_wrap(~Pclass) + labs(fill = ""Survived"", title = ""Survival scatterplot of Fare and Age, Split by Class"") + theme(plot.title = element_text(size = 14))
g
merged$Title <- gsub(""(.*, )|(\\..*)"", """", merged$Name)
count(merged, Title)
merged$Title <- as.factor(merged$Title)
a <- count(merged, Title)
a <- a[a$n > 2, ]$Title
dftemp <- merged[1:891, ]
dftemp <- dftemp[dftemp$Title %in% a, ]
g <- ggplot(dftemp, aes(x = Title, fill = factor(Survived))) + geom_bar(pos = ""fill"")
g <- g + facet_wrap(~Pclass) + labs(y = ""Proportion Survived"", fill = ""Survived"", title = ""Survivor split by class and Title - Normalized"") + theme(plot.title = element_text(size = 14))
g
merged <- ddply(merged, .(Ticket), transform, Ticketsize = length(Ticket))
merged$Ticketsize <- as.factor(merged$Ticketsize)
merged <- merged[order(merged$PassengerId), ]
count(merged, Embarked)
subset(merged, Embarked == """")
merged[c(62, 830), ""Embarked""] <- ""S""
merged$Embarked <- as.factor(merged$Embarked)
m1 <- merged[, !names(merged) %in% c(""Agebracket"", ""Age_range"")]
mice_ages <- mice(m1[, !names(m1) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"", ""Missing"")], method = ""rf"", seed = 1234)
mice_out <- mice::complete(mice_ages)
merged$Age <- mice_out$Age
merged$Agebracket <- findInterval(merged$Age, agebrackets)
merged <- join(merged, agetable, by = ""Agebracket"")
colSums(is.na(merged)) + colSums(merged == """")
mergedtrain <- merged[1:891, ]
mergedtest <- merged[892:1309, ]
mergedtrain$Survived <- as.factor(traindata$Survived)
set.seed(414)
inTrain <- createDataPartition(y = mergedtrain$Survived, p = 0.75, list = FALSE)
train <- mergedtrain[inTrain, ]
test <- mergedtrain[-inTrain, ]
set.seed(414)
rf_agegroups <- randomForest(factor(Survived) ~ Pclass + Sex + Farebracket + Agebracket + HasCabin + Ticketsize + Embarked + Title, data = mergedtrain, na.action = na.pass, nodesize = 20)
rf_agegroups
rf_age <- randomForest(factor(Survived) ~ Pclass + Sex + Farebracket + Age + HasCabin + Ticketsize + Embarked + Title, data = mergedtrain, na.action = na.pass, nodesize = 20)
rf_age
rf_age$confusion
varImpPlot(rf_age)
importance(rf_age)
unique(merged$Missing)
dftemp <- mergedtrain[, c(""Survived"", ""Pclass"", ""Sex"", ""Fare"", ""Age"", ""HasCabin"", ""Ticketsize"", ""Embarked"", ""Title"", ""Missing"")]
rf110 <- randomForest(factor(Survived) ~ ., data = subset(dftemp[, !names(dftemp) %in% c(""HasCabin"")], dftemp$Missing == ""110""))
rf111 <- randomForest(factor(Survived) ~ ., data = subset(dftemp[, !names(dftemp) %in% c()], dftemp$Missing == ""111""))
rf010 <- randomForest(factor(Survived) ~ ., data = subset(dftemp[, !names(dftemp) %in% c(""Age"", ""HasCabin"")], dftemp$Missing == ""010""))
rf011 <- randomForest(factor(Survived) ~ ., data = subset(dftemp[, !names(dftemp) %in% c(""Age"")], dftemp$Missing == ""011""))
rf100 <- rf111
rf110$confusion
rf111$confusion
rf010$confusion
rf011$confusion
p110 <- predict(rf110, mergedtest[mergedtest$Missing == ""110"", ])
p111 <- predict(rf110, mergedtest[mergedtest$Missing == ""111"", ])
p010 <- predict(rf110, mergedtest[mergedtest$Missing == ""010"", ])
p011 <- predict(rf110, mergedtest[mergedtest$Missing == ""011"", ])
p100 <- predict(rf110, mergedtest[mergedtest$Missing == ""100"", ])
submission <- rbind(data.frame(PassengerId = names(p110), Survived = p110), data.frame(PassengerId = names(p111), Survived = p111), data.frame(PassengerId = names(p010), Survived = p010), data.frame(PassengerId = names(p011), Survived = p011), data.frame(PassengerId = names(p100), Survived = p100))
if (!file.exists(""./predictions.csv"")) {
    write.csv(submission, file = ""./predictions.csv"", row.names = F)
}",1,0,1,1,0,0,0,1,0,0,0,0,0,0
373,chuanhuiliu-one-solution-to-titanic-survival-analysis,0.7609999999999999,"['as.factor', 'as.numeric', 'c', 'cbind', 'data.frame', 'factor', 'gsub', 'is.na', 'levels', 'library', 'mean', 'table', 'bind_rows', 'aes', 'facet_grid', 'geom_bar', 'geom_boxplot', 'ggplot', 'labs', 'scale_x_continuous', 'read_csv', 'rpart', 'rpart.plot', 'complete.cases', 'formula', 'predict', 'write.csv']","['tidyverse', 'rpart', 'rpart.plot', 'caret', 'ggplot2', 'Hmisc', 'base']",4.2165789604187,"['labs', 'mean', 'is.na', 'levels', 'scale_x_continuous', 'geom_boxplot', 'rpart', 'as.factor', 'gsub', 'factor', 'geom_bar', 'table', 'read_csv', 'c', 'aes', 'as.numeric', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'ggplot', 'rpart.plot', 'library', 'cbind', 'complete.cases', 'formula', 'facet_grid']",[],"['jasonhit-first-script-for-kaggle-titanic', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'tetyama-trial-titanic', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'msantos68-exploring-survival-on-the-titanic', 'bonesaw98616-exploring-survival-on-the-titanic', 'researchbigd-titanic-forkedfrommeganscript', 'mira5b-exploring-survival-on-the-titanic']","[0.7666662074163463, 0.7633898711229825, 0.7631126987367005, 0.7631126987367005, 0.7595376489923596, 0.7589589555979939, 0.7572974022229004, 0.7561154086416239, 0.7560776629780448, 0.7555615405436761]","{'package:base': ['as.factor', 'as.numeric', 'c', 'cbind', 'data.frame', 'factor', 'gsub', 'is.na', 'levels', 'library', 'mean', 'table'], 'package:dplyr': ['bind_rows'], 'package:ggplot2': ['aes', 'facet_grid', 'geom_bar', 'geom_boxplot', 'ggplot', 'labs', 'scale_x_continuous'], 'package:readr': ['read_csv'], 'package:rpart': ['rpart'], 'package:rpart.plot': ['rpart.plot'], 'package:stats': ['complete.cases', 'formula', 'predict'], 'package:utils': ['write.csv']}","{""package:base"": [""as.factor"", ""as.numeric"", ""c"", ""cbind"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""levels"", ""library"", ""mean"", ""table""], ""package:dplyr"": [""bind_rows""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""ggplot"", ""labs"", ""scale_x_continuous""], ""package:readr"": [""read_csv""], ""package:rpart"": [""rpart""], ""package:rpart.plot"": [""rpart.plot""], ""package:stats"": [""complete.cases"", ""formula"", ""predict""], ""package:utils"": [""write.csv""]}",packagebase asfactor asnumeric c cbind dataframe factor gsub isna levels library mean table packagedplyr bindrows packageggplot2 aes facetgrid geombar geomboxplot ggplot labs scalexcontinuous packagereadr readcsv packagerpart rpart packagerpartplot rpartplot packagestats completecases formula predict packageutils writecsv,"library(tidyverse)
library(rpart)
library(rpart.plot)
library(caret)
library(ggplot2)
library(Hmisc)
train <- read_csv(""../input/train.csv"")
test <- read_csv(""../input/test.csv"")
ggplot(train, aes(x = Embarked, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + labs(x = ""Embarked"")
ggplot(train, aes(x = Sex, fill = factor(Survived))) + geom_bar(position = ""dodge"") + facet_grid(. ~ Pclass) + labs(title = ""How Different Pclass impact the survival of male&female passengers"", x = ""Pclass"", y = ""Count"")
train$FamilySize <- train$SibSp + train$Parch
ggplot(train, aes(x = FamilySize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"")
train$Child[train$Age < 16] <- ""Child""
train$Child[train$Age >= 16] <- ""Adult""
table(train$Child, train$Survived)
ggplot(train, aes(x = Embarked, y = Fare)) + geom_boxplot(aes(fill = factor(Pclass)))
train$Embarked[is.na(train$Embarked)] <- ""C""
test1 <- test[c(test$Embarked == ""S""), ]
test2 <- test1[c(test1$Pclass == 3), ]
test3 <- test2[complete.cases(test2$Fare), ]
test$Fare[is.na(test$Fare)] <- mean(test3$Fare)
full <- bind_rows(train, test)
full$Child[full$Age < 16] <- ""Child""
full$Child[full$Age >= 16] <- ""Adult""
full$FamilySize <- full$SibSp + full$Parch
full$FsizeD[full$FamilySize == 0] <- ""singleton""
full$FsizeD[full$FamilySize < 4 & full$FamilySize > 0] <- ""small""
full$FsizeD[full$FamilySize >= 4] <- ""large""
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Sex <- as.factor(full$Sex)
full$Pclass <- as.factor(full$Pclass)
full$Title <- as.factor(full$Title)
full$Embarked <- as.factor(full$Embarked)
full$FsizeD <- as.factor(full$FsizeD)
train <- full[1:891, ]
test <- full[892:1309, ]
fol <- formula(Survived ~ Title + Fare + Pclass + Age)
model <- rpart(fol, method = ""class"", data = train)
rpart.plot(model, branch = 0, branch.type = 2, type = 1, extra = 102, shadow.col = ""pink"", box.col = ""gray"", split.col = ""magenta"", main = ""Decision tree for model"")
rpred <- predict(model, newdata = test, type = ""class"")
Survived <- as.numeric(levels(rpred)[rpred])
PassengerId <- test$PassengerId
solution <- cbind(PassengerId, Survived)
write.csv(data.frame(solution), file = ""my solution.csv"", row.names = F)",0,0,1,0,0,0,0,1,0,1,0,0,0,0
375,mullayilkannan-randomforest-with-knn-imputation-titanic,0.768,"['rbind', 'as.factor', 'c', 'diag', 'floor', 'library', 'nrow', 'print', 'sample', 'seq_len', 'set.seed', 'sum', 'summary', 'table', 'knnImputation', 'importance', 'randomForest', 'predict', 'read.csv', 'write.csv']","['modelr', 'broom', 'mice', 'DMwR', 'randomForest', 'base']",3.38458204269409,"['nrow', 'knnImputation', 'print', 'as.factor', 'summary', 'importance', 'seq_len', 'set.seed', 'read.csv', 'table', 'randomForest', 'c', 'diag', 'rbind', 'sample', 'sum', 'predict', 'write.csv', 'library', 'floor']",[],"['mullayilkannan-decision-tree-titanic', 'emj777-decision-tree-titanic-r', 'nozzo1-my-titanic-r-entry-2', 'renegarxia-titanic-r', 'rtreit-kaggle-titanic-tutorial', 'gravitymhxy2-titanic', 'tsfitz-titanic', 'shashankseth-basic-eda-and-ml-on-titanic-dataset', 'liudj2008-titanic', 'liudj2008-fork-of-titanic']","[0.42483495324862325, 0.34971718333783847, 0.2896760493807514, 0.2597481530896329, 0.15776898779490106, 0.14167237185428938, 0.1379615975874179, 0.1368610475130513, 0.13150557429206858, 0.13098314402495928]","{'c(""package:mice"", ""package:base"")': ['rbind'], 'package:base': ['as.factor', 'c', 'diag', 'floor', 'library', 'nrow', 'print', 'sample', 'seq_len', 'set.seed', 'sum', 'summary', 'table'], 'package:DMwR': ['knnImputation'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:mice"", ""package:base"")"": [""rbind""], ""package:base"": [""as.factor"", ""c"", ""diag"", ""floor"", ""library"", ""nrow"", ""print"", ""sample"", ""seq_len"", ""set.seed"", ""sum"", ""summary"", ""table""], ""package:DMwR"": [""knnImputation""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackagemice packagebase rbind packagebase asfactor c diag floor library nrow print sample seqlen setseed sum summary table packageDMwR knnImputation packagerandomForest importance randomForest packagestats predict packageutils readcsv writecsv,"library(modelr)
library(broom)
library(mice)
library(DMwR)
library(randomForest)
set.seed(12345)
train_set <- read.csv(""../input/train.csv"")
test_set <- read.csv(""../input/test.csv"")
test_set$Survived <- NA
dataset <- rbind(train_set, test_set)
summary(dataset)
dataset$Embarked[dataset$Embarked == """"] <- ""S""
summary(dataset)
relevant <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked"")
dataset1 <- dataset[, relevant]
dataset1 <- knnImputation(dataset1)
dataset1$Survived = dataset$Survived
trainset = dataset1[1:nrow(train_set), ]
trainset
summary(trainset)
validation_set = dataset1[-(1:nrow(train_set)), ]
nrow(validation_set)
summary(validation_set)
smp_siz = floor(0.8 * nrow(trainset))
print(smp_siz)
train_ind = sample(seq_len(nrow(trainset)), size = smp_siz)
train = trainset[train_ind, ]
test = trainset[-train_ind, ]
fit <- randomForest(formula = as.factor(Survived) ~ Sex + Age + Fare + Parch + Pclass + SibSp, data = train, ntree = 2500, importance = TRUE)
importance(fit)
test$PSurvived = predict(fit, test)
CM <- table(test$Survived, test$PSurvived)
CM
accuracy = (sum(diag(CM)))/sum(CM)
print(""accuracy="")
print(accuracy)
validation_set$Survived = predict(fit, validation_set)
my_solution = validation_set[c(""PassengerId"", ""Survived"")]
write.csv(my_solution, ""random_forest.csv"", row.names = FALSE)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
377,djohnbar-titanic-rf,0.7659999999999999,"['as.factor', 'as.integer', 'as.numeric', 'c', 'colSums', 'data.frame', 'is.na', 'library', 'list.files', 'mean', 'options', 'table', 'which', 'bind_rows', 'randomForest', 'varImpPlot', 'cor', 'glm', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['tidyverse', 'randomForest', 'base']",1.82290315628052,"['mean', 'which', 'cor', 'is.na', 'glm', 'colSums', 'options', 'as.factor', 'varImpPlot', 'str', 'as.integer', 'read.csv', 'table', 'randomForest', 'c', 'as.numeric', 'predict', 'write.csv', 'list.files', 'bind_rows', 'data.frame', 'head', 'library']",[],"['djohnbar-fork-of-titanic-rf-w-titles', 'maza91-titanic-logistic-regression', 'domini-titanic-data-exploration-and-modelling', 'harsh2-exploring-the-titanic-dataset', 'zahoorahmad-titanic-2nd-degree-families-and-majority-voting', 'ushasri-titanic-2nd-degree-families-and-majority-voting', 'erikbruin-titanic-2nd-degree-families-and-majority-voting', 'ravikrishnareddy-titanic-survival-prediction', 'ablearcher-my-titanic', 'aeintngon-titanic-exploratory-analysis']","[0.9387302548120614, 0.8084337144335718, 0.7448858171710625, 0.7277531858154402, 0.7192288941382368, 0.7192288941382368, 0.7172829397026096, 0.703508643659585, 0.6940871435878067, 0.6694799797950394]","{'package:base': ['as.factor', 'as.integer', 'as.numeric', 'c', 'colSums', 'data.frame', 'is.na', 'library', 'list.files', 'mean', 'options', 'table', 'which'], 'package:dplyr': ['bind_rows'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:stats': ['cor', 'glm', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""package:base"": [""as.factor"", ""as.integer"", ""as.numeric"", ""c"", ""colSums"", ""data.frame"", ""is.na"", ""library"", ""list.files"", ""mean"", ""options"", ""table"", ""which""], ""package:dplyr"": [""bind_rows""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:stats"": [""cor"", ""glm"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",packagebase asfactor asinteger asnumeric c colSums dataframe isna library listfiles mean options table which packagedplyr bindrows packagerandomForest randomForest varImpPlot packagestats cor glm predict packageutils head readcsv str writecsv,"library(tidyverse)
library(randomForest)
list.files(path = ""../input"")
t1 <- read.csv(""../input/train.csv"", stringsAsFactors = F)
t2 <- read.csv(""../input/test.csv"", stringsAsFactors = F)
all <- bind_rows(t1, t2)
colSums(is.na(all))
all$Fare[all$Fare == 0] <- NA
all$Fare <- as.numeric(all$Fare)
all$Embarked[all$Embarked == """"] <- ""S""
all$Embarked[all$Embarked == ""C""] <- 0
all$Embarked[all$Embarked == ""Q""] <- 1
all$Embarked[all$Embarked == ""S""] <- 2
all$Embarked <- as.numeric(all$Embarked)
all$Sex[all$Sex == ""female""] <- 1
all$Sex[all$Sex == ""male""] <- 0
all$Sex <- as.numeric(all$Sex)
str(all)
cor(all[c(""Fare"", ""Age"", ""SibSp"", ""Parch"", ""Pclass"", ""Sex"", ""Embarked"", ""Survived"")], use = ""c"")
not.missing <- which(!is.na(all[, c(""Fare"", ""Age"")]))
missing.fare <- which(is.na(all[, c(""Fare"")]))
missing.fare
model <- glm(Fare ~ Pclass + Embarked, data = all[not.missing, ])
pred <- predict(model, all[missing.fare, ])
data.frame(pred)
all$Fare[missing.fare] <- pred
not.missing <- which(!is.na(all$Age))
missing <- which(is.na(all$Age))
model <- glm(Age ~ Pclass + Embarked, data = all[not.missing, ])
pred <- predict(model, all[missing, ])
data.frame(pred = head(pred))
all$Age[missing] <- pred
train.val <- as.integer(891 * 0.7)
test.val <- 891 - train.val
all$Survived <- as.factor(all$Survived)
train <- all[1:train.val, ]
test <- all[624:891, ]
model <- randomForest(Survived ~ Sex + Pclass + Fare + Embarked, data = train)
pred <- predict(model, test)
table(pred = pred, actual = test$Survived)
mean(pred == test$Survived)
model
options(repr.plot.width = 7, repr.plot.height = 5)
varImpPlot(model, sort = T)
pred <- predict(model, all[892:1309, ])
submit <- data.frame(PassengerId = 892:1309, Survived = pred)
write.csv(submit, file = ""RF_submission.csv"", row.names = F)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
379,efezinoerome-exploring-survival-on-the-titanic,0.7440000000000001,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",29.292387008667003,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic', 'datascikrid-exploring-survival-on-the-titanic', 'anishmayaramka-the-titanic-datset', 'aturner-exploring-survival-on-the-titanic']","[0.9991827392285395, 0.9991827392285395, 0.9991827392285395, 0.9991827392285395, 0.9991827392285395, 0.9991827392285395, 0.9991827392285395, 0.9991827392285395, 0.9991827392285395, 0.9991827392285395]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity\nbased on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
380,naveennafee-titanic-survival,0.7490000000000001,"['as.factor', 'c', 'colnames', 'colSums', 'data.frame', 'gsub', 'is.na', 'length', 'library', 'mean', 'rbind', 'sapply', 'summary', 'table', 'trimws', 'unique', 'confusionMatrix', 'impute', 'aes', 'coord_flip', 'geom_bar', 'geom_boxplot', 'ggplot', 'ggtitle', 'scale_x_reverse', 'theme_light', 'ylab', 'theme_few', 'legend', 'plot', 'randomForest', 'varImpPlot', 'rpart', 'rpart.plot', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['tidyverse', 'ggthemes', 'caret', 'e1071', 'rpart', 'rpart.plot', 'randomForest', 'base']",4.24151802062988,"['mean', 'coord_flip', 'is.na', 'colSums', 'scale_x_reverse', 'confusionMatrix', 'geom_boxplot', 'theme_few', 'rpart', 'as.factor', 'summary', 'impute', 'sapply', 'varImpPlot', 'str', 'theme_light', 'gsub', 'colnames', 'unique', 'geom_bar', 'length', 'read.csv', 'table', 'randomForest', 'c', 'aes', 'ylab', 'rbind', 'plot', 'predict', 'legend', 'write.csv', 'ggtitle', 'data.frame', 'ggplot', 'rpart.plot', 'head', 'library', 'trimws']",[],"['researchbigd-titanic-forkedfrommeganscript', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'xxxmatxxx-titanic-getting-started-with-randomforest', 'ashutoshds-titanic-rf-prediction-0-81818', 'msantos68-exploring-survival-on-the-titanic', 'tetyama-trial-titanic', 'mira5b-exploring-survival-on-the-titanic', 'jww001-exploring-survival-on-the-titanicqw']","[0.6980664691543982, 0.6958728251162989, 0.695494866055352, 0.695494866055352, 0.6954247237020985, 0.694237971464577, 0.6935363060583694, 0.6916871772978476, 0.6891508670251894, 0.6888196505817934]","{'package:base': ['as.factor', 'c', 'colnames', 'colSums', 'data.frame', 'gsub', 'is.na', 'length', 'library', 'mean', 'rbind', 'sapply', 'summary', 'table', 'trimws', 'unique'], 'package:caret': ['confusionMatrix'], 'package:e1071': ['impute'], 'package:ggplot2': ['aes', 'coord_flip', 'geom_bar', 'geom_boxplot', 'ggplot', 'ggtitle', 'scale_x_reverse', 'theme_light', 'ylab'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['legend', 'plot'], 'package:randomForest': ['randomForest', 'varImpPlot'], 'package:rpart': ['rpart'], 'package:rpart.plot': ['rpart.plot'], 'package:stats': ['predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""package:base"": [""as.factor"", ""c"", ""colnames"", ""colSums"", ""data.frame"", ""gsub"", ""is.na"", ""length"", ""library"", ""mean"", ""rbind"", ""sapply"", ""summary"", ""table"", ""trimws"", ""unique""], ""package:caret"": [""confusionMatrix""], ""package:e1071"": [""impute""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""geom_bar"", ""geom_boxplot"", ""ggplot"", ""ggtitle"", ""scale_x_reverse"", ""theme_light"", ""ylab""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""legend"", ""plot""], ""package:randomForest"": [""randomForest"", ""varImpPlot""], ""package:rpart"": [""rpart""], ""package:rpart.plot"": [""rpart.plot""], ""package:stats"": [""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",packagebase asfactor c colnames colSums dataframe gsub isna length library mean rbind sapply summary table trimws unique packagecaret confusionMatrix packagee1071 impute packageggplot2 aes coordflip geombar geomboxplot ggplot ggtitle scalexreverse themelight ylab packageggthemes themefew packagegraphics legend plot packagerandomForest randomForest varImpPlot packagerpart rpart packagerpartplot rpartplot packagestats predict packageutils head readcsv str writecsv,"library(""tidyverse"")
library(""ggthemes"")
library(""caret"")
library(""e1071"")
library(""rpart"")
library(""rpart.plot"")
library(""randomForest"")
training <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
testing <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
testing$Survived <- NA
full <- rbind(training, testing)
str(full)
colSums(is.na(full))
colSums(full == """")
full$Cabin <- NULL
str(full)
table(full$Embarked)
full[full$Embarked == """", ]$Embarked <- ""S""
table(full$Embarked)
table(full$Embarked, full$Survived)
full$Fare[1044] <- mean(full[full$Pclass == ""3"", ]$Fare, na.rm = T)
head(full$Name)
full$title <- gsub(""(.*,)|(\\..*)"", """", full$Name)
unique(full$title)
full$title <- trimws(full$title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full[full$title == ""Mlle"", ]$title <- ""Miss""
full[full$title == ""Ms"", ]$title <- ""Miss""
full[full$title == ""Mme"", ]$title <- ""Mr""
full[full$title %in% rare_title, ]$title <- ""Rare""
table(full$title)
factor_check <- sapply(full, function(x) (length(unique(x))))
factor_check
factor_var <- c(""Survived"", ""Sex"", ""Embarked"", ""Pclass"")
for (i in factor_var) {
    full[, i] <- as.factor(full[, i])
}
str(full)
ggplot(full[1:891, ], aes(x = Embarked, fill = Survived)) + geom_bar(position = ""dodge"") + ggtitle(""Port of Embarkation vs Survived"") + ylab(""Survived"")
ggplot(full[1:891, ], aes(x = title, fill = Survived)) + geom_bar() + ggtitle(""Title of the Person vs Survived"") + ylab(""Survived"")
ggplot(full[1:891, ], aes(x = Sex, fill = Survived)) + geom_bar(position = ""dodge"") + ggtitle(""Sex vs Survived"") + ylab(""Survived"")
full$Family_count <- full$SibSp + full$Parch + 1
table(full$Family_count)
ggplot(full[1:891, ], aes(x = Family_count, fill = Survived)) + geom_bar(position = ""dodge"") + ggtitle(""Family Count vs Survived"") + ylab(""Survived"") + coord_flip() + scale_x_reverse(breaks = c(1:11)) + theme_light()
full$Family_size_ratio[full$Family_count <= 2] <- ""Small""
full$Family_size_ratio[full$Family_count >= 3 & full$Family_count <= 5] <- ""Medium""
full$Family_size_ratio[full$Family_count >= 6] <- ""Big""
ggplot(full[1:891, ], aes(x = Family_size_ratio, fill = Survived)) + geom_bar(position = ""dodge"") + ggtitle(""Family Size Ratio vs Survived"") + ylab(""Survived"")
head(full)
full$Age <- Hmisc::impute(full$Age, mean)
ggplot(full[1:891, ], aes(x = Survived, y = Age)) + geom_boxplot(color = c(""blue"", ""red"")) + theme_few() + ggtitle(""Age vs Survived"")
ggplot(full[1:891, ], aes(x = Pclass, fill = Survived)) + geom_bar(position = ""dodge"") + ggtitle(""PClass vs Survived"")
str(full)
full$Family_size_ratio <- as.factor(full$Family_size_ratio)
full$title <- as.factor(full$title)
train_model <- full[1:891, c(""Survived"", ""Age"", ""Sex"", ""Family_count"", ""Family_size_ratio"", ""Fare"", ""title"")]
test_model <- full[892:1309, c(""Survived"", ""Age"", ""Sex"", ""Family_count"", ""Family_size_ratio"", ""Fare"", ""title"")]
rf_model <- randomForest(Survived ~ ., data = train_model, importance = T)
rf_model
predicted <- predict(rf_model, train_model)
confusionMatrix(predicted, train_model$Survived)
plot(rf_model)
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
varImpPlot(rf_model, main = ""RANDOM FOREST MODEL"")
rp_model <- rpart(Survived ~ ., train_model, method = ""class"")
summary(rp_model)
rpart.plot(rp_model, tweak = 0.8)
rp_predicted <- predict(rp_model, train_model, type = ""class"")
confusionMatrix(rp_predicted, train_model$Survived)
submission <- data.frame(PassengerId = testing$PassengerId)
submission$Survived <- predict(rf_model, test_model)
write.csv(submission, file = ""random_forest_r_submission.csv"", row.names = FALSE)",1,0,1,0,0,0,0,1,0,1,0,1,0,0
381,frankfeng-titanic,0.768,"['as.factor', 'c', 'data.frame', 'factor', 'is.na', 'library', 'rbind', 'randomForest', 'rpart', 'median', 'predict', 'read.csv', 'write.csv']","['randomForest', 'rpart', 'rpart', 'base']",1.6211109161377,"['rbind', 'factor', 'predict', 'write.csv', 'median', 'data.frame', 'read.csv', 'randomForest', 'as.factor', 'rpart', 'library', 'c', 'is.na']",[],"['wongalan2002-titanic-with-neural-network', 'aer503-titanic-exploring-survival-and-random-forest-test', 'juverstraeten-titanic-test-5-decision-tree-w-cabin', 'parthchaudhary-titanic-submission', 'srinivasarajui-srini-s-r-titanic-solution', 'alwortman-titanic-test-script', 'zahraatashgahy-r-titanic-1', 'goblin-titanic-test', 'turntrout-titanic-data-exploration', 'jkevin2010-improved-model-for-titanic-survival']","[0.9492054290089966, 0.9268425203762077, 0.8491033952439205, 0.6747350265211708, 0.6690654309381864, 0.6273172093488745, 0.2381808042184976, 0.19922923947069646, 0.1945404240943072, 0.17667955546950456]","{'package:base': ['as.factor', 'c', 'data.frame', 'factor', 'is.na', 'library', 'rbind'], 'package:randomForest': ['randomForest'], 'package:rpart': ['rpart'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.factor"", ""c"", ""data.frame"", ""factor"", ""is.na"", ""library"", ""rbind""], ""package:randomForest"": [""randomForest""], ""package:rpart"": [""rpart""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase asfactor c dataframe factor isna library rbind packagerandomForest randomForest packagerpart rpart packagestats median predict packageutils readcsv writecsv,"library(randomForest)
library(rpart)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
test$Survived <- 0
all_data <- rbind(train, test)
all_data$Embarked[c(62, 830)] <- ""S""
all_data$Embarked <- factor(all_data$Embarked)
all_data$Fare[1044] <- median(all_data$Fare, na.rm = TRUE)
library(rpart)
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked, data = all_data[!is.na(all_data$Age), ], method = ""anova"")
all_data$Age[is.na(all_data$Age)] <- predict(predicted_age, all_data[is.na(all_data$Age), ])
train <- all_data[1:891, ]
test <- all_data[892:1309, ]
my_tree <- randomForest(as.factor(Survived) ~ Age + Sex + Pclass + SibSp + Parch + Embarked + Fare, data = train, importance = TRUE, ntree = 1000)
my_prediction <- predict(my_tree, test, type = ""class"")
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = ""my_solution.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
382,phubert-titanic-mackenzie-aula07,0.778,"['filter', 'as.factor', 'c', 'cbind', 'colnames', 'data.frame', 'eval', 'factor', 'floor', 'integer', 'is.na', 'length', 'library', 'matrix', 'mean', 'nrow', 'numeric', 'order', 'paste0', 'print', 'rbind', 'rep', 'sample', 'subset', 'sum', 'Sys.time', 'which', 'sample_n', 'select', 'aes', 'element_text', 'geom_histogram', 'ggplot', 'ggtitle', 'theme', 'xlab', 'ylab', 'randomForest', 'rpart', 'rpart.plot', 'predict', 'sd', 'read.csv', 'write.csv']","['tidyverse', 'rpart', 'rpart.plot', 'randomForest', 'base']",1.2784871816635102,"['nrow', 'mean', 'element_text', 'which', 'theme', 'is.na', 'subset', 'sample_n', 'print', 'eval', 'rpart', 'as.factor', 'filter', 'numeric', 'rep', 'geom_histogram', 'xlab', 'integer', 'Sys.time', 'factor', 'colnames', 'matrix', 'length', 'sd', 'read.csv', 'paste0', 'randomForest', 'c', 'aes', 'ylab', 'rbind', 'sample', 'sum', 'predict', 'write.csv', 'order', 'ggtitle', 'data.frame', 'ggplot', 'rpart.plot', 'library', 'cbind', 'select', 'floor']",[],"['phubert-mackenzie-bigdata-titanic-knn', 'phubert-titanic-mackenzie-aula08', 'amodi8-titanic-exploring-survival-using-machine-learning', 'liudj2008-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'jacekpardyak-mytitanicscript', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic']","[0.4512939202423702, 0.2235715290657347, 0.10220801085696872, 0.09444553624233534, 0.092685102683932, 0.092685102683932, 0.09248622804470795, 0.09248622804470795, 0.09093480196518522, 0.08523524653334284]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cbind', 'colnames', 'data.frame', 'eval', 'factor', 'floor', 'integer', 'is.na', 'length', 'library', 'matrix', 'mean', 'nrow', 'numeric', 'order', 'paste0', 'print', 'rbind', 'rep', 'sample', 'subset', 'sum', 'Sys.time', 'which'], 'package:dplyr': ['sample_n', 'select'], 'package:ggplot2': ['aes', 'element_text', 'geom_histogram', 'ggplot', 'ggtitle', 'theme', 'xlab', 'ylab'], 'package:randomForest': ['randomForest'], 'package:rpart': ['rpart'], 'package:rpart.plot': ['rpart.plot'], 'package:stats': ['predict', 'sd'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cbind"", ""colnames"", ""data.frame"", ""eval"", ""factor"", ""floor"", ""integer"", ""is.na"", ""length"", ""library"", ""matrix"", ""mean"", ""nrow"", ""numeric"", ""order"", ""paste0"", ""print"", ""rbind"", ""rep"", ""sample"", ""subset"", ""sum"", ""Sys.time"", ""which""], ""package:dplyr"": [""sample_n"", ""select""], ""package:ggplot2"": [""aes"", ""element_text"", ""geom_histogram"", ""ggplot"", ""ggtitle"", ""theme"", ""xlab"", ""ylab""], ""package:randomForest"": [""randomForest""], ""package:rpart"": [""rpart""], ""package:rpart.plot"": [""rpart.plot""], ""package:stats"": [""predict"", ""sd""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cbind colnames dataframe eval factor floor integer isna length library matrix mean nrow numeric order paste0 print rbind rep sample subset sum Systime which packagedplyr samplen select packageggplot2 aes elementtext geomhistogram ggplot ggtitle theme xlab ylab packagerandomForest randomForest packagerpart rpart packagerpartplot rpartplot packagestats predict sd packageutils readcsv writecsv,"library(tidyverse)
dados = read.csv(""../input/train.csv"", sep = "","", header = T)
library(rpart)
library(rpart.plot)
dados$Survived = as.factor(dados$Survived)
dadosBoot = sample_n(dados, size = nrow(dados), replace = T)
mod1 = rpart(Survived ~ Sex + Age + Pclass + SibSp + Parch + Fare, data = dadosBoot)
rpart.plot(mod1)
dados = dados %>% select(-c(""Name"", ""Ticket"", ""Cabin"", ""Embarked""))
dados$Survived = factor(dados$Survived)
colnames(dados)
passageiro_teste = sample_n(dados, 1)
dados_train = dados %>% filter(PassengerId != passageiro_teste$PassengerId)
nboot = 100
nbag = 30
nvar = 3
i = 1
prev_arvore = matrix(nrow = nboot, ncol = 1)
prev_bag = matrix(nrow = nboot, ncol = 1)
prev_rf = matrix(nrow = nboot, ncol = 1)
dados_boot = sample_n(dados_train, nrow(dados_train), replace = T)
arvore = rpart(data = dados_boot, Survived ~ Sex + Age + Pclass + SibSp + Parch + Fare)
prev_arvore[i] = predict(arvore, passageiro_teste)[1]
passageiro_teste = sample_n(dados, 1)
dados_train = dados %>% filter(PassengerId != passageiro_teste$PassengerId)
nboot = 100
nbag = 30
nvar = 3
prev_arvore = matrix(nrow = nboot, ncol = 1)
prev_bag = matrix(nrow = nboot, ncol = 1)
prev_rf = matrix(nrow = nboot, ncol = 1)
for (i in 1:nboot) {
    dados_boot = sample_n(dados_train, nrow(dados_train), replace = T)
    arvore = rpart(data = dados_boot, Survived ~ Sex + Age + Pclass + SibSp + Parch + Fare)
    prev_arvore[i] = predict(arvore, passageiro_teste)[1]
    pbag = 0
    prf = 0
    for (j in 1:nbag) {
        dados_bag = sample_n(dados_boot, nrow(dados_boot), replace = T)
        arvore_tmp = rpart(data = dados_bag, Survived ~ Sex + Age + Pclass + SibSp + Parch + Fare)
        pbag = pbag + predict(arvore_tmp, passageiro_teste)[1]/nbag
        dados_rf = cbind(Survived = dados_bag$Survived, dados_bag %>% select(-c(PassengerId, Survived)) %>% sample(nvar))
        arvore_tmp = rpart(data = dados_rf, eval(paste0(""Survived~"", colnames(dados_rf %>% select(-Survived)))))
    }
    prf = prf + predict(arvore_tmp, passageiro_teste)[1]/nbag
    prev_bag[i] = pbag
    prev_rf[i] = prf
}
sd(prev_arvore)
sd(prev_bag)
sd(prev_rf)
dfplot = rbind(data.frame(prev = prev_arvore, Modelo = rep(""Árvore"", length(prev_arvore))), data.frame(prev = prev_bag, Modelo = rep(""Bagging"", length(prev_bag))), data.frame(prev = prev_rf, Modelo = rep(""RF"", length(prev_rf))))
g = ggplot(data = dfplot %>% subset(Modelo %in% c(""Árvore"", ""Bagging"")), aes(x = prev, fill = Modelo))
g + geom_histogram(aes(y = ..count../sum(..count..)), bins = 10, alpha = 0.3, position = ""identity"") + xlab(""Previsão"") + ylab(""Frequência"") + ggtitle(""Previsões- árvore x bagging"") + theme(plot.title = element_text(size = 30, face = ""bold""))
g = ggplot(data = dfplot, aes(x = prev, fill = Modelo))
g + geom_histogram(aes(y = ..count../sum(..count..)), bins = 20, alpha = 0.3, position = ""identity"") + xlab(""Previsão"") + ylab(""Frequência"") + ggtitle(""Previsões- árvore x bagging x rf"") + theme(plot.title = element_text(size = 25, face = ""bold""))
library(randomForest)
dados[which(is.na(dados$Age)), ""Age""] = mean(dados$Age, na.rm = T)
g_ntree = c(10, 100, 200)
g_mtry = c(2, 3, 4, 5, 6)
g_maxnodes = c(3, 5, 10, 20, 40)
n = length(g_ntree) * length(g_mtry) * length(g_maxnodes)
n_fold = 10
n_ind = floor(nrow(dados)/n_fold)
i_ntree = 2
i_mtry = 3
i_maxnodes = 4
inicio = Sys.time()
indices = sample(1:nrow(dados))
ntree = g_ntree[i_ntree]
mtry = g_mtry[i_mtry]
maxnodes = g_maxnodes[i_maxnodes]
acc = 0
for (i in 1:n_fold) {
    test = dados[(indices[((i - 1) * n_ind):(i * n_ind)]), ]
    train = dados[-(indices[((i - 1) * n_ind):(i * n_ind)]), ]
    modrf = randomForest(Survived ~ ., data = train, ntree = ntree, mtry = mtry, maxnodes = maxnodes, na.action = na.roughfix)
    prev = predict(modrf, test %>% select(-Survived))
    acc = acc + (sum(prev == test$Survived)/length(prev))/n_fold
}
fim = Sys.time()
t = (fim - inicio)
print(paste0(""Tempo estimado para rodar todas as "", n, "" combinações:""))
print(n * t)
inicio = Sys.time()
dfres = data.frame(ntree = integer(), mtry = integer(), maxnodes = integer(), acc = numeric(), stringsAsFactors = F)
indices = sample(1:nrow(dados))
for (i_ntree in 1:length(g_ntree)) {
    ntree = g_ntree[i_ntree]
    for (i_mtry in 1:length(g_mtry)) {
        mtry = g_mtry[i_mtry]
        for (i_maxnodes in 1:length(g_maxnodes)) {
            maxnodes = g_maxnodes[i_maxnodes]
            acc = 0
            for (i in 1:n_fold) {
                test = dados[(indices[((i - 1) * n_ind):(i * n_ind)]), ]
                train = dados[-(indices[((i - 1) * n_ind):(i * n_ind)]), ]
                modrf = randomForest(Survived ~ ., data = train, ntree = ntree, mtry = mtry, maxnodes = maxnodes, na.action = na.roughfix)
                prev = predict(modrf, test %>% select(-Survived))
                acc = acc + (sum(prev == test$Survived)/length(prev))/n_fold
            }
            linha = data.frame(ntree = ntree, mtry = mtry, maxnodes = maxnodes, acc = acc)
            dfres = rbind(dfres, linha)
            print(paste0(""ntree = "", ntree, "", mtry = "", mtry, "", maxnodes = "", maxnodes, "", acc = "", acc))
        }
    }
}
fim = Sys.time()
t = (fim - inicio)
dfres = dfres[order(dfres$acc, decreasing = T), ]
ntree = dfres[1, ""ntree""]
mtry = dfres[1, ""mtry""]
maxnodes = dfres[1, ""maxnodes""]
print(paste0(""Melhores parâmetros: ntree = "", ntree, "", mtry = "", mtry, "", maxnodes = "", maxnodes))
modrf_final = randomForest(Survived ~ ., data = dados, ntree = ntree, mtry = mtry, maxnodes = maxnodes)
test = read.csv(""../input/test.csv"")
test[which(is.na(test$Age)), ""Age""] = mean(test$Age, na.rm = T)
test[which(is.na(test$Fare)), ""Fare""] = mean(test$Fare, na.rm = T)
res = predict(modrf_final, test)
submit = data.frame(PassengerId = test$PassengerId, Survived = res)
write.csv(submit, ""submit_RF.csv"", row.names = F)
submit",1,0,0,0,0,0,0,0,0,1,0,0,0,0
386,emj777-decision-tree-titanic-r,0.7509999999999999,"['as.factor', 'c', 'data.frame', 'dim', 'ifelse', 'is.na', 'lapply', 'library', 'ls', 'nrow', 'rm', 'sapply', 'substr', 'sum', 'summary', 'table', 'bind_rows', 'printcp', 'rpart', 'rpart.plot', 'median', 'predict', 'read.csv', 'str', 'write.csv']","['readr', 'dplyr', 'ggplot2', 'rpart', 'rpart.plot', 'base']",1.0467312335968002,"['nrow', 'median', 'lapply', 'is.na', 'printcp', 'rpart', 'as.factor', 'summary', 'sapply', 'str', 'dim', 'read.csv', 'table', 'rm', 'c', 'ifelse', 'sum', 'ls', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'rpart.plot', 'substr', 'library']",[],"['mullayilkannan-decision-tree-titanic', 'rtreit-kaggle-titanic-tutorial', 'mullayilkannan-randomforest-with-knn-imputation-titanic', 'somtom-titanic-random-icebergs', 'monfilier-titanic-survival-prediction', 'paulocressoni-titanic-using-stepwise-linear-regression', 'jonmak-identify-travel-groups-in-titanic', 'lagprophet-titanic', 'peggy88-titanic-data-eda-by-peggy', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic']","[0.43552533008363276, 0.3984505299771275, 0.34971718333783847, 0.2913308168138101, 0.17385877429290178, 0.17125999388348528, 0.15048909084006873, 0.14874416078471783, 0.11587317684497343, 0.10297225747148847]","{'package:base': ['as.factor', 'c', 'data.frame', 'dim', 'ifelse', 'is.na', 'lapply', 'library', 'ls', 'nrow', 'rm', 'sapply', 'substr', 'sum', 'summary', 'table'], 'package:dplyr': ['bind_rows'], 'package:rpart': ['printcp', 'rpart'], 'package:rpart.plot': ['rpart.plot'], 'package:stats': ['median', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""as.factor"", ""c"", ""data.frame"", ""dim"", ""ifelse"", ""is.na"", ""lapply"", ""library"", ""ls"", ""nrow"", ""rm"", ""sapply"", ""substr"", ""sum"", ""summary"", ""table""], ""package:dplyr"": [""bind_rows""], ""package:rpart"": [""printcp"", ""rpart""], ""package:rpart.plot"": [""rpart.plot""], ""package:stats"": [""median"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase asfactor c dataframe dim ifelse isna lapply library ls nrow rm sapply substr sum summary table packagedplyr bindrows packagerpart printcp rpart packagerpartplot rpartplot packagestats median predict packageutils readcsv str writecsv,"library(readr)
library(dplyr)
library(ggplot2)
library(rpart)
library(rpart.plot)
rm(list = ls())
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
Survived <- train$Survived
train$Survived <- NULL
dataset <- bind_rows(train, test)
dim(dataset)
str(dataset)
summary(dataset)
dataset$Fare[dataset$PassengerId == 1044] <- median(dataset$Fare, na.rm = TRUE)
dataset$Age <- sapply(dataset$Age, FUN = function(x) {
    ifelse(is.na(x), median(dataset$Age, na.rm = TRUE), x)
})
table(dataset$Embarked)/sum(dataset$Embarked != """")
dataset$Embarked[c(62, 830)] <- ""S""
1 - (sum(dataset$Cabin != """")/nrow(dataset))
dataset$Cabin <- substr(dataset$Cabin, 1, 1)
table(dataset$Cabin)
dataset$Cabin[dataset$Cabin == """"] <- ""H""
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Cabin"")
dataset[factor_vars] <- lapply(dataset[factor_vars], function(x) as.factor(x))
train_cleanned <- dataset[1:891, ]
test_cleanned <- dataset[892:1309, ]
train_cleanned$Survived <- Survived
DT <- rpart(Survived ~ Pclass + Sex + Embarked + Cabin, train_cleanned, method = ""class"", cp = 0)
summary(DT)
printcp(DT)
rpart.plot(DT, type = 1, extra = 102)
predict_dt <- predict(DT, test_cleanned, type = ""class"")
result <- data.frame(PassengerID = test_cleanned$PassengerId, Survived = predict_dt)
write.csv(result, file = ""result.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,1,0,0,0,0
389,mattrb-titanic,0.7509999999999999,"['summary', 'plot', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.numeric', 'c', 'data.frame', 'ifelse', 'length', 'library', 'paste', 'print', 'prop.table', 'return', 'set.seed', 'sum', 'table', 'mutate', 'text', 'mae', 'resample_partition', 'read_csv', 'write_csv', 'rpart', 'rpart.control', 'aggregate', 'as.formula', 'predict', 'head', 'str', 'tail']","['tidyverse', 'rpart', 'randomForest', 'modelr', 'party', 'xlsx', 'base']",3.11868810653687,"['as.formula', 'write_csv', 'rpart.control', 'print', 'prop.table', 'rpart', 'summary', 'text', 'str', 'set.seed', 'aggregate', 'length', 'table', 'return', 'read_csv', 'mae', 'c', 'resample_partition', 'tail', 'mutate', 'paste', 'as.numeric', 'plot', 'ifelse', 'sum', 'predict', 'data.frame', 'head', 'user defined', 'library']",[],"['mattrb-titanic', 'tobybot11-toby-s-titanic-analysis', 'amodi8-titanic-exploring-survival-using-machine-learning', 'tsfitz-titanic', 'jacekpardyak-mytitanicscript', 'arpitr-titanic-survival', 'jerlinraj-titanic-machine-learning-from-disaster', 'lizpund-titanic-competition-kernel', 'stevencahill-titanic-machine-learning-from-disaster', 'brirush-randomforest-implementation-of-titanic']","[0.9999999999999997, 0.28478774685046676, 0.25005307541116506, 0.2362060037144126, 0.23368598161509152, 0.227685845133115, 0.22708928906195994, 0.2200402177424235, 0.21811761176906871, 0.20856777744584246]","{'c(""package:stats4"", ""package:base"")': ['summary'], 'c(""package:stats4"", ""package:graphics"")': ['plot'], 'character(0)': ['get_mae', 'glue'], 'package:base': ['as.numeric', 'c', 'data.frame', 'ifelse', 'length', 'library', 'paste', 'print', 'prop.table', 'return', 'set.seed', 'sum', 'table'], 'package:dplyr': ['mutate'], 'package:graphics': ['text'], 'package:modelr': ['mae', 'resample_partition'], 'package:readr': ['read_csv', 'write_csv'], 'package:rpart': ['rpart', 'rpart.control'], 'package:stats': ['aggregate', 'as.formula', 'predict'], 'package:utils': ['head', 'str', 'tail']}","{""c(""package:stats4"", ""package:base"")"": [""summary""], ""c(""package:stats4"", ""package:graphics"")"": [""plot""], ""character(0)"": [""get_mae"", ""glue""], ""package:base"": [""as.numeric"", ""c"", ""data.frame"", ""ifelse"", ""length"", ""library"", ""paste"", ""print"", ""prop.table"", ""return"", ""set.seed"", ""sum"", ""table""], ""package:dplyr"": [""mutate""], ""package:graphics"": [""text""], ""package:modelr"": [""mae"", ""resample_partition""], ""package:readr"": [""read_csv"", ""write_csv""], ""package:rpart"": [""rpart"", ""rpart.control""], ""package:stats"": [""aggregate"", ""as.formula"", ""predict""], ""package:utils"": [""head"", ""str"", ""tail""]}",cpackagestats4 packagebase summary cpackagestats4 packagegraphics plot character0 getmae glue packagebase asnumeric c dataframe ifelse length library paste print proptable return setseed sum table packagedplyr mutate packagegraphics text packagemodelr mae resamplepartition packagereadr readcsv writecsv packagerpart rpart rpartcontrol packagestats aggregate asformula predict packageutils head str tail,"library(tidyverse)
library(rpart)
library(randomForest)
library(modelr)
library(party)
library(xlsx)
train <- read_csv(""../input/train.csv"")
test <- read_csv(""../input/test.csv"")
summary(train)
str(train)
head(train)
tail(train)
prop.table(table(train$Survived))
prop.table(table(train$Sex))
prop_sexo <- prop.table(table(train$Sex, train$Survived), 1)
prop_sexo
summary(train$Age)
train <- train %>% mutate(Child = ifelse(train$Age < 18, 1, 0))
test <- test %>% mutate(Child = ifelse(test$Age < 18, 1, 0))
aggregate(data = train, Survived ~ Child + Sex, FUN = sum)
prop_sexo_edad <- aggregate(data = train, Survived ~ Child + Sex, FUN = function(x) {
    sum(x)/length(x)
})
prop_sexo_edad
fit <- rpart(Survived ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Child, data = train)
plot(fit, uniform = TRUE, main = ""primer intento"")
text(fit, all = TRUE, use.n = TRUE, cex = 0.6)
split_data <- resample_partition(data = train, c(split_test = 0.3, split_train = 0.7))
fit2 <- rpart(Survived ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Child, data = split_data$split_train)
mae(model = fit2, data = split_data$split_test)
get_mae <- function(maxdepth, target, predictors, train_data, test_data) {
    predictors <- paste(predictors, collapse = ""+"")
    formula <- as.formula(paste(target, ""~"", predictors, sep = """"))
    model <- rpart(formula, data = train_data, control = rpart.control(maxdepth = maxdepth))
    mae <- mae(model, test_data)
    return(mae)
}
target <- ""Survived""
predictors <- c(""Pclass"", ""Sex"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked"", ""Child"")
for (i in 1:10) {
    mae <- get_mae(maxdepth = i, target = target, predictors = predictors, train_data = split_data$split_train, test_data = split_data$split_test)
    print(glue::glue(""Maxdepth: "", i, ""\t MAE: "", mae))
}
set.seed(450)
fit3 <- rpart(Survived ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Child, data = train)
prediction <- predict(fit3, test)
pred <- as.numeric(prediction)
col <- ifelse(pred > 0.5, 1, 0)
submit <- data.frame(PassengerId = test$PassengerId, Survived = col)
write_csv(submit, ""submission.csv"")",1,0,0,0,0,0,0,0,0,1,0,0,0,0
390,imitation-exploring-survival-on-the-titanic,0.7509999999999999,"['glimpse', 'rbind', 'complete', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.factor', 'c', 'colnames', 'data.frame', 'duplicated', 'factor', 'grep', 'is.na', 'lapply', 'length', 'library', 'names', 'nrow', 'paste0', 'rep', 'return', 'round', 'row.names', 'set.seed', 'subset', 'summary', 'table', 'unique', 'which', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'facet_wrap', 'geom_bar', 'geom_jitter', 'geom_text', 'ggplot', 'ggtitle', 'labs', 'position_jitter', 'xlab', 'ylab', 'ylim', 'theme_few', 'hist', 'legend', 'par', 'plot', 'mice', 'importance', 'randomForest', 'median', 'predict', 'reorder', 'str_detect', 'head', 'read.csv', 'str', 'write.csv']","['tidyverse', 'ggthemes', 'stringr', 'scales', 'mice', 'randomForest', 'base']",11.1917650699615,"['labs', 'nrow', 'complete', 'facet_wrap', 'geom_text', 'median', 'lapply', 'grep', 'which', 'coord_flip', 'as.character', 'glimpse', 'geom_jitter', 'dense_rank', 'is.na', 'duplicated', 'subset', 'names', 'theme_few', 'as.factor', 'summary', 'round', 'mice', 'rep', 'hist', 'importance', 'str', 'desc', 'set.seed', 'xlab', 'factor', 'colnames', 'unique', 'str_detect', 'geom_bar', 'length', 'read.csv', 'paste0', 'table', 'par', 'return', 'randomForest', 'position_jitter', 'row.names', 'c', 'aes', 'ylab', 'mutate', 'rbind', 'reorder', 'plot', 'predict', 'legend', 'write.csv', 'ggtitle', 'data.frame', 'ggplot', 'head', 'user defined', 'library', 'ylim', 'facet_grid']",[],"['imitation-exploring-survival-on-the-titanic', 'quark6-titanic-work', 'anthobau-random-forest-titanic', 'caleblau-predicting-survival-on-the-titanic', 'supriya675-titanic-prediction-simplified-for-beginners', 'cganxs-is-62-the-right-titanic-model-threshold', 'joelweiss-titanic-data-r', 'prabhulingayya-titanic-prediction-using-logistic-regression', 'cnusapbo-titanic-r-code', 'goblin-titanic-test']","[0.9999999999999999, 0.7556370963709546, 0.6849138058602405, 0.6623063599145674, 0.48973310393171776, 0.4362234445556919, 0.22176602987136357, 0.21995447689425557, 0.21975643234269276, 0.18649772180760385]","{'c(""package:dplyr"", ""package:tibble"")': ['glimpse'], 'c(""package:mice"", ""package:base"")': ['rbind'], 'c(""package:mice"", ""package:tidyr"")': ['complete'], 'character(0)': ['extractTitle'], 'package:base': ['as.character', 'as.factor', 'c', 'colnames', 'data.frame', 'duplicated', 'factor', 'grep', 'is.na', 'lapply', 'length', 'library', 'names', 'nrow', 'paste0', 'rep', 'return', 'round', 'row.names', 'set.seed', 'subset', 'summary', 'table', 'unique', 'which'], 'package:dplyr': ['dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'facet_wrap', 'geom_bar', 'geom_jitter', 'geom_text', 'ggplot', 'ggtitle', 'labs', 'position_jitter', 'xlab', 'ylab', 'ylim'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'par', 'plot'], 'package:mice': ['mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['median', 'predict', 'reorder'], 'package:stringr': ['str_detect'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:tibble"")"": [""glimpse""], ""c(""package:mice"", ""package:base"")"": [""rbind""], ""c(""package:mice"", ""package:tidyr"")"": [""complete""], ""character(0)"": [""extractTitle""], ""package:base"": [""as.character"", ""as.factor"", ""c"", ""colnames"", ""data.frame"", ""duplicated"", ""factor"", ""grep"", ""is.na"", ""lapply"", ""length"", ""library"", ""names"", ""nrow"", ""paste0"", ""rep"", ""return"", ""round"", ""row.names"", ""set.seed"", ""subset"", ""summary"", ""table"", ""unique"", ""which""], ""package:dplyr"": [""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""facet_wrap"", ""geom_bar"", ""geom_jitter"", ""geom_text"", ""ggplot"", ""ggtitle"", ""labs"", ""position_jitter"", ""xlab"", ""ylab"", ""ylim""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""par"", ""plot""], ""package:mice"": [""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:stringr"": [""str_detect""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagetibble glimpse cpackagemice packagebase rbind cpackagemice packagetidyr complete character0 extractTitle packagebase ascharacter asfactor c colnames dataframe duplicated factor grep isna lapply length library names nrow paste0 rep return round rownames setseed subset summary table unique which packagedplyr denserank desc mutate packageggplot2 aes coordflip facetgrid facetwrap geombar geomjitter geomtext ggplot ggtitle labs positionjitter xlab ylab ylim packageggthemes themefew packagegraphics hist legend par plot packagemice mice packagerandomForest importance randomForest packagestats median predict reorder packagestringr strdetect packageutils head readcsv str writecsv,"library(tidyverse)
library(ggthemes)
library(stringr)
library(scales)
library(mice)
library(randomForest)
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
glimpse(train)
glimpse(test)
test.survived <- data.frame(Survived = rep(""None"", nrow(test)), test[, ])
head(test.survived)
ntest.survived <- test.survived[, c(2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)]
head(ntest.survived)
names(train)
names(ntest.survived)
data.combined <- rbind(train, ntest.survived)
glimpse(data.combined)
data.combined$Survived <- as.factor(data.combined$Survived)
data.combined$Pclass <- as.factor(data.combined$Pclass)
glimpse(data.combined)
table(data.combined$Survived)
table(data.combined$Pclass)
g2.3 <- ggplot(data.combined, aes(x = factor(Pclass), fill = factor(Sex))) + geom_bar(position = ""fill"")
g2.3
g1 <- ggplot(test, aes(x = (Pclass), fill = (Sex))) + geom_bar(width = 0.5)
g1
g2 <- ggplot(train, aes(x = factor(Pclass), fill = factor(Sex))) + geom_bar(position = ""dodge"") + facet_grid(. ~ Survived)
g2
posn.j <- position_jitter(0.5, 0)
g3 <- ggplot(train, aes(x = factor(Pclass), y = Age, col = factor(Sex))) + geom_jitter(position = posn.j, alpha = 0.5, size = 3) + facet_grid(. ~ Survived)
g3
length(unique(data.combined$Name))
str(data.combined)
dup.names <- as.character(data.combined[which(duplicated(as.character(data.combined$Name))), ""Name""])
data.combined[which(data.combined$Name %in% dup.names), ]
misses <- data.combined[which(str_detect(data.combined$Name, ""Miss."")), ]
head(misses)
mrses <- data.combined[which(str_detect(data.combined$Name, ""Mrs."")), ]
mrses[1:5, ]
masters <- data.combined[which(str_detect(data.combined$Name, ""Master"")), ]
masters[1:5, ]
mr <- data.combined[which(str_detect(data.combined$Name, ""Mr."")), ]
mr[1:5, ]
extractTitle <- function(Name) {
    Name <- as.character(Name)
    if (length(grep(""Miss."", Name)) > 0) {
        return(""Miss."")
    }
    else if (length(grep(""Master."", Name)) > 0) {
        return(""Master."")
    }
    else if (length(grep(""Mrs."", Name)) > 0) {
        return(""Mrs."")
    }
    else if (length(grep(""Mr."", Name)) > 0) {
        return(""Mr."")
    }
    else {
        return(""Other"")
    }
}
titles <- NULL
for (i in 1:nrow(data.combined)) {
    titles <- c(titles, extractTitle(data.combined[i, ""Name""]))
}
data.combined$Title <- as.factor(titles)
p2.1 <- ggplot(data.combined[1:891, ], aes(x = Title, fill = Survived)) + geom_bar(width = 0.5) + facet_wrap(~Pclass) + ggtitle(""Pclass"") + xlab(""Title"") + ylab(""Total Count"") + labs(fill = ""Survived"")
p2.1
table(data.combined$Sex)
p2.2 <- ggplot(data.combined[1:891, ], aes(x = Sex, fill = Survived)) + geom_bar(width = 0.5) + facet_wrap(~Pclass) + ggtitle(""Pclass"") + xlab(""Title"") + ylab(""Total Count"") + labs(fill = ""Survived"")
p2.2
summary(data.combined$Age)
g2.3 <- ggplot(data.combined[1:891, ], aes(x = Age, fill = Survived)) + geom_bar(width = 0.5) + facet_wrap(~Sex + Pclass) + geom_bar(binwidth = 10) + xlab(""Age"") + ylab(""Total Count"")
g2.3
boys <- data.combined[which(data.combined$Title == ""Master.""), ]
summary(boys$Age)
misses <- data.combined[which(data.combined$Title == ""Miss.""), ]
summary(misses$Age)
g2.4 <- ggplot(misses[misses$Survived != ""None"", ], aes(x = Age, fill = Survived)) + facet_wrap(~Pclass) + geom_bar(binwidth = 5) + ggtitle(""Age for Miss by Pclass"") + xlab(""Age"") + ylab(""Total Count"")
g2.4
misses.alone <- misses[which(misses$SibSp == 0, misses$Parch == 0), ]
summary(misses.alone$Age)
summary(data.combined$SibSp)
data.combined$SibSp <- as.factor(data.combined$SibSp)
g2.5 <- ggplot(data.combined[1:891, ], aes(x = SibSp, fill = Survived)) + geom_bar(width = 0.5) + facet_wrap(~Pclass + Title) + ggtitle(""Pclass,Title"") + xlab(""Sibsp"") + ylab(""Total Count"") + ylim(0, 300) + labs(fill = ""Survived"")
g2.5
data.combined$Parch <- as.factor(data.combined$Parch)
g2.6 <- ggplot(data.combined[1:891, ], aes(x = Parch, fill = Survived)) + geom_bar(width = 1) + facet_wrap(~Pclass + Title) + ggtitle(""Pclass,Title"") + xlab(""Parch"") + ylab(""Total Count"") + ylim(0, 300) + labs(fill = ""Survived"")
g2.6
temp.sibsp <- c(train$SibSp, test$SibSp)
temp.parch <- c(train$Parch, test$Parch)
data.combined$Family.Size <- as.factor(temp.sibsp + temp.parch + 1)
g2.7 <- ggplot(data.combined[1:891, ], aes(x = Family.Size, fill = Survived)) + geom_bar(width = 1) + facet_wrap(~Pclass + Title) + ggtitle(""Pclass,Title"") + xlab(""Family.Size"") + ylab(""Total Count"") + ylim(0, 300) + labs(fill = ""Survived"")
g2.7
subsmr <- subset(data.combined[1:891, ], is.na(Age) & Title == ""Mr."")
summary(subsmr)
g3.1 <- ggplot(subsmr, aes(x = Pclass, fill = Survived)) + geom_bar(width = 0.5) + facet_wrap(~Family.Size)
g3.1
summary(misses.alone$Age)
data.combined2 <- data.combined
data.combined2$Embarked[c(62, 830)]
data.combined2$Embarked[c(62, 830)] <- ""C""
data.combined2[1044, ]
data.combined2$Fare[1044] <- median(data.combined2[data.combined2$Pclass == 3 & data.combined2$Embarked == ""S"", ]$Fare, na.rm = T)
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Family.Size"")
data.combined2[factor_vars] <- lapply(data.combined2[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(data.combined2[, !names(data.combined2) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(data.combined2$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
data.combined2$Age <- mice_output$Age
data.combined2$Deck <- mice_output$Deck
summary(data.combined2)
train <- data.combined2[1:891, ]
test <- data.combined2[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title, ntree = 100, importance = T, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
392,mac4vity-exploring-survival-on-the-titanic,0.7440000000000001,"['filter', 'as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table', 'bind_rows', 'dense_rank', 'desc', 'mutate', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous', 'theme_few', 'hist', 'legend', 'mosaicplot', 'par', 'plot', 'complete', 'md.pattern', 'mice', 'importance', 'randomForest', 'dollar_format', 'median', 'predict', 'reorder', 'read.csv', 'str', 'write.csv']","['ggplot2', 'ggthemes', 'scales', 'dplyr', 'mice', 'randomForest', 'base']",24.146184921264602,"['labs', 'complete', 'geom_text', 'median', 'lapply', 'md.pattern', 'coord_flip', 'cat', 'dense_rank', 'str', 'is.na', 'names', 'geom_boxplot', 'scale_x_continuous', 'theme_few', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'hist', 'mosaicplot', 'geom_hline', 'desc', 'set.seed', 'gsub', 'mice', 'factor', 'colnames', 'importance', 'geom_bar', 'read.csv', 'paste0', 'table', 'par', 'randomForest', 'scale_y_continuous', 'row.names', 'c', 'aes', 'mutate', 'paste', 'geom_vline', 'sum', 'plot', 'legend', 'dollar_format', 'predict', 'reorder', 'bind_rows', 'write.csv', 'data.frame', 'nlevels', 'strsplit', 'ggplot', 'geom_density', 'library', 'facet_grid']",[],"['rayuga-exploring-survival-on-the-titanic', 'dukasguo-exploring-survival-on-the-titanic', 'cosentinoda12-exploring-survival-on-the-titanic-dc', 'akramsayadi-exploring-survival-on-the-titanic', 'proj20-exploring-survival-on-the-titanic', 'mrsheriff-exploring-survival-on-the-titanic', 'alfonzo-exploring-survival-on-the-titanic', 'datascikrid-exploring-survival-on-the-titanic', 'anishmayaramka-the-titanic-datset', 'aturner-exploring-survival-on-the-titanic']","[0.9994806919838781, 0.9994806919838781, 0.9994806919838781, 0.9994806919838781, 0.9994806919838781, 0.9994806919838781, 0.9994806919838781, 0.9994806919838781, 0.9994806919838781, 0.9994806919838781]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['as.factor', 'c', 'cat', 'colnames', 'data.frame', 'factor', 'gsub', 'is.na', 'lapply', 'library', 'names', 'nlevels', 'paste', 'paste0', 'round', 'row.names', 'sapply', 'set.seed', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'mutate'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_continuous', 'scale_y_continuous'], 'package:ggthemes': ['theme_few'], 'package:graphics': ['hist', 'legend', 'mosaicplot', 'par', 'plot'], 'package:mice': ['complete', 'md.pattern', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:scales': ['dollar_format'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""as.factor"", ""c"", ""cat"", ""colnames"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""lapply"", ""library"", ""names"", ""nlevels"", ""paste"", ""paste0"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""mutate""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_continuous"", ""scale_y_continuous""], ""package:ggthemes"": [""theme_few""], ""package:graphics"": [""hist"", ""legend"", ""mosaicplot"", ""par"", ""plot""], ""package:mice"": [""complete"", ""md.pattern"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:scales"": [""dollar_format""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase asfactor c cat colnames dataframe factor gsub isna lapply library names nlevels paste paste0 round rownames sapply setseed strsplit sum table packagedplyr bindrows denserank desc mutate packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomtext geomvline ggplot labs scalexcontinuous scaleycontinuous packageggthemes themefew packagegraphics hist legend mosaicplot par plot packagemice complete mdpattern mice packagerandomForest importance randomForest packagescales dollarformat packagestats median predict reorder packageutils readcsv str writecsv,"library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
library(""mice"")
library(""randomForest"")
train <- read.csv(""../input/train.csv"", stringsAsFactors = F)
test <- read.csv(""../input/test.csv"", stringsAsFactors = F)
full <- bind_rows(train, test)
str(full)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
table(full$Sex, full$Title)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
cat(paste(""We have <b>"", nlevels(factor(full$Surname)), ""</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.""))
full$Fsize <- full$SibSp + full$Parch + 1
full$Family <- paste(full$Surname, full$Fsize, sep = ""_"")
ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"") + scale_x_continuous(breaks = c(1:11)) + labs(x = ""Family Size"", y = ""Survivor Count"") + theme_few()
full$FsizeD[full$Fsize == 1] <- ""singleton""
full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- ""small""
full$FsizeD[full$Fsize > 4] <- ""large""
mosaicplot(table(full$FsizeD, full$Survived), main = ""Family Size by Survival"", shade = TRUE)
full$Cabin[1:28]
strsplit(full$Cabin[2], NULL)[[1]]
full$Deck <- factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
full[c(62, 830), ""Embarked""]
cat(paste(""We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid<b> $"", full[c(62, 830), ""Fare""][[1]][1], ""</b>and<b> $"", full[c(62, 830), ""Fare""][[1]][2], ""</b>respectively and their classes are<b>"", full[c(62, 830), ""Pclass""][[1]][1], ""</b>and<b>"", full[c(62, 830), ""Pclass""][[1]][2], ""</b>. So from where did they embark?""))
embark_fare <- full %>% filter(PassengerId != 62 & PassengerId != 830)
ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + scale_y_continuous(labels = dollar_format()) + theme_few()
full$Embarked[c(62, 830)] <- ""C""
full[1044, ]
ggplot(full[full$Pclass == ""3"" & full$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""#99d6ff"", alpha = 0.4) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + scale_x_continuous(labels = dollar_format()) + theme_few()
full$Fare[1044] <- median(full[full$Pclass == ""3"" & full$Embarked == ""S"", ]$Fare, na.rm = TRUE)
sum(is.na(full$Age))
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"", ""Embarked"", ""Title"", ""Surname"", ""Family"", ""FsizeD"")
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Family"", ""Surname"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
par(mfrow = c(1, 2))
hist(full$Age, freq = F, main = ""Age: Original Data"", col = ""darkgreen"", ylim = c(0, 0.04))
hist(mice_output$Age, freq = F, main = ""Age: MICE Output"", col = ""lightgreen"", ylim = c(0, 0.04))
full$Age <- mice_output$Age
sum(is.na(full$Age))
ggplot(full[1:891, ], aes(Age, fill = factor(Survived))) + geom_histogram() + facet_grid(. ~ Sex) + theme_few()
full$Child[full$Age < 18] <- ""Child""
full$Child[full$Age >= 18] <- ""Adult""
table(full$Child, full$Survived)
full$Mother <- ""Not Mother""
full$Mother[full$Sex == ""female"" & full$Parch > 0 & full$Age > 18 & full$Title != ""Miss""] <- ""Mother""
table(full$Mother, full$Survived)
full$Child <- factor(full$Child)
full$Mother <- factor(full$Mother)
md.pattern(full)
train <- full[1:891, ]
test <- full[892:1309, ]
set.seed(754)
rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FsizeD + Child + Mother, data = train)
plot(rf_model, ylim = c(0, 0.36))
legend(""topright"", colnames(rf_model$err.rate), col = 1:3, fill = 1:3)
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip() + theme_few()
prediction <- predict(rf_model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
393,jaredcross-simple-regression-titanic,0.7440000000000001,"['filter', 'colnames', 'length', 'library', 'round', 'summary', 'select', 'summarize', 'aes', 'geom_jitter', 'ggplot', 'lm', 'predict', 'read.csv', 'write.csv']","['dplyr', 'ggplot2', 'base']",1.00487494468689,"['colnames', 'predict', 'write.csv', 'summarize', 'ggplot', 'length', 'read.csv', 'lm', 'summary', 'geom_jitter', 'library', 'filter', 'round', 'select', 'aes']",[],"['jerlinraj-titanic-machine-learning-from-disaster', 'amodi8-titanic-exploring-survival-using-machine-learning', 'sudheer464-prediction-1-on-titanic-dataset', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'zhaotianjing-titanic', 'scout16-titanic-disaster-in-r', 'sawajid-titanic-test', 'stevencahill-titanic-machine-learning-from-disaster', 'tobybot11-toby-s-titanic-analysis']","[0.23231515227154997, 0.22377771097758653, 0.2169860089676981, 0.21460764776044228, 0.21460764776044228, 0.21088627116051997, 0.20617310176323794, 0.20253009851574272, 0.2007281336669948, 0.1985409402286124]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['colnames', 'length', 'library', 'round', 'summary'], 'package:dplyr': ['select', 'summarize'], 'package:ggplot2': ['aes', 'geom_jitter', 'ggplot'], 'package:stats': ['lm', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""colnames"", ""length"", ""library"", ""round"", ""summary""], ""package:dplyr"": [""select"", ""summarize""], ""package:ggplot2"": [""aes"", ""geom_jitter"", ""ggplot""], ""package:stats"": [""lm"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase colnames length library round summary packagedplyr select summarize packageggplot2 aes geomjitter ggplot packagestats lm predict packageutils readcsv writecsv,"library(dplyr)
library(ggplot2)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
colnames(train)
colnames(test)
train %>% filter(Survived == 0) %>% summarize(length(Survived)/891)
gender_model <- lm(Survived ~ Sex, data = train)
summary(gender_model)
train$gender_model_pred <- predict(gender_model, train)
train$gender_model_pred <- round(train$gender_model_pred)
train %>% filter(Survived == gender_model_pred) %>% summarize(length(Survived)/891)
test$Survived <- round(predict(gender_model, test))
submit <- test %>% select(PassengerId, Survived)
write.csv(submit, file = ""gender_model.csv"", row.names = FALSE)
ggplot(train, aes(gender_model_pred, Survived)) + geom_jitter()
ggplot(train, aes(gender_model_pred, Survived - gender_model_pred)) + geom_jitter()
ggplot(train, aes(Pclass, Survived - gender_model_pred)) + geom_jitter()
gender_pclass_model <- lm(Survived ~ Sex + Pclass, data = train)
train$gender_pclass_model_pred <- round(predict(gender_pclass_model, train))
train %>% filter(gender_pclass_model_pred != gender_model_pred)",0,0,0,0,0,0,0,0,0,0,0,0,0,0
394,jeetranjeet619-titanic-xgboost-example-in-r,0.725,"['as.matrix', 'colSums', 'mean', 'which', 'cbind', 'as.data.frame', 'as.factor', 'as.numeric', 'as.ordered', 'c', 'colnames', 'data.frame', 'factor', 'grepl', 'ifelse', 'is.factor', 'is.na', 'library', 'list', 'max', 'min', 'nrow', 'round', 'sapply', 'strsplit', 'sum', 'table', 'bind_rows', 'glimpse', 'aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_label', 'geom_line', 'geom_vline', 'ggplot', 'ggtitle', 'labs', 'position_dodge', 'scale_x_continuous', 'theme_classic', 'xlab', 'theme_calc', 'theme_few', 'glue', 'mosaicplot', 'md.pattern', 'median', 'predict', 'reorder', 'read.csv', 'write.csv', 'xgb.DMatrix', 'xgb.importance', 'xgb.plot.importance', 'xgb.train', 'xgboost']","['dplyr', 'caret', 'mice', 'ggplot2', 'ggthemes', 'caTools', 'glue', 'xgboost', 'Matrix', 'base']",29.2069239616394,"['labs', 'as.ordered', 'nrow', 'theme_calc', 'list', 'geom_label', 'mean', 'median', 'min', 'md.pattern', 'which', 'coord_flip', 'xgb.importance', 'glimpse', 'xgb.plot.importance', 'is.na', 'colSums', 'scale_x_continuous', 'geom_boxplot', 'theme_few', 'xgboost', 'as.factor', 'round', 'sapply', 'geom_histogram', 'mosaicplot', 'as.matrix', 'geom_hline', 'xlab', 'factor', 'colnames', 'position_dodge', 'theme_classic', 'max', 'geom_bar', 'read.csv', 'table', 'xgb.DMatrix', 'as.data.frame', 'c', 'is.factor', 'aes', 'glue', 'as.numeric', 'ifelse', 'sum', 'geom_vline', 'predict', 'reorder', 'write.csv', 'bind_rows', 'geom_line', 'data.frame', 'grepl', 'strsplit', 'ggplot', 'geom_density', 'ggtitle', 'xgb.train', 'library', 'cbind', 'facet_grid']",[],"['jeetranjeet619-titanic-dataset-play-around-in-r', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'skhawaja-titanic-disaster-survival-099', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic', 'rjhere23-predictive-analysis-of-survival-rate-on-titanic', 'kunaphas-predictive-analysis-of-survival-rate-on-titanic', 'monikapeteva-predictive-analysis-of-survival-rate-on-titanic', 'tomaszw-predictive-analysis-of-survival-rate-on-titanic', 'erskumars-titanic-survival-eda-and-survival-rate-prediction']","[0.9637811502902219, 0.07034122948026825, 0.06915212883233773, 0.06738257056118752, 0.06738257056118752, 0.065695228269872, 0.065695228269872, 0.06311958292564149, 0.06311958292564149, 0.06017434768126207]","{'c(""package:Matrix"", ""package:base"")': ['as.matrix', 'colSums', 'mean', 'which'], 'c(""package:mice"", ""package:base"")': ['cbind'], 'package:base': ['as.data.frame', 'as.factor', 'as.numeric', 'as.ordered', 'c', 'colnames', 'data.frame', 'factor', 'grepl', 'ifelse', 'is.factor', 'is.na', 'library', 'list', 'max', 'min', 'nrow', 'round', 'sapply', 'strsplit', 'sum', 'table'], 'package:dplyr': ['bind_rows', 'glimpse'], 'package:ggplot2': ['aes', 'coord_flip', 'facet_grid', 'geom_bar', 'geom_boxplot', 'geom_density', 'geom_histogram', 'geom_hline', 'geom_label', 'geom_line', 'geom_vline', 'ggplot', 'ggtitle', 'labs', 'position_dodge', 'scale_x_continuous', 'theme_classic', 'xlab'], 'package:ggthemes': ['theme_calc', 'theme_few'], 'package:glue': ['glue'], 'package:graphics': ['mosaicplot'], 'package:mice': ['md.pattern'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['read.csv', 'write.csv'], 'package:xgboost': ['xgb.DMatrix', 'xgb.importance', 'xgb.plot.importance', 'xgb.train', 'xgboost']}","{""c(""package:Matrix"", ""package:base"")"": [""as.matrix"", ""colSums"", ""mean"", ""which""], ""c(""package:mice"", ""package:base"")"": [""cbind""], ""package:base"": [""as.data.frame"", ""as.factor"", ""as.numeric"", ""as.ordered"", ""c"", ""colnames"", ""data.frame"", ""factor"", ""grepl"", ""ifelse"", ""is.factor"", ""is.na"", ""library"", ""list"", ""max"", ""min"", ""nrow"", ""round"", ""sapply"", ""strsplit"", ""sum"", ""table""], ""package:dplyr"": [""bind_rows"", ""glimpse""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""facet_grid"", ""geom_bar"", ""geom_boxplot"", ""geom_density"", ""geom_histogram"", ""geom_hline"", ""geom_label"", ""geom_line"", ""geom_vline"", ""ggplot"", ""ggtitle"", ""labs"", ""position_dodge"", ""scale_x_continuous"", ""theme_classic"", ""xlab""], ""package:ggthemes"": [""theme_calc"", ""theme_few""], ""package:glue"": [""glue""], ""package:graphics"": [""mosaicplot""], ""package:mice"": [""md.pattern""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""read.csv"", ""write.csv""], ""package:xgboost"": [""xgb.DMatrix"", ""xgb.importance"", ""xgb.plot.importance"", ""xgb.train"", ""xgboost""]}",cpackageMatrix packagebase asmatrix colSums mean which cpackagemice packagebase cbind packagebase asdataframe asfactor asnumeric asordered c colnames dataframe factor grepl ifelse isfactor isna library list max min nrow round sapply strsplit sum table packagedplyr bindrows glimpse packageggplot2 aes coordflip facetgrid geombar geomboxplot geomdensity geomhistogram geomhline geomlabel geomline geomvline ggplot ggtitle labs positiondodge scalexcontinuous themeclassic xlab packageggthemes themecalc themefew packageglue glue packagegraphics mosaicplot packagemice mdpattern packagestats median predict reorder packageutils readcsv writecsv packagexgboost xgbDMatrix xgbimportance xgbplotimportance xgbtrain xgboost,"library(dplyr)
library(caret)
library(mice)
library(ggplot2)
library(ggthemes)
library(caTools)
library(glue)
library(xgboost)
library(Matrix)
train = read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test = read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
complete_data = bind_rows(train, test)
complete_data$Survived = as.factor(complete_data$Survived)
complete_data$Pclass = as.ordered(complete_data$Pclass)
complete_data$Sex = as.factor(complete_data$Sex)
complete_data$Age = as.numeric(complete_data$Age)
complete_data$Embarked = as.factor(complete_data$Embarked)
cbind(colSums(is.na(complete_data)))
which(complete_data$Fare %in% NA)
complete_data[1044, ]
glue(""Mean of Fare for Pclass = 3 and Embarked = S : {mean(complete_data$Fare[complete_data$Pclass == '3' & complete_data$Embarked == 'S'], na.rm = T)}"")
glue(""Median of Fare for Pclass = 3 and Embarked = S : {median(complete_data$Fare[complete_data$Pclass == '3' & complete_data$Embarked == 'S'], na.rm = T)}"")
ggplot(complete_data[complete_data$Pclass == ""3"" & complete_data$Embarked == ""S"", ], aes(x = Fare)) + geom_density(fill = ""green"", alpha = 0.9) + geom_vline(aes(xintercept = median(Fare, na.rm = T)), colour = ""red"", linetype = ""dashed"", lwd = 1) + geom_vline(aes(xintercept = mean(Fare, na.rm = T)), colour = ""blue"", linetype = ""dashed"", lwd = 1) + theme_few() + labs(title = ""Density Plot for Fare Distribution with Pclass = 3 and Embarked = S"")
complete_data$Fare[1044] = median(complete_data$Fare[complete_data$Pclass == 3 & complete_data$Embarked == ""S""], na.rm = T)
glue(""Total NAs in Age : {sum(is.na(complete_data$Age))}."")
glue(""Mean of Age :  {mean(complete_data$Age, na.rm = T)}"")
glue(""Median of Age :  {median(complete_data$Age, na.rm = T)}"")
ggplot(data = complete_data, aes(x = Age, y = Age)) + geom_boxplot() + labs(title = ""Age Distribution"", x = ""Age"")
ggplot(data = complete_data, aes(x = Age)) + geom_density(fill = ""#B86997"", alpha = 0.8) + geom_vline(aes(xintercept = median(Age, na.rm = T)), colour = ""black"", linetype = ""dashed"", lwd = 1) + geom_vline(aes(xintercept = mean(Age, na.rm = T)), colour = ""blue"", linetype = ""dashed"", lwd = 1) + labs(title = ""Fare Distribution"")
complete_data$Age[is.na(complete_data$Age) == T] = median(complete_data$Age, na.rm = TRUE)
sum(is.na(complete_data$Cabin) | complete_data$Cabin == """")
glue(""NA/empty rows in Embarked Column : {sum(is.na(complete_data$Embarked) | complete_data$Embarked == '')}"")
which(is.na(complete_data$Embarked) | complete_data$Embarked == """")
complete_data[c(62, 830), ]
table(complete_data$Embarked[complete_data$Pclass == 1 & complete_data$Fare >= 75 & complete_data$Fare <= 85 & complete_data$Sex == ""female""])
mean(complete_data$Fare[complete_data$Pclass == 1 & complete_data$Sex == ""female""])
median(complete_data$Fare[complete_data$Pclass == 1 & complete_data$Sex == ""female""])
mean(complete_data$Fare[complete_data$Embarked == ""C"" & complete_data$Pclass == 1 & complete_data$Sex == ""female""])
mean(complete_data$Fare[complete_data$Embarked == ""S"" & complete_data$Pclass == 1 & complete_data$Sex == ""female""])
median(complete_data$Fare[complete_data$Embarked == ""C"" & complete_data$Pclass == 1 & complete_data$Sex == ""female""])
median(complete_data$Fare[complete_data$Embarked == ""S"" & complete_data$Pclass == 1 & complete_data$Sex == ""female""])
ggplot(complete_data[complete_data$Sex == ""female"", ], aes(x = Embarked, y = Fare, fill = factor(Pclass))) + geom_boxplot() + geom_hline(aes(yintercept = 80), colour = ""red"", linetype = ""dashed"", lwd = 2) + theme_few()
complete_data$Embarked[c(62, 830)] = ""S""
ggplot(complete_data[1:891, ], aes(x = Pclass, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"", color = ""black"") + labs(title = ""Survival By Passenger Class"", x = ""Passenger Class"") + theme_few() + geom_label(stat = ""count"", position = position_dodge(width = 1), hjust = ""center"", aes(label = ..count..))
for (i in 1:nrow(complete_data)) {
    if (grepl(pattern = ""Mr. "", x = complete_data$Name[i], ignore.case = TRUE) == 1) {
        complete_data$Title[i] = ""Mr""
    }
    else if (grepl(pattern = ""Mrs. "", x = complete_data$Name[i], ignore.case = TRUE) == 1) {
        complete_data$Title[i] = ""Mrs""
    }
    else if (grepl(pattern = ""Miss. "", x = complete_data$Name[i], ignore.case = TRUE) == 1) {
        complete_data$Title[i] = ""Miss""
    }
    else if (grepl(pattern = ""Master. "", x = complete_data$Name[i], ignore.case = TRUE) == 1) {
        complete_data$Title[i] = ""Master""
    }
    else {
        complete_data$Title[i] = ""Rare""
    }
}
complete_data$Title = as.factor(complete_data$Title)
sum(is.na(complete_data$Title))
cbind(table(complete_data$Title))
ggplot(complete_data[1:891, ], aes(x = Title, fill = Survived)) + geom_histogram(stat = ""count"", position = ""dodge"", color = ""black"") + labs(title = ""Title Wise Survival"", x = ""Title"", y = ""Count"") + geom_label(stat = ""count"", position = position_dodge(width = 1), hjust = ""middle"", aes(label = ..count..)) + theme_few()
complete_data$Surname = sapply(complete_data$Name, function(x) strsplit(x, ""[,.]"")[[1]][1])
complete_data$Surname = as.factor(complete_data$Surname)
glue(""Number of Distinct Surname : {n_distinct(complete_data$Surname)}"")
complete_data$Fsize = complete_data$SibSp + complete_data$Parch + 1
ggplot(complete_data[1:891, ], aes(x = Fsize, fill = factor(Survived))) + geom_bar(stat = ""count"", position = ""dodge"", color = ""black"") + scale_x_continuous(breaks = c(min(complete_data$Fsize):max(complete_data$Fsize))) + labs(title = ""Survival Based on Family Size"", x = ""Family Size"", label = ""Survived"") + theme_few()
complete_data$FsizeDiscrete[complete_data$Fsize == 1] = ""Singleton""
complete_data$FsizeDiscrete[complete_data$Fsize <= 5 & complete_data$Fsize > 1] = ""Small""
complete_data$FsizeDiscrete[complete_data$Fsize > 5] = ""Large""
complete_data$FsizeDiscrete = as.factor(complete_data$FsizeDiscrete)
mosaicplot(table(complete_data$FsizeDiscrete, complete_data$Survived), main = ""Survival by Family Size "", shade = TRUE)
complete_data$Solo = ""No""
complete_data$Solo[complete_data$SibSp == 0 & complete_data$Parch == 0] = ""Yes""
complete_data$Solo = as.factor(complete_data$Solo)
ggplot(data = complete_data[1:891, ], aes(x = Solo, fill = as.factor(Survived))) + geom_bar(stat = ""Count"", position = ""dodge"", color = ""black"") + labs(title = ""Solo Traveller Survival"", x = ""Solo Traveller ?"") + geom_label(stat = ""count"", position = position_dodge(width = 1), hjust = ""center"", aes(label = ..count..))
for (i in 1:nrow(complete_data)) {
    if (complete_data$Age[i] <= 4) {
        complete_data$AgeGroup[i] = ""Infant""
    }
    else if (complete_data$Age[i] > 4 & complete_data$Age[i] <= 10) {
        complete_data$AgeGroup[i] = ""Child""
    }
    else if (complete_data$Age[i] > 10 & complete_data$Age[i] <= 18) {
        complete_data$AgeGroup[i] = ""Young""
    }
    else if (complete_data$Age[i] > 18 & complete_data$Age[i] <= 50) {
        complete_data$AgeGroup[i] = ""Adults""
    }
    else {
        complete_data$AgeGroup[i] = ""Old""
    }
}
complete_data$AgeGroup = as.factor(complete_data$AgeGroup)
ggplot(complete_data[1:891, ], aes(x = AgeGroup, fill = Survived)) + geom_bar(stat = ""count"", position = ""stack"", color = ""black"") + labs(title = ""Survival By Age Group"", x = ""Age Group"") + theme_few()
ggplot(complete_data[1:891, ], aes(x = AgeGroup, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"", color = ""black"") + labs(title = ""Survival By Age Group"", x = ""Age Group"") + theme_few() + geom_label(stat = ""count"", position = position_dodge(width = 1), hjust = ""center"", aes(label = ..count..))
complete_data$Mother = ""Not Mother""
complete_data$Mother[complete_data$Sex == ""female"" & complete_data$Parch > 0 & complete_data$Age > 18 & complete_data$Title != ""Miss""] = ""Mother""
complete_data$Mother = as.factor(complete_data$Mother)
ggplot(complete_data[1:891, ], aes(x = Mother, fill = Survived)) + geom_bar(stat = ""count"", position = ""dodge"", color = ""black"") + labs(title = ""Survival for Mothers"", x = ""Mother"") + geom_label(stat = ""count"", position = position_dodge(width = 1), hjust = ""center"", aes(label = ..count..)) + theme_few()
ggplot(complete_data[1:891, ], aes(Age, fill = Survived)) + geom_histogram(color = ""black"") + facet_grid(. ~ Sex) + theme_few() + ggtitle(""Survival by Age and Gender"")
ggplot(data = complete_data[1:891, ], aes(x = Survived, y = Fare, fill = Survived)) + geom_boxplot() + xlab(""Fare Box plot"")
ggplot(data = complete_data[1:891, ], aes(x = Fare, fill = Survived)) + geom_density(alpha = 0.7) + labs(title = ""Fare Density Plot"", x = ""Fare"")
glimpse(complete_data)
md.pattern(complete_data[1:891, ])
cbind(sapply(complete_data, function(x) {
    is.factor(x)
}))
xgb_data = complete_data[, c(""Survived"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Fsize"")]
xgb_data$Plass_1 = ifelse(complete_data$Pclass == 1, 1, 0)
xgb_data$Plass_2 = ifelse(complete_data$Pclass == 2, 1, 0)
xgb_data$Plass_3 = ifelse(complete_data$Pclass == 3, 1, 0)
xgb_data$Sex_Male = ifelse(complete_data$Sex == ""male"", 1, 0)
xgb_data$Embarked_C = ifelse(complete_data$Embarked == ""C"", 1, 0)
xgb_data$Embarked_Q = ifelse(complete_data$Embarked == ""Q"", 1, 0)
xgb_data$Embarked_S = ifelse(complete_data$Embarked == ""S"", 1, 0)
xgb_data$Title_Mr = ifelse(complete_data$Title == ""Mr"", 1, 0)
xgb_data$Title_Mrs = ifelse(complete_data$Title == ""Mrs"", 1, 0)
xgb_data$Title_Miss = ifelse(complete_data$Title == ""Miss"", 1, 0)
xgb_data$Title_Master = ifelse(complete_data$Title == ""Master"", 1, 0)
xgb_data$Title_Rare = ifelse(complete_data$Title == ""Rare"", 1, 0)
xgb_data$FsizeDiscrete_Singleton = ifelse(complete_data$FsizeDiscrete == ""Singleton"", 1, 0)
xgb_data$FsizeDiscrete_Small = ifelse(complete_data$FsizeDiscrete == ""Small"", 1, 0)
xgb_data$FsizeDiscrete_Large = ifelse(complete_data$FsizeDiscrete == ""Large"", 1, 0)
xgb_data$Solo_Yes = ifelse(complete_data$Solo == ""Yes"", 1, 0)
xgb_data$AgeGroup_Infant = ifelse(complete_data$AgeGroup == ""Infant"", 1, 0)
xgb_data$AgeGroup_Child = ifelse(complete_data$AgeGroup == ""Child"", 1, 0)
xgb_data$AgeGroup_Young = ifelse(complete_data$AgeGroup == ""Young"", 1, 0)
xgb_data$AgeGroup_Adult = ifelse(complete_data$AgeGroup == ""Adults"", 1, 0)
xgb_data$AgeGroup_Old = ifelse(complete_data$AgeGroup == ""Old"", 1, 0)
xgb_data$Mother_Yes = ifelse(complete_data$Mother == ""Mother"", 1, 0)
training_data = xgb_data[1:891, ]
testing_data = xgb_data[892:1309, ]
testing_data$Survived = NULL
paramList <- list(eta = 0.1, gamma = 0, max.depth = 10, min_child_weight = 5, subsample = 1, colsample_bytree = 0.2)
xgb_fit = xgboost(data = as.matrix(training_data[, -which(colnames(training_data) == ""Survived"")]), label = as.matrix(training_data$Survived), params = paramList, missing = NA, nrounds = 50000, verbose = 1, eval_metric = ""error"", early_stopping_rounds = 2000, objective = ""binary:logistic"")
importance <- xgb.importance(feature_names = colnames(testing_data), model = xgb_fit)
xgb.plot.importance(importance)
ggplot(data = importance, aes(x = reorder(Feature, Gain), y = Gain, fill = Gain)) + geom_bar(stat = ""identity"", color = ""black"") + coord_flip() + labs(title = ""Feature Importance By XGBoost"", x = ""Features"", y = ""Gain"") + theme_calc()
evaluation_log = as.data.frame(xgb_fit$evaluation_log)
colnames(evaluation_log)
ggplot(evaluation_log, mapping = aes(x = iter)) + geom_line(aes(y = train_error, color = ""Traning Error"")) + labs(title = ""Execution Error log"", x = ""Iteration"", y = ""Error"") + theme_classic()
xgb_pred = predict(xgb_fit, as.matrix(testing_data))
xgb_result = data.frame(PassengerId = complete_data$PassengerId[892:1309], Survived = xgb_pred)
xgb_result$Survived = ifelse(xgb_result$Survived > 0.5, 1, 0)
write.csv(xgb_result, ""xgb_sub.csv"", row.names = F)
len = round(nrow(training_data) * 0.8, 0)
dtrain = xgb.DMatrix(data = as.matrix(training_data[1:len, -which(colnames(training_data) == ""Survived"")]), label = as.matrix(training_data$Survived[1:len]))
dtest = xgb.DMatrix(data = as.matrix(training_data[(len + 1):891, -which(colnames(training_data) == ""Survived"")]), label = as.matrix(training_data$Survived[(len + 1):891]))
watch_list = list(train = dtrain, test = dtest)
xgb_train_fit = xgb.train(data = dtrain, eta = 0.1, gamma = 0, max.depth = 10, min_child_weight = 5, subsample = 1, colsample_bytree = 0.2, watchlist = watch_list, missing = NA, nrounds = 50000, early_stopping_rounds = 2000, verbose = 1, eval_metric = ""error"", objective = ""binary:logistic"")
importance2 <- xgb.importance(feature_names = colnames(testing_data), model = xgb_train_fit)
xgb.plot.importance(importance2)
ggplot(data = importance2, aes(x = reorder(Feature, Gain), y = Gain, fill = Gain)) + geom_bar(stat = ""identity"", color = ""black"") + coord_flip() + labs(title = ""Feature Importance By XGBoost with Watchlist and Early Stopping"", x = ""Features"", y = ""Gain"") + theme_calc()
evaluation_log = as.data.frame(xgb_train_fit$evaluation_log)
ggplot(evaluation_log, mapping = aes(x = iter)) + geom_line(aes(y = train_error, color = ""Traning Error"")) + geom_line(aes(y = test_error, color = ""Testing Error"")) + labs(title = ""Execution Error log"", x = ""Iteration"", y = ""Error"") + theme_classic()
xgb_pred2 = predict(xgb_train_fit, as.matrix(testing_data))
xgb_result2 = data.frame(PassengerId = complete_data$PassengerId[892:1309], Survived = xgb_pred2)
xgb_result2$Survived = ifelse(xgb_result2$Survived > 0.5, 1, 0)
write.csv(xgb_result2, ""xgb_sub2.csv"", row.names = F)",0,0,1,1,0,0,0,1,1,0,0,0,0,0
395,pliptor-optimal-titanic-for-gender-only-0-7655,0.7440000000000001,"['filter', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'c', 'data.frame', 'dir.exists', 'ifelse', 'is.na', 'length', 'library', 'ls', 'nrow', 'paste0', 'print', 'rbind', 'rep', 'return', 'rm', 'sprintf', 'sum', 'table', 'count', 'select', 'aes', 'geom_bar', 'ggplot', 'labs', 'xlab', 'read.csv', 'write.csv']","['ggplot2', 'gridExtra', 'dplyr', 'base']",1.16916394233704,"['labs', 'nrow', 'sprintf', 'is.na', 'print', 'count', 'filter', 'rep', 'xlab', 'dir.exists', 'geom_bar', 'length', 'read.csv', 'paste0', 'table', 'return', 'rm', 'c', 'aes', 'rbind', 'ifelse', 'sum', 'ls', 'write.csv', 'data.frame', 'ggplot', 'user defined', 'library', 'select']",[],"['pliptor-optimal-titanic-for-pclass-only-0-65550', 'divyabudale-conditional-inference-tree-model-titanic', 'cbrioso-titanic-rf', 'stevencahill-titanic-machine-learning-from-disaster', 'amodi8-titanic-exploring-survival-using-machine-learning', 'erskumars-titanic-survival-eda-and-survival-rate-prediction', 'jerlinraj-titanic-machine-learning-from-disaster', 'scout16-titanic-disaster-in-r', 'liudj2008-titanic', 'liudj2008-fork-of-titanic']","[0.7296790630680949, 0.4554769842634797, 0.22467919739123596, 0.13925538849742208, 0.11765408425264871, 0.11396611942130311, 0.11282654239907275, 0.1051506436717563, 0.10234310792030829, 0.10226044697674247]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'character(0)': ['load_data'], 'package:base': ['c', 'data.frame', 'dir.exists', 'ifelse', 'is.na', 'length', 'library', 'ls', 'nrow', 'paste0', 'print', 'rbind', 'rep', 'return', 'rm', 'sprintf', 'sum', 'table'], 'package:dplyr': ['count', 'select'], 'package:ggplot2': ['aes', 'geom_bar', 'ggplot', 'labs', 'xlab'], 'package:utils': ['read.csv', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""character(0)"": [""load_data""], ""package:base"": [""c"", ""data.frame"", ""dir.exists"", ""ifelse"", ""is.na"", ""length"", ""library"", ""ls"", ""nrow"", ""paste0"", ""print"", ""rbind"", ""rep"", ""return"", ""rm"", ""sprintf"", ""sum"", ""table""], ""package:dplyr"": [""count"", ""select""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""ggplot"", ""labs"", ""xlab""], ""package:utils"": [""read.csv"", ""write.csv""]}",cpackagedplyr packagestats filter character0 loaddata packagebase c dataframe direxists ifelse isna length library ls nrow paste0 print rbind rep return rm sprintf sum table packagedplyr count select packageggplot2 aes geombar ggplot labs xlab packageutils readcsv writecsv,"rm(list = ls())
library(ggplot2)
library(gridExtra)
library(dplyr)
path <- ""../data/""
if (!dir.exists(path)) {
    path <- ""../input/""
}
load_data <- function(file) {
    return(read.csv(paste0(path, file)))
}
train <- load_data(""train.csv"")
test <- load_data(""test.csv"")
test$Survived <- rep(NA, nrow(test))
comb <- rbind(train, test)
train_index <- comb$PassengerId[!is.na(comb$Survived)]
test_index <- comb$PassengerId[is.na(comb$Survived)]
comb$Set <- ifelse(comb$PassengerId %in% train_index, ""Train"", ""Test"")
dftotal <- comb %>% filter(Survived == 0 | Survived == 1) %>% select(Survived, Sex, Set)
dfsurvived <- comb %>% filter(Survived == 1) %>% select(Survived, Sex, Set)
dftotal$count <- ""Total""
dfsurvived$count <- ""Survived""
df <- rbind(dftotal, dfsurvived)
ggplot(df, aes(Sex, fill = count)) + geom_bar(position = ""dodge"") + labs(title = ""Survival per Gender in Train Set"") + xlab(""Gender"")
total <- 2224
killed <- 1502
true_survival_rate <- 100 * (total - killed)/total
pop_count <- comb %>% filter(Set == ""Train"") %>% count(Sex)
pop_surv_count <- comb %>% filter(Set == ""Train"" & Survived == 1) %>% count(Sex)
surv_likelihood <- pop_surv_count$n/pop_count$n
comb$Prediction <- ifelse(surv_likelihood[comb$Sex] > 0.5, 1, 0)
train_survival_rate <- 100 * sum(pop_surv_count$n)/sum(pop_count$n)
print(sprintf(""Train set survival rate %2.1f percent"", train_survival_rate))
print(sprintf(""Survival rate overestimation in train set = %2.1f percent"", train_survival_rate - true_survival_rate))
map.gen <- c(female = 1, male = 2)
weight <- ifelse(comb$Set == ""Train"", 100/length(train_index), 100/length(test_index))
ggplot(comb, aes(x = Sex, fill = Set)) + geom_bar(position = ""dodge"", aes(weight = weight)) + labs(title = ""Gender Distribution in Train and Test Sets"", x = ""Gender"", y = ""Percent"")
print(sprintf(""Female to population ratio in train set = %2.1f percent"", 100 * pop_count$n[map.gen[""female""]]/sum(pop_count$n)))
print(sprintf(""Male   to population ratio in train set = %2.1f percent"", 100 * pop_count$n[map.gen[""male""]]/sum(pop_count$n)))
train_gender_survived <- table(train$Sex[train$Survived == 1])
print(sprintf(""Female survival rate in train set = %2.1f percent"", 100 * pop_surv_count$n[map.gen[""female""]]/pop_count$n[map.gen[""female""]]))
print(sprintf(""Male   survival rate in train set = %2.1f percent"", 100 * pop_surv_count$n[map.gen[""male""]]/pop_count$n[map.gen[""female""]]))
test_pop_count <- comb[test_index, ] %>% count(Sex)
print(sprintf(""Female to population ratio in test set = %2.1f percent"", 100 * test_pop_count$n[map.gen[""female""]]/sum(test_pop_count$n)))
print(sprintf(""Male   to population ratio in test set = %2.1f percent"", 100 * test_pop_count$n[map.gen[""male""]]/sum(test_pop_count$n)))
test_expected_surv = test_pop_count$n * surv_likelihood
accuracy <- ifelse(surv_likelihood > 0.5, surv_likelihood, 1 - surv_likelihood)
print(sprintf(""Optimal gender only predicted score            %2.4f "", sum(test_pop_count$n * accuracy)/sum(test_pop_count$n)))
print(sprintf(""Actual leader board (LB) score on the test set %2.4f "", 0.76555))
print(sprintf(""Train set relative overstimation on LB         %2.4f "", (sum(test_pop_count$n * accuracy)/sum(test_pop_count$n)/0.76555)))
submit <- data.frame(PassengerId = test_index, Survived = comb$Prediction[test_index])
write.csv(submit, file = paste0(""gender_only.csv""), row.names = FALSE, quote = F)",0,0,0,0,0,0,0,0,0,0,0,0,0,0
396,fpsawicki-eda-and-prediction-on-titanic-dataset,0.746,"['filter', 'apply', 'as.factor', 'c', 'data.frame', 'factor', 'gsub', 'ifelse', 'is.na', 'levels', 'library', 'mean', 'paste0', 'print', 'return', 'round', 'row.names', 'sapply', 'set.seed', 'sum', 'table', 'unique', 'bind_rows', 'dense_rank', 'desc', 'glimpse', 'mutate', 'select', 'aes', 'coord_flip', 'geom_bar', 'geom_density', 'geom_histogram', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_discrete', 'plot', 'complete', 'mice', 'importance', 'randomForest', 'median', 'predict', 'reorder', 'head', 'read.csv', 'write.csv']","['mice', 'ggplot2', 'dplyr', 'purrr', 'randomForest', 'base']",4.2158350944519,"['labs', 'complete', 'mean', 'geom_text', 'median', 'coord_flip', 'glimpse', 'dense_rank', 'is.na', 'levels', 'print', 'as.factor', 'filter', 'sapply', 'round', 'geom_histogram', 'mice', 'importance', 'desc', 'set.seed', 'gsub', 'factor', 'unique', 'geom_bar', 'apply', 'read.csv', 'paste0', 'table', 'randomForest', 'return', 'row.names', 'c', 'aes', 'scale_x_discrete', 'mutate', 'ifelse', 'sum', 'geom_vline', 'plot', 'predict', 'reorder', 'write.csv', 'bind_rows', 'data.frame', 'ggplot', 'geom_density', 'head', 'library', 'select']",[],"['joelweiss-titanic-data-r', 'prabhulingayya-titanic-prediction-using-logistic-regression', 'cnusapbo-titanic-r-code', 'goblin-titanic-test', 'alma123-titanic', 'garciparedes-titanic-getting-started', 'tsfitz-titanic', 'jacekpardyak-mytitanicscript', 'mustfkeskin-titanic-xgboost', 'econdata-titanic-datasets-ml-with-r-journey-to-top-1']","[0.3721933757686051, 0.3639732168396007, 0.363886476968399, 0.31583009150245067, 0.25103037213882673, 0.24226448795262168, 0.22918055245678248, 0.21236930137275495, 0.21076486000895395, 0.18268887994948688]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['apply', 'as.factor', 'c', 'data.frame', 'factor', 'gsub', 'ifelse', 'is.na', 'levels', 'library', 'mean', 'paste0', 'print', 'return', 'round', 'row.names', 'sapply', 'set.seed', 'sum', 'table', 'unique'], 'package:dplyr': ['bind_rows', 'dense_rank', 'desc', 'glimpse', 'mutate', 'select'], 'package:ggplot2': ['aes', 'coord_flip', 'geom_bar', 'geom_density', 'geom_histogram', 'geom_text', 'geom_vline', 'ggplot', 'labs', 'scale_x_discrete'], 'package:graphics': ['plot'], 'package:mice': ['complete', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['median', 'predict', 'reorder'], 'package:utils': ['head', 'read.csv', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""apply"", ""as.factor"", ""c"", ""data.frame"", ""factor"", ""gsub"", ""ifelse"", ""is.na"", ""levels"", ""library"", ""mean"", ""paste0"", ""print"", ""return"", ""round"", ""row.names"", ""sapply"", ""set.seed"", ""sum"", ""table"", ""unique""], ""package:dplyr"": [""bind_rows"", ""dense_rank"", ""desc"", ""glimpse"", ""mutate"", ""select""], ""package:ggplot2"": [""aes"", ""coord_flip"", ""geom_bar"", ""geom_density"", ""geom_histogram"", ""geom_text"", ""geom_vline"", ""ggplot"", ""labs"", ""scale_x_discrete""], ""package:graphics"": [""plot""], ""package:mice"": [""complete"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""median"", ""predict"", ""reorder""], ""package:utils"": [""head"", ""read.csv"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase apply asfactor c dataframe factor gsub ifelse isna levels library mean paste0 print return round rownames sapply setseed sum table unique packagedplyr bindrows denserank desc glimpse mutate select packageggplot2 aes coordflip geombar geomdensity geomhistogram geomtext geomvline ggplot labs scalexdiscrete packagegraphics plot packagemice complete mice packagerandomForest importance randomForest packagestats median predict reorder packageutils head readcsv writecsv,"library(mice)
library(ggplot2)
library(dplyr)
library(purrr)
library(randomForest)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
data <- bind_rows(train, test)
glimpse(data)
missing <- sapply(data, function(x) sum(is.na(x)))
print(missing)
data$Pclass <- as.factor(data$Pclass)
levels(data$Pclass) <- c(""Upper"", ""Middle"", ""Lower"")
data$Embarked <- as.factor(data$Embarked)
data$Sex <- as.factor(data$Sex)
levels(data$Sex) <- c(""Female"", ""Male"")
head(data)
set.seed(765)
data_to_mice <- data %>% select(Pclass, Sex, Age, SibSp, Parch, Fare)
m_model <- mice(data_to_mice, method = ""rf"")
imputes <- complete(m_model)
ggplot() + geom_density(data = data, aes(x = Age), fill = ""blue"", alpha = 0.5) + geom_density(data = imputes, aes(x = Age), fill = ""red"", alpha = 0.5)
data$Age <- imputes$Age
data %>% filter(Pclass == ""Lower"", Embarked == ""S"") %>% ggplot(aes(Fare)) + geom_histogram(binwidth = 1.2, fill = ""blue3"", alpha = 0.5) + geom_vline(aes(xintercept = mean(Fare, na.rm = TRUE)), col = ""red"") + geom_vline(aes(xintercept = median(Fare, na.rm = TRUE)), col = ""green"")
data$Fare[is.na(data$Fare)] <- median(data[data$Pclass == ""Lower"" & data$Embarked == ""S"", ]$Fare, na.rm = TRUE)
data$FamilySize <- ifelse(data$SibSp + data$Parch + 1 == 1, ""single"", ifelse(data$SibSp + data$Parch + 1 < 4, ""small"", ""large""))
ggplot(data, aes(FamilySize)) + geom_bar(position = ""dodge"") + scale_x_discrete(limits = c(""single"", ""small"", ""large""))
data$Title <- gsub(""(.*, )|(\\..*)"", """", data$Name)
print(unique(data$Title))
data$Title[data$Title == ""Mlle""] <- ""Miss""
data$Title[data$Title == ""Ms""] <- ""Miss""
data$Title[data$Title == ""Mme""] <- ""Mrs""
data$Title[data$Title == ""Dona""] <- ""Mrs""
data$Title[data$Title == ""Don""] <- ""Mr""
vip <- c(""Lady"", ""the Countess"", ""Sir"", ""Jonkheer"")
crew <- c(""Capt"", ""Col"", ""Major"")
other <- c(""Dr"", ""Rev"")
data$Title[data$Title %in% vip] <- ""VIP""
data$Title[data$Title %in% crew] <- ""CREW""
data$Title[data$Title %in% other] <- ""OTHER""
data$FamilyName <- gsub("",.*"", """", data$Name)
data$Sector <- sapply(data$Cabin, substr, 1, 1)
data$Sector[data$Sector == """"] <- NA
Family.Sector <- data %>% select(FamilyName, Sector) %>% filter(!is.na(Sector)) %>% unique()
data$Sector <- apply(data[, c(""FamilyName"", ""Sector"")], 1, function(x) {
    if (x[""FamilyName""] %in% Family.Sector$FamilyName & is.na(x[""Sector""])) {
        return(Family.Sector$Sector[Family.Sector$FamilyName == x[""FamilyName""]][1])
    }
    else if (!is.na(x[""Sector""])) {
        return(x[""Sector""])
    }
    else {
        return(""M"")
    }
})
head(data[c(""FamilyName"", ""Sector"")])
table(data$Sector)
data$FamilySize <- as.factor(data$FamilySize)
data$Title <- as.factor(data$Title)
data$Sector <- as.factor(data$Sector)
train <- data[1:891, ]
test <- data[892:1309, ]
titanic_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + FamilySize + Title + Sector, data = train)
plot(titanic_model)
importance <- importance(titanic_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[, ""MeanDecreaseGini""], 2))
rankImportance <- varImportance %>% mutate(Rank = paste0(""#"", dense_rank(desc(Importance))))
ggplot(rankImportance, aes(x = reorder(Variables, Importance), y = Importance, fill = Importance)) + geom_bar(stat = ""identity"") + geom_text(aes(x = Variables, y = 0.5, label = Rank), hjust = 0, vjust = 0.55, size = 4, colour = ""red"") + labs(x = ""Variables"") + coord_flip()
prediction <- predict(titanic_model, test)
solution <- data.frame(PassengerId = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
398,ilijaf-titanic,0.763,"['as.factor', 'attach', 'c', 'data.frame', 'gsub', 'ifelse', 'lapply', 'library', 'mean', 'names', 'set.seed', 'summary', 'table', 'bind_rows', 'complete', 'mice', 'glm', 'predict', 'read.csv', 'write.csv']","['mice', 'dplyr', 'base']",2.80402112007141,"['complete', 'mean', 'lapply', 'glm', 'names', 'attach', 'as.factor', 'summary', 'mice', 'set.seed', 'gsub', 'read.csv', 'table', 'c', 'ifelse', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'library']",[],"['yuanwxu-exploring-survival-on-the-titanic', 'qianbi-titanic-logistic-2', 'venkatko-titanic-survival1', 'abedben-exploring-survival-on-the-titanic', 'tetyama-trial-titanic', 'hemingwei-titanic-r-solution-from-megan-risdal', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'arunkumarramanan-data-science-in-r-and-titanic-survival-prediction', 'jasonhit-first-script-for-kaggle-titanic']","[0.6903549212696138, 0.6873714437879043, 0.678592893762474, 0.6711061507701888, 0.6680305666196811, 0.6651278796077311, 0.6648476149843923, 0.6648476149843923, 0.6635553562633586, 0.6625047488339606]","{'package:base': ['as.factor', 'attach', 'c', 'data.frame', 'gsub', 'ifelse', 'lapply', 'library', 'mean', 'names', 'set.seed', 'summary', 'table'], 'package:dplyr': ['bind_rows'], 'package:mice': ['complete', 'mice'], 'package:stats': ['glm', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.factor"", ""attach"", ""c"", ""data.frame"", ""gsub"", ""ifelse"", ""lapply"", ""library"", ""mean"", ""names"", ""set.seed"", ""summary"", ""table""], ""package:dplyr"": [""bind_rows""], ""package:mice"": [""complete"", ""mice""], ""package:stats"": [""glm"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase asfactor attach c dataframe gsub ifelse lapply library mean names setseed summary table packagedplyr bindrows packagemice complete mice packagestats glm predict packageutils readcsv writecsv,"library(""mice"")
library(""dplyr"")
train = read.csv(""../input/train.csv"")
test = read.csv(""../input/test.csv"")
full <- bind_rows(train, test)
factor_vars <- c(""PassengerId"", ""Pclass"", ""Sex"")
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
table(full$Sex, full$Title)
full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
set.seed(129)
mice_mod <- mice(full[, !names(full) %in% c(""PassengerId"", ""Name"", ""Ticket"", ""Cabin"", ""Title"", ""Survived"")], method = ""rf"")
mice_output <- complete(mice_mod)
full$Embarked[c(62, 830)] <- ""C""
full$Age <- mice_output$Age
train <- full[1:891, ]
test <- full[892:1309, ]
glm.fit = glm(Survived ~ Age + Title + Pclass + SibSp, data = train, family = binomial)
summary(glm.fit)
glm.probs = predict(glm.fit, type = ""response"")
glm.pred = ifelse(glm.probs > 0.5, ""Survived"", ""Dead"")
attach(train)
(475 + 243)/(467 + 232 + 82 + 110)
table(glm.pred, Survived)
mean(glm.pred == Survived)
prediction <- predict(glm.fit, test)
prediction[1:11]
solution <- data.frame(PassengerID = test$PassengerId, Survived = ifelse(prediction > 0.5, 1, 0))
write.csv(solution, file = ""rf_mod_Solution.csv"", row.names = F)",0,0,0,1,0,0,0,0,0,0,0,0,0,0
400,mrstepanovic-using-random-forests-to-identify-titanic-survivors,0.758,"['as.character', 'c', 'colnames', 'data.frame', 'factor', 'library', 'rbind', 'sapply', 'strsplit', 'sub', 'rpart', 'predict', 'read.csv', 'write.csv']","['randomForest', 'rpart.plot', 'base']",0.325496912002563,"['rbind', 'factor', 'colnames', 'predict', 'write.csv', 'data.frame', 'strsplit', 'read.csv', 'rpart', 'library', 'as.character', 'sapply', 'c', 'sub']",[],"['tosnaldo10-titanic-challange', 'maitree-titanic-survival-list-using-random-forest', 'maitree-titanic-survival-list-using-classification', 'paulocressoni-titanic-using-stepwise-linear-regression', 'nithishthirmul-titanic-data-test1', 'lizpund-titanic-competition-kernel', 'lagprophet-titanic', 'ezhilvelme-titanic-neural-network-c-4-2', 'jacekpardyak-mytitanicscript', 'anweshaghosh-titanic-forkofmultiplescripts-r']","[0.9563219607931239, 0.9375256144339168, 0.9293873055536677, 0.13531140634325353, 0.11090064692744384, 0.10439834755937781, 0.10342204426460493, 0.09999453965811689, 0.09678961703272228, 0.09521232040603766]","{'package:base': ['as.character', 'c', 'colnames', 'data.frame', 'factor', 'library', 'rbind', 'sapply', 'strsplit', 'sub'], 'package:rpart': ['rpart'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.character"", ""c"", ""colnames"", ""data.frame"", ""factor"", ""library"", ""rbind"", ""sapply"", ""strsplit"", ""sub""], ""package:rpart"": [""rpart""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase ascharacter c colnames dataframe factor library rbind sapply strsplit sub packagerpart rpart packagestats predict packageutils readcsv writecsv,"library(randomForest)
library(rpart.plot)
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
test$Survived <- NA
combo <- rbind(train, test)
combo$Name <- as.character(combo$Name)
combo$Title <- sapply(combo$Name, FUN = function(x) {
    strsplit(x, split = ""[,.]"")[[1]][2]
})
combo$Title <- sub("" "", """", combo$Title)
combo$Title[combo$Title %in% c(""Mme"", ""Mlle"")] <- ""Mlle""
combo$Title[combo$Title %in% c(""Capt"", ""Don"", ""Major"", ""Sir"", ""Jonkheer"")] <- ""Sir""
combo$Title[combo$Title %in% c(""Dona"", ""Lady"", ""the Countess"")] <- ""Lady""
combo$Title <- factor(combo$Title)
combo$FamilySize <- combo$SibSp + combo$Parch + 1
train <- combo[1:891, ]
test <- combo[892:1309, ]
colnames(train)
fit <- rpart(Survived ~ Pclass + Sex + Age + Fare + Embarked + Cabin + Title + FamilySize, data = train, method = ""class"")
prediction <- predict(fit, test, type = ""class"")
submission <- data.frame(PassengerId = test$PassengerId, Survived = prediction)
write.csv(submission, file = ""titanic_solution.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,1,0,0,0,0
401,cnusapbo-titanic-r-code,0.746,"['as.factor', 'gsub', 'is.na', 'ls', 'mean', 'nrow', 'rbind', 'rep', 'rm', 'round', 'summary', 'which', 'binomial', 'glm', 'predict', 'read.csv', 'str', 'write.csv']",['base'],0.391217947006226,"['gsub', 'rbind', 'nrow', 'ls', 'predict', 'mean', 'write.csv', 'read.csv', 'binomial', 'as.factor', 'summary', 'which', 'rm', 'round', 'rep', 'str', 'is.na', 'glm']",[],"['prabhulingayya-titanic-prediction-using-logistic-regression', 'joelweiss-titanic-data-r', 'goblin-titanic-test', 'garciparedes-titanic-getting-started', 'jacekpardyak-mytitanicscript', 'alma123-titanic', 'tsfitz-titanic', 'fpsawicki-eda-and-prediction-on-titanic-dataset', 'mustfkeskin-titanic-xgboost', 'econdata-titanic-datasets-ml-with-r-journey-to-top-1']","[0.9988202265519232, 0.5668477948535641, 0.49770721294156484, 0.3905701659417201, 0.38621667881451704, 0.3766854330655263, 0.36961558906063335, 0.363886476968399, 0.3403951550622647, 0.30678421433048203]","{'package:base': ['as.factor', 'gsub', 'is.na', 'ls', 'mean', 'nrow', 'rbind', 'rep', 'rm', 'round', 'summary', 'which'], 'package:stats': ['binomial', 'glm', 'predict'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""as.factor"", ""gsub"", ""is.na"", ""ls"", ""mean"", ""nrow"", ""rbind"", ""rep"", ""rm"", ""round"", ""summary"", ""which""], ""package:stats"": [""binomial"", ""glm"", ""predict""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase asfactor gsub isna ls mean nrow rbind rep rm round summary which packagestats binomial glm predict packageutils readcsv str writecsv,"rm(list = ls())
training <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
test$Survived <- rep(NA, nrow(test))
data <- rbind(training, test)
str(data)
summary(data)
data$Embarked <- as.factor(data$Embarked)
data$Pclass <- as.factor(data$Pclass)
data$Sex <- as.factor(data$Sex)
data$Survived <- as.factor(data$Survived)
data$N_Family <- data$SibSp + data$Parch + 1
data$individual_price <- data$Fare/data$N_Family
data$individual_price[1044] <- mean(data$individual_price[which(data$Pclass == 3 & is.na(data$Fare) == FALSE)])
data$Embarked[which(data$Embarked == """")] <- ""S""
data$Title <- gsub(""(.*, )|(\\..*)"", """", data$Name)
data$Title[data$Title == ""Ms""] <- ""Miss""
data$Age[data$Title == ""Dr"" & is.na(data$Age) == TRUE] <- mean(data$Age[data$Title == ""Dr"" & is.na(data$Age) == FALSE])
data$Age[data$Title == ""Master"" & is.na(data$Age) == TRUE] <- mean(data$Age[data$Title == ""Master"" & is.na(data$Age) == FALSE])
data$Age[data$Title == ""Miss"" & is.na(data$Age) == TRUE] <- mean(data$Age[data$Title == ""Miss"" & is.na(data$Age) == FALSE])
data$Age[data$Title == ""Mr"" & is.na(data$Age) == TRUE] <- mean(data$Age[data$Title == ""Mr"" & is.na(data$Age) == FALSE])
data$Age[data$Title == ""Mrs"" & is.na(data$Age) == TRUE] <- mean(data$Age[data$Title == ""Mrs"" & is.na(data$Age) == FALSE])
tr_data <- data[1:891, ]
te_data <- data[892:1309, ]
model_logistic = glm(Survived ~ Pclass + Sex + Age + N_Family, family = binomial(link = ""logit""), data = tr_data)
summary(model_logistic)
mean(tr_data$Survived == round(predict(model_logistic, tr_data, type = ""response"")))
te_data$Survived <- round(predict(model_logistic, te_data, type = ""response""))
write.csv(te_data[, 1:2], file = ""Titanic_sol.csv"", row.names = F)",0,0,0,0,1,0,0,0,0,0,0,0,0,0
402,ivanbaj-part-2-titanic-encounters-vowpal-wabbit-and-r,0.35200000000000004,"['library', 'mutate', 'select', 'tbl_df', 'read.csv', 'write.csv']","['dplyr, warn.conflicts = FALSE', 'base']",0.556960105895996,"['mutate', 'write.csv', 'tbl_df', 'read.csv', 'library', 'select']",[],"['sawajid-titanic-test', 'zhaotianjing-titanic', 'mihaque313-first-submission-to-titanic-problem', 'sudheer464-prediction-1-on-titanic-dataset', 'scout16-titanic-disaster-in-r', 'jerlinraj-titanic-machine-learning-from-disaster', 'amodi8-titanic-exploring-survival-using-machine-learning', 'lizpund-titanic-competition-kernel', 'stevencahill-titanic-machine-learning-from-disaster', 'acrespop-titanic1']","[0.41120320603795557, 0.37763523433734214, 0.35996627387706215, 0.353689702530212, 0.33978712731920524, 0.31667130119109665, 0.25255003132013176, 0.22885159144486042, 0.21717001132787164, 0.20952829523236116]","{'package:base': ['library'], 'package:dplyr': ['mutate', 'select', 'tbl_df'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""library""], ""package:dplyr"": [""mutate"", ""select"", ""tbl_df""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase library packagedplyr mutate select tbldf packageutils readcsv writecsv,"library(dplyr, warn.conflicts = FALSE)
test_tbl <- tbl_df(read.csv(""../input/test.csv"", stringsAsFactors = FALSE))
submit <- tbl_df(select(test_tbl, PassengerId))
submit <- mutate(submit, Survived = 0)
write.csv(submit, file = ""submit_all_die.csv"", row.names = F)
submit <- tbl_df(select(test_tbl, PassengerId))
submit <- mutate(submit, Survived = 1)
write.csv(submit, file = ""submit_all_survive.csv"", row.names = F)",0,0,0,0,0,0,0,0,0,0,0,0,0,0
403,alediator-exploring-survival-on-the-titanic,0.7609999999999999,"['as.numeric', 'c', 'data.frame', 'gsub', 'library', 'sapply', 'strsplit', 'bind_rows', 'fancyRpartPlot', 'rpart', 'predict', 'read.csv', 'write.csv']","['rattle', 'rpart.plot', 'RColorBrewer', 'ggplot2', 'ggthemes', 'scales', 'dplyr', 'base']",0.6408951282501221,"['gsub', 'as.numeric', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'strsplit', 'read.csv', 'rpart', 'library', 'sapply', 'fancyRpartPlot', 'c']",[],"['venkatko-titanic-survival1', 'abedben-exploring-survival-on-the-titanic', 'researchbigd-titanic-forkedfrommeganscript', 'tetyama-trial-titanic', 'arunkumarramanan-data-science-in-r-and-titanic-survival-prediction', 'jasonhit-first-script-for-kaggle-titanic', 'yugrao-exploring-survival-on-the-titanic', 'yugrao-titanic-n', 'hemingwei-titanic-r-solution-from-megan-risdal', 'xxxmatxxx-titanic-getting-started-with-randomforest']","[0.5487486367419703, 0.5399845370681235, 0.5371044164524763, 0.5365052956352416, 0.5361266679572871, 0.5338184047239131, 0.5332687521690497, 0.5332687521690497, 0.5331458991826292, 0.5324384191636266]","{'package:base': ['as.numeric', 'c', 'data.frame', 'gsub', 'library', 'sapply', 'strsplit'], 'package:dplyr': ['bind_rows'], 'package:rattle': ['fancyRpartPlot'], 'package:rpart': ['rpart'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv']}","{""package:base"": [""as.numeric"", ""c"", ""data.frame"", ""gsub"", ""library"", ""sapply"", ""strsplit""], ""package:dplyr"": [""bind_rows""], ""package:rattle"": [""fancyRpartPlot""], ""package:rpart"": [""rpart""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",packagebase asnumeric c dataframe gsub library sapply strsplit packagedplyr bindrows packagerattle fancyRpartPlot packagerpart rpart packagestats predict packageutils readcsv writecsv,"library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(""ggplot2"")
library(""ggthemes"")
library(""scales"")
library(""dplyr"")
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
full <- bind_rows(train, test)
full$Title <- gsub(""(.*, )|(\\..*)"", """", full$Name)
rare_title <- c(""Dona"", ""Lady"", ""the Countess"", ""Capt"", ""Col"", ""Don"", ""Dr"", ""Major"", ""Rev"", ""Sir"", ""Jonkheer"")
full$Title[full$Title == ""Mlle""] <- ""Miss""
full$Title[full$Title == ""Ms""] <- ""Miss""
full$Title[full$Title == ""Mme""] <- ""Mrs""
full$Title[full$Title %in% rare_title] <- ""Rare Title""
full$Surname <- sapply(full$Name, function(x) strsplit(x, split = ""[,.]"")[[1]][1])
full$CabinCategory <- gsub(""[0-9]"", """", full$Cabin)
full$CabinCategory <- sapply(full$CabinCategory, function(x) strsplit(x, split = "" "")[[1]][1])
full$TicketNumber <- gsub(""[A-z]|[.]|[,]|[ ]"", """", full$Ticket)
full$TicketNumber <- gsub("""", ""0"", full$TicketNumber)
full$TicketNumber <- sapply(full$TicketNumber, function(x) as.numeric(x))
test_new <- full[892:1309, ]
train_new <- full[1:891, ]
write.csv(test_new, file = ""test_with_title.csv"", row.names = FALSE)
write.csv(train_new, file = ""train_with_title.csv"", row.names = FALSE)
my_tree_five <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title, data = train_new, method = ""class"")
fancyRpartPlot(my_tree_five)
my_prediction <- predict(my_tree_five, test_new, type = ""class"")
my_solution <- data.frame(PassengerId = test_new$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = ""my_solution0.80383.csv"", row.names = FALSE)
my_tree_six <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + CabinCategory + TicketNumber, data = train_new, method = ""class"")
fancyRpartPlot(my_tree_six)
my_prediction <- predict(my_tree_six, test_new, type = ""class"")
my_solution <- data.frame(PassengerId = test_new$PassengerId, Survived = my_prediction)
write.csv(my_solution, file = ""my_solution_new.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,1,0,0,0,0
405,jerlinraj-titanic-machine-learning-from-disaster,0.7440000000000001,"['data.frame', 'prop.table', 'table', 'read.csv', 'str', 'write.csv']",['base'],0.26819705963134804,"['write.csv', 'prop.table', 'data.frame', 'read.csv', 'table', 'str']",[],"['sudheer464-prediction-1-on-titanic-dataset', 'scout16-titanic-disaster-in-r', 'stevencahill-titanic-machine-learning-from-disaster', 'zhaotianjing-titanic', 'amodi8-titanic-exploring-survival-using-machine-learning', 'sawajid-titanic-test', 'mihaque313-first-submission-to-titanic-problem', 'tobybot11-toby-s-titanic-analysis', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic']","[0.7844294517037929, 0.7790692968764954, 0.7754444558446093, 0.6839876731586961, 0.6379653089443853, 0.6297644098191341, 0.5890918320649003, 0.5579681190063408, 0.47333602742075576, 0.47333602742075576]","{'package:base': ['data.frame', 'prop.table', 'table'], 'package:utils': ['read.csv', 'str', 'write.csv']}","{""package:base"": [""data.frame"", ""prop.table"", ""table""], ""package:utils"": [""read.csv"", ""str"", ""write.csv""]}",packagebase dataframe proptable table packageutils readcsv str writecsv,"train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
str(train$Sex)
prop.table(table(train$Sex, train$Survived))
prop.table(table(train$Sex, train$Survived), 1)
test$Survived <- 0
test$Survived[test$Sex == ""female""] <- 1
submit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)
write.csv(submit, file = ""gendermodel.csv"", row.names = FALSE)",0,0,0,0,1,0,0,0,0,0,0,0,0,0
406,behindthelines-survival-on-the-titanic-with-decision-trees,0.763,"['as.factor', 'c', 'colSums', 'data.frame', 'gsub', 'ifelse', 'is.na', 'library', 'summary', 'system', 'table', 'unique', 'which', 'aes', 'geom_bar', 'ggplot', 'ggtitle', 'ylab', 'printcp', 'prune', 'rpart', 'prp', 'aggregate', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['ggplot2', 'readr', 'rpart', 'rpart.plot', 'base']",1.53939914703369,"['which', 'is.na', 'colSums', 'printcp', 'prune', 'rpart', 'as.factor', 'summary', 'str', 'gsub', 'prp', 'aggregate', 'unique', 'geom_bar', 'read.csv', 'table', 'c', 'ylab', 'aes', 'ifelse', 'predict', 'write.csv', 'ggtitle', 'data.frame', 'ggplot', 'head', 'library', 'system']",[],"['paulocressoni-titanic-using-stepwise-linear-regression', 'kazimanil-titanic-submission', 'nithishthirmul-titanic-data-test1', 'chuanhuiliu-one-solution-to-titanic-survival-analysis', 'annafreydenzon-titanic-machine-learning-from-disaster', 'ilijaf-titanic', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'skhawaja-titanic-disaster-survival-099', 'hisnibs-titanic-enhancing-the-training-data-and-kis', 'manskj-machine-learning-and-titanic']","[0.18460903604120846, 0.14562244915606107, 0.11675248668020378, 0.11286930077396098, 0.11127089220733105, 0.10395592588990993, 0.10302035240012887, 0.09780696707858878, 0.09477829179834359, 0.09187815335341522]","{'package:base': ['as.factor', 'c', 'colSums', 'data.frame', 'gsub', 'ifelse', 'is.na', 'library', 'summary', 'system', 'table', 'unique', 'which'], 'package:ggplot2': ['aes', 'geom_bar', 'ggplot', 'ggtitle', 'ylab'], 'package:rpart': ['printcp', 'prune', 'rpart'], 'package:rpart.plot': ['prp'], 'package:stats': ['aggregate', 'predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""package:base"": [""as.factor"", ""c"", ""colSums"", ""data.frame"", ""gsub"", ""ifelse"", ""is.na"", ""library"", ""summary"", ""system"", ""table"", ""unique"", ""which""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""ggplot"", ""ggtitle"", ""ylab""], ""package:rpart"": [""printcp"", ""prune"", ""rpart""], ""package:rpart.plot"": [""prp""], ""package:stats"": [""aggregate"", ""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",packagebase asfactor c colSums dataframe gsub ifelse isna library summary system table unique which packageggplot2 aes geombar ggplot ggtitle ylab packagerpart printcp prune rpart packagerpartplot prp packagestats aggregate predict packageutils head readcsv str writecsv,"library(ggplot2)
library(readr)
library(rpart)
library(rpart.plot)
system(""ls ../input"")
dat = read.csv(""../input/train.csv"")
colSums(is.na(dat))
summary(dat)
str(dat)
dat$familySize = dat$SibSp + dat$Parch
ggplot(dat, aes(x = familySize, fill = Survived == 1)) + geom_bar(position = ""fill"") + ggtitle(""Survival rate by Family Size(discrete)"") + ylab(""Prob of survival"")
dat$familySize = ifelse(dat$familySize > 6, ""large"", ifelse(dat$familySize > 3, ""medium"", ifelse(dat$familySize > 0, ""small"", ""single"")))
ggplot(dat, aes(x = familySize, fill = Survived == 1)) + geom_bar(position = ""fill"") + ggtitle(""Survival rate by Family Size(categorical)"") + ylab(""Prob of survival"")
nam = dat$Name
head(nam)
title = gsub(""(.*,)|(\\..*)"", """", nam)
head(title)
unique(title)
table(title)
dat = data.frame(dat, title)
dat$title = gsub(""Mme"", ""Mrs"", dat$title)
dat$title = gsub(""Mlle"", ""Miss"", dat$title)
dat$title = gsub(""Ms"", ""Miss"", dat$title)
dat$title = gsub(""Lady"", ""hon"", dat$title)
dat$title = gsub(""Sir"", ""hon"", dat$title)
dat$title = gsub(""Don"", ""hon"", dat$title)
dat$title = gsub(""Jonkheer"", ""hon"", dat$title)
dat$title = gsub(""the Countess"", ""hon"", dat$title)
dat$title = gsub(""Capt"", ""hon"", dat$title)
dat$title = gsub(""Col"", ""hon"", dat$title)
dat$title = gsub(""Major"", ""hon"", dat$title)
dat$title = gsub(""Dr"", ""hon"", dat$title)
ggplot(dat, aes(x = title, fill = Survived == 1)) + geom_bar(position = ""fill"") + ggtitle(""Survival rate by Title"") + ylab(""Prob of survival"")
index = which(is.na(dat$Embarked))
index
dat$Embarked[index] = ""S""
dat$Survived = as.factor(dat$Survived)
dat$Pclass = as.factor(dat$Pclass)
modd = rpart(Survived ~ ., data = dat[, -c(1, 4, 7, 8, 9, 11)], method = ""class"")
printcp(modd)
modd1 = prune(modd, cp = 0.01)
prp(modd1)
modd1
test = read.csv(""../input/test.csv"")
str(test)
test$Pclass = as.factor(test$Pclass)
test$familySize = test$SibSp + test$Parch
test$familySize = ifelse(test$familySize > 6, ""large"", ifelse(test$familySize > 3, ""medium"", ifelse(test$familySize > 0, ""small"", ""single"")))
colSums(is.na(test))
ind = which(is.na(test$Fare))
test$Pclass[ind]
aggregate(Fare ~ Pclass, test, mean)
test$Fare[ind] = 12.4597
nam1 = test$Name
head(nam1)
title = gsub(""(.*,)|(\\..*)"", """", nam1)
head(title)
unique(title)
table(title)
test = data.frame(test, title)
unique(test$title)
test$title = gsub(""Mme"", ""Mrs"", test$title)
test$title = gsub(""Mlle"", ""Miss"", test$title)
test$title = gsub(""Ms"", ""Miss"", test$title)
test$title = gsub(""Lady"", ""hon"", test$title)
test$title = gsub(""Sir"", ""hon"", test$title)
test$title = gsub(""Dona"", ""hon"", test$title)
test$title = gsub(""Jonkheer"", ""hon"", test$title)
test$title = gsub(""the Countess"", ""hon"", test$title)
test$title = gsub(""Capt"", ""hon"", test$title)
test$title = gsub(""Col"", ""hon"", test$title)
test$title = gsub(""Major"", ""hon"", test$title)
test$title = gsub(""Dr"", ""hon"", test$title)
Survived = predict(modd1, type = ""class"", newdata = test)
Survived
PassengerId = test$PassengerId
result = data.frame(PassengerId, Survived)
write.csv(result, ""Submission_Fin.csv"", row.names = F)",0,0,0,0,0,0,0,0,0,1,0,0,0,0
409,anthobau-random-forest-titanic,0.737,"['c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'row.names', 'sapply', 'set.seed', 'sum', 'table', 'arrange', 'bind_rows', 'desc', 'aes', 'geom_bar', 'geom_histogram', 'ggplot', 'labs', 'scale_fill_manual', 'plot', 'grid.arrange', 'complete', 'mice', 'importance', 'randomForest', 'predict', 'read.table', 'str', 'write.csv']","['dplyr', 'ggplot2', 'gridExtra', 'mice', 'randomForest', 'base']",5.55764198303223,"['labs', 'complete', 'is.na', 'sapply', 'mice', 'geom_histogram', 'importance', 'str', 'desc', 'set.seed', 'gsub', 'scale_fill_manual', 'factor', 'arrange', 'geom_bar', 'grid.arrange', 'table', 'randomForest', 'row.names', 'c', 'aes', 'sum', 'plot', 'predict', 'write.csv', 'bind_rows', 'data.frame', 'ggplot', 'read.table', 'library']",[],"['caleblau-predicting-survival-on-the-titanic', 'quark6-titanic-work', 'imitation-exploring-survival-on-the-titanic', 'supriya675-titanic-prediction-simplified-for-beginners', 'cganxs-is-62-the-right-titanic-model-threshold', 'stevengolo-titanic-machine-learning-from-disaster', 'erskumars-titanic-survival-eda-and-survival-rate-prediction', 'anweshaghosh-titanic-forkofmultiplescripts-r', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic']","[0.9609764008020771, 0.8663706538530083, 0.6849138058602405, 0.5660923141963234, 0.500381737927353, 0.13178147972083637, 0.12144321653664157, 0.12009919352850762, 0.11517736721769822, 0.11517736721769822]","{'package:base': ['c', 'data.frame', 'factor', 'gsub', 'is.na', 'library', 'row.names', 'sapply', 'set.seed', 'sum', 'table'], 'package:dplyr': ['arrange', 'bind_rows', 'desc'], 'package:ggplot2': ['aes', 'geom_bar', 'geom_histogram', 'ggplot', 'labs', 'scale_fill_manual'], 'package:graphics': ['plot'], 'package:gridExtra': ['grid.arrange'], 'package:mice': ['complete', 'mice'], 'package:randomForest': ['importance', 'randomForest'], 'package:stats': ['predict'], 'package:utils': ['read.table', 'str', 'write.csv']}","{""package:base"": [""c"", ""data.frame"", ""factor"", ""gsub"", ""is.na"", ""library"", ""row.names"", ""sapply"", ""set.seed"", ""sum"", ""table""], ""package:dplyr"": [""arrange"", ""bind_rows"", ""desc""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""geom_histogram"", ""ggplot"", ""labs"", ""scale_fill_manual""], ""package:graphics"": [""plot""], ""package:gridExtra"": [""grid.arrange""], ""package:mice"": [""complete"", ""mice""], ""package:randomForest"": [""importance"", ""randomForest""], ""package:stats"": [""predict""], ""package:utils"": [""read.table"", ""str"", ""write.csv""]}",packagebase c dataframe factor gsub isna library rownames sapply setseed sum table packagedplyr arrange bindrows desc packageggplot2 aes geombar geomhistogram ggplot labs scalefillmanual packagegraphics plot packagegridExtra gridarrange packagemice complete mice packagerandomForest importance randomForest packagestats predict packageutils readtable str writecsv,"library(dplyr)
library(ggplot2)
library(gridExtra)
library(mice)
library(randomForest)
train <- read.table(""../input/train.csv"", sep = "","", header = TRUE)
test <- read.table(""../input/test.csv"", sep = "","", header = TRUE)
full <- bind_rows(train, test)
str(train, give.attr = FALSE)
group_colors <- c(`0` = ""tomato"", `1` = ""limegreen"", male = ""skyblue"", female = ""pink"")
train$Survived <- factor(train$Survived)
ggplot(train, aes(x = Survived)) + geom_bar(fill = c(`0` = ""tomato"", `1` = ""limegreen"")) + labs(title = ""Survival on the Titanic"", x = ""Survival"", y = ""Number of Passengers"")
ggplot(train, aes(x = Sex)) + geom_bar(aes(fill = Survived), position = ""fill"") + scale_fill_manual(values = group_colors) + labs(title = ""Survival by Sex"", x = ""Sex"", y = ""Proportion of Passengers"")
ggplot(train, aes(x = Age)) + geom_histogram(aes(fill = Sex), binwidth = 2) + scale_fill_manual(values = group_colors) + labs(title = ""Distribution of Passenger Age by Sex"", x = ""Age"", y = ""Number of Passengers"")
ggplot(train, aes(x = Age)) + geom_histogram(aes(fill = Survived), binwidth = 2) + scale_fill_manual(values = group_colors) + labs(title = ""Distribution of Passenger Age by Survival"", x = ""Age"", y = ""Number of Passengers"")
ggplot(train, aes(x = Pclass)) + geom_bar(aes(fill = Survived)) + scale_fill_manual(values = group_colors) + labs(title = ""Distribution of Passenger Class by Survival"", x = ""Passenger Class"", y = ""Number of Passengers"")
ggplot(train, aes(x = Fare)) + geom_histogram(aes(fill = Survived), binwidth = 10) + scale_fill_manual(values = group_colors) + labs(title = ""Distribution of Journey Fare by Survival"", x = ""Fare Paid"", y = ""Number of Passengers"")
ggplot(train, aes(x = Embarked)) + geom_bar(aes(fill = Survived)) + scale_fill_manual(values = group_colors) + labs(title = ""Distribution of Journey Origin by Survival"", x = ""Origin (port of embarkment)"", y = ""Number of Passengers"")
test$Survived <- NA
combined <- bind_rows(train, test)
str(combined, give.attr = FALSE)
sapply(combined, function(x) sum(is.na(x)))
combined$Survived <- factor(combined$Survived)
combined$Pclass <- factor(combined$Pclass)
combined$Sex <- factor(combined$Sex)
combined$Embarked <- factor(combined$Embarked)
str(combined, give.attr = FALSE)
set.seed(1234)
imputes <- mice(combined[c(""Pclass"", ""Sex"", ""Age"", ""SibSp"", ""Parch"", ""Fare"", ""Embarked"")], method = ""rf"")
imputes_output <- complete(imputes)
impute_age <- ggplot(imputes_output, aes(x = Age)) + geom_histogram(binwidth = 2, fill = ""thistle"") + labs(x = ""Imputed Age"")
age <- ggplot(train, aes(x = Age)) + geom_histogram(binwidth = 2)
grid.arrange(age, impute_age, ncol = 2)
impute_embarked <- ggplot(imputes_output, aes(x = Embarked)) + geom_bar(fill = ""thistle"") + labs(x = ""Imputed Origin"")
embarked <- ggplot(train, aes(x = Embarked)) + geom_bar() + labs(x = ""Origin"")
grid.arrange(embarked, impute_embarked, ncol = 2)
combined$Age <- imputes_output$Age
combined$Fare <- imputes_output$Fare
combined$Embarked <- imputes_output$Embarked
sapply(combined, function(x) sum(is.na(x)))
combined$Title <- factor(gsub(""(.*, )|(\\..*)"", """", combined$Name))
table(combined$Title)
combined$FamSize <- combined$SibSp + combined$Parch + 1
ggplot(combined, aes(x = FamSize)) + geom_bar() + labs(x = ""Family Size"", y = ""Number of Passengers"", title = ""Family Size of Passengers"")
combined$child <- NA
combined$child[combined$Age <= 16] <- TRUE
combined$child[combined$Age > 16] <- FALSE
str(combined, give.attr = FALSE)
combined$FamilySize <- combined$Parch + combined$SibSp + 1
combined$Mother <- 0
combined$Mother[combined$Sex == ""female"" & combined$Parch > 0 & combined$Age > 18 & combined$Title != ""Miss""] <- 1
combined$Child <- 0
combined$Child[combined$Parch > 0 & combined$Age <= 12] <- 1
train <- combined[1:891, ]
test <- combined[892:1309, ]
rf_titanic <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamSize + child, data = train, ntree = 1000)
rf_titanic
plot(rf_titanic)
vimp <- importance(rf_titanic)
vimp_df <- data.frame(Var = row.names(vimp), vimp)
vimp_df %>% arrange(desc(MeanDecreaseGini))
predicted <- predict(rf_titanic, newdata = test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = predicted)
write.csv(solution, ""../input/gender_submission.csv"", row.names = FALSE)",1,0,0,1,0,0,0,0,0,0,0,0,0,0
410,maitree-titanic-survival-list-using-classification,0.746,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.character', 'as.numeric', 'c', 'data.frame', 'factor', 'ifelse', 'is.na', 'length', 'library', 'mean', 'names', 'nrow', 'rbind', 'replace', 'return', 'sapply', 'strsplit', 'subset', 'sum', 'summary', 'system', 'which', 'aes', 'geom_bar', 'ggplot', 'position_dodge', 'glm', 'predict', 'read.csv', 'write.csv']","['ggplot2', 'readr', 'ggplot2', 'dplyr', 'base']",1.07690119743347,"['nrow', 'mean', 'replace', 'which', 'as.character', 'subset', 'is.na', 'glm', 'names', 'summary', 'sapply', 'factor', 'position_dodge', 'geom_bar', 'length', 'read.csv', 'return', 'c', 'aes', 'rbind', 'as.numeric', 'ifelse', 'sum', 'predict', 'write.csv', 'data.frame', 'strsplit', 'ggplot', 'user defined', 'library', 'system']",[],"['maitree-titanic-survival-list-using-classification', 'maitree-titanic-survival-list-using-random-forest', 'mrstepanovic-using-random-forests-to-identify-titanic-survivors', 'tosnaldo10-titanic-challange', 'jacekpardyak-mytitanicscript', 'erskumars-titanic-survival-eda-and-survival-rate-prediction', 'thilakshasilva-predicting-titanic-survival-using-five-algorithms', 'piyushjhamb-predicting-titanic-survival', 'vasuls-predictive-analysis-of-survival-rate-on-titanic', 'beiqiwang-predictive-analysis-of-survival-rate-on-titanic']","[0.9999999999999999, 0.9908302848690036, 0.9293873055536677, 0.9162269429507242, 0.10923122006416108, 0.10578604432807436, 0.1005313961677564, 0.1005313961677564, 0.094965151937441, 0.094965151937441]","{'character(0)': ['cabin_no', 'mean_class'], 'package:base': ['as.character', 'as.numeric', 'c', 'data.frame', 'factor', 'ifelse', 'is.na', 'length', 'library', 'mean', 'names', 'nrow', 'rbind', 'replace', 'return', 'sapply', 'strsplit', 'subset', 'sum', 'summary', 'system', 'which'], 'package:ggplot2': ['aes', 'geom_bar', 'ggplot', 'position_dodge'], 'package:stats': ['glm', 'predict'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""cabin_no"", ""mean_class""], ""package:base"": [""as.character"", ""as.numeric"", ""c"", ""data.frame"", ""factor"", ""ifelse"", ""is.na"", ""length"", ""library"", ""mean"", ""names"", ""nrow"", ""rbind"", ""replace"", ""return"", ""sapply"", ""strsplit"", ""subset"", ""sum"", ""summary"", ""system"", ""which""], ""package:ggplot2"": [""aes"", ""geom_bar"", ""ggplot"", ""position_dodge""], ""package:stats"": [""glm"", ""predict""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 cabinno meanclass packagebase ascharacter asnumeric c dataframe factor ifelse isna length library mean names nrow rbind replace return sapply strsplit subset sum summary system which packageggplot2 aes geombar ggplot positiondodge packagestats glm predict packageutils readcsv writecsv,"library(ggplot2)
library(readr)
system(""ls ../input"")
train <- read.csv(""../input/train.csv"")
test <- read.csv(""../input/test.csv"")
sapply(train, function(x) sum(is.na(x)))
sapply(train, function(x) summary(is.na(x)))
train1 <- train
train$Survived <- NULL
combo <- rbind(train, test)
library(ggplot2)
ggplot(data = combo, aes(x = factor(Pclass), y = Age, fill = factor(Pclass))) + geom_bar(stat = ""identity"", position = position_dodge())
ggplot(combo, aes(Age, fill = factor(Pclass))) + geom_bar(binwidth = 1, position = position_dodge())
mean_class <- function(class) {
    classvec <- subset(combo, Pclass == class)
    mean_age <- mean(classvec$Age, na.rm = TRUE)
    return(mean_age)
}
l_age <- length(combo$Age)
library(dplyr)
i <- 1
for (i in 1:l_age) {
    if (is.na(combo$Age[i]) == TRUE) {
        class_value <- combo$Pclass[i]
        combo$Age[i] <- mean_class(class_value)
    }
}
ggplot(combo, aes(Fare, fill = factor(Pclass))) + geom_bar(stat = ""identity"", position = position_dodge(), binwidth = 5)
fare_na_index <- which(is.na(combo$Fare))
df <- subset(combo, Pclass = 3)
vec <- df$Fare
mean(vec, na.rm = TRUE)
combo$Fare[fare_na_index] <- mean(vec, na.rm = TRUE)
cabin_no <- function(string) {
    return(length(strsplit(string, "" "")[[1]]))
}
l_cabin <- length(combo$Cabin)
combo$Cabin <- as.character(combo$Cabin)
l <- 0
for (l in 1:l_cabin) {
    cabin_string <- combo$Cabin[l]
    if (cabin_string == "" "") {
        combo$Cabin[l] <- 0
    }
    else {
        cabin_count <- cabin_no(cabin_string)
        combo$Cabin[l] <- cabin_count
    }
}
combo$Cabin <- as.numeric(combo$Cabin)
combo$Sex <- factor(x = combo$Sex, labels = c(1, 2))
combo$Embarked <- replace(combo$Embarked, combo$Embarked == """", ""S"")
combo$Embarked <- factor(x = combo$Embarked, labels = c(1, 2, 3))
names(combo)
combo$family <- combo$SibSp + combo$Parch
combo$SibSp <- NULL
combo$Parch <- NULL
combo$Name <- NULL
combo$Ticket <- NULL
names(combo)
nrow(train)
nrow(test)
train <- combo[1:891, ]
test <- combo[892:1309, ]
train$Survived <- train1$Survived
names(train)
classifier <- glm(formula = Survived ~ Pclass + Sex + Age + Fare + Cabin + Embarked + family, family = binomial, data = train)
summary(classifier)
classifier <- glm(formula = Survived ~ Pclass + Sex + Age + family, family = binomial, data = train)
summary(classifier)
sur_pred <- predict(classifier, type = ""response"", newdata = test)
y_pred <- ifelse(sur_pred > 0.5, 1, 0)
test$Survival <- y_pred
submit <- data.frame(test$PassengerId, test$Survival)
names(submit) <- c(""PassengerId"", ""Survived"")
write.csv(submit, file = ""survival.csv"", row.names = FALSE)",0,0,0,0,0,0,0,0,0,0,0,0,0,0
412,devanshugupta27-predicting-the-titanic-survival-rate,0.754,"['filter', 'c', 'character', 'data.frame', 'factor', 'grepl', 'gsub', 'is.na', 'library', 'prop.table', 'set.seed', 'sum', 'summary', 'table', 'vapply', 'train', 'trainControl', 'aes', 'facet_grid', 'geom_bar', 'geom_histogram', 'ggplot', 'predict', 'head', 'read.csv', 'str', 'write.csv']","['ggplot2', 'lattice', 'caret', 'ranger', 'dplyr', 'e1071', 'base']",8.990691900253301,"['is.na', 'vapply', 'prop.table', 'summary', 'filter', 'geom_histogram', 'str', 'set.seed', 'gsub', 'factor', 'geom_bar', 'character', 'read.csv', 'table', 'train', 'c', 'aes', 'sum', 'predict', 'write.csv', 'data.frame', 'grepl', 'ggplot', 'head', 'library', 'trainControl', 'facet_grid']",[],"['stevencahill-titanic-machine-learning-from-disaster', 'ezhilvelme-titanic-neural-network-c-4-2', 'brirush-randomforest-implementation-of-titanic', 'shridhar1991-randomforest-implementation-of-titanic', 'tobybot11-toby-s-titanic-analysis', 'erskumars-titanic-survival-eda-and-survival-rate-prediction', 'jerlinraj-titanic-machine-learning-from-disaster', 'annafreydenzon-titanic-machine-learning-from-disaster', 'amodi8-titanic-exploring-survival-using-machine-learning', 'liudj2008-titanic']","[0.4389744098860309, 0.43830929572150873, 0.4344693013756173, 0.4344693013756173, 0.4288732107187768, 0.4256770990479181, 0.41893192873523, 0.39868937020100537, 0.38995912591830495, 0.38781385433019083]","{'c(""package:dplyr"", ""package:stats"")': ['filter'], 'package:base': ['c', 'character', 'data.frame', 'factor', 'grepl', 'gsub', 'is.na', 'library', 'prop.table', 'set.seed', 'sum', 'summary', 'table', 'vapply'], 'package:caret': ['train', 'trainControl'], 'package:ggplot2': ['aes', 'facet_grid', 'geom_bar', 'geom_histogram', 'ggplot'], 'package:stats': ['predict'], 'package:utils': ['head', 'read.csv', 'str', 'write.csv']}","{""c(""package:dplyr"", ""package:stats"")"": [""filter""], ""package:base"": [""c"", ""character"", ""data.frame"", ""factor"", ""grepl"", ""gsub"", ""is.na"", ""library"", ""prop.table"", ""set.seed"", ""sum"", ""summary"", ""table"", ""vapply""], ""package:caret"": [""train"", ""trainControl""], ""package:ggplot2"": [""aes"", ""facet_grid"", ""geom_bar"", ""geom_histogram"", ""ggplot""], ""package:stats"": [""predict""], ""package:utils"": [""head"", ""read.csv"", ""str"", ""write.csv""]}",cpackagedplyr packagestats filter packagebase c character dataframe factor grepl gsub isna library proptable setseed sum summary table vapply packagecaret train trainControl packageggplot2 aes facetgrid geombar geomhistogram ggplot packagestats predict packageutils head readcsv str writecsv,"library(ggplot2)
library(lattice)
library(caret)
library(ranger)
library(dplyr)
library(e1071)
train <- read.csv(""../input/train.csv"", stringsAsFactors = FALSE)
test <- read.csv(""../input/test.csv"", stringsAsFactors = FALSE)
str(train)
summary(train)
train$Survived <- factor(train$Survived)
train$Pclass <- factor(train$Pclass)
train$Sex <- factor(train$Sex)
train$SibSp <- factor(train$SibSp)
train$Parch <- factor(train$Parch)
train$Embarked <- factor(train$Embarked, ordered = FALSE)
head(train$Name)
convert_name <- function(name) {
    if (grepl(""\\(.*\\)"", name)) {
        gsub(""^.*\\((.*)\\)$"", ""\\1"", name)
    }
    else {
        gsub(""^(.*),\\s[a-zA-Z\\.]*\\s(.*)$"", ""\\2 \\1"", name)
    }
}
pass_names <- train$Name
clean_pass_names <- vapply(pass_names, FUN = convert_name, FUN.VALUE = character(1), USE.NAMES = FALSE)
train$Name <- clean_pass_names
head(train$Name)
train %>% ggplot(aes(x = Pclass, fill = Survived)) + geom_bar()
tab <- table(train$Pclass, train$Survived)
prop.table(tab, 1)
train %>% ggplot(aes(x = Sex, fill = Survived)) + geom_bar(stat = ""count"", position = ""fill"")
tab <- table(train$Sex, train$Survived)
prop.table(tab, 1)
train %>% ggplot(aes(x = Age, fill = Survived)) + geom_histogram()
train %>% filter(Embarked %in% c(""S"", ""C"", ""Q"")) %>% ggplot() + geom_bar(aes(Embarked, fill = Pclass), position = ""dodge"") + facet_grid(~Survived)
tab <- table(train$Embarked, train$Survived)
prop.table(tab, 1)
sum(is.na(train$Age))
x <- train[, c(""Age"", ""Pclass"", ""Sex"", ""Embarked"")]
y <- train$Survived
set.seed(123)
model <- train(x = x, y = y, preProcess = ""medianImpute"", method = ""ranger"", trControl = trainControl(method = ""cv"", number = 10))
model
prediction <- predict(model, test)
solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
write.csv(solution, file = ""rfSolution.csv"", row.names = F)",0,0,1,0,0,0,0,1,0,0,0,1,0,0
414,phubert-titanic-mackenzie-aula08,0.701,"['as.matrix', 'c', 'data.frame', 'ifelse', 'is.na', 'length', 'library', 'mean', 'nrow', 'order', 'paste0', 'print', 'rbind', 'sum', 'table', 'which', 'createDataPartition', 'select', 'aes', 'annotate', 'geom_line', 'geom_point', 'ggplot', 'labs', 'xlab', 'ylab', 'melt', 'predict', 'read.csv', 'write.csv', 'xgb.cv', 'xgboost']","['tidyverse', 'xgboost', 'caret', 'reshape', 'base']",6.496891021728518,"['labs', 'nrow', 'mean', 'xgb.cv', 'annotate', 'which', 'is.na', 'print', 'xgboost', 'melt', 'as.matrix', 'xlab', 'length', 'read.csv', 'paste0', 'table', 'c', 'aes', 'ylab', 'rbind', 'ifelse', 'sum', 'createDataPartition', 'geom_point', 'predict', 'order', 'write.csv', 'data.frame', 'ggplot', 'library', 'select', 'geom_line']",[],"['phubert-mackenzie-bigdata-titanic-knn', 'phubert-titanic-mackenzie-aula07', 'qianbi-titanic-voting-2', 'rkumar3147-exploring-survival-on-the-titanic1', 'vizcharlie-exploring-survival-on-the-titanic', 'bubblride-titanic-e1071-c-svc-fares-only', 'qianbi-titanic-voting', 'bubblride-titanic-e1071-nu-svc', 'hertan-titanic-surviving-dataset-simple-expression', 'cganxs-is-62-the-right-titanic-model-threshold']","[0.41193110095318214, 0.2235715290657347, 0.21820451145357547, 0.21669766854243439, 0.21669766854243439, 0.21101706215164334, 0.18556830917131245, 0.18206303399902407, 0.16568918767489751, 0.1590973001078498]","{'package:base': ['as.matrix', 'c', 'data.frame', 'ifelse', 'is.na', 'length', 'library', 'mean', 'nrow', 'order', 'paste0', 'print', 'rbind', 'sum', 'table', 'which'], 'package:caret': ['createDataPartition'], 'package:dplyr': ['select'], 'package:ggplot2': ['aes', 'annotate', 'geom_line', 'geom_point', 'ggplot', 'labs', 'xlab', 'ylab'], 'package:reshape': ['melt'], 'package:stats': ['predict'], 'package:utils': ['read.csv', 'write.csv'], 'package:xgboost': ['xgb.cv', 'xgboost']}","{""package:base"": [""as.matrix"", ""c"", ""data.frame"", ""ifelse"", ""is.na"", ""length"", ""library"", ""mean"", ""nrow"", ""order"", ""paste0"", ""print"", ""rbind"", ""sum"", ""table"", ""which""], ""package:caret"": [""createDataPartition""], ""package:dplyr"": [""select""], ""package:ggplot2"": [""aes"", ""annotate"", ""geom_line"", ""geom_point"", ""ggplot"", ""labs"", ""xlab"", ""ylab""], ""package:reshape"": [""melt""], ""package:stats"": [""predict""], ""package:utils"": [""read.csv"", ""write.csv""], ""package:xgboost"": [""xgb.cv"", ""xgboost""]}",packagebase asmatrix c dataframe ifelse isna length library mean nrow order paste0 print rbind sum table which packagecaret createDataPartition packagedplyr select packageggplot2 aes annotate geomline geompoint ggplot labs xlab ylab packagereshape melt packagestats predict packageutils readcsv writecsv packagexgboost xgbcv xgboost,"library(tidyverse)
dados = read.csv(""../input/train.csv"", sep = "","", header = T)
dados$Sexo = 0
dados[which(dados$Sex == ""Male""), ""Sexo""] = 1
dados = dados %>% select(c(""Survived"", ""Age"", ""Sexo"", ""Fare"", ""SibSp"", ""Parch"", ""Pclass""))
library(xgboost)
library(caret)
nrow(dados)
p_treino = 0.9
indice_treino = createDataPartition(dados$Survived, times = 1, p = p_treino)
table(dados[indice_treino$Resample1, ""Survived""])/sum(table(dados[indice_treino$Resample1, ""Survived""]))
table(dados[-indice_treino$Resample1, ""Survived""])/sum(table(dados[-indice_treino$Resample1, ""Survived""]))
train = dados[indice_treino$Resample1, ]
test = dados[-indice_treino$Resample1, ]
X_train = as.matrix(train %>% select(c(Sexo, Fare, Age, Parch, SibSp, Pclass)))
y_train = as.matrix(train$Survived)
X_test = as.matrix(test %>% select(c(Sexo, Fare, Age, Parch, SibSp, Pclass)))
y_test = as.matrix(test$Survived)
lista_n = c(3, 10, 100, 200, 500, 1000)
res = data.frame(nrounds = NA, erro_treino = NA, erro_teste = NA)
for (i in 1:length(lista_n)) {
    print(paste0(""Rodando xgboost com "", lista_n[i], "" rounds.""))
    mod1 = xgboost(data = X_train, label = y_train, nrounds = lista_n[i], verbose = 0, objective = ""binary:logistic"")
    erro_treino = mod1$evaluation_log$train_error[length(mod1$evaluation_log$train_error)]
    y_pred = predict(mod1, X_test)
    y_pred = ifelse(y_pred > 0, 1, 0)
    tmp = data.frame(previsto = y_pred, real = y_test)
    erro_teste = 1 - sum(tmp$previsto == tmp$real)/nrow(tmp)
    res = rbind(res, data.frame(nrounds = lista_n[i], erro_treino = erro_treino, erro_teste = erro_teste))
}
dt.plot = data.frame(x = mod1$evaluation_log$iter, y = mod1$evaluation_log$train_error)
g = ggplot(data = dt.plot, aes(x = x, y = y))
g + geom_line() + geom_point() + annotate(""text"", label = ""Note como o erro de treino não para de cair"", x = 500, y = 0.15, color = ""black"")
X = as.matrix(dados %>% select(c(Sexo, Fare, Age, Parch, SibSp, Pclass)))
y = as.matrix(dados$Survived)
cv.res = xgb.cv(data = X, label = y, nfold = 5, nrounds = 100, max_depth = 6, objective = ""binary:logistic"")
dt.plot = data.frame(iter = cv.res$evaluation_log$iter, test = cv.res$evaluation_log$test_error_mean, train = cv.res$evaluation_log$train_error_mean)
library(reshape)
dt.plot = melt(data = dt.plot, measure.vars = c(""test"", ""train""), id.vars = ""iter"")
g = ggplot(data = dt.plot, aes(x = iter, y = value, color = variable))
g + geom_line() + geom_point() + labs(color = ""Erro"") + xlab(""Número de modelos"") + ylab(""Erro"") + annotate(""text"", label = ""Note como o erro de teste para de cair, \nenquanto o erro de treino continua caindo..."", x = 25, y = 0.25, color = ""black"")
lista_max_depth = c(1, 2, 3, 6, 10, 20)
df.erro = data.frame(max_depth = NA, erro_medio = NA)
for (l in lista_max_depth) {
    print(paste0(""Testando max_depth = "", l))
    cv.res = xgb.cv(data = X, label = y, nfold = 5, nrounds = 50, max_depth = l, verbose = F, objective = ""binary:logistic"")
    erro = mean(cv.res$evaluation_log$test_error_mean)
    df.erro = rbind(df.erro, data.frame(max_depth = l, erro_medio = erro))
}
df.erro = df.erro[2:nrow(df.erro), ]
df.erro
lista_max_depth = c(2, 3, 10)
lista_colsample_bytree = c(2/6, 3/6, 4/6, 5/6)
df.res = data.frame(max_depth = NA, colsample_bytree = NA, erro_medio = NA)
for (max_depth in lista_max_depth) {
    for (colsample_bytree in lista_colsample_bytree) {
        print(paste0(""Testando max_depth = "", max_depth, "" e colsample_bytree = "", colsample_bytree))
        cv.res = xgb.cv(data = X, label = y, nfold = 5, nrounds = 50, max_depth = max_depth, colsample_bytree = colsample_bytree, verbose = F, objective = ""binary:logistic"")
        erro = mean(cv.res$evaluation_log$test_error_mean)
        df.res = rbind(df.res, data.frame(max_depth = max_depth, colsample_bytree = colsample_bytree, erro_medio = erro))
    }
}
df.res = df.res[2:nrow(df.res), ]
df.res[order(df.res$erro_medio), ]
max_depth = 3
colsample_bytree = 1/3
mod.opt = xgboost(data = X, label = y, nrounds = 50, verbose = 0, max_depth = max_depth, colsample_bytree = colsample_bytree, objective = ""binary:logistic"")
test = read.csv(""../input/test.csv"")
test[which(is.na(test$Age)), ""Age""] = mean(test$Age, na.rm = T)
test[which(is.na(test$Fare)), ""Fare""] = mean(test$Fare, na.rm = T)
test$Sexo = 0
test[which(dados$Sex == ""Male""), ""Sexo""] = 1
X_test = as.matrix(test %>% select(c(Sexo, Fare, Age, Parch, SibSp, Pclass)))
res = predict(mod.opt, X_test)
t = 0.5
pres = ifelse(res > t, 1, 0)
submit = data.frame(PassengerId = test$PassengerId, Survived = pres)
write.csv(submit, ""submit_XG.csv"", row.names = F)",0,0,1,0,0,0,0,1,1,0,0,0,0,0
415,haroldzhang-titanic-ace233,0.77,"['user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'user defined', 'as.numeric', 'c', 'data.frame', 'factor', 'floor', 'is.na', 'length', 'library', 'list', 'matrix', 'mean', 'names', 'norm', 'order', 'return', 'table', 'vector', 'which', 'which.max', 'which.min', 'randomForest', 'lm', 'median', 'predict', 'rnorm', 'runif', 'sd', 'read.csv', 'write.csv']","['randomForest', 'base']",9.44318389892578,"['which.min', 'list', 'mean', 'which.max', 'median', 'vector', 'which', 'norm', 'is.na', 'names', 'lm', 'factor', 'matrix', 'length', 'sd', 'read.csv', 'table', 'randomForest', 'return', 'c', 'runif', 'as.numeric', 'predict', 'rnorm', 'write.csv', 'order', 'data.frame', 'user defined', 'library', 'floor']",[],"['haroldzhang-exploring-survival-on-the-titanic', 'erskumars-titanic-survival-eda-and-survival-rate-prediction', 'parthchaudhary-titanic-submission', 'c34klh123-using-svm-to-predict-titanic-in-r', 'pranavsid-analyzing-the-titanic-disaster', 'klashgari-titanic', 'iherbert-titanic', 'wjsutton-exploring-surviving-the-titanic', 'diegosiebra-rf-titanic-prediction-th3one', 'vishaljindal0-titanic-r-code']","[0.9998196222829159, 0.10383435233883295, 0.08566710027657044, 0.06870137108137525, 0.0679800060581387, 0.06376388192139643, 0.06250343510786101, 0.061903371194705306, 0.061660359665469136, 0.056217815247415585]","{'character(0)': ['fullfillAgeData', 'fullfillEmbark', 'fullfillFare', 'reAssembleVariable'], 'package:base': ['as.numeric', 'c', 'data.frame', 'factor', 'floor', 'is.na', 'length', 'library', 'list', 'matrix', 'mean', 'names', 'norm', 'order', 'return', 'table', 'vector', 'which', 'which.max', 'which.min'], 'package:randomForest': ['randomForest'], 'package:stats': ['lm', 'median', 'predict', 'rnorm', 'runif', 'sd'], 'package:utils': ['read.csv', 'write.csv']}","{""character(0)"": [""fullfillAgeData"", ""fullfillEmbark"", ""fullfillFare"", ""reAssembleVariable""], ""package:base"": [""as.numeric"", ""c"", ""data.frame"", ""factor"", ""floor"", ""is.na"", ""length"", ""library"", ""list"", ""matrix"", ""mean"", ""names"", ""norm"", ""order"", ""return"", ""table"", ""vector"", ""which"", ""which.max"", ""which.min""], ""package:randomForest"": [""randomForest""], ""package:stats"": [""lm"", ""median"", ""predict"", ""rnorm"", ""runif"", ""sd""], ""package:utils"": [""read.csv"", ""write.csv""]}",character0 fullfillAgeData fullfillEmbark fullfillFare reAssembleVariable packagebase asnumeric c dataframe factor floor isna length library list matrix mean names norm order return table vector which whichmax whichmin packagerandomForest randomForest packagestats lm median predict rnorm runif sd packageutils readcsv writecsv,"library(""randomForest"")
reAssembleVariable = function(trainDataList, type) {
    tmpNames = names(trainDataList)
    for (i in 1:length(tmpNames)) {
        if (tmpNames[i] == ""Survived"") {
            survivedList = trainDataList[i]
        }
        if (tmpNames[i] == ""PassengerId"") {
            passengerList = trainDataList[i]
        }
        if (tmpNames[i] == ""Pclass"") {
            pClassList = trainDataList[i]
        }
        if (tmpNames[i] == ""Name"") {
            nameList = trainDataList[i]
        }
        if (tmpNames[i] == ""Sex"") {
            sexList = trainDataList[i]
            maleVector = vector(""double"", length(sexList[, 1]))
            maleIndex = which(sexList == ""male"")
            maleVector[maleIndex] = 1
            maleList = list(Sex = maleVector)
        }
        if (tmpNames[i] == ""Age"") {
            ageList = trainDataList[i]
        }
        if (tmpNames[i] == ""SibSp"") {
            sibspList = trainDataList[i]
        }
        if (tmpNames[i] == ""Parch"") {
            parchList = trainDataList[i]
        }
        if (tmpNames[i] == ""Ticket"") {
            ticketList = trainDataList[i]
        }
        if (tmpNames[i] == ""Fare"") {
            fareList = trainDataList[i]
        }
        if (tmpNames[i] == ""Cabin"") {
            cabinList = trainDataList[i]
        }
        if (tmpNames[i] == ""Embarked"") {
            embarkedList = trainDataList[i]
            newEmbarkedList = fullfillEmbark(embarkedList)
            isCEList = vector(""double"", length(newEmbarkedList[, 1]))
            isQEList = vector(""double"", length(newEmbarkedList[, 1]))
            ceIndex = which(newEmbarkedList == ""C"")
            qeIndex = which(newEmbarkedList == ""Q"")
            isCEList[ceIndex] = 1
            isQEList[qeIndex] = 1
            isCEList = list(C = isCEList)
            isQEList = list(Q = isQEList)
        }
    }
    newAgeList = fullfillAgeData(ageList[1], nameList[1], sibspList[1], parchList[1], 7)
    newFareList = fullfillFare(fareList)
    if (type == 1) {
        newDataList = data.frame(survivedList, passengerList, pClassList, maleList, newAgeList, sibspList, parchList, newFareList, cabinList, isCEList, isQEList)
    }
    else {
        newDataList = data.frame(passengerList, pClassList, maleList, newAgeList, sibspList, parchList, newFareList, cabinList, isCEList, isQEList)
    }
    return(newDataList)
}
fullfillAgeData = function(ageList, nameList, sibspList, parchList, type) {
    noneAgeIndex = which(is.na(ageList))
    nAgeIndex = which(!is.na(ageList))
    if (type == 1) {
        noneAgeIndex = which(is.na(ageList))
        nAgeIndex = which(!is.na(ageList))
        meanAge = mean(ageList[nAgeIndex, 1])
        ageList[noneAgeIndex, 1] = meanAge
        return(ageList)
    }
    if (type == 2) {
        noneAgeIndex = which(is.na(ageList))
        nAgeIndex = which(!is.na(ageList))
        medianAge = median(ageList[nAgeIndex, 1])
        ageList[noneAgeIndex, 1] = medianAge
        return(ageList)
    }
    if (type == 3) {
        noneAgeIndex = which(is.na(ageList))
        nAgeIndex = which(!is.na(ageList))
        modeAge = which.max(table(ageList[nAgeIndex, 1]))
        modeName = as.numeric(names(modeAge))
        ageList[noneAgeIndex, 1] = modeName
        return(ageList)
    }
    if (type == 4) {
        noneAgeIndex = which(is.na(ageList))
        nAgeIndex = which(!is.na(ageList))
        nAgeList = ageList[nAgeIndex, 1]
        minAge = nAgeList[which.min(nAgeList)]
        maxAge = nAgeList[which.max(nAgeList)]
        rand = runif(length(noneAgeIndex), minAge, maxAge)
        ageList[noneAgeIndex, 1] = rand
        return(ageList)
    }
    if (type == 5) {
        noneAgeIndex = which(is.na(ageList))
        nAgeIndex = which(!is.na(ageList))
        nAgeList = ageList[nAgeIndex, 1]
        meanAge = mean(nAgeList)
        std4age = sd(nAgeList)
        rand = rnorm(length(noneAgeIndex), meanAge, std4age)
        ageList[noneAgeIndex, 1] = rand
        return(ageList)
    }
    if (type == 6) {
    }
    if (type == 7) {
        noneAgeIndex = which(is.na(ageList))
        nAgeIndex = which(!is.na(ageList))
        for (i in 1:length(noneAgeIndex)) {
            dist1 = vector()
            for (j in 1:length(nAgeIndex)) {
                ni = noneAgeIndex[i]
                nj = nAgeIndex[j]
                ma = matrix(c(sibspList[nj, 1] - sibspList[ni, 1], parchList[nj, 1] - parchList[ni, 1]), 1)
                dist1[j] = norm(ma, ""2"")
            }
            distIndex = order(dist1)
            count1 = 0
            count2 = 0
            targetAge = 0
            lastAge = 0
            tAgeList = vector()
            for (k in 1:20) {
                age = nAgeIndex[distIndex[k]]
                age = floor(age/5) * 5 + 2.5
                tAgeList[k] = age
            }
            modeAge = which.max(table(tAgeList))
            modeName = as.numeric(names(modeAge))
            tmpIndex = noneAgeIndex[i]
            ageList[tmpIndex, 1] = modeName
        }
        return(ageList)
    }
}
fullfillEmbark = function(embarkedList) {
    noneEmbarkAgeIndex = which(embarkedList == """")
    nEmbarkAgeIndex = which(embarkedList != """")
    modeEmbark = which.max(table(embarkedList[nEmbarkAgeIndex, 1]))
    embarkName = names(modeEmbark)
    embarkedList[noneEmbarkAgeIndex, 1] = embarkName
    return(embarkedList)
}
fullfillFare = function(fareList) {
    nonefareIndex = which(is.na(fareList))
    nfareIndex = which(!is.na(fareList))
    medianFare = median(fareList[nfareIndex, 1])
    fareList[nonefareIndex, 1] = medianFare
    return(fareList)
}
train_data = read.csv(""../input/train.csv"", header = T)
test_data = read.csv(""../input/test.csv"", header = T)
newTrainData = reAssembleVariable(train_data, 1)
newTestData = reAssembleVariable(test_data, 2)
lm1_model = lm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare, newTrainData)
rf1_model = randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare, newTrainData)
lm1_ans = predict(lm1_model, newTestData)
rf1_ans = predict(rf1_model, newTestData)
passedCoune = 0
for (i in 1:length(lm1_ans)) {
    if (lm1_ans[i] >= 0.5 & rf1_ans[i] == 1) {
        lm1_ans[i] = 1
    }
    else {
        lm1_ans[i] = 0
    }
}
testAns = data.frame(PassengerId = newTestData$PassengerId, Survived = lm1_ans)
write.csv(testAns, ""ans.csv"", row.names = FALSE)",1,0,0,0,0,0,0,0,0,0,0,0,0,0
