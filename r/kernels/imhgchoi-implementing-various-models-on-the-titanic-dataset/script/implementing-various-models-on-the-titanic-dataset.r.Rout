
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> data <- read.csv("../input/train.csv")
> question <- read.csv("../input/test.csv")
> 
> summary(data)
  PassengerId       Survived          Pclass     
 Min.   :  1.0   Min.   :0.0000   Min.   :1.000  
 1st Qu.:223.5   1st Qu.:0.0000   1st Qu.:2.000  
 Median :446.0   Median :0.0000   Median :3.000  
 Mean   :446.0   Mean   :0.3838   Mean   :2.309  
 3rd Qu.:668.5   3rd Qu.:1.0000   3rd Qu.:3.000  
 Max.   :891.0   Max.   :1.0000   Max.   :3.000  
                                                 
                                    Name         Sex           Age       
 Abbing, Mr. Anthony                  :  1   female:314   Min.   : 0.42  
 Abbott, Mr. Rossmore Edward          :  1   male  :577   1st Qu.:20.12  
 Abbott, Mrs. Stanton (Rosa Hunt)     :  1                Median :28.00  
 Abelson, Mr. Samuel                  :  1                Mean   :29.70  
 Abelson, Mrs. Samuel (Hannah Wizosky):  1                3rd Qu.:38.00  
 Adahl, Mr. Mauritz Nils Martin       :  1                Max.   :80.00  
 (Other)                              :885                NA's   :177    
     SibSp           Parch             Ticket         Fare       
 Min.   :0.000   Min.   :0.0000   1601    :  7   Min.   :  0.00  
 1st Qu.:0.000   1st Qu.:0.0000   347082  :  7   1st Qu.:  7.91  
 Median :0.000   Median :0.0000   CA. 2343:  7   Median : 14.45  
 Mean   :0.523   Mean   :0.3816   3101295 :  6   Mean   : 32.20  
 3rd Qu.:1.000   3rd Qu.:0.0000   347088  :  6   3rd Qu.: 31.00  
 Max.   :8.000   Max.   :6.0000   CA 2144 :  6   Max.   :512.33  
                                  (Other) :852                   
         Cabin     Embarked
            :687    :  2   
 B96 B98    :  4   C:168   
 C23 C25 C27:  4   Q: 77   
 G6         :  4   S:644   
 C22 C26    :  3           
 D          :  3           
 (Other)    :186           
> 
> str(data)
'data.frame':	891 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : Factor w/ 891 levels "Abbing, Mr. Anthony",..: 109 191 358 277 16 559 520 629 417 581 ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : Factor w/ 681 levels "110152","110413",..: 524 597 670 50 473 276 86 396 345 133 ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : Factor w/ 148 levels "","A10","A14",..: 1 83 1 57 1 1 131 1 1 1 ...
 $ Embarked   : Factor w/ 4 levels "","C","Q","S": 4 2 4 4 4 3 4 4 4 2 ...
> 
> summary(question)
  PassengerId         Pclass     
 Min.   : 892.0   Min.   :1.000  
 1st Qu.: 996.2   1st Qu.:1.000  
 Median :1100.5   Median :3.000  
 Mean   :1100.5   Mean   :2.266  
 3rd Qu.:1204.8   3rd Qu.:3.000  
 Max.   :1309.0   Max.   :3.000  
                                 
                                        Name         Sex           Age       
 Abbott, Master. Eugene Joseph            :  1   female:152   Min.   : 0.17  
 Abelseth, Miss. Karen Marie              :  1   male  :266   1st Qu.:21.00  
 Abelseth, Mr. Olaus Jorgensen            :  1                Median :27.00  
 Abrahamsson, Mr. Abraham August Johannes :  1                Mean   :30.27  
 Abrahim, Mrs. Joseph (Sophie Halaut Easu):  1                3rd Qu.:39.00  
 Aks, Master. Philip Frank                :  1                Max.   :76.00  
 (Other)                                  :412                NA's   :86     
     SibSp            Parch             Ticket         Fare        
 Min.   :0.0000   Min.   :0.0000   PC 17608:  5   Min.   :  0.000  
 1st Qu.:0.0000   1st Qu.:0.0000   113503  :  4   1st Qu.:  7.896  
 Median :0.0000   Median :0.0000   CA. 2343:  4   Median : 14.454  
 Mean   :0.4474   Mean   :0.3923   16966   :  3   Mean   : 35.627  
 3rd Qu.:1.0000   3rd Qu.:0.0000   220845  :  3   3rd Qu.: 31.500  
 Max.   :8.0000   Max.   :9.0000   347077  :  3   Max.   :512.329  
                                   (Other) :396   NA's   :1        
             Cabin     Embarked
                :327   C:102   
 B57 B59 B63 B66:  3   Q: 46   
 A34            :  2   S:270   
 B45            :  2           
 C101           :  2           
 C116           :  2           
 (Other)        : 80           
> 
> str(question)
'data.frame':	418 obs. of  11 variables:
 $ PassengerId: int  892 893 894 895 896 897 898 899 900 901 ...
 $ Pclass     : int  3 3 2 3 3 3 3 2 3 3 ...
 $ Name       : Factor w/ 418 levels "Abbott, Master. Eugene Joseph",..: 210 409 273 414 182 370 85 58 5 104 ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 2 2 1 2 1 2 1 2 ...
 $ Age        : num  34.5 47 62 27 22 14 30 26 18 21 ...
 $ SibSp      : int  0 1 0 0 1 0 0 1 0 2 ...
 $ Parch      : int  0 0 0 0 1 0 0 1 0 0 ...
 $ Ticket     : Factor w/ 363 levels "110469","110489",..: 153 222 74 148 139 262 159 85 101 270 ...
 $ Fare       : num  7.83 7 9.69 8.66 12.29 ...
 $ Cabin      : Factor w/ 77 levels "","A11","A18",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Embarked   : Factor w/ 3 levels "C","Q","S": 2 3 2 3 3 3 2 3 1 3 ...
> 
>   data <- data[c('Survived','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked')]
>   data <- data[data$Embarked != '',]
>   data$Embarked <- as.character(data$Embarked)
>   data$Embarked <- as.factor(data$Embarked)
> 
> par(mfrow=c(2,2))
> counts <- table(data$Survived)
> barplot(counts, main='Survived', names.arg=c('no','yes'), col ='lightpink')
> counts <- table(data$Pclass)
> barplot(counts, main='PassengerClass', names.arg=c('1st','2nd','3rd'), col='lemonchiffon')
> counts <- table(data$Sex)
> barplot(counts, main='Gender', names.arg=c('female','male'), col='lemonchiffon')
> counts <- table(data$Embarked)
> barplot(counts, main='Port of Embarkation', names.arg=c('C','Q','S'), col='lemonchiffon')
> 
> par(mfrow=c(2,2))
> hist(data$Age)
> hist(data$SibSp)
> hist(data$Parch)
> hist(data$Fare)
> 
> age.data <- data[!is.na(data$Age),]
> 
> par(mfrow=c(1,1))
> plot(age.data$Embarked,age.data$Age, main='Age and Embarked Port')
> 
> v<- c(mean(age.data$Age[age.data$Pclass==1]),
+       mean(age.data$Age[age.data$Pclass==2]),
+       mean(age.data$Age[age.data$Pclass==3]))
> barplot(v,main='Age and Class',names.arg=c('1st','2nd','3rd'), col='lemonchiffon')
> 
> v<- c(mean(age.data$Age[age.data$SibSp==0]),
+       mean(age.data$Age[age.data$SibSp==1]),
+       mean(age.data$Age[age.data$SibSp==2]),
+       mean(age.data$Age[age.data$SibSp==3]),
+       mean(age.data$Age[age.data$SibSp==4]),
+       mean(age.data$Age[age.data$SibSp==5]))
> par(mfrow=c(1,2))
> barplot(v,main='Age and Sibling/Spouse',names.arg=c(0,1,2,3,4,5), col='lemonchiffon')
> hist(data$SibSp)
> 
> v<- c(mean(age.data$Age[age.data$Parch==0]),
+       mean(age.data$Age[age.data$Parch==1]),
+       mean(age.data$Age[age.data$Parch==2]),
+       mean(age.data$Age[age.data$Parch==3]),
+       mean(age.data$Age[age.data$Parch==4]),
+       mean(age.data$Age[age.data$Parch==5]),
+       mean(age.data$Age[age.data$Parch==6]))
> par(mfrow=c(1,2))
> barplot(v,main='Age and Parent/Children',names.arg=c(0,1,2,3,4,5,6), col='lemonchiffon')
> hist(data$Parch)
> 
> age.data$FamSize <- age.data$SibSp + age.data$Parch
> v<- c(mean(age.data$Age[age.data$FamSize==0]),
+       mean(age.data$Age[age.data$FamSize==1]),
+       mean(age.data$Age[age.data$FamSize==2]),
+       mean(age.data$Age[age.data$FamSize==3]),
+       mean(age.data$Age[age.data$FamSize==4]),
+       mean(age.data$Age[age.data$FamSize==5]),
+       mean(age.data$Age[age.data$FamSize==6]),
+       mean(age.data$Age[age.data$FamSize==7]))
> barplot(v,main='Age and Family Size',names.arg=c(0,1,2,3,4,5,6,7), col='lemonchiffon')
> 
> data$FamSize <- data$SibSp + data$Parch
> 
> plot(age.data$Age,age.data$Fare)
> sprintf('correlation coefficient : %s',cor(age.data$Age, age.data$Fare))
[1] "correlation coefficient : 0.0931425178941152"
> 
> set.seed(0)
> smplSize <-floor(nrow(age.data) * .75)
> index <- sample(seq_len(nrow(age.data)), size = smplSize)
> age.data.train <- age.data[index, ]
> age.data.test <- age.data[-index, ]
> #linear regression for age
> age.reg <- lm(Age~Pclass+SibSp+FamSize, data=age.data.train)
> age.reg.p <- round(predict(age.reg, newdata=age.data.test))
> age.reg.p[age.reg.p<0] <- 0
> 
> library(car)
Loading required package: carData
Warning messages:
1: package ‘car’ was built under R version 3.6.2 
2: package ‘carData’ was built under R version 3.6.2 
> print("Variance_Inflation_Factor(VIF)")
[1] "Variance_Inflation_Factor(VIF)"
> print(vif(age.reg))
  Pclass    SibSp  FamSize 
1.010435 4.134342 4.115721 
> 
> set.seed(0)
> smplSize <-floor(nrow(age.data) * .75)
> index <- sample(seq_len(nrow(age.data)), size = smplSize)
> age.data.train <- age.data[index, ]
> age.data.test <- age.data[-index, ]
> #linear regression for age
> age.reg <- lm(Age~Pclass+SibSp+FamSize, data=age.data.train)
> age.reg.p <- round(predict(age.reg, newdata=age.data.test))
> age.reg.p[age.reg.p<0] <- 0
> print(paste("sum_of_errors:",sum(abs(age.reg.p - age.data.test$Age))))
[1] "sum_of_errors: 1694.08"
> print(paste("average_errors:",sum(abs(age.reg.p - age.data.test$Age))/178))
[1] "average_errors: 9.51730337078652"
> summary(age.reg)

Call:
lm(formula = Age ~ Pclass + SibSp + FamSize, data = age.data.train)

Residuals:
    Min      1Q  Median      3Q     Max 
-30.428  -9.028  -1.459   6.972  45.972 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept)  46.1641     1.6048  28.767  < 2e-16 ***
Pclass       -6.0453     0.6680  -9.050  < 2e-16 ***
SibSp        -0.8150     1.2329  -0.661 0.508855    
FamSize      -2.8451     0.7967  -3.571 0.000388 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 13 on 530 degrees of freedom
Multiple R-squared:  0.2383,	Adjusted R-squared:  0.2339 
F-statistic: 55.26 on 3 and 530 DF,  p-value: < 2.2e-16

> 
> library(nnet)
> errorSum <- 10000
> for (i in 1:100){
+   age.ann <- nnet(Age~Pclass+SibSp+FamSize, linout = TRUE, data= age.data.train, size = 4, rang= .1,decay=.0005,maxit=1000)
+   age.ann.p<- predict(age.ann, newdata=age.data.test)
+   tmp <- sum(abs((age.ann.p - age.data.test$Age)))
+   if (errorSum > tmp){
+     errorSum <- tmp
+     final.age.ann <- age.ann
+     final.age.ann.p <- age.ann.p
+   }
+ }
# weights:  21
initial  value 587141.298746 
iter  10 value 107058.820848
iter  20 value 91812.676432
iter  30 value 88913.334820
iter  40 value 88159.938480
iter  50 value 88138.854602
iter  60 value 88137.680802
final  value 88137.026773 
converged
# weights:  21
initial  value 586791.128008 
iter  10 value 88252.488877
iter  20 value 85169.796262
iter  30 value 84760.520658
iter  40 value 84653.107684
iter  50 value 83937.130138
iter  60 value 83491.561490
iter  70 value 83328.998192
iter  80 value 83328.187997
iter  90 value 83317.971894
iter 100 value 83274.262476
iter 110 value 83273.030104
final  value 83272.542805 
converged
# weights:  21
initial  value 592895.727113 
iter  10 value 103132.288027
iter  20 value 93593.737934
iter  30 value 89584.912759
iter  40 value 88264.820445
iter  50 value 88137.678095
final  value 88137.484365 
converged
# weights:  21
initial  value 590025.092195 
iter  10 value 112482.762878
iter  20 value 94370.807740
iter  30 value 94151.510016
iter  40 value 94150.208577
iter  50 value 94145.454067
iter  60 value 89275.588328
iter  70 value 88600.654854
iter  80 value 88578.558186
iter  90 value 88578.077678
iter 100 value 83979.788882
iter 110 value 83100.778961
iter 120 value 83048.218303
iter 130 value 83036.491431
iter 140 value 82992.207279
iter 150 value 82910.243456
iter 160 value 81692.880183
iter 170 value 80993.587553
iter 180 value 80894.048972
iter 190 value 80891.236117
iter 200 value 80857.867164
iter 210 value 80749.746150
iter 220 value 80675.116768
iter 230 value 80654.952762
iter 240 value 80626.913128
iter 250 value 80625.115226
iter 260 value 80611.464314
iter 270 value 80599.887954
iter 280 value 80590.347335
final  value 80589.433510 
converged
# weights:  21
initial  value 591487.655776 
iter  10 value 88901.651175
iter  20 value 85032.503713
iter  30 value 83816.275858
iter  40 value 83278.924841
iter  50 value 83045.229580
iter  60 value 82777.065262
iter  70 value 82472.574180
iter  80 value 82345.891042
iter  90 value 82328.694826
iter 100 value 82239.633164
iter 110 value 82143.699237
iter 120 value 82118.064175
iter 130 value 82101.551083
iter 140 value 82093.920901
iter 150 value 82089.673516
iter 160 value 82089.550210
iter 170 value 82037.501318
iter 180 value 81977.215603
iter 190 value 81971.120699
iter 200 value 81965.111915
iter 210 value 81954.051364
iter 220 value 81953.181790
iter 230 value 81947.900760
final  value 81947.501909 
converged
# weights:  21
initial  value 584925.090799 
iter  10 value 106067.201925
iter  20 value 91797.250209
iter  30 value 88857.257848
iter  40 value 88439.894007
iter  50 value 88019.732122
iter  60 value 85895.272106
iter  70 value 84417.289457
iter  80 value 84103.592186
iter  90 value 83887.680832
iter 100 value 83507.582847
iter 110 value 82890.091728
iter 120 value 82861.586273
iter 130 value 82814.568513
iter 140 value 82789.327535
iter 150 value 82779.079862
iter 160 value 82776.525288
iter 160 value 82776.525213
final  value 82776.511531 
converged
# weights:  21
initial  value 587948.132689 
iter  10 value 93657.477976
iter  20 value 87243.571529
iter  30 value 84176.561952
iter  40 value 84110.002515
iter  50 value 84101.222053
iter  60 value 84059.583538
iter  70 value 83754.818793
iter  80 value 83557.272624
iter  90 value 83153.529357
iter 100 value 81956.626408
iter 110 value 81579.975366
iter 120 value 81559.955462
iter 130 value 81558.024611
iter 140 value 81547.401048
iter 150 value 81281.800404
iter 160 value 81259.378868
iter 170 value 81253.066077
iter 180 value 81147.383329
iter 190 value 81100.972057
iter 200 value 81061.864151
iter 210 value 81041.218633
iter 220 value 81001.188864
iter 230 value 80994.978920
iter 240 value 80975.438040
iter 250 value 80972.084069
iter 260 value 80959.093269
final  value 80958.993349 
converged
# weights:  21
initial  value 593190.093984 
iter  10 value 99481.150690
iter  20 value 96828.148206
iter  30 value 87081.582016
iter  40 value 86280.143603
iter  50 value 85838.560569
iter  60 value 85531.176044
iter  70 value 84663.839516
iter  80 value 84422.962224
iter  90 value 84130.440178
iter 100 value 84025.830743
iter 110 value 84017.551705
iter 120 value 84009.454348
iter 130 value 84006.043998
iter 140 value 84003.362986
iter 150 value 84002.599399
final  value 84002.491014 
converged
# weights:  21
initial  value 591557.536655 
iter  10 value 90249.252345
iter  20 value 85616.228019
iter  30 value 83531.865380
iter  40 value 83244.372527
iter  50 value 83060.136476
iter  60 value 82480.068524
iter  70 value 82323.886737
iter  80 value 82312.919419
iter  90 value 82311.908363
iter 100 value 82311.682900
iter 110 value 82310.721610
iter 120 value 82310.309791
iter 130 value 82145.319565
iter 140 value 82020.908499
iter 150 value 81989.694369
iter 160 value 81981.881959
iter 170 value 81969.999552
iter 180 value 81969.274208
iter 190 value 81963.598936
iter 200 value 81959.665650
iter 210 value 81957.223700
final  value 81957.214932 
converged
# weights:  21
initial  value 588932.107004 
iter  10 value 95400.659770
iter  20 value 86513.620091
iter  30 value 83642.051792
iter  40 value 81140.712442
iter  50 value 80278.966779
iter  60 value 80011.473845
iter  70 value 79887.559841
iter  80 value 79883.692460
final  value 79883.228717 
converged
# weights:  21
initial  value 589740.640509 
iter  10 value 94432.589670
iter  20 value 86786.935208
iter  30 value 83489.639433
iter  40 value 80932.004638
iter  50 value 80794.359865
iter  60 value 80757.009971
iter  70 value 80727.037594
iter  80 value 80687.007419
iter  90 value 80658.317851
iter 100 value 80625.116431
iter 110 value 80624.833454
final  value 80624.728132 
converged
# weights:  21
initial  value 590159.182183 
iter  10 value 86754.474803
iter  20 value 84934.561079
iter  30 value 82876.910358
iter  40 value 82144.271763
iter  50 value 82101.143127
iter  60 value 81934.808649
iter  70 value 81840.086214
iter  80 value 81809.313767
iter  90 value 81706.846304
iter 100 value 81699.011187
iter 110 value 81698.733056
final  value 81698.731967 
converged
# weights:  21
initial  value 587130.428631 
iter  10 value 98348.987828
iter  20 value 91424.107604
iter  30 value 84710.966748
iter  40 value 84355.423161
iter  50 value 84069.570693
iter  60 value 83677.660618
iter  70 value 83371.899665
iter  80 value 82986.619100
iter  90 value 82786.347475
iter 100 value 82560.734512
iter 110 value 82118.094921
iter 120 value 81799.893772
iter 130 value 81649.389523
iter 140 value 81527.137765
iter 150 value 81364.571177
iter 160 value 80894.545399
iter 170 value 80562.398498
iter 180 value 80393.714768
iter 190 value 80373.300377
iter 200 value 80178.349390
iter 210 value 79969.555965
iter 220 value 79939.071776
iter 230 value 79938.756289
iter 240 value 79934.694134
iter 250 value 79927.727401
iter 260 value 79922.515320
iter 270 value 79919.538599
iter 280 value 79908.770612
iter 290 value 79905.553656
final  value 79905.189581 
converged
# weights:  21
initial  value 587068.418414 
iter  10 value 92346.109942
iter  20 value 84973.937557
iter  30 value 83198.304864
iter  40 value 82534.141875
iter  50 value 82091.844397
iter  60 value 81595.224999
iter  70 value 81304.619982
iter  80 value 80907.032102
iter  90 value 79921.779581
iter 100 value 79465.033901
iter 110 value 79251.549539
iter 120 value 79201.022804
iter 130 value 79095.478284
iter 140 value 79035.974834
iter 150 value 79004.625969
iter 160 value 79002.675888
iter 170 value 78995.654181
iter 180 value 78993.215019
iter 190 value 78992.764875
final  value 78992.722526 
converged
# weights:  21
initial  value 589564.086844 
iter  10 value 96023.375005
iter  20 value 87179.202246
iter  30 value 84175.535391
iter  40 value 84033.474045
iter  50 value 83796.894706
iter  60 value 82778.507515
iter  70 value 82466.457831
iter  80 value 82234.053457
iter  90 value 82211.412713
iter 100 value 82147.574178
iter 110 value 82064.557152
iter 120 value 81605.530388
iter 130 value 81125.783827
iter 140 value 80680.413238
iter 150 value 80490.876039
iter 160 value 80487.311894
iter 170 value 80486.900538
iter 180 value 80484.840673
iter 190 value 80476.220293
iter 200 value 80470.230169
final  value 80467.864953 
converged
# weights:  21
initial  value 590419.129289 
iter  10 value 93043.313613
iter  20 value 86953.307387
iter  30 value 84614.120139
iter  40 value 83751.329676
iter  50 value 82963.945327
iter  60 value 82746.526367
iter  70 value 82620.114118
iter  80 value 82549.351032
iter  90 value 82548.402927
final  value 82547.908229 
converged
# weights:  21
initial  value 587334.350414 
iter  10 value 91461.599637
iter  20 value 88265.076193
iter  30 value 83577.341040
iter  40 value 81013.350260
iter  50 value 80318.393731
iter  60 value 80134.060206
iter  70 value 80116.409076
iter  80 value 80094.475289
iter  90 value 80088.083013
iter 100 value 80087.348905
final  value 80086.803893 
converged
# weights:  21
initial  value 589476.457916 
iter  10 value 104644.592837
iter  20 value 102573.436829
iter  30 value 101903.418531
iter  40 value 101652.561079
iter  50 value 101649.189476
iter  60 value 101648.023668
iter  70 value 98813.856893
iter  80 value 97832.972106
iter  90 value 87370.592314
iter 100 value 86896.352121
iter 110 value 85022.834704
iter 120 value 83492.989711
iter 130 value 83311.666254
iter 140 value 82779.796101
iter 150 value 82695.435644
iter 160 value 82682.248520
iter 170 value 82666.814826
final  value 82662.609536 
converged
# weights:  21
initial  value 586415.854673 
iter  10 value 98138.228061
iter  20 value 89197.577792
iter  30 value 85036.100667
iter  40 value 82948.365969
iter  50 value 82158.727728
iter  60 value 81909.269183
iter  70 value 80832.644284
iter  80 value 80247.679943
iter  90 value 79740.930698
iter 100 value 79726.284803
final  value 79726.102314 
converged
# weights:  21
initial  value 588206.630824 
iter  10 value 91278.194658
iter  20 value 87195.458117
iter  30 value 85204.820844
iter  40 value 84369.443141
iter  50 value 84119.112236
iter  60 value 83740.126918
iter  70 value 83195.938156
iter  80 value 83056.477903
iter  90 value 83048.022543
iter 100 value 83037.426551
iter 110 value 82910.928011
iter 120 value 82852.531875
iter 130 value 82847.905865
iter 140 value 82847.505891
iter 150 value 82846.751744
iter 160 value 82845.057938
iter 170 value 82844.494205
final  value 82844.347766 
converged
# weights:  21
initial  value 591451.306368 
iter  10 value 91189.721406
iter  20 value 88138.875104
iter  30 value 87009.752626
iter  40 value 85535.360736
iter  50 value 83654.990965
iter  60 value 83588.880479
iter  70 value 83418.318038
iter  80 value 81598.586132
iter  90 value 81527.345533
iter 100 value 81348.387537
iter 110 value 81343.251241
iter 120 value 81332.026801
iter 130 value 81142.135164
iter 140 value 80956.581815
iter 150 value 80951.963644
iter 160 value 80951.298299
final  value 80951.289071 
converged
# weights:  21
initial  value 587741.991812 
iter  10 value 89938.765022
iter  20 value 84936.037909
iter  30 value 83402.780819
iter  40 value 82521.011432
iter  50 value 81186.635826
iter  60 value 80706.648582
iter  70 value 80664.297613
iter  80 value 80642.810496
iter  90 value 80599.134441
iter 100 value 80596.632480
final  value 80596.364743 
converged
# weights:  21
initial  value 586354.388999 
iter  10 value 91495.752929
iter  20 value 88378.049279
iter  30 value 87509.974941
iter  40 value 87015.117415
iter  50 value 86360.653930
iter  60 value 85787.236959
iter  70 value 85465.833609
iter  80 value 85350.533148
iter  90 value 85312.493216
iter 100 value 85309.891995
iter 110 value 85305.901378
iter 120 value 85277.585915
iter 130 value 85215.181608
iter 140 value 85049.274668
iter 150 value 84978.932650
iter 160 value 84966.683965
iter 170 value 84887.943093
iter 180 value 84458.437214
iter 190 value 82839.377321
iter 200 value 81867.544760
iter 210 value 81489.000808
iter 220 value 81219.354180
iter 230 value 81186.155569
iter 240 value 81029.555276
iter 250 value 80991.488623
iter 260 value 80986.171791
iter 270 value 80983.076194
iter 280 value 80982.909501
iter 290 value 80982.525915
iter 300 value 80982.264591
final  value 80982.262444 
converged
# weights:  21
initial  value 590881.467513 
iter  10 value 94615.164397
iter  20 value 89921.793111
iter  30 value 87435.415290
iter  40 value 87302.631499
iter  50 value 86730.764204
iter  60 value 83422.141691
iter  70 value 82577.547701
iter  80 value 81182.539137
iter  90 value 81113.395816
iter 100 value 81057.065418
iter 110 value 81049.986974
iter 120 value 81049.666343
iter 130 value 81049.523232
iter 140 value 81049.455349
iter 150 value 81049.211821
iter 160 value 81046.899028
iter 170 value 81006.926277
iter 180 value 80935.093115
iter 190 value 80641.852079
iter 200 value 80612.718723
iter 210 value 80556.105034
iter 220 value 80539.430546
iter 230 value 80535.076432
iter 240 value 80534.377910
iter 250 value 80533.426896
iter 260 value 80531.743989
iter 270 value 80531.080144
final  value 80530.954618 
converged
# weights:  21
initial  value 590789.032536 
iter  10 value 95761.242884
iter  20 value 86400.878229
iter  30 value 84182.787803
iter  40 value 83583.771114
iter  50 value 82850.129611
iter  60 value 82358.639584
iter  70 value 82083.230858
iter  80 value 82076.144289
iter  90 value 82075.901388
iter  90 value 82075.901138
iter  90 value 82075.900924
final  value 82075.900924 
converged
# weights:  21
initial  value 587399.273153 
iter  10 value 91914.378518
iter  20 value 89742.504506
iter  30 value 89070.653458
iter  40 value 85142.804289
iter  50 value 82068.668177
iter  60 value 81964.033243
iter  70 value 81951.826371
iter  80 value 81922.170214
iter  90 value 81857.164609
iter 100 value 81796.950908
iter 110 value 81767.397617
iter 120 value 81682.931791
iter 130 value 81332.170534
iter 140 value 81270.863144
iter 150 value 81240.820542
iter 160 value 81230.758761
iter 170 value 81229.045120
iter 180 value 81227.128263
iter 190 value 81225.979587
iter 200 value 81225.519119
iter 200 value 81225.518904
iter 200 value 81225.518904
final  value 81225.518904 
converged
# weights:  21
initial  value 588557.685589 
final  value 117513.606890 
converged
# weights:  21
initial  value 587622.294055 
iter  10 value 90949.067471
iter  20 value 85138.500947
iter  30 value 84216.696961
iter  40 value 83225.096272
iter  50 value 82931.729721
iter  60 value 82871.218403
iter  70 value 82828.651703
iter  80 value 82813.306753
iter  90 value 82812.929543
final  value 82812.864444 
converged
# weights:  21
initial  value 588855.063893 
iter  10 value 94425.573903
iter  20 value 88473.023968
iter  30 value 88155.778459
iter  40 value 88138.285094
final  value 88138.193569 
converged
# weights:  21
initial  value 588894.834583 
iter  10 value 91843.137399
iter  20 value 88175.391737
iter  30 value 87444.711222
iter  40 value 85382.203546
iter  50 value 83533.246045
iter  60 value 81193.154478
iter  70 value 80973.409671
iter  80 value 80692.929226
iter  90 value 80599.727281
iter 100 value 80596.333677
iter 110 value 80596.285987
iter 110 value 80596.285765
iter 110 value 80596.285607
final  value 80596.285607 
converged
# weights:  21
initial  value 589292.154156 
iter  10 value 104625.032052
iter  20 value 103711.065700
iter  30 value 103655.967862
final  value 103655.385855 
converged
# weights:  21
initial  value 591283.807009 
iter  10 value 90164.350245
iter  20 value 85511.374632
iter  30 value 82679.086514
iter  40 value 81865.929775
iter  50 value 81660.479845
iter  60 value 81639.537257
iter  70 value 81630.430383
iter  80 value 81624.951500
iter  90 value 81620.754115
iter 100 value 81606.601504
iter 110 value 81390.387594
iter 120 value 80868.708767
iter 130 value 80855.421885
iter 140 value 80853.379467
iter 150 value 80817.811469
iter 160 value 80722.786195
iter 170 value 80592.077858
iter 180 value 80465.477838
iter 190 value 80450.411605
iter 200 value 80443.333982
iter 210 value 80441.357090
iter 220 value 80438.946939
iter 230 value 80438.569433
iter 230 value 80438.569306
iter 230 value 80438.569306
final  value 80438.569306 
converged
# weights:  21
initial  value 585688.573982 
iter  10 value 95343.282102
iter  20 value 88216.047681
iter  30 value 85040.774597
iter  40 value 84369.724605
iter  50 value 84211.013402
iter  60 value 84000.409631
iter  70 value 83553.748732
iter  80 value 83487.862879
iter  90 value 82952.299753
iter 100 value 82264.278874
iter 110 value 82148.160260
iter 120 value 82141.892765
iter 130 value 82109.365378
iter 140 value 82099.048890
iter 150 value 82077.769025
iter 160 value 82070.926733
iter 170 value 81899.816346
iter 180 value 81852.064113
iter 190 value 81845.462048
iter 200 value 81838.571949
iter 210 value 81817.382109
iter 220 value 81813.736972
iter 230 value 81803.349665
iter 240 value 81797.372729
iter 250 value 81759.987881
iter 260 value 81691.101864
iter 270 value 81634.706924
iter 280 value 81573.037979
iter 290 value 81563.869973
final  value 81563.542306 
converged
# weights:  21
initial  value 589067.451761 
iter  10 value 91319.196731
iter  20 value 87232.944619
iter  30 value 83288.006960
iter  40 value 82551.481666
iter  50 value 82436.713848
iter  60 value 81951.314235
iter  70 value 81051.383181
iter  80 value 81018.490784
iter  90 value 81009.213517
iter 100 value 81006.457068
iter 110 value 80995.548478
iter 120 value 80975.836572
iter 130 value 80779.908289
iter 140 value 80599.417273
iter 150 value 80516.604967
iter 160 value 80502.428689
final  value 80501.913074 
converged
# weights:  21
initial  value 585330.589839 
iter  10 value 102318.126417
iter  20 value 90121.527525
iter  30 value 87851.406590
iter  40 value 87584.440217
iter  50 value 87545.411338
iter  60 value 87407.320616
iter  70 value 87311.377479
iter  80 value 87283.587730
iter  90 value 86585.146689
iter 100 value 83536.705630
iter 110 value 83138.230367
iter 120 value 82844.679649
iter 130 value 82821.884457
iter 140 value 82735.457335
iter 150 value 82694.732742
iter 160 value 82584.926457
iter 170 value 82442.453019
iter 180 value 82436.618722
iter 190 value 82421.068258
iter 200 value 82241.001999
iter 210 value 82219.731660
iter 220 value 82214.346417
iter 230 value 82192.467860
iter 240 value 82008.576771
iter 250 value 81991.819759
iter 260 value 81909.972595
iter 270 value 81594.539131
iter 280 value 81406.683318
iter 290 value 81335.737920
iter 300 value 81313.963130
iter 310 value 81191.828218
iter 320 value 81171.024350
final  value 81169.461425 
converged
# weights:  21
initial  value 590823.654379 
iter  10 value 90176.198391
iter  20 value 86942.631191
iter  30 value 83396.067876
iter  40 value 81447.271946
iter  50 value 81101.563673
iter  60 value 80955.810518
iter  70 value 80839.609073
iter  80 value 80831.416971
iter  90 value 80827.483153
iter 100 value 80820.866747
iter 110 value 80785.750533
iter 120 value 80701.609614
iter 130 value 80689.616738
iter 140 value 80649.261805
iter 150 value 80591.913468
iter 160 value 80575.972708
iter 170 value 80574.650597
final  value 80574.251173 
converged
# weights:  21
initial  value 587765.382287 
iter  10 value 94203.373999
iter  20 value 87387.382393
iter  30 value 84217.676756
iter  40 value 82707.101960
iter  50 value 82008.184552
iter  60 value 81619.478688
iter  70 value 81147.999290
iter  80 value 80973.487357
iter  90 value 80938.205108
iter 100 value 80900.748079
iter 110 value 80829.545426
iter 120 value 80781.068493
iter 130 value 80736.880547
iter 140 value 80723.891356
iter 150 value 80660.640245
iter 160 value 80618.940203
iter 170 value 80611.669471
iter 180 value 80608.099586
iter 190 value 80606.980828
iter 200 value 80605.901963
final  value 80605.822711 
converged
# weights:  21
initial  value 589723.212817 
iter  10 value 97521.288917
iter  20 value 90755.615731
iter  30 value 88466.453338
iter  40 value 87291.729582
iter  50 value 84812.691979
iter  60 value 83090.788817
iter  70 value 82500.683794
iter  80 value 82145.372420
iter  90 value 81912.542369
iter 100 value 81822.374741
iter 110 value 81596.417892
iter 120 value 81190.159817
iter 130 value 81013.585129
iter 140 value 80991.976867
iter 150 value 80977.079382
iter 160 value 80972.986495
iter 170 value 80971.624121
final  value 80971.552592 
converged
# weights:  21
initial  value 587372.433607 
iter  10 value 104712.084928
iter  20 value 95949.731450
iter  30 value 93832.338865
iter  40 value 93761.471317
iter  50 value 93754.782365
iter  60 value 90714.668775
iter  70 value 88219.680093
iter  80 value 87383.911648
iter  90 value 87330.594276
iter 100 value 86876.627767
iter 110 value 86514.469417
iter 120 value 86399.944738
iter 130 value 86303.866057
iter 140 value 86292.996533
iter 150 value 86243.289241
iter 160 value 86010.261989
iter 170 value 85659.363551
iter 180 value 84710.279961
iter 190 value 84518.289569
iter 200 value 84434.665635
iter 210 value 84385.482108
iter 220 value 84383.998285
iter 230 value 84383.164344
iter 240 value 84381.240130
iter 250 value 84380.716540
iter 260 value 83980.398718
iter 270 value 83870.096154
iter 280 value 83867.004069
final  value 83866.988954 
converged
# weights:  21
initial  value 591534.584252 
iter  10 value 95854.625069
iter  20 value 91110.306580
iter  30 value 91108.054872
iter  30 value 91108.054843
iter  30 value 91108.054748
final  value 91108.054748 
converged
# weights:  21
initial  value 590751.418006 
iter  10 value 94867.698899
iter  20 value 86580.234178
iter  30 value 86099.014412
iter  40 value 85910.978964
iter  50 value 85878.073375
iter  60 value 85805.274198
iter  70 value 84672.711608
iter  80 value 84643.266280
iter  90 value 84606.939901
iter 100 value 84596.152859
iter 110 value 84588.332501
iter 120 value 84585.754662
iter 130 value 84584.467523
iter 140 value 84541.488429
iter 150 value 84514.678805
iter 160 value 84511.057912
iter 170 value 84510.712061
iter 170 value 84510.711395
iter 170 value 84510.711395
final  value 84510.711395 
converged
# weights:  21
initial  value 589828.848396 
iter  10 value 104759.869828
iter  20 value 94443.830741
iter  30 value 93698.089556
iter  40 value 88113.219782
iter  50 value 88003.520413
iter  60 value 87974.862110
iter  70 value 87810.456410
iter  80 value 86928.649349
iter  90 value 86016.326885
iter 100 value 85677.726269
iter 110 value 85516.108264
iter 120 value 85492.878643
iter 130 value 85203.451606
iter 140 value 83209.488108
iter 150 value 80977.039207
iter 160 value 80709.059789
iter 170 value 80688.364125
iter 180 value 80669.107583
iter 190 value 80657.326078
iter 200 value 80653.574528
iter 210 value 80017.286979
iter 220 value 79714.835616
iter 230 value 79156.110299
iter 240 value 79060.436348
iter 250 value 79016.065645
iter 260 value 78997.077385
iter 270 value 78996.574130
final  value 78996.104730 
converged
# weights:  21
initial  value 588934.494963 
iter  10 value 91726.856262
iter  20 value 88742.781926
iter  30 value 87819.325587
iter  40 value 87818.298393
iter  50 value 87245.108254
iter  60 value 85260.954110
iter  70 value 83185.914077
iter  80 value 82028.732996
iter  90 value 81699.537758
iter 100 value 81149.746261
iter 110 value 81083.157095
iter 120 value 81025.342608
iter 130 value 80879.629844
iter 140 value 80787.908736
iter 150 value 80784.151424
final  value 80783.988328 
converged
# weights:  21
initial  value 587823.109052 
iter  10 value 97003.994853
iter  20 value 91048.383015
iter  30 value 83483.500282
iter  40 value 83130.547622
iter  50 value 82653.180232
iter  60 value 81956.129048
iter  70 value 80854.040262
iter  80 value 80813.912544
iter  90 value 80812.344662
iter 100 value 80811.622115
iter 110 value 80802.019829
iter 120 value 80769.474436
iter 130 value 80756.335443
iter 140 value 80756.099915
iter 150 value 80753.087758
iter 160 value 80751.711504
final  value 80751.352154 
converged
# weights:  21
initial  value 588244.874892 
iter  10 value 88874.227002
iter  20 value 87478.846759
iter  30 value 85186.934183
iter  40 value 84225.479272
iter  50 value 82241.017362
iter  60 value 81565.808568
iter  70 value 81553.669117
iter  80 value 81544.762912
iter  90 value 81531.263966
iter 100 value 81496.053549
iter 110 value 81382.733519
iter 120 value 81364.522479
iter 130 value 81362.512682
iter 140 value 81001.575054
iter 150 value 80718.899417
iter 160 value 80607.386081
iter 170 value 80591.281956
iter 180 value 80589.988375
iter 190 value 80589.916626
iter 200 value 80588.653234
iter 210 value 80587.064930
iter 220 value 80586.888486
final  value 80586.875260 
converged
# weights:  21
initial  value 589806.721558 
iter  10 value 91748.258924
iter  20 value 88421.179989
iter  30 value 87689.888947
iter  40 value 86126.821710
iter  50 value 84365.809675
iter  60 value 84157.603987
iter  70 value 84134.191708
final  value 84133.365858 
converged
# weights:  21
initial  value 589777.074124 
iter  10 value 91086.883494
iter  20 value 87372.250880
iter  30 value 85237.183083
iter  40 value 83045.617670
iter  50 value 82178.906309
iter  60 value 82132.573665
iter  70 value 82008.541903
iter  80 value 81296.105919
iter  90 value 80899.933194
iter 100 value 80867.773560
iter 110 value 80866.255018
iter 120 value 80860.802017
iter 130 value 80858.207861
iter 140 value 80856.752153
iter 150 value 80854.204860
iter 160 value 80852.330518
iter 170 value 80852.037137
iter 180 value 80770.299177
iter 190 value 80509.141793
iter 200 value 80472.305957
iter 210 value 80468.822708
iter 220 value 80468.321092
iter 230 value 80468.273490
iter 240 value 80467.884896
final  value 80467.561967 
converged
# weights:  21
initial  value 591639.847409 
iter  10 value 104981.320399
iter  20 value 93467.793645
iter  30 value 89617.146436
iter  40 value 86990.014628
iter  50 value 84725.447634
iter  60 value 84557.513203
iter  70 value 84404.023253
iter  80 value 84229.789538
iter  90 value 84216.180322
iter 100 value 84215.145688
final  value 84214.870321 
converged
# weights:  21
initial  value 589195.782298 
iter  10 value 92923.502249
iter  20 value 85900.283723
iter  30 value 83943.684925
iter  40 value 83495.574676
iter  50 value 83430.476189
iter  60 value 83212.613862
iter  70 value 83071.207744
iter  80 value 83041.447324
iter  90 value 82858.110041
iter 100 value 82841.457975
iter 110 value 82837.466555
iter 120 value 82837.021130
iter 130 value 82836.727179
final  value 82836.517887 
converged
# weights:  21
initial  value 584258.258367 
iter  10 value 103116.652794
iter  20 value 88416.712304
iter  30 value 86350.413483
iter  40 value 84571.479686
iter  50 value 82938.418263
iter  60 value 81536.026807
iter  70 value 81414.239452
iter  80 value 81293.238235
iter  90 value 81287.873913
iter 100 value 81286.333418
iter 110 value 81285.634162
iter 120 value 81285.075790
final  value 81285.042412 
converged
# weights:  21
initial  value 588750.460963 
iter  10 value 92725.857287
iter  20 value 87001.009588
iter  30 value 83559.801472
iter  40 value 81526.524454
iter  50 value 81240.594990
iter  60 value 80674.509553
iter  70 value 80475.390401
iter  80 value 80428.076041
iter  90 value 80414.178089
iter 100 value 80412.701036
iter 110 value 80410.024463
iter 120 value 80407.319072
iter 130 value 80391.221420
iter 140 value 80387.898339
iter 150 value 80383.600754
final  value 80383.571124 
converged
# weights:  21
initial  value 590251.787178 
iter  10 value 91849.277030
iter  20 value 87751.394667
iter  30 value 85987.243696
iter  40 value 85643.091784
iter  50 value 82926.508370
iter  60 value 82704.012389
iter  70 value 82556.390472
iter  80 value 82531.566495
iter  90 value 82500.192230
iter 100 value 82477.421477
iter 110 value 82470.790223
iter 120 value 82463.341745
iter 130 value 82310.631683
iter 140 value 81414.262923
iter 150 value 81312.842382
iter 160 value 81276.152095
iter 170 value 81223.682062
iter 180 value 81217.474960
iter 190 value 81216.094442
iter 200 value 81215.457759
iter 210 value 81211.824282
iter 220 value 81207.809939
iter 230 value 81204.753075
final  value 81204.456626 
converged
# weights:  21
initial  value 586789.232773 
iter  10 value 91683.065977
iter  20 value 87900.720250
iter  30 value 87266.804387
iter  40 value 86419.515341
iter  50 value 86034.352669
iter  60 value 86024.193882
iter  70 value 85993.773880
iter  80 value 85693.532289
iter  90 value 84775.070742
iter 100 value 81847.543277
iter 110 value 81194.950396
iter 120 value 81110.486788
iter 130 value 81106.097064
iter 140 value 81100.290003
iter 150 value 81097.124038
iter 160 value 81094.641402
iter 170 value 81093.728281
iter 180 value 81093.627975
iter 190 value 81092.664882
iter 200 value 81089.937476
iter 210 value 81089.605246
final  value 81089.591124 
converged
# weights:  21
initial  value 587874.683072 
iter  10 value 99608.355265
iter  20 value 88092.945413
iter  30 value 85207.415932
iter  40 value 82531.224090
iter  50 value 81972.769505
iter  60 value 81833.380388
iter  70 value 81809.459766
iter  80 value 81758.041106
iter  90 value 81716.050613
iter 100 value 81632.837124
iter 110 value 81619.157811
iter 120 value 81609.110312
iter 130 value 81587.336015
iter 140 value 81564.961999
iter 150 value 81562.061958
iter 160 value 81561.393344
final  value 81560.832879 
converged
# weights:  21
initial  value 592481.441070 
iter  10 value 94427.152457
iter  20 value 89468.313880
iter  30 value 88847.542585
iter  40 value 88700.606444
iter  50 value 88609.023122
iter  60 value 88608.146511
iter  70 value 88608.090654
iter  70 value 88608.090569
final  value 88608.090569 
converged
# weights:  21
initial  value 586353.494019 
iter  10 value 102040.634333
iter  20 value 89938.178048
iter  30 value 87853.899621
iter  40 value 87817.793127
iter  50 value 87123.304480
iter  60 value 86419.645034
iter  70 value 86176.894450
iter  80 value 85204.892941
iter  90 value 84436.413486
iter 100 value 84163.457938
iter 110 value 84031.880533
iter 120 value 83918.944850
iter 130 value 83674.240279
iter 140 value 83337.122567
iter 150 value 83324.769413
iter 160 value 83322.597690
iter 170 value 83216.425786
iter 180 value 82358.716652
iter 190 value 82202.212274
iter 200 value 81411.496349
iter 210 value 81324.209644
iter 220 value 81242.763100
iter 230 value 81170.654921
iter 240 value 81008.006051
iter 250 value 80973.799013
iter 260 value 80925.357014
iter 270 value 80877.405235
iter 280 value 80869.141446
iter 290 value 80866.789284
iter 300 value 80865.846280
iter 310 value 80861.047613
iter 320 value 80810.928951
iter 330 value 80797.380470
iter 340 value 80794.818380
iter 350 value 80781.047411
iter 360 value 80778.306746
iter 370 value 80775.006241
iter 380 value 80763.484752
iter 390 value 80759.235610
iter 400 value 80758.667062
final  value 80758.610283 
converged
# weights:  21
initial  value 589798.560979 
iter  10 value 89488.317780
iter  20 value 87557.913425
iter  30 value 85800.202954
iter  40 value 84379.567032
iter  50 value 84123.061608
iter  60 value 82737.661147
iter  70 value 82073.283215
iter  80 value 81937.089001
iter  90 value 81744.760447
iter 100 value 81646.642675
iter 110 value 81590.651267
iter 120 value 81436.937717
iter 130 value 81405.379503
iter 140 value 81397.118951
iter 150 value 81395.969294
iter 160 value 81395.244715
iter 170 value 81394.779405
iter 180 value 81394.602600
iter 180 value 81394.602155
iter 180 value 81394.602155
final  value 81394.602155 
converged
# weights:  21
initial  value 588619.497751 
iter  10 value 90107.608972
iter  20 value 85764.637812
iter  30 value 82888.291804
iter  40 value 81965.702077
iter  50 value 81152.548411
iter  60 value 81032.356613
iter  70 value 81031.791088
iter  80 value 81028.914893
iter  90 value 81016.741779
iter 100 value 81015.804720
final  value 81014.730138 
converged
# weights:  21
initial  value 591269.975688 
iter  10 value 91131.933282
iter  20 value 88450.925006
iter  30 value 85068.439865
iter  40 value 81704.864920
iter  50 value 81614.647427
iter  60 value 81576.332686
iter  70 value 81340.140873
iter  80 value 81207.102241
iter  90 value 81049.852537
iter 100 value 80957.813515
iter 110 value 80929.757278
iter 120 value 80917.361451
iter 130 value 80741.854755
iter 140 value 80522.964239
iter 150 value 80517.241545
iter 160 value 80512.408218
iter 170 value 80501.739371
iter 180 value 80496.145991
iter 190 value 80490.480608
iter 200 value 80489.791400
final  value 80489.779614 
converged
# weights:  21
initial  value 587824.555335 
iter  10 value 101109.444550
iter  20 value 94500.407064
iter  30 value 93521.652024
iter  40 value 90684.650132
iter  50 value 87742.605721
iter  60 value 87721.589038
iter  70 value 87517.939323
iter  80 value 86978.126532
iter  90 value 86313.149582
iter 100 value 84169.048378
iter 110 value 83127.124329
iter 120 value 82985.755848
iter 130 value 82889.766510
iter 140 value 82751.226431
iter 150 value 82657.874289
iter 160 value 82610.168975
iter 170 value 82599.739897
iter 180 value 82505.154503
iter 190 value 82463.383562
iter 200 value 82459.756416
iter 210 value 82459.326369
final  value 82459.322333 
converged
# weights:  21
initial  value 587149.370045 
iter  10 value 108919.576860
iter  20 value 104304.283701
iter  30 value 98411.133292
iter  40 value 89702.267631
iter  50 value 87237.166149
iter  60 value 86205.254964
iter  70 value 85623.467527
iter  80 value 85567.773194
final  value 85565.215420 
converged
# weights:  21
initial  value 590580.018811 
iter  10 value 95642.426991
iter  20 value 90071.799166
iter  30 value 87425.092603
iter  40 value 84939.194797
iter  50 value 83918.239754
iter  60 value 83306.706156
iter  70 value 82690.336064
iter  80 value 82441.205753
iter  90 value 82430.797369
iter 100 value 82420.260752
iter 110 value 82414.228863
iter 120 value 82401.545424
iter 130 value 82384.224861
iter 140 value 82369.902158
iter 150 value 82360.674764
iter 160 value 82331.241159
iter 170 value 82305.026498
iter 180 value 82281.382230
iter 190 value 82280.377192
iter 200 value 82275.708140
iter 210 value 82265.213823
iter 220 value 82261.426268
final  value 82261.264168 
converged
# weights:  21
initial  value 589190.289691 
iter  10 value 97852.696604
iter  20 value 86921.526848
iter  30 value 84142.414217
iter  40 value 82431.502306
iter  50 value 82147.361346
iter  60 value 82145.292564
iter  70 value 82142.891947
iter  80 value 82054.108030
iter  90 value 81856.882200
iter 100 value 81139.959892
iter 110 value 80949.817195
iter 120 value 80794.866077
iter 130 value 80688.742936
iter 140 value 80670.219268
iter 150 value 80667.164562
iter 160 value 80664.826953
iter 170 value 80662.702762
iter 180 value 80662.031543
iter 190 value 80660.689286
iter 200 value 80659.995936
iter 210 value 80656.661662
iter 220 value 80649.815915
iter 230 value 80649.076932
iter 240 value 80647.962968
final  value 80647.928765 
converged
# weights:  21
initial  value 588869.392431 
iter  10 value 94990.768105
iter  20 value 87785.076956
iter  30 value 86870.824820
iter  40 value 85518.708213
iter  50 value 83684.712835
iter  60 value 83518.337420
iter  70 value 83041.138895
iter  80 value 82982.830316
iter  90 value 82982.341526
iter 100 value 82980.816179
iter 110 value 82950.048166
iter 120 value 82852.388786
iter 130 value 82284.747503
iter 140 value 81739.770352
iter 150 value 81572.855651
iter 160 value 81183.144238
iter 170 value 80605.595051
iter 180 value 80466.593430
iter 190 value 80369.765269
iter 200 value 80313.063626
iter 210 value 80300.064032
iter 220 value 80298.435841
iter 230 value 80298.238131
final  value 80298.212792 
converged
# weights:  21
initial  value 587159.605345 
iter  10 value 98885.976663
iter  20 value 87077.120790
iter  30 value 85044.572721
iter  40 value 83343.978505
iter  50 value 82822.827390
iter  60 value 82764.549253
iter  70 value 82662.129949
iter  80 value 82446.178574
iter  90 value 82332.874544
iter 100 value 82279.409710
iter 110 value 82267.622021
iter 120 value 82198.841747
iter 130 value 82188.897631
iter 140 value 82181.285074
iter 150 value 82155.360760
iter 160 value 82022.017276
iter 170 value 82003.761838
iter 180 value 82001.893840
iter 190 value 82000.754798
final  value 82000.742654 
converged
# weights:  21
initial  value 585381.736422 
iter  10 value 101564.397840
iter  20 value 88873.201472
iter  30 value 88178.759682
iter  40 value 88109.184858
iter  50 value 88104.313864
iter  60 value 88099.337956
iter  70 value 88097.403879
iter  80 value 88087.953811
iter  90 value 88076.612035
iter 100 value 88035.354282
iter 110 value 88024.331392
iter 120 value 88020.908954
iter 130 value 87890.264721
iter 140 value 87396.738864
iter 150 value 87384.963465
iter 160 value 87382.414193
iter 170 value 86896.161119
iter 180 value 86821.106052
iter 190 value 86807.120622
final  value 86806.106602 
converged
# weights:  21
initial  value 588315.276596 
iter  10 value 90169.291692
iter  20 value 86318.619127
iter  30 value 83230.202307
iter  40 value 81821.518820
iter  50 value 81375.517443
iter  60 value 81254.056867
iter  70 value 81174.653617
iter  80 value 81080.208715
iter  90 value 81013.608463
iter 100 value 81008.502139
iter 110 value 80984.209031
iter 120 value 80940.695859
iter 130 value 80869.197217
iter 140 value 80867.729374
iter 150 value 80867.265768
iter 160 value 80866.562798
iter 170 value 80865.052193
final  value 80864.988087 
converged
# weights:  21
initial  value 590011.004796 
iter  10 value 93789.791912
iter  20 value 91138.784890
iter  30 value 88041.273099
iter  40 value 86843.787033
iter  50 value 86533.336526
iter  60 value 85965.205317
iter  70 value 85888.721162
iter  80 value 85886.152550
iter  90 value 85885.477715
iter 100 value 85884.966640
iter 110 value 85884.276662
iter 120 value 85884.084599
final  value 85884.057200 
converged
# weights:  21
initial  value 591996.332804 
iter  10 value 106539.420651
iter  20 value 102284.892620
iter  30 value 95982.772356
iter  40 value 92831.137684
iter  50 value 86481.801192
iter  60 value 83029.695800
iter  70 value 81724.417947
iter  80 value 81304.863104
iter  90 value 80886.367021
iter 100 value 80790.428509
iter 110 value 80775.155223
iter 120 value 80773.290154
iter 130 value 80737.469008
iter 140 value 80388.072231
iter 150 value 79749.309325
iter 160 value 79448.556897
iter 170 value 78716.124249
iter 180 value 78312.694087
iter 190 value 78270.382980
iter 200 value 78256.520988
iter 210 value 78254.698341
iter 220 value 78236.996508
iter 230 value 78129.606076
iter 240 value 78091.568563
iter 250 value 78091.343908
iter 260 value 78088.154499
final  value 78088.138177 
converged
# weights:  21
initial  value 591432.126229 
iter  10 value 99927.315934
iter  20 value 91647.929524
iter  30 value 85173.945370
iter  40 value 83484.660484
iter  50 value 83237.412402
iter  60 value 83221.788574
iter  70 value 83191.070287
iter  80 value 82832.651506
iter  90 value 82474.430302
iter 100 value 82345.480546
iter 110 value 82342.191197
final  value 82342.012532 
converged
# weights:  21
initial  value 587689.030049 
iter  10 value 97129.730081
iter  20 value 88361.313775
iter  30 value 87874.099474
iter  40 value 87720.471279
iter  50 value 86687.805272
iter  60 value 86446.006574
iter  70 value 85478.456028
iter  80 value 84108.204528
iter  90 value 84075.402223
iter 100 value 83628.746949
iter 110 value 83437.300495
iter 120 value 83346.972395
iter 130 value 83258.632838
iter 140 value 82994.318436
iter 150 value 82576.389017
iter 160 value 82377.131935
iter 170 value 82258.523973
iter 180 value 82170.475135
iter 190 value 81755.949542
iter 200 value 81163.182469
iter 210 value 81025.872069
iter 220 value 81006.405963
iter 230 value 80996.968748
final  value 80996.867871 
converged
# weights:  21
initial  value 587584.172195 
iter  10 value 97717.274881
iter  20 value 91111.481823
iter  30 value 90626.864718
iter  40 value 88607.628937
iter  50 value 88165.502841
iter  60 value 88137.672317
iter  70 value 88131.535272
iter  80 value 88130.919547
final  value 88130.863539 
converged
# weights:  21
initial  value 591293.770738 
iter  10 value 92506.006033
iter  20 value 86555.285055
iter  30 value 84242.229393
iter  40 value 83755.995585
iter  50 value 83398.736728
iter  60 value 82896.895935
iter  70 value 82747.227354
iter  80 value 82677.117255
iter  90 value 82649.258765
iter 100 value 82648.494252
iter 110 value 82625.516689
iter 120 value 82604.046253
iter 130 value 82586.321606
iter 140 value 82561.173938
iter 150 value 82556.931275
iter 160 value 82554.077262
iter 170 value 82527.126760
iter 180 value 82218.552491
iter 190 value 81809.876872
iter 200 value 81650.641754
iter 210 value 81647.923951
iter 220 value 81640.335575
iter 230 value 81596.389901
iter 240 value 81389.292281
iter 250 value 81011.612341
iter 260 value 80838.640474
iter 270 value 80824.435219
iter 280 value 80701.888400
iter 290 value 80698.360448
iter 300 value 80696.344217
final  value 80695.867687 
converged
# weights:  21
initial  value 582234.778736 
iter  10 value 97108.546575
iter  20 value 89933.709317
iter  30 value 88917.693632
iter  40 value 88150.418340
iter  50 value 88137.912146
final  value 88137.910328 
converged
# weights:  21
initial  value 586452.950850 
iter  10 value 90027.783871
iter  20 value 88096.880662
iter  30 value 86765.923689
iter  40 value 86389.516398
iter  50 value 86315.397396
iter  60 value 86159.045583
iter  70 value 86130.233670
iter  80 value 86128.455136
final  value 86128.095413 
converged
# weights:  21
initial  value 592990.220606 
iter  10 value 100776.724576
iter  20 value 92962.297670
iter  30 value 88672.033094
iter  40 value 84822.346858
iter  50 value 84567.766287
iter  60 value 83456.750705
iter  70 value 83205.564182
iter  80 value 82813.483447
iter  90 value 82504.045770
iter 100 value 82400.940723
iter 110 value 82247.731091
iter 120 value 82156.334797
iter 130 value 82084.693956
iter 140 value 81860.273203
iter 150 value 81775.406267
iter 160 value 81774.800219
iter 170 value 81774.703676
final  value 81774.686557 
converged
# weights:  21
initial  value 586809.680440 
iter  10 value 94347.848667
iter  20 value 88451.318000
iter  30 value 86141.366828
iter  40 value 84790.063027
iter  50 value 83931.312926
iter  60 value 83653.935561
iter  70 value 83339.086499
iter  80 value 82876.032129
iter  90 value 82564.940777
iter 100 value 82300.840264
iter 110 value 82191.130172
iter 120 value 82103.474978
final  value 82101.128985 
converged
# weights:  21
initial  value 587665.283827 
iter  10 value 99896.801386
iter  20 value 92954.850388
iter  30 value 88991.771444
iter  40 value 88128.395897
iter  50 value 87985.849367
iter  60 value 87023.209518
iter  70 value 87017.846862
iter  80 value 87010.920454
iter  90 value 86966.990662
iter 100 value 86617.919102
iter 110 value 85462.094077
iter 120 value 84878.417508
iter 130 value 84833.499680
iter 140 value 84831.884259
iter 150 value 84829.138773
iter 160 value 84823.410261
iter 170 value 84818.430819
final  value 84818.351850 
converged
# weights:  21
initial  value 586410.178438 
iter  10 value 93910.744339
iter  20 value 86577.782918
iter  30 value 84006.588088
iter  40 value 82435.396245
iter  50 value 81713.412542
iter  60 value 81675.726632
iter  70 value 81629.793065
iter  80 value 81617.141490
iter  90 value 81595.528899
iter 100 value 81586.548552
iter 110 value 81520.039744
iter 120 value 81432.647336
iter 130 value 81333.941815
iter 140 value 81235.494483
iter 150 value 81093.781807
iter 160 value 81056.563813
iter 170 value 81053.388093
iter 180 value 81048.696423
iter 190 value 81047.398259
iter 200 value 81046.978177
iter 200 value 81046.978118
final  value 81046.978118 
converged
# weights:  21
initial  value 590218.075253 
iter  10 value 91518.737572
iter  20 value 86262.996554
iter  30 value 84495.169771
iter  40 value 84256.523534
iter  50 value 84132.469683
iter  60 value 83962.345936
iter  70 value 83533.158781
iter  80 value 83530.108626
iter  90 value 83528.197221
iter 100 value 83501.101497
iter 110 value 83462.069331
iter 120 value 83446.456590
iter 130 value 83413.247031
iter 140 value 83389.207880
iter 150 value 83201.649495
iter 160 value 83107.615216
iter 170 value 83101.389918
iter 180 value 83100.694482
iter 190 value 83100.427280
iter 200 value 83099.784591
iter 210 value 83099.483320
final  value 83099.442943 
converged
# weights:  21
initial  value 587796.846313 
iter  10 value 98079.569509
iter  20 value 91951.109036
iter  30 value 88775.996564
iter  40 value 87656.970993
iter  50 value 87391.855022
iter  60 value 87389.606792
iter  70 value 87380.525369
iter  80 value 87374.778507
iter  90 value 87146.978453
iter 100 value 86149.492413
iter 110 value 86127.033478
iter 120 value 85389.084623
iter 130 value 83905.549614
iter 140 value 83477.232651
iter 150 value 83172.125044
iter 160 value 83156.137224
iter 170 value 83138.266143
iter 180 value 82822.454456
iter 190 value 82772.561424
iter 200 value 82738.914426
iter 210 value 82196.848479
iter 220 value 81951.874063
iter 230 value 81730.850558
iter 240 value 81687.750124
iter 250 value 81386.883379
iter 260 value 81166.710429
iter 270 value 81020.447389
iter 280 value 81009.915268
iter 290 value 80958.222507
iter 300 value 80438.118415
iter 310 value 80223.682729
iter 320 value 80183.339107
iter 330 value 80177.807577
iter 340 value 80175.530487
iter 350 value 80173.962742
iter 360 value 80171.241924
iter 370 value 80169.174097
iter 380 value 80152.375336
iter 390 value 80043.553421
iter 400 value 79830.145277
iter 410 value 79509.972762
iter 420 value 79439.576809
iter 430 value 79184.852903
iter 440 value 79134.866054
iter 450 value 79100.406282
iter 460 value 79097.183929
iter 470 value 79070.787996
iter 480 value 79018.078762
iter 490 value 79011.640407
iter 500 value 79010.937444
iter 510 value 78992.204059
iter 520 value 78942.886290
iter 530 value 78870.822572
iter 540 value 78813.759386
iter 550 value 78790.799667
iter 560 value 78718.869750
iter 570 value 78590.664662
iter 580 value 78532.240664
iter 590 value 78520.218590
iter 600 value 78483.333064
iter 610 value 78437.510297
iter 620 value 78406.912904
iter 630 value 78398.598561
iter 640 value 78385.209815
iter 650 value 78362.966838
iter 660 value 78353.674126
iter 670 value 78351.698106
iter 680 value 78350.001720
iter 690 value 78347.835910
iter 700 value 78343.546513
final  value 78343.360546 
converged
# weights:  21
initial  value 585146.565506 
iter  10 value 95938.451084
iter  20 value 87277.675910
iter  30 value 85097.051667
iter  40 value 84931.534370
iter  50 value 84391.905214
iter  60 value 83975.188437
iter  70 value 83938.524712
iter  80 value 83764.627934
iter  90 value 83764.105666
iter 100 value 83756.048968
iter 110 value 83745.398316
iter 120 value 83736.758698
iter 130 value 83567.279311
iter 140 value 83482.672684
iter 150 value 83453.959275
iter 160 value 83451.197163
iter 170 value 83446.640115
iter 180 value 83442.654469
iter 190 value 83438.575041
final  value 83438.127486 
converged
# weights:  21
initial  value 586959.419396 
iter  10 value 92965.168015
iter  20 value 89928.336986
iter  30 value 88024.508258
iter  40 value 87714.972820
iter  50 value 87576.100921
iter  60 value 86235.550353
iter  70 value 84665.301398
iter  80 value 83943.157846
iter  90 value 83938.221717
iter 100 value 83934.819044
iter 110 value 83913.104931
iter 120 value 83830.718326
iter 130 value 83827.264840
iter 140 value 83770.513279
iter 150 value 83754.356189
iter 160 value 83754.278792
iter 170 value 83751.004090
iter 180 value 83750.427216
final  value 83750.324752 
converged
# weights:  21
initial  value 587465.540241 
iter  10 value 93137.576890
iter  20 value 87503.979645
iter  30 value 85679.231897
iter  40 value 85396.345251
iter  50 value 85328.732550
iter  60 value 85005.805967
iter  70 value 84114.851444
iter  80 value 83203.149475
iter  90 value 83002.423270
iter 100 value 82946.507994
iter 110 value 82939.160886
iter 120 value 82912.869000
iter 130 value 82907.640906
iter 140 value 82308.950284
iter 150 value 82308.463322
final  value 82308.445061 
converged
# weights:  21
initial  value 583378.804892 
iter  10 value 107557.229343
iter  20 value 93844.633236
iter  30 value 86546.565522
iter  40 value 84038.579923
iter  50 value 83732.707708
iter  60 value 83611.149358
iter  70 value 83402.535499
iter  80 value 83376.249992
iter  90 value 83359.705803
iter 100 value 83346.862264
iter 110 value 83328.138014
iter 120 value 83326.957918
iter 130 value 83325.835849
iter 140 value 83324.658458
final  value 83324.090527 
converged
# weights:  21
initial  value 589313.235545 
iter  10 value 93207.300378
iter  20 value 88837.957243
iter  30 value 85263.330111
iter  40 value 84799.745170
iter  50 value 84388.668720
iter  60 value 83426.883811
iter  70 value 83184.660215
iter  80 value 82710.751810
iter  90 value 82570.906468
iter 100 value 81961.792554
iter 110 value 81838.073150
iter 120 value 81811.314714
iter 130 value 81806.817006
iter 140 value 81779.296845
iter 150 value 81776.770308
iter 160 value 81774.866168
iter 170 value 81774.383402
iter 180 value 81772.674943
iter 190 value 81767.657866
iter 200 value 81752.354630
iter 210 value 81742.907468
iter 220 value 81732.630884
iter 230 value 81703.992103
iter 240 value 81687.466412
iter 250 value 81680.326901
iter 260 value 81672.503771
iter 270 value 81662.564880
iter 280 value 81632.984679
iter 290 value 81532.420589
iter 300 value 81465.071969
iter 310 value 81404.567283
iter 320 value 81195.163148
iter 330 value 81151.275729
iter 340 value 81088.938284
iter 350 value 81073.924950
iter 360 value 81038.124760
iter 370 value 81035.719956
iter 380 value 81035.506581
iter 380 value 81035.505882
iter 380 value 81035.505873
final  value 81035.505873 
converged
# weights:  21
initial  value 587618.476759 
iter  10 value 93269.367693
iter  20 value 88594.432805
iter  30 value 86917.723109
iter  40 value 86198.665115
iter  50 value 85732.170473
iter  60 value 85543.451995
iter  70 value 84853.310184
iter  80 value 84655.434039
iter  90 value 84618.179188
iter 100 value 84584.385794
iter 110 value 84582.512904
iter 120 value 84575.188226
iter 130 value 84556.657223
iter 140 value 84549.906568
iter 150 value 84547.945755
iter 160 value 84546.936376
iter 170 value 84530.788744
iter 180 value 83813.427746
iter 190 value 82999.761598
iter 200 value 82414.818525
iter 210 value 82370.617833
iter 220 value 82360.087660
iter 230 value 82358.352888
iter 240 value 82354.602845
iter 250 value 82351.018596
iter 260 value 82344.306666
iter 270 value 82344.023327
iter 280 value 82343.347861
iter 290 value 82341.469116
iter 300 value 82340.823353
iter 310 value 82244.765306
iter 320 value 82217.433597
iter 330 value 82102.122272
iter 340 value 82035.482142
iter 350 value 81999.850475
iter 360 value 81997.202145
iter 370 value 81993.987631
iter 380 value 81993.611436
final  value 81993.513963 
converged
# weights:  21
initial  value 587200.666767 
iter  10 value 95463.486280
iter  20 value 92065.880027
iter  30 value 91188.503732
iter  40 value 89251.534868
iter  50 value 88250.904910
iter  60 value 88240.303356
iter  70 value 88104.343277
iter  80 value 88101.580434
iter  90 value 88100.161740
iter 100 value 88061.657562
iter 110 value 87195.944435
iter 120 value 86729.548893
iter 130 value 86433.601597
iter 140 value 85614.162952
iter 150 value 85040.113761
iter 160 value 85019.200598
iter 170 value 85011.695987
iter 180 value 85003.406425
iter 190 value 85002.924797
iter 200 value 85001.772764
final  value 85001.274111 
converged
# weights:  21
initial  value 592985.914344 
iter  10 value 134592.593082
iter  20 value 98985.425608
iter  30 value 91291.756519
iter  40 value 86644.124216
iter  50 value 85659.123664
iter  60 value 85191.988561
iter  70 value 84795.015340
iter  80 value 84562.791253
iter  90 value 84468.375049
iter 100 value 84391.353913
iter 110 value 84317.008621
iter 120 value 84059.802325
iter 130 value 83790.361003
iter 140 value 82785.048962
iter 150 value 82235.062593
iter 160 value 81976.560506
iter 170 value 81840.153041
iter 180 value 81828.449245
iter 190 value 81823.996016
iter 200 value 81794.992049
iter 210 value 81699.332809
iter 220 value 81643.580181
iter 230 value 81554.876129
iter 240 value 81388.909439
iter 250 value 81334.461303
iter 260 value 81088.759990
iter 270 value 80971.162838
iter 280 value 80464.389295
iter 290 value 80393.931273
iter 300 value 80368.133855
iter 310 value 80346.343781
iter 320 value 80327.151847
iter 330 value 80307.181471
iter 340 value 80275.932307
iter 350 value 79882.421855
iter 360 value 79700.738060
iter 370 value 79681.623227
iter 380 value 79680.994156
iter 390 value 79679.333345
iter 400 value 79678.535047
iter 410 value 79678.487357
iter 410 value 79678.486578
iter 410 value 79678.486578
final  value 79678.486578 
converged
# weights:  21
initial  value 591090.251388 
iter  10 value 93976.355744
iter  20 value 90245.382204
iter  30 value 88115.457686
iter  40 value 86528.601787
iter  50 value 86277.472262
iter  60 value 86035.070500
iter  70 value 85709.994202
iter  80 value 85692.333531
iter  90 value 85690.287436
iter 100 value 85688.186083
iter 110 value 85652.749181
iter 120 value 85563.646214
iter 130 value 85407.125427
iter 140 value 84938.672420
iter 150 value 84917.380712
iter 160 value 84422.339059
iter 170 value 84352.462487
iter 180 value 84348.595111
iter 190 value 84348.452262
final  value 84348.436109 
converged
# weights:  21
initial  value 586033.297858 
iter  10 value 94943.410404
iter  20 value 88616.400535
iter  30 value 87835.551166
iter  40 value 86817.955641
iter  50 value 86389.009460
iter  60 value 85958.642179
iter  70 value 83807.677673
iter  80 value 83369.017643
iter  90 value 83314.850712
iter 100 value 83312.995070
iter 110 value 83309.915115
iter 120 value 83293.003659
iter 130 value 83178.452404
iter 140 value 82660.148270
iter 150 value 82430.345713
iter 160 value 82132.086253
iter 170 value 82013.248862
iter 180 value 81856.931874
iter 190 value 81629.528371
iter 200 value 81044.079646
iter 210 value 80877.685820
iter 220 value 80862.565246
iter 230 value 80719.544661
iter 240 value 80697.281753
iter 250 value 80695.210378
final  value 80694.058378 
converged
# weights:  21
initial  value 589169.064842 
iter  10 value 93914.527495
iter  20 value 88085.959750
iter  30 value 84400.307859
iter  40 value 83398.145094
iter  50 value 83250.866463
iter  60 value 83028.905938
iter  70 value 82907.998874
iter  80 value 82815.260037
iter  90 value 82614.422105
iter 100 value 82489.851238
iter 110 value 82469.694590
iter 120 value 82467.405475
iter 130 value 82466.184494
iter 140 value 82463.416069
iter 150 value 82459.533565
iter 160 value 82458.734304
iter 170 value 82457.049181
iter 180 value 82452.326987
iter 190 value 82451.803818
final  value 82451.631037 
converged
# weights:  21
initial  value 587288.046259 
iter  10 value 104257.745097
iter  20 value 102500.225226
iter  30 value 102491.240243
iter  40 value 102173.539428
iter  50 value 90842.908312
iter  60 value 89630.487057
iter  70 value 88218.621451
iter  80 value 88138.088967
iter  90 value 88137.477284
iter 100 value 88117.546715
iter 110 value 87913.949475
iter 120 value 86922.422037
iter 130 value 84195.863375
iter 140 value 84140.564966
iter 150 value 84132.019299
iter 160 value 83887.338996
iter 170 value 83809.749851
iter 180 value 83802.336119
iter 190 value 83797.444790
iter 200 value 83716.637202
iter 210 value 83497.233496
iter 220 value 82994.663300
iter 230 value 82424.347745
iter 240 value 82252.438826
iter 250 value 82216.850745
iter 260 value 82213.977533
iter 270 value 82209.641597
iter 280 value 82209.133308
iter 290 value 82207.881892
iter 300 value 82198.688314
iter 310 value 82155.447671
iter 320 value 81901.685269
iter 330 value 81767.044921
iter 340 value 81750.852501
iter 350 value 81676.091128
iter 360 value 81377.494552
iter 370 value 81309.399489
iter 380 value 81298.251138
iter 390 value 81294.978092
iter 400 value 81290.845796
iter 410 value 81280.137496
iter 420 value 81240.286381
iter 430 value 80828.403546
iter 440 value 79865.919656
iter 450 value 79413.439390
iter 460 value 79270.847226
iter 470 value 79004.059951
iter 480 value 78954.893426
iter 490 value 78943.599886
iter 500 value 78943.188969
iter 510 value 78942.591382
iter 520 value 78941.151738
iter 530 value 78940.131883
final  value 78940.122507 
converged
# weights:  21
initial  value 587052.923626 
iter  10 value 98256.139515
iter  20 value 89474.999326
iter  30 value 82611.530944
iter  40 value 81657.608874
iter  50 value 81335.289958
iter  60 value 81139.106137
iter  70 value 80837.840756
iter  80 value 80673.043601
iter  90 value 80664.412349
iter 100 value 80661.790104
iter 110 value 80550.243987
iter 120 value 80349.022299
iter 130 value 80269.847362
iter 140 value 80249.602179
iter 150 value 80241.275430
iter 160 value 80233.587190
iter 170 value 80229.751716
iter 180 value 80229.659368
iter 190 value 80229.205506
iter 200 value 80221.105900
iter 210 value 79879.452885
iter 220 value 79606.882367
iter 230 value 79513.352005
iter 240 value 79485.678794
iter 250 value 79443.145747
iter 260 value 79438.297078
iter 270 value 79437.513458
final  value 79437.495559 
converged
# weights:  21
initial  value 588047.953417 
iter  10 value 98021.364716
iter  20 value 88338.499969
iter  30 value 87536.009156
iter  40 value 87527.796279
iter  50 value 87518.701504
iter  60 value 87474.103806
iter  70 value 87362.941256
iter  80 value 87338.433967
final  value 87337.532686 
converged
# weights:  21
initial  value 594124.465144 
iter  10 value 168897.310195
iter  20 value 113401.402255
iter  30 value 92642.867326
iter  40 value 87977.916126
iter  50 value 86347.730095
iter  60 value 85779.946780
iter  70 value 84770.468242
iter  80 value 83792.990421
iter  90 value 83093.549929
iter 100 value 82977.588275
iter 110 value 82854.333401
iter 120 value 82721.216241
iter 130 value 82506.303217
iter 140 value 82449.500184
iter 150 value 82432.976019
iter 160 value 82425.805468
iter 170 value 82374.956082
iter 180 value 82078.319809
iter 190 value 81215.452759
iter 200 value 81128.199684
iter 210 value 81117.346181
iter 220 value 81116.651055
iter 230 value 81114.971935
iter 240 value 81114.023114
final  value 81113.767657 
converged
# weights:  21
initial  value 589540.457122 
iter  10 value 91166.639073
iter  20 value 86681.988220
iter  30 value 83426.516048
iter  40 value 82505.471273
iter  50 value 81965.472548
iter  60 value 81393.825150
iter  70 value 79964.857608
iter  80 value 79714.107592
iter  90 value 79598.036486
iter 100 value 79395.298176
iter 110 value 79355.890886
iter 120 value 79189.165271
iter 130 value 79080.511557
iter 140 value 78985.293390
iter 150 value 78973.480056
iter 160 value 78923.058242
iter 170 value 78877.017430
iter 180 value 78833.011326
iter 190 value 78815.188814
iter 200 value 78808.166969
iter 210 value 78757.539398
iter 220 value 78747.285525
iter 230 value 78692.947840
iter 240 value 78648.946079
iter 250 value 78646.078190
iter 260 value 78645.575937
iter 270 value 78628.781494
iter 280 value 78619.091920
iter 290 value 78613.638201
final  value 78613.233485 
converged
# weights:  21
initial  value 589136.541798 
iter  10 value 95950.366897
iter  20 value 87980.744387
iter  30 value 87405.638510
iter  40 value 86965.179202
iter  50 value 86317.229680
iter  60 value 85365.878437
iter  70 value 84152.368479
iter  80 value 83220.629539
iter  90 value 82703.070494
iter 100 value 82674.668453
iter 110 value 82673.928253
iter 120 value 82623.915847
iter 130 value 82322.166068
iter 140 value 82058.858792
iter 150 value 82038.441755
iter 160 value 82009.027992
iter 170 value 81969.546956
iter 180 value 81742.972910
iter 190 value 81543.497674
iter 200 value 81513.687049
iter 210 value 81495.597781
iter 220 value 81443.768974
iter 230 value 81427.548402
iter 240 value 81418.421144
iter 250 value 81413.421804
iter 260 value 81410.476361
iter 270 value 81409.090988
iter 280 value 81407.968834
iter 290 value 81407.391972
iter 300 value 81404.694980
iter 310 value 81403.771298
final  value 81403.719731 
converged
# weights:  21
initial  value 586338.559793 
iter  10 value 116822.455183
iter  20 value 98167.462805
iter  30 value 90787.236413
iter  40 value 90176.190969
iter  50 value 89155.380748
iter  60 value 88290.401811
iter  70 value 88209.953852
iter  80 value 88159.270064
iter  90 value 88144.403632
iter 100 value 88082.802575
iter 110 value 87442.238404
iter 120 value 86728.604731
iter 130 value 86303.126619
iter 140 value 86229.951673
iter 150 value 86000.000898
iter 160 value 85954.717437
iter 170 value 85947.962239
iter 180 value 85944.808394
iter 190 value 85942.375970
iter 200 value 85937.280443
iter 210 value 85936.522468
final  value 85935.482514 
converged
# weights:  21
initial  value 587856.710838 
iter  10 value 94188.255931
iter  20 value 89461.375557
iter  30 value 87376.307995
iter  40 value 86481.665190
iter  50 value 86354.135656
iter  60 value 86292.822610
iter  70 value 86049.679736
iter  80 value 86047.215124
final  value 86047.159831 
converged
> 
> plot.nnet <- function(mod.in,nid=T,all.out=T,all.in=T,bias=T,wts.only=F,rel.rsc=5,circle.cex=5,
+                     node.labs=T,var.labs=T,x.lab=NULL,y.lab=NULL,line.stag=NULL,struct=NULL,cex.val=1,
+                     alpha.val=1,circle.col='lightblue',pos.col='black',neg.col='grey', max.sp = F, ...){
+   
+   require(scales) 
+   
+   #sanity checks
+   if('mlp' %in% class(mod.in)) warning('Bias layer not applicable for rsnns object')
+   if('numeric' %in% class(mod.in)){
+     if(is.null(struct)) stop('Three-element vector required for struct')
+     if(length(mod.in) != ((struct[1]*struct[2]+struct[2]*struct[3])+(struct[3]+struct[2])))
+       stop('Incorrect length of weight matrix for given network structure')
+   }
+   if('train' %in% class(mod.in)){
+     if('nnet' %in% class(mod.in$finalModel)){
+       mod.in<-mod.in$finalModel
+       warning('Using best nnet model from train output')
+     }
+     else stop('Only nnet method can be used with train object')
+   }
+   
+   #gets weights for neural network, output is list
+   #if rescaled argument is true, weights are returned but rescaled based on abs value
+   nnet.vals<-function(mod.in,nid,rel.rsc,struct.out=struct){
+     
+     require(scales)
+     require(reshape)
+     
+     if('numeric' %in% class(mod.in)){
+       struct.out<-struct
+       wts<-mod.in
+     }
+     
+     #neuralnet package
+     if('nn' %in% class(mod.in)){
+       struct.out<-unlist(lapply(mod.in$weights[[1]],ncol))
+     	struct.out<-struct.out[-length(struct.out)]
+     	struct.out<-c(
+     		length(mod.in$model.list$variables),
+     		struct.out,
+     		length(mod.in$model.list$response)
+     		)    		
+       wts<-unlist(mod.in$weights[[1]])   
+     }
+     
+     #nnet package
+     if('nnet' %in% class(mod.in)){
+       struct.out<-mod.in$n
+       wts<-mod.in$wts
+     }
+     
+     #RSNNS package
+     if('mlp' %in% class(mod.in)){
+       struct.out<-c(mod.in$nInputs,mod.in$archParams$size,mod.in$nOutputs)
+       hid.num<-length(struct.out)-2
+       wts<-mod.in$snnsObject$getCompleteWeightMatrix()
+       
+       #get all input-hidden and hidden-hidden wts
+       inps<-wts[grep('Input',row.names(wts)),grep('Hidden_2',colnames(wts)),drop=F]
+       inps<-melt(rbind(rep(NA,ncol(inps)),inps))$value
+       uni.hids<-paste0('Hidden_',1+seq(1,hid.num))
+       for(i in 1:length(uni.hids)){
+         if(is.na(uni.hids[i+1])) break
+         tmp<-wts[grep(uni.hids[i],rownames(wts)),grep(uni.hids[i+1],colnames(wts)),drop=F]
+         inps<-c(inps,melt(rbind(rep(NA,ncol(tmp)),tmp))$value)
+         }
+       
+       #get connections from last hidden to output layers
+       outs<-wts[grep(paste0('Hidden_',hid.num+1),row.names(wts)),grep('Output',colnames(wts)),drop=F]
+       outs<-rbind(rep(NA,ncol(outs)),outs)
+       
+       #weight vector for all
+       wts<-c(inps,melt(outs)$value)
+       assign('bias',F,envir=environment(nnet.vals))
+       }
+     
+     if(nid) wts<-rescale(abs(wts),c(1,rel.rsc))
+     
+     #convert wts to list with appropriate names 
+     hid.struct<-struct.out[-c(length(struct.out))]
+     row.nms<-NULL
+     for(i in 1:length(hid.struct)){
+       if(is.na(hid.struct[i+1])) break
+       row.nms<-c(row.nms,rep(paste('hidden',i,seq(1:hid.struct[i+1])),each=1+hid.struct[i]))
+     }
+     row.nms<-c(
+       row.nms,
+       rep(paste('out',seq(1:struct.out[length(struct.out)])),each=1+struct.out[length(struct.out)-1])
+       )
+     out.ls<-data.frame(wts,row.nms)
+     out.ls$row.nms<-factor(row.nms,levels=unique(row.nms),labels=unique(row.nms))
+     out.ls<-split(out.ls$wts,f=out.ls$row.nms)
+     
+     assign('struct',struct.out,envir=environment(nnet.vals))
+     
+     out.ls
+     
+     }
+   
+   wts<-nnet.vals(mod.in,nid=F)
+   
+   if(wts.only) return(wts)
+   
+   #circle colors for input, if desired, must be two-vector list, first vector is for input layer
+   if(is.list(circle.col)){
+                     circle.col.inp<-circle.col[[1]]
+                     circle.col<-circle.col[[2]]
+                     }
+   else circle.col.inp<-circle.col
+   
+   #initiate plotting
+   x.range<-c(0,100)
+   y.range<-c(0,100)
+   #these are all proportions from 0-1
+   if(is.null(line.stag)) line.stag<-0.011*circle.cex/2
+   layer.x<-seq(0.17,0.9,length=length(struct))
+   bias.x<-layer.x[-length(layer.x)]+diff(layer.x)/2
+   bias.y<-0.95
+   circle.cex<-circle.cex
+   
+   #get variable names from mod.in object
+   #change to user input if supplied
+   if('numeric' %in% class(mod.in)){
+     x.names<-paste0(rep('X',struct[1]),seq(1:struct[1]))
+     y.names<-paste0(rep('Y',struct[3]),seq(1:struct[3]))
+   }
+   if('mlp' %in% class(mod.in)){
+     all.names<-mod.in$snnsObject$getUnitDefinitions()
+     x.names<-all.names[grep('Input',all.names$unitName),'unitName']
+     y.names<-all.names[grep('Output',all.names$unitName),'unitName']
+   }
+   if('nn' %in% class(mod.in)){
+     x.names<-mod.in$model.list$variables
+     y.names<-mod.in$model.list$respons
+   }
+   if('xNames' %in% names(mod.in)){
+     x.names<-mod.in$xNames
+     y.names<-attr(terms(mod.in),'factor')
+     y.names<-row.names(y.names)[!row.names(y.names) %in% x.names]
+   }
+   if(!'xNames' %in% names(mod.in) & 'nnet' %in% class(mod.in)){
+     if(is.null(mod.in$call$formula)){
+       x.names<-colnames(eval(mod.in$call$x))
+       y.names<-colnames(eval(mod.in$call$y))
+     }
+     else{
+       forms<-eval(mod.in$call$formula)
+       x.names<-mod.in$coefnames
+       facts<-attr(terms(mod.in),'factors')
+       y.check<-mod.in$fitted
+       if(ncol(y.check)>1) y.names<-colnames(y.check)
+       else y.names<-as.character(forms)[2]
+     } 
+   }
+   #change variables names to user sub 
+   if(!is.null(x.lab)){
+     if(length(x.names) != length(x.lab)) stop('x.lab length not equal to number of input variables')
+     else x.names<-x.lab
+   }
+   if(!is.null(y.lab)){
+     if(length(y.names) != length(y.lab)) stop('y.lab length not equal to number of output variables')
+     else y.names<-y.lab
+   }
+   
+   #initiate plot
+   plot(x.range,y.range,type='n',axes=F,ylab='',xlab='',...)
+   
+   #function for getting y locations for input, hidden, output layers
+   #input is integer value from 'struct'
+   get.ys<-function(lyr, max_space = max.sp){
+   	if(max_space){ 
+   		spacing <- diff(c(0*diff(y.range),0.9*diff(y.range)))/lyr
+    	} else {
+     	spacing<-diff(c(0*diff(y.range),0.9*diff(y.range)))/max(struct)
+    	}
+     
+   		seq(0.5*(diff(y.range)+spacing*(lyr-1)),0.5*(diff(y.range)-spacing*(lyr-1)),
+         length=lyr)
+   }
+   
+   #function for plotting nodes
+   #'layer' specifies which layer, integer from 'struct'
+   #'x.loc' indicates x location for layer, integer from 'layer.x'
+   #'layer.name' is string indicating text to put in node
+   layer.points<-function(layer,x.loc,layer.name,cex=cex.val){
+     x<-rep(x.loc*diff(x.range),layer)
+     y<-get.ys(layer)
+     points(x,y,pch=21,cex=circle.cex,col=in.col,bg=bord.col)
+     if(node.labs) text(x,y,paste(layer.name,1:layer,sep=''),cex=cex.val)
+     if(layer.name=='I' & var.labs) text(x-line.stag*diff(x.range),y,x.names,pos=2,cex=cex.val)      
+     if(layer.name=='O' & var.labs) text(x+line.stag*diff(x.range),y,y.names,pos=4,cex=cex.val)
+   }
+   
+   #function for plotting bias points
+   #'bias.x' is vector of values for x locations
+   #'bias.y' is vector for y location
+   #'layer.name' is  string indicating text to put in node
+   bias.points<-function(bias.x,bias.y,layer.name,cex,...){
+     for(val in 1:length(bias.x)){
+       points(
+         diff(x.range)*bias.x[val],
+         bias.y*diff(y.range),
+         pch=21,col=in.col,bg=bord.col,cex=circle.cex
+       )
+       if(node.labs)
+         text(
+           diff(x.range)*bias.x[val],
+           bias.y*diff(y.range),
+           paste(layer.name,val,sep=''),
+           cex=cex.val
+         )
+     }
+   }
+   
+   #function creates lines colored by direction and width as proportion of magnitude
+   #use 'all.in' argument if you want to plot connection lines for only a single input node
+   layer.lines<-function(mod.in,h.layer,layer1=1,layer2=2,out.layer=F,nid,rel.rsc,all.in,pos.col,
+                         neg.col,...){
+     
+     x0<-rep(layer.x[layer1]*diff(x.range)+line.stag*diff(x.range),struct[layer1])
+     x1<-rep(layer.x[layer2]*diff(x.range)-line.stag*diff(x.range),struct[layer1])
+     
+     if(out.layer==T){
+       
+       y0<-get.ys(struct[layer1])
+       y1<-rep(get.ys(struct[layer2])[h.layer],struct[layer1])
+       src.str<-paste('out',h.layer)
+       
+       wts<-nnet.vals(mod.in,nid=F,rel.rsc)
+       wts<-wts[grep(src.str,names(wts))][[1]][-1]
+       wts.rs<-nnet.vals(mod.in,nid=T,rel.rsc)
+       wts.rs<-wts.rs[grep(src.str,names(wts.rs))][[1]][-1]
+       
+       cols<-rep(pos.col,struct[layer1])
+       cols[wts<0]<-neg.col
+       
+       if(nid) segments(x0,y0,x1,y1,col=cols,lwd=wts.rs)
+       else segments(x0,y0,x1,y1)
+       
+     }
+     
+     else{
+       
+       if(is.logical(all.in)) all.in<-h.layer
+       else all.in<-which(x.names==all.in)
+       
+       y0<-rep(get.ys(struct[layer1])[all.in],struct[2])
+       y1<-get.ys(struct[layer2])
+       src.str<-paste('hidden',layer1)
+       
+       wts<-nnet.vals(mod.in,nid=F,rel.rsc)
+       wts<-unlist(lapply(wts[grep(src.str,names(wts))],function(x) x[all.in+1]))
+       wts.rs<-nnet.vals(mod.in,nid=T,rel.rsc)
+       wts.rs<-unlist(lapply(wts.rs[grep(src.str,names(wts.rs))],function(x) x[all.in+1]))
+       
+       cols<-rep(pos.col,struct[layer2])
+       cols[wts<0]<-neg.col
+       
+       if(nid) segments(x0,y0,x1,y1,col=cols,lwd=wts.rs)
+       else segments(x0,y0,x1,y1)
+       
+     }
+     
+   }
+   
+   bias.lines<-function(bias.x,mod.in,nid,rel.rsc,all.out,pos.col,neg.col,...){
+     
+     if(is.logical(all.out)) all.out<-1:struct[length(struct)]
+     else all.out<-which(y.names==all.out)
+     
+     for(val in 1:length(bias.x)){
+       
+       wts<-nnet.vals(mod.in,nid=F,rel.rsc)
+       wts.rs<-nnet.vals(mod.in,nid=T,rel.rsc)
+       
+     	if(val != length(bias.x)){
+         wts<-wts[grep('out',names(wts),invert=T)]
+         wts.rs<-wts.rs[grep('out',names(wts.rs),invert=T)]
+     		sel.val<-grep(val,substr(names(wts.rs),8,8))
+     		wts<-wts[sel.val]
+     		wts.rs<-wts.rs[sel.val]
+     		}
+     
+     	else{
+         wts<-wts[grep('out',names(wts))]
+         wts.rs<-wts.rs[grep('out',names(wts.rs))]
+       	}
+       
+       cols<-rep(pos.col,length(wts))
+       cols[unlist(lapply(wts,function(x) x[1]))<0]<-neg.col
+       wts.rs<-unlist(lapply(wts.rs,function(x) x[1]))
+       
+       if(nid==F){
+         wts.rs<-rep(1,struct[val+1])
+         cols<-rep('black',struct[val+1])
+       }
+       
+       if(val != length(bias.x)){
+         segments(
+           rep(diff(x.range)*bias.x[val]+diff(x.range)*line.stag,struct[val+1]),
+           rep(bias.y*diff(y.range),struct[val+1]),
+           rep(diff(x.range)*layer.x[val+1]-diff(x.range)*line.stag,struct[val+1]),
+           get.ys(struct[val+1]),
+           lwd=wts.rs,
+           col=cols
+         )
+       }
+       
+       else{
+         segments(
+           rep(diff(x.range)*bias.x[val]+diff(x.range)*line.stag,struct[val+1]),
+           rep(bias.y*diff(y.range),struct[val+1]),
+           rep(diff(x.range)*layer.x[val+1]-diff(x.range)*line.stag,struct[val+1]),
+           get.ys(struct[val+1])[all.out],
+           lwd=wts.rs[all.out],
+           col=cols[all.out]
+         )
+       }
+       
+     }
+   }
+   
+   #use functions to plot connections between layers
+   #bias lines
+   if(bias) bias.lines(bias.x,mod.in,nid=nid,rel.rsc=rel.rsc,all.out=all.out,pos.col=alpha(pos.col,alpha.val),
+                       neg.col=alpha(neg.col,alpha.val))
+   
+   #layer lines, makes use of arguments to plot all or for individual layers
+   #starts with input-hidden
+   #uses 'all.in' argument to plot connection lines for all input nodes or a single node
+   if(is.logical(all.in)){  
+     mapply(
+       function(x) layer.lines(mod.in,x,layer1=1,layer2=2,nid=nid,rel.rsc=rel.rsc,
+         all.in=all.in,pos.col=alpha(pos.col,alpha.val),neg.col=alpha(neg.col,alpha.val)),
+       1:struct[1]
+     )
+   }
+   else{
+     node.in<-which(x.names==all.in)
+     layer.lines(mod.in,node.in,layer1=1,layer2=2,nid=nid,rel.rsc=rel.rsc,all.in=all.in,
+                 pos.col=alpha(pos.col,alpha.val),neg.col=alpha(neg.col,alpha.val))
+   }
+   #connections between hidden layers
+   lays<-split(c(1,rep(2:(length(struct)-1),each=2),length(struct)),
+               f=rep(1:(length(struct)-1),each=2))
+   lays<-lays[-c(1,(length(struct)-1))]
+   for(lay in lays){
+     for(node in 1:struct[lay[1]]){
+       layer.lines(mod.in,node,layer1=lay[1],layer2=lay[2],nid=nid,rel.rsc=rel.rsc,all.in=T,
+                   pos.col=alpha(pos.col,alpha.val),neg.col=alpha(neg.col,alpha.val))
+     }
+   }
+   #lines for hidden-output
+   #uses 'all.out' argument to plot connection lines for all output nodes or a single node
+   if(is.logical(all.out))
+     mapply(
+       function(x) layer.lines(mod.in,x,layer1=length(struct)-1,layer2=length(struct),out.layer=T,nid=nid,rel.rsc=rel.rsc,
+                               all.in=all.in,pos.col=alpha(pos.col,alpha.val),neg.col=alpha(neg.col,alpha.val)),
+       1:struct[length(struct)]
+       )
+   else{
+     node.in<-which(y.names==all.out)
+     layer.lines(mod.in,node.in,layer1=length(struct)-1,layer2=length(struct),out.layer=T,nid=nid,rel.rsc=rel.rsc,
+                 pos.col=pos.col,neg.col=neg.col,all.out=all.out)
+   }
+   
+   #use functions to plot nodes
+   for(i in 1:length(struct)){
+     in.col<-bord.col<-circle.col
+     layer.name<-'H'
+     if(i==1) { layer.name<-'I'; in.col<-bord.col<-circle.col.inp}
+     if(i==length(struct)) layer.name<-'O'
+     layer.points(struct[i],layer.x[i],layer.name)
+     }
+ 
+   if(bias) bias.points(bias.x,bias.y,'B')
+   
+ }
> 
> library(devtools)
Loading required package: usethis
Warning messages:
1: package ‘devtools’ was built under R version 3.6.2 
2: package ‘usethis’ was built under R version 3.6.2 
> library(reshape2)
Warning message:
package ‘reshape2’ was built under R version 3.6.2 
> plot.nnet(final.age.ann)
Loading required package: scales
Loading required package: reshape

Attaching package: ‘reshape’

The following objects are masked from ‘package:reshape2’:

    colsplit, melt, recast

Warning message:
package ‘scales’ was built under R version 3.6.2 
> 
> print(paste("sum_of_errors:",sum(abs(final.age.ann.p - age.data.test$Age))))
[1] "sum_of_errors: 1527.95800124557"
> print(paste("average_errors:",sum(abs(final.age.ann.p - age.data.test$Age))/178))
[1] "average_errors: 8.58403371486276"
> 
> NAindex <- which(is.na(data$Age))
> age.NA.data <- data[NAindex,]
> age.NA.solved <- predict(final.age.ann, newdata=age.NA.data)
> for (i in 1:177){
+   data$Age[NAindex[i]] <- age.NA.solved[i]
+ }
> 
> summary(data)
    Survived          Pclass          Sex           Age            SibSp       
 Min.   :0.0000   Min.   :1.000   female:312   Min.   : 0.42   Min.   :0.0000  
 1st Qu.:0.0000   1st Qu.:2.000   male  :577   1st Qu.:21.00   1st Qu.:0.0000  
 Median :0.0000   Median :3.000                Median :28.15   Median :0.0000  
 Mean   :0.3825   Mean   :2.312                Mean   :29.46   Mean   :0.5242  
 3rd Qu.:1.0000   3rd Qu.:3.000                3rd Qu.:36.50   3rd Qu.:1.0000  
 Max.   :1.0000   Max.   :3.000                Max.   :80.00   Max.   :8.0000  
     Parch             Fare         Embarked    FamSize       
 Min.   :0.0000   Min.   :  0.000   C:168    Min.   : 0.0000  
 1st Qu.:0.0000   1st Qu.:  7.896   Q: 77    1st Qu.: 0.0000  
 Median :0.0000   Median : 14.454   S:644    Median : 0.0000  
 Mean   :0.3825   Mean   : 32.097            Mean   : 0.9066  
 3rd Qu.:0.0000   3rd Qu.: 31.000            3rd Qu.: 1.0000  
 Max.   :6.0000   Max.   :512.329            Max.   :10.0000  
> 
> proc.time()
   user  system elapsed 
  4.560   0.147   4.778 
