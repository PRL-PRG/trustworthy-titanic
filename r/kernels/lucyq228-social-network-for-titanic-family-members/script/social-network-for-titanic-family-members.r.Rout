
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> library(igraph)

Attaching package: ‘igraph’

The following objects are masked from ‘package:dplyr’:

    as_data_frame, groups, union

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> 
> #read data
> train <- read.csv("../input/train.csv")
> test <- read.csv("../input/test.csv")
> 
> train$cat <- "train"
> test$cat <- "test"
> 
> #assign avg. survival rate from training set to test set 
> test$Survived <- round(sum(train$Survived)/nrow(train),2)
> dat_all <- rbind(train, test)
> 
> #data cleaning and missing value imputation (very simple approach)
> dat_all[is.na(dat_all$Age)==TRUE,"Age"] <- mean(dat_all$Age, na.rm=TRUE)
> #assign missing Embarked to "S" (majority values)
> dat_all[dat_all$Embarked=='', "Embarked"] <- "S"
> 
> head(dat_all,2)
  PassengerId Survived Pclass
1           1        0      3
2           2        1      1
                                                 Name    Sex Age SibSp Parch
1                             Braund, Mr. Owen Harris   male  22     1     0
2 Cumings, Mrs. John Bradley (Florence Briggs Thayer) female  38     1     0
     Ticket    Fare Cabin Embarked   cat
1 A/5 21171  7.2500              S train
2  PC 17599 71.2833   C85        C train
> 
> arrange(dat_all[dat_all$Ticket %in% c("2666", "230136"),
+                 names(dat_all)%in%c("PassengerId", "Ticket", "Survived", "Name","cat")],Ticket)
  PassengerId Survived                                             Name Ticket
1         184     1.00                        Becker, Master. Richard F 230136
2         619     1.00                      Becker, Miss. Marion Louise 230136
3        1070     0.38 Becker, Mrs. Allen Oliver (Nellie E Baumgardner) 230136
4        1218     0.38                     Becker, Miss. Ruth Elizabeth 230136
5         449     1.00                   Baclini, Miss. Marie Catherine   2666
6         470     1.00                    Baclini, Miss. Helene Barbara   2666
7         645     1.00                           Baclini, Miss. Eugenie   2666
8         859     1.00            Baclini, Mrs. Solomon (Latifa Qurban)   2666
    cat
1 train
2 train
3  test
4  test
5 train
6 train
7 train
8 train
> 
> 
> #create with_fam variable based on if Ticket was shown more than once. 
> 
> ticket_freq <- as.data.frame(table(dat_all$Ticket))
> ticket_freq$with_fam <- ifelse(ticket_freq$Freq >1, 1, 0)
> colnames(ticket_freq)[1] <- "Ticket"
> 
> dat_all <- merge(dat_all, ticket_freq[, c(1,3)], by="Ticket", all.x = TRUE)
> 
> arrange(dat_all[dat_all$Ticket %in% c("2666", "110564"),
+                 names(dat_all)%in%c("PassengerId", "Ticket", "Name","cat", "with_fam")],Ticket)
  Ticket PassengerId                                      Name   cat with_fam
1 110564         431 Bjornstrom-Steffansson, Mr. Mauritz Hakan train        0
2   2666         449            Baclini, Miss. Marie Catherine train        1
3   2666         859     Baclini, Mrs. Solomon (Latifa Qurban) train        1
4   2666         470             Baclini, Miss. Helene Barbara train        1
5   2666         645                    Baclini, Miss. Eugenie train        1
> 
> 
> #second var: famimly member survival rate
> #first pick one ticket, then based on ticket, pick passengers that associated based on ticket
> #one by one to calculate their survival rate
> relative <- data.frame()
> for (j in (1:nrow(ticket_freq))){
+   test_member <- dat_all[dat_all$Ticket==ticket_freq[j,1] ,]
+   
+   for (i in (1:nrow(test_member))){
+     if (nrow(test_member) == 0) {
+       relative2 <- data.frame(dat_all[dat_all$Ticket==ticket_freq[j,1], "PassengerId"], 
+                               ticket_freq[j,"Ticket"], NaN) #have no relative
+       colnames(relative2) <- c("test_member.i...PassengerId..", "test_member.i...Ticket..", "survive")
+     } 
+     else {#have relative
+       sub <- subset(test_member, !(test_member$PassengerId %in% test_member$PassengerId[i]))
+       survive <- sum(sub[, "Survived"]) / nrow(sub)
+       relative2 <- data.frame(test_member[i,"PassengerId"], test_member[i,"Ticket"],survive)
+       
+     }
+     relative <- rbind(relative, relative2)
+   }
+ }
> 
> colnames(relative) <- c("PassengerId", "Ticket", "FM_Survive")
> 
> #merge back with dat_all
> dat_all <- merge(dat_all, relative[,c(1,3)], by="PassengerId", all.x = TRUE)
> 
> #deal with NaN for single passengers in test dataset. 
> #Assign general single survival rate based on training
> single_survive <-
+   sum(dat_all[dat_all$with_fam==0 & dat_all$cat=="train", "Survived"])/
+   length(dat_all[dat_all$with_fam==0 & dat_all$cat=="train", "Survived"])
> 
> dat_all[dat_all$with_fam==0, "FM_Survive"] <- single_survive
> 
> arrange(dat_all[dat_all$Ticket %in% c("2666", "230136"),
+                 names(dat_all)%in%c("PassengerId", "Ticket", "Survived", "Name","cat", "with_fam",
+                                     "FM_Survive")],Ticket)
  PassengerId Ticket Survived                                             Name
1         184 230136     1.00                        Becker, Master. Richard F
2         619 230136     1.00                      Becker, Miss. Marion Louise
3        1070 230136     0.38 Becker, Mrs. Allen Oliver (Nellie E Baumgardner)
4        1218 230136     0.38                     Becker, Miss. Ruth Elizabeth
5         449   2666     1.00                   Baclini, Miss. Marie Catherine
6         470   2666     1.00                    Baclini, Miss. Helene Barbara
7         645   2666     1.00                           Baclini, Miss. Eugenie
8         859   2666     1.00            Baclini, Mrs. Solomon (Latifa Qurban)
    cat with_fam FM_Survive
1 train        1  0.5866667
2 train        1  0.5866667
3  test        1  0.7933333
4  test        1  0.7933333
5 train        1  1.0000000
6 train        1  1.0000000
7 train        1  1.0000000
8 train        1  1.0000000
> 
> set.seed(111)
> 
> #random select 10 ticket number based on each family size (ticket frequency)
> ran_ticket <- ticket_freq %>% group_by(Freq) %>% sample_n(10, replace=TRUE)
> ran_ticket <- unique(ran_ticket$Ticket)
> 
> network <- dat_all[dat_all$Ticket%in%ran_ticket,
+                    names(dat_all)%in%c("PassengerId", "Ticket", "Survived", "cat", "FM_Survive")]
> 
> 
> #transform dataset to igraph format ("from", "to")
> member <- data.frame()
> for (g in (1: length(unique(network$Ticket)))){
+   FM <- network[network$Ticket==unique(network$Ticket)[g],"PassengerId"]
+ 
+   for (k in (1:length(FM))){
+     member2 <- data.frame(FM[1],FM[k])
+     member <- rbind(member, member2)
+   }
+ }
> 
> colnames(member) <- c("from", "to")
> member <- member[member$from!=member$to,] #remove "from" "to" same value row #data
> nodes <- network[,c("PassengerId", "Survived")] #serve as data description
> 
> #transform "survived" into categorical data.Survived=3, unknown=2, deceased=1
> nodes$Survived <- ifelse(nodes$Survived==1,3,
+                 ifelse(nodes$Survived==0,1,2)) 
> 
> #graph
> net <- graph_from_data_frame(d=member, vertices = nodes, directed = T)
> 
> plot(net, edge.arrow.size=.1,
+      vertex.color=c("gray50", "gold","green")[V(net)$Survived],
+      vertex.size=10, vertex.label.cex=0.8)
> 
> 
> train <- dat_all[dat_all$cat=="train",]
> test <- dat_all[dat_all$cat=="test",]
> 
> library(caret)
Loading required package: lattice
Loading required package: ggplot2
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> set.seed(111)
> part <- createDataPartition(train$Survived, p=0.8, list = FALSE)
> ttrain <- train[part,!names(train)=="cat"]
> ttest <- train[-part,!names(train)=="cat"]
> 
> ttrain$Survived <- as.factor(ttrain$Survived)
> ttest$Survived <- as.factor(ttest$Survived)
> model_glm <- train(Survived~., data=ttrain[,names(ttrain)%in%c("Survived",
+                                                               "Pclass",
+                                                               "Age",
+                                                               "Fare",
+                                                               "with_fam",
+                                                               "FM_Survive")], 
+                    method="glm", family="binomial")
> 
> summary(model_glm)

Call:
NULL

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.0966  -0.7689  -0.6370   0.8926   2.3037  

Coefficients:
              Estimate Std. Error z value Pr(>|z|)    
(Intercept)  1.4917828  0.4993064   2.988  0.00281 ** 
Pclass      -0.8374479  0.1332039  -6.287 3.24e-10 ***
Age         -0.0329136  0.0077427  -4.251 2.13e-05 ***
Fare         0.0006987  0.0026248   0.266  0.79008    
with_fam     0.3504328  0.2085848   1.680  0.09295 .  
FM_Survive   1.8753598  0.3643568   5.147 2.65e-07 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 944.03  on 712  degrees of freedom
Residual deviance: 785.24  on 707  degrees of freedom
AIC: 797.24

Number of Fisher Scoring iterations: 4

> varImp(model_glm)
glm variable importance

           Overall
Pclass      100.00
FM_Survive   81.07
Age          66.18
with_fam     23.48
Fare          0.00
> 
> proc.time()
   user  system elapsed 
  5.789   0.161   5.968 
