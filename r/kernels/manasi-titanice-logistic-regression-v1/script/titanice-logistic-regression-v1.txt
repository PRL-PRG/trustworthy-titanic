
library("mice")
library("party")
library("glmnet")

# The train and test data is stored in the ../input directory
train <- read.csv("../input/train.csv")
test  <- read.csv("../input/test.csv")

#Convert to desired datatypes#

train$Survived<-as.factor(train$Survived)
train$Pclass<-as.factor(train$Pclass)
train$Fare<-as.integer(train$Fare)
train$Age<-as.integer(train$Age)
train$Cabin<-as.character(train$Cabin)
#### Step1 - Missing value imputation for Age, Fare and Cabin####

#1. Missing values Age - Mean for a class and a gender#

aggregate(train$Age ~ train$Sex+train$Pclass, FUN=mean)

#Impute missing values with mean for Gender and Pclass in test data#
train$Age[train$Sex=="male" & train$Pclass==1] = 41.27
train$Age[train$Sex=="female" & train$Pclass==1] = 34.61
train$Age[train$Sex=="male" & train$Pclass==2] = 30.71
train$Age[train$Sex=="female" & train$Pclass==2] = 28.72
train$Age[train$Sex=="male" & train$Pclass==3] = 26.48
train$Age[train$Sex=="female" & train$Pclass==3] = 21.73

#2. Missing value Fare, Validate for fare = 0 is Age also 0, which implies infants? Ans - No#
fare5<-train[which(train$Fare<=5),]
plot(fare5$Fare,fare5$Age)
plot(train$Pclass,train$Fare)
aggregate(train$Fare ~ train$Pclass, FUN=mean)

#Replace fare = 0 with fare means for Passenger classes#
train$Fare[train$Fare==0 & train$Pclass==1] = 83.75
train$Fare[train$Fare==0 & train$Pclass==2] = 20.46
train$Fare[train$Fare==0 & train$Pclass==3] = 13.17

#3. Missing value for Cabin#
train$Cabin[is.na(train$Cabin)] <- "Missing"

###Step2 - Logistic regression, only selected model shown below###

agem<-glm(Survived~Age+Sex+SibSp,data=train,family="binomial")
summary(agem)
exp(coef(agem))
fit<-fitted(agem)
oddsratio <- exp(fit)
train1<-cbind(train,oddsratio,fit)

#if prob>=0.5, survived#
survival<-ifelse(fit>=0.5,1,0) 
train1<-cbind(train1,survival)

##Validate model##
table(train1$Survived, train1$survival) 
accuracy_train_glm<- (483+230)/891
accuracy_train_glm 
#accuracy for training glm 0.8002245 = 80%#

############################Test Data#########################

#data type conversion##
test$Pclass<-as.factor(test$Pclass)
test$Fare<-as.integer(test$Fare)
test$Age<-as.integer(test$Age)
test$Cabin<-as.character(test$Cabin)

#### Step 4 - Impute Missing values for Age, Fare, Cabin,using same method as for training data####

#Missing value Age - mean of Sex for a Passenger class#
aggregate(test$Age ~ test$Sex+test$Pclass, FUN=mean)

#Impute missing values with mean for Gender and Pclass in test data#
test$Age[test$Sex=="male" & test$Pclass==1] = 40.5
test$Age[test$Sex=="female" & test$Pclass==1] = 41.33
test$Age[test$Sex=="male" & test$Pclass==2] = 30.93
test$Age[test$Sex=="female" & test$Pclass==2] = 24.34
test$Age[test$Sex=="male" & test$Pclass==3] = 24.45
test$Age[test$Sex=="female" & test$Pclass==3] = 23.06

##Missing value Fare - mean of Fare for a Passenger class##
aggregate(test$Fare ~ test$Pclass, FUN=mean)

#Impute missing values with mean for Fare and Pclass in test data#
test$Fare[test$Fare==0 & test$Pclass==1] = 93.83
test$Fare[test$Fare==0 & test$Pclass==2] = 21.96
test$Fare[test$Fare==0 & test$Pclass==3] = 11.94

##Missing value Cabin - replace NA with "Missing"##
test$Cabin[is.na(test$Cabin)] <- "Missing"

####Step 5 - Predict Survived for test data using logistic regression model built by training data####

testpred<-predict.glm(agem, newdata = test, type = "response")
survival<-ifelse(testpred>=0.5,1,0)
test1<-cbind(test,testpred,survival)

#Submission file - using logistic regression model#
kaggle.sub <- cbind(test$PassengerId,test1$survival)
colnames(kaggle.sub) <- c("PassengerId", "Survived")

