
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## ---- message = FALSE------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Load packages
> library('ggplot2') # visualization
Warning message:
package â€˜ggplot2â€™ was built under R version 3.6.2 
> library('ggthemes') # visualization
> library('scales') # visualization
Warning message:
package â€˜scalesâ€™ was built under R version 3.6.2 
> library('dplyr') # data manipulation

Attaching package: â€˜dplyrâ€™

The following objects are masked from â€˜package:statsâ€™:

    filter, lag

The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

Warning message:
package â€˜dplyrâ€™ was built under R version 3.6.2 
> library('mice') # imputation

Attaching package: â€˜miceâ€™

The following objects are masked from â€˜package:baseâ€™:

    cbind, rbind

Warning message:
package â€˜miceâ€™ was built under R version 3.6.2 
> 
> library('randomForest') # classification algorithm
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: â€˜randomForestâ€™

The following object is masked from â€˜package:dplyrâ€™:

    combine

The following object is masked from â€˜package:ggplot2â€™:

    margin

> 
> 
> ## ---- message=FALSE, warning=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train <- read.csv('../input/train.csv', stringsAsFactors = F)
> test  <- read.csv('../input/test.csv', stringsAsFactors = F)
> 
> str(train)
'data.frame':	891 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : chr  "male" "female" "female" "female" ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  "" "C85" "" "C123" ...
 $ Embarked   : chr  "S" "C" "S" "S" ...
> str(test)
'data.frame':	418 obs. of  11 variables:
 $ PassengerId: int  892 893 894 895 896 897 898 899 900 901 ...
 $ Pclass     : int  3 3 2 3 3 3 3 2 3 3 ...
 $ Name       : chr  "Kelly, Mr. James" "Wilkes, Mrs. James (Ellen Needs)" "Myles, Mr. Thomas Francis" "Wirz, Mr. Albert" ...
 $ Sex        : chr  "male" "female" "male" "male" ...
 $ Age        : num  34.5 47 62 27 22 14 30 26 18 21 ...
 $ SibSp      : int  0 1 0 0 1 0 0 1 0 2 ...
 $ Parch      : int  0 0 0 0 1 0 0 1 0 0 ...
 $ Ticket     : chr  "330911" "363272" "240276" "315154" ...
 $ Fare       : num  7.83 7 9.69 8.66 12.29 ...
 $ Cabin      : chr  "" "" "" "" ...
 $ Embarked   : chr  "Q" "S" "Q" "S" ...
> full  <- bind_rows(train, test) # bind training & test data
> 
> # check data
> str(full)
'data.frame':	1309 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : chr  "male" "female" "female" "female" ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  "" "C85" "" "C123" ...
 $ Embarked   : chr  "S" "C" "S" "S" ...
> unique(full$Survived) # values are 1, 0, and NA (for the missing Survived row in test)
[1]  0  1 NA
> 
> 
> ## ---- message=FALSE, warning=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> sum(is.na(full$PassengerId)) 
[1] 0
> sum(is.na(full$Survived)) # corresponds with the number in test set
[1] 418
> sum(is.na(full$Pclass)) 
[1] 0
> sum(is.na(full$Name)) 
[1] 0
> sum(is.na(full$Sex)) 
[1] 0
> sum(is.na(full$Age)) #263 - need some fancy imputing here!
[1] 263
> sum(is.na(full$SibSp)) 
[1] 0
> sum(is.na(full$Parch)) 
[1] 0
> sum(is.na(full$Ticket)) 
[1] 0
> sum(is.na(full$Fare)) # this shouldn't be too difficult to fill
[1] 1
> sum(full$Cabin == "") # yikes, most missing here!
[1] 1014
> sum(full$Embarked == "") 
[1] 2
> 
> 
> ## ---- message=FALSE, warning=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Grab title from passenger names
> full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
> 
> # Show title counts by sex
> table(full$Sex, full$Title)
        
         Capt Col Don Dona  Dr Jonkheer Lady Major Master Miss Mlle Mme  Mr Mrs
  female    0   0   0    1   1        0    1     0      0  260    2   1   0 197
  male      1   4   1    0   7        1    0     2     61    0    0   0 757   0
        
          Ms Rev Sir the Countess
  female   2   0   0            1
  male     0   8   1            0
> 
> # Found these different titles I've never heard of intriguing so did a little Googling.  Don/Dona are used in Spain, Portugal and Italy as a title of honor (such as Sir when knighted in British culture) while Jonkeer is Dutch translating to Young Lord.  Master is for a boy or young man not yet married and Miss is the same for a girl or young woman.
> # Hmm, who knew?
> 
> # Titles with very low cell counts to be combined to "rare" level
> rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', 
+                 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
> 
> # Also reassign mlle (mademoiselle), ms, and mme (madame) accordingly
> full$Title[full$Title == 'Mlle']        <- 'Miss' 
> full$Title[full$Title == 'Ms']          <- 'Miss'
> full$Title[full$Title == 'Mme']         <- 'Mrs' 
> full$Title[full$Title %in% rare_title]  <- 'Rare Title'
> 
> # Show title counts by sex again
> table(full$Sex, full$Title)
        
         Master Miss  Mr Mrs Rare Title
  female      0  264   0 198          4
  male       61    0 757   0         25
> 
> # Finally, grab surname from passenger name
> full$Surname <- sapply(full$Name,  
+                       function(x) strsplit(x, split = '[,.]')[[1]][1])
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Create a family size variable including the passenger themselves
> full$FamSize <- full$SibSp + full$Parch + 1
> 
> # Create a family variable 
> full$Family <- paste(full$Surname, full$FamSize, sep='_')
> 
> 
> ## ---- message=FALSE, warning=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Use ggplot2 to visualize the relationship between family size & survival
> ggplot(full[1:891,], aes(x = FamSize, fill = factor(Survived))) +
+   geom_bar(stat='count', position='dodge') +
+   scale_x_continuous(breaks=c(1:11)) +
+   labs(x = 'Family Size') +
+   theme_few()
> 
> 
> ## ---- message=FALSE, warning=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> numSurvived = sum(train$Survived) # 342
> numDied = nrow(train) - numSurvived #549
> PropSurvived = numSurvived/nrow(train) # 0.3838384
> PropDied = numDied/nrow(train) # 0.6161616
> byClass <- group_by(train, Survived, Pclass)
> summarise(byClass, train = n())
`summarise()` regrouping output by 'Survived' (override with `.groups` argument)
[90m# A tibble: 6 x 3[39m
[90m# Groups:   Survived [2][39m
  Survived Pclass train
     [3m[90m<int>[39m[23m  [3m[90m<int>[39m[23m [3m[90m<int>[39m[23m
[90m1[39m        0      1    80
[90m2[39m        0      2    97
[90m3[39m        0      3   372
[90m4[39m        1      1   136
[90m5[39m        1      2    87
[90m6[39m        1      3   119
> 
>     
> 
> 
> ## ---- message=FALSE, warning=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Use ggplot2 to visualize the relationship between class & survival
> ggplot(full[1:891,], aes(x = Pclass, fill = factor(Survived))) +
+   geom_bar(stat='count', position='dodge') +
+   scale_x_continuous(breaks=c(1:11)) +
+   labs(x = 'Class') +
+   theme_few()
> 
> 
> ## ---- message=FALSE, warning=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Table for survival by sex
> table(train$Survived, train$Sex)
   
    female male
  0     81  468
  1    233  109
> table(train$Embarked, train$Survived)
   
      0   1
      0   2
  C  75  93
  Q  47  30
  S 427 217
> 
> 
> ## ---- message=FALSE, warning=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full$Missing_Age = ifelse(is.na(full$Age), 1, 0)
> full$Missing_Cabin = ifelse(full$Cabin == "", 1, 0)
> full$NumCharName = nchar(full$Name)
> full$NumCharTicket <- nchar(full$Ticket)
> full$FirstCharTicket<-factor(sapply(full$Ticket, function(x) strsplit(x, NULL)[[1]][1]))
> full$FirstCharCabin<-factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
> 
> 
> ## ---- message=FALSE, warning=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # missing from Embarked
> which(full$Embarked == "") # passengers 62 and 830
[1]  62 830
> 
> 
> ## ----results='asis'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> cat(paste('We will infer their values for **embarkment** based on present data that we can imagine may be relevant: 
+ **passenger class** and **fare**. We see that they paid<b> $', full[c(62, 830), 'Fare'][[1]][1], '</b>and<b> $', full[c(62, 830), 
+ 'Fare'][[1]][2], '</b>respectively and their classes are<b>', full[c(62, 830), 'Pclass'][[1]][1], '</b>and<b>', full[c(62, 830), 
+ 'Pclass'][[1]][2], '</b>. So from where did they embark?'))
We will infer their values for **embarkment** based on present data that we can imagine may be relevant: 
**passenger class** and **fare**. We see that they paid<b> $ 80 </b>and<b> $ NA </b>respectively and their classes are<b> 1 </b>and<b> NA </b>. So from where did they embark?> 
> 
> ## ---- message=FALSE, warning=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Get rid of our missing passenger IDs
> embark_fare <- full %>%
+   filter(PassengerId != 62 & PassengerId != 830)
> 
> # Use ggplot2 to visualize embarkment, passenger class, & median fare
> ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
+   geom_boxplot() +
+   geom_hline(aes(yintercept=80), 
+     colour='red', linetype='dashed', lwd=2) +
+   scale_y_continuous(labels=dollar_format()) +
+   theme_few()
Warning message:
Removed 1 rows containing non-finite values (stat_boxplot). 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Since their fare was $80 for 1st class, they most likely embarked from 'C'
> full$Embarked[c(62, 830)] <- 'C'
> 
> 
> ## ---- message=FALSE, warning=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # missing from Fare
> which(full$Fare == "") # passenger 1044
integer(0)
> 
> # showing the row reveals that this is a 3rd class passenger departing from 'Southampton.'
> full[1044, ]
     PassengerId Survived Pclass               Name  Sex  Age SibSp Parch
1044        1044       NA      3 Storey, Mr. Thomas male 60.5     0     0
     Ticket Fare Cabin Embarked Title Surname FamSize   Family Missing_Age
1044   3701   NA              S    Mr  Storey       1 Storey_1           0
     Missing_Cabin NumCharName NumCharTicket FirstCharTicket FirstCharCabin
1044             1          18             4               3           <NA>
> 
> 
> ## ---- message=FALSE, warning=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], 
+   aes(x = Fare)) +
+   geom_density(fill = '#99d6ff', alpha=0.4) + 
+   geom_vline(aes(xintercept=median(Fare, na.rm=T)),
+     colour='red', linetype='dashed', lwd=1) +
+   scale_x_continuous(labels=dollar_format()) +
+   theme_few()
Warning message:
Removed 1 rows containing non-finite values (stat_density). 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full$Fare[1044] <- median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE)
> 
> 
> ## ---- message=FALSE, warning=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Make categorical variables into factors
> factor_vars <- c('PassengerId','Pclass','Sex','Embarked',
+                  'Title','Surname','Family', 'FirstCharCabin', 'FirstCharTicket')
> 
> full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
> 
> # Set a random seed
> set.seed(129)
> 
> # Perform mice imputation, excluding certain less-than-useful variables:
> mice_mod <- mice(full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived', 'FirstCharCabin', 'FirstCharTicket')], method='rf') 

 iter imp variable
  1   1  Age
  1   2  Age
  1   3  Age
  1   4  Age
  1   5  Age
  2   1  Age
  2   2  Age
  2   3  Age
  2   4  Age
  2   5  Age
  3   1  Age
  3   2  Age
  3   3  Age
  3   4  Age
  3   5  Age
  4   1  Age
  4   2  Age
  4   3  Age
  4   4  Age
  4   5  Age
  5   1  Age
  5   2  Age
  5   3  Age
  5   4  Age
  5   5  Age
Warning message:
Number of logged events: 25 
> 
> # Save the complete output 
> mice_output <- complete(mice_mod)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Plot age distributions
> par(mfrow=c(1,2))
> hist(full$Age, freq=F, main='Age: Original Data', 
+   col='darkgreen', ylim=c(0,0.04))
> hist(mice_output$Age, freq=F, main='Age: MICE Output', 
+   col='lightgreen', ylim=c(0,0.04))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Replace Age variable from the mice model.
> full$Age <- mice_output$Age
> 
> # Show new number of missing Age values
> sum(is.na(full$Age))
[1] 0
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Split the data back into a train set and a test set
> train <- full[1:891,]
> test <- full[892:1309,]
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Set a random seed
> set.seed(1234)
> 
> # Build the model starting with all feature variables that, if categorical, have less than 53 categories as Random Forest doesn't like any more than that.
> rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + 
+                                             Fare + Embarked + Title + FamSize + FirstCharTicket +
+                                             Missing_Age + Missing_Cabin + NumCharName + NumCharTicket,
+                                             data = train)
> 
> # Show model error
> plot(rf_model, ylim=c(0,0.36))
> legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)
> 
> 
> ## ---- message=FALSE, warning=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Get importance
> importance    <- importance(rf_model)
> varImportance <- data.frame(Variables = row.names(importance), 
+                             Importance = round(importance[ ,'MeanDecreaseGini'],2))
> 
> # Create a rank variable based on importance
> rankImportance <- varImportance %>%
+   mutate(Rank = paste0('#',dense_rank(desc(Importance))))
> 
> # Use ggplot2 to visualize the relative importance of variables
> ggplot(rankImportance, aes(x = reorder(Variables, Importance), 
+     y = Importance, fill = Importance)) +
+   geom_bar(stat='identity') + 
+   geom_text(aes(x = Variables, y = 0.5, label = Rank),
+     hjust=0, vjust=0.55, size = 4, colour = 'red') +
+   labs(x = 'Variables') +
+   coord_flip() + 
+   theme_few()
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Set a random seed
> set.seed(1234)
> 
> # Build the model with top 10 variables
> rf_model2 <- randomForest(factor(Survived) ~ Title + Sex + Fare + NumCharName + Age + FirstCharTicket +
+                                             Pclass + FamSize + NumCharTicket + Missing_Cabin,
+                                             data = train)
> 
> # Show model error
> plot(rf_model2, ylim=c(0,0.36))
> legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Set a random seed
> set.seed(1234)
> 
> # Build the model with top 10 variables
> rf_model3 <- randomForest(factor(Survived) ~ Title + Sex + Fare + NumCharName + Age,
+                                             data = train)
> 
> # Show model error
> plot(rf_model3, ylim=c(0,0.36))
> legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Predict using the test set
> prediction <- predict(rf_model, test)
> 
> # Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)
> solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
> 
> # Write the solution to file
> write.csv(solution, file = 'rf_mod_Solution.csv', row.names = F)
> 
> 
> proc.time()
   user  system elapsed 
  4.013   0.251   4.290 
