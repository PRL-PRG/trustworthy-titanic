{"cells":[{"metadata":{"_uuid":"9056c22c33f89738f1b304909b8e83c6b1cc1ed2","_execution_state":"idle","trusted":true,"_kg_hide-output":true},"cell_type":"code","source":"suppressMessages(library(data.table))\nsuppressMessages(library(DMwR))\nsuppressMessages(library(dplyr))\nsuppressMessages(library(rpart))\nsuppressMessages(library(purrr))\nsuppressMessages(library(rpart.plot))\nsuppressMessages(library(caret))\nsuppressMessages(library(DataExplorer))\nsuppressMessages(library(funModeling))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"0173ddfcaf97102b9b645e2b916ac5522e8f3b80"},"cell_type":"code","source":"train <- read.csv(\"../input/train.csv\")\ntest <- read.csv(\"../input/test.csv\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"1eab45c32d2608c4bc57075d8c8b8fdf391f9e57"},"cell_type":"code","source":"str(train)\n\ntable(train$Survived)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"84604ea95cd957b55c6ddeccd49dd453c03303d8"},"cell_type":"markdown","source":"# Identifying missing values"},{"metadata":{"trusted":true,"_uuid":"c29db8cfd713dff154f22bdd3fcf5cf466b8f906"},"cell_type":"code","source":"#combining dataset to impute missing values\ntest$Survived<- \"X\"\ntotal <- rbind(train,test)\nhead(total)\n\n#Missing values\nmap_df(total, function(x) sum(is.na(x)))\nmap_df(total, function(x) {sum(is.na(x))/length(x)*100})\ndf_status(total)\n       \n#This function does not tells which records have empty values. Only describes NA's or zero values.","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"479068f39e40bdc2da5e11d2791a2c57326c5bc5"},"cell_type":"code","source":"summary(total)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d5916f1e9c79e54b2ceda0ae17bee58e7af90ebc"},"cell_type":"markdown","source":"* Age has 263 NA's\n* Fare has 1 NA\n* Cabin has 1014 empty records\n* Embarked has 2 empty records"},{"metadata":{"_uuid":"8cbee0136ef931e2bc4541c97c659b178fa6ac54"},"cell_type":"markdown","source":"## Data Cleaning"},{"metadata":{"_uuid":"accf00025cf2ab6020b52687c1d73fe22ac12f57"},"cell_type":"markdown","source":"### Replacing the 1 missing value in Fare by its median"},{"metadata":{"trusted":true,"_uuid":"adc04098d0494de73988ee87becaf301a1153ee0"},"cell_type":"code","source":"total[which(is.na(total$Fare)),]\ntotal %>% group_by(Embarked) %>% summarise(mean(Fare, na.rm=T), median(Fare, na.rm=T))\n\n#Replacing the fare with the median\ntotal$Fare <- replace(total$Fare, which(is.na(total$Fare)), 13)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"33c3fe3a097d722b9e258cc2624d625a11cf4f8d"},"cell_type":"markdown","source":"## Replacing the 2 missing values in Embarked "},{"metadata":{"trusted":true,"_uuid":"a4b0b27bd359b35feda8df53028c8fd5274e83bb","scrolled":true},"cell_type":"code","source":"#Locating empty records\ntotal[which(total$Embarked == \"\"),]\n\n#Let us determine which other passengers had same ticket number \n\ntotal[which(total$Ticket == 113572),]\n\n#Well, let's see if we can estimate that which passengers have same fare\ntotal[which(total$Fare==80),]\n\n#We can either use imputation or replace empty values with most frequent. Since there are just 2 records, we are going to replace with the maximum frequency obervation.\ntable(total$Embarked)\n\ntotal$Embarked <- replace(total$Embarked, which(total$Embarked== \"\"), \"S\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"779058c7b4c577a10fdc9e0db507979c86392efd"},"cell_type":"markdown","source":"## There are records of passengers having zero fare!!"},{"metadata":{"trusted":true,"_uuid":"d8bdd903564fbcba746e84ab1b907038a9f2dd2e"},"cell_type":"code","source":"total[which(total$Fare==0),]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"ad6ca1bde11ab058dac509b66cd303ef5a4c12ff"},"cell_type":"code","source":"\ntotal$Embarked <- droplevels(total$Embarked)\n\nstr(total)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"bb7fd9266f095e3003b9d5b363f8b3cbd04d2577"},"cell_type":"markdown","source":"## Missing value imputation for Age variable"},{"metadata":{"_uuid":"9cf4c20f33bcf61efffed48e4c88fcf3ecfb9c46"},"cell_type":"markdown","source":"We will try **kNN** imputation as well as **rpart** to impute the missing values in Age and build seperate models on both the imputed dataset to see which model is more robust."},{"metadata":{"_uuid":"f49ae3b4b7dfa2a56ab1f1e265059a0709ae9bfb"},"cell_type":"markdown","source":"### kNN Imputation for ***Age***, but excluding the columns cabins and survived"},{"metadata":{"trusted":true,"_uuid":"9e2992213a140f0a3049d00e3a9f130963dafc4b","scrolled":false},"cell_type":"code","source":"data_knn<- knnImputation(total[, !names(total) %in% c(\"Survived\", \"Cabin\")])\n\ndata_knn <- cbind(data_knn, total$Cabin, total$Survived)\n\nnames(data_knn)[11] <- \"Cabin\"\nnames(data_knn)[12] <- \"Survived\"\nsummary(data_knn)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"2a0a1de002de05df4b245cd53f5e34dc858f2323"},"cell_type":"markdown","source":"### rpart Imputation for ***Age***"},{"metadata":{"trusted":true,"_uuid":"4b6c57b4dbd0c22eac2ab1b69ff3bd520f670334","scrolled":false},"cell_type":"code","source":"data_rpart<- total\n\ncontrol <- trainControl(method=\"repeatedcv\", number=7, repeats=7) \n\nimp_rpart <- train(Age ~. -Survived -Cabin, data =data_rpart[!is.na(data_rpart$Age),],\n                    trControl = control, method=\"rpart\", na.action = na.pass, tuneLength = 5, metric = \"RMSE\");\nprint(imp_rpart$results)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"c7517f78e56c27fcc82131d8d35dbfdafb2b7f1d"},"cell_type":"markdown","source":"## Predicting missing values "},{"metadata":{"trusted":true,"_uuid":"06683dfaf7b6987b9939550cb7dd859f3f164a40"},"cell_type":"code","source":"age_missing<- which(is.na(data_rpart$Age))\n\ndata_rpart$Age[age_missing] <- predict(imp_rpart, data_rpart[age_missing,])\n\ndata_rpart$Survived <- as.factor(data_rpart$Survived)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"d99e65593048f72aab9d151a9856ec33c3913609"},"cell_type":"code","source":"#let's visually analyze the model decision\nrpart.plot(imp_rpart$finalModel, type=4, box.palette = \"Greens\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"0113494a513f20c8c3457f7a46e60f0d1f123215"},"cell_type":"code","source":"library(forcats)\nlibrary(corrplot)\n\ntotal[c(1:891),] %>% select(Age, Fare, Sex, Pclass, Ticket) %>% \n                    mutate(Sex = fct_recode(Sex,\"1\" = \"male\", \"2\" = \"female\")) %>%\n                    mutate(Sex = as.integer(Sex), Pclass = as.integer(Pclass),Ticket=as.integer(Ticket)) %>% \n                    cor(use=\"complete.obs\") %>% corrplot(type=\"lower\", diag=F, method=\"square\", addCoef.col = \"black\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"94ddd085983e4f8969be9b257ff0258070b8a677"},"cell_type":"markdown","source":"## Data Partitioning - for kNN"},{"metadata":{"trusted":true,"_uuid":"4b52639fce95b3fad4204ac1d5c8efeac1e44782"},"cell_type":"code","source":"data_knn$Embarked <- droplevels(data_knn$Embarked)\ndata_rpart$Embarked <- droplevels(data_rpart$Embarked)\n\nset.seed(213)\nbreaks<- sample(2, nrow(data_knn[c(1:891),]), replace =T, prob = c(0.8,0.2))\ntrain_knn <- data_knn[c(1:891),][breaks==1,]\ntest_knn <- data_knn[c(1:891),][breaks==2,]\n\ntrain_knn$Survived <- droplevels(train_knn$Survived)\ntest_knn$Survived <- droplevels(test_knn$Survived)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"dd51c9b96becc41a53b2e7a72d31af88ccde4225"},"cell_type":"markdown","source":"## Data Partitioning - for rpart dataset"},{"metadata":{"trusted":true,"_uuid":"c8f352908c92c6fed033c4e4a279b0a46bfe6d51"},"cell_type":"code","source":"set.seed(782)\nbreaks<- sample(2, nrow(data_rpart[c(1:891),]), replace =T, prob = c(0.8,0.2))\ntrain_rpart <- data_rpart[c(1:891),][breaks==1,]\ntest_rpart <- data_rpart[c(1:891),][breaks==2,]\n\ntrain_rpart$Survived <- droplevels(train_rpart$Survived)\ntest_rpart$Survived <- droplevels(test_rpart$Survived)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"e1485addc514e2751075a99069e923bf4c0aadfc"},"cell_type":"markdown","source":"## Feature selection using Boruta"},{"metadata":{"trusted":true,"_uuid":"e9fb0448cc1fedcdab67f6449c6db91e72eda65e","scrolled":true},"cell_type":"code","source":"library(Boruta)\n\nset.seed(554)\nboruta_knn <- Boruta(Survived ~., data=train_knn, doTrace=1, maxRuns=100)\n\n#Result: All vars are important, except PassengerID\n\nset.seed(435)\nboruta_rpart <- Boruta(Survived ~., data=train_rpart, doTrace=1, maxRuns=100)\n\n\npar(mfrow=c(2,2))\nplot(boruta_knn, las=2, cex.axis=0.6)\nplotImpHistory(boruta_knn)\nplot(boruta_rpart, las=2, cex.axis=0.6)\nplotImpHistory(boruta_rpart)\n\n#Result: All vars are important","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d0dc22467caee133e7f812f5fef10732cf5922f9"},"cell_type":"markdown","source":"## Model Building - kNN"},{"metadata":{"trusted":true,"_uuid":"b732c5956c17834c2aa1dc03480b12e95a6b5a89"},"cell_type":"code","source":"#Model Building for KNN training dataset, excluding PassengerID, Cabin, Name and Ticket variable.\n\nset.seed(198)\nmodel_knn<-train(Survived~. -PassengerId -Name -Cabin -Ticket,\n                 data=train_knn, method=\"knn\",\n                 trControl=trainControl(method = \"repeatedcv\", number =10, repeats =7), metric = \"Accuracy\")\n\nmodel_rf <- train(Survived~. -PassengerId -Name -Cabin -Ticket,\n                 data=train_knn,method=\"ranger\",\n                  trControl=trainControl(method = \"repeatedcv\", number =10, repeats =7), \n                  metric = \"Accuracy\")\n\nmodel_glmnet <- train(Survived~. -PassengerId -Name -Cabin -Ticket,\n                 data=train_knn,method=\"glmnet\",trControl=trainControl(method = \"repeatedcv\", \n                                                                   number =10, repeats =7), metric = \"Accuracy\")\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"127d07b11ade0eaeee29c4f899a40d347efcb81b","scrolled":true},"cell_type":"code","source":"result<-resamples(list(kNN=model_knn, RandomForest=model_rf, glm= model_glmnet))\n\ndotplot(result)\nprint(model_knn)\nprint(model_rf)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d75a296feded24f250cc955744a244e9126230f2"},"cell_type":"markdown","source":"## Prediction - knn dataset"},{"metadata":{"trusted":true,"_uuid":"16e5a033eb6755be36ed288c30909c06cf5a4196"},"cell_type":"code","source":"knn_predict <- predict(model_knn, test_knn)\nrf_predict <- predict(model_rf, test_knn)\nglmnet_predict <- predict(model_glmnet, test_knn)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"fbc602f140451f37f1c9b0cf9d0a7eb5a0450331"},"cell_type":"markdown","source":"## Confusion Matrix for predicted dataset"},{"metadata":{"trusted":true,"_uuid":"f64e030e694e8fddfe3981afa8bbdf40b532dad9"},"cell_type":"code","source":"confusionMatrix(knn_predict, test_knn$Survived)\nconfusionMatrix(rf_predict, test_knn$Survived)\nconfusionMatrix(glmnet_predict, test_knn$Survived)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"130c08282c3d9bea7aa281289a39ade2088deeac"},"cell_type":"markdown","source":"## Model Performance Evaluation - ROC"},{"metadata":{"trusted":true,"_uuid":"9ef55b261f0d7d000ec64ada1f458449a81126e7"},"cell_type":"code","source":"library(caTools)\n\nknn_predict_eval <- predict(model_knn, test_knn, type =\"prob\")\nglmnet_predict_eval <- predict(model_glmnet, test_knn, type =\"prob\")\n\ncolAUC(knn_predict_eval, test_knn$Survived, plotROC= T)\ncolAUC(glmnet_predict_eval, test_knn$Survived, plotROC= T)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"0d8b544f822af34f8b329ea57c70d6acf8f3b02b"},"cell_type":"markdown","source":"## Model Building - rpart"},{"metadata":{"trusted":true,"_uuid":"07f872e82b71ed4ddfefcc6d4e448f8c6ef47b1f"},"cell_type":"code","source":"#Model Building for rpart training dataset, excluding PassengerID, Cabin, Name and Ticket variable.\n\nset.seed(444)\nmodel_knn_r<-train(Survived~. -PassengerId -Name -Cabin -Ticket,\n                 data=train_rpart, method=\"knn\",\n                 trControl=trainControl(method = \"repeatedcv\", number =10, repeats =7), metric = \"Accuracy\")\n\nmodel_rf_r <- train(Survived~. -PassengerId -Name -Cabin -Ticket,\n                 data=train_rpart,method=\"ranger\",\n                  trControl=trainControl(method = \"repeatedcv\", number =10, repeats =7), \n                  metric = \"Accuracy\")\n\nmodel_glmnet_r <- train(Survived~. -PassengerId -Name -Cabin -Ticket,\n                 data=train_rpart,method=\"glmnet\",trControl=trainControl(method = \"repeatedcv\", \n                                                                   number =10, repeats =7), metric = \"Accuracy\")\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"bd8ddad6de196fd7597e403adad11b079a1ad8fb"},"cell_type":"code","source":"result_b<-resamples(list(kNN=model_knn_r, RandomForest=model_rf_r, glm= model_glmnet_r))\n\ndotplot(result_b)\nprint(model_knn_r)\nprint(model_rf_r)\nprint(model_glmnet_r)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"f826adce436f52b380d41f949a00b8a88f599fd1"},"cell_type":"markdown","source":"## Prediction"},{"metadata":{"trusted":true,"scrolled":false,"_uuid":"383bea1eb1f1d67d403839f4e6da84be0e48fa6c"},"cell_type":"code","source":"knn_predict_b <- predict(model_knn_r, test_rpart)\nrf_predict_b <- predict(model_rf_r, test_rpart)\nglmnet_predict_b <- predict(model_glmnet_r, test_rpart)\n\nconfusionMatrix(knn_predict_b, test_rpart$Survived)\nconfusionMatrix(rf_predict_b, test_rpart$Survived)\nconfusionMatrix(glmnet_predict_b, test_rpart$Survived)","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}