
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## ----setup, include=FALSE, message = FALSE---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> knitr::opts_chunk$set(echo = TRUE)
> 
> 
> ## ----libraries, message = FALSE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(Amelia)
Loading required package: Rcpp
## 
## Amelia II: Multiple Imputation
## (Version 1.7.6, built: 2019-11-24)
## Copyright (C) 2005-2020 James Honaker, Gary King and Matthew Blackwell
## Refer to http://gking.harvard.edu/amelia/ for more information
## 
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.
> library(ggplot2)

Attaching package: ‘ggplot2’

The following object is masked from ‘package:randomForest’:

    margin

Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library(ggthemes)
> library(gridExtra)

Attaching package: ‘gridExtra’

The following object is masked from ‘package:randomForest’:

    combine

> library(grid)
> 
> 
> ## ----load------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train <- read.csv("../input/train.csv", header = TRUE, na.strings = c("", NA))
> test <- read.csv("../input/test.csv", header = TRUE, na.strings = c("", NA))
> whole <- rbind(train[,-2], test)
> 
> 
> 
> ## ----wrangle---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> missmap(whole, col = c("yellow", "blue"), main = "The Titanic Passenger Data")
> 
> 
> ## ----plot data, warning = FALSE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(train, aes(x = as.factor(Survived))) +
+   geom_bar(stat="count", width = 0.5) +
+   labs(title = "Passenger Fate", x = "Survived", y = "Count") +
+   theme_bw()
> 
> 
> ggplot(train, aes(x = Sex)) +
+   geom_bar(stat="count", width = 0.5) +
+   labs(title = "Passenger Sex", x = "Sex", y = "Count") +
+   theme_bw()
> 
> 
> ggplot(train, aes(x = as.factor(Pclass))) +
+   geom_bar(stat="count", width = 0.5) +
+   labs(title = "Passenger Class", x = "Class", y = "Count") +
+   theme_bw()
> 
> ggplot(train, aes(x = Age)) +
+   geom_bar(stat="count") +
+   labs(title = "Passenger Age", x = "Age", y = "Count") +
+   annotate("text", x = 70, y = 27.5, label = paste("median age =", median(train$Age, na.rm = TRUE))) +
+   theme_bw()
Warning message:
Removed 177 rows containing non-finite values (stat_count). 
> 
> 
> 
> ## ----plot data 2, warning = FALSE------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(whole, aes(x = as.factor(Pclass), y = Age)) +
+   geom_boxplot() +
+   labs(title = "Passenger Age by Class (whole dataset)", x = "Class", y = "Age") +
+   theme_bw()
Warning message:
Removed 263 rows containing non-finite values (stat_boxplot). 
> 
> 
> a <- whole$Age[which(whole$Pclass == 1)]
> c <- whole$Age[which(whole$Pclass == 3)]
> wt <- wilcox.test(a, c)
> footnote <- paste("1st class ages significantly differs from 3rd (p-value =", round(wt$p.value, 2), ")")
> grid.text(footnote, x = unit(300, "native"), y = unit(50, "native"))
> 
> 
> 
> ## ----titles----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # remember that everything in R is a function call including indexing operators [], thus the following
> # two calls to sapply are equivalent: sapply(char.vec, "[", 2) and sapply(char.vec, function(x) {x[2]})
> titles = sapply(strsplit(sapply(strsplit(as.character(whole$Name), ","), function(x){ x[2] }), "\\."), "[", 1)
> titles = gsub(" ", "", titles, fixed = TRUE)
> table(titles)
titles
       Capt         Col         Don        Dona          Dr    Jonkheer 
          1           4           1           1           8           1 
       Lady       Major      Master        Miss        Mlle         Mme 
          1           2          61         260           2           1 
         Mr         Mrs          Ms         Rev         Sir theCountess 
        757         197           2           8           1           1 
>  
> # We can clean this up a bit so the titles are no so fragmented
> titles[which(titles == "Mme")] <- "Mrs"
> titles[which(titles == "Ms")] <- "Miss"
> titles[which(titles == "Mlle")] <- "Miss"
> 
> # Let's group all rare titles (those with occurences less than three) into one category
> tab.count <- table(titles)
> rare.titles = names(tab.count[which(tab.count <= 2)])
> titles[which(titles %in% rare.titles)] <- "Grand"
> 
> # Let's add these titles to the data set
> whole$Title <- titles 
> 
> 
> 
> ## ----plot data 3, warning = FALSE------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(whole, aes(x = as.factor(Title), y = Age)) +
+   geom_boxplot() +
+   labs(title = "Passenger Age by Title (whole dataset)", x = "Title", y = "Age") +
+   theme_bw()
Warning message:
Removed 263 rows containing non-finite values (stat_boxplot). 
> 
> 
> ## ----age mean--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> mean(whole$Age, na.rm = TRUE)
[1] 29.88114
> 
> 
> ## ----missing age-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # get the index of all rows with missing values for Age
> ind = which(is.na(whole$Age))
> table(whole[ind, c("Title", "Pclass")])
        Pclass
Title      1   2   3
  Dr       1   0   0
  Master   0   0   8
  Miss     1   2  48
  Mr      27  13 136
  Mrs     10   1  16
> 
> 
> ## ----class_title_age-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # There has to be a way to generate a summary statistic (e.g. mean) inside geom_tile
> summary.tab = aggregate(Age ~ Title + Pclass, whole, mean)
> ggplot(summary.tab, aes(x = as.factor(Title), y = Pclass)) +
+   geom_tile(aes(fill = Age), na.rm = TRUE, stat = "identity") +
+   labs(title = "Passenger Age by Title and Class (whole dataset)", x = "Title", y = "Class") +
+   theme_bw()
> 
> 
> ## ----impute age------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ind = which(is.na(whole$Age))
> for (i in ind) {
+   title.i <- whole[i, "Title"]
+   class.i <- whole[i, "Pclass"]
+   age.approx <- round(summary.tab[which(summary.tab$Title == title.i & summary.tab$Pclass == class.i), "Age"])
+   
+   whole[i, "Age"] <- age.approx
+ }
> 
> 
> ## ----class_embarked_fare---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> summary.tab = aggregate(Fare ~ Pclass + Embarked, whole, mean)
> ggplot(summary.tab, aes(x = as.factor(Embarked), y = Pclass)) +
+   geom_tile(aes(fill = Fare), na.rm = TRUE, stat = "identity") +
+   labs(title = "Passenger Fare by Port of Embarkment and Class (whole dataset)", x = "Title", y = "Class") +
+   theme_bw()
> 
> 
> ## ----impute fare-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ind = which(is.na(whole$Fare))
> for (i in ind) {
+   class.i <- whole[i, "Pclass"]
+   port.i <- whole[i, "Embarked"]
+   
+   fare.approx <- round(summary.tab[which(summary.tab$Pclass == class.i & summary.tab$Embarked == port.i), "Fare"])
+   
+   whole[i, "Fare"] <- fare.approx
+ }
> 
> 
> 
> ## ----class_embarked--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> summary.tab = table(whole$Embarked, whole$Pclass)
> ggplot(whole, aes(x = Pclass, y = Embarked), na.rm = TRUE) +
+   geom_count() +
+   labs(title = "Passenger Embarkment Port by Class (whole dataset)", x = "Class", y = "Embarked") +
+   theme_bw()
> 
> 
> ## ----fare_embarked---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(whole, aes(x = factor(Embarked), y = Fare)) +
+   geom_dotplot(binaxis = "y", stackdir = "center", binpositions = "all", binwidth = 0.8, na.rm = TRUE) +
+   labs(title = "Passenger Embarkment Fare by Port of Embarkment (whole dataset)", x = "Embarked", y = "Fare") +
+   theme_bw()
> 
> 
> ## ----fare_embarked2--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(whole, aes(x = factor(Embarked), y = Fare), na.rm = TRUE) +
+   geom_boxplot() +
+   labs(title = "Passenger Embarkment Fare by Port of Embarkment (whole dataset)", x = "Embarked", y = "Fare") +
+   theme_bw()
> 
> 
> ## ----fare_embarked_stats_test----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> wilcox.test(whole$Fare[which(whole$Embarked == "C")], whole$Fare[which(whole$Embarked == "S")])

	Wilcoxon rank sum test with continuity correction

data:  whole$Fare[which(whole$Embarked == "C")] and whole$Fare[which(whole$Embarked == "S")]
W = 157760, p-value = 3.306e-12
alternative hypothesis: true location shift is not equal to 0

> 
> 
> ## ----median_fare_by_embarked-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> median(na.omit(whole$Fare[which(whole$Embarked == "S")]))
[1] 13
> median(na.omit(whole$Fare[which(whole$Embarked == "C")]))
[1] 28.51875
> 
> 
> ## ----impute embarked-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ind = which(is.na(whole$Embarked))
> for (i in ind) {
+   whole[i, "Embarked"] <- "S"
+ }
> 
> 
> ## ----wrangle2--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> missmap(whole, col = c("yellow", "blue"), main = "The Titanic Passenger Data")
> 
> 
> ## ----family_size-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # visualise realtionship between family size and survival 
> whole$FamilySize <- whole$SibSp + whole$Parch + 1
> 
> # but restrict the index to 
> ind = which(whole$PassengerId %in% train$PassengerId) 
> temp.data = cbind(Survived = train[,2], whole[ind,])
> 
> ggplot(temp.data, aes(x = FamilySize, fill = as.factor(Survived))) +
+   geom_bar(position = "dodge", stat = "count") + 
+   scale_x_continuous(breaks = c(1:11)) +
+   labs(title = "Passenger Fate by Family Size (whole dataset)") +
+   theme_few()
> 
> 
> 
> ## ----family_size_category--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> whole$FamilyCategory[whole$FamilySize == 1] <- "single"
> whole$FamilyCategory[whole$FamilySize == 2] <- "couple"
> whole$FamilyCategory[whole$FamilySize >= 3 & whole$FamilySize <= 5] <- "small family"
> whole$FamilyCategory[whole$FamilySize >= 6] <- "large family"
> 
> # but restrict the index to 
> ind = which(whole$PassengerId %in% train$PassengerId) 
> temp.data = cbind(Survived = train[,2], whole[ind,])
> 
> 
> ggplot(temp.data, aes(x = FamilyCategory, fill = as.factor(Survived))) +
+   geom_bar(position = "dodge", stat = "count") + 
+   labs(title = "Passenger Fate by Family Size Category (whole dataset)") +
+   theme_few()
> 
> 
> 
> ## ----other_factors---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> ggplot(temp.data, aes(x = Pclass, fill = as.factor(Survived))) +
+   geom_bar(position = "dodge", stat = "count") + 
+   labs(title = "Passenger Fate by Class", x = "Survived") +
+   theme_few()
> 
> ggplot(temp.data, aes(x = Sex, fill = as.factor(Survived))) +
+   geom_bar(position = "dodge", stat = "count") + 
+   labs(title = "Passenger Fate by Sex", x = "Survived") +
+   theme_few()
> 
> ggplot(temp.data, aes(x = as.factor(Survived), y = Age)) +
+   geom_violin(scale = "area") + 
+   geom_boxplot(width = 0.1) +
+   labs(title = "Passenger Fate by Age", x = "Survived") +
+   theme_few()
> 
> ggplot(temp.data, aes(x = as.factor(Survived), y = Fare)) +
+   geom_violin(scale = "area") + 
+   geom_boxplot(width = 0.1) +
+   labs(title = "Passenger Fate by Fare", x = "Survived") +
+   theme_few()
> 
> 
> 
> 
> ## ----rf_training, results = "hide"-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> # we have engineered several new features which now reside in 'whole'
> # so use whole split into train and test and not the originals
> ind = which(whole$PassengerId %in% train$PassengerId) 
> train <- cbind(Survived = train$Survived, whole[ind,]) 
> test <- whole[-ind,]
> 
> set.seed(93549)
> model <- randomForest(formula = as.formula( as.factor(Survived) ~ Sex + Pclass + Fare + Embarked + FamilySize), 
+                      data = train, do.trace = T, ntree = 500, nodesize = 5)
ntree      OOB      1      2
    1:  19.64% 13.33% 28.68%
    2:  20.11% 15.50% 27.06%
    3:  22.58% 17.22% 31.40%
    4:  22.11% 18.22% 28.28%
    5:  23.32% 18.88% 30.22%
    6:  21.41% 17.59% 27.52%
    7:  21.71% 16.38% 30.15%
    8:  21.45% 15.68% 30.68%
    9:  20.99% 16.36% 28.36%
   10:  20.18% 14.31% 29.53%
   11:  20.41% 13.21% 31.87%
   12:  20.58% 13.53% 31.87%
   13:  20.92% 14.26% 31.58%
   14:  19.57% 12.98% 30.12%
   15:  19.91% 13.35% 30.41%
   16:  19.78% 12.04% 32.16%
   17:  19.19% 11.66% 31.29%
   18:  19.08% 11.66% 30.99%
   19:  19.64% 12.02% 31.87%
   20:  19.64% 11.84% 32.16%
   21:  18.97% 11.11% 31.58%
   22:  19.42% 11.29% 32.46%
   23:  18.63% 10.56% 31.58%
   24:  18.41%  9.84% 32.16%
   25:  18.74% 10.20% 32.46%
   26:  19.08% 10.38% 33.04%
   27:  18.74% 10.02% 32.75%
   28:  19.08%  9.84% 33.92%
   29:  19.19% 10.02% 33.92%
   30:  19.19%  9.47% 34.80%
   31:  19.08%  9.47% 34.50%
   32:  18.86%  9.11% 34.50%
   33:  19.53% 10.02% 34.80%
   34:  19.08% 10.02% 33.63%
   35:  19.30% 10.20% 33.92%
   36:  19.30% 10.38% 33.63%
   37:  19.42% 10.56% 33.63%
   38:  19.42% 10.02% 34.50%
   39:  19.30% 10.02% 34.21%
   40:  19.19%  9.84% 34.21%
   41:  19.08%  9.65% 34.21%
   42:  18.86%  9.65% 33.63%
   43:  18.97%  9.47% 34.21%
   44:  19.08%  9.65% 34.21%
   45:  19.08%  9.29% 34.80%
   46:  18.86%  9.84% 33.33%
   47:  18.97%  9.29% 34.50%
   48:  19.19%  9.65% 34.50%
   49:  19.19%  9.84% 34.21%
   50:  18.97%  9.47% 34.21%
   51:  18.97%  9.84% 33.63%
   52:  19.19%  9.84% 34.21%
   53:  19.08%  9.65% 34.21%
   54:  18.74%  9.29% 33.92%
   55:  18.52%  8.74% 34.21%
   56:  18.97%  8.93% 35.09%
   57:  18.86%  8.56% 35.38%
   58:  18.86%  8.74% 35.09%
   59:  18.74%  8.56% 35.09%
   60:  18.86%  8.56% 35.38%
   61:  18.97%  8.56% 35.67%
   62:  18.86%  8.56% 35.38%
   63:  18.74%  8.56% 35.09%
   64:  19.08%  8.93% 35.38%
   65:  18.97%  8.74% 35.38%
   66:  18.97%  8.56% 35.67%
   67:  19.19%  8.74% 35.96%
   68:  19.19%  8.93% 35.67%
   69:  19.08%  8.74% 35.67%
   70:  19.08%  8.74% 35.67%
   71:  18.86%  8.38% 35.67%
   72:  18.86%  8.38% 35.67%
   73:  18.97%  8.56% 35.67%
   74:  18.74%  8.38% 35.38%
   75:  18.97%  8.56% 35.67%
   76:  18.86%  8.38% 35.67%
   77:  18.97%  8.74% 35.38%
   78:  19.08%  8.74% 35.67%
   79:  18.86%  8.38% 35.67%
   80:  18.63%  8.38% 35.09%
   81:  18.63%  8.38% 35.09%
   82:  18.74%  8.56% 35.09%
   83:  18.74%  8.74% 34.80%
   84:  18.97%  8.74% 35.38%
   85:  18.63%  8.20% 35.38%
   86:  18.63%  8.38% 35.09%
   87:  18.74%  8.56% 35.09%
   88:  18.86%  8.74% 35.09%
   89:  18.74%  8.56% 35.09%
   90:  18.74%  8.56% 35.09%
   91:  18.97%  8.74% 35.38%
   92:  19.08%  8.93% 35.38%
   93:  18.97%  8.93% 35.09%
   94:  18.86%  8.56% 35.38%
   95:  18.86%  8.56% 35.38%
   96:  18.97%  8.56% 35.67%
   97:  19.08%  8.74% 35.67%
   98:  18.86%  8.56% 35.38%
   99:  18.86%  8.56% 35.38%
  100:  18.86%  8.56% 35.38%
  101:  18.74%  8.38% 35.38%
  102:  18.86%  8.56% 35.38%
  103:  18.63%  8.20% 35.38%
  104:  18.74%  8.38% 35.38%
  105:  18.63%  8.38% 35.09%
  106:  18.41%  8.01% 35.09%
  107:  18.63%  8.20% 35.38%
  108:  18.52%  8.01% 35.38%
  109:  18.41%  7.83% 35.38%
  110:  18.63%  8.20% 35.38%
  111:  18.41%  7.83% 35.38%
  112:  18.63%  8.20% 35.38%
  113:  18.41%  7.83% 35.38%
  114:  18.29%  7.47% 35.67%
  115:  18.63%  8.01% 35.67%
  116:  18.63%  8.20% 35.38%
  117:  18.41%  7.83% 35.38%
  118:  18.52%  8.01% 35.38%
  119:  18.52%  8.01% 35.38%
  120:  18.52%  8.01% 35.38%
  121:  18.52%  8.01% 35.38%
  122:  18.41%  7.83% 35.38%
  123:  18.41%  7.83% 35.38%
  124:  18.52%  7.83% 35.67%
  125:  18.52%  7.83% 35.67%
  126:  18.63%  8.01% 35.67%
  127:  18.63%  8.01% 35.67%
  128:  18.63%  8.01% 35.67%
  129:  18.52%  8.01% 35.38%
  130:  18.63%  8.01% 35.67%
  131:  18.41%  7.83% 35.38%
  132:  18.29%  7.65% 35.38%
  133:  18.52%  7.83% 35.67%
  134:  18.29%  7.47% 35.67%
  135:  18.41%  7.83% 35.38%
  136:  18.52%  7.83% 35.67%
  137:  18.41%  7.65% 35.67%
  138:  18.41%  7.65% 35.67%
  139:  18.18%  7.47% 35.38%
  140:  18.52%  7.65% 35.96%
  141:  18.41%  7.65% 35.67%
  142:  18.41%  7.47% 35.96%
  143:  18.29%  7.47% 35.67%
  144:  18.52%  7.65% 35.96%
  145:  18.41%  7.47% 35.96%
  146:  18.41%  7.47% 35.96%
  147:  18.52%  7.65% 35.96%
  148:  18.52%  7.83% 35.67%
  149:  18.18%  7.47% 35.38%
  150:  18.41%  7.83% 35.38%
  151:  18.52%  8.20% 35.09%
  152:  18.29%  7.65% 35.38%
  153:  18.29%  7.65% 35.38%
  154:  18.18%  7.47% 35.38%
  155:  18.18%  7.47% 35.38%
  156:  18.52%  8.01% 35.38%
  157:  18.41%  7.65% 35.67%
  158:  18.29%  7.65% 35.38%
  159:  18.29%  7.83% 35.09%
  160:  18.07%  7.47% 35.09%
  161:  18.29%  7.65% 35.38%
  162:  18.18%  7.65% 35.09%
  163:  18.29%  7.83% 35.09%
  164:  18.29%  7.83% 35.09%
  165:  18.29%  7.83% 35.09%
  166:  18.18%  7.83% 34.80%
  167:  18.29%  7.83% 35.09%
  168:  18.29%  7.83% 35.09%
  169:  18.18%  7.83% 34.80%
  170:  18.07%  7.65% 34.80%
  171:  18.07%  7.65% 34.80%
  172:  18.29%  7.83% 35.09%
  173:  18.18%  7.83% 34.80%
  174:  18.18%  7.83% 34.80%
  175:  18.41%  8.01% 35.09%
  176:  18.41%  8.01% 35.09%
  177:  18.29%  8.01% 34.80%
  178:  18.29%  8.01% 34.80%
  179:  18.41%  8.01% 35.09%
  180:  18.29%  8.01% 34.80%
  181:  18.41%  8.01% 35.09%
  182:  18.52%  8.01% 35.38%
  183:  18.52%  8.01% 35.38%
  184:  18.29%  7.83% 35.09%
  185:  18.41%  8.01% 35.09%
  186:  18.41%  8.01% 35.09%
  187:  18.41%  8.01% 35.09%
  188:  18.41%  8.01% 35.09%
  189:  18.41%  8.01% 35.09%
  190:  18.41%  8.01% 35.09%
  191:  18.18%  7.83% 34.80%
  192:  18.07%  7.47% 35.09%
  193:  17.96%  7.29% 35.09%
  194:  18.07%  7.29% 35.38%
  195:  18.07%  7.29% 35.38%
  196:  18.29%  7.47% 35.67%
  197:  18.41%  7.83% 35.38%
  198:  18.41%  7.83% 35.38%
  199:  18.52%  7.65% 35.96%
  200:  18.63%  7.65% 36.26%
  201:  18.86%  7.65% 36.84%
  202:  18.63%  7.83% 35.96%
  203:  18.63%  7.65% 36.26%
  204:  18.52%  7.47% 36.26%
  205:  18.63%  7.47% 36.55%
  206:  18.52%  7.47% 36.26%
  207:  18.63%  7.65% 36.26%
  208:  18.41%  7.47% 35.96%
  209:  17.96%  7.10% 35.38%
  210:  18.07%  7.10% 35.67%
  211:  17.96%  7.10% 35.38%
  212:  18.07%  7.10% 35.67%
  213:  18.18%  7.29% 35.67%
  214:  18.18%  7.29% 35.67%
  215:  18.07%  7.10% 35.67%
  216:  18.18%  7.29% 35.67%
  217:  18.07%  7.10% 35.67%
  218:  18.18%  7.29% 35.67%
  219:  18.18%  7.29% 35.67%
  220:  17.85%  7.10% 35.09%
  221:  17.85%  7.10% 35.09%
  222:  17.73%  6.92% 35.09%
  223:  17.73%  6.92% 35.09%
  224:  17.85%  6.92% 35.38%
  225:  17.73%  6.92% 35.09%
  226:  17.73%  6.92% 35.09%
  227:  17.73%  6.92% 35.09%
  228:  17.73%  6.92% 35.09%
  229:  17.73%  6.92% 35.09%
  230:  17.73%  6.92% 35.09%
  231:  17.62%  6.74% 35.09%
  232:  17.73%  6.92% 35.09%
  233:  17.62%  6.74% 35.09%
  234:  17.62%  6.74% 35.09%
  235:  17.62%  6.74% 35.09%
  236:  17.62%  6.74% 35.09%
  237:  17.73%  6.92% 35.09%
  238:  17.73%  6.92% 35.09%
  239:  17.73%  6.92% 35.09%
  240:  17.96%  7.10% 35.38%
  241:  17.73%  6.92% 35.09%
  242:  17.85%  7.10% 35.09%
  243:  17.85%  6.92% 35.38%
  244:  17.73%  6.74% 35.38%
  245:  17.96%  6.92% 35.67%
  246:  17.85%  6.92% 35.38%
  247:  17.85%  7.10% 35.09%
  248:  17.73%  6.92% 35.09%
  249:  17.73%  6.92% 35.09%
  250:  17.73%  6.92% 35.09%
  251:  17.62%  6.74% 35.09%
  252:  17.73%  6.92% 35.09%
  253:  17.85%  6.92% 35.38%
  254:  17.73%  6.92% 35.09%
  255:  17.85%  6.92% 35.38%
  256:  17.85%  6.92% 35.38%
  257:  17.96%  6.92% 35.67%
  258:  17.85%  6.92% 35.38%
  259:  17.85%  6.92% 35.38%
  260:  17.96%  6.92% 35.67%
  261:  17.96%  6.92% 35.67%
  262:  17.96%  6.92% 35.67%
  263:  17.85%  6.92% 35.38%
  264:  17.85%  6.92% 35.38%
  265:  17.85%  6.92% 35.38%
  266:  17.85%  6.92% 35.38%
  267:  17.85%  6.92% 35.38%
  268:  17.96%  7.10% 35.38%
  269:  17.96%  7.10% 35.38%
  270:  17.85%  6.92% 35.38%
  271:  17.85%  7.10% 35.09%
  272:  17.96%  7.10% 35.38%
  273:  17.85%  6.92% 35.38%
  274:  17.73%  6.92% 35.09%
  275:  17.85%  7.10% 35.09%
  276:  17.96%  7.10% 35.38%
  277:  17.96%  7.10% 35.38%
  278:  17.96%  7.10% 35.38%
  279:  17.85%  7.10% 35.09%
  280:  17.62%  6.74% 35.09%
  281:  17.85%  7.10% 35.09%
  282:  17.73%  6.92% 35.09%
  283:  17.73%  6.92% 35.09%
  284:  17.85%  6.92% 35.38%
  285:  17.96%  7.10% 35.38%
  286:  17.96%  7.10% 35.38%
  287:  17.85%  6.92% 35.38%
  288:  17.73%  6.74% 35.38%
  289:  17.73%  6.74% 35.38%
  290:  17.73%  6.74% 35.38%
  291:  17.96%  7.10% 35.38%
  292:  17.73%  6.74% 35.38%
  293:  17.73%  6.74% 35.38%
  294:  17.62%  6.74% 35.09%
  295:  17.73%  6.92% 35.09%
  296:  17.73%  6.74% 35.38%
  297:  17.73%  6.74% 35.38%
  298:  17.62%  6.74% 35.09%
  299:  17.85%  6.92% 35.38%
  300:  17.73%  6.74% 35.38%
  301:  17.73%  6.74% 35.38%
  302:  17.73%  6.74% 35.38%
  303:  17.62%  6.56% 35.38%
  304:  17.85%  6.92% 35.38%
  305:  17.62%  6.74% 35.09%
  306:  17.62%  6.74% 35.09%
  307:  17.73%  6.92% 35.09%
  308:  17.73%  6.92% 35.09%
  309:  17.62%  6.74% 35.09%
  310:  17.62%  6.74% 35.09%
  311:  17.73%  6.92% 35.09%
  312:  17.73%  6.92% 35.09%
  313:  17.85%  6.92% 35.38%
  314:  17.85%  6.92% 35.38%
  315:  17.73%  6.92% 35.09%
  316:  17.62%  6.74% 35.09%
  317:  17.62%  6.74% 35.09%
  318:  17.73%  6.92% 35.09%
  319:  17.51%  6.56% 35.09%
  320:  17.62%  6.74% 35.09%
  321:  17.73%  6.92% 35.09%
  322:  17.51%  6.56% 35.09%
  323:  17.51%  6.56% 35.09%
  324:  17.51%  6.56% 35.09%
  325:  17.62%  6.56% 35.38%
  326:  17.62%  6.56% 35.38%
  327:  17.62%  6.56% 35.38%
  328:  17.62%  6.56% 35.38%
  329:  17.62%  6.56% 35.38%
  330:  17.62%  6.56% 35.38%
  331:  17.51%  6.56% 35.09%
  332:  17.62%  6.56% 35.38%
  333:  17.62%  6.56% 35.38%
  334:  17.62%  6.56% 35.38%
  335:  17.62%  6.56% 35.38%
  336:  17.62%  6.56% 35.38%
  337:  17.73%  6.56% 35.67%
  338:  17.73%  6.56% 35.67%
  339:  17.73%  6.56% 35.67%
  340:  17.73%  6.56% 35.67%
  341:  17.73%  6.56% 35.67%
  342:  17.73%  6.56% 35.67%
  343:  17.73%  6.56% 35.67%
  344:  17.62%  6.56% 35.38%
  345:  17.85%  6.74% 35.67%
  346:  17.73%  6.56% 35.67%
  347:  17.85%  6.74% 35.67%
  348:  17.73%  6.74% 35.38%
  349:  17.73%  6.74% 35.38%
  350:  17.62%  6.56% 35.38%
  351:  17.62%  6.56% 35.38%
  352:  17.85%  6.74% 35.67%
  353:  17.73%  6.56% 35.67%
  354:  17.73%  6.56% 35.67%
  355:  17.73%  6.56% 35.67%
  356:  17.73%  6.56% 35.67%
  357:  17.85%  6.74% 35.67%
  358:  17.96%  6.74% 35.96%
  359:  17.73%  6.56% 35.67%
  360:  17.96%  6.74% 35.96%
  361:  17.73%  6.56% 35.67%
  362:  17.85%  6.56% 35.96%
  363:  17.85%  6.56% 35.96%
  364:  17.85%  6.56% 35.96%
  365:  17.85%  6.56% 35.96%
  366:  17.85%  6.56% 35.96%
  367:  17.85%  6.56% 35.96%
  368:  17.73%  6.56% 35.67%
  369:  17.85%  6.74% 35.67%
  370:  17.96%  6.74% 35.96%
  371:  17.85%  6.74% 35.67%
  372:  17.96%  6.74% 35.96%
  373:  17.85%  6.74% 35.67%
  374:  17.85%  6.74% 35.67%
  375:  17.85%  6.74% 35.67%
  376:  17.96%  6.92% 35.67%
  377:  17.85%  6.74% 35.67%
  378:  17.85%  6.74% 35.67%
  379:  17.73%  6.56% 35.67%
  380:  17.85%  6.56% 35.96%
  381:  17.73%  6.56% 35.67%
  382:  17.73%  6.56% 35.67%
  383:  17.73%  6.56% 35.67%
  384:  17.85%  6.56% 35.96%
  385:  17.96%  6.74% 35.96%
  386:  17.96%  6.74% 35.96%
  387:  17.96%  6.56% 36.26%
  388:  17.73%  6.56% 35.67%
  389:  17.96%  6.56% 36.26%
  390:  18.07%  6.74% 36.26%
  391:  17.96%  6.56% 36.26%
  392:  18.18%  6.74% 36.55%
  393:  18.07%  6.56% 36.55%
  394:  18.18%  6.74% 36.55%
  395:  18.07%  6.74% 36.26%
  396:  18.18%  6.74% 36.55%
  397:  18.29%  6.92% 36.55%
  398:  18.29%  6.92% 36.55%
  399:  18.18%  6.92% 36.26%
  400:  18.18%  6.92% 36.26%
  401:  18.18%  6.92% 36.26%
  402:  18.18%  6.92% 36.26%
  403:  18.18%  6.92% 36.26%
  404:  18.18%  6.92% 36.26%
  405:  18.18%  6.92% 36.26%
  406:  17.85%  6.56% 35.96%
  407:  18.07%  6.74% 36.26%
  408:  17.85%  6.38% 36.26%
  409:  17.96%  6.56% 36.26%
  410:  17.96%  6.56% 36.26%
  411:  18.07%  6.56% 36.55%
  412:  17.96%  6.38% 36.55%
  413:  18.07%  6.56% 36.55%
  414:  18.07%  6.74% 36.26%
  415:  18.07%  6.56% 36.55%
  416:  18.18%  6.74% 36.55%
  417:  17.96%  6.38% 36.55%
  418:  18.07%  6.56% 36.55%
  419:  18.07%  6.56% 36.55%
  420:  17.96%  6.56% 36.26%
  421:  17.96%  6.56% 36.26%
  422:  17.96%  6.74% 35.96%
  423:  17.96%  6.74% 35.96%
  424:  17.96%  6.74% 35.96%
  425:  17.85%  6.74% 35.67%
  426:  17.96%  6.56% 36.26%
  427:  18.07%  6.74% 36.26%
  428:  17.96%  6.74% 35.96%
  429:  17.96%  6.74% 35.96%
  430:  18.07%  6.74% 36.26%
  431:  18.07%  6.74% 36.26%
  432:  18.07%  6.74% 36.26%
  433:  18.07%  6.92% 35.96%
  434:  18.18%  6.92% 36.26%
  435:  18.18%  6.92% 36.26%
  436:  18.07%  6.74% 36.26%
  437:  18.29%  6.92% 36.55%
  438:  18.07%  6.74% 36.26%
  439:  18.29%  7.10% 36.26%
  440:  18.18%  6.92% 36.26%
  441:  18.18%  6.92% 36.26%
  442:  18.18%  7.10% 35.96%
  443:  18.29%  7.10% 36.26%
  444:  18.29%  6.92% 36.55%
  445:  18.18%  6.92% 36.26%
  446:  18.18%  6.92% 36.26%
  447:  18.29%  7.10% 36.26%
  448:  18.18%  7.10% 35.96%
  449:  18.07%  6.74% 36.26%
  450:  18.18%  6.92% 36.26%
  451:  18.07%  6.92% 35.96%
  452:  18.18%  6.92% 36.26%
  453:  18.07%  6.74% 36.26%
  454:  18.07%  6.74% 36.26%
  455:  18.18%  6.74% 36.55%
  456:  18.18%  6.74% 36.55%
  457:  18.18%  6.74% 36.55%
  458:  18.18%  6.74% 36.55%
  459:  18.29%  6.74% 36.84%
  460:  18.18%  6.74% 36.55%
  461:  18.29%  6.74% 36.84%
  462:  18.07%  6.74% 36.26%
  463:  18.07%  6.74% 36.26%
  464:  18.07%  6.74% 36.26%
  465:  18.07%  6.74% 36.26%
  466:  18.07%  6.74% 36.26%
  467:  18.18%  6.74% 36.55%
  468:  18.18%  6.74% 36.55%
  469:  18.18%  6.74% 36.55%
  470:  18.18%  6.74% 36.55%
  471:  18.29%  6.92% 36.55%
  472:  18.41%  6.92% 36.84%
  473:  18.29%  6.92% 36.55%
  474:  18.41%  6.92% 36.84%
  475:  18.29%  6.92% 36.55%
  476:  18.29%  6.92% 36.55%
  477:  18.29%  6.92% 36.55%
  478:  18.29%  6.92% 36.55%
  479:  18.18%  6.92% 36.26%
  480:  18.29%  6.92% 36.55%
  481:  18.18%  6.92% 36.26%
  482:  18.29%  7.10% 36.26%
  483:  18.18%  6.92% 36.26%
  484:  18.29%  6.92% 36.55%
  485:  18.41%  7.10% 36.55%
  486:  18.41%  7.10% 36.55%
  487:  18.41%  7.10% 36.55%
  488:  18.29%  7.10% 36.26%
  489:  18.41%  7.29% 36.26%
  490:  18.52%  7.29% 36.55%
  491:  18.52%  7.29% 36.55%
  492:  18.63%  7.29% 36.84%
  493:  18.52%  7.29% 36.55%
  494:  18.52%  7.29% 36.55%
  495:  18.63%  7.29% 36.84%
  496:  18.63%  7.29% 36.84%
  497:  18.63%  7.29% 36.84%
  498:  18.52%  7.10% 36.84%
  499:  18.41%  6.92% 36.84%
  500:  18.52%  7.10% 36.84%
> 
> # Show model error
> plot(model, ylim=c(0,0.36))
> legend('topright', colnames(model$err.rate), col=1:3, fill=1:3)
> 
> 
> 
> ## ----rf_testing------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> # test on the a partition test
> prediction <- predict(model, test)
> 
> # Save the solution to a dataframe with two columns: PassengerId and Survived (prediction) and write to file
> solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
> write.csv(solution, file = 'rf_mod_Solution.csv', row.names = F)
> 
> 
> 
> proc.time()
   user  system elapsed 
  3.143   0.139   3.321 
