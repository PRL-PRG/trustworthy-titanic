
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### LOAD LIBRARIES & SET INITIAL SETTINGS --------------------------------------
> library(tidyverse)
â”€â”€ [1mAttaching packages[22m â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 1.3.0 â”€â”€
[32mâœ“[39m [34mggplot2[39m 3.3.2     [32mâœ“[39m [34mpurrr  [39m 0.3.4
[32mâœ“[39m [34mtibble [39m 3.0.1     [32mâœ“[39m [34mdplyr  [39m 1.0.2
[32mâœ“[39m [34mtidyr  [39m 1.1.0     [32mâœ“[39m [34mstringr[39m 1.4.0
[32mâœ“[39m [34mreadr  [39m 1.3.1     [32mâœ“[39m [34mforcats[39m 0.5.0
â”€â”€ [1mConflicts[22m â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€
[31mx[39m [34mdplyr[39m::[32mfilter()[39m masks [34mstats[39m::filter()
[31mx[39m [34mdplyr[39m::[32mlag()[39m    masks [34mstats[39m::lag()
Warning messages:
1: package â€˜ggplot2â€™ was built under R version 3.6.2 
2: package â€˜tibbleâ€™ was built under R version 3.6.2 
3: package â€˜tidyrâ€™ was built under R version 3.6.2 
4: package â€˜purrrâ€™ was built under R version 3.6.2 
5: package â€˜dplyrâ€™ was built under R version 3.6.2 
> library(keras)
Warning message:
package â€˜kerasâ€™ was built under R version 3.6.2 
> set.seed(123)
> 
> ### READ & SPLIT DATA ----------------------------------------------------------
> train_init_df <- read_csv("../input/train.csv")
Parsed with column specification:
cols(
  PassengerId = [32mcol_double()[39m,
  Survived = [32mcol_double()[39m,
  Pclass = [32mcol_double()[39m,
  Name = [31mcol_character()[39m,
  Sex = [31mcol_character()[39m,
  Age = [32mcol_double()[39m,
  SibSp = [32mcol_double()[39m,
  Parch = [32mcol_double()[39m,
  Ticket = [31mcol_character()[39m,
  Fare = [32mcol_double()[39m,
  Cabin = [31mcol_character()[39m,
  Embarked = [31mcol_character()[39m
)
> test_df <- read_csv("../input/test.csv")
Parsed with column specification:
cols(
  PassengerId = [32mcol_double()[39m,
  Pclass = [32mcol_double()[39m,
  Name = [31mcol_character()[39m,
  Sex = [31mcol_character()[39m,
  Age = [32mcol_double()[39m,
  SibSp = [32mcol_double()[39m,
  Parch = [32mcol_double()[39m,
  Ticket = [31mcol_character()[39m,
  Fare = [32mcol_double()[39m,
  Cabin = [31mcol_character()[39m,
  Embarked = [31mcol_character()[39m
)
> 
> # Split training into train/dev sets
> sample_size <- floor(0.80 * nrow(train_init_df))
> train_df <- sample_n(train_init_df, sample_size) 
> dev_df <- anti_join(train_init_df, train_df) 
Joining, by = c("PassengerId", "Survived", "Pclass", "Name", "Sex", "Age", "SibSp", "Parch", "Ticket", "Fare", "Cabin", "Embarked")
> 
> ### MISSING VALUES & FEATURE ENGINEERING ---------------------------------------
> glimpse(train_df)
Rows: 712
Columns: 12
$ PassengerId [3m[90m<dbl>[39m[23m 415, 463, 179, 526, 195, 818, 118, 299, 229, 244, 14, 374â€¦
$ Survived    [3m[90m<dbl>[39m[23m 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, â€¦
$ Pclass      [3m[90m<dbl>[39m[23m 3, 1, 2, 3, 1, 2, 2, 1, 2, 3, 3, 1, 3, 3, 1, 3, 1, 3, 3, â€¦
$ Name        [3m[90m<chr>[39m[23m "Sundman, Mr. Johan Julian", "Gee, Mr. Arthur H", "Hale, â€¦
$ Sex         [3m[90m<chr>[39m[23m "male", "male", "male", "male", "female", "male", "male",â€¦
$ Age         [3m[90m<dbl>[39m[23m 44.0, 47.0, 30.0, 40.5, 44.0, 31.0, 29.0, NA, 18.0, 22.0,â€¦
$ SibSp       [3m[90m<dbl>[39m[23m 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, â€¦
$ Parch       [3m[90m<dbl>[39m[23m 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, â€¦
$ Ticket      [3m[90m<chr>[39m[23m "STON/O 2. 3101269", "111320", "250653", "367232", "PC 17â€¦
$ Fare        [3m[90m<dbl>[39m[23m 7.9250, 38.5000, 13.0000, 7.7500, 27.7208, 37.0042, 21.00â€¦
$ Cabin       [3m[90m<chr>[39m[23m NA, "E63", NA, NA, "B4", NA, NA, "C106", NA, NA, NA, NA, â€¦
$ Embarked    [3m[90m<chr>[39m[23m "S", "S", "S", "Q", "C", "C", "S", "S", "S", "S", "S", "Câ€¦
> summary(train_df)
  PassengerId       Survived          Pclass          Name          
 Min.   :  2.0   Min.   :0.0000   Min.   :1.000   Length:712        
 1st Qu.:221.8   1st Qu.:0.0000   1st Qu.:1.750   Class :character  
 Median :443.5   Median :0.0000   Median :3.000   Mode  :character  
 Mean   :444.1   Mean   :0.3834   Mean   :2.302                     
 3rd Qu.:667.2   3rd Qu.:1.0000   3rd Qu.:3.000                     
 Max.   :891.0   Max.   :1.0000   Max.   :3.000                     
                                                                    
     Sex                 Age            SibSp            Parch       
 Length:712         Min.   : 0.67   Min.   :0.0000   Min.   :0.0000  
 Class :character   1st Qu.:21.00   1st Qu.:0.0000   1st Qu.:0.0000  
 Mode  :character   Median :29.00   Median :0.0000   Median :0.0000  
                    Mean   :29.92   Mean   :0.5253   Mean   :0.3806  
                    3rd Qu.:39.00   3rd Qu.:1.0000   3rd Qu.:0.0000  
                    Max.   :74.00   Max.   :8.0000   Max.   :6.0000  
                    NA's   :147                                      
    Ticket               Fare            Cabin             Embarked        
 Length:712         Min.   :  0.000   Length:712         Length:712        
 Class :character   1st Qu.:  7.925   Class :character   Class :character  
 Mode  :character   Median : 14.500   Mode  :character   Mode  :character  
                    Mean   : 32.644                                        
                    3rd Qu.: 31.275                                        
                    Max.   :512.329                                        
                                                                           
> 
> # Check missing values
> colMeans(is.na(train_df))
PassengerId    Survived      Pclass        Name         Sex         Age 
  0.0000000   0.0000000   0.0000000   0.0000000   0.0000000   0.2064607 
      SibSp       Parch      Ticket        Fare       Cabin    Embarked 
  0.0000000   0.0000000   0.0000000   0.0000000   0.7710674   0.0000000 
> colMeans(is.na(dev_df))
PassengerId    Survived      Pclass        Name         Sex         Age 
 0.00000000  0.00000000  0.00000000  0.00000000  0.00000000  0.16759777 
      SibSp       Parch      Ticket        Fare       Cabin    Embarked 
 0.00000000  0.00000000  0.00000000  0.00000000  0.77094972  0.01117318 
> colMeans(is.na(test_df))
PassengerId      Pclass        Name         Sex         Age       SibSp 
0.000000000 0.000000000 0.000000000 0.000000000 0.205741627 0.000000000 
      Parch      Ticket        Fare       Cabin    Embarked 
0.000000000 0.000000000 0.002392344 0.782296651 0.000000000 
> 
> # To see if there's rows with very few values
> max(rowMeans(is.na(train_df)))
[1] 0.1666667
> max(rowMeans(is.na(dev_df)))
[1] 0.1666667
> max(rowMeans(is.na(test_df)))
[1] 0.1818182
> 
> 
> # Choices for missing values (using only training set, to avoid data leakage)
> missing_age <- mean(train_df$Age, na.rm = TRUE)
> missing_fare <- mean(train_df$Fare, na.rm = TRUE)
> missing_embk <- "S"
> 
> # Join datasets for feature engineering and treatment of missing values
> full_df <- bind_rows(
+   train_df %>% mutate(isTraining = 1, isDev = 0),
+   dev_df %>% mutate(isTraining = 1, isDev = 1),
+   test_df %>% mutate(isTraining = 0, isDev = 0))
> 
> # Treat missing values
> full_1_df <- full_df %>% 
+   mutate(MissingAge = is.na(Age) * 1,
+          Age = coalesce(Age, missing_age),
+          Cabin = coalesce(Cabin, "UNK"),
+          Embarked = coalesce(Embarked, missing_embk),
+          Fare = coalesce(Fare, missing_fare))
> 
> colMeans(is.na(full_1_df)) # Check all columns were treated
PassengerId    Survived      Pclass        Name         Sex         Age 
  0.0000000   0.3193277   0.0000000   0.0000000   0.0000000   0.0000000 
      SibSp       Parch      Ticket        Fare       Cabin    Embarked 
  0.0000000   0.0000000   0.0000000   0.0000000   0.0000000   0.0000000 
 isTraining       isDev  MissingAge 
  0.0000000   0.0000000   0.0000000 
> 
> # Obtain titles from passengers' names
> obtainTitles <- function(col) {
+   res <- map(str_split(col, pattern = ","), 2)
+   res <- unlist(map(str_split(res, pattern = " "), 2))
+ }
> 
> titles <- obtainTitles(train_df$Name)
> table(titles) # Some titles have very low counts, group those
titles
    Capt.      Col.      Don.       Dr. Jonkheer.     Lady.    Major.   Master. 
        1         2         1         5         1         1         2        31 
    Miss.     Mlle.      Mme.       Mr.      Mrs.       Ms.      Rev.      Sir. 
      142         1         1       413       103         1         5         1 
      the 
        1 
> low_count_titles <- names(which(table(titles) < 5))
> 
> # Replace those low-counts titles with Other
> titles_proc <- ifelse(titles %in% low_count_titles, "Other", titles)
> 
> # Create dictionary to do replacements on full dataset
> titles_dict <- tibble(Title = titles, TitleProc = titles_proc) %>% unique()
> 
> # Add processed titles
> full_2_df <- full_1_df %>% 
+   mutate(Title = obtainTitles(Name)) %>% 
+   left_join(titles_dict) %>% 
+   mutate(TitleProc = coalesce(TitleProc, "Other"))
Joining, by = "Title"
> 
> # Other features
> full_3_df <- full_2_df %>% 
+   mutate(CabinFirstLetter = ifelse(Cabin == "UNK", "UNK", substr(Cabin, 1, 1)),
+          LettersInTicket = grepl("[A-z]", Ticket) * 1,
+          HasParenthesis = grepl("[(|)]", Name) * 1)
> 
> ### DATA WRANGLING FOR NN INPUT ------------------------------------------------
> # Select categorical & binary variables
> categorical_binary_df <- full_3_df %>% 
+   select(Pclass, Sex, SibSp, Parch, Embarked, MissingAge, TitleProc, 
+          HasParenthesis, LettersInTicket, CabinFirstLetter, isTraining, isDev)
> 
> categorical_factors <- data.frame(apply(categorical_binary_df, 2, as.factor))
> numerical_categorical <- data.frame(data.matrix(categorical_factors)) - 1
> 
> # Select categorical variables
> categorical_df <- numerical_categorical %>% 
+   select(-Sex, -MissingAge, -HasParenthesis, 
+          -LettersInTicket, -isTraining, -isDev)
> 
> # Select binary variables
> binary_df <- numerical_categorical %>% 
+   select(Sex, MissingAge, HasParenthesis, LettersInTicket, isTraining, isDev)
> 
> # Select & normalize numerical variables
> normalizeSeries <- function(series, min_val, max_val){
+   (series - min_val) / (max_val - min_val)
+ }
> 
> # Normalize Age & Fare
> min_age <- min(full_3_df %>% filter(isTraining == 1 & isDev == 0) %>% pull(Age))
> max_age <- max(full_3_df %>% filter(isTraining == 1 & isDev == 0) %>% pull(Age))
> min_fare <- min(
+   full_3_df %>% filter(isTraining == 1 & isDev == 0) %>% pull(Fare))
> max_fare <- max(
+   full_3_df %>% filter(isTraining == 1 & isDev == 0) %>% pull(Fare))
> 
> numeric_df <- full_3_df %>%
+   select(Age, Fare) %>%
+   mutate(Age = normalizeSeries(Age, min_age, max_age), 
+          Fare = normalizeSeries(Fare, min_fare, max_fare))
> 
> # One-hot encoding of categorical variables
> oneHotEncodeCategoricals <- function(df){
+   output_df <- matrix(numeric(0), nrow = nrow(df), ncol = 1)
+   
+   for (col in colnames(df)) {
+     to_bind <- to_categorical(df %>% pull(col))
+     colnames(to_bind) <- paste0(col, 1:ncol(to_bind))
+     output_df <- cbind(output_df, to_bind)
+   }
+   output_df[,-1]
+ }
> 
> cat_one_hot_enc <- oneHotEncodeCategoricals(categorical_df)
OMP: Error #15: Initializing libomp.dylib, but found libomp.dylib already initialized.
OMP: Hint This means that multiple copies of the OpenMP runtime have been linked into the program. That is dangerous, since it can degrade performance or cause incorrect results. The best thing to do is to ensure that only a single OpenMP runtime is linked into the process, e.g. by avoiding static linking of the OpenMP runtime in any library. As an unsafe, unsupported, undocumented workaround you can set the environment variable KMP_DUPLICATE_LIB_OK=TRUE to allow the program to continue to execute, but that may cause crashes or silently produce incorrect results. For more information, please see http://openmp.llvm.org/
