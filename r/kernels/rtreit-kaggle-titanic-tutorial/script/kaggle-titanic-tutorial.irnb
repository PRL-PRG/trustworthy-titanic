{"cells":[{"metadata":{"_uuid":"ccef06a134f4426aae32e1e69d9e9cead36fe088","_cell_guid":"d11dd1d4-4d4c-431e-a871-04020eef778f"},"cell_type":"markdown","source":"# Kaggle Titanic Supervised Learning Tutorial - in R"},{"metadata":{"_uuid":"df8c0476ecc3147ceeb4f508133682cb74a4e979","_cell_guid":"93f8158e-5a84-42a2-9331-f88bb58e6074"},"cell_type":"markdown","source":"Let's train a model to predict whether passengers on the Titanic survived. "},{"metadata":{"_uuid":"9e966302db0db095615ad4c48d21adc712ff853a"},"cell_type":"markdown","source":"# Configuration \nFirst we'll set any global configuration and load libraries. I'm a huge fan of data.table for its speed. "},{"metadata":{"trusted":true,"_uuid":"21fb8c066287f26a53f30abc173d2c45d4851613"},"cell_type":"code","source":"suppressMessages(library(data.table))\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(caret))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"c1756facb9129799673b55bf412c836621e2b0b3"},"cell_type":"markdown","source":"# Load the data\nWe can see that the training data includes a column (\"Survived\") indicating whether the passenger made it or not. This is label we'll use to train our model to predict whether the passengers in the test set made it or not. "},{"metadata":{"_uuid":"00a01ffd7bbba6caad2d1a5df319ec38c00434e6","_cell_guid":"20fb8f2a-bee9-4968-a056-ef7bcc7bc15f","trusted":true,"scrolled":true},"cell_type":"code","source":"train <- fread(\"../input/train.csv\")\ntest <- fread(\"../input/test.csv\")\n\nnames(train)\nnames(test)\nhead(train)\nhead(test)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d8ded7bcb480f74574cb0174f410e25e69e09046","_cell_guid":"8ecc10e6-f77d-40ad-9a0a-5c8e7881e822"},"cell_type":"markdown","source":"# Data Exploration"},{"metadata":{"_uuid":"1d8b04508654865a8a778d7d9c8bb460307bff6f","_cell_guid":"99e03ddf-2043-46bb-8570-5c4b1de61fb4"},"cell_type":"markdown","source":"The files we read in the previous screen are available on the data page for the Titanic competition on Kaggle. That page also has a data dictionary, which explains the various columns that make up the data set. Below are the descriptions contained in that data dictionary:\n\n* *PassengerID* - A column added by Kaggle to identify each row and make submissions easier\n* *Survived* - Whether the passenger survived or not and the value we are predicting (0=No, 1=Yes)\n* *Pclass* - The class of the ticket the passenger purchased (1=1st, 2=2nd, 3=3rd)\n* *Sex* - The passenger's sex\n* *Age* - The passenger's age in years\n* *SibSp* - The number of siblings or spouses the passenger had aboard the Titanic\n* *Parch* - The number of parents or children the passenger had aboard the Titanic\n* *Ticket* - The passenger's ticket number\n* *Fare* - The fare the passenger paid\n* *Cabin* - The passenger's cabin number\n* *Embarked* - The port where the passenger embarked (C=Cherbourg, Q=Queenstown, S=Southampton)"},{"metadata":{"_uuid":"a0790f959dd864a861288b8c7ca2516a0e03ecfa","_cell_guid":"48ab7d8a-e8e5-4e02-a6e7-484e30c1b1f6"},"cell_type":"markdown","source":"### Let's get a view of the actual data"},{"metadata":{"_uuid":"52198316fd2bb160b62cf034212e7a032c994aab","_cell_guid":"5fb11aa8-2639-42b5-bd7d-5d14e9272d8e","trusted":true},"cell_type":"code","source":"head(train)\noptions(repr.plot.width=8, repr.plot.height=6)\noptions(warn=-1)\nggplot(data = melt(train), mapping = aes(x = value)) + \n    geom_histogram(bins = 20) + facet_wrap(~variable, scales = 'free_x')\n\ntrain[, .N, by = Embarked][order(-N)]\ntrain[, .N, by = SibSp][order(-N)]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"e5dd7da6a42504fb946f48437202bef114d87fb3"},"cell_type":"code","source":"options(repr.plot.width=4, repr.plot.height=3)\ntrain[, .N, by = c(\"Survived\", \"Sex\")][order(Survived, -N)]\nggplot(data=train, aes(x=Survived, fill = Sex)) +\n  geom_bar()","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"22e752af3e8d31c55af33600ec47da0e3113eaed","_cell_guid":"e430584a-c0f9-48a7-b1b6-2cf908b877a4"},"cell_type":"markdown","source":"We can immediately see that females survived in much higher proportions than males did.\n\nLet's do the same with the Pclass column."},{"metadata":{"_uuid":"cd3fc00d5b7d16629dd60202783d9bf7bb811a9d","_cell_guid":"a764ffaf-ce57-400a-bffe-37b35dbd1811","trusted":true},"cell_type":"code","source":"options(repr.plot.width=4, repr.plot.height=3)\ntrain[, .N, by = c(\"Survived\", \"Pclass\")][order(Survived, -N)]\nggplot(data=train, aes(x=Survived, fill = as.character(Pclass))) +\n  geom_bar()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"69c8602b9ef72e6ad0525ea3642aff4136a9a48a"},"cell_type":"code","source":"ggplot(train, aes(x=Age))+geom_density(aes(group=Survived, color=Survived))\nggplot(train, aes(x=Pclass))+geom_density(aes(group=Survived, color=Survived))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"f0161b6e05e13e10eda2b11a014b8211e4982a2b","_cell_guid":"d518c8fb-7834-4695-9965-ff7b5b52df85"},"cell_type":"markdown","source":"## 3. Exploring and Converting the age column"},{"metadata":{"trusted":true,"_uuid":"f64606c754968fea358707b7e95a0b816599deda"},"cell_type":"code","source":"summary(test$Age)\nsummary(train$Age)\nggplot(train,aes(x=Age))+geom_histogram(binwidth=5,aes(group=Survived, color=Survived))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4b90546feba394f5d0654df0d2963ff5d3c9fe45"},"cell_type":"code","source":"addcolumns <- function(dt)\n{\n    dt[Embarked == \"\", Embarked := \"S\"]\n    dt[, Age_categories_missing := ifelse(is.na(Age), 1, 0)]\n    dt[, Age_categories_infant := ifelse(Age_categories_missing == 0 & (Age >0 & Age <5), 1, 0)]\n    dt[, Age_categories_child := ifelse(Age_categories_missing == 0 & (Age >=5 & Age <=12), 1, 0)]\n    dt[, Age_categories_teenager := ifelse(Age_categories_missing == 0 & (Age >=12 & Age <=18), 1, 0)]\n    dt[, Age_categories_young_adult := ifelse(Age_categories_missing == 0 & (Age >=18 & Age <=35), 1, 0)]\n    dt[, Age_categories_adult := ifelse(Age_categories_missing == 0 & (Age >=35 & Age <=60), 1, 0)]\n    dt[, Age_categories_senior := ifelse(Age_categories_missing == 0 & (Age >=60 & Age <=100), 1, 0)]\n    #TODO - try using caret dummyVars to create the feature columns for Sex and Pclass\n    dt[, Sex_male := ifelse(Sex == \"male\", 1, 0)]\n    dt[, Sex_female := ifelse(Sex == \"female\", 1, 0)]\n    dmy <- dummyVars(\" ~ .\", data = dt[,c(\"Embarked\")])\n    trsf <- data.frame(predict(dmy, newdata = dt))\n    dt <- cbind(dt, trsf)\n    for(i in 1:3)\n    {\n        col <- paste(\"Pclass_\", i, sep=\"\")\n        dt[, as.character(col) := ifelse(Pclass == i, 1, 0)]\n    }\n    return(dt)\n}\ntrain <- addcolumns(train)\ntest <- addcolumns(test)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"507104250b69a0a2c9eb69f342682470d7ab08d3"},"cell_type":"code","source":"ncol(train)\nncol(test)\nnames(train)\nnames(train[,13:27])\nnames(test[,12:26])","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"6f50e77c80ae7c6ab39a2fed6a5743f9a0cb756c"},"cell_type":"code","source":"dataset <- train[,c(2,13:27)]\n#dataset <- train[,c(2,7,8,13:27)]\n# create a list of 80% of the rows in the original dataset we can use for training\nvalidation_index <- createDataPartition(dataset$Survived, p=0.80, list=FALSE)\n# select 20% of the data for validation\nvalidation <- dataset[-validation_index,]\n# use the remaining 80% of data to training and testing the models\ndataset <- dataset[validation_index,]\ndim(dataset)\ndataset$Survived <- factor(dataset$Survived)\n dataset[, Survived := ifelse(Survived == 1, \"YES\", \"NO\")]\nvalidation[, Survived := ifelse(Survived == 1, \"YES\", \"NO\")]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"bea421206f06f2ebbeab5391784a37db355dbcfb"},"cell_type":"code","source":"names(getModelInfo())\ngetModelInfo()$gbm$type","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"7fde89d5f723e551fb00d59994d36fd398f65067"},"cell_type":"code","source":"# Run algorithms using 5-fold cross validation\ncontrol <- trainControl(method=\"cv\", number=5, classProbs=TRUE)\nmetric <- \"Accuracy\"\n\nset.seed(123)\nmodelXgbTree <- train(\n  Survived ~ .,\n  data = dataset,\n  method = \"xgbTree\",\n  trControl = control,\n  metric = metric\n)\n\nset.seed(123)\nmodelXgbLinear <- train(\n  Survived ~ .,\n  data = dataset,\n  method = \"xgbLinear\",\n  trControl = control,\n  metric = metric\n)\n\nset.seed(123)\nmodelLda <- train(\n  Survived ~ .,\n  data = dataset,\n  method = \"lda\",\n  trControl = control,\n  metric = metric\n)\n\nset.seed(123)\nmodelLogitBoost <- train(\n  Survived ~ .,\n  data = dataset,\n  method = \"LogitBoost\",\n  trControl = control,\n  metric = metric\n)\n\nset.seed(123)\nmodelavNNet <- train(\n  Survived ~ .,\n  data = dataset,\n  method = \"avNNet\",\n  trControl = control,\n  metric = metric\n)\n\nset.seed(123)\nmodelGbm <- train(\n  Survived ~ .,\n  data = dataset,\n  method = \"gbm\",\n  trControl = control,\n  metric = metric\n)\n\nset.seed(123)\nmodelRf <- train(\n  Survived ~ .,\n  data = dataset,\n  method = \"rf\",\n  trControl = control,\n  metric = metric\n)\n\nset.seed(123)\nmodelKnn <- train(\n  Survived ~ .,\n  data = dataset,\n  method = \"knn\",\n  trControl = control,\n  metric = metric\n)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"5f7daf135ffa50e072b8f920c55a8fd11f5d92ba"},"cell_type":"code","source":"results <- resamples(list(RF=modelRf, GBM=modelGbm, LDA=modelLda, KNN=modelKnn, LB=modelLogitBoost, ANN=modelavNNet, XGBT=modelXgbTree,XGBL=modelXgbLinear))\n# summarize the distributions\nsummary(results)\n# boxplots of results\nbwplot(results)\n# dot plots of results\ndotplot(results)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"5a60830590365d1282d8fa60bbd19f998df040a7"},"cell_type":"code","source":"lda.confusion <- predict(modelLda, newdata = validation)\nconfusionMatrix(data = lda.confusion, as.factor(validation$Survived))\n\nrf.confusion <- predict(modelRf, newdata = validation)\nconfusionMatrix(data = rf.confusion, as.factor(validation$Survived))\n\ngbm.confusion <- predict(modelGbm, newdata = validation)\nconfusionMatrix(data = gbm.confusion, as.factor(validation$Survived))\n\nknn.confusion <- predict(modelKnn, newdata = validation)\nconfusionMatrix(data = knn.confusion, as.factor(validation$Survived))\n\nprint(\"modelavNNet\")\nann.confusion <- predict(modelavNNet, newdata = validation)\nconfusionMatrix(data = ann.confusion, as.factor(validation$Survived))\n\nprint(\"modelXgbLinear\")\nxgbl.confusion <- predict(modelXgbLinear, newdata = validation)\nconfusionMatrix(data = xgbl.confusion, as.factor(validation$Survived))\n\nprint(\"modelXgbTree\")\nxgbt.confusion <- predict(modelXgbTree, newdata = validation)\nconfusionMatrix(data = xgbt.confusion, as.factor(validation$Survived))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"616dbc41ded651609d7e8bf3cbf94d3d0e89f8e3"},"cell_type":"code","source":"test.set <- test[,c(12:26)]\n#test.set <- test[,c(6,7,12:26)]\nnrow(test.set)\nnames(test.set)\ntestResult <- predict(modelXgbTree, newdata = test.set)\nend.result <- data.frame(test$PassengerId, data.frame(testResult))\nend.result$testResult <- ifelse(end.result$testResult == \"YES\", 1, 0)\nnames(end.result) <- c(\"PassengerId\", \"Survived\")\nend.result\nwrite.csv(end.result, file = \"submission.csv\", row.names=FALSE)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"bd1a90d94ae4390726b89097c5408e1b4a1f5657","_cell_guid":"d7d31d8e-143d-46da-8c6e-04d24367d79a"},"cell_type":"markdown","source":"1. ## Finished!"},{"metadata":{"_uuid":"eb036811f0162244b4c8265e0df9999490f32167","_cell_guid":"9b7e4a04-344b-4e13-b56d-57b6ac28822f","trusted":true},"cell_type":"code","source":"","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"811c05d71fee644d42b73d1ba4eeda8106b637e9","_cell_guid":"da777ede-a5a5-461a-a2aa-eb8b039d4448"},"cell_type":"markdown","source":"## Further Reading\n\n* https://github.com/justmarkham/scikit-learn-videos"}],"metadata":{"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"},"kernelspec":{"display_name":"R","language":"R","name":"ir"}},"nbformat":4,"nbformat_minor":1}