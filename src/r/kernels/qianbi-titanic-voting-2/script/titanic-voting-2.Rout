
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> library(mice)

Attaching package: ‘mice’

The following objects are masked from ‘package:base’:

    cbind, rbind

Warning message:
package ‘mice’ was built under R version 3.6.2 
> library(nnet)
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:dplyr’:

    combine

> library(rpart)
> library(e1071)
> train <- read.csv("../input/train.csv", stringsAsFactors = FALSE,
+                   na.strings = "")
> test <- read.csv("../input/test.csv", stringsAsFactors = FALSE,
+                  na.strings = "")
> full <- bind_rows(train, test)
> full$Title <- gsub("^.*, |\\. .*$", "", full$Name)
> Mr <- c("Col", "Don", "Jonkheer", "Sir")
> Mrs <- c("Dona", "Lady", "Mme", "the Countess")
> Miss <- c("Mlle", "Ms")
> full$Title[full$Title %in% Mr] <- "Mr"
> full$Title[full$Title %in% Mrs] <- "Mrs"
> full$Title[full$Title %in% Miss] <- "Miss"
> full$Fsize <- full$SibSp + full$Parch + 1
> full$FsizeD[full$Fsize == 1] <- "Singleton"
> full$FsizeD[full$Fsize >1 & full$Fsize < 5] <- "Small"
> full$FsizeD[full$Fsize > 4] <- "Large"
> factor_var <- c("Survived", "Pclass", "Sex", "Embarked",
+                 "Title", "FsizeD")
> full[factor_var] <- lapply(full[factor_var], factor)
> res <- data.frame(PassengerId = test[, 1], Survived = 0)
> mice_mod <- mice(full[, c(3, 5 : 8, 10, 12)], method = "rf")

 iter imp variable
  1   1  Age  Fare  Embarked
  1   2  Age  Fare  Embarked
  1   3  Age  Fare  Embarked
  1   4  Age  Fare  Embarked
  1   5  Age  Fare  Embarked
  2   1  Age  Fare  Embarked
  2   2  Age  Fare  Embarked
  2   3  Age  Fare  Embarked
  2   4  Age  Fare  Embarked
  2   5  Age  Fare  Embarked
  3   1  Age  Fare  Embarked
  3   2  Age  Fare  Embarked
  3   3  Age  Fare  Embarked
  3   4  Age  Fare  Embarked
  3   5  Age  Fare  Embarked
  4   1  Age  Fare  Embarked
  4   2  Age  Fare  Embarked
  4   3  Age  Fare  Embarked
  4   4  Age  Fare  Embarked
  4   5  Age  Fare  Embarked
  5   1  Age  Fare  Embarked
  5   2  Age  Fare  Embarked
  5   3  Age  Fare  Embarked
  5   4  Age  Fare  Embarked
  5   5  Age  Fare  Embarked
> mice_output <- complete(mice_mod)
> full[, c(6, 10, 12)] <- mice_output[, c(3, 6, 7)]
> full$Embarked <- factor(full$Embarked)
> full$Child <- factor(ifelse(full$Age <= 12, 1, 0))
> full <- full[, -c(9, 11)]
> train <- full[1 : nrow(train), ]
> test <- full[(nrow(train) + 1) : nrow(full), -2]
> #logistic
> logistic_mod <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare +
+   Embarked + Title + FsizeD + Child, family = binomial, data = train)
> res$Survived <- res$Survived + round(predict(logistic_mod, test, type = "response"), 0)
> #nnet
> nn_mod <- nnet(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare +
+   Embarked + Title + FsizeD + Child, data = train, size = 10, decay = 0.01)
# weights:  211
initial  value 569.785611 
iter  10 value 507.532069
iter  20 value 458.472462
iter  30 value 383.326029
iter  40 value 344.162223
iter  50 value 326.161697
iter  60 value 321.253288
iter  70 value 319.419406
iter  80 value 315.000650
iter  90 value 309.567990
iter 100 value 307.303752
final  value 307.303752 
stopped after 100 iterations
> res$Survived <- res$Survived + as.numeric(predict(nn_mod, test, type = "class"))
> #randomForest
> rf_mod <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare +
+   Embarked + Title + FsizeD + Child, data = train)
> res$Survived <- res$Survived + as.numeric(predict(rf_mod, test))
> #SVM
> svm_mod <- svm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare +
+   Embarked + Title + FsizeD + Child, data = train)
> res$Survived <- res$Survived + as.numeric(predict(svm_mod, test))
> #rpart
> rpart_mod <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare +
+   Embarked + Title + FsizeD + Child, data = train, method = "class")
> rpart_predict <- predict(rpart_mod, newdata = test)
> res$Survived <- res$Survived + ifelse(rpart_predict[, 1] < rpart_predict[, 2], 1, 0)
> res$Survived <- ifelse(res$Survived > 3, 1, 0)
> write.csv(res, file = "Titanic_voting_2.csv", row.names = FALSE)
> 
> proc.time()
   user  system elapsed 
  4.650   0.381   5.078 
