
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # This Python 3 environment comes with many helpful analytics libraries installed
> # It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
> # For example, here's several helpful packages to load in 
> 
> #import numpy as np # linear algebra
> #import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
> 
> # Input data files are available in the "../input/" directory.
> # For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory
> 
> #from subprocess import check_output
> #print(check_output(["ls", "../input"]).decode("utf8"))
> 
> # Any results you write to the current directory are saved as output.
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.
> library(dplyr)

Attaching package: ‘dplyr’

The following object is masked from ‘package:randomForest’:

    combine

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> 
> ##loading data and check data
> train <- read.csv("../input/train.csv", stringsAsFactors = FALSE)
> test <- read.csv("../input/test.csv", stringsAsFactors = FALSE)
> test$Survived <- NA
> full <- rbind(train, test)
> 
> 
> 
> ####feature engineer
> #1.sex
> prop.table(table(train$Sex, train$Survived),1)
        
                 0         1
  female 0.2579618 0.7420382
  male   0.8110919 0.1889081
> 
> #2.Title
> full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
> table(full$Title)

        Capt          Col          Don         Dona           Dr     Jonkheer 
           1            4            1            1            8            1 
        Lady        Major       Master         Miss         Mlle          Mme 
           1            2           61          260            2            1 
          Mr          Mrs           Ms          Rev          Sir the Countess 
         757          197            2            8            1            1 
> 
> rare <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', 
+           'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
> 
> full$Title[full$Title == 'Mlle']        <- 'Miss' 
> full$Title[full$Title == 'Ms']          <- 'Miss'
> full$Title[full$Title == 'Mme']         <- 'Mrs' 
> full$Title[full$Title %in% rare]  <- 'Rare'
> table(full$Title)

Master   Miss     Mr    Mrs   Rare 
    61    264    757    198     29 
> 
> #Embarked
> full$Embarked[full$Embarked==''] = 'S'
> 
> #Family size
> full$Fsize <- full$SibSp + full$Parch + 1
> full$FsizeD[full$Fsize == 1] <- 'Single'
> full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'Small'
> full$FsizeD[full$Fsize > 4] <- 'Big'
> 
> 
> full$Pclass = factor(full$Pclass)
> full$Sex = factor(full$Sex)
> full$Embarked = factor(full$Embarked)
> full$Title = factor(full$Title)
> full$FsizeD = factor(full$FsizeD)
> 
> 
> 
> train1 <- full[1:891,]
> test1 <- full[892:1309,]
> 
> set.seed(1234)
> rf <- randomForest(factor(Survived)~ Pclass + Sex + Embarked + Title + FsizeD, data = train1, ntree = 100)
> varImpPlot(rf)
> plot(rf)
> 
> prediction <- predict(rf, test1)
> result <- data.frame(PassengerID = test1$PassengerId, Survived = prediction)
> 
> write.csv(result, file="Titanic.csv", row.names = F)
> 
> proc.time()
   user  system elapsed 
  0.389   0.050   0.433 
