{"cells":[{"metadata":{"_uuid":"1a6ce2e0d5ea085a67452e981e5a8bc3f9f8a995"},"cell_type":"markdown","source":"**Introduction**\n\nThe sinking of the RMS Titanic is one of the most infamous shipwrecks in history.  On April 15, 1912, during her maiden voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew. This sensational tragedy shocked the international community and led to better safety regulations for ships.\n\nOne of the reasons that the shipwreck led to such loss of life was that there were not enough lifeboats for the passengers and crew. Although there was some element of luck involved in surviving the sinking, some groups of people were more likely to survive than others, such as women, children, and the upper-class.\n\nHere, we aim to analyse  what sorts of people were likely to survive. "},{"metadata":{"_uuid":"89263b2aa5630dc8d46bbe2486e22862e00e8b82"},"cell_type":"markdown","source":"**Data description**\n\nThe training set is used to build our machine learning models. For the training set, the outcome is already provided for each passenger. Our model will be based on “features” like passengers’ gender and class. The test set should be used to see how well our model performs on unseen data. For the test set, the outcome is not provided and it’s our job to predict these outcomes. There’s also a gender_submission csv file,which is a set of predictions that assume all and only female passengers survive, as an example of what a submission file should look like.\n\nSurvived: This is the outcome variable which is only present in the training set. 0 = No (perished) 1 = Yes (survived)"},{"metadata":{"_uuid":"796b6f254f20b84ba83b17186a4c30a89ef9855b"},"cell_type":"markdown","source":"**Data Dictionary**\n\nVariableDefinitionKey survival Survival 0 = No, 1 = Yes pclass Ticket class 1 = 1st, 2 = 2nd, 3 = 3rd sex Sex Age Age in years sibsp # of siblings / spouses aboard the Titanic parch # of parents / children aboard the Titanic ticket Ticket number fare Passenger fare cabin Cabin number embarked Port of Embarkation C = Cherbourg, Q = Queenstown, S = Southampton"},{"metadata":{"_uuid":"fa4337c7bbd235ed296236115bad325de6b34498"},"cell_type":"markdown","source":"**Loading the required packages**"},{"metadata":{"_uuid":"2b0f9792e36d7e804270a80a56566379ac78ee66","_execution_state":"idle","trusted":true},"cell_type":"code","source":"## Importing packages\nlibrary(dplyr)\nlibrary(ROCR)\nlibrary(caret)\nlibrary(ggplot2)\nlibrary(rpart)\nlibrary(rpart.plot)\nlibrary(randomForest)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"16cabd61747001e3761ec7e07a13760ee94eb0e3"},"cell_type":"markdown","source":"**Importing the data**"},{"metadata":{"trusted":true,"_uuid":"9c5981826c77d11b56c6be0cac49c31e273c0436"},"cell_type":"code","source":"## Reading in files\nlist.files(path = \"../input\")\ntrain <-read.csv(\"../input/train.csv\")\ntest<-read.csv(\"../input/test.csv\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"6306fca3288d57b261810d2baab3d1a8d00a82b5"},"cell_type":"markdown","source":"**Generating the combined data set for analysis**"},{"metadata":{"trusted":true,"_uuid":"f080be60b80c456a2d87c7daa0d50c24f543b5a5"},"cell_type":"code","source":"#Generating a version of the original data\ntrain_df<-train\ntest_df<-test\n\n#Generating the field for the dependent variable in the test data\ntest$Survived<-\"\"\n\n#Combining the test and train data\nfullset<-rbind(train, test)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"b94f5899f1e2cd4f4d2083afcfd3c5fdbb9b05c8"},"cell_type":"code","source":"#Glimpse of the data\nhead(fullset)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"17adf0f2843c1f4892c5090b5883de50b0cb45d9"},"cell_type":"markdown","source":"**EXPLORATORY DATA ANALYSIS**\n\n"},{"metadata":{"trusted":true,"_uuid":"55d4f076acc5084871703a79a79985583bc06a67"},"cell_type":"code","source":"#Structure of the data\nstr(fullset)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"726923b7610a14abe442fb29fe16a2c17abdcb90"},"cell_type":"markdown","source":"* PassengerID is just a serial number and will not be of any use to us.\n* Survived is the dependent variable which is binary in nature.\n* There are missing values in Cabin, Embarked, Age and Fare"},{"metadata":{"_uuid":"63d478e7484c9ad6f82958e46f320d51fb447f3f"},"cell_type":"markdown","source":"**Dropping variables with poor fill rate**"},{"metadata":{"trusted":true,"_uuid":"ba13d77cbeee597e6fd5c5aaf295fbaa672f07ab"},"cell_type":"code","source":"#Dropping the variable \"Cabin\" as its mostly empty and will not be of much help\nfullset$Cabin<-NULL","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"1f1d99e77b224a0b56ea965842f2650d8ac9b7cd"},"cell_type":"markdown","source":"**Impact of each variable on the survival rate**"},{"metadata":{"_uuid":"a8f56d40ad5a0db89205cf40b9ea93f9e1a3727a"},"cell_type":"markdown","source":"1. **Pclass**"},{"metadata":{"trusted":true,"_uuid":"f88889cb6c000b7337f793f3cd2c8b0079782360","scrolled":true},"cell_type":"code","source":"#Converting the required categorical variables as factor\ntrain_df$Survived<-as.factor(train_df$Survived)\ntrain_df$Pclass<-as.factor(train_df$Pclass)\n\nggplot(train_df, aes(x= Pclass, fill = Survived)) +\n       geom_bar(width=0.3) \n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"68d9002ccda90780f07cc48ed1f241018bc666fe"},"cell_type":"markdown","source":"The third class seems to be the one in which most people are travelling. Also survival rates are better for the 1st and 2nd class which had the richer folks."},{"metadata":{"_uuid":"d544dbbe970fcebe5e226d606a4ad0c817f8a690"},"cell_type":"markdown","source":"2. **Sex**"},{"metadata":{"trusted":true,"_uuid":"a8e858e4bc403dc45f7e884bbf301f53f3d6197f","scrolled":true},"cell_type":"code","source":"ggplot(train_df, aes(x= Sex, fill = Survived)) +\n       geom_bar(width=0.3)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"258afc73f31578fbc3c341938e084dac8cde03c7"},"cell_type":"markdown","source":"We can easily conclude from the chart that the survival rate was higher in females as compared to males."},{"metadata":{"_uuid":"7697b46364dd69841b0c7d12954a57d7a7f1c1f2"},"cell_type":"markdown","source":"**3. Considering \"Pclass\" and \"Sex\" together**"},{"metadata":{"trusted":true,"_uuid":"f8644ce7d63c04b6ea95e4629a7fd7e05990f443"},"cell_type":"code","source":"ggplot(train_df, aes(Sex)) +\n  facet_wrap(~Pclass) +\n  geom_bar(aes(y = (..count..)/sum(..count..), fill=Survived), stat= \"count\")+\n  geom_text(aes(label = scales::percent(round((..count..)/sum(..count..),2)),\n                y= ((..count..)/sum(..count..))), stat=\"count\",\n            vjust = -.25) +\n  ggtitle(\"Class\") + labs(y = \"percent\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"fe274fb91be59e8c2be84eb38f6106fef782312d"},"cell_type":"markdown","source":"Almost all females have survived for the first and 2nd class"},{"metadata":{"_uuid":"609325dee145dbca6cde1b76975e3d5ff001ba2f"},"cell_type":"markdown","source":"**Check for Imbalance in the Dependent Variable**"},{"metadata":{"trusted":true,"_uuid":"e4ae7ce39cf4436fdc054aa71c47828bee37036a"},"cell_type":"code","source":"Imbalance_Check<-aggregate(PassengerId~Survived,train_df,length)\ncolnames(Imbalance_Check)[2]<-\"No_of_passengers\"\nImbalance_Check$Contribution<-(Imbalance_Check$No_of_passengers/sum(Imbalance_Check$No_of_passengers))*100\nImbalance_Check","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"f1840acc5b1e71c5ba4cc797f71cfefea8688f99"},"cell_type":"markdown","source":"**MISSING VALUE IMPUTATION**"},{"metadata":{"trusted":true,"_uuid":"bb4c202085512844636c89571df3627a6ae6c99c"},"cell_type":"code","source":"#Checking for missing values\nsummary(fullset)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d3d57e4050985316879d58efab740803ecdc2740"},"cell_type":"markdown","source":"Imputation for the variable **Embarked**\n\nSince there are just 2 missing values for this variable we impute it with the most occuring frequency for Embarked"},{"metadata":{"trusted":true,"_uuid":"cb0b3344eb2322385754dc2c0eba1931a4faf76d"},"cell_type":"code","source":"fullset$Embarked[fullset$Embarked==\"\"]<-\"S\"\nsummary(fullset$Embarked)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"dbab804a4661477f22685729ce2cf9f58871b602"},"cell_type":"markdown","source":"Imputation for the variable **Age**"},{"metadata":{"trusted":true,"_uuid":"797f39ae6de3af9a6a80408fa1d0fd4b00526b59"},"cell_type":"code","source":"#We segment the data using Pclass, Sex and Embarked and find the mean age of each segment \nMeans_Age<-summarise(group_by(fullset,Pclass,Sex,Embarked), Mean_Age=mean(Age,na.rm=T))\nMeans_Age$key<-paste0(Means_Age$Pclass,\"_\",Means_Age$Sex,\"_\",Means_Age$Embarked)\n\nhead(Means_Age)\n\n#Mapping the mean of each segment back to the actual data\nfullset$key<-paste0(fullset$Pclass,\"_\",fullset$Sex,\"_\",fullset$Embarked)\nfullset<-merge(x=fullset, y=Means_Age[,c(\"key\",\"Mean_Age\")], by=\"key\",all.x=T)\n\n#Imputing the missing values of Age with the mean of the respective segments\nfullset$Age<-ifelse(is.na(fullset$Age),fullset$Mean_Age,fullset$Age) \nfullset$Mean_Age<-NULL\nfullset$key<-NULL\nsummary(fullset$Age)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"9494b9d2258bebf867ed342fcd1c0fa9fa4be87f"},"cell_type":"markdown","source":"Imputation for the variable **Fare**\n\nSince there is only one missing observation in the variable we replace it with its mean"},{"metadata":{"trusted":true,"_uuid":"3c55ca2bd9e19fb3e38f6bf2a936549420a4b7f0"},"cell_type":"code","source":"fullset$Fare<-ifelse(is.na(fullset$Fare),mean(fullset$Fare, na.rm=T), fullset$Fare)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"4e0ca1e5584cda42bca8707de72708d95696ce0d"},"cell_type":"markdown","source":"**FEATURE ENGINEERING**\n\nFeature engineering is the process of transforming raw data into features that better represent the underlying problem to the predictive models, resulting in improved model accuracy on unseen data.\n\nIt is the science of extracting more information from existing data. This newly extracted information can be used as input to our prediction model. So, better the features that you prepare and choose, the better the results you will achieve."},{"metadata":{"_uuid":"efa35bdd24f82fafa998ffb199790b3ce92aa3e1"},"cell_type":"markdown","source":"Interpretting the variable **\"Name\"**"},{"metadata":{"trusted":true,"_uuid":"615139bc568771faf68a740a5fb6064e2274c699"},"cell_type":"code","source":"fullset$Title <- sapply(as.character(fullset$Name),FUN = function(x){strsplit(x,\"[,.]\")[[1]][2]}) \nfullset$Title <- sub(' ', '', fullset$Title) \nfullset$Title<-as.factor(fullset$Title)\n\nsummary(fullset$Title)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"317c5c593409b6278ab797c8b71d2e092b6c41eb"},"cell_type":"code","source":"# There are many titles having less frequency and they can be grouped.\nfullset$Title <- as.character(fullset$Title) \nfullset$Title[fullset$Title %in% c(\"Mlle\",\"Ms\")] <- \"Miss\" \nfullset$Title[fullset$Title == \"Mme\"] <- \"Mrs\" \nfullset$Title[fullset$Title %in% c( \"Don\", \"Sir\", \"Jonkheer\",\"Rev\",\"Dr\")] <- \"Sir\" \nfullset$Title[fullset$Title %in% c(\"Dona\", \"Lady\", \"the Countess\")] <- \"Lady\" \nfullset$Title[fullset$Title %in% c(\"Capt\",\"Col\", \"Major\")] <- \"Officer\" \nfullset$Title <- as.factor(fullset$Title) \n\nsummary(fullset$Title)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a632391649bf5ef725fabf3d3d1ca57d0ae47855"},"cell_type":"markdown","source":"Interpretting the variables **SibSp** and **Parch**\n\nThe variables could be used to generate information on the Family, particularly its size as families tend to be together and may help us in our predictions."},{"metadata":{"trusted":true,"_uuid":"eeb452513054e6d091cbd819aa2b3ddccb1fdec5"},"cell_type":"code","source":"fullset$FamSize <- fullset$SibSp + fullset$Parch \ntable(fullset$FamSize)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8fe59b41119ded502fcfae106db71aae3b485fb8"},"cell_type":"markdown","source":"Family Size of **0** refers that there are folks who are travelling alone as well. We will group these families according to their family size."},{"metadata":{"trusted":true,"_uuid":"a01f81854784e8cae9a4b9547c556eea1b9a2f1b"},"cell_type":"code","source":"fullset$FamGroup[fullset$FamSize == 0] <- 'Individual' \nfullset$FamGroup[fullset$FamSize < 5 & fullset$FamSize > 0] <- 'small' \nfullset$FamGroup[fullset$FamSize > 4] <- 'large' \nfullset$FamGroup <- as.factor(fullset$FamGroup)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"cc95b66268cd6b74ab88dbffa4e33f59d06f3e87"},"cell_type":"markdown","source":"Interpretting the variable **Ticket**"},{"metadata":{"trusted":true,"_uuid":"8b537b79f1f05d8697336ded7d31b29488448fff"},"cell_type":"code","source":"#Count of unique tickets\nlength(unique(fullset$Ticket))\n\n#Count of passengers\nlength(unique(fullset$PassengerId))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"e995b67ee18f9258ee2ab3294d8466f880afc7f4"},"cell_type":"markdown","source":"The number of unique tickets is less than the number of passengers which clearly states that there are people travelling together and their fare is addition of the fares for the number of people travelling on a same ticket. "},{"metadata":{"trusted":true,"_uuid":"fd30f32cbd789a6978d1c385db0695dd18bb1627"},"cell_type":"code","source":"Ticket_Count <- data.frame(table(fullset$Ticket))\nhead(Ticket_Count)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"539a09b685600f1b3d15d1bae40a4f57deb9b606"},"cell_type":"code","source":"# Assign the frequency of each ticket appearance\nfullset <- merge(fullset,Ticket_Count, by.x=\"Ticket\", by.y=\"Var1\", all.x=T) ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"02ec4da26818c614d26a0ddd98e63c4a15bfcabf"},"cell_type":"markdown","source":"Generating a new variable \"**Ticket Size**\" based on the frequency of each ticket"},{"metadata":{"trusted":true,"_uuid":"ea77da2b02ee479ed2db9dac08d0d132206be5d9"},"cell_type":"code","source":"fullset$Ticket_Size[fullset$Freq==1]<-'Single'\nfullset$Ticket_Size[fullset$Freq >=2 & fullset$Freq < 5] <- \"Small\"\nfullset$Ticket_Size[fullset$Freq>= 5]<-\"Big\"\nfullset$Ticket_Size<-as.factor(fullset$Ticket_Size)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"1e961b9b9b3b837c8d4df591acea92d555bae8c6"},"cell_type":"markdown","source":"Interpretting the variable **Age**\n\nThe variable could be used to generate a variable that identifies each passenger as minor/adult"},{"metadata":{"trusted":true,"_uuid":"abdbf47cdcbf25df7029ce960927a79653d799f3"},"cell_type":"code","source":"fullset$isMinor[fullset$Age < 18] <- 'Minor' \nfullset$isMinor[fullset$Age >= 18] <- 'Adult'\nfullset$isMinor<-as.factor(fullset$isMinor)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"ee35c85f79285d191b960ea5e858acecfa310b1a"},"cell_type":"markdown","source":"**Let's have a look at the final data**"},{"metadata":{"trusted":true,"_uuid":"317a80046c15ec9032a63a1a637fd1f13a565c77"},"cell_type":"code","source":"#Checking the final prepared data\nhead(fullset)\nstr(fullset)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"c096e7dbc4e6bde25c4ffb7543d525af09d5c8ab"},"cell_type":"markdown","source":"There are some categorical variables which will be utilised in the model and needs to converted to \"factor\""},{"metadata":{"trusted":true,"_uuid":"5570fde68f1670beee637b5490d0f905f51aa600"},"cell_type":"code","source":"#Converting the required categorical variables as factor\nfullset$Survived<-as.factor(fullset$Survived)\nfullset$Pclass<-as.factor(fullset$Pclass)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"9aa7ddb7bc87d7ba5e4908cd690b8bea63320c5d"},"cell_type":"markdown","source":"**Extracting the training data from the entire data**"},{"metadata":{"trusted":true,"scrolled":true,"_uuid":"4675b23f51291c94315dfc9d38b704f6af18d9d5"},"cell_type":"code","source":"#Subsetting the train_df\ntrain_df<-subset(fullset, !(fullset$Survived==\"\"))\n\n#The dependent variable has 3 levels, but needs it to be binomial so dropping the non-essential levels\nstr(train_df$Survived)\nx<-data.frame(Survived=droplevels(train_df$Survived))\ntrain_df$Survived<-NULL\ntrain_df<-cbind(train_df,x)\nstr(train_df$Survived)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"47fa7a98133a8e44416e907141cca4a0f5dc0d8b"},"cell_type":"markdown","source":"We need to perform cross validation on any machine learning algorithm that we apply so we will set aside 20% of the data for the purpose of validation"},{"metadata":{"trusted":true,"_uuid":"44ae665c3d5b5005b9d81775d3cd3bb0fb0b7f31"},"cell_type":"code","source":"train_val<-sample_frac(train_df, size=0.8)\ntest_val<-subset(train_df,!(train_df$PassengerId %in% train_val$PassengerId ))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"cb96ecf5e23cf1810c7795ab685953b9375e7814"},"cell_type":"markdown","source":"**LOGISTIC REGRESSION**"},{"metadata":{"trusted":true,"_uuid":"b56d362f7347c49974cf83f5c97e97faa9d7f1bc","scrolled":true},"cell_type":"code","source":"mod<-glm(Survived ~ Pclass + Title + FamGroup + Sex +isMinor+ Ticket_Size+Embarked,\n         data= train_val, family= 'binomial')\nsummary(mod)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"9ca572b908a406b10387cc38c1ba37970eec2daa"},"cell_type":"markdown","source":"Predicting the probabilities obtained from the model"},{"metadata":{"trusted":true,"_uuid":"b5f65e5d893f4ee26c1b741e4335171e12c523ac","scrolled":true},"cell_type":"code","source":"predict_train <- predict(mod, train_val, type='response')\nprob_train<-ifelse( predict_train > 0.5,1,0)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"10085438b415147995075ae2e0735c7ddb8476f8"},"cell_type":"markdown","source":"**Confusion Matrix**"},{"metadata":{"trusted":true,"_uuid":"aa39be291c931b29677df9e6b7837d3eafd613ef"},"cell_type":"code","source":"#Classification error\nconfusion_matrix_train <- table(prob_train,  train_val$Survived)\nprint(confusion_matrix_train)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"0a0686b9fb90fafe9c77d92f4ec3e698eb4640e0"},"cell_type":"markdown","source":"**Model Accuracy**"},{"metadata":{"trusted":true,"scrolled":true,"_uuid":"748a2d56ed80099e6779b327ae46f8f951f0069a"},"cell_type":"code","source":"#Accuracy percent of the model\nAccuracy_train<-sum(diag(confusion_matrix_train))/sum(confusion_matrix_train)\nprint(Accuracy_train*100)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"163c54fc48dbb1e04cf08722327f0b02d1f84100"},"cell_type":"markdown","source":"**ROCR Curve**"},{"metadata":{"trusted":true,"_uuid":"aac5ef894d2bbf2a61010884e64cad2660d27102"},"cell_type":"code","source":"#The ROCR Curve\npred1 <- prediction(predict(mod), train_val$Survived)\nperf1 <- performance(pred1,\"tpr\",\"fpr\")\nplot(perf1)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"607d5a180f1e140384930f9937d9890eb106c908"},"cell_type":"markdown","source":"Let's check the accuracy of the model with the data set aside for validation"},{"metadata":{"trusted":true,"_uuid":"7bd96523ae902b5bbda69c9a61bc456af348c529"},"cell_type":"code","source":"predict_test<-predict(mod,test_val, type='response')\nprob_test<-ifelse(predict_test>0.5,1,0)\n\n#Confusion matrix for test data\nconfusion_matrix_test <- table(prob_test,  test_val$Survived)\n\n#Accuarcy of the model \nAccuracy_test<-sum(diag(confusion_matrix_test))/sum(confusion_matrix_test)\nprint(Accuracy_test*100)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"c2510d84a19776fe1edac6ee8a43f70525bd9821"},"cell_type":"markdown","source":"**There isn't any significant change in accuracy of the model so we can assume our model performs well.\nBut can we raise the accuracy of the model using some other technique?\nSo let us try the Decision Tree approach**"},{"metadata":{"_uuid":"f66ed94d6903b8c14a0c3c2bb52f3625c6b7ef97"},"cell_type":"markdown","source":"**DECISION TREE**"},{"metadata":{"trusted":true,"_uuid":"0fb2e025d8532bab8ffe32ac6461539d7163bb05"},"cell_type":"code","source":"mymod<-rpart(Survived ~ Pclass + Title + FamGroup + Sex +isMinor + Ticket_Size+Embarked,\n         data= train_val, method=\"class\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"857d978f0c199c750dfc4c6a8f7f062326862507"},"cell_type":"markdown","source":"Let's try plotting the tree"},{"metadata":{"trusted":true,"_uuid":"ca7682aaa59ecc7a983cd8133811125ea4e1ab19","scrolled":true},"cell_type":"code","source":"rpart.plot(mymod,fallen.leaves = F ,extra=3)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"24ee6a3fd41c99441208f40fe968075946b5e99f"},"cell_type":"markdown","source":"**Confusion Matrix**"},{"metadata":{"trusted":true,"_uuid":"0c29f3e0019d6623301481e09e16798075a17a38","scrolled":false},"cell_type":"code","source":"predict_train_dt=predict(mymod,data=train_val,type=\"class\")\nconfusionMatrix(predict_train_dt,train_val$Survived)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"35604ae46e3d6090f48c0603572ab220875ce39f"},"cell_type":"markdown","source":"Let's check the accuracy of the model with the data set aside for validation"},{"metadata":{"trusted":true,"_uuid":"a98f3f9ea771d90280e9dffefc057b323d358402"},"cell_type":"code","source":"#predicting on test data\nprediction_test_dt <- predict(mymod,test_val, type='class') \nconfusionMatrix(prediction_test_dt,test_val$Survived)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d200a809febdbd8e467cab95c00e742673d8b79e"},"cell_type":"markdown","source":"The accuracy achieved using the data set aside for validation is also similar hence our model fits the data well.\nOverall, we see some improvement in the accuracy of the model using the Decision Tree approach.\nLet's try random forest to understand if any further imrovement can be brought to the model."},{"metadata":{"_uuid":"b84d1bccc0d8e430506043fa90115261e1590a18"},"cell_type":"markdown","source":"**RANDOM FOREST**"},{"metadata":{"trusted":true,"_uuid":"6a4bb9833ba02cf8f7a16463a49a5267da049001"},"cell_type":"code","source":"set.seed(1234) # to get a reproducible random result.\nmod_rf <- randomForest(Survived ~ Pclass + Title + FamGroup + Sex +isMinor+ Ticket_Size+Embarked,\ndata= train_val[,c(\"Survived\",\"Pclass\",\"Title\",\"FamGroup\",\"Sex\",\"isMinor\",\"Ticket_Size\",\"Embarked\")],\n                       importance = TRUE, ntree = 1000,mtry=2)\nprint(mod_rf)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"scrolled":true,"_uuid":"f06ad4ec37f05ae19c47bf1523bc923d91934f08"},"cell_type":"code","source":"varImpPlot(mod_rf)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"deaa0f630c4658f500c895d538f64c6e8c77fc07"},"cell_type":"markdown","source":"We may be able to raise the accuracy of the model by dropping the variable \"Embarked\" based on the results above."},{"metadata":{"trusted":true,"_uuid":"7be7aa4950fdc3bac76992ab9b0c5414c5d94197"},"cell_type":"code","source":"set.seed(1234) # to get a reproducible random result.\nmod_rf <- randomForest(Survived ~ Pclass + Title + FamGroup + Sex +isMinor+ Ticket_Size,\ndata= train_val[,c(\"Survived\",\"Pclass\",\"Title\",\"FamGroup\",\"Sex\",\"isMinor\",\"Ticket_Size\")],\n                       importance = TRUE, ntree = 1000,mtry=2)\nprint(mod_rf)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"dfce93e68f732fcb3a03902ca7aba626792c3120"},"cell_type":"markdown","source":"Let us use the data set aside for cross validation on the random forest model."},{"metadata":{"trusted":true,"_uuid":"0e4be8e257e89ec029afe5c524b671f2ccc306a5"},"cell_type":"code","source":"set.seed(1234) # to get a reproducible random result.\nmod_rf_val <- randomForest(Survived ~ Pclass + Title + FamGroup + Sex +isMinor+ Ticket_Size+Embarked,\ndata= test_val[,c(\"Survived\",\"Pclass\",\"Title\",\"FamGroup\",\"Sex\",\"isMinor\",\"Ticket_Size\",\"Embarked\")],\n                       importance = TRUE, ntree = 1000,mtry=2)\nprint(mod_rf_val)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"f446df77f4d1d9be8ded798a580891dcb02a83f6"},"cell_type":"markdown","source":"The validation data confirms the appropriateness of the model and provides a better accuracy measure."},{"metadata":{"_uuid":"447507036f2c2e61cfeb7b706302bcee36315622"},"cell_type":"markdown","source":"Let us proceed to apply the model on the test data set.\n\n**Extracting the test data from the entire data**"},{"metadata":{"trusted":true,"_uuid":"628f36cd50402af9e8d2b4a1b6e9dd4073bfe8e2"},"cell_type":"code","source":"#Subsetting the test_df\ntest_df<-subset(fullset, (fullset$Survived==\"\"))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"4a6f7faeb28bc11859bffa739c6b120a3fd9916b"},"cell_type":"markdown","source":"**Applying the model on the actual test data**"},{"metadata":{"trusted":true,"_uuid":"ca0a8bc0fdadf37f4d8900996a3a8f909793a8e0"},"cell_type":"code","source":"#predicting on test data\nprediction_final <- predict(mod_rf,test_df) \n#creating a submission data frame of required format\nsubmission <- data.frame(PassengerID = test_df$PassengerId, Survived = prediction_final) \n#write a csv output file\nwrite.csv(submission, file = 'Submission.csv', row.names = F)","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}