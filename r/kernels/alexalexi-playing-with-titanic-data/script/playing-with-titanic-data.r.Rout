
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> # This R environment comes with all of CRAN preinstalled, as well as many other helpful packages
> # The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats
> # For example, here's several helpful packages to load in 
> suppressMessages(library(tidyverse))
Warning messages:
1: package â€˜ggplot2â€™ was built under R version 3.6.2 
2: package â€˜tibbleâ€™ was built under R version 3.6.2 
3: package â€˜tidyrâ€™ was built under R version 3.6.2 
4: package â€˜purrrâ€™ was built under R version 3.6.2 
5: package â€˜dplyrâ€™ was built under R version 3.6.2 
> library(tidyverse)
> library(dplyr)
> library(ggplot2) # Data visualization
> library(readr) # CSV file I/O, e.g. the read_csv function
> library(stringr)
> 
> # Input data files are available in the "../input/" directory.
> # For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory
> 
> list.files("../input")
[1] "gender_submission.csv" "test.csv"              "train.csv"            
> 
> # Any results you write to the current directory are saved as output.
> 
> df_training <- read_csv('../input/train.csv')
Parsed with column specification:
cols(
  PassengerId = [32mcol_double()[39m,
  Survived = [32mcol_double()[39m,
  Pclass = [32mcol_double()[39m,
  Name = [31mcol_character()[39m,
  Sex = [31mcol_character()[39m,
  Age = [32mcol_double()[39m,
  SibSp = [32mcol_double()[39m,
  Parch = [32mcol_double()[39m,
  Ticket = [31mcol_character()[39m,
  Fare = [32mcol_double()[39m,
  Cabin = [31mcol_character()[39m,
  Embarked = [31mcol_character()[39m
)
> df_testing  <- read_csv('../input/test.csv')
Parsed with column specification:
cols(
  PassengerId = [32mcol_double()[39m,
  Pclass = [32mcol_double()[39m,
  Name = [31mcol_character()[39m,
  Sex = [31mcol_character()[39m,
  Age = [32mcol_double()[39m,
  SibSp = [32mcol_double()[39m,
  Parch = [32mcol_double()[39m,
  Ticket = [31mcol_character()[39m,
  Fare = [32mcol_double()[39m,
  Cabin = [31mcol_character()[39m,
  Embarked = [31mcol_character()[39m
)
> 
> df  <- bind_rows(df_training, df_testing)
> 
> glimpse(df)
Rows: 1,309
Columns: 12
$ PassengerId [3m[90m<dbl>[39m[23m 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17â€¦
$ Survived    [3m[90m<dbl>[39m[23m 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, â€¦
$ Pclass      [3m[90m<dbl>[39m[23m 3, 1, 3, 1, 3, 3, 1, 3, 3, 2, 3, 1, 3, 3, 3, 2, 3, 2, 3, â€¦
$ Name        [3m[90m<chr>[39m[23m "Braund, Mr. Owen Harris", "Cumings, Mrs. John Bradley (Fâ€¦
$ Sex         [3m[90m<chr>[39m[23m "male", "female", "female", "female", "male", "male", "maâ€¦
$ Age         [3m[90m<dbl>[39m[23m 22, 38, 26, 35, 35, NA, 54, 2, 27, 14, 4, 58, 20, 39, 14,â€¦
$ SibSp       [3m[90m<dbl>[39m[23m 1, 1, 0, 1, 0, 0, 0, 3, 0, 1, 1, 0, 0, 1, 0, 0, 4, 0, 1, â€¦
$ Parch       [3m[90m<dbl>[39m[23m 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 5, 0, 0, 1, 0, 0, â€¦
$ Ticket      [3m[90m<chr>[39m[23m "A/5 21171", "PC 17599", "STON/O2. 3101282", "113803", "3â€¦
$ Fare        [3m[90m<dbl>[39m[23m 7.2500, 71.2833, 7.9250, 53.1000, 8.0500, 8.4583, 51.8625â€¦
$ Cabin       [3m[90m<chr>[39m[23m NA, "C85", NA, "C123", NA, NA, "E46", NA, NA, NA, "G6", "â€¦
$ Embarked    [3m[90m<chr>[39m[23m "S", "C", "S", "S", "S", "Q", "S", "S", "S", "C", "S", "Sâ€¦
> 
> 
> 
> head(df)
[90m# A tibble: 6 x 12[39m
  PassengerId Survived Pclass Name  Sex     Age SibSp Parch Ticket  Fare Cabin
        [3m[90m<dbl>[39m[23m    [3m[90m<dbl>[39m[23m  [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m [3m[90m<chr>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m  [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m
[90m1[39m           1        0      3 Brauâ€¦ male     22     1     0 A/5 2â€¦  7.25 [31mNA[39m   
[90m2[39m           2        1      1 Cumiâ€¦ femaâ€¦    38     1     0 PC 17â€¦ 71.3  C85  
[90m3[39m           3        1      3 Heikâ€¦ femaâ€¦    26     0     0 STON/â€¦  7.92 [31mNA[39m   
[90m4[39m           4        1      1 Futrâ€¦ femaâ€¦    35     1     0 113803 53.1  C123 
[90m5[39m           5        0      3 Alleâ€¦ male     35     0     0 373450  8.05 [31mNA[39m   
[90m6[39m           6        0      3 Moraâ€¦ male     [31mNA[39m     0     0 330877  8.46 [31mNA[39m   
[90m# â€¦ with 1 more variable: Embarked [3m[90m<chr>[90m[23m[39m
> 
> survival_table <- df %>% 
+     filter(is.finite(Survived)) %>%
+     group_by(Pclass, Survived) %>% 
+     summarise(n_group = n()) %>%
+     group_by(Pclass) %>%    # strictly speaking this line is redundant but it's clearer to understand this way
+     mutate(n_class_total = sum(n_group)) %>%
+     mutate(percent_of_class = n_group / n_class_total)
`summarise()` regrouping output by 'Pclass' (override with `.groups` argument)
> 
> survival_table
[90m# A tibble: 6 x 5[39m
[90m# Groups:   Pclass [3][39m
  Pclass Survived n_group n_class_total percent_of_class
   [3m[90m<dbl>[39m[23m    [3m[90m<dbl>[39m[23m   [3m[90m<int>[39m[23m         [3m[90m<int>[39m[23m            [3m[90m<dbl>[39m[23m
[90m1[39m      1        0      80           216            0.370
[90m2[39m      1        1     136           216            0.630
[90m3[39m      2        0      97           184            0.527
[90m4[39m      2        1      87           184            0.473
[90m5[39m      3        0     372           491            0.758
[90m6[39m      3        1     119           491            0.242
> 
> # Another way to show the same date:
> # 'pivot' the table so we see survival status as column headings
> survival_table %>%
+     select(one_of(c('Pclass','Survived','percent_of_class'))) %>%
+     spread("Survived","percent_of_class")
[90m# A tibble: 3 x 3[39m
[90m# Groups:   Pclass [3][39m
  Pclass   `0`   `1`
   [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m
[90m1[39m      1 0.370 0.630
[90m2[39m      2 0.527 0.473
[90m3[39m      3 0.758 0.242
> 
> # A further way to show the survival rates. Using ggplot2, we can 
> # create a 'heatmap' from coloured tiles, and put labels on to show the values:
> survival_table %>%
+     ggplot(aes(x=factor(Survived), y = factor(Pclass),   # 'factor' is just to get the scales looking nice
+                fill = percent_of_class)) +
+     geom_tile() +   
+     coord_equal()  + # this just makes all the tiles square instead of rectangular
+     labs(title="Survival Rates on RMS Titanic", subtitle="by passenger class, ignoring unknown cases",
+          x="Survival Status", y = "Passenger Class") +
+     geom_text(aes(label= percent_of_class), colour="white") +
+     geom_text(aes(label= sprintf("%1.1f%%",      # 'sprintf...' is to format the percentages in a legible way
+                                  100*percent_of_class)), 
+               nudge_y = -0.2, colour="pink")
> 
> 
> # first, create a couple of new variables (columns)
> # variable 'deck' using the first character in the Cabin number column
> df <- df %>% 
+     mutate(deck = str_sub(Cabin, 1,1))
> 
> # a 'child' variable. Note we create this as a 'factor', this makes it easier to read later
> df <- df %>%
+     mutate(ac = Age>=16, adult_child = factor(Age>=16, labels=c('child','adult')))
> 
> # make the 'embarked' variable more readable, and put them in the correct order of the voyage
> # recall, C = Cherbourg, Q = Queenstown, S = Southampton
> df <- df %>%
+     mutate(embarked_name = factor(Embarked, 
+                                   levels=c('S','C','Q'), 
+                                   labels=c('Southampton','Cherbourg','Queenstown')))
> 
> head(df)
[90m# A tibble: 6 x 16[39m
  PassengerId Survived Pclass Name  Sex     Age SibSp Parch Ticket  Fare Cabin
        [3m[90m<dbl>[39m[23m    [3m[90m<dbl>[39m[23m  [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m [3m[90m<chr>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m  [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m
[90m1[39m           1        0      3 Brauâ€¦ male     22     1     0 A/5 2â€¦  7.25 [31mNA[39m   
[90m2[39m           2        1      1 Cumiâ€¦ femaâ€¦    38     1     0 PC 17â€¦ 71.3  C85  
[90m3[39m           3        1      3 Heikâ€¦ femaâ€¦    26     0     0 STON/â€¦  7.92 [31mNA[39m   
[90m4[39m           4        1      1 Futrâ€¦ femaâ€¦    35     1     0 113803 53.1  C123 
[90m5[39m           5        0      3 Alleâ€¦ male     35     0     0 373450  8.05 [31mNA[39m   
[90m6[39m           6        0      3 Moraâ€¦ male     [31mNA[39m     0     0 330877  8.46 [31mNA[39m   
[90m# â€¦ with 5 more variables: Embarked [3m[90m<chr>[90m[23m, deck [3m[90m<chr>[90m[23m, ac [3m[90m<lgl>[90m[23m,[39m
[90m#   adult_child [3m[90m<fct>[90m[23m, embarked_name [3m[90m<fct>[90m[23m[39m
> 
> 
> # now, get a general view of the distribution of ticket prices
> # note, the y-axis is meaningless, it's just there so that we can 'jitter'
> # the individual points to make them a bit more legible
> df %>% 
+     filter(Fare>0) %>%
+     ggplot(aes(x=Fare, y=0)) +
+     geom_jitter(aes(colour=factor(Pclass)))
>     
> 
> # What can we do to make this picture clearer to understand?
> # Firstly, let's use a 'log scale' to make the low fares more visible
> df %>% 
+     filter(Fare>0) %>%
+     ggplot(aes(x=Fare, y=0)) +
+     geom_jitter(aes(colour=factor(Pclass))) +
+     scale_x_continuous(trans='log2')
> 
> # next, we can use a 'density' graph. This shows roughly the distribution
> # of number of passengers at each level of fare
> df %>% 
+     filter(Fare>0) %>%
+     mutate(class = factor(Pclass)) %>%
+     ggplot(aes(x=Fare)) +
+     geom_density(aes(group=class, colour=class, fill=class, alpha=0.15)) +
+     scale_x_continuous(trans='log2')
> 
> df %>% 
+     filter(Fare>0) %>%
+     mutate(class = factor(Pclass)) %>%
+     ggplot(aes(x=Fare)) +
+     geom_density(aes(group=class, colour=class, fill=class, alpha=0.15)) +
+     scale_x_continuous(trans='log2') +
+     facet_wrap(~deck)
Warning messages:
1: Groups with fewer than two data points have been dropped. 
2: In max(ids, na.rm = TRUE) :
  no non-missing arguments to max; returning -Inf
> 
> df %>% 
+     filter(Fare>0 & !is.na(embarked_name)) %>%
+     mutate(class = factor(Pclass)) %>%
+     ggplot(aes(x=Fare)) +
+     geom_density(aes(group=class, colour=class, fill=class, alpha=0.15)) +
+     scale_x_continuous(trans='log2') +
+     coord_cartesian(ylim=c(0,3)) +
+     facet_wrap(~embarked_name) +
+     theme(legend.position='top') +
+     scale_alpha(guide='none') +
+     labs(title="Fares on RMS Titanic", subtitle="by embarkation point")
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
  2.976   0.144   3.230 
