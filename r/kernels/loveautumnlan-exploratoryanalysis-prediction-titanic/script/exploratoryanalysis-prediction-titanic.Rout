
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> t_test <- read.csv("../input/test.csv", header=T)
> t_train <- read.csv("../input/train.csv",header=T)
> # Rename test string for easier understanding
> t_train$Survived_ <- as.factor(with(t_train, 
+                                     ifelse(Survived=="1","Survived", 
+                                            ifelse(Survived==0,"Died","N/A"))))
> #combine the data and check the structure 
> t_test[,c("Survived","Survived_")] <- NA
> t_full <- rbind(t_train,t_test)  
> str(t_full) #check data structure
'data.frame':	1309 obs. of  13 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : Factor w/ 1307 levels "Abbing, Mr. Anthony",..: 109 191 358 277 16 559 520 629 417 581 ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : Factor w/ 929 levels "110152","110413",..: 524 597 670 50 473 276 86 396 345 133 ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : Factor w/ 187 levels "","A10","A14",..: 1 83 1 57 1 1 131 1 1 1 ...
 $ Embarked   : Factor w/ 4 levels "","C","Q","S": 4 2 4 4 4 3 4 4 4 2 ...
 $ Survived_  : Factor w/ 2 levels "Died","Survived": 1 2 2 2 1 1 1 1 2 2 ...
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> prop.table(table(t_train$Survived_))

     Died  Survived 
0.6161616 0.3838384 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> prop.table(table(t_train$Survived_[which(t_train$Sex=='female')]))

     Died  Survived 
0.2579618 0.7420382 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> sapply(t_full, function(x) sum(is.na(x)))
PassengerId    Survived      Pclass        Name         Sex         Age 
          0         418           0           0           0         263 
      SibSp       Parch      Ticket        Fare       Cabin    Embarked 
          0           0           0           1           0           0 
  Survived_ 
        418 
> sapply(t_full,function(x) sum((x)=="")) #count variable with blank value
PassengerId    Survived      Pclass        Name         Sex         Age 
          0          NA           0           0           0          NA 
      SibSp       Parch      Ticket        Fare       Cabin    Embarked 
          0           0           0          NA        1014           2 
  Survived_ 
         NA 
> t_full[is.na(t_full$Fare),]#Which passenger missing Fare ?
     PassengerId Survived Pclass               Name  Sex  Age SibSp Parch
1044        1044       NA      3 Storey, Mr. Thomas male 60.5     0     0
     Ticket Fare Cabin Embarked Survived_
1044   3701   NA              S      <NA>
> 
> 
> ## ----warning=FALSE, message=FALSE, result='hide'---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(ggplot2) #visualization
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library(gridExtra) # multi-panel plot
> library(dplyr) #data manipulation

Attaching package: ‘dplyr’

The following object is masked from ‘package:gridExtra’:

    combine

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> 
> 
> ## ----warning=FALSE---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(t_full, aes(factor(Embarked),Fare,fill=factor(Pclass)))+
+   geom_boxplot()+ ggtitle("Fare by Embarked and Pclass")
Warning message:
Removed 1 rows containing non-finite values (stat_boxplot). 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> t_full$Fare[is.na(t_full$Fare)] <- median(t_full$Fare[which(t_full$Pclass=="3" & t_full$Embarked=="S")],na.rm=T)
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> t_full[t_full[,"Embarked"]=='',] 
    PassengerId Survived Pclass                                      Name
62           62        1      1                       Icard, Miss. Amelie
830         830        1      1 Stone, Mrs. George Nelson (Martha Evelyn)
       Sex Age SibSp Parch Ticket Fare Cabin Embarked Survived_
62  female  38     0     0 113572   80   B28           Survived
830 female  62     0     0 113572   80   B28           Survived
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> t_full$Name <- as.character(t_full$Name)
> str <- grep("George Nelson",t_full$Name,perl=T)
> select_row <- t_full[str,c("Name","Embarked")]
> select_row
                                         Name Embarked
830 Stone, Mrs. George Nelson (Martha Evelyn)         
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> E_F<- with(t_full[t_full$Fare<500,], 
+            aggregate(Fare,list(Embarked=Embarked,Pclass=Pclass),
+                                                 mean,na.rm=T)) #exclude fares higher than 500 to avoid skewed result
> E_F 
   Embarked Pclass        x
1                1 80.00000
2         C      1 95.00639
3         Q      1 90.00000
4         S      1 72.14809
5         C      2 23.30059
6         Q      2 11.73511
7         S      2 21.20692
8         C      3 11.02162
9         Q      3 10.39082
10        S      3 14.42252
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> t_full$Embarked[c(62,830)]="S"
> t_full$Embarked <- factor(t_full$Embarked) #drop useless factor levels
> 
> 
> ## ----warning=FALSE, message=FALSE, result='hide'---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(mice)

Attaching package: ‘mice’

The following objects are masked from ‘package:base’:

    cbind, rbind

Warning message:
package ‘mice’ was built under R version 3.6.2 
> library(lattice) 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> imp_ <- mice(t_full[,c('Pclass','Sex','SibSp','Parch','Fare','Embarked','Age')],
+              m=5, method='pmm', seed=500)  #Impute the missing values

 iter imp variable
  1   1  Age
  1   2  Age
  1   3  Age
  1   4  Age
  1   5  Age
  2   1  Age
  2   2  Age
  2   3  Age
  2   4  Age
  2   5  Age
  3   1  Age
  3   2  Age
  3   3  Age
  3   4  Age
  3   5  Age
  4   1  Age
  4   2  Age
  4   3  Age
  4   4  Age
  4   5  Age
  5   1  Age
  5   2  Age
  5   3  Age
  5   4  Age
  5   5  Age
> print(imp_) #print the result
Class: mids
Number of multiple imputations:  5 
Imputation methods:
  Pclass      Sex    SibSp    Parch     Fare Embarked      Age 
      ""       ""       ""       ""       ""       ""    "pmm" 
PredictorMatrix:
         Pclass Sex SibSp Parch Fare Embarked Age
Pclass        0   1     1     1    1        1   1
Sex           1   0     1     1    1        1   1
SibSp         1   1     0     1    1        1   1
Parch         1   1     1     0    1        1   1
Fare          1   1     1     1    0        1   1
Embarked      1   1     1     1    1        0   1
> 
> #Diagnostic checking: Imputation should be values that close to observation when they are not missing
> p1<- xyplot(imp_, Age ~ Pclass,pch = 20, cex = 1.4)
> p2<- densityplot(imp_)
> grid.arrange(p1,p2,nrow=1,ncol=2)
> stripplot(imp_, pch = 20, cex = 1.2)
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> imp_output1 <- complete(imp_,1)
> imp_output2 <- complete(imp_,2) 
> imp_output3 <- complete(imp_,3) 
> imp_output4 <- complete(imp_,4) 
> imp_output5 <- complete(imp_,5) 
> par(mfrow=c(2,3))
> hist(t_full$Age,  main = 'Original Age', xlab = "Age",col='blue')
> hist(imp_output1$Age,  main = 'Imputed1 Age', xlab = "Age",col='pink')
> hist(imp_output2$Age,  main = 'Imputed2 Age', xlab = "Age",col='pink')
> hist(imp_output3$Age,  main = 'Imputed3 Age', xlab = "Age",col='pink')
> hist(imp_output4$Age,  main = 'Imputed4 Age', xlab = "Age",col='pink')
> hist(imp_output5$Age,  main = 'Imputed5 Age', xlab = "Age",col='pink')
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> t_full$Age <- imp_output2$Age
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> child <- with(t_full, ifelse(Age < 18, "Y","N"))
> t_full$Child <- as.factor(child)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #Split full name into title, first name and last name
> name <- data.frame(do.call(rbind, strsplit(as.vector(t_full$Name), split = "[,.]")))
Warning message:
In base::rbind(...) :
  number of columns of result is not a multiple of vector length (arg 1)
> head(name)
         X1    X2                                     X3        X4
1    Braund    Mr                            Owen Harris    Braund
2   Cumings   Mrs  John Bradley (Florence Briggs Thayer)   Cumings
3 Heikkinen  Miss                                  Laina Heikkinen
4  Futrelle   Mrs          Jacques Heath (Lily May Peel)  Futrelle
5     Allen    Mr                          William Henry     Allen
6     Moran    Mr                                  James     Moran
> t_full$Title<- sub(' ','',name$X2)
> 
> #join the three columns back to original dataset
> H_title <- c('Capt','Col','Don','Dona','Dr','Jonkheer','Lady','Major','Rev','Sir','the Countess')
> O_title <- c('Master','Miss','Mlle','Mme','Mr','Mrs','Ms','Mrs','Ms')
> Title <- with(t_full,
+               ifelse(Title %in% H_title,'Honorific_title',
+                      ifelse(Title %in% O_title,'Ordinal_title','other')))
> 
> #How survival rate differ on title?
> t_full$Title <- as.factor(Title)
> prop.table(table(t_full$Survived_, t_full$Title),2)
          
           Honorific_title Ordinal_title
  Died           0.6521739     0.6152074
  Survived       0.3478261     0.3847926
> 
> 
> ## ----warning=FALSE, message=FALSE, result='hide'---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(reshape2)
Warning message:
package ‘reshape2’ was built under R version 3.6.2 
> library(scales)
Warning message:
package ‘scales’ was built under R version 3.6.2 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #Divided data back into training and testing
> t_train <- t_full[!is.na(t_full$Survived),]
> t_test <- t_full[is.na(t_full$Survived),]
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> attach(t_train)
The following object is masked _by_ .GlobalEnv:

    Title

> 
> #calcute the proportion
> Gender_S <- melt(prop.table(table(Sex,Survived_),1))
> Child_S <- melt(prop.table(table(Child,Survived_),1))
> Title_S <- with(t_train,  melt(prop.table(table(Title,Survived_),1)))
> Pclass_S <- melt(prop.table(table(Pclass,Survived_),1))
> Embarked_S <- melt(prop.table(table(Embarked,Survived_),1))
> SibSp_S <- with(t_train, melt(prop.table(table(SibSp,Survived_),1)))
> 
> #Use plot to show the result
> p1 <- ggplot(Gender_S)+geom_bar(aes(Sex, value,fill=factor(Survived_)),stat="identity")+
+   ggtitle("Gender vs. Survived")+xlab("")+ylab("%")
> p2<- ggplot(Child_S)+geom_bar(aes(Child, value,fill=factor(Survived_)),stat="identity")+
+   ggtitle("Child vs. Survived")+xlab("")+ylab("%")
> p3<- ggplot(Title_S)+geom_bar(aes(Title, value,fill=factor(Survived_)),stat="identity")+
+   ggtitle("Title vs. Survived")+xlab("")+ylab("%")
> p4<-ggplot(Pclass_S)+geom_bar(aes(Pclass, value,fill=factor(Survived_)),stat="identity")+
+   ggtitle("Pclass vs. Survived")+xlab("")+ylab("%")
> p5 <-ggplot(Embarked_S)+geom_bar(aes(Embarked, value,fill=factor(Survived_)),stat="identity")+
+   ggtitle("Embarked vs. Survived")+xlab("")+ylab("%")
> p6 <-ggplot(SibSp_S)+geom_bar(aes(SibSp, value,fill=factor(Survived_)),stat="identity")+
+   ggtitle("SibSp vs. Survived")+xlab("")+ylab("%")
> p7<- ggplot(t_train, aes(x=Age, fill=factor(Survived_)))+
+   geom_histogram(position="dodge",binwidth=1.5) +
+   ggtitle ("Age vs. Survived") +xlab("Age")
> p8<- ggplot(t_train[Fare<500,], aes(factor(Survived), Fare, fill = factor(Survived_))) +
+   geom_boxplot() + ggtitle ("Fare(less than 500) vs. Survived")+xlab("")
> 
> grid.arrange(p1,p2,p3,p4,nrow=2,ncol=2)
> grid.arrange(p5,p6,p7,p8,nrow=2,ncol=2)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> a<-prop.table(table(Sex,Survived_,Embarked),c(1,3))
> # calculate the proportation of survival across gender and embarked
> b<- melt(a)#convert values into a molten data frame
> b$Freq <-  paste(round(b$value*100,digits=1),"%",sep="") #change the format to percentage
> p9<- ggplot(b, aes(x=Embarked, y=value, fill=factor(Survived_))) +  geom_bar(stat="identity") + 
+   facet_wrap(~Sex,ncol=2) + ggtitle("Survival on Gender and Embarked")+
+   xlab("Embarked") +  ylab("%")
> p9
> 
> b2<- melt(prop.table(table(Sex,Survived,Pclass),c(1,3)))
> b2$Freq <-  paste(round(b2$value*100,digits=1),"%",sep="")
> p10<- ggplot(b2, aes(x=Pclass, y=value, fill=factor(Survived))) + 
+   geom_bar(stat="identity") +   facet_wrap(~Sex,ncol=2) +
+   ggtitle("Survival on Gender and Class")+xlab("Pclass") + ylab("%")
> p10
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> set.seed(100)
> dt <- sample(nrow(t_train),nrow(t_train)*0.8) 
> t_train_model <- t_train[dt,]
> t_train_test <- t_train[-dt,]
> 
> 
> ## ----message=FALSE,results='hide'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(rpart) #rpart has good ability to handle missing, since we have a lot of missing values
> library(rpart.plot)
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> set.seed(231)
> tree.train <- rpart(factor(Survived_) ~ 
+                       Pclass + Sex + Age + Child+ SibSp + Parch + Fare + Embarked + Title ,
+                     data=t_train_model,method="class")
> #illustrate the result
> par(mfrow=c(1,1))
> rpart.plot(tree.train, 
+            box.col=c("#FF6666", "#33CCCC")[tree.train$frame$yval],cex=0.8)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> tree.train$cptable 
          CP nsplit rel error    xerror       xstd
1 0.42322097      0 1.0000000 1.0000000 0.04838206
2 0.02808989      1 0.5767790 0.5767790 0.04114587
3 0.01685393      3 0.5205993 0.5430712 0.04024614
4 0.01029963      5 0.4868914 0.5505618 0.04045122
5 0.01000000      9 0.4456929 0.5805243 0.04124223
> # Normally, we select a tree size that minimizes the cross-validated error, which is 'Xerror'
> # Let's automate the selection
> tree.prun<- prune(tree.train, cp=tree.train$cptable[which.min(tree.train$cptable[,"xerror"]),"CP"])
> # show the pruned tree using following code
> #rpart.plot(tree.prun, box.col=c("#FF6666", "#33CCCC")[tree.prun$frame$yval])
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> pr.yhat = predict(tree.prun,newdata=t_train_test,type="class") 
> sum(t_train_test$Survived_==pr.yhat) / nrow(t_train_test) 
[1] 0.8268156
> 
> 
> 
> ## ----message=FALSE,results='hide'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(randomForest) 
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:dplyr’:

    combine

The following object is masked from ‘package:gridExtra’:

    combine

The following object is masked from ‘package:ggplot2’:

    margin

> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> set.seed(122)
> 
> rf.train <- randomForest(factor(Survived_) ~ 
+                            Pclass + Sex + Age + Child+ SibSp + Parch + Fare + Embarked + Title,
+                          data=t_train_model, mtry=3,importance=TRUE) 
> plot(rf.train)
> legend('topright', colnames(rf.train$err.rate), col=1:3, fill=1:3)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> varImpPlot(rf.train)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> rf.yhat = predict(rf.train,newdata=t_train_test,type="class") 
> sum(t_train_test$Survived_==rf.yhat) / nrow(t_train_test) 
[1] 0.8659218
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> set.seed(221)
> bag.train <- randomForest(factor(Survived) ~ 
+                             Pclass + Sex + Age + Child+ SibSp + Parch + Fare + Embarked + Title,
+                           data=t_train_model, mtry=9,importance=TRUE) 
> plot(bag.train)
> legend('topright', colnames(rf.train$err.rate), col=1:3, fill=1:3)
> 
> varImpPlot(bag.train)#generate the importance of variables
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> bag.yhat = predict(bag.train,newdata=t_train_test,type="class") 
> sum(t_train_test$Survived==bag.yhat) / nrow(t_train_test) 
[1] 0.8547486
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> set.seed(122)
> rf.train <- randomForest(factor(Survived) ~ 
+                            Pclass + Sex + Age + Child+ SibSp + Parch + Fare + Embarked + Title,
+                          data=t_train, mtry=3,importance=TRUE) 
> 
> rf.yhat = predict(rf.train,newdata=t_test,type="class") 
> 
> # Save the solution to a dataframe
> Prediction <- data.frame(PassengerID = t_test$PassengerId, Survived = rf.yhat)
> 
> # Output the file
> write.csv(Prediction, file = 'rf_prediction.csv', row.names = F)
> 
> 
> proc.time()
   user  system elapsed 
  6.239   0.250   6.518 
