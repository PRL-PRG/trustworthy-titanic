
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> #This kernal is meant to showcase how a neural network could be built using the titanic dataset as an example
> #Once the neural network is functioning, we then have a base against which to measure our improvement
> #as we begin the process of feature engineering - see 'What's in a NAme' kernal - excellent source
> 
> 
> #load libraries 
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> library(neuralnet)

Attaching package: ‘neuralnet’

The following object is masked from ‘package:dplyr’:

    compute

> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:dplyr’:

    combine

> 
> #reading training and test set in
> 
> full <- read.csv('../input/train.csv', stringsAsFactors = F)
> full2 <- read.csv('../input/test.csv', stringsAsFactors = F)
> 
> # Because this is an old dataset, I will assume you all know where the missing values
> # are, and also have an opinion on how best to deal with them
> 
> sapply(full,function(x) sum(is.na(x)))
PassengerId    Survived      Pclass        Name         Sex         Age 
          0           0           0           0           0         177 
      SibSp       Parch      Ticket        Fare       Cabin    Embarked 
          0           0           0           0           0           0 
> sapply(full2,function(x) sum(is.na(x)))
PassengerId      Pclass        Name         Sex         Age       SibSp 
          0           0           0           0          86           0 
      Parch      Ticket        Fare       Cabin    Embarked 
          0           0           1           0           0 
> 
> #Let's select the variables we are interested in
> 
> variables <- c('Survived','Pclass','Sex','Age','Embarked',
+                  'Fare','Parch','SibSp')
> full <- full[variables]
> variables2 <- c('Pclass','Sex','Age','Embarked',
+                  'Fare','Parch','SibSp')
> full2 <- full2[variables2]
> 
> #let's fill in the missing values
> 
> sapply(full, function(x) sum(is.na(x)))
Survived   Pclass      Sex      Age Embarked     Fare    Parch    SibSp 
       0        0        0      177        0        0        0        0 
> sapply(full2, function(x) sum(is.na(x)))
  Pclass      Sex      Age Embarked     Fare    Parch    SibSp 
       0        0       86        0        1        0        0 
> 
> 
> full$Age[is.na(full$Age)] <- mean(full$Age,na.rm=T)
> full$Fare[is.na(full$Fare)] <- mean(full$Fare,na.rm=T)
> full2$Age[is.na(full2$Age)] <- mean(full2$Age,na.rm=T)
> full2$Fare[is.na(full2$Fare)] <- mean(full2$Fare,na.rm=T)
> 
> #let's have a closer look at Embarked - around 70% have S
> count(full, Embarked)
  Embarked   n
1            2
2        C 168
3        Q  77
4        S 644
> count(full2, Embarked)
  Embarked   n
1        C 102
2        Q  46
3        S 270
> 
> full$Embarked[is.na(full$Embarked)] <- 'S'
> full2$Embarked[is.na(full2$Embarked)] <- 'S'
> 
> sapply(full, function(x) sum(is.na(x)))
Survived   Pclass      Sex      Age Embarked     Fare    Parch    SibSp 
       0        0        0        0        0        0        0        0 
> sapply(full2, function(x) sum(is.na(x)))
  Pclass      Sex      Age Embarked     Fare    Parch    SibSp 
       0        0        0        0        0        0        0 
> 
> full$Embarked <- as.factor(full$Embarked)
> full$Sex <- as.factor(full$Sex)
> full2$Embarked <- as.factor(full2$Embarked)
> full2$Sex <- as.factor(full2$Sex)
> 
> #Ok sweet, no nulls
> #Let's use random forest to see which variables are most important
> 
> rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + Embarked +
+                          Fare + Parch + SibSp,
+                          data = full)
> 
> importance    <- importance(rf_model)
> varImportance <- data.frame(Variables = row.names(importance), 
+                             Importance = round(importance[ ,'MeanDecreaseGini'],2))
> 
> #now we see the variables we want. SO let's divide into a training and test set
> 
> chosen_variables <- c('Survived','Pclass','Sex','Age',
+                'Fare','SibSp')
> full_prepped <- full[chosen_variables]
> chosen_variables2 <- c('Pclass','Sex','Age',
+                'Fare','SibSp')
> full_prepped2 <- full2[chosen_variables2]
> 
> #let's split back into the train and test set
> train <- full_prepped[1:800,]
> test <- full_prepped[801:891,]
> 
> 
> #the neuralnet packages requires input in the form of a matrix, otherwise it doesn't seem to work
> 
> m <- model.matrix( 
+   ~ Survived + Pclass + Sex+ Age + 
+     Fare + SibSp,data = full_prepped)#train)
> 
> nn <- neuralnet( 
+   Survived ~ Pclass + Sexmale+ Age + 
+     Fare + SibSp, 
+   data=m, hidden=2, threshold=0.01, linear.output = F)
Warning message:
Algorithm did not converge in 1 of 1 repetition(s) within the stepmax. 
> 
> #now we do the same thing to the test set to test the nn
> m1 <- model.matrix( 
+   ~ + Pclass + Sex+ Age + #Survived + Pclass + Sex+ Age + 
+     Fare + SibSp,data = full_prepped2)#test)
> 
> #Compute the nn
> #res <- neuralnet::compute(nn, m1[,c("Pclass","Sexmale","Age", 
> #    "Fare","SibSp")])
> res <- neuralnet::compute(nn, m1[,c("Pclass","Sexmale","Age", 
+     "Fare","SibSp")])
Error in cbind(1, pred) %*% weights[[num_hidden_layers + 1]] : 
  requires numeric/complex matrix/vector arguments
Calls: <Anonymous> -> predict.nn
Execution halted
