{"cells":[{"metadata":{"_uuid":"82edd85654bfaada88c798ad1cfe5153abc31124"},"cell_type":"markdown","source":"## **Run this code RStudio**"},{"metadata":{"trusted":true,"_uuid":"93925bb850afb770826605f7a6400b44450eaa73"},"cell_type":"markdown","source":"## **Import R Libraries & Read Files**"},{"metadata":{"trusted":true,"_uuid":"0eb4a4f08b65c3e14ebd100e09ca5d9dd680d91f"},"cell_type":"code","source":"library(tidyverse) # metapackage with lots of helpful functions\nlist.files(path = \"../input\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"2637dc2481ee42697e2c8d452611188d79b3b204"},"cell_type":"code","source":"library(tidyverse) # metapackage with lots of helpful functions\nlist.files(path = \"../input\")\ntitanic.train<-read.csv(file = \"../input/train.csv\",stringsAsFactors = FALSE,header =TRUE)\ntitanic.test<-read.csv(file = \"../input/test.csv\",stringsAsFactors = FALSE,header =TRUE)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"5e8d3b2ad67e4eb6257fde8161b5fdaaf3cf24db"},"cell_type":"markdown","source":"##  **Firstly evaluate the columns of both test and train**"},{"metadata":{"trusted":true,"_uuid":"0afd04bc5d0d6e551645697f3f15c118273b7ad2"},"cell_type":"code","source":"titanic.train$IstrainSet<-TRUE\ntitanic.test$IstrainSet<- FALSE","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"87dbf2a5466737ad1bbd3e87b22a9d718d707cf9"},"cell_type":"markdown","source":"##   **Check for duplicate column names**\n## **You will not find any from above deduction as you see names are same but features are different**\n## **Now add the survived column in test dataset**"},{"metadata":{"trusted":true,"_uuid":"e2c425a9432de337ca4152795dc0362bba7f1eb2"},"cell_type":"code","source":"#dupnames<-as.character(titanic.full[which(duplicated(as.character(titanic.full$Name))),\"Name\"])\n\ntitanic.test$Survived<-NA\n##combine the datasets\ntitanic.full<- rbind(titanic.train,titanic.test)\n##clean the data files\n##replace the blank values of ages in both data sets by median value\nmedian(titanic.train$Age)\n##NA.RM to remove null values\ntable(titanic.full$Embarked)\n##what are those null values\ntitanic.full[titanic.full$Embarked == '',\"Embarked\"]","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"8025e959f39b03039fe6757ef9b57de6645bc305"},"cell_type":"markdown","source":"## **Clean this emabarked data which has nulls && Replace these nulls by most occuring values**"},{"metadata":{"trusted":true,"_uuid":"25d25d691c77e3f8693acd01cace0ad54f678c46"},"cell_type":"code","source":"titanic.full[titanic.full$Embarked == '',\"Embarked\"]<-'S'\n\n##Now replace blanks of age by median\nlibrary(stringr)\n##for(Name in titanic.full)\n#Title1<-str_extract(titanic.full$Name,\"[,] [A-z][a-z].\")\n#Title2<-str_extract(titanic.full$Name,\"[,] [A-z][a-z][a-z].\")\nTitle<-str_extract(titanic.full$Name,\" ([A-Za-z]+)[.]\" )\ntitanic.full$Title<-Title","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"5e0a5176da11e5b23088dcadec54a37882da5fb4"},"cell_type":"markdown","source":"## **Fare values are missing**\n## **Check for outliers through Box Plots**"},{"metadata":{"trusted":true,"_uuid":"0e69a6e9b84732e263ab53df16f92c9111d39814"},"cell_type":"code","source":"#Assign each of these title values to a variable and find median\n##According to title u shud find the median of each group like Mr. Mis MrsTitle\n##titanic.full$Age\n# \n# agecluster <-aggregate(titanic.full$Age, by=list(Title),FUN= median, na.rm=TRUE)\n#  if(Title %in% agecluster$Group.1)\n#    is.na(titanic.full$Age)<-agecluster$x\n#****INSTALL DPLYR PACKAGE BEFORE RUNNING GROUPBY***#\n#install.packages(\"dplyr\")\nlibrary(dplyr)\n#titanic.full <- titanic.full %>% group_by(titanic.full$Title) %>% mutate(num_avg = median(Age,na.rm= T))\n#titanic.full$Age[is.na(titanic.full$Age)] <- titanic.full$num_avg[is.na(titanic.full$Age)]\n# age.median<-median(titanic.full$Age,na.rm=TRUE)\n# titanic.full[is.na(titanic.full$Age),\"Age\"]<-age.median\n\n##CHECHKOUT FOR MISSING VALUES OF FARE AND REPLACE THEMT\n##i am taking all the non outlier values in a variable by comparing it with upper whisker\nupper.whisker<-boxplot.stats(titanic.full$Fare)$stats[5]\nnonoutlier<-titanic.full$Fare<upper.whisker\n##titanic.full[nonoutlier,]\ntitanic.full$Embarked<-as.factor(titanic.full$Embarked)\n\ntitanic.full$Name<-as.factor(titanic.full$Name)\n\ntitanic.full$Sex<-as.factor(titanic.full$Sex)\n\ntitanic.full$Title<-as.factor(titanic.full$Title)\n\ntitanic.full$Ticket<-as.factor(titanic.full$Ticket)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"3008da4a3940aae67d592494cb828e490a8811f5"},"cell_type":"markdown","source":"## **Add Possible New Features that would be helpful for your Model**\n## **Create new Features like Family Size and Family Label (Small Large Medium)**"},{"metadata":{"trusted":true,"_uuid":"7b5eb69d4429fb622d76228273c8102692ad056a"},"cell_type":"code","source":"#Assign each of these title values to a variable and find median\n##According to title u shud find the median of each group like Mr. Mis MrsTitle\n##titanic.full$Age\n\n#this is working good the above as.factor()\n\n#implement is factor and that code for\n\n##now write the formula for fare equation it depends on all the other cols\n\ntitanic.full$FamilySize <- titanic.full$SibSp + titanic.full$Parch + 1\ntable(titanic.full$FamilySize)\ntitanic.full$FamilySizelabel <- sapply(1:nrow(titanic.full), function(x) \n  ifelse(titanic.full$FamilySize[x]==1, \"Single\", \n         ifelse(titanic.full$FamilySize[x]>4, \"Large\", \"Small\")))\n\ntitanic.full$FamilySizelabel<-as.factor(titanic.full$FamilySizelabel)\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"ebf22f34e28fde1a662ae0067feee39b8f49f2de"},"cell_type":"markdown","source":"## **Predict Age  by Anova method**\n## **Predict Fare by Regression (non outliers)**\n"},{"metadata":{"trusted":true,"_uuid":"d8cd8a90769eaac3c398c98ff991699a8a95d791"},"cell_type":"code","source":"","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"ed45de89a9034b84a2c04884679c6dfa97af745d","_execution_state":"idle","trusted":true},"cell_type":"code","source":"\n#install.packages(\"rpart\")\nlibrary(rpart)\n\nAgefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize+Ticket,\n                data=titanic.full[!is.na(titanic.full$Age),], \n                method=\"anova\")\ntitanic.full$Age[is.na(titanic.full$Age)] <- predict(Agefit,titanic.full[is.na(titanic.full$Age),])\n\nfare.eq = \"Fare~Pclass+Sex+Parch+Age+SibSp+Embarked+Title+FamilySizelabel\"\nfare.model<-lm(\n  \n  formula = fare.eq,\n  data=titanic.full[nonoutlier,]\n)\n\n##Now predict the new data on trained model so whats the new data???\n##new data\n##only those rows has missing vals of fare\nfare.row<-titanic.full[\n  \n  is.na(titanic.full$Fare),\n  c(\"Pclass\",\"Sex\",\"Age\",\"Embarked\",\"SibSp\",\"Parch\",\"Title\",\"FamilySizelabel\")\n  ]\nfare.predictions<-predict(fare.model,newdata = fare.row)\n\ntitanic.full[is.na(titanic.full$Fare),\"Fare\"]<-fare.predictions\n##one missing value\n#fare.median<-median(titanic.full$Fare,na.rm=TRUE)\n#titanic.full[is.na(titanic.full$Fare),\"Fare\"]<-fare.median\n\n\n\n\n##Survived column caluclation for test dataset\n\n# Survived.eq<-\"Survived ~ Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+FamilySize+FamilySizelabel+Title\"\n# survive.formula<-as.formula(Survived.eq)\n\n\n\n\n\n\n\n\n\n\n\n\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"0f327efb9dd87ef257101c2bbb27edb72c793168"},"cell_type":"markdown","source":"## **Factorize your Features for Model**"},{"metadata":{"trusted":true,"_uuid":"6d4bd755fe0f016cb0de400405bf35f225e82a5a"},"cell_type":"code","source":"##Use as.factor() function for categorical variables like Sex Name and Embarked\n\ntitanic.full$Embarked<-as.factor(titanic.full$Embarked)\n\ntitanic.full$Name<-as.factor(titanic.full$Name)\n\ntitanic.full$Sex<-as.factor(titanic.full$Sex)\n\ntitanic.full$FamilySizelabel<-as.factor(titanic.full$FamilySizelabel)\ntitanic.full$Title<-as.factor(titanic.full$Title)\n\ntitanic.full$Ticket<-as.factor(titanic.full$Ticket)\n\n#Now split the dataset to two types of data sets\ntitanic.train<-titanic.full[titanic.full$IstrainSet == TRUE,]\ntitanic.test<-titanic.full[titanic.full$IstrainSet == FALSE,]\n##make survived column as afactor\n\ntitanic.train$Survived<-as.factor(titanic.train$Survived)\n\n##Survived column caluclation for test dataset\n\n# Survived.eq<-\"Survived ~ Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+FamilySize+FamilySizelabel+Title\"\n# survive.formula<-as.formula(Survived.eq)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"21aaca23f270bc692ac547d41f5e4f37461d9f34"},"cell_type":"markdown","source":"## **Random Forest Model**"},{"metadata":{"trusted":true,"_uuid":"b69553f0971c3baddb893ca2fa7293f6a43f8498"},"cell_type":"code","source":"##INSTALL THE RANDOM FOREST AND APPLY LIBRARY() FUNCTION\n# install.packages(\"randomForest\")\n# \n# library(randomForest)\n# \n# ##using random forest\n\n## **Survived column caluclation for test dataset**\n\nSurvived.eq<-\"Survived ~ Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+FamilySize+FamilySizelabel+Title\"\nsurvive.formula<-as.formula(Survived.eq)\ntitanic.model<-randomForest(formula=survive.formula,data = titanic.train,ntree =2000,mtry = 3,nodesize = 0.01*nrow(titanic.test))\n\n##ntree means number of trees and mtry is number of variables in a split,nod of nodes is 1 percent of total train set\n\n#features.eq<-\"Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+FamilySize+FamilySizelabel+Title+Ticket\"\n\n##now predit the test data from train data\n\nSurvived <- predict(titanic.model,titanic.test, OOB=TRUE, type = \"response\")\n\n\n##Survived column caluclation for test dataset\n\n##Survived <- predict(titanic.model,newdata = titanic.test)\n\n##Passenger Id and Survivied columns write to a CSV file and submit\n\nPassengerId<-titanic.test$PassengerId\noutput.df<-as.data.frame(PassengerId)\noutput.df$Survived<-Survived\n\n##YOU CAN CHECK YOU RESULTS BY HISTOGRAM\n\n##ggplot(titanic.full,aes(x= Pclass,fill = factor(Survived))) + geom_bar()\n\nwrite.csv(output.df,file=\"titanic_kaggle_13.csv\",row.names = FALSE)\n\n##row.names is FALSE because to prevent writing those numbers into thecsv file\n","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}