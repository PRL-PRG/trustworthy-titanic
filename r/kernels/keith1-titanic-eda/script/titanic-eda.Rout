
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## ----load_libraries--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library('caret')
Loading required package: lattice
Loading required package: ggplot2
Warning message:
package â€˜ggplot2â€™ was built under R version 3.6.2 
> library('dplyr')

Attaching package: â€˜dplyrâ€™

The following objects are masked from â€˜package:statsâ€™:

    filter, lag

The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

Warning message:
package â€˜dplyrâ€™ was built under R version 3.6.2 
> library('ggplot2')
> library('gplots')

Attaching package: â€˜gplotsâ€™

The following object is masked from â€˜package:statsâ€™:

    lowess

> library('knitr')
> library('readr')
> library('reshape2')
Warning message:
package â€˜reshape2â€™ was built under R version 3.6.2 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # load data
> train <- read_csv('../input/train.csv')
Parsed with column specification:
cols(
  PassengerId = [32mcol_double()[39m,
  Survived = [32mcol_double()[39m,
  Pclass = [32mcol_double()[39m,
  Name = [31mcol_character()[39m,
  Sex = [31mcol_character()[39m,
  Age = [32mcol_double()[39m,
  SibSp = [32mcol_double()[39m,
  Parch = [32mcol_double()[39m,
  Ticket = [31mcol_character()[39m,
  Fare = [32mcol_double()[39m,
  Cabin = [31mcol_character()[39m,
  Embarked = [31mcol_character()[39m
)
> test <- read_csv('../input/test.csv')
Parsed with column specification:
cols(
  PassengerId = [32mcol_double()[39m,
  Pclass = [32mcol_double()[39m,
  Name = [31mcol_character()[39m,
  Sex = [31mcol_character()[39m,
  Age = [32mcol_double()[39m,
  SibSp = [32mcol_double()[39m,
  Parch = [32mcol_double()[39m,
  Ticket = [31mcol_character()[39m,
  Fare = [32mcol_double()[39m,
  Cabin = [31mcol_character()[39m,
  Embarked = [31mcol_character()[39m
)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # preview data
> dim(train)
[1] 891  12
> dim(test)
[1] 418  11
> 
> colnames(train)
 [1] "PassengerId" "Survived"    "Pclass"      "Name"        "Sex"        
 [6] "Age"         "SibSp"       "Parch"       "Ticket"      "Fare"       
[11] "Cabin"       "Embarked"   
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> apply(train, 2, function (x) { sum(is.na(x)) })
PassengerId    Survived      Pclass        Name         Sex         Age 
          0           0           0           0           0         177 
      SibSp       Parch      Ticket        Fare       Cabin    Embarked 
          0           0           0           0         687           2 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # create a version of the training set with categorical variables 
> # converted to factors
> ftrain <- as.data.frame(train)
> 
> for (x in c('Survived', 'Pclass', 'Sex', 'Embarked')) {
+     ftrain[,x] = factor(ftrain[,x])
+ }
> 
> # create alternate versions of the training set without Name, Ticket, or Cabin;
> # these are all near-unique fields.
> train_alt  <- train  %>% select(-Name, -Ticket, -Cabin)
> ftrain_alt <- ftrain %>% select(-Name, -Ticket, -Cabin)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ftrain_long <- melt(ftrain_alt %>% select(-Age, -Fare), 
+                     id.vars=c('PassengerId', 'Survived'))
Warning message:
attributes are not identical across measure variables; they will be dropped 
> 
> ggplot(ftrain_long, aes(value)) + 
+ 	geom_bar(aes(fill=Survived), position='dodge', alpha=0.7) + 
+ 	facet_wrap(~variable, scales='free')
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Indices of features
> #ind <- 3:ncol(ftrain_alt)
> numeric_cols <- c('Age', 'SibSp', 'Parch', 'Fare') 
> numeric_ind <- which(colnames(ftrain_alt) %in% numeric_cols)
> 
> featurePlot(x=ftrain_alt[,numeric_ind],
+             y=ftrain_alt$Survived,
+             plot="box",
+             scales=list(y=list(relation="free"),
+                         x=list(rot=90)),
+             auto.key=list(columns=2))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(ftrain, aes(Sex, fill=Survived)) + geom_bar(position="dodge")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(ftrain, aes(Age, fill=Survived)) + 
+     geom_histogram(alpha=0.5, position="identity")
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Warning message:
Removed 177 rows containing non-finite values (stat_bin). 
> 
> ggplot(ftrain, aes(Age, fill=Survived)) + 
+     geom_density(alpha=0.5, position="identity")
Warning message:
Removed 177 rows containing non-finite values (stat_density). 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(ftrain, aes(Fare, fill=Survived)) + 
+     geom_histogram(alpha=0.5, position="identity")
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> 
> ggplot(ftrain, aes(Fare, fill=Survived)) + 
+     geom_density(alpha=0.5, position="identity")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # create a version of the training matrix with all numeric features
> train_alt_num <- train_alt
> train_alt_num$Sex <- as.numeric(factor(train_alt$Sex))
> train_alt_num$Embarked <- as.numeric(factor(train_alt$Embarked))
> 
> # impute age and embarked to remove NAs
> train_alt_num$Age[is.na(train_alt_num$Age)] <- median(train_alt_num$Age, na.rm=TRUE)
> 
> embark_mode <- as.numeric(names(sort(table(train_alt_num$Embarked), decreasing=TRUE))[1])
> train_alt_num$Embarked[is.na(train_alt_num$Embarked)] <- embark_mode
> 
> # everything but the outcome
> ind <- 2:ncol(train_alt_num)
> 
> cor_mat <- cor(train_alt_num[,ind], method='spearman')
> heatmap.2(cor_mat, trace='none', symbreaks=FALSE, symkey=FALSE)
>           #cellnote=round(cor_mat, 4))
> 
> 
> proc.time()
   user  system elapsed 
  3.469   0.280   3.976 
