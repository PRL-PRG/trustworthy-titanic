
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> #Titanic Proble, Predicting the survivors
> #Loading the test and training files
> 
> train <- read.csv('../input/train.csv', stringsAsFactors = F)
> test  <- read.csv('../input/test.csv', stringsAsFactors = F)
> 
> 
> #Summary of test and train
> summary(test)
  PassengerId         Pclass          Name               Sex           
 Min.   : 892.0   Min.   :1.000   Length:418         Length:418        
 1st Qu.: 996.2   1st Qu.:1.000   Class :character   Class :character  
 Median :1100.5   Median :3.000   Mode  :character   Mode  :character  
 Mean   :1100.5   Mean   :2.266                                        
 3rd Qu.:1204.8   3rd Qu.:3.000                                        
 Max.   :1309.0   Max.   :3.000                                        
                                                                       
      Age            SibSp            Parch           Ticket         
 Min.   : 0.17   Min.   :0.0000   Min.   :0.0000   Length:418        
 1st Qu.:21.00   1st Qu.:0.0000   1st Qu.:0.0000   Class :character  
 Median :27.00   Median :0.0000   Median :0.0000   Mode  :character  
 Mean   :30.27   Mean   :0.4474   Mean   :0.3923                     
 3rd Qu.:39.00   3rd Qu.:1.0000   3rd Qu.:0.0000                     
 Max.   :76.00   Max.   :8.0000   Max.   :9.0000                     
 NA's   :86                                                          
      Fare            Cabin             Embarked        
 Min.   :  0.000   Length:418         Length:418        
 1st Qu.:  7.896   Class :character   Class :character  
 Median : 14.454   Mode  :character   Mode  :character  
 Mean   : 35.627                                        
 3rd Qu.: 31.500                                        
 Max.   :512.329                                        
 NA's   :1                                              
> summary(train)
  PassengerId       Survived          Pclass          Name          
 Min.   :  1.0   Min.   :0.0000   Min.   :1.000   Length:891        
 1st Qu.:223.5   1st Qu.:0.0000   1st Qu.:2.000   Class :character  
 Median :446.0   Median :0.0000   Median :3.000   Mode  :character  
 Mean   :446.0   Mean   :0.3838   Mean   :2.309                     
 3rd Qu.:668.5   3rd Qu.:1.0000   3rd Qu.:3.000                     
 Max.   :891.0   Max.   :1.0000   Max.   :3.000                     
                                                                    
     Sex                 Age            SibSp           Parch       
 Length:891         Min.   : 0.42   Min.   :0.000   Min.   :0.0000  
 Class :character   1st Qu.:20.12   1st Qu.:0.000   1st Qu.:0.0000  
 Mode  :character   Median :28.00   Median :0.000   Median :0.0000  
                    Mean   :29.70   Mean   :0.523   Mean   :0.3816  
                    3rd Qu.:38.00   3rd Qu.:1.000   3rd Qu.:0.0000  
                    Max.   :80.00   Max.   :8.000   Max.   :6.0000  
                    NA's   :177                                     
    Ticket               Fare           Cabin             Embarked        
 Length:891         Min.   :  0.00   Length:891         Length:891        
 Class :character   1st Qu.:  7.91   Class :character   Class :character  
 Mode  :character   Median : 14.45   Mode  :character   Mode  :character  
                    Mean   : 32.20                                        
                    3rd Qu.: 31.00                                        
                    Max.   :512.33                                        
                                                                          
> 
> #Imputing missing valus of in Train set-Embarked based on other variables
> train$Embarked[c(62,830)]='C'
> train$Embarked=factor(train$Embarked)
> 
> #Adding survived column in test set
> test$Survived= NA
> 
> #Binding test and train set in a single table
> full.data=rbind(test,train)
> 
> #Converting as factor
> full.data$Pclass=as.factor(full.data$Pclass)
> full.data$Sex=as.factor(full.data$Sex)
> full.data$Embarked=as.factor(full.data$Embarked)
> 
> #Checking structure of data frame
> str(full.data)
'data.frame':	1309 obs. of  12 variables:
 $ PassengerId: int  892 893 894 895 896 897 898 899 900 901 ...
 $ Pclass     : Factor w/ 3 levels "1","2","3": 3 3 2 3 3 3 3 2 3 3 ...
 $ Name       : chr  "Kelly, Mr. James" "Wilkes, Mrs. James (Ellen Needs)" "Myles, Mr. Thomas Francis" "Wirz, Mr. Albert" ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 2 2 1 2 1 2 1 2 ...
 $ Age        : num  34.5 47 62 27 22 14 30 26 18 21 ...
 $ SibSp      : int  0 1 0 0 1 0 0 1 0 2 ...
 $ Parch      : int  0 0 0 0 1 0 0 1 0 0 ...
 $ Ticket     : chr  "330911" "363272" "240276" "315154" ...
 $ Fare       : num  7.83 7 9.69 8.66 12.29 ...
 $ Cabin      : chr  "" "" "" "" ...
 $ Embarked   : Factor w/ 3 levels "C","Q","S": 2 3 2 3 3 3 2 3 1 3 ...
 $ Survived   : int  NA NA NA NA NA NA NA NA NA NA ...
> 
> #Finding colum wise missing values count
> colSums(is.na(full.data))
PassengerId      Pclass        Name         Sex         Age       SibSp 
          0           0           0           0         263           0 
      Parch      Ticket        Fare       Cabin    Embarked    Survived 
          0           0           1           0           0         418 
> 
> #Table Age=263, Fare=1 and Survived =418
> 
> #Display the row of missing fare entry
> miss=full.data[is.na(full.data$Fare),]
> 
> #Fare can be moddles as lm model depeing on Pclass,Sex,Embarked
> train=full.data[!is.na(full.data$Age),] 
> model=lm(Fare~Pclass+Embarked+Sex,data=train)
> pred=predict(model,newdata=miss)
> 
> #Substituting predicted value in missinf=g fare(7.69)
> full.data$Fare[is.na(full.data$Fare)]=pred
> 
> #Feature Extraction
> #Extracting the titles ans Surnames
> #Title
> full.data$Title <- gsub('(.*, )|(\\..*)', '', full.data$Name)
> table(full.data$Title,full.data$Survive)
              
                 0   1
  Capt           1   0
  Col            1   1
  Don            1   0
  Dona           0   0
  Dr             4   3
  Jonkheer       1   0
  Lady           0   1
  Major          1   1
  Master        17  23
  Miss          55 127
  Mlle           0   2
  Mme            0   1
  Mr           436  81
  Mrs           26  99
  Ms             0   1
  Rev            6   0
  Sir            0   1
  the Countess   0   1
> 
> #Data shows that few titles are less in number and majority of some died while rest survived
> #Creating new titles as High, Mid and Low for such rare titles based on survival
> #High(Lady,Mlle,MMe,MS,Sir,the countess), Mid(col,Dr,Major,), Low(Capt,Don,Jonkheer)
> High=c("Lady","Mlle","Mme","Ms","Sir","the Countess")
> Mid=c("Col","Dr","Major")
> Low=c("Capt","Don","Jonkheer","Rev","Dona")
> full.data$Title[full.data$Title %in% High]='High'
> full.data$Title[full.data$Title %in% Mid] = 'Mid'
> full.data$Title[full.data$Title %in% Low]= 'Low'
> 
> #Grab the surname
> #full.data$Surname-sapply(full.data$Name,function(x) strsplit(x, split = '[,.]')[[1]][1])
> 
> #Family size as a variable
> full.data$Fsize <- full.data$SibSp + full.data$Parch + 1
> 
> # Calssifying family as small mid and large
> full.data$FsizeD[full.data$Fsize == 1]= "small"
> full.data$FsizeD[(full.data$Fsize < 5) & (full.data$Fsize > 1)]= "Mid"
> full.data$FsizeD[(full.data$Fsize > 4)]= "large"
> 
> 
> 
> 
> 
> 
> #Converting to factor
> full.data$Survived=as.factor(full.data$Survived)
> full.data$Title=as.factor(full.data$Title)
> full.data$Fsize=as.factor(full.data$Fsize)
> full.data$FsizeD=as.factor(full.data$FsizeD)
> 
> #Splitting data as test and train
> train.fin=full.data[!is.na(full.data$Survived),] 
> test.fin=full.data[is.na(full.data$Survived),]
> 
> #imputing missing data -> Age
> library(mice)

Attaching package: ‘mice’

The following objects are masked from ‘package:base’:

    cbind, rbind

Warning message:
package ‘mice’ was built under R version 3.6.2 
> set.seed(144)
> vars=setdiff(names(train.fin),c("Survived","Name","Cabin","PassengerTd"))
> imputed=complete(mice(train.fin[vars]))

 iter imp variable
  1   1  Age*
  1   2  Age*
  1   3  Age*
  1   4  Age*
  1   5  Age*
  2   1  Age*
  2   2  Age*
  2   3  Age*
  2   4  Age*
  2   5  Age*
  3   1  Age*
  3   2  Age*
  3   3  Age*
  3   4  Age*
  3   5  Age*
  4   1  Age*
  4   2  Age*
  4   3  Age*
  4   4  Age*
  4   5  Age*
  5   1  Age*
  5   2  Age*
  5   3  Age*
  5   4  Age*
  5   5  Age*
 * Please inspect the loggedEvents 
Warning message:
Number of logged events: 51 
> train.fin[vars]=imputed[vars]
> 
> #Logistic Regression: Train test split
> library(caTools)
> set.seed(12)
> spl=sample.split(train.fin$Survived,SplitRatio=0.6)
> train1=subset(train.fin,spl==TRUE)
> test1=subset(train.fin,spl==FALSE)
> 
> #regression model
> #model1=glm(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked+FsizeD+Title,data=train1,family="binomial")
> #summary(model1)
> #pred=predict(model1,newdata=test1,type="response")
> #table(test1$Survived,pred>0.5)
> 
> #random forest model
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.
> #train1$Survived=as.factor(train1$Survived)
> #test1$Survived=as.factor(test1$Survived)
> #model1=randomForest(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked+FsizeD+Title,data=train1,method="class")
> #pred=predict(model1,newdata=test1,type="class")
> #table(test1$Survived,pred)
> 
> #SVM Model
> library(e1071)
> model1=svm(Survived~Pclass+Sex+Age+SibSp+Parch+Embarked+FsizeD+Title,data=train1,kernel="linear",cost=0.1,scale=FALSE)
> pred=predict(model1,newdata=test1,type="class")
> table(test1$Survived,pred)
   pred
      0   1
  0 190  30
  1  37 100
> 
> #test set data inputation
> 
> library(mice)
> set.seed(144)
> #imputed=complete(mice(test))
> #test=imputed
> vars=setdiff(names(test.fin),c("Survived","Name","Cabin","PassengerTd"))
> imput=complete(mice(test.fin[vars]))

 iter imp variable
  1   1  Age*
  1   2  Age*
  1   3  Age*
  1   4  Age*
  1   5  Age*
  2   1  Age*
  2   2  Age*
  2   3  Age*
  2   4  Age*
  2   5  Age*
  3   1  Age*
  3   2  Age*
  3   3  Age*
  3   4  Age*
  3   5  Age*
  4   1  Age*
  4   2  Age*
  4   3  Age*
  4   4  Age*
  4   5  Age*
  5   1  Age*
  5   2  Age*
  5   3  Age*
  5   4  Age*
  5   5  Age*
 * Please inspect the loggedEvents 
Warning message:
Number of logged events: 51 
> test.fin[vars]=imput[vars]
> 
> #running prediction on competition test set
> pred1=predict(model1,newdata=test.fin,type="class")
> #Survived=pred1
> PassengerId=test.fin$PassengerId
> out=as.data.frame(PassengerId)
> str(pred1)
 Factor w/ 2 levels "0","1": 
 - attr(*, "names")= chr(0) 
> 
> #out$Survived=Survived
> #write.csv(out,"OutR1.csv",row.names=FALSE)
> #It gives an accuracy of 78.711 on test set
> 
> proc.time()
   user  system elapsed 
  1.235   0.132   1.456 
