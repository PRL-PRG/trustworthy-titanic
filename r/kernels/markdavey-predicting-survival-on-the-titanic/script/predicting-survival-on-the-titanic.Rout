
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## ----setup, include=FALSE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> knitr::opts_chunk$set(echo = TRUE)
> 
> 
> ## ----message = FALSE-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # For data manipulation and tidying
> library(dplyr)

Attaching package: â€˜dplyrâ€™

The following objects are masked from â€˜package:statsâ€™:

    filter, lag

The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

Warning message:
package â€˜dplyrâ€™ was built under R version 3.6.2 
> library(data.table)

Attaching package: â€˜data.tableâ€™

The following objects are masked from â€˜package:dplyrâ€™:

    between, first, last

> 
> # For data visualizations
> library(ggplot2)
Warning message:
package â€˜ggplot2â€™ was built under R version 3.6.2 
> 
> # For modeling and predictions
> library(caret)
Loading required package: lattice
> library(glmnet)
Loading required package: Matrix
Loaded glmnet 4.0-2
Warning message:
package â€˜glmnetâ€™ was built under R version 3.6.2 
> library(ranger)
> library(e1071)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train <- read.csv('../input/train.csv', header = TRUE, stringsAsFactors = FALSE)
> train$Dataset <- "train"
> 
> test <- read.csv('../input/test.csv', header = TRUE, stringsAsFactors = FALSE)
> test$Dataset <- "test"
> 
> full <- bind_rows(train, test)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> str(full)
'data.frame':	1309 obs. of  13 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : chr  "male" "female" "female" "female" ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  "" "C85" "" "C123" ...
 $ Embarked   : chr  "S" "C" "S" "S" ...
 $ Dataset    : chr  "train" "train" "train" "train" ...
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> factor_variables <- c('PassengerId', 'Survived', 'Pclass', 'Sex', 'Embarked', 'Dataset')
> full[factor_variables] <- lapply(full[factor_variables], function(x) as.factor(x))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> names <- full$Name
> 
> titles <-  gsub("^.*, (.*?)\\..*$", "\\1", names)
> 
> full$Titles <- titles
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full$Titles <- gsub("Dona|Lady|Madame|the Countess", "Lady", full$Titles)
> full$Titles <- gsub("Don|Jonkheer|Sir", "Sir", full$Titles)
> 
> full$Titles <- as.factor(full$Titles)
> 
> full <- mutate(full, FamilySize = SibSp + Parch + 1)
> 
> 
> 
> full$TravelGroup <- NA
> 
> full2 <- arrange(full, Ticket)
> 
> full2 <- (transform(full2, TravelGroup = match(Ticket, unique(Ticket))))
> 
> # Can't forget to make those Travel Groups into factors!
> full2$TravelGroup <- as.factor(full2$TravelGroup)
> 
> full3 <- full2 %>% 
+             group_by(TravelGroup) %>% 
+             mutate(GroupSize = n()) %>%
+             ungroup()
> 
> filtered <- filter(full3, GroupSize == 1)
> 
> # How many were listed as being onboard with siblings or spouses?
> fSibSp <- filtered[filtered$SibSp > 0, ]
> nrow(fSibSp)
[1] 42
> 
> # How many were listed as being onboard with parents or children?
> fParch <- filtered[filtered$Parch > 0, ]
> nrow(fParch)
[1] 16
> 
> # How many of those people overlapped both groups?
> sum(fSibSp$PassengerId %in% fParch$PassengerId)
[1] 8
> 
> 
> # Resort the dataset by Passenger Number
> full4 <- arrange(full3, PassengerId)
> 
> # Where did this passenger leave from? What was their class?
> full4[1044, c(3, 12)]
[90m# A tibble: 1 x 2[39m
  Pclass Embarked
  [3m[90m<fct>[39m[23m  [3m[90m<fct>[39m[23m   
[90m1[39m 3      S       
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full4 %>%
+   filter(Pclass == '3' & Embarked == 'S') %>%
+   summarise(missing_fare = median(Fare, na.rm = TRUE))
[90m# A tibble: 1 x 1[39m
  missing_fare
         [3m[90m<dbl>[39m[23m
[90m1[39m         8.05
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full4$Fare[1044] <- 8.05
> 
> summary(full4$Fare)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   7.896  14.454  33.276  31.275 512.329 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full4$Embarked[full4$Embarked == ""] <- NA
> 
> full4[(which(is.na(full4$Embarked))), 1]
[90m# A tibble: 2 x 1[39m
  PassengerId
  [3m[90m<fct>[39m[23m      
[90m1[39m 62         
[90m2[39m 830        
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full4[c(62, 830), c(1,3,10)]
[90m# A tibble: 2 x 3[39m
  PassengerId Pclass  Fare
  [3m[90m<fct>[39m[23m       [3m[90m<fct>[39m[23m  [3m[90m<dbl>[39m[23m
[90m1[39m 62          1         80
[90m2[39m 830         1         80
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full4 %>%
+   group_by(Embarked, Pclass) %>%
+   filter(Pclass == "1") %>%
+   summarise(mfare = median(Fare),
+             n = n())
`summarise()` regrouping output by 'Embarked' (override with `.groups` argument)
[90m# A tibble: 4 x 4[39m
[90m# Groups:   Embarked [4][39m
  Embarked Pclass mfare     n
  [3m[90m<fct>[39m[23m    [3m[90m<fct>[39m[23m  [3m[90m<dbl>[39m[23m [3m[90m<int>[39m[23m
[90m1[39m C        1       76.7   141
[90m2[39m Q        1       90       3
[90m3[39m S        1       52     177
[90m4[39m [31mNA[39m       1       80       2
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Assign empty embark ports to 'C'
> full4$Embarked[c(62,830)] <- 'C'
> 
> # Drop unused levels (since there should be no more blanks)
> full4$Embarked <- droplevels(full4$Embarked)
> 
> # Check to make sure there are no NA's or blanks
> levels(full4$Embarked)
[1] "C" "Q" "S"
> 
> 
> ## ----results = 'hide'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> predicted_age <- train(
+   Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Titles + FamilySize + GroupSize,
+   tuneGrid = data.frame(mtry = c(2, 3, 7)),
+   data = full4[!is.na(full4$Age), ],
+   method = "ranger",
+   trControl = trainControl(
+       method = "cv", number = 10,
+       repeats = 10, verboseIter = TRUE),
+   importance = 'impurity'
+   )
Error: The tuning parameter grid should have columns mtry, splitrule, min.node.size
In addition: Warning message:
`repeats` has no meaning for this resampling method. 
Execution halted
