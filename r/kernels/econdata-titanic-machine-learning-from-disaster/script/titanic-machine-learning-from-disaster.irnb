{"cells":[{"metadata":{"_uuid":"90ed35422888d9314a81099e2105ab0807dc32e6","_execution_state":"idle","trusted":true},"cell_type":"code","source":"## Importing packages\n\n# This R environment comes with all of CRAN and many other helpful packages preinstalled.\n# You can see which packages are installed by checking out the kaggle/rstats docker image: \n# https://github.com/kaggle/docker-rstats\n\nlibrary(tidyverse) # metapackage with lots of helpful functions\n\n## Running code\n\n# In a notebook, you can run a single code cell by clicking in the cell and then hitting \n# the blue arrow to the left, or by clicking in the cell and pressing Shift+Enter. In a script, \n# you can run code by highlighting the code you want to run and then clicking the blue arrow\n# at the bottom of this window.\n\n## Reading in files\n\n# You can access files from datasets you've added to this kernel in the \"../input/\" directory.\n# You can see the files added to this kernel by running the code below. \n\nlist.files(path = \"../input\")\n\n## Saving data\n\n# If you save any files or images, these will be put in the \"output\" directory. You \n# can see the output directory by committing and running your kernel (using the \n# Commit & Run button) and then checking out the compiled version of your kernel.","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"e0a5db1d76ba66a4f77b5301d7e2a55ac8541a1c"},"cell_type":"code","source":"suppressWarnings(suppressMessages(library(\"tidyverse\")))\nsuppressWarnings(suppressMessages(library(\"caret\")))\nsuppressWarnings(suppressMessages(library(\"ranger\"))) # Faster RF modeling\nsuppressWarnings(suppressMessages(library(\"wru\"))) # Bayesian prediction of ethnicity\n\n# Custom function\n`%not in%` <- function (x, table) is.na(match(x, table, nomatch=NA_integer_))\n\n# Random seed\nset.seed(43287)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"552da0d3fa5878069a1a402f8acbf83c01917768"},"cell_type":"code","source":"# Load data\ntest.csv <- read.csv('../input/test.csv', stringsAsFactors = FALSE)\ntrain.csv <- read.csv('../input/train.csv', stringsAsFactors = FALSE)\ntrain.csv$Survived <- as.factor(train.csv$Survived)\ntrain <- train.csv\ntest <- test.csv\n\n# Impute missing ages in Test data\ntest.csv %>% select(-Ticket, -Name, -Cabin, -Embarked) -> test.ages\npre.proc <- preProcess(test.ages, method = \"bagImpute\")\ntest.ages <- predict(pre.proc, test.ages)\ntest$Age <- test.ages$Age\n\n# Impute missing ages in Training data\ntrain.csv %>% select(-Ticket, -Name, -Cabin, -Embarked) -> train.ages\npre.proc <- preProcess(train.ages, method = \"bagImpute\")\ntrain.ages <- predict(pre.proc, train.ages)\ntrain$Age <- train.ages$Age","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"deb25d0d8266fca1f3f487315dd0326a656b873f"},"cell_type":"code","source":"train %>%\n  rowwise %>%\n  mutate(title = gsub('(.*, )|(\\\\..*)', '', Name)) -> train","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"04d5ab4051ef4b86c53ba1cd5d2e0323d59e893d"},"cell_type":"code","source":"# Titles\ntrain %>%\n  ggplot(., aes(title, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by titles\")\n\n# Special titles\ntrain %>%\n  filter(title %not in% c(\"Mr\", \"Ms\", \"Mrs\", \"Miss\", \"Master\")) %>%\n  ggplot(., aes(title, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by special titles by sex\") + facet_wrap(~ Sex)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8c8756b43efc4c90cc951bf48e7ec716b62ff603"},"cell_type":"code","source":"train %>%\n  mutate(child = ifelse(Age < 15, 1, 0),\n         title.class = case_when(\n            title %in% c(\"Master\") ~ \"Boy\",\n            title %in% c(\"Miss\") & child == 1 ~ \"Girl\",\n            title %in% c(\"Mrs\") ~ \"Woman\",\n            title %in% c(\"Miss\", \"Mme\", \"Mlle\", \"Ms\") ~ \"Lady\",\n            title %in% c(\"Dr\") & Sex == \"female\" ~ \"Woman\",\n            title %in% c(\"Mr\") ~ \"Man\",\n            title %in% c(\"Capt\", \"Don\", \"Col\", \"Major\", \"Dr\", \"Rev\", \n                         \"Dona\", \"Jonkheer\", \"the Countess\", \"Lady\", \"Sir\") ~ \"Special\",\n            TRUE ~ \"Other\")) -> train\n\ntrain %>%\n  ggplot(., aes(x=title.class, fill=Survived)) + \n  geom_bar() + \n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by title and sex\") + facet_wrap(~ Sex)\n\ntrain %>%\n  ggplot(., aes(x=title.class, fill=Survived)) + \n  geom_bar() + \n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by title and Pclass\") + facet_wrap(~ Pclass)\n\ntrain %>% ungroup %>% count(title.class)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"1c41c659fa8359e6b8f36283984f0d41c186af60"},"cell_type":"code","source":"train %>%\n  mutate(family.size = SibSp + Parch,\n         family.size.simple = case_when(\n            family.size == 0 ~ \"0\",\n            between(family.size, 1, 3) ~ \"1-3\",\n            family.size > 3 ~ \">3\")) -> train","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"422c434630de168b19737fdc6f44119dfed00ebe"},"cell_type":"code","source":"train %>%\n  ggplot(., aes(family.size)) +\n  geom_histogram(bins=30)\n\ntrain %>%\n  ggplot(., aes(family.size, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by family size and sex\") + facet_wrap(~ Sex)\n\ntrain %>%\n  ggplot(., aes(family.size.simple, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by family size and sex\") + facet_wrap(~ Sex)\n\ntrain %>%\n  ggplot(., aes(family.size.simple, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by family size and Pclass\") + facet_wrap(~ Pclass)\n\ntrain %>% ungroup %>% count(family.size.simple)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"56a84a574ade54ab217a228a73ba0f0256f1bc4f"},"cell_type":"code","source":"train %>%\n  ggplot(., aes(Fare)) +\n  geom_histogram(bins=30)\n\ntrain %>%\n  rowwise %>%\n  mutate(Fare.grps = case_when(\n            between(Fare, 0, 100) ~ \"0-100\",\n            Fare > 100 ~ \">100\")) -> train\n\ntrain %>%\n  ggplot(., aes(Fare.grps, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by fare groups and class\") + facet_wrap(~ Pclass)\n\ntrain %>% ungroup %>% count(Fare.grps)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"52131bced0ce876ff7298f02605f25cdad9f90c4"},"cell_type":"code","source":"train %>%\n  ggplot(., aes(Pclass, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by passenger class\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"594a8b9631120b21476b6c40d1eba3ae90fbd0f3"},"cell_type":"code","source":"train %>%\n  ggplot(., aes(Age)) +\n  geom_histogram(bins=30)\n\ntrain %>%\n  mutate(Age.grps = case_when(\n            between(Age, 0, 12) ~ \"young\",\n            between(Age, 12, 50) ~ \"middle\",\n            Age > 50 ~ \"old\")) -> train\n\ntrain %>%\n  ggplot(., aes(Age.grps, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Age groups survival by Pclass\") + facet_wrap(~ Pclass)\n\ntrain %>%\n  ggplot(., aes(Age.grps, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Age groups survival by Sex\") + facet_wrap(~ Sex)\n\ntrain %>%\n  ggplot(., aes(Age.grps, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Age groups survival by Sex and Pclass\") + facet_wrap(~ Sex*Pclass)\n\ntrain %>% count(Age.grps)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"98fa2375f41992e7621aa86632c87c15bd17ff1e"},"cell_type":"code","source":"train %>%\n    rowwise %>%\n    mutate(ticket.prefix = ifelse(grepl(\" \", Ticket), sub(\" .*\", \"\", Ticket), \"\"),\n           ticket.prefix = toupper(gsub(\"(\\\\.)|(\\\\/)\", \"\", ticket.prefix)),\n           ticket.prefix = case_when(\n            ticket.prefix == \"STONO\" ~ \"SOTONO\",\n            ticket.prefix == \"STONO2\" ~ \"SOTONO\",\n            ticket.prefix == \"SOTONOQ\" ~ \"SOTONO\",\n            ticket.prefix == \"SOTONO2\" ~ \"SOTONO\",\n            ticket.prefix == \"SCAH\" ~ \"SCA\",\n            ticket.prefix == \"SCA4\" ~ \"SCA\",\n            ticket.prefix == \"PPP\" ~ \"PP\",\n            ticket.prefix == \"CASOTON\" ~ \"CA\",\n            ticket.prefix == \"AS\" ~ \"A\",\n            ticket.prefix == \"A4\" ~ \"A\",\n            ticket.prefix == \"A5\" ~ \"A\",\n            ticket.prefix == \"SOP\" ~ \"SOPP\",\n            ticket.prefix == \"SWPP\" ~ \"\",\n            ticket.prefix == \"FA\" ~ \"\",\n            TRUE ~ ticket.prefix)) -> train\n\ntrain %>%\n  ggplot(., aes(ticket.prefix, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by ticket prefix\") +\n  coord_flip()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"12c3a31fdf18ca8d533dbfe8f76dc11dfccaaabc"},"cell_type":"code","source":"train %>%\n    rowwise %>%\n    mutate(surname = gsub('( .*)|(*,*)', '', Name)) -> train\n\ntrain %>%\n  select(-Embarked) %>%\n  rowwise %>%\n  cbind(Embarked = train.csv$Embarked) %>%\n  mutate(surname.E = paste0(Embarked,\".\",surname)) -> train\n\ntrain %>%\n  ungroup %>%\n  group_by(surname.E) %>%\n  summarise(n.in.family = n(),\n            dead.family = sum(1 - as.numeric(as.character(Survived))),\n            all.died = ifelse(dead.family/n.in.family == 1, 1, 0)) -> dead.family.df\n\ntrain %>%\n  left_join(., dead.family.df, by = 'surname.E') -> train","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"0c2fe819602d41ac9c92fd5c72da85d495c23225"},"cell_type":"code","source":"train %>%\n  ggplot(., aes(factor(all.died), fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by dead relatives (boolean)\") + facet_wrap(~ Sex)\n\ntrain %>%\n  ggplot(., aes(factor(all.died), fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by dead relatives (boolean)\") + facet_wrap(~ Sex*Pclass)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"e0fb72828a5e9da1d25c07acaa6038e19ef9038e"},"cell_type":"code","source":"predict_race(train, surname.only = T) -> train\n\ntrain %>%\n  rowwise %>%\n  mutate(race = case_when(\n            pred.whi == max(pred.whi, pred.bla, pred.his, pred.asi, pred.oth) ~ \"White\",\n            TRUE ~ \"Non-White\"\n          )) ->train\n\ntrain %>%\n  ggplot(., aes(race, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by race and sex\") + facet_wrap(~ Sex)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"21ae9169d7de32fcb83f3dd2bf058f26471d5a98"},"cell_type":"code","source":"trctrl <- trainControl(\n  method = \"repeatedcv\", \n    number = 10,\n    repeats = 10)\n\ntgctrl <- expand.grid(\n    .mtry = 3,\n    .splitrule = \"gini\",\n    .min.node.size = 10)\n\nfit.rf <- train(Survived ~ \n                    Sex + \n                    #title.class + \n                    #family.size.simple + \n                    #Fare.grps + \n                    Pclass + \n                    #Age.grps + \n                    #Embarked + \n                    #ticket.prefix + \n                    #race +\n                    all.died,\n             data = train, \n             trControl = trctrl,\n             metric = \"Accuracy\",\n             importance = \"impurity\",\n             tuneGrid = tgctrl,\n             num.trees = 2000,\n             method = \"ranger\")\nfit.rf","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8df70e419318bdbce6757123cab0d5fa2b5df2a4"},"cell_type":"code","source":"trctrl <- trainControl(\n    method = \"repeatedcv\", \n    number = 10,\n    repeats = 10)\n\ntgctrl <- expand.grid(\n    nrounds = 200,\n    max_depth = 10,\n    eta = 0.05,\n    gamma = 0.01,\n    colsample_bytree = 0.75,\n    min_child_weight = 0,\n    subsample = 0.5)\n\nfit.xgb <- train(Survived ~ \n                    Sex + \n                    #title.class + \n                    #family.size.simple + \n                    #Fare.grps + \n                    Pclass + \n                    #Age.grps + \n                    #Embarked + \n                    #ticket.prefix + \n                    #race +\n                    all.died,\n             data = train, \n             method = \"xgbTree\",\n             trControl = trctrl,\n             tuneGrid = tgctrl,\n             tuneLength = 15\n)\nfit.xgb","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"89a1c11763fb87c5897770003184eb8b63e93403"},"cell_type":"code","source":"test %>% \n  mutate(Fare = ifelse(PassengerId == 1044, \n                       median((test %>% filter(!is.na(Fare), \n                                               Pclass == 3, \n                                               PassengerId != 1044))$Fare), Fare)) -> test\n\ntest %>%\n  rowwise %>%\n  mutate(title = gsub('(.*, )|(\\\\..*)', '', Name),\n         child = ifelse(Age < 15, 1, 0),\n         title.class = case_when(\n            title %in% c(\"Master\") ~ \"Boy\",\n            title %in% c(\"Miss\") & child == 1 ~ \"Girl\",\n            title %in% c(\"Mrs\") ~ \"Woman\",\n            title %in% c(\"Miss\", \"Mme\", \"Mlle\", \"Ms\") ~ \"Lady\",\n            title %in% c(\"Dr\") & Sex == \"female\" ~ \"Woman\",\n            title %in% c(\"Mr\") ~ \"Man\",\n            title %in% c(\"Capt\", \"Don\", \"Col\", \"Major\", \"Dr\", \"Rev\", \n                         \"Dona\", \"Jonkheer\", \"the Countess\", \"Lady\", \"Sir\") ~ \"Special\",\n            TRUE ~ \"Other\"),\n         family.size = SibSp + Parch,\n         family.size.simple = case_when(\n            family.size == 0 ~ \"0\",\n            between(family.size, 1, 3) ~ \"1-3\",\n            family.size > 3 ~ \">3\"\n          ),\n         Fare.grps = case_when(\n            between(Fare, 0, 100) ~ \"0-100\",\n            Fare > 100 ~ \">100\",\n          ),\n         Age.grps = case_when(\n            between(Age, 0, 12) ~ \"young\",\n            between(Age, 12, 50) ~ \"middle\",\n            Age > 50 ~ \"old\"\n          ),\n         ticket.prefix = ifelse(grepl(\" \", Ticket), sub(\" .*\", \"\", Ticket), \"\"),\n         ticket.prefix = toupper(gsub(\"(\\\\.)|(\\\\/)\", \"\", ticket.prefix)),\n           ticket.prefix = case_when(\n            ticket.prefix == \"STONO\" ~ \"SOTONO\",\n            ticket.prefix == \"STONOQ\" ~ \"SOTONO\",\n            ticket.prefix == \"STONO2\" ~ \"SOTONO\",\n            ticket.prefix == \"SOTONOQ\" ~ \"SOTONO\",\n            ticket.prefix == \"SOTONO2\" ~ \"SOTONO\",\n            ticket.prefix == \"SCAH\" ~ \"SCA\",\n            ticket.prefix == \"SCA4\" ~ \"SCA\",\n            ticket.prefix == \"SCA3\" ~ \"SCA\",\n            ticket.prefix == \"PPP\" ~ \"PP\",\n            ticket.prefix == \"CASOTON\" ~ \"CA\",\n            ticket.prefix == \"AS\" ~ \"A\",\n            ticket.prefix == \"A4\" ~ \"A\",\n            ticket.prefix == \"A5\" ~ \"A\",\n            ticket.prefix == \"SOP\" ~ \"SOPP\",\n            ticket.prefix == \"SWPP\" ~ \"\",\n            ticket.prefix == \"FA\" ~ \"\",\n            ticket.prefix == \"AQ3\" ~ \"\",\n            ticket.prefix == \"AQ4\" ~ \"\",\n            ticket.prefix == \"LP\" ~ \"\",\n            TRUE ~ ticket.prefix),\n         surname = gsub('( .*)|(*,*)', '', Name),\n         surname.E = paste0(Embarked, \".\", surname)) -> test.final\n\n# Ethnicity\npredict_race(test.final, surname.only = T) -> test.final\n\ntest.final %>%\n  rowwise %>%\n  mutate(race = case_when(\n            pred.whi == max(pred.whi, pred.bla, pred.his, pred.asi, pred.oth) ~ \"White\",\n            TRUE ~ \"Non-White\")) -> test.final\n\n# Dead family members\ntest.final %>%\n  left_join(., dead.family.df, by = 'surname.E') -> test.final\n\n# Dead family members\ntest.final %>%\n  mutate(all.died = replace_na(all.died, 0)) -> test.final","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"fc620913394790fff32b51cb65da1f1709008cb7"},"cell_type":"code","source":"Survived <- predict(fit.rf, test.final)\npred.rf <- data.frame(\n  cbind(\n    PassengerId = test.final$PassengerId, \n    as.data.frame(Survived)\n    )\n  )\n\nwrite_csv(pred.rf, 'rf.output.csv')","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"e89527e8ad8dfd0a0542adaa27340f3722c3ff05"},"cell_type":"code","source":"Survived <- predict(fit.xgb, test.final)\npred.xgb <- data.frame(\n  cbind(\n    PassengerId = test.final$PassengerId, \n    as.data.frame(Survived)\n    )\n  )\n\nwrite_csv(pred.xgb, 'xgb.output.csv')","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3176a7df5ded04de9ca21182372cea1d762bb82a"},"cell_type":"code","source":"","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}