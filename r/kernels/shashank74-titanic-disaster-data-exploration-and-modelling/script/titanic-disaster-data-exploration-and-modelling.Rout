
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> library(ggplot2)
Warning message:
package â€˜ggplot2â€™ was built under R version 3.6.2 
> library(dplyr)

Attaching package: â€˜dplyrâ€™

The following objects are masked from â€˜package:statsâ€™:

    filter, lag

The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

Warning message:
package â€˜dplyrâ€™ was built under R version 3.6.2 
> library(stringr)
> library(ggthemes)
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: â€˜randomForestâ€™

The following object is masked from â€˜package:dplyrâ€™:

    combine

The following object is masked from â€˜package:ggplot2â€™:

    margin

> 
> train <- read.csv('../input/train.csv', stringsAsFactors = F)
> test <- read.csv('../input/test.csv', stringsAsFactors = F)
> 
> 
> #Combing the train and test for data cleaning
> 
> #Rearranging the test as columns in train
> test$Survived <- NA
> test <- test[,c(1,12,2,3,4,5,6,7,8,9,10,11)]
> head(test)
  PassengerId Survived Pclass                                         Name
1         892       NA      3                             Kelly, Mr. James
2         893       NA      3             Wilkes, Mrs. James (Ellen Needs)
3         894       NA      2                    Myles, Mr. Thomas Francis
4         895       NA      3                             Wirz, Mr. Albert
5         896       NA      3 Hirvonen, Mrs. Alexander (Helga E Lindqvist)
6         897       NA      3                   Svensson, Mr. Johan Cervin
     Sex  Age SibSp Parch  Ticket    Fare Cabin Embarked
1   male 34.5     0     0  330911  7.8292              Q
2 female 47.0     1     0  363272  7.0000              S
3   male 62.0     0     0  240276  9.6875              Q
4   male 27.0     0     0  315154  8.6625              S
5 female 22.0     1     1 3101298 12.2875              S
6   male 14.0     0     0    7538  9.2250              S
> full <- rbind(train, test)
> 
> 
> #Check for NAs
> sapply(full, function(x) {sum(is.na(x)|x == "")})
PassengerId    Survived      Pclass        Name         Sex         Age 
          0         418           0           0           0         263 
      SibSp       Parch      Ticket        Fare       Cabin    Embarked 
          0           0           0           1        1014           2 
> 
> #NA values are in: Age, Fare, Cabin and Embarked
> 
> #NA - Fare
> #Row number 
> which(is.na(full$Fare))
[1] 1044
> 
> #check other details for row number 1044
> full[1044,]
     PassengerId Survived Pclass               Name  Sex  Age SibSp Parch
1044        1044       NA      3 Storey, Mr. Thomas male 60.5     0     0
     Ticket Fare Cabin Embarked
1044   3701   NA              S
> 
> mean(full$Fare[full$Pclass == 3 & full$Sex == "male"], na.rm = TRUE)
[1] 12.41546
> median(full$Fare[full$Pclass == 3 & full$Sex == "male"], na.rm = TRUE)
[1] 7.8958
> 
> ggplot(full[full$Pclass == 3 & full$Sex == "male",],aes(x = Fare, y = Pclass))+
+   geom_point()
Warning message:
Removed 1 rows containing missing values (geom_point). 
> 
> full$Fare[is.na(full$Fare)] <-mean(full$Fare[full$Pclass == 3 & full$Sex == "male"], na.rm = TRUE)
>        
> #NA - Cabin
> sum(full$Cabin == "")/nrow(full)
[1] 0.7746371
> 
> #77% of data in Cabin are empty. Cabin will not be used as feature
> 
> #NA - Embarked
> which(full$Embarked == "")
[1]  62 830
> 
> #62 and 830 are the rows which have NA value for Embarked
> full[c(62,830),]
    PassengerId Survived Pclass                                      Name
62           62        1      1                       Icard, Miss. Amelie
830         830        1      1 Stone, Mrs. George Nelson (Martha Evelyn)
       Sex Age SibSp Parch Ticket Fare Cabin Embarked
62  female  38     0     0 113572   80   B28         
830 female  62     0     0 113572   80   B28         
> 
> #Only these two person had same ticket no. and Cabin that means they might be together and boarded from same port
> full[full$Ticket == 113572,]
    PassengerId Survived Pclass                                      Name
62           62        1      1                       Icard, Miss. Amelie
830         830        1      1 Stone, Mrs. George Nelson (Martha Evelyn)
       Sex Age SibSp Parch Ticket Fare Cabin Embarked
62  female  38     0     0 113572   80   B28         
830 female  62     0     0 113572   80   B28         
> full[full$Cabin == "B28",]
    PassengerId Survived Pclass                                      Name
62           62        1      1                       Icard, Miss. Amelie
830         830        1      1 Stone, Mrs. George Nelson (Martha Evelyn)
       Sex Age SibSp Parch Ticket Fare Cabin Embarked
62  female  38     0     0 113572   80   B28         
830 female  62     0     0 113572   80   B28         
> 
> ggplot(full[full$Pclass == 1,], aes(x = Embarked))+
+   geom_bar()+
+   facet_grid(.~Sex)
> 
> t <- full[full$Fare >75 & full$Fare <85,]
> t %>% group_by(Embarked) %>% summarise(n())
`summarise()` ungrouping output (override with `.groups` argument)
[90m# A tibble: 3 x 2[39m
  Embarked `n()`
  [3m[90m<chr>[39m[23m    [3m[90m<int>[39m[23m
[90m1[39m [90m"[39m[90m"[39m           2
[90m2[39m [90m"[39mC[90m"[39m         25
[90m3[39m [90m"[39mS[90m"[39m         18
> 
> #in the above set around 56% people boarded from C
> full$Embarked[full$Embarked == ""] <- "C"
> 
> #NA - Age
> sum(is.na(full$Age))
[1] 263
> 
> #Extract title from name 
> full$Title <- str_extract(string = full$Name, pattern = "(Mr|Master|Mrs|Miss)\\.")
> table(full$Title)

Master.   Miss.     Mr.    Mrs. 
     61     260     757     197 
> length(which(is.na(full$Title)))
[1] 34
> 
> #Replace Na with Rare
> full$Title[is.na(full$Title)] <- "Rare"
> 
> #nrow(full[is.na(full$Age) & full$Title == "Mr.",])
> #nrow(full[is.na(full$Age) & full$Title == "Mrs.",])
> #nrow(full[is.na(full$Age) & full$Title == "Miss.",])
> #nrow(full[is.na(full$Age) & full$Title == "Master.",])
> #nrow(full[is.na(full$Age) & full$Title == "Rare",])
> 
> m <- c("Mr.","Mrs.","Miss.","Master.","Rare")
> for (i in 1:length(m)) {
+   cat("NA in Age having title",m[i],nrow(full[is.na(full$Age) & full$Title == m[i],]),"\n")
+ }
NA in Age having title Mr. 176 
NA in Age having title Mrs. 27 
NA in Age having title Miss. 50 
NA in Age having title Master. 8 
NA in Age having title Rare 2 
> 
> #Replace NA with mean grouped by Title
> 
> for(i in 1:length(m)){
+   full$Age[(is.na(full$Age) & full$Title == m[i])] <- round(mean(full$Age[full$Title == m[i]],na.rm = T),2)
+ }
> 
> #full$Age[(is.na(full$Age) & full$Title == "Mr.")] <- round(mean(full$Age[full$Title == "Mr."], na.rm = T),2)
> #full$Age[(is.na(full$Age) & full$Title == "Mrs.")] <- round(mean(full$Age[full$Title == "Mrs."], na.rm = T),2)
> #full$Age[(is.na(full$Age) & full$Title == "Miss.")] <- round(mean(full$Age[full$Title == "Miss."], na.rm = T),2)
> #full$Age[(is.na(full$Age) & full$Title == "Master.")] <- round(mean(full$Age[full$Title == "Master."], na.rm = T),2)
> #full$Age[(is.na(full$Age) & full$Title == "Rare")] <- round(mean(full$Age[full$Title == "Rare"], na.rm = T),2)
> 
> #All missing value has been taken care of
> #Lets try to extract some fields
> 
> #Family size
> full$family_size <- full$SibSp + full$Parch +1
> 
> ggplot(full[1:891,], aes(x = family_size, fill = factor(Survived))) +
+   geom_bar(stat='count', position='dodge') +
+   scale_x_continuous(breaks=c(1:11)) +
+   labs(x = 'Family Size') 
> 
> #Family Size = 1 died more
> #Family Size >= 2 & <=4 survived more
> #Family size > 5 died more
> 
> #Lets see the relationship of features with the survived
> 
> #Pclass v/s Survived
> table(full$Pclass, full$Survived)
   
      0   1
  1  80 136
  2  97  87
  3 372 119
> 
> ggplot(full[1:891,], aes(x = Pclass, fill = factor(Survived))) +
+   geom_bar(stat='count', position='dodge') +
+   labs(x = 'Pclass')+
+   theme_few()
> 
> #People in 3rd class died more
> #67% of people who did not survived where from 3rd class
> 
> #Sex v/s Survived
> ggplot(full[1:891,], aes(x = Sex, fill = factor(Survived))) +
+   geom_bar(stat='count', position='dodge') +
+   labs(x = 'Gender')+
+   theme_few()
> 
> #More number of Female survived than male
> # Lets check with Title
> ggplot(full[1:891,], aes(x = Title, fill = factor(Survived))) +
+   geom_bar(stat='count', position='dodge') +
+   labs(x = 'Title')+
+   theme_few()
> 
> #Mr is the only title where the count of death is more than survived
> #So in the Titanic movie it is correctly potrayed that preference was given to children and women
> 
> 
> # Age vs Survived 
> table(cut(full$Age,10), full$Survived)
               
                  0   1
  (0.0902,8.15]  20  38
  (8.15,16.1]    27  19
  (16.1,24.1]   128  85
  (24.1,32.1]   104  65
  (32.1,40.1]   174  80
  (40.1,48.1]    47  24
  (48.1,56.1]    24  21
  (56.1,64]      15   9
  (64,72]         9   0
  (72,80.1]       1   1
> 
> ggplot(full[1:891,], aes(Age, fill = factor(Survived))) + 
+   geom_histogram(bins = 20) + 
+   theme_few()
> 
> #More number of people in middle age group died
> # Lets divide the data through Gender
> 
> 
> ggplot(full[1:891,], aes(Age, fill = factor(Survived))) + 
+   geom_histogram(bins = 10) + 
+   facet_grid(.~Sex) + 
+   theme_few()
> 
> #Embarked vs Survived
> 
> #70% of people boarded from S, and had a higher percentage of death
> #people boarded from C survived more
> table(full$Embarked, full$Survived)
   
      0   1
  C  75  95
  Q  47  30
  S 427 217
> 
> ggplot(full[1:891,],aes(x = Embarked, fill = factor(Survived)))+
+   geom_bar(stat = 'count', position='dodge') +
+   labs(x = 'Embarked')+
+   theme_few()
> 
> 
> #convert to factor level for specific variable
> l <- c("Survived", "Pclass", "Sex", "Embarked", "Title")
> index <- match(l,names(full))
> for(i in index){
+   full[,i] <- as.factor(full[,i])
+ }
> 
> # Now we can see the clear picture, most of the Male of middle age group died while proportion of female is very less
> train2 <- full[1:891,]
> test2 <- full[892:1309,]
> 
> # Set a random seed
> 
> set.seed(754)
> # Build the model (note: not all possible variables are used)
> 
> #Error rate = 16.5%
> rf_model_test <- randomForest(factor(Survived) ~ Pclass + Age + Sex + Title + Fare + family_size + Embarked,
+                          data = train2)
> importance(rf_model_test)
            MeanDecreaseGini
Pclass             32.844696
Age                44.471933
Sex                59.166814
Title              70.371592
Fare               58.947296
family_size        26.146554
Embarked            9.546053
> 
> #Emabarked removed (lowest Ginni Index)
> #Error rate = 16.05% 
> rf_model_test <- randomForest(factor(Survived) ~ Pclass + Age + Sex + Title + Fare + family_size,
+                          data = train2)
> 
> #Embarked & Family size removed
> #Error rate = 15.71%
> rf_model_test <- randomForest(factor(Survived) ~ Pclass + Age + Sex + Title + Fare,
+                          data = train2)
> 
> #title can take care of sex (Embarked & Sex removed)
> #Error rate = 15.49%
> rf_model_test <- randomForest(factor(Survived) ~ Pclass + Age + Title + Fare + family_size,
+                          data = train2)
> 
> #Embarked , Pclass & Age
> #Error rate = 16.7%
> rf_model_test <- randomForest(factor(Survived) ~  Age + Title + Fare + family_size,
+                          data = train2)
> 
> # Pclass + Age + Title + Fare + family_size has the least error rate 
> 
> rf_model <- randomForest(factor(Survived) ~ Pclass + Age + Title + Fare + family_size,
+                          data = train2)
> 
> plot(rf_model, ylim=c(0,0.40))
> legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)
> 
> 
> # Get importance
> importance    <- importance(rf_model)
> varImportance <- data.frame(Variables = row.names(importance), 
+                             Importance = round(importance[ ,'MeanDecreaseGini'],2))
> 
> # Create a rank variable based on importance
> rankImportance <- varImportance %>%
+   mutate(Rank = paste0('#',dense_rank(desc(Importance))))
> 
> # Use ggplot2 to visualize the relative importance of variables
> ggplot(rankImportance, aes(x = reorder(Variables, Importance), 
+                            y = Importance, fill = Importance)) +
+   geom_bar(stat='identity') + 
+   geom_text(aes(x = Variables, y = 0.5, label = Rank),
+             hjust=0, vjust=0.55, size = 4, colour = 'red') +
+   labs(x = 'Variables') +
+   coord_flip() + 
+   theme_few()
> 
> # Predict using the test set
> prediction <- predict(rf_model, test2)
> 
> # Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)
> sol <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
> 
> # Write the solution to file
> write.csv(sol, file = 'Survived.csv', row.names = F)
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   
> 
> 
> 
> proc.time()
   user  system elapsed 
  3.065   0.136   3.208 
