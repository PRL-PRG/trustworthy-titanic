
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## ---- echo=TRUE------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> suppressWarnings(suppressMessages(library(tidyverse))) 
> suppressWarnings(suppressMessages(library(caret))) #for machine learning
> suppressWarnings(suppressMessages(library(mice))) #for imputation
> suppressWarnings(suppressMessages(library(Amelia))) #for imputation
> suppressWarnings(suppressMessages(library(randomForest))) #For prediction
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #Use na.strings to replace blank spaces by NAs
> train <- read.csv('../input/train.csv', header = TRUE, stringsAsFactors = FALSE, na.strings=c("","NA"))
> 
> test <- read.csv('../input/test.csv', header = TRUE, stringsAsFactors = FALSE, na.strings=c("","NA"))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train$Dataset <- "train"
> 
> test$Dataset <- "test"
> 
> full_data <- bind_rows(train, test)
> glimpse(full_data)
Rows: 1,309
Columns: 13
$ PassengerId [3m[90m<int>[39m[23m 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17â€¦
$ Survived    [3m[90m<int>[39m[23m 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, â€¦
$ Pclass      [3m[90m<int>[39m[23m 3, 1, 3, 1, 3, 3, 1, 3, 3, 2, 3, 1, 3, 3, 3, 2, 3, 2, 3, â€¦
$ Name        [3m[90m<chr>[39m[23m "Braund, Mr. Owen Harris", "Cumings, Mrs. John Bradley (Fâ€¦
$ Sex         [3m[90m<chr>[39m[23m "male", "female", "female", "female", "male", "male", "maâ€¦
$ Age         [3m[90m<dbl>[39m[23m 22, 38, 26, 35, 35, NA, 54, 2, 27, 14, 4, 58, 20, 39, 14,â€¦
$ SibSp       [3m[90m<int>[39m[23m 1, 1, 0, 1, 0, 0, 0, 3, 0, 1, 1, 0, 0, 1, 0, 0, 4, 0, 1, â€¦
$ Parch       [3m[90m<int>[39m[23m 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 5, 0, 0, 1, 0, 0, â€¦
$ Ticket      [3m[90m<chr>[39m[23m "A/5 21171", "PC 17599", "STON/O2. 3101282", "113803", "3â€¦
$ Fare        [3m[90m<dbl>[39m[23m 7.2500, 71.2833, 7.9250, 53.1000, 8.0500, 8.4583, 51.8625â€¦
$ Cabin       [3m[90m<chr>[39m[23m NA, "C85", NA, "C123", NA, NA, "E46", NA, NA, NA, "G6", "â€¦
$ Embarked    [3m[90m<chr>[39m[23m "S", "C", "S", "S", "S", "Q", "S", "S", "S", "C", "S", "Sâ€¦
$ Dataset     [3m[90m<chr>[39m[23m "train", "train", "train", "train", "train", "train", "trâ€¦
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> fctr <- c("PassengerId", "Survived", "Pclass", "Sex", "Embarked", "Dataset")
> full_data[fctr] <- lapply(full_data[fctr], function(x) as.factor(x))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> dim(full_data)
[1] 1309   13
> 
> 
> ## ---- fig.width=9, fig.height=8--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #grep titles and add it to another variable
> full_data$Title <- gsub("(.*, )|(\\..*)", "", full_data$Name)
> 
> #Plot titles
> ggplot(full_data, aes(Title)) + geom_bar() + ylab("Number of times a title appears in the dataset") + xlab("Title") + ggtitle("Titles in Titanic data")
> 
> #Show titles by sex
> table(full_data$Sex, full_data$Title)
        
         Capt Col Don Dona  Dr Jonkheer Lady Major Master Miss Mlle Mme  Mr Mrs
  female    0   0   0    1   1        0    1     0      0  260    2   1   0 197
  male      1   4   1    0   7        1    0     2     61    0    0   0 757   0
        
          Ms Rev Sir the Countess
  female   2   0   0            1
  male     0   8   1            0
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #Combining less frequent titles
> others <- c("Jonkheer", "Sir", "Major", "Dr", "Dona", "Lady", "the Countess", "Capt", "Col", "Don", "Rev")
> 
> #Reassign 
> full_data$Title[full_data$Title == "Mme"]    <- "Mrs"
> full_data$Title[full_data$Title == "Ms"]     <- "Miss"
> full_data$Title[full_data$Title == "Mlle"]   <- "Miss"
> full_data$Title[full_data$Title %in% others] <- "Other"
> 
> #Show titles by sex again
> table(full_data$Sex, full_data$Title)
        
         Master Miss  Mr Mrs Other
  female      0  264   0 198     4
  male       61    0 757   0    25
> 
> #Convert to factor
> full_data$Title <- as.factor(full_data$Title)
> 
> 
> ## ---- fig.width=9, fig.height=8--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> missmap(full_data, col=c("wheat", "darkred"), y.cex = 0.4, x.cex = 0.8, legend = TRUE, rank.order = TRUE)
> 
> 
> ## ----warning=FALSE---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full_data %>% filter(is.na(Fare))
  PassengerId Survived Pclass               Name  Sex  Age SibSp Parch Ticket
1        1044     <NA>      3 Storey, Mr. Thomas male 60.5     0     0   3701
  Fare Cabin Embarked Dataset Title
1   NA  <NA>        S    test    Mr
> 
> 
> ## ----echo=FALSE, warning=FALSE---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(full_data[full_data$Pclass == '3' & full_data$Embarked == 'S', ], 
+   aes(x = Fare)) +
+   geom_density(fill = 'lightblue', alpha = 0.5) + 
+   geom_vline(aes(xintercept = median(Fare, na.rm = TRUE)),
+     colour = 'red', linetype = 'dashed', lwd = 1) +
+   geom_text(aes(x=median(Fare, na.rm = TRUE), y=-0.005, label=round(median(Fare, na.rm = TRUE),       digits = 2)), hjust=-0.3, size=6)  +    
+   scale_x_continuous() +
+   ggtitle(label = "Median for passengers who embarked \n in Southampton as 3rd class") +
+   theme(panel.grid.major = element_blank(), plot.title = element_text(hjust = 0.5, face = "bold", size = 15))
Warning message:
Removed 1 rows containing non-finite values (stat_density). 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full_data$Fare[full_data$PassengerId[1044]] <- 8.05
> 
> 
> ## ----warning=FALSE---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full_data %>% filter(is.na(Embarked))
  PassengerId Survived Pclass                                      Name    Sex
1          62        1      1                       Icard, Miss. Amelie female
2         830        1      1 Stone, Mrs. George Nelson (Martha Evelyn) female
  Age SibSp Parch Ticket Fare Cabin Embarked Dataset Title
1  38     0     0 113572   80   B28     <NA>   train  Miss
2  62     0     0 113572   80   B28     <NA>   train   Mrs
> 
> 
> ## ----warning=FALSE---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full_data %>%
+   group_by(Embarked, Pclass) %>%
+   filter(Pclass == "1") %>%
+   summarise(median = median(Fare))
`summarise()` regrouping output by 'Embarked' (override with `.groups` argument)
[90m# A tibble: 4 x 3[39m
[90m# Groups:   Embarked [4][39m
  Embarked Pclass median
  [3m[90m<fct>[39m[23m    [3m[90m<fct>[39m[23m   [3m[90m<dbl>[39m[23m
[90m1[39m C        1        76.7
[90m2[39m Q        1        90  
[90m3[39m S        1        52  
[90m4[39m [31mNA[39m       1        80  
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full_data$Embarked[full_data$PassengerId[c(62, 830)]] <- "C"
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #set seed
> set.seed(123)
> 
> #Perform MICE imputation, keeping only useful variables
> full_data_mice <- mice(full_data[, !names(full_data) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')], method = "rf")

 iter imp variable
  1   1  Age
  1   2  Age
  1   3  Age
  1   4  Age
  1   5  Age
  2   1  Age
  2   2  Age
  2   3  Age
  2   4  Age
  2   5  Age
  3   1  Age
  3   2  Age
  3   3  Age
  3   4  Age
  3   5  Age
  4   1  Age
  4   2  Age
  4   3  Age
  4   4  Age
  4   5  Age
  5   1  Age
  5   2  Age
  5   3  Age
  5   4  Age
  5   5  Age
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #Create a density plot to compare the estimate values and the original ones.
> densityplot(full_data_mice)
> 
> 
> ## ----warning=FALSE---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #Save the complete output
> mice_output <- complete(full_data_mice)
> 
> #Create a chart comparing the original data and the new imputed data
> plot <- ggplot() + 
+ geom_density(aes(x=full_data$Age, y=..density..), fill = "red", alpha=.5) + geom_density(aes(x=mice_output$Age, y=..density..), fill = "yellow",alpha=.5) + theme(panel.background = element_rect(fill = 'white', colour = 'white')) + ggtitle("Comparison between original and imputed data") + theme(plot.title = element_text(hjust = 0.5)) + xlab("Age") + ylab("Density")
> 
> plot
Warning message:
Removed 263 rows containing non-finite values (stat_density). 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full_data$Age <- mice_output$Age
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> sum(is.na(full_data$Age))
[1] 0
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train <- full_data %>% filter(Dataset=="train") %>% select(everything(), -Dataset)
> test <- full_data %>% filter(Dataset=="test") %>% select(everything(), -Dataset)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> set.seed(123)
> 
> rf_model <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title, data=train)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> plot(rf_model, ylim=c(0,0.36))
> legend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> summary(train$Survived)
  0   1 
549 342 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> dotplot(rf_model$importance)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> prediction <- predict(rf_model, test)
> 
> # Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)
> solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
> 
> # Write the solution to file
> write.csv(solution, file = 'rf_mod_Solution.csv', row.names = F)
> 
> 
> proc.time()
   user  system elapsed 
  4.415   0.304   4.829 
