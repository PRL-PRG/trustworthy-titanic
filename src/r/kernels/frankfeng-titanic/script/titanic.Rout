
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> # This R script will run on our backend. You can write arbitrary code here!
> 
> # Many standard libraries are already installed, such as randomForest
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.
> library(rpart)
> 
> # The train and test data is stored in the ../input directory
> train <- read.csv("../input/train.csv")
> test  <- read.csv("../input/test.csv")
> test$Survived<-0
> 
> # All data, both training and test set
> all_data<-rbind(train,test)
> 
> # Passenger on row 62 and 830 do not have a value for embarkment. 
> # Since many passengers embarked at Southampton, we give them the value S.
> all_data$Embarked[c(62, 830)] <- "S"
> 
> # Factorize embarkment codes.
> all_data$Embarked <- factor(all_data$Embarked)
> 
> # Passenger on row 1044 has an NA Fare value. Let's replace it with the median fare value.
> all_data$Fare[1044] <- median(all_data$Fare, na.rm = TRUE)
> 
> # How to fill in missing Age values?
> # We make a prediction of a passengers Age using the other variables and a decision tree model. 
> # This time you give method = "anova" since you are predicting a continuous variable.
> library(rpart)
> predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked,
+                        data = all_data[!is.na(all_data$Age),], method = "anova")
> all_data$Age[is.na(all_data$Age)] <- predict(predicted_age, all_data[is.na(all_data$Age),])
> 
> # Split the data back into a train set and a test set
> train <- all_data[1:891,]
> test <- all_data[892:1309,]
> 
> my_tree <- randomForest(as.factor(Survived) ~ Age + Sex + Pclass + SibSp + Parch + Embarked + Fare, data = train, importance = TRUE, ntree = 1000)
> 
> my_prediction <- predict(my_tree, test, type = "class")
> 
> my_solution <- data.frame(PassengerId=test$PassengerId, Survived = my_prediction)
> 
> write.csv(my_solution, file = "my_solution.csv", row.names= FALSE)
> 
> 
> proc.time()
   user  system elapsed 
  1.111   0.059   1.167 
