
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library('mice') # imputation

Attaching package: ‘mice’

The following objects are masked from ‘package:base’:

    cbind, rbind

Warning message:
package ‘mice’ was built under R version 3.6.2 
> library('dplyr')

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> train = read.csv('../input/train.csv')
> test = read.csv('../input/test.csv')
> 
> full  <- bind_rows(train, test) # bind training & test data
> # Make variables factors into factors
> factor_vars <- c('PassengerId','Pclass','Sex')
> full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
> rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', 
+                 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
> 
> # Also reassign mlle, ms, and mme accordingly
> full$Title[full$Title == 'Mlle']        <- 'Miss' 
> full$Title[full$Title == 'Ms']          <- 'Miss'
> full$Title[full$Title == 'Mme']         <- 'Mrs' 
> full$Title[full$Title %in% rare_title]  <- 'Rare Title'
> 
> # Show title counts by sex again
> table(full$Sex, full$Title)
        
         Master Miss  Mr Mrs Rare Title
  female      0  264   0 198          4
  male       61    0 757   0         25
> full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
> 
> # Set a random seed
> set.seed(129)
> 
> # Perform mice imputation, excluding certain less-than-useful variables:
> mice_mod <- mice(full[, !names(full) %in% 
+             c('PassengerId','Name','Ticket','Cabin','Title','Survived')], method='rf') 

 iter imp variable
  1   1  Age  Fare
  1   2  Age  Fare
  1   3  Age  Fare
  1   4  Age  Fare
  1   5  Age  Fare
  2   1  Age  Fare
  2   2  Age  Fare
  2   3  Age  Fare
  2   4  Age  Fare
  2   5  Age  Fare
  3   1  Age  Fare
  3   2  Age  Fare
  3   3  Age  Fare
  3   4  Age  Fare
  3   5  Age  Fare
  4   1  Age  Fare
  4   2  Age  Fare
  4   3  Age  Fare
  4   4  Age  Fare
  4   5  Age  Fare
  5   1  Age  Fare
  5   2  Age  Fare
  5   3  Age  Fare
  5   4  Age  Fare
  5   5  Age  Fare
> 
> mice_output <- complete(mice_mod)
> 
> # Plot age distributions
> #par(mfrow=c(1,2))
> #hist(full$Age, freq=F, main='Age: Original Data', 
> #  col='darkgreen', ylim=c(0,0.04))
> #hist(mice_output$Age, freq=F, main='Age: MICE Output', 
> #  col='lightgreen', ylim=c(0,0.04))
> full$Embarked[c(62, 830)] <- 'C'
> full$Age <- mice_output$Age
> train <- full[1:891,]
> test <- full[892:1309,]
> glm.fit=glm(Survived~Age+Title+Pclass+SibSp,data=train,family=binomial)
> summary(glm.fit)

Call:
glm(formula = Survived ~ Age + Title + Pclass + SibSp, family = binomial, 
    data = train)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.5129  -0.5798  -0.3716   0.5721   2.6038  

Coefficients:
                 Estimate Std. Error z value Pr(>|z|)    
(Intercept)      4.183357   0.593531   7.048 1.81e-12 ***
Age             -0.026704   0.008296  -3.219  0.00129 ** 
TitleMiss       -0.390414   0.495457  -0.788  0.43070    
TitleMr         -3.339715   0.526030  -6.349 2.17e-10 ***
TitleMrs         0.112032   0.539314   0.208  0.83544    
TitleRare Title -2.998002   0.711865  -4.211 2.54e-05 ***
Pclass2         -1.433438   0.285088  -5.028 4.95e-07 ***
Pclass3         -2.520779   0.269507  -9.353  < 2e-16 ***
SibSp           -0.625619   0.119255  -5.246 1.55e-07 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1186.66  on 890  degrees of freedom
Residual deviance:  742.12  on 882  degrees of freedom
AIC: 760.12

Number of Fisher Scoring iterations: 5

> glm.probs=predict(glm.fit,type="response") 
> glm.pred=ifelse(glm.probs>0.5,"Survived","Dead")
> attach(train)
> (475+243)/(467+232+82+110)
[1] 0.8058361
> table(glm.pred,Survived)
          Survived
glm.pred     0   1
  Dead     476  87
  Survived  73 255
> mean(glm.pred==Survived)
[1] 0
> 
> # Predict using the test set
> prediction <- predict(glm.fit, test)
> prediction[1:11]
       892        893        894        895        896        897        898 
-2.5984196 -0.1060897 -2.2454346 -2.3981408  0.5615066 -2.0509907  0.4710486 
       899        900        901        902 
-1.9097147  1.2939406 -3.4891550 -2.5049562 
> # Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)
> solution <- data.frame(PassengerID = test$PassengerId, Survived = ifelse(prediction>0.5,1,0))
> 
> # Write the solution to file
> write.csv(solution, file = 'rf_mod_Solution.csv', row.names = F)
> 
> proc.time()
   user  system elapsed 
  2.152   0.228   2.383 
