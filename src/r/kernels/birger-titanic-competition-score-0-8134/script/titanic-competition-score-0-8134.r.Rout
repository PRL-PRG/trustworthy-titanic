
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> suppressMessages(library('ggplot2')) # visualization
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> suppressMessages(library('ggthemes')) # visualization
> suppressMessages(library('scales')) # visualization
Warning message:
package ‘scales’ was built under R version 3.6.2 
> suppressMessages(library('dplyr')) # data manipulation
Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> suppressMessages(library('mice')) # imputation
Warning message:
package ‘mice’ was built under R version 3.6.2 
> suppressMessages(library('randomForest')) # classification algorithm
> 
> train <- read.csv('../input/train.csv', stringsAsFactors = F)
> test  <- read.csv('../input/test.csv', stringsAsFactors = F)
> 
> full  <- bind_rows(train, test)
> 
> # check data
> str(full)
'data.frame':	1309 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : chr  "male" "female" "female" "female" ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  "" "C85" "" "C123" ...
 $ Embarked   : chr  "S" "C" "S" "S" ...
> 
> full[full==''] <- NA
> sapply(full, function(x) sum(is.na(x)))
PassengerId    Survived      Pclass        Name         Sex         Age 
          0         418           0           0           0         263 
      SibSp       Parch      Ticket        Fare       Cabin    Embarked 
          0           0           0           1        1014           2 
> 
> # Grab title from passenger names
> full$Title <- gsub('.*, ([^.]*)\\..*', '\\1', full$Name)
> 
> # Title vs Survivor
> table(full$Title, full$Survived)
              
                 0   1
  Capt           1   0
  Col            1   1
  Don            1   0
  Dona           0   0
  Dr             4   3
  Jonkheer       1   0
  Lady           0   1
  Major          1   1
  Master        17  23
  Miss          55 127
  Mlle           0   2
  Mme            0   1
  Mr           436  81
  Mrs           26  99
  Ms             0   1
  Rev            6   0
  Sir            0   1
  the Countess   0   1
> 
> # Replace rare titles
> full$Title[full$Title == 'Mlle'] <- 'Miss'
> full$Title[full$Title == 'Ms'] <- 'Miss'
> full$Title[full$Title == 'Mme'] <- 'Mrs'
> # Group rare Title to officer and royalty
> officer <- c('Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev')
> royalty <- c('Dona', 'Lady', 'the Countess','Sir', 'Jonkheer')
> full$Title[full$Title %in% officer] <- 'officer'
> full$Title[full$Title %in% royalty] <- 'royalty'
> 
> # Show title counts by sex
> table(full$Sex, full$Title)
        
         Master Miss  Mr Mrs officer royalty
  female      0  264   0 198       1       3
  male       61    0 757   0      23       2
> 
> # Get Surnames
> full$Surname <- gsub('([^,]*),.*', '\\1', full$Name)
> str(factor(full$Surname))
 Factor w/ 875 levels "Abbing","Abbott",..: 101 183 335 273 16 544 506 614 388 565 ...
> 
> full$Deck <- sapply(as.character(full$Cabin), function(x) strsplit(x, NULL)[[1]][1])
> # Replace NA with 'U' (Unknown)
> full <- within(full,
+    Deck <- ifelse(is.na(Deck),'U',Deck)
+ )
> # Group upper, middle and lower decks
> full$Deck[full$Deck == 'A' | full$Deck == 'B'] <- 'upper_deck'
> full$Deck[full$Deck == 'C' | full$Deck == 'D'] <- 'middle_deck'
> full$Deck[full$Deck == 'E' | full$Deck == 'F' | 
+           full$Deck == 'G' | full$Deck == 'T'] <- 'lower_deck'
>     
> full$Deck <- factor(full$Deck)
>     
> print(summary(full$Deck))
 lower_deck middle_deck           U  upper_deck 
         68         140        1014          87 
> 
> # Familie size: siblings + spouses + parents + children + Passenger themselve
> full$Fsize <- full$SibSp + full$Parch + 1
> 
> # Group also people in the same cabin with family size == 1
> cabins <- full$Cabin
> n_occur <- data.frame(table(Var1=cabins))
> n_occur <- subset(n_occur, nchar(as.character(Var1)) > 1)
> 
> sharedCabins <- n_occur$Var1[n_occur$Freq > 1]
> 
> sharedInd <- full$Fsize == 1 & full$Cabin %in% sharedCabins
> full$Fsize[sharedInd] <- 2
> 
> # Concatenate surname w/ family size
> full$Family <- paste(full$Surname, full$FsizeAdj, sep='_')
> 
> # Plot Family Size vs Survivor
> ggplot(full[1:891, ], aes(x = Fsize, fill = factor(Survived))) +
+   geom_bar(stat='count', position='dodge') +
+   scale_x_continuous(breaks=c(1:11)) +
+   labs(x = 'Family Size') +
+   theme_few()
> 
> # Discretize family size
> full$FsizeD[full$Fsize == 1] <- 'singleton'
> full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'
> full$FsizeD[full$Fsize > 4] <- 'large'
> 
> # Show family size by survival using a mosaic plot
> mosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)
> 
> # There are missing values
> str(factor(full$Embarked))
 Factor w/ 3 levels "C","Q","S": 3 1 3 3 3 2 3 3 3 1 ...
> full$PassengerId[full$Embarked == '']
[1] NA NA
> full$Pclass[full$Embarked == '']
[1] NA NA
> 
> ggplot(full, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
+   geom_boxplot() +
+   geom_hline(aes(yintercept=80), 
+     colour='red', linetype='dashed', lwd=2) +
+   scale_y_continuous(labels=dollar_format()) +
+   theme_few()
Warning message:
Removed 1 rows containing non-finite values (stat_boxplot). 
> 
> # Missing values are both class 1; safe to say they embark in Cherbourg
> full$Embarked[c(62, 830)] <- 'C'
> 
> # There are missing values
> str(factor(full$Fare))
 Factor w/ 281 levels "0","3.1708","4.0125",..: 21 238 51 218 53 61 215 144 88 178 ...
> full$PassengerId[is.na(full$Fare) == TRUE]
[1] 1044
> 
> ggplot(full[full$Pclass == '3' & full$Embarked == 'S', ], 
+   aes(x = Fare)) +
+   geom_density(fill = '#99d6ff', alpha=0.4) + 
+   geom_vline(aes(xintercept=median(Fare, na.rm=T)),
+     colour='red', linetype='dashed', lwd=1) +
+   scale_x_continuous(labels=dollar_format()) +
+   theme_few()
Warning message:
Removed 1 rows containing non-finite values (stat_density). 
> 
> # Replace missing fare value with median fare for class/embarkment
> full$Fare[1044] <- median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE)
> 
> # First we'll look at the relationship between age, title & survival
> ggplot(full[1:891,], aes(Age, fill = factor(Survived))) + 
+   geom_histogram() + 
+   # I include Sex since we know (a priori) it's a significant predictor
+   facet_grid(.~Title) + 
+   theme_few()
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Warning message:
Removed 177 rows containing non-finite values (stat_bin). 
> 
> # Show number of missing Age values
> sum(is.na(full$Age))
[1] 263
> 
> # We know 'Masters' are young boys
> sum(is.na(full$Age[full$Title == 'Master']))
[1] 8
> summary(full$Age[full$Title == 'Master'])
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
  0.330   2.000   4.000   5.483   9.000  14.500       8 
> full$Age[is.na(full$Age) & full$Title == 'Master'] <- 4
> 
> # Make variables factors into factors
> factor_vars <- c('PassengerId', 'Pclass','Sex','Embarked', 'Deck',
+                  'Title','Surname','Family','FsizeD')
> 
> full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
> 
> # Set a random seed
> set.seed(129)
> 
> # Perform mice imputation, excluding certain less-than-useful variables:
> #mice_mod <- mice(full[, !names(full) %in% c('Name','Ticket','Family','Surname','Survived')], method='rf') 
> mice_mod <- mice(full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived', 'Deck')], method='rf') 

 iter imp variable
  1   1  Age
  1   2  Age
  1   3  Age
  1   4  Age
  1   5  Age
  2   1  Age
  2   2  Age
  2   3  Age
  2   4  Age
  2   5  Age
  3   1  Age
  3   2  Age
  3   3  Age
  3   4  Age
  3   5  Age
  4   1  Age
  4   2  Age
  4   3  Age
  4   4  Age
  4   5  Age
  5   1  Age
  5   2  Age
  5   3  Age
  5   4  Age
  5   5  Age
>     
> # Save the complete output 
> mice_output <- complete(mice_mod)
> 
> # Plot age distributions
> par(mfrow=c(1,2))
> hist(full$Age, freq=F, main='Age: Original Data', 
+   col='darkgreen', ylim=c(0,0.04))
> hist(mice_output$Age, freq=F, main='Age: MICE Output', 
+   col='lightgreen', ylim=c(0,0.04))
> 
> # Replace Age variable from the mice model.
> full$Age <- mice_output$Age
> 
> # Show new number of missing Age values
> sum(is.na(full$Age))
[1] 0
> 
> # First we'll look at the relationship between age & survival
> ggplot(full[1:891,], aes(Age, fill = factor(Survived))) + 
+   geom_histogram() + 
+   # I include Sex since we know (a priori) it's a significant predictor
+   facet_grid(.~Title) + 
+   theme_few()
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> 
> # First we'll look at the relationship between age & survival
> ggplot(full[1:891,], aes(Age, fill = factor(Survived))) + 
+   geom_histogram() + 
+   # I include Sex since we know (a priori) it's a significant predictor
+   facet_grid(.~Sex) + 
+   theme_few()
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> 
> # Create the column child, and indicate whether child or adult
> full$Child[full$Age < 18] <- 'Child'
> full$Child[full$Age >= 18] <- 'Adult'
> 
> # Show counts
> table(full$Child, full$Survived)
       
          0   1
  Adult 481 267
  Child  68  75
> 
> # Adding Mother variable
> full$Mother <- 'Not Mother'
> full$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <- 'Mother'
> 
> # Show counts
> table(full$Mother, full$Survived)
            
               0   1
  Mother      16  39
  Not Mother 533 303
> 
> # Finish by factorizing our two new factor variables
> full$Child  <- factor(full$Child)
> full$Mother <- factor(full$Mother)
> 
> md.pattern(full)
    PassengerId Pclass Name Sex Age SibSp Parch Ticket Fare Embarked Title
204           1      1    1   1   1     1     1      1    1        1     1
687           1      1    1   1   1     1     1      1    1        1     1
91            1      1    1   1   1     1     1      1    1        1     1
327           1      1    1   1   1     1     1      1    1        1     1
              0      0    0   0   0     0     0      0    0        0     0
    Surname Deck Fsize Family FsizeD Child Mother Survived Cabin     
204       1    1     1      1      1     1      1        1     1    0
687       1    1     1      1      1     1      1        1     0    1
91        1    1     1      1      1     1      1        0     1    1
327       1    1     1      1      1     1      1        0     0    2
          0    0     0      0      0     0      0      418  1014 1432
> 
> # Split the data back into a train set and a test set
> train <- full[1:891,]
> test <- full[892:1309,]
> 
> # Set a random seed
> set.seed(754)
> 
> # Build the model (note: not all possible variables are used)
> # Accuracy: 0.80861
> # rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + 
> #                                            Fare + Embarked + Title +
> #                                            FsizeD + Child + Mother +
> #                                            Deck,
> #                                            data = train)
> 
> # Reduce variables further to avoid overfitting
> rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Fare +  
+                                             Embarked + Title + FsizeD + Child,
+                                             data = train)
> 
> #Pclass + Sex + Fare + Embarked + Title + 
> #                           FsizeD + Child
> 
> # Get importance from random forest model
> importance    <- importance(rf_model)
> varImportance <- data.frame(Variables = row.names(importance), 
+                             Importance = round(importance[ ,'MeanDecreaseGini'],2))
> 
> # Create a rank variable based on importance
> rankImportance <- varImportance %>%
+   mutate(Rank = paste0('#',dense_rank(desc(Importance))))
> 
> # Use ggplot2 to visualize the relative importance of variables
> ggplot(rankImportance, aes(x = reorder(Variables, Importance), 
+     y = Importance, fill = Importance)) +
+   geom_bar(stat='identity') + 
+   geom_text(aes(x = Variables, y = 0.5, label = Rank),
+     hjust=0, vjust=0.55, size = 4, colour = 'red') +
+   labs(x = 'Variables') +
+   coord_flip() + 
+   theme_few()
> 
> # Predict using the test set
> rf_prediction <- predict(rf_model, test)
> 
> # Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)
> rf_solution <- data.frame(PassengerID = test$PassengerId, Survived = rf_prediction)
> 
> # Write the solution to file
> write.csv(rf_solution, file = 'Titanic_rf_Solution.csv', row.names = F)
> 
> proc.time()
   user  system elapsed 
  4.891   0.374   5.365 
