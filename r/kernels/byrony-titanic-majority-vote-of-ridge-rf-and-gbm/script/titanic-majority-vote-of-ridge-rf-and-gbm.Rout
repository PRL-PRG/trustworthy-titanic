
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## ----setup, include=FALSE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> knitr::opts_chunk$set(echo=TRUE)
> 
> 
> ## ---- warning=FALSE, message=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(caret)
Loading required package: lattice
Loading required package: ggplot2
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> 
> readData <- function(path.name, file.name, column.types, missing.types){
+     read.csv(paste(path.name, file.name, sep=''), colClasses = column.types, na.strings = missing.types )
+ }
> Titanic.path <- '../input/'
> train.file.name <- 'train.csv'
> test.file.name <- 'test.csv'
> missing.types <- c('NA', '')
> train.column.types <- c('integer',   # PassengerId
+                         'factor',    # Survived 
+                         'factor',    # Pclass
+                         'character', # Name
+                         'factor',    # Sex
+                         'numeric',   # Age
+                         'integer',   # SibSp
+                         'integer',   # Parch
+                         'character', # Ticket
+                         'numeric',   # Fare
+                         'character', # Cabin
+                         'factor'     # Embarked
+ )
> test.column.types <- train.column.types[-2]
> 
> train <- readData(Titanic.path, train.file.name, train.column.types, missing.types)
> test <- readData(Titanic.path, test.file.name, test.column.types, missing.types)
> test$Survived <- NA # add Survived column to test dataset and fill it out with NA.
> 
> combi <- rbind(train, test) # combine training and test set for further manipulation
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> str(train)
'data.frame':	891 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : Factor w/ 2 levels "0","1": 1 2 2 2 1 1 1 1 2 2 ...
 $ Pclass     : Factor w/ 3 levels "1","2","3": 3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  NA "C85" NA "C123" ...
 $ Embarked   : Factor w/ 3 levels "C","Q","S": 3 1 3 3 3 2 3 3 3 1 ...
> summary(train)
  PassengerId    Survived Pclass      Name               Sex     
 Min.   :  1.0   0:549    1:216   Length:891         female:314  
 1st Qu.:223.5   1:342    2:184   Class :character   male  :577  
 Median :446.0            3:491   Mode  :character               
 Mean   :446.0                                                   
 3rd Qu.:668.5                                                   
 Max.   :891.0                                                   
                                                                 
      Age            SibSp           Parch           Ticket         
 Min.   : 0.42   Min.   :0.000   Min.   :0.0000   Length:891        
 1st Qu.:20.12   1st Qu.:0.000   1st Qu.:0.0000   Class :character  
 Median :28.00   Median :0.000   Median :0.0000   Mode  :character  
 Mean   :29.70   Mean   :0.523   Mean   :0.3816                     
 3rd Qu.:38.00   3rd Qu.:1.000   3rd Qu.:0.0000                     
 Max.   :80.00   Max.   :8.000   Max.   :6.0000                     
 NA's   :177                                                        
      Fare           Cabin           Embarked  
 Min.   :  0.00   Length:891         C   :168  
 1st Qu.:  7.91   Class :character   Q   : 77  
 Median : 14.45   Mode  :character   S   :644  
 Mean   : 32.20                      NA's:  2  
 3rd Qu.: 31.00                                
 Max.   :512.33                                
                                               
> 
> 
> ## ---- warning=FALSE, message=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(ggplot2)
> p <- ggplot(train, aes(x=Survived, fill=Sex)) + geom_bar(color='black')
> p
> 
> 
> ## ---- warning=FALSE, message=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # show histogram
> # p3 <- ggplot(train[!is.na(train$Age), ], aes(x=Age, fill=Survived)) + geom_histogram()
> # show density plot
> p2 <- ggplot(train[-which(is.na(train$Age)), ], aes(x=Age, fill=Survived)) + geom_density(alpha=0.6) + 
+     facet_grid(.~Sex)
> 
> p2
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> p3 <- ggplot(train, aes(x=Fare, fill=Survived)) + geom_histogram() + 
+     facet_grid(.~Pclass)
> p3
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> prop.table(table(train$Survived, train$Pclass), margin = 2)
   
            1         2         3
  0 0.3703704 0.5271739 0.7576375
  1 0.6296296 0.4728261 0.2423625
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> p4 <- ggplot(train[!is.na(train$Embarked), ], aes(x=Survived, fill=Embarked)) + geom_bar(color='black')
> p4
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> title.extract <- function(x){
+     strsplit(x, split = "[,.]")[[1]][2]
+ }
> combi$Title <- sapply(combi$Name, FUN = title.extract)
> combi$Title <- sub(" ", "", combi$Title) # delete the space in the Title
> 
> # combine the similiar into the same category
> combi$Title[combi$PassengerId == 797] <- 'Mrs' # this passenger is a female doctor
> combi$Title[combi$Title %in% c('Mlle', 'Mme')] <- 'Mlle'
> combi$Title[combi$Title %in% c('Capt','Don','Major','Sir', 'Jonkheer')] <- 'Sir'
> combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess')] <- 'lady'
> combi$Title <- as.factor(combi$Title)
> 
> combi$Surname <- sapply(combi$Name, FUN = function(x){strsplit(x, split="[,.]")[[1]][1]})
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> combi$FamilySize <- combi$SibSp + combi$Parch + 1
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep = "")
> combi$FamilyID[combi$FamilySize <= 2] <- "Small"
> famIDs <- data.frame(table(combi$FamilyID))
> famIDs <- famIDs[famIDs$Freq <= 2,] 
> # if famIDs frequency <=2, regard it as "Small" as well. 
> combi$FamilyID[combi$FamilyID %in% famIDs$Var1 ] <- "Small"
> combi$FamilyID <- as.factor(combi$FamilyID)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # We write a function to extract the first letter of Cabin. A new factor 'N' is assigned to the missing values. Also, for the passengers with the same ticket number, the most frequent Cabin level besides 'N' is assigned to the rest passengers.
> 
> extractCabin <- function(combi){
+     # extract the first letter of Cabin
+     combi$Cabin <- sapply(combi$Cabin, FUN = function(x){strsplit(x, split='')[[1]][1]})
+     combi$Cabin[is.na(combi$Cabin)] <- 'N'
+     combi$Cabin <- as.factor(combi$Cabin)
+     
+     # set the same number tickets with the same Cabin label
+     combi.ticket <- table(factor(combi$Ticket))
+     combi.ticket.moreThanOne <- combi.ticket[combi.ticket>1]
+     combi.temp <- combi[combi$Ticket %in% names(combi.ticket.moreThanOne), ]
+     for(name in names(combi.ticket.moreThanOne)){
+         row.sameTicket <- combi[combi$Ticket == name, ]
+         Cabin_boolean <- row.sameTicket$Cabin %in% c('A','B','C','D','E','F','G')
+         if(sum(Cabin_boolean) > 0){
+             correctCabin <- names(sort(table(row.sameTicket$Cabin[Cabin_boolean]), decreasing=TRUE))[1]
+             row.sameTicket$Cabin[row.sameTicket$Cabin == "N"] <- correctCabin
+             # modify the Cabin of combi dataset
+             combi$Cabin[row.sameTicket$PassengerId] <- row.sameTicket$Cabin
+         }
+     }
+     combi$Cabin <- as.factor(combi$Cabin)
+     return(combi)
+ }
> combi <- extractCabin(combi)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> extractTicket <- function(ticket){
+     pattern <- c('\\/', '\\.', '\\s', '[[:digit:]]')
+     for (p in pattern){
+         # replace all chracter matches the pattern p with ""
+         ticket <- gsub(p, "", ticket)
+     }
+     ticket <- substr(toupper(ticket), 1,1) # only extract the first alphabet character to label the ticket
+     ticket[ticket==""] <- 'N'
+     ticket <- as.factor(ticket)
+ }
> combi$Ticket <- extractTicket(combi$Ticket)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> combi$Fare[is.na(combi$Fare)] <- median(combi$Fare, na.rm = TRUE)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> combi$Embarked[is.na(combi$Embarked)] <- "S"
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(rpart)
> Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,
+                 data = combi[!is.na(combi$Age), ], method = "anova")
> combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age), ])
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train <- combi[1:nrow(train), ]
> test <- combi[nrow(train)+1 : nrow(test), ]
> 
> extractFeatures <- function(data){
+     features <- c('Pclass',
+                   'Sex',
+                   'Age',
+                   'SibSp',
+                   'Parch',
+                   'Fare',
+                   #'Cabin',
+                   'Embarked',
+                   'Survived',
+                   'Title',
+                   'FamilySize',
+                   'FamilyID'
+                   #'Ticket'
+     )
+     fea <- data[ , features]
+     return(fea)
+ }
> 
> 
> ## ---- warning=FALSE, message=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(glmnet)
Loading required package: Matrix
Loaded glmnet 4.0-2
Warning message:
package ‘glmnet’ was built under R version 3.6.2 
> 
> # create a sparse matrix of the dataset but column Survived. This is converting categorical variables into dummies variables.
> x <- model.matrix(Survived~., data = extractFeatures(train))
> y <- extractFeatures(train)$Survived
> newx <- model.matrix(~., data = extractFeatures(test)[,-which(names(extractFeatures(test)) %in% 'Survived')])
> 
> set.seed(1)
> fit_ridge <- cv.glmnet(x, y, alpha = 0, family = 'binomial', type.measure = 'deviance')
> pred_ridge <- predict(fit_ridge, newx = newx, s = 'lambda.min', type='class')
> 
> submission <- data.frame(PassengerId = test$PassengerId, Survived = pred_ridge)
> write.csv(submission, file = "ridge.csv", row.names=FALSE) 
> 
> 
> ## ---- warning=FALSE, message=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(caret)
> 
> fitControl <- trainControl(method = 'repeatedcv',
+                            number = 3,
+                            repeats = 3)
> # for caret, there are only four tuning parameters below.
> 
> # tune n.trees
> newGrid <- expand.grid(n.trees = c(50, 100, 200, 300), 
+                        interaction.depth = c(6),
+                        shrinkage = 0.01,
+                        n.minobsinnode = 10
+                        )
> fit_gbm <- train(Survived ~., data=extractFeatures(train), 
+                  method = 'gbm', 
+                  trControl = fitControl,
+                  tuneGrid =  newGrid,
+                  bag.fraction = 0.5,
+                  verbose = FALSE)
There were 50 or more warnings (use warnings() to see the first 50)
> fit_gbm$bestTune
  n.trees interaction.depth shrinkage n.minobsinnode
4     300                 6      0.01             10
> 
> # tune interaction.depth
> set.seed(1234)
> newGrid <- expand.grid(n.trees = c(200), 
+                        interaction.depth = c(4:12),
+                        shrinkage = 0.01,
+                        n.minobsinnode = 10
+                        )
> fit_gbm <- train(Survived ~., data=extractFeatures(train), 
+                  method = 'gbm', 
+                  trControl = fitControl,
+                  tuneGrid =  newGrid,
+                  bag.fraction = 0.5,
+                  verbose = FALSE)
There were 50 or more warnings (use warnings() to see the first 50)
> fit_gbm$bestTune
  n.trees interaction.depth shrinkage n.minobsinnode
9     200                12      0.01             10
> 
> # decrease learning rate
> set.seed(1234)
> newGrid <- expand.grid(n.trees = c(2000), 
+                        interaction.depth = c(10),
+                        shrinkage = 0.001,
+                        n.minobsinnode = 10
+                        )
> fit_gbm_LowerRate <- train(Survived ~., data=extractFeatures(train), 
+                  method = 'gbm', 
+                  trControl = fitControl,
+                  tuneGrid =  newGrid,
+                  bag.fraction = 0.5,
+                  verbose = FALSE)
There were 50 or more warnings (use warnings() to see the first 50)
> fit_gbm_LowerRate$results
  n.trees interaction.depth shrinkage n.minobsinnode  Accuracy     Kappa
1    2000                10     0.001             10 0.8286569 0.6277134
   AccuracySD    KappaSD
1 0.008323455 0.01925702
> 
> # predict 
> pred_gbm <- predict(fit_gbm_LowerRate, extractFeatures(test))
> submission <- data.frame(PassengerId = test$PassengerId, Survived = pred_gbm)
> write.csv(submission, file = "gbm_ntree-2000_rate-0.001_inter-10.csv", row.names=FALSE)
> 
> 
> ## ---- warning=FALSE, message=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(party)
Loading required package: grid
Loading required package: mvtnorm
Loading required package: modeltools
Loading required package: stats4
Loading required package: strucchange
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

Loading required package: sandwich
Warning messages:
1: package ‘party’ was built under R version 3.6.2 
2: package ‘zoo’ was built under R version 3.6.2 
> set.seed(1)
> fit_crf <- cforest(Survived ~., data=extractFeatures(train), controls=cforest_unbiased(ntree=2000, mtry=3))
> pred_crf <- predict(fit_crf, extractFeatures(test), OOB = TRUE, type="response")
> 
> submission <- data.frame(PassengerId = test$PassengerId, Survived = pred_crf)
Error in data.frame(PassengerId = test$PassengerId, Survived = pred_crf) : 
  arguments imply differing number of rows: 418, 891
Execution halted
