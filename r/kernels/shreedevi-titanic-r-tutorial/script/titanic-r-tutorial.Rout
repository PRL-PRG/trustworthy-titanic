
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## ----setup, include=FALSE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> knitr::opts_chunk$set(echo = TRUE)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(ggplot2)
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library(stringr)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> train <- read.csv("../input/train.csv",header = TRUE)
> test <- read.csv("../input/train.csv", header = TRUE)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> head(train)
  PassengerId Survived Pclass
1           1        0      3
2           2        1      1
3           3        1      3
4           4        1      1
5           5        0      3
6           6        0      3
                                                 Name    Sex Age SibSp Parch
1                             Braund, Mr. Owen Harris   male  22     1     0
2 Cumings, Mrs. John Bradley (Florence Briggs Thayer) female  38     1     0
3                              Heikkinen, Miss. Laina female  26     0     0
4        Futrelle, Mrs. Jacques Heath (Lily May Peel) female  35     1     0
5                            Allen, Mr. William Henry   male  35     0     0
6                                    Moran, Mr. James   male  NA     0     0
            Ticket    Fare Cabin Embarked
1        A/5 21171  7.2500              S
2         PC 17599 71.2833   C85        C
3 STON/O2. 3101282  7.9250              S
4           113803 53.1000  C123        S
5           373450  8.0500              S
6           330877  8.4583              Q
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> head(test)
  PassengerId Survived Pclass
1           1        0      3
2           2        1      1
3           3        1      3
4           4        1      1
5           5        0      3
6           6        0      3
                                                 Name    Sex Age SibSp Parch
1                             Braund, Mr. Owen Harris   male  22     1     0
2 Cumings, Mrs. John Bradley (Florence Briggs Thayer) female  38     1     0
3                              Heikkinen, Miss. Laina female  26     0     0
4        Futrelle, Mrs. Jacques Heath (Lily May Peel) female  35     1     0
5                            Allen, Mr. William Henry   male  35     0     0
6                                    Moran, Mr. James   male  NA     0     0
            Ticket    Fare Cabin Embarked
1        A/5 21171  7.2500              S
2         PC 17599 71.2833   C85        C
3 STON/O2. 3101282  7.9250              S
4           113803 53.1000  C123        S
5           373450  8.0500              S
6           330877  8.4583              Q
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Combine data sets
> data.combined <- rbind(train, test)
> str(data.combined)
'data.frame':	1782 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : Factor w/ 891 levels "Abbing, Mr. Anthony",..: 109 191 358 277 16 559 520 629 417 581 ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : Factor w/ 681 levels "110152","110413",..: 524 597 670 50 473 276 86 396 345 133 ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : Factor w/ 148 levels "","A10","A14",..: 1 83 1 57 1 1 131 1 1 1 ...
 $ Embarked   : Factor w/ 4 levels "","C","Q","S": 4 2 4 4 4 3 4 4 4 2 ...
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> data.combined$Survived <- as.factor(data.combined$Survived)
> data.combined$Pclass <- as.factor(data.combined$Pclass)
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Take a look at gross survival rates
> table(data.combined$Survived)

   0    1 
1098  684 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Distribution across classes
> table(data.combined$Pclass)

  1   2   3 
432 368 982 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> train$Pclass <- as.factor(train$Pclass)
> ggplot(train, aes(x = Pclass, fill = factor(Survived))) +
+   geom_bar(width = 0.5) +
+   xlab("Pclass") +
+   ylab("Total Count") +
+   labs(fill = "Survived") 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> head(as.character(train$Name))
[1] "Braund, Mr. Owen Harris"                            
[2] "Cumings, Mrs. John Bradley (Florence Briggs Thayer)"
[3] "Heikkinen, Miss. Laina"                             
[4] "Futrelle, Mrs. Jacques Heath (Lily May Peel)"       
[5] "Allen, Mr. William Henry"                           
[6] "Moran, Mr. James"                                   
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # How many unique names are there across both train & test?
> length(unique(as.character(data.combined$Name)))
[1] 891
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Two duplicate names, take a closer look
> # First, get the duplicate names and store them as a vector
> dup.names <- as.character(data.combined[which(duplicated(as.character(data.combined$Name))), "name"])
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Next, take a look at the records in the combined data set
> data.combined[which(data.combined$Name %in% dup.names),]
 [1] PassengerId Survived    Pclass      Name        Sex         Age        
 [7] SibSp       Parch       Ticket      Fare        Cabin       Embarked   
<0 rows> (or 0-length row.names)
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Any correlation with other variables (e.g., sibsp)?
> misses <- data.combined[which(str_detect(data.combined$Name, "Miss.")),]
> misses[1:5,]
   PassengerId Survived Pclass                                 Name    Sex Age
3            3        1      3               Heikkinen, Miss. Laina female  26
11          11        1      3      Sandstrom, Miss. Marguerite Rut female   4
12          12        1      1             Bonnell, Miss. Elizabeth female  58
15          15        0      3 Vestrom, Miss. Hulda Amanda Adolfina female  14
23          23        1      3          McGowan, Miss. Anna "Annie" female  15
   SibSp Parch           Ticket    Fare Cabin Embarked
3      0     0 STON/O2. 3101282  7.9250              S
11     1     1          PP 9549 16.7000    G6        S
12     0     0           113783 26.5500  C103        S
15     0     0           350406  7.8542              S
23     0     0           330923  8.0292              Q
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Hypothesis - Name titles correlate with age
> mrses <- data.combined[which(str_detect(data.combined$Name, "Mrs.")), ]
> mrses[1:5,]
   PassengerId Survived Pclass
2            2        1      1
4            4        1      1
9            9        1      3
10          10        1      2
16          16        1      2
                                                  Name    Sex Age SibSp Parch
2  Cumings, Mrs. John Bradley (Florence Briggs Thayer) female  38     1     0
4         Futrelle, Mrs. Jacques Heath (Lily May Peel) female  35     1     0
9    Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg) female  27     0     2
10                 Nasser, Mrs. Nicholas (Adele Achem) female  14     1     0
16                    Hewlett, Mrs. (Mary D Kingcome)  female  55     0     0
     Ticket    Fare Cabin Embarked
2  PC 17599 71.2833   C85        C
4    113803 53.1000  C123        S
9    347742 11.1333              S
10   237736 30.0708              C
16   248706 16.0000              S
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Check out males to see if pattern continues
> males <- data.combined[which(data.combined$Sex == "male"), ]
> 
> males[1:5,]
  PassengerId Survived Pclass                           Name  Sex Age SibSp
1           1        0      3        Braund, Mr. Owen Harris male  22     1
5           5        0      3       Allen, Mr. William Henry male  35     0
6           6        0      3               Moran, Mr. James male  NA     0
7           7        0      1        McCarthy, Mr. Timothy J male  54     0
8           8        0      3 Palsson, Master. Gosta Leonard male   2     3
  Parch    Ticket    Fare Cabin Embarked
1     0 A/5 21171  7.2500              S
5     0    373450  8.0500              S
6     0    330877  8.4583              Q
7     0     17463 51.8625   E46        S
8     1    349909 21.0750              S
> 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> extractTitle <- function(Name) {
+   Name <- as.character(Name)
+   
+   if (length(grep("Miss.", Name)) > 0) {
+     return ("Miss.")
+   } else if (length(grep("Master.", Name)) > 0) {
+     return ("Master.")
+   } else if (length(grep("Mrs.", Name)) > 0) {
+     return ("Mrs.")
+   } else if (length(grep("Mr.", Name)) > 0) {
+     return ("Mr.")
+   } else {
+     return ("Other")
+   }
+ }
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> titles <- NULL
> for (i in 1:nrow(data.combined)) {
+   titles <- c(titles, extractTitle(data.combined[i,"Name"]))
+ }
> data.combined$title <- as.factor(titles)
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> ggplot(data.combined[1:891,], aes(x = title, fill = Survived)) +
+   geom_bar() +
+   facet_wrap(~Pclass) + 
+   ggtitle("Pclass") +
+   xlab("Title") +
+   ylab("Total Count") +
+   labs(fill = "Survived")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> summary(train$Age)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
   0.42   20.12   28.00   29.70   38.00   80.00     177 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> ggplot(train, aes(x = Age, fill = Survived)) +
+   facet_wrap(~Sex + Pclass) +
+ geom_histogram(binwidth = 10) +
+   xlab("Age") +
+   ylab("Total Count")
Warning message:
Removed 177 rows containing non-finite values (stat_bin). 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> boys <- data.combined[which(data.combined$title == "Master."),]
> summary(boys$Age)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
  0.420   1.000   3.500   4.574   8.000  12.000       8 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> misses <- data.combined[which(data.combined$title == "Miss."),]
> summary(misses$Age)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
   0.75   14.00   21.00   21.77   30.00   63.00      72 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(misses[misses$Survived != "None",], aes(x = Age, fill = Survived)) +
+   facet_wrap(~Pclass) +
+   geom_histogram(binwidth = 5) +
+   ggtitle("Age for 'Miss.' by Pclass") + 
+   xlab("Age") +
+   ylab("Total Count")
Warning message:
Removed 72 rows containing non-finite values (stat_bin). 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> misses.alone <- misses[which(misses$SibSp == 0 & misses$Parch == 0),]
> summary(misses.alone$Age)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
   5.00   21.00   26.00   27.74   34.00   58.00      44 
> length(which(misses.alone$Age <= 14.5))
[1] 6
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Move on to the sibsp variable, summarize the variable
> summary(data.combined$SibSp)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   0.000   0.000   0.523   1.000   8.000 
> 
> 
> # Can we treat as a factor?
> length(unique(data.combined$SibSp))
[1] 7
> data.combined$SibSp <- as.factor(data.combined$SibSp)
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(data.combined[1:891,], aes(x = SibSp, fill = Survived)) +
+ geom_bar() +
+   facet_wrap(~Pclass + title) + 
+   ggtitle("Pclass, Title") +
+   xlab("SibSp") +
+   ylab("Total Count") +
+   ylim(0,300)
>   labs(fill = "Survived")
$fill
[1] "Survived"

attr(,"class")
[1] "labels"
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> data.combined$Parch <- as.factor(data.combined$Parch)
> ggplot(data.combined[1:891,], aes(x = Parch, fill = Survived)) +
+   geom_bar() +
+   facet_wrap(~Pclass + title) + 
+   ggtitle("Pclass, Title") +
+   xlab("ParCh") +
+   ylab("Total Count") +
+   ylim(0,30) +
+   labs(fill = "Survived")
Warning message:
Removed 7 rows containing missing values (geom_bar). 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> temp.SibSp <- c(train$SibSp, test$SibSp)
> temp.Parch <- c(train$Parch, test$Parch)
> data.combined$family.size <- as.factor(temp.SibSp + temp.Parch + 1)
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Visualize it to see if it is predictive
> ggplot(data.combined[1:891,], aes(x = family.size, fill = Survived)) +
+   geom_bar() +
+   facet_wrap(~Pclass + title) + 
+   ggtitle("Pclass, Title") +
+   xlab("family.size") +
+   ylab("Total Count") +
+   ylim(0,300) +
+   labs(fill = "Survived")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> str(data.combined$Ticket)
 Factor w/ 681 levels "110152","110413",..: 524 597 670 50 473 276 86 396 345 133 ...
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> data.combined$Ticket <- as.character(data.combined$Ticket)
> data.combined$Ticket[1:5]
[1] "A/5 21171"        "PC 17599"         "STON/O2. 3101282" "113803"          
[5] "373450"          
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ticket.first.char <-  substr(data.combined$Ticket, 1, 1)
> unique(ticket.first.char)
 [1] "A" "P" "S" "1" "3" "2" "C" "7" "W" "4" "F" "L" "9" "6" "5" "8"
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> data.combined$ticket.first.char <- as.factor(ticket.first.char)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(data.combined[1:891,], aes(x = ticket.first.char, fill = Survived)) +
+   geom_bar() +
+   ggtitle("Survivability by ticket.first.char") +
+   xlab("ticket.first.char") +
+   ylab("Total Count") +
+   ylim(0,350) +
+   labs(fill = "Survived")
> 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(data.combined[1:891,], aes(x = ticket.first.char, fill = Survived)) +
+   geom_bar() +
+   facet_wrap(~Pclass) + 
+   ggtitle("Pclass") +
+   xlab("ticket.first.char") +
+   ylab("Total Count") +
+   ylim(0,300) +
+   labs(fill = "Survived")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(data.combined[1:891,], aes(x = ticket.first.char, fill = Survived)) +
+   geom_bar() +
+   facet_wrap(~Pclass+title) + 
+   ggtitle("Pclass, Title") +
+   xlab("ticket.first.char") +
+   ylab("Ticket class") +
+   ylim(0,200) +
+   labs(fill = "Survived")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> summary(data.combined$Fare)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   7.903  14.454  32.204  31.000 512.329 
> length(unique(data.combined$Fare))
[1] 248
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #Can't make fare a factor, treat as numeric & visualize with histogram
> ggplot(data.combined, aes(x = Fare)) +
+   geom_histogram(binwidth = 5) +
+   ggtitle("Combined Fare Distribution") +
+   xlab("Fare") +
+   ylab("Total Count") +
+   ylim(0,200)
Warning message:
Removed 2 rows containing missing values (geom_bar). 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Let's check to see if fare has predictive power
> ggplot(data.combined[1:891,], aes(x = Fare, fill = Survived)) +
+   geom_histogram(binwidth = 5) +
+   facet_wrap(~Pclass + title) + 
+   ggtitle("Pclass, Title") +
+   xlab("fare") +
+   ylab("Total Count") +
+   ylim(0,50)
Warning message:
Removed 3 rows containing missing values (geom_bar). 
>   labs(fill = "Survived")
$fill
[1] "Survived"

attr(,"class")
[1] "labels"
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Analysis of the cabin variable
> str(data.combined$Cabin)
 Factor w/ 148 levels "","A10","A14",..: 1 83 1 57 1 1 131 1 1 1 ...
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #Cabin really isn't a factor, make a string and the display first 100
> data.combined$Cabin <- as.character(data.combined$Cabin)
> data.combined$Cabin[1:5]
[1] ""     "C85"  ""     "C123" ""    
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> data.combined[which(data.combined$Cabin == ""), "Cabin"] <- "U"
> data.combined$Cabin[1:10]
 [1] "U"    "C85"  "U"    "C123" "U"    "U"    "E46"  "U"    "U"    "U"   
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> cabin.first.char <- as.factor(substr(data.combined$Cabin, 1, 1))
> str(cabin.first.char)
 Factor w/ 9 levels "A","B","C","D",..: 9 3 9 3 9 9 5 9 9 9 ...
> levels(cabin.first.char)
[1] "A" "B" "C" "D" "E" "F" "G" "T" "U"
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
>  # Add to combined data set and plot 
> data.combined$cabin.first.char <- cabin.first.char
> 
> # High level plot
> ggplot(data.combined[1:891,], aes(x = cabin.first.char, fill = Survived)) +
+   geom_bar() +
+   ggtitle("Survivability by cabin.first.char") +
+   xlab("cabin.first.char") +
+   ylab("Total Count") +
+   ylim(0,750) +
+   labs(fill = "Survived")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Could have some predictive power, drill in
> ggplot(data.combined[1:891,], aes(x = cabin.first.char, fill = Survived)) +
+   geom_bar() +
+   facet_wrap(~Pclass) +
+   ggtitle("Survivability by cabin.first.char") +
+   xlab("Pclass") +
+   ylab("Total Count") +
+   ylim(0,500) +
+   labs(fill = "Survived")
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Does this feature improve upon pclass + title?
> ggplot(data.combined[1:891,], aes(x = cabin.first.char, fill = Survived)) +
+   geom_bar() +
+   facet_wrap(~Pclass + title) +
+   ggtitle("Pclass, Title") +
+   xlab("cabin.first.char") +
+   ylab("Total Count") +
+   ylim(0,500) +
+   labs(fill = "Survived")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Does survivability depend on where you got onboard the Titanic?
> str(data.combined$Embarked)
 Factor w/ 4 levels "","C","Q","S": 4 2 4 4 4 3 4 4 4 2 ...
> levels(data.combined$Embarked)
[1] ""  "C" "Q" "S"
> 
> 
> # Plot data for analysis
> ggplot(data.combined[1:891,], aes(x = Embarked, fill = Survived)) +
+   geom_bar() +
+   facet_wrap(~Pclass + title) +
+   ggtitle("Pclass, Title") +
+   xlab("embarked") +
+   ylab("Total Count") +
+   ylim(0,300) +
+   labs(fill = "Survived")
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:ggplot2’:

    margin

> 
> # Train a Random Forest with the default parameters using pclass & title
> rf.train.1 <- data.combined[1:891, c("Pclass", "title")]
> rf.label <- as.factor(train$Survived)
> 
> set.seed(1234)
> rf.1 <- randomForest(x = rf.train.1, y = rf.label, importance = TRUE, ntree = 1000)
> rf.1

Call:
 randomForest(x = rf.train.1, y = rf.label, ntree = 1000, importance = TRUE) 
               Type of random forest: classification
                     Number of trees: 1000
No. of variables tried at each split: 1

        OOB estimate of  error rate: 20.99%
Confusion matrix:
    0   1 class.error
0 536  13  0.02367942
1 174 168  0.50877193
> 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> varImpPlot(rf.1)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Train a Random Forest using pclass, title, & sibsp
> rf.train.2 <- data.combined[1:891, c("Pclass", "title", "SibSp")]
> 
> set.seed(1234)
> rf.2 <- randomForest(x = rf.train.2, y = rf.label, importance = TRUE, ntree = 1000)
> rf.2

Call:
 randomForest(x = rf.train.2, y = rf.label, ntree = 1000, importance = TRUE) 
               Type of random forest: classification
                     Number of trees: 1000
No. of variables tried at each split: 1

        OOB estimate of  error rate: 19.53%
Confusion matrix:
    0   1 class.error
0 487  62   0.1129326
1 112 230   0.3274854
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> varImpPlot(rf.2)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Train a Random Forest using pclass, title, & parch
> rf.train.3 <- data.combined[1:891, c("Pclass", "title", "Parch")]
> 
> set.seed(1234)
> rf.3 <- randomForest(x = rf.train.3, y = rf.label, importance = TRUE, ntree = 1000)
> rf.3

Call:
 randomForest(x = rf.train.3, y = rf.label, ntree = 1000, importance = TRUE) 
               Type of random forest: classification
                     Number of trees: 1000
No. of variables tried at each split: 1

        OOB estimate of  error rate: 19.87%
Confusion matrix:
    0   1 class.error
0 496  53  0.09653916
1 124 218  0.36257310
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> varImpPlot(rf.3)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> rf.train.4 <- data.combined[1:891, c("Pclass", "title", "family.size")]
> 
> set.seed(1234)
> rf.4 <- randomForest(x = rf.train.4, y = rf.label, importance = TRUE, ntree = 1000)
> rf.4

Call:
 randomForest(x = rf.train.4, y = rf.label, ntree = 1000, importance = TRUE) 
               Type of random forest: classification
                     Number of trees: 1000
No. of variables tried at each split: 1

        OOB estimate of  error rate: 18.18%
Confusion matrix:
    0   1 class.error
0 486  63   0.1147541
1  99 243   0.2894737
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> varImpPlot(rf.4)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #Train a Random Forest using pclass, title, sibsp, & family.size
> rf.train.6 <- data.combined[1:891, c("Pclass", "title", "SibSp", "family.size")]
> 
> set.seed(1234)
> rf.6 <- randomForest(x = rf.train.6, y = rf.label, importance = TRUE, ntree = 1000)
> rf.6

Call:
 randomForest(x = rf.train.6, y = rf.label, ntree = 1000, importance = TRUE) 
               Type of random forest: classification
                     Number of trees: 1000
No. of variables tried at each split: 2

        OOB estimate of  error rate: 19.64%
Confusion matrix:
    0   1 class.error
0 487  62   0.1129326
1 113 229   0.3304094
> 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> varImpPlot(rf.6)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Subset our test records and features
> test.submit.df <- data.combined[892:1309, c("Pclass", "title", "family.size")]
> 
> # Make predictions
> rf.4.preds <- predict(rf.4, test.submit.df)
> table(rf.4.preds)
rf.4.preds
  0   1 
261 157 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(rpart)
> library(rpart.plot)
> 
> library(caret)
Loading required package: lattice
> library(doSNOW)
Error in library(doSNOW) : there is no package called ‘doSNOW’
Execution halted
