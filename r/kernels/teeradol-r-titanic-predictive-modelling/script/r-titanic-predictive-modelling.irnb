{"cells":[{"metadata":{},"cell_type":"markdown","source":"This is my first kernel doing Titanic predictive modelling using 4 methods of prediction including GLM, KNN, Decision tree and Random forest. In this kernel, I will do 5 steps of doing predictive modelling including Loading important library, Import data , data Exploratory, Data manipulation and modelling process. All will be done by R Enjoy!"},{"metadata":{"_uuid":"051d70d956493feee0c6d64651c6a088724dca2a","_execution_state":"idle","trusted":true},"cell_type":"code","source":"# 01 IMPORT LIBRARY\nlibrary(dplyr)         ## Data manipulation\nlibrary(ggplot2)       ## Data vistualization\n\nlibrary(class)         ## KNN model\nlibrary(rpart)         ## Decision tree\nlibrary(rpart.plot)\nlibrary(ramdomForest)  ## Random forest\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"First step, I import number of libaries to do various things including data manipulation, data vistualization and modelling part.\nThe followings are usage of each library  \n1) dplyr   - data manipulation (i.e. sort, filter, create new variables based on conditions)  \n2) ggplot2 - data vistualization (i.e. bar chart, histogram, scatter plot)  \n3) class   - K nearest neighbor modelling  \n4) rpart and rpart.plot - Decision tree modelliong and vistualization  \n5) ramdomForest - Randam Forest model  "},{"metadata":{"_kg_hide-input":false,"trusted":true},"cell_type":"code","source":"# 02 IMPORT DATASET\ntrain_data <- read.csv('../input/train.csv') # Import train dataset\ntest_data  <- read.csv('../input/test.csv')  # Import test dataset\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"In the step, I import train.csv to \"train_data\" data frame and test.csv to \"test_data\" for future process"},{"metadata":{"trusted":true},"cell_type":"code","source":"# 03 EXPLORATORY DATASET\n## Look at all variables in dataset\nglimpse(train_data)  \n\n## Create new data frame called \"train_data2\" including 2 new variables\ntrain_data2 <- train_data %>% \n  mutate(\n## Create new variable \"Fam\" - Number of person in Family\n      Fam = Parch + SibSp, \n## Create new variables \"Age_grp\" - Age group band\n      Age_grp = case_when(\n                    is.na(.$Age) ~ \"00 Error\",\n                    .$Age > 0  & .$Age <= 12 ~ \"01 Child\",\n                    .$Age > 12 & .$Age <= 20  ~ \"02 Teenager\",\n                    .$Age > 20 & .$Age <= 50  ~ \"03 Adult\",\n                    .$Age > 50 ~ \"04 Elder\"))\n\n\n## Create function to do summary table\nsumtabl_fun  <- function(data, var){\n    temp_table  <- data  %>% \n        group_by_(as.character(var))  %>%\n        summarise(Survival_rate = sum(Survived)/n())\n \n    return(temp_table)\n}\n\n## Start summarising function\nsumtabl_Sex       <- sumtabl_fun(train_data, 'Sex')\nsumtabl_Pclass    <- sumtabl_fun(train_data, 'Pclass') \nsumtabl_SibSp     <- sumtabl_fun(train_data, 'SibSp')\nsumtabl_Parch     <- sumtabl_fun(train_data, 'Parch') \nsumtabl_Embarked  <- sumtabl_fun(train_data, 'Embarked')\nsumtabl_Agegrp    <- sumtabl_fun(train_data2, 'Age_grp')\n\n## Plot bar chart\n# Plot Sex bar chart\nggplot(sumtabl_Sex, aes(Sex, Survival_rate)) +  geom_bar(aes(fill = Sex), position = \"dodge\", stat=\"identity\")\nprint(sumtabl_Sex)\n\n# Plot PClass bar chart\nggplot(sumtabl_Pclass, aes(Pclass, Survival_rate)) +  geom_bar(aes(fill = Pclass), position = \"dodge\", stat=\"identity\")\nprint(sumtabl_Pclass)\n\n# Plot SibSp bar chart\nggplot(sumtabl_SibSp, aes(SibSp, Survival_rate)) +  geom_bar(aes(fill = SibSp), position = \"dodge\", stat=\"identity\")\nprint(sumtabl_SibSp)\n\n# Plot Parch bar chart\nggplot(sumtabl_Parch, aes(Parch, Survival_rate)) +  geom_bar(aes(fill = Parch), position = \"dodge\", stat=\"identity\")\nprint(sumtabl_Parch)\n\n# Plot Embarked bar chart\nggplot(sumtabl_Embarked, aes(Embarked, Survival_rate)) +  geom_bar(aes(fill = Embarked), position = \"dodge\", stat=\"identity\")\n\n# Plot Age group chart\nggplot(sumtabl_Agegrp, aes(Age_grp, Survival_rate)) + geom_bar(aes(fill = Survival_rate), position = \"dodge\", stat=\"identity\")\n\n# Plot Age distribution compare between death and survived\nggplot(train_data, aes(Age, fill = as.factor(Survived))) + geom_histogram(alpha = 0.5, position = 'identity')\n\n# Plot Sibling distribution compared between death and survived\nggplot(train_data, aes(SibSp, fill = as.factor(Survived))) + geom_histogram(alpha = 0.5, position = 'identity')\n\n# Plot Parch distribution compared between death or survived\nggplot(train_data, aes(Parch, fill = as.factor(Survived))) + geom_histogram(alpha = 0.5, position = 'identity')\n\n# Plot Family size distribution compared between death and survivied\nggplot(train_data2, aes(Fam, fill = as.factor(Survived))) + geom_histogram(alpha = 0.5, position = 'identity')","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"After doing some data manipulation and data vistualization for preliminary analysis, there are 8 possible rating factors to predict survival rate of Titanic dataset including Sex, Age, Number of Siblings, Number of Parents/Children, Fare price, Cabin and the port of Embarkation.  \n\nFrom Data explorary analysis, there are 6 factors that I explore to see which characteristic of person will have more survival rate  \n01) Gender - Female has 74% chance of survival rate and Male has just only 18.9% chance of survival  \n02) Ticket class - the better class the higher chance of survival  \n03) Number of Siblings/Spouses - It seems the lower number of siblings/spouses has the higher chance of survival  \n04) Number of Parents/Children - Having parents/children has higher change of survival  \n05) Port of Embarkation - Cherboug has the highest chance of survival  \n06) Distribution of famlity between survied and death are pretty much the same\n"},{"metadata":{"trusted":true},"cell_type":"code","source":"# 04 Data manipulation for data preparation\n## Create new data frame called \"train_db\" for modelling part\ntrain_db <- train_data2 %>% \n  mutate(trn_Sex   = ifelse(Sex == 'male', 1, 0),\n         trn_Alone = ifelse((SibSp + Parch) == 0, 1, 0),\n         trn_Embar = case_when(\n                        .$Embarked == \"C\" ~ 1,\n                        .$Embarked == \"S\" ~ 2,\n                        .$Embarked == \"Q\" ~ 3,\n                        TRUE ~ 0 ),\n         trn_Pclass = Pclass,\n         trn_child  = ifelse(Age_grp == \"01 Child\", 1, 0)) %>% \n  select(starts_with(\"trn\"), Survived)\n\n## Create new data frame called \"test_db\" for validation part \ntest_db <- test_data %>% \n  mutate(Fam = Parch + SibSp, \n         Age_grp = case_when( is.na(.$Age) ~ \"00 Error\",\n                              .$Age > 0  & .$Age <= 12 ~ \"01 Child\",\n                              .$Age > 12 & .$Age <= 20  ~ \"02 Teenager\",\n                              .$Age > 20 & .$Age <= 50  ~ \"03 Adult\",\n                              .$Age > 50 ~ \"04 Elder\")) %>% \n\n  mutate(trn_Sex   = ifelse(Sex == 'male', 1, 0),\n         trn_Alone = ifelse((SibSp + Parch) == 0, 1, 0),\n         trn_Embar = case_when(\n                        .$Embarked == \"C\" ~ 1,\n                        .$Embarked == \"S\" ~ 2,\n                        .$Embarked == \"Q\" ~ 3,\n                        TRUE ~ 0 ),\n         trn_Pclass = Pclass,\n         trn_child  = ifelse(Age_grp == \"01 Child\", 1, 0)) %>% \n  select(starts_with(\"trn\"))","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Aboved step is data manipulation and preparation, I just turn catergorical into numeric and put in another dataset. Then, it is ready to do modelling and validation process."},{"metadata":{"trusted":true},"cell_type":"code","source":"# 05 MODELLING PART\nsurvived  <- train_db$Survived\npassenger <- test_data$PassengerId\n\n## Using GLM logit regression\nmodel_glm1 <- glm(Survived ~.,family = binomial(link='logit'), data=train_db)\nmodel_glm2 <- glm(Survived ~ trn_Sex + trn_Pclass + trn_child, family = binomial(link='logit'), data=train_db)\n\npredict_glm <- predict(model_glm2, test_db)\n\n# Score 0.77033\n\n## Using kkn\ntrain_db2 <- train_db %>% \n  select(-Survived)\n\nresult_knn <- knn(train_db2, test_db, survived, k = 5, l = 0, prob = TRUE, use.all = TRUE)\nsubmit.knn <- data.frame(PassengerId = passenger, Survived = result_knn) \n\n# Score 0.78468\n\n## Using Decision tree\nmodel_tree <- rpart(Survived ~., data = train_db)\n\nfitted.results_tree <- data.frame(prop  = predict(model_tree, test_db))\nresult_tree <-  fitted.results_tree %>% \n  mutate(Survived = ifelse(prop > 0.5, 1, 0)) %>% \n  select(Survived)\n\nrpart.plot(model_tree)\n\nsubmit.tree <- data.frame(PassengerId = passenger, Survived = result_tree)\n\n## Using Random Forest\nmodel_ranforest <- randomForest(Survived ~., data = train_db, importance = TRUE )\n\nfitted.results_ranforest <- data.frame(prop  =  predict(model_ranforest, test_db, type = \"class\"))\n\nresult_ranforest <- fitted.results_ranforest %>% \n  mutate(Survived = ifelse(prop > 0.5, 1, 0)) %>% \n  select(Survived)\n\nsubmit.tree <- data.frame(PassengerId = passenger, Survived = result_ranforest)\n\n#Score 0.78947","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}