
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## ----libraries, include=FALSE----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(ggplot2) #gprahs
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library(knitr)
> library(dplyr)#piping operator + data manipulation

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> library(gridExtra) #plot multiple charts 

Attaching package: ‘gridExtra’

The following object is masked from ‘package:dplyr’:

    combine

> library(Amelia) #plot a heatmap with missinn values
Loading required package: Rcpp
## 
## Amelia II: Multiple Imputation
## (Version 1.7.6, built: 2019-11-24)
## Copyright (C) 2005-2020 James Honaker, Gary King and Matthew Blackwell
## Refer to http://gking.harvard.edu/amelia/ for more information
## 
> library(caret) #models
Loading required package: lattice
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:gridExtra’:

    combine

The following object is masked from ‘package:dplyr’:

    combine

The following object is masked from ‘package:ggplot2’:

    margin

> 
> 
> ## ----data, warning=FALSE---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full <- read.csv("../input/train.csv", stringsAsFactors = T) #1:891 - fulling set
> test <- read.csv("../input/test.csv", stringsAsFactors = T) #892:1309 - test set
> full <- bind_rows(full, test)
> 
> 
> ## ----giveninfo, echo = F---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> kable(data.frame(Variable = c("PassengerId", "Survived", "Pclass", "Name", "Sex", "Age", "SibSp", "Parch", "Ticket", "Fare", "Cabin", "Embarked"),
+            Definition = c("PassengerId", "Survival", "Ticket Class", "Name", "Sex", "Age", "# of siblings / spouses aboard", "# of parents / children aboard", 
+                           "Ticket number", "Passenger fare", "Cabin number", "Port of Embarkation"),
+            Key = c("", "1 = Yes, 0 = No", "1 = 1st, 2 = 2nd, <br>3 = 3rd", "", "", "", "", "", "", "", "", "C = Cherbourg, <br>Q = Queenstown, <br>S = Southampton"),
+            Notes = c("", "", "A proxy for socio-economic status (SES) <br>1st = Upper, 2nd = Middle, 3rd = Lower", "", "", 
+                      "Age is fractional if less than 1. <br>If the age is estimated, is it in the form of xx.5", 
+                      "Sibling = brother, sister, stepbrother, stepsister, <br>Spouse = husband, wife (mistresses and fiancés were ignored)",
+                      "Parent = mother, father, <br>Child = daughter, son, stepdaughter, stepson, <br>Some children travelled only with a nanny, therefore parch=0 for them",
+                      "", "", "", "")))


|Variable    |Definition                     |Key                                                    |Notes                                                                                                                                                |
|:-----------|:------------------------------|:------------------------------------------------------|:----------------------------------------------------------------------------------------------------------------------------------------------------|
|PassengerId |PassengerId                    |                                                       |                                                                                                                                                     |
|Survived    |Survival                       |1 = Yes, 0 = No                                        |                                                                                                                                                     |
|Pclass      |Ticket Class                   |1 = 1st, 2 = 2nd, <br>3 = 3rd                          |A proxy for socio-economic status (SES) <br>1st = Upper, 2nd = Middle, 3rd = Lower                                                                   |
|Name        |Name                           |                                                       |                                                                                                                                                     |
|Sex         |Sex                            |                                                       |                                                                                                                                                     |
|Age         |Age                            |                                                       |Age is fractional if less than 1. <br>If the age is estimated, is it in the form of xx.5                                                             |
|SibSp       |# of siblings / spouses aboard |                                                       |Sibling = brother, sister, stepbrother, stepsister, <br>Spouse = husband, wife (mistresses and fiancés were ignored)                                 |
|Parch       |# of parents / children aboard |                                                       |Parent = mother, father, <br>Child = daughter, son, stepdaughter, stepson, <br>Some children travelled only with a nanny, therefore parch=0 for them |
|Ticket      |Ticket number                  |                                                       |                                                                                                                                                     |
|Fare        |Passenger fare                 |                                                       |                                                                                                                                                     |
|Cabin       |Cabin number                   |                                                       |                                                                                                                                                     |
|Embarked    |Port of Embarkation            |C = Cherbourg, <br>Q = Queenstown, <br>S = Southampton |                                                                                                                                                     |
> 
> 
> ## ----summary---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> str(full)
'data.frame':	1309 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : Factor w/ 1307 levels "Abbing, Mr. Anthony",..: 109 191 358 277 16 559 520 629 417 581 ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : Factor w/ 929 levels "110152","110413",..: 524 597 670 50 473 276 86 396 345 133 ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : Factor w/ 187 levels "","A10","A14",..: 1 83 1 57 1 1 131 1 1 1 ...
 $ Embarked   : Factor w/ 4 levels "","C","Q","S": 4 2 4 4 4 3 4 4 4 2 ...
> summary(full)
  PassengerId      Survived          Pclass     
 Min.   :   1   Min.   :0.0000   Min.   :1.000  
 1st Qu.: 328   1st Qu.:0.0000   1st Qu.:2.000  
 Median : 655   Median :0.0000   Median :3.000  
 Mean   : 655   Mean   :0.3838   Mean   :2.295  
 3rd Qu.: 982   3rd Qu.:1.0000   3rd Qu.:3.000  
 Max.   :1309   Max.   :1.0000   Max.   :3.000  
                NA's   :418                     
                               Name          Sex           Age       
 Connolly, Miss. Kate            :   2   female:466   Min.   : 0.17  
 Kelly, Mr. James                :   2   male  :843   1st Qu.:21.00  
 Abbing, Mr. Anthony             :   1                Median :28.00  
 Abbott, Mr. Rossmore Edward     :   1                Mean   :29.88  
 Abbott, Mrs. Stanton (Rosa Hunt):   1                3rd Qu.:39.00  
 Abelson, Mr. Samuel             :   1                Max.   :80.00  
 (Other)                         :1301                NA's   :263    
     SibSp            Parch            Ticket          Fare        
 Min.   :0.0000   Min.   :0.000   CA. 2343:  11   Min.   :  0.000  
 1st Qu.:0.0000   1st Qu.:0.000   1601    :   8   1st Qu.:  7.896  
 Median :0.0000   Median :0.000   CA 2144 :   8   Median : 14.454  
 Mean   :0.4989   Mean   :0.385   3101295 :   7   Mean   : 33.295  
 3rd Qu.:1.0000   3rd Qu.:0.000   347077  :   7   3rd Qu.: 31.275  
 Max.   :8.0000   Max.   :9.000   347082  :   7   Max.   :512.329  
                                  (Other) :1261   NA's   :1        
             Cabin      Embarked
                :1014    :  2   
 C23 C25 C27    :   6   C:270   
 B57 B59 B63 B66:   5   Q:123   
 G6             :   5   S:914   
 B96 B98        :   4           
 C22 C26        :   4           
 (Other)        : 271           
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> head(full)
  PassengerId Survived Pclass
1           1        0      3
2           2        1      1
3           3        1      3
4           4        1      1
5           5        0      3
6           6        0      3
                                                 Name    Sex Age SibSp Parch
1                             Braund, Mr. Owen Harris   male  22     1     0
2 Cumings, Mrs. John Bradley (Florence Briggs Thayer) female  38     1     0
3                              Heikkinen, Miss. Laina female  26     0     0
4        Futrelle, Mrs. Jacques Heath (Lily May Peel) female  35     1     0
5                            Allen, Mr. William Henry   male  35     0     0
6                                    Moran, Mr. James   male  NA     0     0
            Ticket    Fare Cabin Embarked
1        A/5 21171  7.2500              S
2         PC 17599 71.2833   C85        C
3 STON/O2. 3101282  7.9250              S
4           113803 53.1000  C123        S
5           373450  8.0500              S
6           330877  8.4583              Q
> tail(full)
     PassengerId Survived Pclass                           Name    Sex  Age
1304        1304       NA      3 Henriksson, Miss. Jenny Lovisa female 28.0
1305        1305       NA      3             Spector, Mr. Woolf   male   NA
1306        1306       NA      1   Oliva y Ocana, Dona. Fermina female 39.0
1307        1307       NA      3   Saether, Mr. Simon Sivertsen   male 38.5
1308        1308       NA      3            Ware, Mr. Frederick   male   NA
1309        1309       NA      3       Peter, Master. Michael J   male   NA
     SibSp Parch             Ticket     Fare Cabin Embarked
1304     0     0             347086   7.7750              S
1305     0     0          A.5. 3236   8.0500              S
1306     0     0           PC 17758 108.9000  C105        C
1307     0     0 SOTON/O.Q. 3101262   7.2500              S
1308     0     0             359309   8.0500              S
1309     1     1               2668  22.3583              C
> 
> 
> ## ----NA plot, fig.width=7, fig.height=3------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> missmap(full, col = c("white","darkblue"), legend = F,  main = "Missing Values")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full$Embarked[full$Embarked == ""] <- "S"
> full$Fare[is.na(full$Fare)] <- round(mean(full$Fare, na.rm = T),0)
> full$Pclass <- as.factor(full$Pclass)
> full$Survived <- as.factor(full$Survived)
> full$Embarked <- as.factor(full$Embarked)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full$Age.old <- full$Age
> fit <- train(Age~Pclass + Sex + Embarked + SibSp + Parch + Fare, data = full[!is.na(full$Age),], method="rf", trControl=trainControl(method="cv", number=10))
> new <- cbind(full[is.na(full$Age),], predict(fit, full[is.na(full$Age),]))
> full$Age[is.na(full$Age)] <- new[,14]
> full$Age <- as.numeric(full$Age)
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> summary(full$Age)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.17   22.00   28.00   29.63   36.74   80.00 
> summary(full$Embarked)
      C   Q   S 
  0 270 123 916 
> 
> 
> ## ----fig.height=4----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(data = full[!is.na(full$Survived),], aes(as.factor(Pclass), fill = as.factor(Survived))) +
+      geom_bar(position = 'fill') +
+      labs(x = "Ticket Class") +
+      ggtitle("Survivals by the Ticket Class") +
+      scale_fill_discrete(name = "Survived",
+                          breaks = c(0,1),
+                          labels = c("No", "Yes")) +
+      theme(legend.position="top", plot.title = element_text(hjust = 0.5))
> 
> 
> ## ----fig.height=4----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(data = full[!is.na(full$Survived),], aes(Sex, fill = as.factor(Survived))) +
+      geom_bar(position = 'fill') +
+      labs(x = "Sex") +
+      ggtitle("Survivals by the sex") +
+      scale_fill_discrete(name = "Survived",
+                          breaks = c(0,1),
+                          labels = c("No", "Yes")) +
+      theme(legend.position="top", plot.title = element_text(hjust = 0.5))
> 
> 
> ## ----fig.width=10, fig.height=5--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> p1 <- ggplot(data = full[!is.na(full$Survived),], aes(as.factor(SibSp), fill = as.factor(Survived))) +
+      geom_bar(position = 'fill') +
+      labs(x = "Number of Siblings") +
+      ggtitle("Survivals by the number of siblings/spouses") +
+      scale_fill_discrete(name = "Survived",
+                          breaks = c(0,1),
+                          labels = c("No", "Yes")) +
+      theme(legend.position="top", plot.title = element_text(hjust = 0.5))
> 
> p2 <- ggplot(data = full[!is.na(full$Survived),], aes(as.factor(Parch), fill = as.factor(Survived))) +
+      geom_bar(position = 'fill') +
+      labs(x = "Number of Parents/Children") +
+      ggtitle("Survivals by the number of Parents/Children") +
+      scale_fill_discrete(name = "Survived",
+                          breaks = c(0,1),
+                          labels = c("No", "Yes")) +
+      theme(legend.position="top", plot.title = element_text(hjust = 0.5))
> 
> p3 <- ggplot(data = full[!is.na(full$Survived),], aes(as.factor(SibSp), fill = as.factor(Survived))) +
+      geom_bar() +
+      labs(x = "Number of Siblings") +
+      ggtitle("Survivals by the number of siblings/spouses") +
+      scale_fill_discrete(name = "Survived",
+                          breaks = c(0,1),
+                          labels = c("No", "Yes")) +
+      theme(legend.position="top", plot.title = element_text(hjust = 0.5))
> 
> p4 <- ggplot(data = full[!is.na(full$Survived),], aes(as.factor(Parch), fill = as.factor(Survived))) +
+      geom_bar() +
+      labs(x = "Number of Parents/Children") +
+      ggtitle("Survivals by the number of Parents/Children") +
+      scale_fill_discrete(name = "Survived",
+                          breaks = c(0,1),
+                          labels = c("No", "Yes")) +
+      theme(legend.position="top", plot.title = element_text(hjust = 0.5))
> grid.arrange(p1,p2,p3,p4, nrow = 2, ncol = 2)
> 
> 
> ## ----fig.height=4----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(data = full[!is.na(full$Survived),], aes(x = Age, fill = as.factor(Survived))) +
+      geom_histogram(bins = 15, aes(y = ..density..)) +
+      labs(x = "Number of Siblings") +
+      ggtitle("Survivals by age") +
+      scale_fill_discrete(name = "Survived",
+                          breaks = c(0,1),
+                          labels = c("No", "Yes")) +
+      theme(legend.position="top", plot.title = element_text(hjust = 0.5)) +
+      stat_function(fun = dnorm, 
+                 args = list(mean = mean(full$Age[full$Survived == "0"]), sd = sd(full$Age[full$Survived == "0"])), 
+                 lwd = 1, 
+                 col = 'red') + 
+      stat_function(fun = dnorm, 
+                 args = list(mean = mean(full$Age[full$Survived == "1"]), sd = sd(full$Age[full$Survived == "1"])), 
+                 lwd = 1, 
+                 col = 'darkgreen')
Warning messages:
1: Removed 202 row(s) containing missing values (geom_path). 
2: Removed 202 row(s) containing missing values (geom_path). 
> 
> 
> ## ----fig.width=9, fig.height=4---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> p5 <- ggplot(data = full[!is.na(full$Survived),], aes(Embarked, fill = as.factor(Survived))) +
+      geom_bar(position = 'fill') +
+      labs(x = "Port of Embarkation") +
+      ggtitle("Survivals by port of Embarkation") +
+      scale_fill_discrete(name = "Survived",
+                          breaks = c(0,1),
+                          labels = c("No", "Yes")) +
+      theme(legend.position="top", plot.title = element_text(hjust = 0.5))
> 
> p6 <- ggplot(data = full[!is.na(full$Survived),], aes(Embarked, fill = as.factor(Survived))) +
+      geom_bar() +
+      labs(x = "Port of Embarkation") +
+      ggtitle("Survivals by port of Embarkation") +
+      scale_fill_discrete(name = "Survived",
+                          breaks = c(0,1),
+                          labels = c("No", "Yes")) +
+      theme(legend.position="top", plot.title = element_text(hjust = 0.5))
> 
> grid.arrange(p5,p6, ncol = 2)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> head(full$Name, n = 10)
 [1] Braund, Mr. Owen Harris                            
 [2] Cumings, Mrs. John Bradley (Florence Briggs Thayer)
 [3] Heikkinen, Miss. Laina                             
 [4] Futrelle, Mrs. Jacques Heath (Lily May Peel)       
 [5] Allen, Mr. William Henry                           
 [6] Moran, Mr. James                                   
 [7] McCarthy, Mr. Timothy J                            
 [8] Palsson, Master. Gosta Leonard                     
 [9] Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)  
[10] Nasser, Mrs. Nicholas (Adele Achem)                
1307 Levels: Abbing, Mr. Anthony ... Zakarian, Mr. Ortin
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full$Title[grepl("Mr\\.", full$Name, ignore.case = T)] <- "Mr"
> full$Title[grepl("Miss\\.|Mlle\\.|Ms\\.|Mme\\.", full$Name, ignore.case = T)] <- "Miss" 
> full$Title[grepl("Mrs\\.", full$Name, ignore.case = T)] <- "Mrs"   
> full$Title[grepl("Master\\.", full$Name, ignore.case = T)] <- "Master"  
> full$Title[grepl("Don\\.", full$Name, ignore.case = T)] <- "Rare"
> full$Title[grepl("Rev\\.", full$Name, ignore.case = T)] <- "Rare"
> full$Title[grepl("Dr\\.", full$Name, ignore.case = T)] <- "Rare"
> full$Title[grepl("Capt\\.", full$Name, ignore.case = T)] <- "Rare"
> full$Title[grepl("Col\\.", full$Name, ignore.case = T)] <- "Rare"
> full$Title[grepl("Sir\\.", full$Name, ignore.case = T)] <- "Rare"
> full$Title[grepl("Major\\.", full$Name, ignore.case = T)] <- "Rare"
> full$Title[grepl("Jonkheer\\.", full$Name, ignore.case = T)] <- "Rare"
> full$Title[grepl("Countess\\.", full$Name, ignore.case = T)] <- "Rare"
> full$Title[grepl("Lady\\.", full$Name, ignore.case = T)] <- "Rare"
> full$Title[grepl("Dona\\.", full$Name, ignore.case = T)] <- "Rare"
> full$Title <- as.factor(full$Title)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> summary(full$Title)
Master   Miss     Mr    Mrs   Rare 
    61    265    757    197     29 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(data = full[!is.na(full$Survived),], aes(as.factor(Title), fill = as.factor(Survived))) +
+      geom_bar(position = 'fill') +
+      labs(x = "Title") +
+      ggtitle("Survivals by the Title") +
+      scale_fill_discrete(name = "Survived",
+                          breaks = c(0,1),
+                          labels = c("No", "Yes")) +
+      theme(legend.position="top", plot.title = element_text(hjust = 0.5))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full %>% group_by(Title) %>% summarise(mean.age = mean(Age))
`summarise()` ungrouping output (override with `.groups` argument)
[90m# A tibble: 5 x 2[39m
  Title  mean.age
  [3m[90m<fct>[39m[23m     [3m[90m<dbl>[39m[23m
[90m1[39m Master     7.19
[90m2[39m Miss      22.3 
[90m3[39m Mr        31.8 
[90m4[39m Mrs       36.0 
[90m5[39m Rare      45.0 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> head(full$Ticket)
[1] A/5 21171        PC 17599         STON/O2. 3101282 113803          
[5] 373450           330877          
929 Levels: 110152 110413 110465 110564 110813 111240 111320 111361 ... W./C. 14266
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full$Ticket.n[grepl("^1", gsub("[^0-9\\|]", "", full$Ticket))] <- 1
> full$Ticket.n[grepl("^2", gsub("[^0-9\\|]", "", full$Ticket))] <- 2
> full$Ticket.n[grepl("^3", gsub("[^0-9\\|]", "", full$Ticket))] <- 3
> full$Ticket.n[grepl("^4", gsub("[^0-9\\|]", "", full$Ticket))] <- 4
> full$Ticket.n[grepl("^5", gsub("[^0-9\\|]", "", full$Ticket))] <- 5
> full$Ticket.n[grepl("^6", gsub("[^0-9\\|]", "", full$Ticket))] <- 6
> full$Ticket.n[grepl("^7", gsub("[^0-9\\|]", "", full$Ticket))] <- 7
> full$Ticket.n[grepl("^8", gsub("[^0-9\\|]", "", full$Ticket))] <- 8
> full$Ticket.n[grepl("^9", gsub("[^0-9\\|]", "", full$Ticket))] <- 9
> full$Ticket.n[full$Ticket == "LINE"] <- "Line"
> full$Ticket.n <- as.factor(full$Ticket.n)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> summary(full$Ticket.n)
   1    2    3    4    5    6    7    8    9 Line 
 337  361  492   30   37   21   20    2    5    4 
> 
> ## ----fig.width=15, fig.height=4--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> p7 <- ggplot(data = full[!is.na(full$Survived),], aes(as.factor(Ticket.n), fill = as.factor(Survived))) +
+      geom_bar(position = 'fill') +
+      labs(x = "Ticket Number") +
+      ggtitle("Survivals by the Ticket") +
+      scale_fill_discrete(name = "Survived",
+                          breaks = c(0,1),
+                          labels = c("No", "Yes")) +
+      theme(legend.position="top", plot.title = element_text(hjust = 0.5))
> 
> p8 <- ggplot(data = full[!is.na(full$Survived),], aes(as.factor(Ticket.n), fill = as.factor(Survived))) +
+      geom_bar() +
+      labs(x = "Ticket Number") +
+      ggtitle("Survivals by the Ticket") +
+      scale_fill_discrete(name = "Survived",
+                          breaks = c(0,1),
+                          labels = c("No", "Yes")) +
+      theme(legend.position="top", plot.title = element_text(hjust = 0.5))
> 
> p9 <- ggplot(data = full[!is.na(full$Survived),], aes(as.factor(Ticket.n), fill = as.factor(Survived))) +
+      geom_bar() +
+      labs(x = "Ticket Number") +
+      ggtitle("Survivals by the Ticket") +
+      scale_fill_discrete(name = "Survived",
+                          breaks = c(0,1),
+                          labels = c("No", "Yes")) +
+      theme(legend.position="top", plot.title = element_text(hjust = 0.5)) +
+      facet_grid(.~Pclass)
> 
> grid.arrange(p7,p8,p9, ncol = 3)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full$Age.n[full$Age < 5] <- "<5"
> full$Age.n[full$Age < 10 & full$Age >= 5] <- "5-10"
> full$Age.n[full$Age < 20 & full$Age >= 10] <- "10-20"
> full$Age.n[full$Age < 25 & full$Age >= 20] <- "20-25"
> full$Age.n[full$Age < 28 & full$Age >= 25] <- "25-27"
> full$Age.n[full$Age < 30 & full$Age >= 28] <- "28-29"
> full$Age.n[full$Age < 33 & full$Age >= 30] <- "30-31"
> full$Age.n[full$Age < 35 & full$Age >= 33] <- "32-34"
> full$Age.n[full$Age < 40 & full$Age >= 35] <- "35-40"
> full$Age.n[full$Age < 50 & full$Age >= 40] <- "40-50"
> full$Age.n[full$Age < 100 & full$Age >= 50] <- "50+"
> full$Age.n <- as.factor(full$Age.n)
> full$Age.n <- factor(full$Age.n, levels = c("<5", "5-10", "10-20", "20-25", "25-27", "28-29", "30-31", "32-34", "35-40", "40-50", "50+"))
> 
> 
> ## ----fig.width=9, fig.height=4---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> p10 <- ggplot(data = full[!is.na(full$Survived),], aes(as.factor(Age.n), fill = as.factor(Survived))) +
+      geom_bar(position = 'fill') +
+      labs(x = "Age groups") +
+      ggtitle("Survivals by the Age groups") +
+      scale_fill_discrete(name = "Survived",
+                          breaks = c(0,1),
+                          labels = c("No", "Yes")) +
+      theme(legend.position="top", plot.title = element_text(hjust = 0.5))
> 
> p11 <- ggplot(data = full[!is.na(full$Survived),], aes(as.factor(Age.n), fill = as.factor(Survived))) +
+      geom_histogram(stat="count") +
+      labs(x = "Age groups") +
+      ggtitle("Survivals by the Age groups") +
+      scale_fill_discrete(name = "Survived",
+                          breaks = c(0,1),
+                          labels = c("No", "Yes")) +
+      theme(legend.position="top", plot.title = element_text(hjust = 0.5))
Warning message:
Ignoring unknown parameters: binwidth, bins, pad 
> 
> 
> grid.arrange(p10,p11, ncol = 2)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full$Kid <- "Adult"
> full$Kid[full$Age < 14] <- "Kid"
> full$Kid <- as.factor(full$Kid)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(data = full[!is.na(full$Survived),], aes(Kid, fill = as.factor(Survived))) +
+      geom_bar(position = 'fill') +
+      labs(x = "Kid or Adult") +
+      ggtitle("Survivals by Kid/Adult") +
+      scale_fill_discrete(name = "Survived",
+                          breaks = c(0,1),
+                          labels = c("No", "Yes")) +
+      theme(legend.position="top", plot.title = element_text(hjust = 0.5))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full$FamilySize <- full$SibSp + full$Parch
> full$FamilySize <- as.factor(full$FamilySize)
> 
> full$Family <- ifelse(as.numeric(full$FamilySize) >= 2, "Yes","No") #Family = Yes if passenger has at least one family member aboard
> full$Family <- as.factor(full$Family)
> 
> 
> ## ----fig.width=9, fig.height=4---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> p12 <- ggplot(data = full[!is.na(full$Survived),], aes(FamilySize, fill = as.factor(Survived))) +
+      geom_bar(position = 'fill') +
+      labs(x = "Familty Size") +
+      ggtitle("Survivals by Family Size") +
+      scale_fill_discrete(name = "Survived",
+                          breaks = c(0,1),
+                          labels = c("No", "Yes")) +
+      theme(legend.position="top", plot.title = element_text(hjust = 0.5))
> 
> p13 <- ggplot(data = full[!is.na(full$Survived),], aes(as.factor(Family), fill = as.factor(Survived))) +
+      geom_bar(position = 'fill') +
+      labs(x = "Family aboard") +
+      ggtitle("Survivals by Family Aboard") +
+      scale_fill_discrete(name = "Survived",
+                          breaks = c(0,1),
+                          labels = c("No", "Yes")) +
+      theme(legend.position="top", plot.title = element_text(hjust = 0.5))
> 
> 
> grid.arrange(p12,p13, ncol = 2)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train <- full[1:891,]
> test <- full[892:1309,]
> fullIndex <- createDataPartition(train$Survived, p=0.8, list=FALSE) #Split the data 20/80
> data_train <- train[ fullIndex,]
> data_val <- train[-fullIndex,]
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> control <- trainControl(method="cv", number=10)
> metric <- "Accuracy"
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> set.seed(7)
> fit.lda <- train(as.factor(Survived)~Pclass+Title+Age+Fare, data = data_train, method="lda", metric=metric, trControl=control)
> fit.lda
Linear Discriminant Analysis 

714 samples
  4 predictor
  2 classes: '0', '1' 

No pre-processing
Resampling: Cross-Validated (10 fold) 
Summary of sample sizes: 643, 642, 643, 643, 643, 643, ... 
Resampling results:

  Accuracy   Kappa    
  0.7757825  0.5270742

> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> set.seed(7)
> fit.cart <- train(as.factor(Survived)~Pclass+Title+Age+Fare, data = data_train, method="rpart", metric=metric, trControl=control)
> fit.cart
CART 

714 samples
  4 predictor
  2 classes: '0', '1' 

No pre-processing
Resampling: Cross-Validated (10 fold) 
Summary of sample sizes: 643, 642, 643, 643, 643, 643, ... 
Resampling results across tuning parameters:

  cp          Accuracy   Kappa    
  0.03284672  0.8220266  0.6200056
  0.05474453  0.7897887  0.5632509
  0.43430657  0.6696009  0.1950420

Accuracy was used to select the optimal model using the largest value.
The final value used for the model was cp = 0.03284672.
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> set.seed(7)
> fit.knn <- train(as.factor(Survived)~Pclass+Title+Age+Fare, data = data_train, method="knn", metric=metric, trControl=control)
> fit.knn
k-Nearest Neighbors 

714 samples
  4 predictor
  2 classes: '0', '1' 

No pre-processing
Resampling: Cross-Validated (10 fold) 
Summary of sample sizes: 643, 642, 643, 643, 643, 643, ... 
Resampling results across tuning parameters:

  k  Accuracy   Kappa    
  5  0.7028756  0.3583978
  7  0.7056925  0.3626370
  9  0.7099374  0.3636693

Accuracy was used to select the optimal model using the largest value.
The final value used for the model was k = 9.
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> set.seed(7)
> fit.svm <- train(as.factor(Survived)~Pclass+Title+Age+Fare, data = data_train, method="svmRadial", metric=metric, trControl=control)
> fit.svm
Support Vector Machines with Radial Basis Function Kernel 

714 samples
  4 predictor
  2 classes: '0', '1' 

No pre-processing
Resampling: Cross-Validated (10 fold) 
Summary of sample sizes: 643, 642, 643, 643, 643, 643, ... 
Resampling results across tuning parameters:

  C     Accuracy   Kappa    
  0.25  0.8010368  0.5671651
  0.50  0.8024257  0.5724680
  1.00  0.8051643  0.5818776

Tuning parameter 'sigma' was held constant at a value of 0.6543882
Accuracy was used to select the optimal model using the largest value.
The final values used for the model were sigma = 0.6543882 and C = 1.
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> set.seed(7)
> fit.rf <- train(as.factor(Survived)~Pclass+Title+Age+Fare, data = data_train, method="rf", metric=metric, trControl=control)
> fit.rf
Random Forest 

714 samples
  4 predictor
  2 classes: '0', '1' 

No pre-processing
Resampling: Cross-Validated (10 fold) 
Summary of sample sizes: 643, 642, 643, 643, 643, 643, ... 
Resampling results across tuning parameters:

  mtry  Accuracy   Kappa    
  2     0.8164710  0.6039940
  5     0.8374022  0.6504701
  8     0.8163732  0.6100273

Accuracy was used to select the optimal model using the largest value.
The final value used for the model was mtry = 5.
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> set.seed(7)
> fit.glm <- train(as.factor(Survived)~Pclass+Title+Age+Fare, data = data_train, method="glm", metric=metric, trControl=control)
> fit.glm
Generalized Linear Model 

714 samples
  4 predictor
  2 classes: '0', '1' 

No pre-processing
Resampling: Cross-Validated (10 fold) 
Summary of sample sizes: 643, 642, 643, 643, 643, 643, ... 
Resampling results:

  Accuracy   Kappa    
  0.7841354  0.5410317

> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> results <- resamples(list(lda=fit.lda, cart=fit.cart, knn=fit.knn, svm=fit.svm, rf=fit.rf, glm = fit.glm))
> summary(results)

Call:
summary.resamples(object = results)

Models: lda, cart, knn, svm, rf, glm 
Number of resamples: 10 

Accuracy 
          Min.   1st Qu.    Median      Mean   3rd Qu.      Max. NA's
lda  0.7042254 0.7613948 0.7816901 0.7757825 0.8000293 0.8194444    0
cart 0.7746479 0.7979754 0.8239437 0.8220266 0.8327465 0.8888889    0
knn  0.6197183 0.6912167 0.7183099 0.7099374 0.7438869 0.7638889    0
svm  0.7464789 0.7613948 0.8169014 0.8051643 0.8292254 0.9027778    0
rf   0.7746479 0.7957746 0.8263889 0.8374022 0.8710387 0.9166667    0
glm  0.7323944 0.7500000 0.7847222 0.7841354 0.8028169 0.8472222    0

Kappa 
          Min.   1st Qu.    Median      Mean   3rd Qu.      Max. NA's
lda  0.3769327 0.5082198 0.5417913 0.5270742 0.5666989 0.6273885    0
cart 0.5077990 0.5768276 0.6279517 0.6200056 0.6473665 0.7600000    0
knn  0.1632475 0.3429668 0.3849419 0.3636693 0.4295492 0.4795918    0
svm  0.4379947 0.4998939 0.6087325 0.5818776 0.6285345 0.7885906    0
rf   0.5149445 0.5572043 0.6336943 0.6504701 0.7241357 0.8200000    0
glm  0.4197849 0.4664040 0.5544118 0.5410317 0.5769586 0.6806452    0

> dotplot(results)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> set.seed(7)
> fit.rf1 <- randomForest(as.factor(Survived)~Pclass+Title+Age+Fare+Sex+FamilySize+Ticket.n+Family, data = data_train, ntree = 50)
> fit.rf1

Call:
 randomForest(formula = as.factor(Survived) ~ Pclass + Title +      Age + Fare + Sex + FamilySize + Ticket.n + Family, data = data_train,      ntree = 50) 
               Type of random forest: classification
                     Number of trees: 50
No. of variables tried at each split: 2

        OOB estimate of  error rate: 17.09%
Confusion matrix:
    0   1 class.error
0 394  46   0.1045455
1  76 198   0.2773723
> 
> (fit.rf1$confusion[1,1]+fit.rf1$confusion[2,2])/714 #Accuracy
[1] 0.8291317
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> confusionMatrix(predict(fit.rf, data_val), data_val$Survived)
Confusion Matrix and Statistics

          Reference
Prediction   0   1
         0 101  19
         1   8  49
                                         
               Accuracy : 0.8475         
                 95% CI : (0.7859, 0.897)
    No Information Rate : 0.6158         
    P-Value [Acc > NIR] : 1.244e-11      
                                         
                  Kappa : 0.6675         
                                         
 Mcnemar's Test P-Value : 0.05429        
                                         
            Sensitivity : 0.9266         
            Specificity : 0.7206         
         Pos Pred Value : 0.8417         
         Neg Pred Value : 0.8596         
             Prevalence : 0.6158         
         Detection Rate : 0.5706         
   Detection Prevalence : 0.6780         
      Balanced Accuracy : 0.8236         
                                         
       'Positive' Class : 0              
                                         
> confusionMatrix(predict(fit.svm, data_val), data_val$Survived)
Confusion Matrix and Statistics

          Reference
Prediction  0  1
         0 98 23
         1 11 45
                                          
               Accuracy : 0.8079          
                 95% CI : (0.7421, 0.8632)
    No Information Rate : 0.6158          
    P-Value [Acc > NIR] : 2.854e-08       
                                          
                  Kappa : 0.5801          
                                          
 Mcnemar's Test P-Value : 0.05923         
                                          
            Sensitivity : 0.8991          
            Specificity : 0.6618          
         Pos Pred Value : 0.8099          
         Neg Pred Value : 0.8036          
             Prevalence : 0.6158          
         Detection Rate : 0.5537          
   Detection Prevalence : 0.6836          
      Balanced Accuracy : 0.7804          
                                          
       'Positive' Class : 0               
                                          
> confusionMatrix(predict(fit.cart, data_val), data_val$Survived)
Confusion Matrix and Statistics

          Reference
Prediction  0  1
         0 96 20
         1 13 48
                                          
               Accuracy : 0.8136          
                 95% CI : (0.7483, 0.8681)
    No Information Rate : 0.6158          
    P-Value [Acc > NIR] : 1.058e-08       
                                          
                  Kappa : 0.5982          
                                          
 Mcnemar's Test P-Value : 0.2963          
                                          
            Sensitivity : 0.8807          
            Specificity : 0.7059          
         Pos Pred Value : 0.8276          
         Neg Pred Value : 0.7869          
             Prevalence : 0.6158          
         Detection Rate : 0.5424          
   Detection Prevalence : 0.6554          
      Balanced Accuracy : 0.7933          
                                          
       'Positive' Class : 0               
                                          
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> fit.final <- randomForest(as.factor(Survived)~Pclass+Title+Age+Fare+Sex+FamilySize+Ticket.n+Family, data = train, ntree = 50)
> predictions <- predict(fit.final, test)
> x <- cbind(test$PassengerId, as.data.frame(predictions))
> colnames(x) <- c("PassengerID", "Survived")
> write.csv(x, "submission.csv", row.names = F)
> 
> 
> proc.time()
   user  system elapsed 
 39.940   1.149  41.379 
