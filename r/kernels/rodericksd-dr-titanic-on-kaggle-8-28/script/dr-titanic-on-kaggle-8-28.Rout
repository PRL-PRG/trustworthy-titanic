
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> # This R script will run on our backend. You can write arbitrary code here!
> 
> # Many standard libraries are already installed, such as randomForest
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.
> 
> # The train and test data is stored in the ../input directory
> train <- read.csv("../input/train.csv")
> test  <- read.csv("../input/test.csv")
> 
> # We can inspect the train data. The results of this are printed in the log tab below
> #cat ("\n\n Training Set Data stats\n")
> #summary(train)
> 
> # Take a look at the training data set
> #cat ("\n\n Training Set Data structure\n")
> #str(train)
> 
> # How many survived/died in the training set
> 
> #cat ("\n\nhow many died and how many survived\n")
> #table(train$Survived)
> 
> 
> # Number of female and male passengers in the training set
> #cat ("\n\nNumber of female and male passengers in the training set\n")
> #table(train$Sex)
> 
> # Look at the proportion of survived and dead
> #cat ("\n\nPercentage of Dead and Survived\n")
> #prop.table(table(train$Survived))
> 
> # Comparison of number of females and males that survived
> #cat ("\n\nPercentage of females vs males that died/survived\n")
> #prop.table(table(train$Sex, train$Survived))
> 
> # Investigating the train variable Age
> #cat ("\n\nAge stats of Training set\n")
> #summary(train$Age)
> 
> # Investigating the stats of the Sex variable in train
> #cat("\n\n Sex statistics\n")
> #summary(train$Sex)
> 
> # Investigating the proportion of sex and survived
> #cat ("\n\nPercentage of females and males who died/survived")
> #prop.table(table(train$Sex, train$Survived),1)
> 
> 
> #Investigating the Age field further and converting this to a binary category (child or not child)
> cat("\n\nDefining a new variable withing the data frame train called Child and assigning it a 0 or a 1")


Defining a new variable withing the data frame train called Child and assigning it a 0 or a 1> train$Child <- 0
> train$Child[train$Age < 18] <-1
> str(train)
'data.frame':	891 obs. of  13 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : Factor w/ 891 levels "Abbing, Mr. Anthony",..: 109 191 358 277 16 559 520 629 417 581 ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : Factor w/ 681 levels "110152","110413",..: 524 597 670 50 473 276 86 396 345 133 ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : Factor w/ 148 levels "","A10","A14",..: 1 83 1 57 1 1 131 1 1 1 ...
 $ Embarked   : Factor w/ 4 levels "","C","Q","S": 4 2 4 4 4 3 4 4 4 2 ...
 $ Child      : num  0 0 0 0 0 0 0 1 0 1 ...
> 
> 
> 
> 
> # Here we will plot the passenger survival by class
> # train$Survived <- factor(train$Survived, levels=c(1,0))
> # levels(train$Survived) <- c("Survived", "Died")
> # train$Pclass <- as.factor(train$Pclass)
> # levels(train$Pclass) <- c("1st Class", "2nd Class", "3rd Class")
> 
> # png("1_survival_by_class.png", width=800, height=600)
> # mosaicplot(train$Pclass ~ train$Survived, main="Passenger Survival by Class",
> #           color=c("#8dd3c7", "#fb8072"), shade=FALSE,  xlab="", ylab="",
> #           off=c(0), cex.axis=1.4)
> #dev.off()
> 
> proc.time()
   user  system elapsed 
  0.152   0.033   0.179 
