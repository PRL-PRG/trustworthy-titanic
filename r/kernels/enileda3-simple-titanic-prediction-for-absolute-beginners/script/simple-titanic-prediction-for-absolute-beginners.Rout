
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(caret) 
Loading required package: lattice
Loading required package: ggplot2
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> 
> train<-read.csv("../input/train.csv", 
+                 na.strings=c("NA", "#DIV/0!"))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> training1<-subset(train, select = -c(PassengerId, Name, Ticket, Cabin))
> missingcol<-data.frame(colMeans(is.na(training1)))
> mean(training1$Age, na.rm=TRUE)
[1] 29.69912
> mean(training1$Fare,na.rm=TRUE)
[1] 32.20421
> training1$Age[is.na(training1$Age)] <-29.69 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> training1$Sex<-as.factor(training1$Sex)
> training1$Embarked<-as.factor(training1$Embarked)
> training1$Survived<-as.factor(training1$Survived)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> par(mfrow=c(2,2))
> plot(training1$Pclass, training1$Fare)
> hist(training1$Age)
> hist(training1$SibSp)
> hist(training1$Parch)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> inBuild<-createDataPartition(y=training1$Survived, p=0.8, list=FALSE)
> trainData<-training1[inBuild,]
> validateData<-training1[-inBuild,]
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> set.seed(1120345)
> modelfit_rpart<-train(Survived~., data=trainData, method="rpart")
> predict_rpart<-predict(modelfit_rpart, newdata=validateData)
> result_rpart<-confusionMatrix(predict_rpart, validateData$Survived)
> result_rpart
Confusion Matrix and Statistics

          Reference
Prediction  0  1
         0 98 23
         1 11 45
                                          
               Accuracy : 0.8079          
                 95% CI : (0.7421, 0.8632)
    No Information Rate : 0.6158          
    P-Value [Acc > NIR] : 2.854e-08       
                                          
                  Kappa : 0.5801          
                                          
 Mcnemar's Test P-Value : 0.05923         
                                          
            Sensitivity : 0.8991          
            Specificity : 0.6618          
         Pos Pred Value : 0.8099          
         Neg Pred Value : 0.8036          
             Prevalence : 0.6158          
         Detection Rate : 0.5537          
   Detection Prevalence : 0.6836          
      Balanced Accuracy : 0.7804          
                                          
       'Positive' Class : 0               
                                          
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> modelfit_rf<-train(Survived~., data=trainData, method="rf", prox=TRUE, 
+                     trControl=trainControl(method = "cv", number=5))
> 
> predict_rf<-predict(modelfit_rf, newdata=validateData)
> result_rf<-confusionMatrix(predict_rf, validateData$Survived)
> result_rf
Confusion Matrix and Statistics

          Reference
Prediction   0   1
         0 101  23
         1   8  45
                                          
               Accuracy : 0.8249          
                 95% CI : (0.7607, 0.8778)
    No Information Rate : 0.6158          
    P-Value [Acc > NIR] : 1.304e-09       
                                          
                  Kappa : 0.6138          
                                          
 Mcnemar's Test P-Value : 0.01192         
                                          
            Sensitivity : 0.9266          
            Specificity : 0.6618          
         Pos Pred Value : 0.8145          
         Neg Pred Value : 0.8491          
             Prevalence : 0.6158          
         Detection Rate : 0.5706          
   Detection Prevalence : 0.7006          
      Balanced Accuracy : 0.7942          
                                          
       'Positive' Class : 0               
                                          
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> modelfit_gbm<-train(Survived~., data=trainData, method="gbm", verbose=FALSE, trControl=trainControl(method="cv", number=5))
> predict_gbm<-predict(modelfit_gbm, newdata=validateData)
> result_gbm<-confusionMatrix(predict_gbm, validateData$Survived)
> result_gbm
Confusion Matrix and Statistics

          Reference
Prediction  0  1
         0 98 17
         1 11 51
                                          
               Accuracy : 0.8418          
                 95% CI : (0.7795, 0.8922)
    No Information Rate : 0.6158          
    P-Value [Acc > NIR] : 4.229e-11       
                                          
                  Kappa : 0.66            
                                          
 Mcnemar's Test P-Value : 0.3447          
                                          
            Sensitivity : 0.8991          
            Specificity : 0.7500          
         Pos Pred Value : 0.8522          
         Neg Pred Value : 0.8226          
             Prevalence : 0.6158          
         Detection Rate : 0.5537          
   Detection Prevalence : 0.6497          
      Balanced Accuracy : 0.8245          
                                          
       'Positive' Class : 0               
                                          
> 
> 
> proc.time()
   user  system elapsed 
 10.495   0.337  10.844 
