
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> #load packages
> library("ggplot2") # data visualization
Warning message:
package â€˜ggplot2â€™ was built under R version 3.6.2 
> library("caret") # multiple model training/testing functions
Loading required package: lattice
> library("readr") # CSV file I/O, e.g. the read_csv function
> library("dplyr") # several Hadley Wickham data-wrangling packages

Attaching package: â€˜dplyrâ€™

The following objects are masked from â€˜package:statsâ€™:

    filter, lag

The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

Warning message:
package â€˜dplyrâ€™ was built under R version 3.6.2 
> library("mice") # imputing missing values

Attaching package: â€˜miceâ€™

The following objects are masked from â€˜package:baseâ€™:

    cbind, rbind

Warning message:
package â€˜miceâ€™ was built under R version 3.6.2 
> library("VIM") # visualizing missing values
Loading required package: colorspace
Loading required package: grid
VIM is ready to use.

Suggestions and bug-reports can be submitted at: https://github.com/statistikat/VIM/issues

Attaching package: â€˜VIMâ€™

The following object is masked from â€˜package:datasetsâ€™:

    sleep

> library("stringr") # feature engineering
> library("arules") # feature engineering
Loading required package: Matrix

Attaching package: â€˜arulesâ€™

The following object is masked from â€˜package:dplyrâ€™:

    recode

The following objects are masked from â€˜package:baseâ€™:

    abbreviate, write

Warning message:
package â€˜arulesâ€™ was built under R version 3.6.2 
> library("corrplot") # correlogram 
corrplot 0.84 loaded
> 
> options(warn=-1) # turn warnings off 
> 
> # read in the data
> train_full <- read_csv('../input/train.csv')
Parsed with column specification:
cols(
  PassengerId = [32mcol_double()[39m,
  Survived = [32mcol_double()[39m,
  Pclass = [32mcol_double()[39m,
  Name = [31mcol_character()[39m,
  Sex = [31mcol_character()[39m,
  Age = [32mcol_double()[39m,
  SibSp = [32mcol_double()[39m,
  Parch = [32mcol_double()[39m,
  Ticket = [31mcol_character()[39m,
  Fare = [32mcol_double()[39m,
  Cabin = [31mcol_character()[39m,
  Embarked = [31mcol_character()[39m
)
> 
> # train split into train and validate
> inTrain <- createDataPartition(train_full$Survived, times = 1, p = 0.8, list=F)
> 
> train <- train_full[inTrain,]
> val <- train_full[-inTrain,]
> 
> nrow(train) # number of training observations
[1] 713
> nrow(val) # number of training observations
[1] 178
> 
> train <- mutate(train,
+                 Cabin_Deck = str_sub(Cabin,1,1),
+                 Ticket_Digit = nchar(Ticket),
+                 Ticket_Alpha = str_detect(Ticket, '[[:alpha:]]'),
+                 Family_Size = Parch+SibSp,
+                 Name_Family = gsub(",.*$", "", Name),
+                 Title = str_sub(Name, 
+                                 str_locate(Name, ",")[ , 1] + 2, 
+                                 str_locate(Name, "\\.")[ , 1] - 1)
+                )
> # credit to https://www.kaggle.com/c/titanic/discussion/30733 for Title regex
> 
> # subset training data to include only variables we would consider using in our model
> train_sub <- select(train,
+                     Survived,Pclass,Sex,Age,SibSp,Parch,Fare,Embarked,
+                     Cabin_Deck,Ticket_Digit,Ticket_Alpha,Name_Family,Title,Family_Size)
> # missing value pattern matrix
> md.pattern(train_sub)
    Survived Pclass Sex SibSp Parch Fare Ticket_Digit Ticket_Alpha Name_Family
144        1      1   1     1     1    1            1            1           1
420        1      1   1     1     1    1            1            1           1
14         1      1   1     1     1    1            1            1           1
134        1      1   1     1     1    1            1            1           1
1          1      1   1     1     1    1            1            1           1
           0      0   0     0     0    0            0            0           0
    Title Family_Size Embarked Age Cabin_Deck    
144     1           1        1   1          1   0
420     1           1        1   1          0   1
14      1           1        1   0          1   1
134     1           1        1   0          0   2
1       1           1        0   1          1   1
        0           0        1 148        554 703
> 
> # visualization of missing values
> train_mice_plot <- aggr(train_sub, col=c('palegreen2','palegoldenrod'),
+                     numbers=T, sortVars=T,
+                     labels=names(train_sub), cex.axis=.7,
+                     gap=3, ylab=c("Missing data","Pattern"))

 Variables sorted by number of missings: 
     Variable       Count
   Cabin_Deck 0.776998597
          Age 0.207573633
     Embarked 0.001402525
     Survived 0.000000000
       Pclass 0.000000000
          Sex 0.000000000
        SibSp 0.000000000
        Parch 0.000000000
         Fare 0.000000000
 Ticket_Digit 0.000000000
 Ticket_Alpha 0.000000000
  Name_Family 0.000000000
        Title 0.000000000
  Family_Size 0.000000000
> 
> # Hypothesis: Age missing values are correlated with at least one other variable that has no missing values (aka not totally missing at random)
> print('Proportion Table: TRUE = Age is missing  X  Survived = 1 if survived')
[1] "Proportion Table: TRUE = Age is missing  X  Survived = 1 if survived"
> round(prop.table(table(is.na(train$Age), train$Survived), 1),2)
       
           0    1
  FALSE 0.58 0.42
  TRUE  0.72 0.28
> 
> print('Proportion Table: TRUE = Age is missing  X  Pclass = 1 is first class')
[1] "Proportion Table: TRUE = Age is missing  X  Pclass = 1 is first class"
> round(prop.table(table(is.na(train$Age), train$Pclass), 1),2)
       
           1    2    3
  FALSE 0.26 0.24 0.50
  TRUE  0.15 0.07 0.78
> 
> print('Distribution of Fare  X  Age missing vs present')
[1] "Distribution of Fare  X  Age missing vs present"
> print('Age missing')
[1] "Age missing"
> summary(train %>% 
+         filter(is.na(Age)) %>%
+         select(Fare)
+         )
      Fare       
 Min.   :  0.00  
 1st Qu.:  7.75  
 Median :  8.05  
 Mean   : 20.73  
 3rd Qu.: 24.15  
 Max.   :221.78  
> print('Age present')
[1] "Age present"
> summary(train %>% 
+         filter(!is.na(Age)) %>%
+         select(Fare)
+         )
      Fare       
 Min.   :  0.00  
 1st Qu.:  8.05  
 Median : 15.74  
 Mean   : 34.46  
 3rd Qu.: 32.32  
 Max.   :512.33  
> 
> # Hypothesis: Cabin missing values are correlated with at least one other variable that has no missing values (aka not totally missing at random)
> 
> print('Proportion Table: TRUE = Cabin/Deck is missing  X  Survived = 1 if survived')
[1] "Proportion Table: TRUE = Cabin/Deck is missing  X  Survived = 1 if survived"
> round(prop.table(table(is.na(train$Cabin_Deck), train$Survived), 1),2)
       
           0    1
  FALSE 0.33 0.67
  TRUE  0.69 0.31
> 
> print('Proportion Table: TRUE = Cabin/Deck is missing  X  Pclass = 1 is first class')
[1] "Proportion Table: TRUE = Cabin/Deck is missing  X  Pclass = 1 is first class"
> round(prop.table(table(is.na(train$Cabin_Deck), train$Pclass), 1),2)
       
           1    2    3
  FALSE 0.86 0.09 0.06
  TRUE  0.06 0.24 0.71
> 
> print('Distribution of Fare  X  Cabin/Deck missing vs present')
[1] "Distribution of Fare  X  Cabin/Deck missing vs present"
> print('Cabin/Deck missing')
[1] "Cabin/Deck missing"
> summary(train %>% 
+         filter(is.na(Cabin_Deck)) %>%
+         select(Fare)
+         )
      Fare        
 Min.   :  0.000  
 1st Qu.:  7.854  
 Median : 10.500  
 Mean   : 18.902  
 3rd Qu.: 23.188  
 Max.   :512.329  
> print('Cabin/Deck present')
[1] "Cabin/Deck present"
> summary(train %>% 
+         filter(!is.na(Cabin_Deck)) %>%
+         select(Fare)
+         )
      Fare       
 Min.   :  0.00  
 1st Qu.: 29.21  
 Median : 53.10  
 Mean   : 75.88  
 3rd Qu.: 90.00  
 Max.   :512.33  
> 
> train_mm <- model.matrix(~Pclass+Sex+Age+
+                          SibSp+Parch+Fare+
+                          Embarked+Cabin_Deck+
+                          Ticket_Digit+Ticket_Alpha+Title+Name_Family,
+                          train_sub)
> 
> train_imp <- mice(train_sub, 
+                   m = 1,
+                   method = "cart", 
+                   seed = 5, 
+                   printFlag=FALSE)
> 
> # check out the distribution of imputed Age values
> # imputed values look like they match the general distribution of the complete values
> summary(train_imp$imp$Age) 
       1        
 Min.   : 2.00  
 1st Qu.:21.00  
 Median :28.00  
 Mean   :29.65  
 3rd Qu.:35.00  
 Max.   :80.00  
> 
> # merge imputed values with complete observations
> train <- complete(train_imp) 
> 
> Age_hist_imp <- ggplot(train, aes(Age))
> Age_hist_imp + geom_histogram(binwidth = 5) 
> 
> # check to see if any NAs in Age after imputation: none
> which(is.na(train$Age)==T) 
integer(0)
> 
> train <- mutate(train, 
+                 Cabin_Deck_i = ifelse(!is.na(Cabin_Deck),
+                                 Cabin_Deck,
+                                 ifelse(Pclass == 1,
+                                        'ABCD', 
+                                         # not including T because only one passenger
+                                         # in the training set was assigned cabin T
+                                        ifelse(Pclass == 2,
+                                               'E',
+                                              'F'))))
> 
> # histogram of Fare by Pclass (no missing values)
> Fare_hist <- ggplot(train, aes(Fare))
> Fare_hist + geom_histogram(binwidth=25) + facet_grid(Pclass~.)
> 
> # subset passengers to consider first class only
> train_Pclass1 <- filter(train, Pclass == 1) 
> 
> # divide the Fare distribution for Pclass 1 into 
> # the number of Decks (4) that we need to break apart
> # for Cabin_Deck imputation
> cuts <- discretize(train_Pclass1$Fare,
+                    method = 'cluster',
+                    categories = 4,
+                    ordered = T,
+                    onlycuts = T)
> 
> train <- mutate(train, Cabin_Deck_i2 = ifelse(Cabin_Deck_i != "ABCD",
+                                        Cabin_Deck_i,
+                                        ifelse(Fare < cuts[2],
+                                              "D",
+                                              ifelse(Fare < cuts[3],
+                                                    "C",
+                                                    ifelse(Fare < cuts[4],
+                                                          "B", 
+                                                          "A")))))
> 
> train <- mutate(train, Cabin_Deck_i3 = ifelse(Cabin_Deck_i2 == 'A',1,
+                                 ifelse(Cabin_Deck_i2 == 'B',2,
+                                       ifelse(Cabin_Deck_i2 == 'C',3,
+                                             ifelse(Cabin_Deck_i2 == 'D',4,
+                                                   ifelse(Cabin_Deck_i2 == 'E',5,
+                                                         ifelse(Cabin_Deck_i2 == 'F',6,
+                                                               ifelse(Cabin_Deck_i2 == 'G',7,8))))))))
> 
> train <- mutate(train, 
+                 Embarked = ifelse(is.na(Embarked),
+                                  'S', Embarked))
> 
> train_cor <- select(train,
+                     Age, Fare, SibSp, Parch,
+                     Pclass, Cabin_Deck_i3,
+                     Ticket_Digit,
+                     Family_Size)
> cor <- cor(train_cor)
> corrplot(cor, method="number")
> 
> Deck_plot <- ggplot(train, aes(Cabin_Deck_i2))
> Deck_plot + geom_bar(aes(fill = as.factor(Survived)))
> 
> round(prop.table(table(train$Cabin_Deck_i2, train$Survived), 1),2)
   
       0    1
  A 0.58 0.42
  B 0.23 0.77
  C 0.35 0.65
  D 0.44 0.56
  E 0.50 0.50
  F 0.75 0.25
  G 0.00 1.00
> 
> Family_plot <- ggplot(train, aes(Family_Size))
> Family_plot + geom_histogram(aes(fill = as.factor(Survived)))
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> 
> Title_plot <- ggplot(train, aes(Title))
> Title_plot + geom_bar(aes(fill = as.factor(Survived)))
> 
> round(prop.table(table(train$Title, train$Survived), 1),2)
              
                  0    1
  Capt         1.00 0.00
  Col          1.00 0.00
  Don          1.00 0.00
  Dr           0.50 0.50
  Jonkheer     1.00 0.00
  Lady         0.00 1.00
  Major        0.00 1.00
  Master       0.39 0.61
  Miss         0.30 0.70
  Mlle         0.00 1.00
  Mme          0.00 1.00
  Mr           0.84 0.16
  Mrs          0.17 0.83
  Ms           0.00 1.00
  Rev          1.00 0.00
  Sir          0.00 1.00
  the Countess 0.00 1.00
> 
> proc.time()
   user  system elapsed 
  4.233   0.283   4.565 
