
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> #load packages
> library("ggplot2") # data visualization
Warning message:
package â€˜ggplot2â€™ was built under R version 3.6.2 
> library("caret") # multiple model training/testing functions
Loading required package: lattice
> library("readr") # CSV file I/O, e.g. the read_csv function
> library("dplyr") # several Hadley Wickham data-wrangling packages

Attaching package: â€˜dplyrâ€™

The following objects are masked from â€˜package:statsâ€™:

    filter, lag

The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

Warning message:
package â€˜dplyrâ€™ was built under R version 3.6.2 
> library("mice") # imputing missing values

Attaching package: â€˜miceâ€™

The following objects are masked from â€˜package:baseâ€™:

    cbind, rbind

Warning message:
package â€˜miceâ€™ was built under R version 3.6.2 
> library("VIM") # visualizing missing values
Loading required package: colorspace
Loading required package: grid
VIM is ready to use.

Suggestions and bug-reports can be submitted at: https://github.com/statistikat/VIM/issues

Attaching package: â€˜VIMâ€™

The following object is masked from â€˜package:datasetsâ€™:

    sleep

> library("stringr") # feature engineering
> library("arules") # feature engineering
Loading required package: Matrix

Attaching package: â€˜arulesâ€™

The following object is masked from â€˜package:dplyrâ€™:

    recode

The following objects are masked from â€˜package:baseâ€™:

    abbreviate, write

Warning message:
package â€˜arulesâ€™ was built under R version 3.6.2 
> library("corrplot") # correlogram 
corrplot 0.84 loaded
> library("randomForest") # random forest model
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: â€˜randomForestâ€™

The following object is masked from â€˜package:dplyrâ€™:

    combine

The following object is masked from â€˜package:ggplot2â€™:

    margin

> 
> options(warn=-1) # turn warnings off 
> 
> # read in the data
> train_full <- read_csv('../input/train.csv')
Parsed with column specification:
cols(
  PassengerId = [32mcol_double()[39m,
  Survived = [32mcol_double()[39m,
  Pclass = [32mcol_double()[39m,
  Name = [31mcol_character()[39m,
  Sex = [31mcol_character()[39m,
  Age = [32mcol_double()[39m,
  SibSp = [32mcol_double()[39m,
  Parch = [32mcol_double()[39m,
  Ticket = [31mcol_character()[39m,
  Fare = [32mcol_double()[39m,
  Cabin = [31mcol_character()[39m,
  Embarked = [31mcol_character()[39m
)
> 
> # train split into train and validate
> inTrain <- createDataPartition(train_full$Survived, times = 1, p = 0.8, list=F)
> 
> train <- train_full[inTrain,]
> val <- train_full[-inTrain,]
> 
> nrow(train) # number of training observations
[1] 713
> nrow(val) # number of training observations
[1] 178
> 
>    
>     train <- mutate(train,
+                 Cabin_Deck = str_sub(Cabin,1,1),
+                 Ticket_Digit = nchar(Ticket),
+                 Ticket_Alpha = str_detect(Ticket, '[[:alpha:]]'),
+                 Family_Size = Parch+SibSp,
+                 Name_Family = gsub(",.*$", "", Name),
+                 Title = str_sub(Name, 
+                                 str_locate(Name, ",")[ , 1] + 2, 
+                                 str_locate(Name, "\\.")[ , 1] - 1)
+                )
>     # credit to https://www.kaggle.com/c/titanic/discussion/30733 for Title regex
> 
>     train_sub <- select(train,
+                           Survived,Pclass,Sex,Age,SibSp,Parch,Fare,
+                           Embarked,Cabin_Deck,Ticket_Digit,Ticket_Alpha,Name_Family,
+                           Title,Family_Size)
> 
>     train_mm <- model.matrix(~Pclass+Sex+Age+SibSp+Parch+Fare+
+                                Embarked+Cabin_Deck+Title+Family_Size+Ticket_Alpha,
+                                           train_sub)
> 
>     train_imp <- mice(train_sub, 
+                         m = 1,
+                         method = "cart",
+                         seed = 5,
+                         printFlag=F)
> 
>     train <- complete(train_imp)
> 
>     train <- mutate(train, 
+                     Cabin_Deck_i = ifelse(!is.na(Cabin_Deck),
+                                     Cabin_Deck,
+                                     ifelse(Pclass == 1,# read in the data
+                                            'ABCD', 
+                                             # not including T because only one passenger
+                                             # in the training set was assigned cabin T
+                                            ifelse(Pclass == 2,
+                                                   'E',
+                                                  'F'))))
> 
>     train_Pclass1 <- filter(train, Pclass == 1) 
> 
>     cuts <- discretize(train_Pclass1$Fare,
+                        method = 'cluster',
+                        categories = 4,
+                        ordered = T,
+                        onlycuts = T)
> 
>     train <- mutate(train, Cabin_Deck_i2 = ifelse(Cabin_Deck_i != "ABCD",
+                                            Cabin_Deck_i,
+                                            ifelse(Fare < cuts[2],
+                                                  "D",
+                                                  ifelse(Fare < cuts[3],
+                                                        "C",
+                                                        ifelse(Fare < cuts[4],
+                                                              "B", 
+                                                              "A")))))
>     train <- mutate(train, Cabin_Deck_i3 = ifelse(Cabin_Deck_i2 == 'A',1,
+                                     ifelse(Cabin_Deck_i2 == 'B',2,
+                                           ifelse(Cabin_Deck_i2 == 'C',3,
+                                                 ifelse(Cabin_Deck_i2 == 'D',4,
+                                                       ifelse(Cabin_Deck_i2 == 'E',5,
+                                                             ifelse(Cabin_Deck_i2 == 'F',6,
+                                                                   ifelse(Cabin_Deck_i2 == 'G',7,8))))))))
>     train <- mutate(train, 
+                     Embarked = ifelse(is.na(Embarked),
+                                      'S', Embarked))
> 
> 
>     val <- mutate(val,
+                 Cabin_Deck = str_sub(Cabin,1,1),
+                 Ticket_Digit = nchar(Ticket),
+                 Ticket_Alpha = str_detect(Ticket, '[[:alpha:]]'),
+                 Family_Size = Parch+SibSp,
+                 Name_Family = gsub(",.*$", "", Name),
+                 Title = str_sub(Name, 
+                                 str_locate(Name, ",")[ , 1] + 2, 
+                                 str_locate(Name, "\\.")[ , 1] - 1)
+                )
>     # credit to https://www.kaggle.com/c/titanic/discussion/30733 for Title regex
> 
>     val_sub <- select(val,
+                           Survived,Pclass,Sex,Age,SibSp,Parch,Fare,
+                           Embarked,Cabin_Deck,Ticket_Digit,Ticket_Alpha,Name_Family,
+                           Title,Family_Size)
> 
>     val_mm <- model.matrix(~Pclass+Sex+Age+SibSp+Parch+Fare+
+                                Embarked+Cabin_Deck+Title+Family_Size+Ticket_Alpha,
+                                           val_sub)
> 
>     val_imp <- mice(val_sub, 
+                         m = 1,
+                         method = "cart",
+                         seed = 5,
+                         printFlag=F)
> 
>     val <- complete(val_imp)
> 
>     val <- mutate(val, 
+                     Cabin_Deck_i = ifelse(!is.na(Cabin_Deck),
+                                     Cabin_Deck,
+                                     ifelse(Pclass == 1,
+                                            'ABCD', 
+                                             # not including T because only one passenger
+                                             # in the training set was assigned cabin T
+                                            ifelse(Pclass == 2,
+                                                   'E',
+                                                  'F'))))
> 
>     val_Pclass1 <- filter(val, Pclass == 1) 
> 
>     cuts <- discretize(val_Pclass1$Fare,
+                        method = 'cluster',
+                        categories = 4,
+                        ordered = T,
+                        onlycuts = T)
> 
>     val <- mutate(val, Cabin_Deck_i2 = ifelse(Cabin_Deck_i != "ABCD",
+                                            Cabin_Deck_i,
+                                            ifelse(Fare < cuts[2],
+                                                  "D",
+                                                  ifelse(Fare < cuts[3],
+                                                        "C",
+                                                        ifelse(Fare < cuts[4],
+                                                              "B", 
+                                                              "A")))))
>     val <- mutate(val, Cabin_Deck_i3 = ifelse(Cabin_Deck_i2 == 'A',1,
+                                     ifelse(Cabin_Deck_i2 == 'B',2,
+                                           ifelse(Cabin_Deck_i2 == 'C',3,
+                                                 ifelse(Cabin_Deck_i2 == 'D',4,
+                                                       ifelse(Cabin_Deck_i2 == 'E',5,
+                                                             ifelse(Cabin_Deck_i2 == 'F',6,
+                                                                   ifelse(Cabin_Deck_i2 == 'G',7,8))))))))
>     val <- mutate(val, 
+                     Embarked = ifelse(is.na(Embarked),
+                                      'S', Embarked))
> 
> train <- mutate(train,
+                 Survived = as.factor(Survived),
+                 Sex = as.factor(Sex),
+                 Embarked = as.factor(Embarked),
+                 Cabin_Deck_i2 = as.factor(Cabin_Deck_i2),
+                 Name_Family = as.factor(Name_Family),
+                 Ticket_Alpha = as.factor(Ticket_Alpha),
+                 Title = as.factor(Title))
> 
> val <- mutate(val,
+                Survived = as.factor(Survived),
+                Sex = as.factor(Sex),
+                 Embarked = as.factor(Embarked),
+                   Ticket_Alpha = as.factor(Ticket_Alpha),
+                 Cabin_Deck_i2 = factor(Cabin_Deck_i2, levels = levels(train$Cabin_Deck_i2)),
+                 Name_Family = factor(Name_Family, levels = levels(train$Name_Family)),
+                 Title = factor(Title, levels = levels(train$Title)))
> 
> dt_model <- train(Survived~Pclass+Sex+Age+SibSp+Parch+Fare+
+                   Embarked+Cabin_Deck_i2+Ticket_Digit+Ticket_Alpha+
+                   Family_Size+Title,
+                   data=train,  method = "rpart",
+                   tuneLength = 10)
> dt_model$finalModel
n= 713 

node), split, n, loss, yval, (yprob)
      * denotes terminal node

1) root 713 279 0 (0.6086957 0.3913043)  
  2) TitleMr>=0.5 409  66 0 (0.8386308 0.1613692) *
  3) TitleMr< 0.5 304  91 1 (0.2993421 0.7006579)  
    6) Family_Size>=3.5 42   8 0 (0.8095238 0.1904762) *
    7) Family_Size< 3.5 262  57 1 (0.2175573 0.7824427) *
> 
> val_dt <- select(val, Survived,Pclass,Sex,Age,SibSp,Parch,Fare,
+                  Embarked,Cabin_Deck_i2,Ticket_Digit,Ticket_Alpha,
+                  Family_Size,Title) %>%
+ filter(!is.na(Cabin_Deck_i2) & !is.na(Ticket_Digit) & !is.na(Title))
> 
> dt_pred <- predict(dt_model, val_dt[,-1])
> confusionMatrix(dt_pred, val_dt$Survived, positive = "1")
Confusion Matrix and Statistics

          Reference
Prediction   0   1
         0 100  17
         1  15  45
                                          
               Accuracy : 0.8192          
                 95% CI : (0.7545, 0.8729)
    No Information Rate : 0.6497          
    P-Value [Acc > NIR] : 5.065e-07       
                                          
                  Kappa : 0.5998          
                                          
 Mcnemar's Test P-Value : 0.8597          
                                          
            Sensitivity : 0.7258          
            Specificity : 0.8696          
         Pos Pred Value : 0.7500          
         Neg Pred Value : 0.8547          
             Prevalence : 0.3503          
         Detection Rate : 0.2542          
   Detection Prevalence : 0.3390          
      Balanced Accuracy : 0.7977          
                                          
       'Positive' Class : 1               
                                          
> 
> rf_model <- randomForest(Survived~
+                          Pclass+Sex+Age+SibSp+Parch+Fare+
+                          Embarked+Cabin_Deck_i2+Ticket_Digit+Ticket_Alpha+
+                          Family_Size+Title,
+                       data=train, 
+                       importance=T, 
+                       ntree=2000)
> varImpPlot(rf_model)
> val_rf <- select(val, Survived,Pclass,Sex,Age,SibSp,Parch,Fare,
+                            Embarked,Cabin_Deck_i2,Ticket_Digit,Ticket_Alpha,Family_Size,Title)
> rf_pred <- predict(rf_model, val_rf[,-1])
> confusionMatrix(rf_pred, val_rf$Survived, positive = "1")
Confusion Matrix and Statistics

          Reference
Prediction  0  1
         0 98 13
         1 17 49
                                         
               Accuracy : 0.8305         
                 95% CI : (0.767, 0.8826)
    No Information Rate : 0.6497         
    P-Value [Acc > NIR] : 7.682e-08      
                                         
                  Kappa : 0.6331         
                                         
 Mcnemar's Test P-Value : 0.5839         
                                         
            Sensitivity : 0.7903         
            Specificity : 0.8522         
         Pos Pred Value : 0.7424         
         Neg Pred Value : 0.8829         
             Prevalence : 0.3503         
         Detection Rate : 0.2768         
   Detection Prevalence : 0.3729         
      Balanced Accuracy : 0.8212         
                                         
       'Positive' Class : 1              
                                         
> 
> library(e1071)
> val_nb <- select(val,Survived,Pclass,Sex,Age,SibSp,Parch,Fare,
+                            Embarked,Cabin_Deck_i2,Ticket_Digit,Ticket_Alpha,Family_Size,Title)
> nb_model <- naiveBayes(Survived~
+                            Pclass+Sex+Age+SibSp+Parch+Fare+
+                            Embarked+Cabin_Deck_i2+Ticket_Digit+Ticket_Alpha+
+                             Family_Size+Title,
+            data = train)
> nb_pred <- predict(nb_model,val_nb[,-1])
> confusionMatrix(nb_pred, val_nb$Survived, positive = "1")
Confusion Matrix and Statistics

          Reference
Prediction  0  1
         0 91 14
         1 24 49
                                         
               Accuracy : 0.7865         
                 95% CI : (0.719, 0.8443)
    No Information Rate : 0.6461         
    P-Value [Acc > NIR] : 3.368e-05      
                                         
                  Kappa : 0.5494         
                                         
 Mcnemar's Test P-Value : 0.1443         
                                         
            Sensitivity : 0.7778         
            Specificity : 0.7913         
         Pos Pred Value : 0.6712         
         Neg Pred Value : 0.8667         
             Prevalence : 0.3539         
         Detection Rate : 0.2753         
   Detection Prevalence : 0.4101         
      Balanced Accuracy : 0.7845         
                                         
       'Positive' Class : 1              
                                         
> 
> val_svm <- select(val,Survived,Pclass,Sex,Age,SibSp,Parch,Fare,
+                            Embarked,Cabin_Deck_i2,Ticket_Digit,Ticket_Alpha,Family_Size,Title) %>%
+ filter(!is.na(Cabin_Deck_i2) & !is.na(Ticket_Digit) & !is.na(Title))
> 
> svm_model <- svm(Survived~
+                            Pclass+Sex+Age+SibSp+Parch+Fare+
+                            Embarked+Cabin_Deck_i2+Ticket_Digit+Ticket_Alpha+
+                             Family_Size+Title,
+            data = train)
> svm_pred <- predict(svm_model,val_svm[,-1])
> confusionMatrix(svm_pred, val_svm$Survived, positive = "1")
Confusion Matrix and Statistics

          Reference
Prediction   0   1
         0 103  16
         1  12  46
                                          
               Accuracy : 0.8418          
                 95% CI : (0.7795, 0.8922)
    No Information Rate : 0.6497          
    P-Value [Acc > NIR] : 9.976e-09       
                                          
                  Kappa : 0.6472          
                                          
 Mcnemar's Test P-Value : 0.5708          
                                          
            Sensitivity : 0.7419          
            Specificity : 0.8957          
         Pos Pred Value : 0.7931          
         Neg Pred Value : 0.8655          
             Prevalence : 0.3503          
         Detection Rate : 0.2599          
   Detection Prevalence : 0.3277          
      Balanced Accuracy : 0.8188          
                                          
       'Positive' Class : 1               
                                          
> 
> library(sgd)
Error in library(sgd) : there is no package called â€˜sgdâ€™
Execution halted
