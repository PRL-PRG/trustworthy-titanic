
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## import package
> library(tidyverse) # metapackage with lots of helpful functions
â”€â”€ [1mAttaching packages[22m â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 1.3.0 â”€â”€
[32mâœ“[39m [34mggplot2[39m 3.3.2     [32mâœ“[39m [34mpurrr  [39m 0.3.4
[32mâœ“[39m [34mtibble [39m 3.0.1     [32mâœ“[39m [34mdplyr  [39m 1.0.2
[32mâœ“[39m [34mtidyr  [39m 1.1.0     [32mâœ“[39m [34mstringr[39m 1.4.0
[32mâœ“[39m [34mreadr  [39m 1.3.1     [32mâœ“[39m [34mforcats[39m 0.5.0
â”€â”€ [1mConflicts[22m â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€
[31mx[39m [34mdplyr[39m::[32mfilter()[39m masks [34mstats[39m::filter()
[31mx[39m [34mdplyr[39m::[32mlag()[39m    masks [34mstats[39m::lag()
Warning messages:
1: package â€˜ggplot2â€™ was built under R version 3.6.2 
2: package â€˜tibbleâ€™ was built under R version 3.6.2 
3: package â€˜tidyrâ€™ was built under R version 3.6.2 
4: package â€˜purrrâ€™ was built under R version 3.6.2 
5: package â€˜dplyrâ€™ was built under R version 3.6.2 
> 
> ## import data
> train <- read_csv("../input/train.csv")
Parsed with column specification:
cols(
  PassengerId = [32mcol_double()[39m,
  Survived = [32mcol_double()[39m,
  Pclass = [32mcol_double()[39m,
  Name = [31mcol_character()[39m,
  Sex = [31mcol_character()[39m,
  Age = [32mcol_double()[39m,
  SibSp = [32mcol_double()[39m,
  Parch = [32mcol_double()[39m,
  Ticket = [31mcol_character()[39m,
  Fare = [32mcol_double()[39m,
  Cabin = [31mcol_character()[39m,
  Embarked = [31mcol_character()[39m
)
> test <- read_csv("../input/test.csv")
Parsed with column specification:
cols(
  PassengerId = [32mcol_double()[39m,
  Pclass = [32mcol_double()[39m,
  Name = [31mcol_character()[39m,
  Sex = [31mcol_character()[39m,
  Age = [32mcol_double()[39m,
  SibSp = [32mcol_double()[39m,
  Parch = [32mcol_double()[39m,
  Ticket = [31mcol_character()[39m,
  Fare = [32mcol_double()[39m,
  Cabin = [31mcol_character()[39m,
  Embarked = [31mcol_character()[39m
)
> 
> ## Descriptive statistics
> head(train)
[90m# A tibble: 6 x 12[39m
  PassengerId Survived Pclass Name  Sex     Age SibSp Parch Ticket  Fare Cabin
        [3m[90m<dbl>[39m[23m    [3m[90m<dbl>[39m[23m  [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m [3m[90m<chr>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m  [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m
[90m1[39m           1        0      3 Brauâ€¦ male     22     1     0 A/5 2â€¦  7.25 [31mNA[39m   
[90m2[39m           2        1      1 Cumiâ€¦ femaâ€¦    38     1     0 PC 17â€¦ 71.3  C85  
[90m3[39m           3        1      3 Heikâ€¦ femaâ€¦    26     0     0 STON/â€¦  7.92 [31mNA[39m   
[90m4[39m           4        1      1 Futrâ€¦ femaâ€¦    35     1     0 113803 53.1  C123 
[90m5[39m           5        0      3 Alleâ€¦ male     35     0     0 373450  8.05 [31mNA[39m   
[90m6[39m           6        0      3 Moraâ€¦ male     [31mNA[39m     0     0 330877  8.46 [31mNA[39m   
[90m# â€¦ with 1 more variable: Embarked [3m[90m<chr>[90m[23m[39m
> glimpse(train)
Rows: 891
Columns: 12
$ PassengerId [3m[90m<dbl>[39m[23m 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17â€¦
$ Survived    [3m[90m<dbl>[39m[23m 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, â€¦
$ Pclass      [3m[90m<dbl>[39m[23m 3, 1, 3, 1, 3, 3, 1, 3, 3, 2, 3, 1, 3, 3, 3, 2, 3, 2, 3, â€¦
$ Name        [3m[90m<chr>[39m[23m "Braund, Mr. Owen Harris", "Cumings, Mrs. John Bradley (Fâ€¦
$ Sex         [3m[90m<chr>[39m[23m "male", "female", "female", "female", "male", "male", "maâ€¦
$ Age         [3m[90m<dbl>[39m[23m 22, 38, 26, 35, 35, NA, 54, 2, 27, 14, 4, 58, 20, 39, 14,â€¦
$ SibSp       [3m[90m<dbl>[39m[23m 1, 1, 0, 1, 0, 0, 0, 3, 0, 1, 1, 0, 0, 1, 0, 0, 4, 0, 1, â€¦
$ Parch       [3m[90m<dbl>[39m[23m 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 5, 0, 0, 1, 0, 0, â€¦
$ Ticket      [3m[90m<chr>[39m[23m "A/5 21171", "PC 17599", "STON/O2. 3101282", "113803", "3â€¦
$ Fare        [3m[90m<dbl>[39m[23m 7.2500, 71.2833, 7.9250, 53.1000, 8.0500, 8.4583, 51.8625â€¦
$ Cabin       [3m[90m<chr>[39m[23m NA, "C85", NA, "C123", NA, NA, "E46", NA, NA, NA, "G6", "â€¦
$ Embarked    [3m[90m<chr>[39m[23m "S", "C", "S", "S", "S", "Q", "S", "S", "S", "C", "S", "Sâ€¦
> summary(train)
  PassengerId       Survived          Pclass          Name          
 Min.   :  1.0   Min.   :0.0000   Min.   :1.000   Length:891        
 1st Qu.:223.5   1st Qu.:0.0000   1st Qu.:2.000   Class :character  
 Median :446.0   Median :0.0000   Median :3.000   Mode  :character  
 Mean   :446.0   Mean   :0.3838   Mean   :2.309                     
 3rd Qu.:668.5   3rd Qu.:1.0000   3rd Qu.:3.000                     
 Max.   :891.0   Max.   :1.0000   Max.   :3.000                     
                                                                    
     Sex                 Age            SibSp           Parch       
 Length:891         Min.   : 0.42   Min.   :0.000   Min.   :0.0000  
 Class :character   1st Qu.:20.12   1st Qu.:0.000   1st Qu.:0.0000  
 Mode  :character   Median :28.00   Median :0.000   Median :0.0000  
                    Mean   :29.70   Mean   :0.523   Mean   :0.3816  
                    3rd Qu.:38.00   3rd Qu.:1.000   3rd Qu.:0.0000  
                    Max.   :80.00   Max.   :8.000   Max.   :6.0000  
                    NA's   :177                                     
    Ticket               Fare           Cabin             Embarked        
 Length:891         Min.   :  0.00   Length:891         Length:891        
 Class :character   1st Qu.:  7.91   Class :character   Class :character  
 Mode  :character   Median : 14.45   Mode  :character   Mode  :character  
                    Mean   : 32.20                                        
                    3rd Qu.: 31.00                                        
                    Max.   :512.33                                        
                                                                          
> 
> ## which variable contains NAs? 
> # Fix Age/Embarked variables # remove Cabin (not informative)
> for (i in 1:dim(train)[2]) {
+   cat(colnames(train)[i],": " ,mean(is.na(train[, i])), "%", "\n")
+ }
PassengerId :  0 % 
Survived :  0 % 
Pclass :  0 % 
Name :  0 % 
Sex :  0 % 
Age :  0.1986532 % 
SibSp :  0 % 
Parch :  0 % 
Ticket :  0 % 
Fare :  0 % 
Cabin :  0.7710438 % 
Embarked :  0.002244669 % 
> 
> ## remove Cabin
> train <- train %>% select(-Cabin)
> 
> ## factor # set score
> train$Survived <- factor(train$Survived)
> train$Pclass <- factor(train$Pclass)
> train$Sex <- factor(train$Sex, labels = c(0, 1)) # female = 0; male = 1 # I'm not Sexism!
> 
> ## Make Name variable more informative
> name_split <- str_split(train$Name, pattern = ", ", simplify = F)
> name_split <- sapply(name_split, "[", 2)
> name_split <- str_split(name_split, pattern = "\\.", simplify = F)
> name_split <- sapply(name_split, '[', 1)
> train$Title <- name_split
> 
> ## levels of Title: Mr, Miss, Mrs, Others
> for (i in 1:length(train$Title)) {
+   if (!train$Title[i] %in% c("Mr", "Miss", "Mrs")) {
+     train$Title[i] = "Others"
+   }
+ }
> 
> ## mapping categorical variables
> train$Title <- factor(train$Title, levels = c("Mr", "Miss", "Mrs", "Others"), labels = c("0", "1", "2", "3"))
> 
> ## Deal with NAs in "Age" with the help of "title"
> train %>%
+   group_by(Title) %>%
+   summarise("Age_median" = median(Age, na.rm = T))
`summarise()` ungrouping output (override with `.groups` argument)
[90m# A tibble: 4 x 2[39m
  Title Age_median
  [3m[90m<fct>[39m[23m      [3m[90m<dbl>[39m[23m
[90m1[39m 0             30
[90m2[39m 1             21
[90m3[39m 2             35
[90m4[39m 3              9
> 
> for (i in 1:length(train$Age)) {
+   if (is.na(train$Age[i])) {
+     if (train$Title[i] == "0") {train$Age[i] = 30}
+     else if (train$Title[i] == "1") {train$Age[i] = 21}
+     else if (train$Title[i] == "2") {train$Age[i] = 35} 
+     else {train$Age[i] = 9}
+   }
+ }
> 
> ## Deal with NAs in Embarked
> for (i in 1:dim(train)[1]) {
+   if (is.na(train$Embarked[i])) {
+     train$Embarked[i] = "S"
+     }
+ }
> 
> ## Add new feature: Travel alone?
> for (i in 1:dim(train)[1]) {
+   if (train$SibSp[i] > 0 || train$Parch[i] > 0) {
+     train$Alone[i] = 1
+   } else {
+     train$Alone[i] = 0
+   }
+ }
Warning message:
Unknown or uninitialised column: `Alone`. 
> 
> ## mapping categorical variables
> # S:0; C:1; Q:2
> train$Alone <- factor(train$Alone)
> train$Embarked <- factor(train$Embarked, levels = c("S", "C", "Q"), labels = c("0", "1", "2"))
> train$Pclass <- factor(train$Pclass, levels = c(1, 2, 3), labels = c("0", "1", "2"))
> 
> 
> ## Select useful features
> train <- train %>% select(Survived, Pclass, Age, Sex, Fare, Embarked, Title, Alone)
> 
> ## Add one more feature: kid
> # Add one more feature
> for (i in 1:dim(train)[1]) {
+   if (train$Age[i] <= 16) {
+     train$kid[i] = 1
+   } else {
+     train$kid[i] = 0
+   }
+ }
Warning message:
Unknown or uninitialised column: `kid`. 
> 
> ## Build logistic regression model
> logit.mod <- glm(Survived ~ Pclass + Sex + Age + Embarked + kid , data = train, family = "binomial")
> summary(logit.mod)

Call:
glm(formula = Survived ~ Pclass + Sex + Age + Embarked + kid, 
    family = "binomial", data = train)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.6395  -0.6731  -0.3738   0.6455   2.4606  

Coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept)  2.911718   0.421625   6.906 4.99e-12 ***
Pclass1     -0.931333   0.264958  -3.515  0.00044 ***
Pclass2     -2.271726   0.253458  -8.963  < 2e-16 ***
Sex1        -2.563807   0.188697 -13.587  < 2e-16 ***
Age         -0.023417   0.008964  -2.612  0.00899 ** 
Embarked1    0.530058   0.233980   2.265  0.02349 *  
Embarked2    0.510825   0.322834   1.582  0.11358    
kid          0.587491   0.336546   1.746  0.08087 .  
---
Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1186.66  on 890  degrees of freedom
Residual deviance:  794.81  on 883  degrees of freedom
AIC: 810.81

Number of Fisher Scoring iterations: 5

> 
> ## Qualify the model
> prediction_train <- predict(logit.mod, type = "response")
> tab <- table(train$Survived, prediction_train > 0.5)
> 
> TP = tab[2,2] # true positives
> TN = tab[1,1] # true negatives
> FP = tab[1,2] # false positives
> FN = tab[2,1] # false negatives
> 
> sensitivity = TP/(TP+FN)
> specificity = TN/(TN+FN)
> accuracy = (TN + TP)/(TN + TP + FP + FN)
> accuracy
[1] 0.7979798
> 
> # --------------------------------------------------------
> 
> ## transformation of testing data 
> 
> test <- test %>% select(-Cabin)
> 
> test$Pclass <- factor(test$Pclass)
> test$Sex <- factor(test$Sex, labels = c(0, 1)) 
> 
> name_split <- str_split(test$Name, pattern = ", ", simplify = F)
> name_split <- sapply(name_split, "[", 2)
> name_split <- str_split(name_split, pattern = "\\.", simplify = F)
> name_split <- sapply(name_split, '[', 1)
> test$Title <- name_split
> 
> for (i in 1:length(test$Title)) {
+   if (!test$Title[i] %in% c("Mr", "Miss", "Mrs")) {
+     test$Title[i] = "Others"
+   }
+ }
> 
> test$Title <- factor(test$Title, levels = c("Mr", "Miss", "Mrs", "Others"), labels = c("0", "1", "2", "3"))
> 
> for (i in 1:length(test$Age)) {
+   if (is.na(test$Age[i])) {
+     if (test$Title[i] == "0") {test$Age[i] = 30}
+     else if (test$Title[i] == "1") {test$Age[i] = 21}
+     else if (test$Title[i] == "2") {test$Age[i] = 35} 
+     else {test$Age[i] = 9}
+   }
+ }
> 
> for (i in 1:dim(test)[1]) {
+   if (is.na(test$Embarked[i])) {
+     test$Embarked[i] = "S"
+     }
+ }
> 
> for (i in 1:dim(test)[1]) {
+   if (test$SibSp[i] > 0 || test$Parch[i] > 0) {
+     test$Alone[i] = 1
+   } else {
+     test$Alone[i] = 0
+   }
+ }
Warning message:
Unknown or uninitialised column: `Alone`. 
> 
> test$Alone <- factor(test$Alone)
> test$Embarked <- factor(test$Embarked, levels = c("S", "C", "Q"), labels = c("0", "1", "2"))
> test$Pclass <- factor(test$Pclass, levels = c(1, 2, 3), labels = c("0", "1", "2"))
> 
> 
> for (i in 1:dim(test)[1]) {
+   if (test$Age[i] <= 16) {
+     test$kid[i] = 1
+   } else {
+     test$kid[i] = 0
+   }
+ }
Warning message:
Unknown or uninitialised column: `kid`. 
> 
> test <- test %>% select(PassengerId, Pclass, Age, Sex, Fare, Embarked, Title, Alone, kid)
> 
> 
> # -----------------------------------------------
> 
> # prediction
> 
> ## prediction in testing data
> prediction <- predict(logit.mod, newdata=test, type = "response")
> solution <- data.frame(PassengerID = test$PassengerId, Survived = round(prediction, 0))
> write.csv(solution, file = '../logitmod.csv', row.names = F)
> 
> 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
  1.673   0.134   1.827 
