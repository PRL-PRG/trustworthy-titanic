
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # This program predict the survival in the Titanic Disaster using Decision Trees
> # Decision Trees are powerful tools in Machine Learning
> # Author: "Kevin Mekulu
> 
> library(ggplot2) # Data visualization
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library(readr) # CSV file I/O, e.g. the read_csv function
> library(rpart) # Loading Decision Tree Package
> 
> # Import the training set: train
> 
> train <- read.csv("../input/train.csv")
>   
> # Import the testing set: test
> 
> test <- read.csv("../input/test.csv")
> 
> # Your train and test set are still loaded in
> str(train)
'data.frame':	891 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : Factor w/ 891 levels "Abbing, Mr. Anthony",..: 109 191 358 277 16 559 520 629 417 581 ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : Factor w/ 681 levels "110152","110413",..: 524 597 670 50 473 276 86 396 345 133 ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : Factor w/ 148 levels "","A10","A14",..: 1 83 1 57 1 1 131 1 1 1 ...
 $ Embarked   : Factor w/ 4 levels "","C","Q","S": 4 2 4 4 4 3 4 4 4 2 ...
> str(test)
'data.frame':	418 obs. of  11 variables:
 $ PassengerId: int  892 893 894 895 896 897 898 899 900 901 ...
 $ Pclass     : int  3 3 2 3 3 3 3 2 3 3 ...
 $ Name       : Factor w/ 418 levels "Abbott, Master. Eugene Joseph",..: 210 409 273 414 182 370 85 58 5 104 ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 2 2 1 2 1 2 1 2 ...
 $ Age        : num  34.5 47 62 27 22 14 30 26 18 21 ...
 $ SibSp      : int  0 1 0 0 1 0 0 1 0 2 ...
 $ Parch      : int  0 0 0 0 1 0 0 1 0 0 ...
 $ Ticket     : Factor w/ 363 levels "110469","110489",..: 153 222 74 148 139 262 159 85 101 270 ...
 $ Fare       : num  7.83 7 9.69 8.66 12.29 ...
 $ Cabin      : Factor w/ 77 levels "","A11","A18",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Embarked   : Factor w/ 3 levels "C","Q","S": 2 3 2 3 3 3 2 3 1 3 ...
> 
> # Build the decision tree
> my_tree_two <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "class")
> 
> # Change this command
> my_tree_three <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
+                      data = train, method = "class", control = rpart.control(minsplit = 50, cp = 0))
> 
> 
> # Visualize the decision tree using plot() and text()
> plot(my_tree_three)
> text(my_tree_three)
> 
> # Load in the packages to build a fancy plot
> library(rattle)
Loading required package: tibble
Loading required package: bitops
Rattle: A free graphical interface for data science with R.
Version 5.4.0 Copyright (c) 2006-2020 Togaware Pty Ltd.
Type 'rattle()' to shake, rattle, and roll your data.
Warning messages:
1: package ‘rattle’ was built under R version 3.6.2 
2: package ‘tibble’ was built under R version 3.6.2 
> library(rpart.plot)
> library(RColorBrewer)
> 
> 
> 
> # Visualize my_tree_three
> 
> fancyRpartPlot(my_tree_three)
> 
> 
> # my_tree_two and test are available in the workspace
> 
> # Make predictions on the test set
> my_prediction <- predict(my_tree_three, newdata = test, type = "class")
> 
> # Finish the data.frame() call
> my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
> 
> # Use nrow() on my_solution
> nrow(my_solution)
[1] 418
> 
> 
> # Finish the write.csv() call
> write.csv(my_solution, file = "my_solution.csv", row.names = FALSE)
> 
> 
>   
> 
> proc.time()
   user  system elapsed 
  0.783   0.082   0.867 
