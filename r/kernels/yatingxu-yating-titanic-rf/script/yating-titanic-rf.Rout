
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library("readr")
> library("dplyr")

Attaching package: â€˜dplyrâ€™

The following objects are masked from â€˜package:statsâ€™:

    filter, lag

The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

Warning message:
package â€˜dplyrâ€™ was built under R version 3.6.2 
> library("plyr")
------------------------------------------------------------------------------
You have loaded plyr after dplyr - this is likely to cause problems.
If you need functions from both plyr and dplyr, please load plyr first, then dplyr:
library(plyr); library(dplyr)
------------------------------------------------------------------------------

Attaching package: â€˜plyrâ€™

The following objects are masked from â€˜package:dplyrâ€™:

    arrange, count, desc, failwith, id, mutate, rename, summarise,
    summarize

> library("randomForest")
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: â€˜randomForestâ€™

The following object is masked from â€˜package:dplyrâ€™:

    combine

> train <- read_csv('../input/train.csv')
Parsed with column specification:
cols(
  PassengerId = [32mcol_double()[39m,
  Survived = [32mcol_double()[39m,
  Pclass = [32mcol_double()[39m,
  Name = [31mcol_character()[39m,
  Sex = [31mcol_character()[39m,
  Age = [32mcol_double()[39m,
  SibSp = [32mcol_double()[39m,
  Parch = [32mcol_double()[39m,
  Ticket = [31mcol_character()[39m,
  Fare = [32mcol_double()[39m,
  Cabin = [31mcol_character()[39m,
  Embarked = [31mcol_character()[39m
)
> test  <- read_csv('../input/test.csv')
Parsed with column specification:
cols(
  PassengerId = [32mcol_double()[39m,
  Pclass = [32mcol_double()[39m,
  Name = [31mcol_character()[39m,
  Sex = [31mcol_character()[39m,
  Age = [32mcol_double()[39m,
  SibSp = [32mcol_double()[39m,
  Parch = [32mcol_double()[39m,
  Ticket = [31mcol_character()[39m,
  Fare = [32mcol_double()[39m,
  Cabin = [31mcol_character()[39m,
  Embarked = [31mcol_character()[39m
)
> train$datatype <- "train"
> test$datatype <- "test"
> alldata <- bind_rows(train, test)
> alldata$Pclass   <- factor(alldata$Pclass)
> alldata$Sex      <- factor(alldata$Sex)
> alldata$Embarked <- factor(alldata$Embarked)
> train_1 <- alldata[alldata$datatype=="train", c("Survived","Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")]
> test_1  <- alldata[alldata$datatype=="test",  c("Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked")]
> summary(alldata)
  PassengerId      Survived      Pclass      Name               Sex     
 Min.   :   1   Min.   :0.0000   1:323   Length:1309        female:466  
 1st Qu.: 328   1st Qu.:0.0000   2:277   Class :character   male  :843  
 Median : 655   Median :0.0000   3:709   Mode  :character               
 Mean   : 655   Mean   :0.3838                                          
 3rd Qu.: 982   3rd Qu.:1.0000                                          
 Max.   :1309   Max.   :1.0000                                          
                NA's   :418                                             
      Age            SibSp            Parch          Ticket         
 Min.   : 0.17   Min.   :0.0000   Min.   :0.000   Length:1309       
 1st Qu.:21.00   1st Qu.:0.0000   1st Qu.:0.000   Class :character  
 Median :28.00   Median :0.0000   Median :0.000   Mode  :character  
 Mean   :29.88   Mean   :0.4989   Mean   :0.385                     
 3rd Qu.:39.00   3rd Qu.:1.0000   3rd Qu.:0.000                     
 Max.   :80.00   Max.   :8.0000   Max.   :9.000                     
 NA's   :263                                                        
      Fare            Cabin           Embarked     datatype        
 Min.   :  0.000   Length:1309        C   :270   Length:1309       
 1st Qu.:  7.896   Class :character   Q   :123   Class :character  
 Median : 14.454   Mode  :character   S   :914   Mode  :character  
 Mean   : 33.295                      NA's:  2                     
 3rd Qu.: 31.275                                                   
 Max.   :512.329                                                   
 NA's   :1                                                         
> rf <- randomForest(factor(Survived)~.
+                      , data=train_1, metry=2,importance=T, na.action = na.roughfix, ntree=150)
> plot(rf)
> rf

Call:
 randomForest(formula = factor(Survived) ~ ., data = train_1,      metry = 2, importance = T, ntree = 150, na.action = na.roughfix) 
               Type of random forest: classification
                     Number of trees: 150
No. of variables tried at each split: 2

        OOB estimate of  error rate: 16.05%
Confusion matrix:
    0   1 class.error
0 508  41  0.07468124
1 102 240  0.29824561
> test_roughfix <- na.roughfix(test_1)
> rf.pd <- predict(rf, test_roughfix)
> 
> proc.time()
   user  system elapsed 
  1.146   0.139   1.296 
