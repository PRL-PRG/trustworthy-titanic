
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## ---- message=FALSE, warning=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train <- read.csv('../input/train.csv', stringsAsFactors = F)
> test  <- read.csv('../input/test.csv', stringsAsFactors = F)
> 
> 
> # check data
> str(train)
'data.frame':	891 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : chr  "male" "female" "female" "female" ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  "" "C85" "" "C123" ...
 $ Embarked   : chr  "S" "C" "S" "S" ...
> 
> #Now we're onto my code. Let's try a nearest-neighbor approximation
> 
> 
> #First, change blank numerical variables to an extreme value
> 
> train[is.na(train)] <- 1000
>  
> #Check if it worked:
> 
> str(train)
'data.frame':	891 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : chr  "male" "female" "female" "female" ...
 $ Age        : num  22 38 26 35 35 1000 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  "" "C85" "" "C123" ...
 $ Embarked   : chr  "S" "C" "S" "S" ...
> 
> #Change female to 0 and male to 1
> 
> train[train == "female"] <- 0
> 
> train[train == "male"] <- 1
> 
> #Change S,C, Q to numerical values
> 
> train[train == "S"] <- 0
> 
> train[train == "Q"] <- 1
> 
> train[train == "C"] <- 2
> 
> #Make these columns numeric
> 
> train[["Sex"]] <- as.numeric(train[["Sex"]])
> 
> train[["Embarked"]] <- as.numeric(train[["Embarked"]])
> 
> train[["Pclass"]] <- as.numeric(train[["Pclass"]])
> 
> train[["SibSp"]] <- as.numeric(train[["SibSp"]])
> 
> train[["Parch"]] <- as.numeric(train[["Parch"]])
> 
> #Get correlations before scaling to minimize arithmetic. Replace empty rows again with 0s because of that
> #pesky blank entry in Embarked.
> 
> train[is.na(train)]<-0
> 
> corvec <- cor(train[["Survived"]], train[sapply(train,is.numeric)])
> 
> #Square them
> 
> corvec <- corvec^2
> 
> #Check them
> 
> str(corvec)
 num [1, 1:9] 2.51e-05 1.00 1.15e-01 2.95e-01 8.93e-03 ...
 - attr(*, "dimnames")=List of 2
  ..$ : NULL
  ..$ : chr [1:9] "PassengerId" "Survived" "Pclass" "Sex" ...
> 
> #Next, normalize each column.
> 
> train[["Age"]] <- scale(train[["Age"]])
> 
> train[["Fare"]] <- scale(train[["Fare"]])
> 
> train[["Embarked"]] <- scale(train[["Embarked"]])
> 
> train[["Pclass"]] <- scale(train[["Pclass"]])
> 
> train[["SibSp"]] <- scale(train[["SibSp"]])
> 
> train[["Parch"]] <- scale(train[["Parch"]])
> 
> train[["Sex"]] <- scale(train[["Sex"]])
> 
> 
> #Do the same for test
> test[is.na(test)] <- 1000
> str(test)
'data.frame':	418 obs. of  11 variables:
 $ PassengerId: int  892 893 894 895 896 897 898 899 900 901 ...
 $ Pclass     : int  3 3 2 3 3 3 3 2 3 3 ...
 $ Name       : chr  "Kelly, Mr. James" "Wilkes, Mrs. James (Ellen Needs)" "Myles, Mr. Thomas Francis" "Wirz, Mr. Albert" ...
 $ Sex        : chr  "male" "female" "male" "male" ...
 $ Age        : num  34.5 47 62 27 22 14 30 26 18 21 ...
 $ SibSp      : int  0 1 0 0 1 0 0 1 0 2 ...
 $ Parch      : int  0 0 0 0 1 0 0 1 0 0 ...
 $ Ticket     : chr  "330911" "363272" "240276" "315154" ...
 $ Fare       : num  7.83 7 9.69 8.66 12.29 ...
 $ Cabin      : chr  "" "" "" "" ...
 $ Embarked   : chr  "Q" "S" "Q" "S" ...
> test[test == "female"] <- 0
> test[test == "male"] <- 1
> test[test == "S"] <- 0
> test[test == "Q"] <- 1
> test[test == "C"] <- 2
> test[["Sex"]] <- as.numeric(test[["Sex"]])
> test[["Embarked"]] <- as.numeric(test[["Embarked"]])
> test[["Pclass"]] <- as.numeric(test[["Pclass"]])
> test[["SibSp"]] <- as.numeric(test[["SibSp"]])
> test[["Parch"]] <- as.numeric(test[["Parch"]])
> test[is.na(test)]<-0
> test[["Age"]] <- scale(test[["Age"]])
> test[["Fare"]] <- scale(test[["Fare"]])
> test[["Embarked"]] <- scale(test[["Embarked"]])
> test[["Pclass"]] <- scale(test[["Pclass"]])
> test[["SibSp"]] <- scale(test[["SibSp"]])
> test[["Parch"]] <- scale(test[["Parch"]])
> test[["Sex"]] <- scale(test[["Sex"]])
> 
> 
> #Now, define a metric.
> 
> corsquaredist <- function(x,y){
+ 
+ PclassComp<- corvec[3]*(as.vector(x[["Pclass"]])-as.vector(y[["Pclass"]]))^2
+ 
+ SexComp<- corvec[4]*(as.vector(x[["Sex"]])-as.vector(y[["Sex"]]))^2
+ 
+ AgeComp<- corvec[5]*(as.vector(x[["Age"]])-as.vector(y[["Age"]]))^2
+ 
+ SibSpComp<- corvec[6]*(as.vector(x[["SibSp"]])-as.vector(y[["SibSp"]]))^2
+ 
+ ParchComp<- corvec[7]*(as.vector(x[["Parch"]])-as.vector(y[["Parch"]]))^2
+ 
+ FareComp<- corvec[8]*(as.vector(x[["Fare"]])-as.vector(y[["Fare"]]))^2
+ 
+ EmbarkedComp<- corvec[9]*(as.vector(x[["Embarked"]])-as.vector(y[["Embarked"]]))^2
+ 
+ return(PclassComp+SexComp+AgeComp+SibSpComp+ParchComp+FareComp+EmbarkedComp)
+ }
> 
> 
> survivalguess <-function(x,y){
+ templist <- corsquaredist(x,y)
+ tempreturn <- order(templist)
+ SurvivalFitness<-y[tempreturn[1],2]+y[tempreturn[2],2]+y[tempreturn[3],2]
+ if(SurvivalFitness < 2){
+     tempanswer<- 0
+     } else{
+     tempanswer<- 1
+     }
+ return(tempanswer)
+ }
> 
> 
> TotalSurvival <- function(x){
+ 
+ output<- matrix(ncol=2, nrow=nrow(x))
+ 
+ for (i in 1:nrow(x)){
+         output[i,1]=x[i,1]
+         output[i,2]=survivalguess(x[i,],train)
+     }
+ colnames(output) <- c("PassengerId","Survived")
+ return(output)
+ }
> 
> answer<-TotalSurvival(test)
> 
> str(answer)
 num [1:418, 1:2] 892 893 894 895 896 897 898 899 900 901 ...
 - attr(*, "dimnames")=List of 2
  ..$ : NULL
  ..$ : chr [1:2] "PassengerId" "Survived"
> 
> write.csv(answer, file = 'Rushton_Solution.csv', row.names = F)
> 
> 
> 
> proc.time()
   user  system elapsed 
  0.310   0.038   0.343 
