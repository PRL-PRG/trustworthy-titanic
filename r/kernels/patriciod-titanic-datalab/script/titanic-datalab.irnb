{"cells":[{"metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load in \n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n\n# Any results you write to the current directory are saved as output.","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0","collapsed":true,"_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a","trusted":false},"cell_type":"code","source":"library(titanic)\nattach(titanic_train)\nlibrary(pROC)\nlibrary(e1071)\nlibrary(kernlab)\nlibrary(ROCR)\n\nlibrary(rpart) \nlibrary(partykit)\nlibrary(randomForest) ","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9965e7ec9333b4c728d5cdf9d14d6f274ed41c1a"},"cell_type":"code","source":"set.seed(123)\n#Explorando los datos\nRegresionU<-glm(Survived~Age+Fare,family=binomial())\nsummary(RegresionU)\n\nRegresionRoc<-roc(Survived[is.na(Age) == FALSE & is.na(Fare) == FALSE],as.vector(RegresionU$fitted.values))\nplot(RegresionRoc)\n\nauc(RegresionRoc)\n#AUC de regresion original\ntable(Survived[is.na(Age) == FALSE & is.na(Fare) == FALSE],RegresionU$fitted.values>.5)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"d6e44d53e7f63e572d7c8121ad5616d4810683c5"},"cell_type":"code","source":"\nRegresionSVM<-ksvm(Survived~Fare+Age,data=titanic_train,kernel=\"rbfdot\",kpar=list(sigma=1),type=\"C-svc\",C=714,scaled=c()) \nRegresionSVM\nplot(RegresionSVM,data=titanic_train[is.na(Age)==FALSE & is.na(Fare)==FALSE,])\n\n\ntitanic_train2 <- cbind(Fare,Age)\ntitanic_train2 <- titanic_train2[is.na(Fare)==FALSE & is.na(Age)==FALSE,]\nRegresionPredictSVM<-predict(RegresionSVM,titanic_train2,type=\"decision\") \n\n\nlibrary(ROCR)\nSurvived2 <- Survived[is.na(Fare)==FALSE & is.na(Age)==FALSE]\nRegresionPredictSVMPred <- prediction(RegresionPredictSVM,Survived2)\nRegresionPredictSVMPredPerf <- performance(RegresionPredictSVMPred,measure = \"tpr\", x.measure = \"fpr\") \n# Paso de performance\nplot(RegresionPredictSVMPredPerf) # Curva ROC\nabline(0,1) # Identidad\n\nRegresionPredictSVMPredAUC <- performance(RegresionPredictSVMPred,measure = \"auc\")  \nRegresionPredictSVMPredAUC@y.values\n\n\nsigest(Survived~Fare+Age,data=titanic_train) \nRegresionPredictSVMb<-ksvm(Survived~Fare+Age,data=titanic_train,kernel=\"rbfdot\",type=\"C-svc\",C=714,scaled=c()) \nRegresionPredictSVMb\nplot(RegresionPredictSVMb,data=titanic_train[is.na(Age)==FALSE & is.na(Fare)==FALSE,])\n\nRegresionPredictSVMbdec<-predict(RegresionPredictSVMb,titanic_train2,type=\"decision\") \nRegresionPredictSVMbdecpred <- prediction(RegresionPredictSVMbdec,Survived2) \nRegresionPredictSVMbdecpref <- performance(RegresionPredictSVMbdecpred,measure = \"tpr\", x.measure = \"fpr\") \nplot(RegresionPredictSVMbdecpref) # Curva ROC\nabline(0,1) # Recta a 45 grados\n\nRegresionPredictSVMbdecpredAUC <- performance(RegresionPredictSVMbdecpred,measure = \"auc\")  \nRegresionPredictSVMbdecpredAUC@y.values\nRegresionPredictSVMbC<-ksvm(x=cbind(Fare,Age),y=Survived,data=titanic_train,kernel=\"rbfdot\",type=\"C-svc\",C=714,scaled=c(),prob.model=TRUE) \nRegresionPredictSVMbCProb<-predict(RegresionPredictSVMbC,titanic_train2,type=\"probabilities\") \n\ntable(Survived2,RegresionPredictSVMbCProb[,2]>0.396)\n\nRegSVMRBFC<-ksvm(Survived~Fare+Age,data=titanic_train,kernel=\"rbfdot\",type=\"C-svc\",C=1,scaled=c()) \nRegSVMRBFC\nplot(RegSVMRBFC,data=titanic_train[is.na(Age)==FALSE & is.na(Fare)==FALSE,])\nRegSVMRBFCdec<-predict(RegSVMRBFC,titanic_train2,type=\"decision\") \nRegSVMRBFCpred <- prediction(RegSVMRBFCdec,Survived2) \nRegSVMRBFCpref <- performance(RegSVMRBFCpred,measure = \"tpr\", x.measure = \"fpr\") \nplot(RegSVMRBFCpref) \nabline(0,1)\n\nRegSVMRBFCpredAUC <- performance(RegSVMRBFCpred,measure = \"auc\")  \nRegSVMRBFCpredAUC@y.values\nRegSVMRBFCC<-ksvm(x=cbind(Fare,Age),y=Survived,data=titanic_train,kernel=\"rbfdot\",type=\"C-svc\",C=714,scaled=c(),prob.model=TRUE) \nRegSVMRBFCCProb<-predict(RegSVMRBFCC,titanic_train2,type=\"probabilities\") \n\ntable(Survived2,RegSVMRBFCCProb[,2]>0.396)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f999f09277585eea7cbbc4c4a336f89ef708b739"},"cell_type":"code","source":"attach(titanic_train)\nvariablesCam <- as.data.frame(model.matrix(~Survived+Pclass+Sex+Age+SibSp+Parch+Fare+Sex*Age+Sex*SibSp+Sex*Parch+Sex*Fare+Pclass*Age+Pclass*SibSp+Pclass*Parch+Pclass*Fare))\n\n# primer arbol de clasificacion con Sexmale+Age+SibSp+Parch+Fare\nSurvived2<-factor(variablesCam$Survived,levels=0:1,labels=c(\"No\",\"Si\"))\n\nTrainD<-rpart(Survived2~Sexmale+Age+SibSp+Parch+Fare,method=\"class\",data=variablesCam,control=rpart.control(cp=0))\nprintcp(TrainD)\nsummary(TrainD)\nplot.new()\nplotcp(TrainD)\n# podando el arbol en el minimo valor cp por validacion cruzada\ncpxerrormin<-TrainD$cptable[which.min(TrainD$cptable[,4]),1]\nTrainDPrune<-prune(TrainD,cp=cpxerrormin)\nTrainDPruneParty<-as.party(TrainDPrune)\nplot(TrainDPruneParty)\n# podando el arbol en el minimo valor cp con dev standard\nTrainDPruneD1<-prune(TrainD,cp=0.024137931)\nTrainDPruneD1Party<-as.party(TrainDPruneD1)\nplot(TrainDPruneD1Party)\n# utilizando el arbol en test\ndata(titanic_test)\ndetach(titanic_train)\nattach(titanic_test)\nVarSpread <- as.data.frame(model.matrix(~Pclass+Sex+Age+SibSp+Parch+Fare))\n\nVarSpread<-VarSpread[,-1]\nPredTrainDPruneD1<-predict(TrainDPruneD1,newdata=VarSpread)\n","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}