{"cells":[{"metadata":{"_uuid":"62744ad9fe081a2740748b6f8008c2e82d9fd5e6","_execution_state":"idle","trusted":true},"cell_type":"code","source":"# This R environment comes with all of CRAN preinstalled, as well as many other helpful packages\n# The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats\n# For example, here's several helpful packages to load in \n\nlibrary(ggplot2) # Data visualization\nlibrary(readr) # CSV file I/O, e.g. the read_csv function\nlibrary(caret)\nlibrary(pROC)\n\n\n# Input data files are available in the \"../input/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nsystem(\"ls ../input\")\n\n# Any results you write to the current directory are saved as output.","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"de83c7fd234c2c3b1e7c58b871ac7fcf4b5b982f"},"cell_type":"code","source":"train <- read_csv('../input/train.csv')\ntest  <- read_csv('../input/test.csv')","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"c4a508c8f68421cd6366d7327df7d75f4a942dac"},"cell_type":"code","source":"library('dplyr') # data manipulation\nlibrary('ggplot2') # Data Visualization\nlibrary('ggthemes') # Data Visualization\n\noptions(warn = -1)\n# load train.csv\ntrain <- read.csv('../input/train.csv', stringsAsFactors = F)\n# load test.csv\ntest  <- read.csv('../input/test.csv', stringsAsFactors = F)\n# combine them as a whole\ntest$Survived <- NA\nfull <- rbind(train,test)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9683e223f0629116001d0dee459b7bc97e6e7d32"},"cell_type":"code","source":"head(train)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"6b9afd69983d27f633d0ece8dd49849646107e61"},"cell_type":"code","source":"#overall survival rate\nsum(train$Survived)/length(train$Survived)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f87a4dccae3068ea1bdd69e8bd2f84af90d62a01"},"cell_type":"code","source":"# Sex vs Survived\n#male fare the worst\nggplot(train[1:891,], aes(Sex, fill = factor(Survived))) + \n  geom_bar(stat = \"count\", position = 'dodge')+\n  theme_few() +\n  xlab(\"Sex\") +\n  ylab(\"Count\") +\n  scale_fill_discrete(name = \"Survived\") + \n  ggtitle(\"Sex vs Survived\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"6d491fe6f244664c54347bf26aaa51b1eb2fe092"},"cell_type":"code","source":"#Pclass vs Survived \nggplot(train[1:891,], aes(Pclass,fill = factor(Survived))) +\n  geom_bar(stat = \"count\")+\n  xlab('Pclass') +\n  ylab(\"Count\") +\n  scale_fill_discrete(name = \" Survived\") + \n  ggtitle(\"Pclass vs Survived\")+\n  theme_few()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"489ea0f352d0b38b8f3293248fd1ef43e21edfae"},"cell_type":"code","source":"set.seed(2415784)\ntrain <- read.csv('../input/train.csv', stringsAsFactors = F)\ntest  <- read.csv('../input/test.csv', stringsAsFactors = F)\n\ntotal  <- bind_rows(train, test) \n\n# Extract title based on proximiy to . in string\ntrain$Title <- gsub('(.*, )|(\\\\..*)', '', train$Name) \ntable(train$Title)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"89872126316955da617988cf8ae4294f99aaa85c"},"cell_type":"code","source":"#no Rev survived\nsum(train$Survived[train$Title=='Rev'])","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9d6732571a8627942604b2869b2ff96282a8c10a"},"cell_type":"code","source":"#survival rate for people whose `Age` is empty\nsum(subset(train,is.na(Age))$Survived)/length(subset(train,is.na(Age))$Survived)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a45a38aa7beefb601d974adb6324190bf19312ff"},"cell_type":"code","source":"#Embarked vs Survived\nggplot(train[1:891,], aes(Embarked,fill = factor(Survived))) +\n  geom_bar(stat = \"count\")+\n  xlab('Embarked') +\n  ylab(\"Count\") +\n  scale_fill_discrete(name = \" Survived\") + \n  ggtitle(\"Embarked vs Survived\")+\n  theme_few()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"531e2c59dc17159945cf59cbb82ccfb8049dd57b"},"cell_type":"code","source":"full$Child[full$Age < 12] <- 'Child'\nfull$Child[full$Age >= 12] <- 'Adult'\n\nggplot(full[1:891,][full[1:891,]$Child == 'Child', ], aes(Pclass,fill = factor(Survived))) +\n  geom_bar(stat = \"count\")+\n  xlab('Pclass') +\n  ylab(\"Count\") +\n  scale_fill_discrete(name = \" Survived\") + \n  ggtitle(\"Pclass vs Survived\")+\n  theme_few()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3933076bf2e22e0a98a1cdd110630cc7f7edbb8d"},"cell_type":"code","source":"#Sadly, Capt Edward Smith went down with the ship. \ntrain$Survived[train$Title == 'Capt']","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"41a9cd168fcf86f8cd551b57f9b76d6365394767"},"cell_type":"code","source":"max(train$Fare[train$Survived == 0])\ntrain$Name[train$Fare == max(train$Fare[train$Survived == 0])]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"afcc40077e162d374205d4284659f8a9c91d0705"},"cell_type":"code","source":"# Family Size\n# It help when Family size == 2, 3, 4 and hurt when Family size exceeds 4.\nfull$Fsize <- full$SibSp + full$Parch + 1\n\nggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +\n  geom_bar(stat='count', position='dodge') +\n  scale_x_continuous(breaks=c(1:11)) +\n  xlab('Family Size') +\n  ylab(\"Count\") +\n  theme_few()+\n  scale_fill_discrete(name = \"Survived\") + \n  ggtitle(\"Family Size vs Survived\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"135e97d0f29bd17bf4eccf83e53c2e84ae5d3419"},"cell_type":"code","source":"# Step 1: Load + Clean Data\nTrain = read.csv(\"../input/train.csv\")\nTest = read.csv(\"../input/test.csv\")\n\nstr(Train)\nsummary(Train)\n\n# fill in missing values for Age\nTrain$Age[is.na(Train$Age)] = mean(Train$Age, na.rm = TRUE)\nTest$Age[is.na(Test$Age)] = mean(Test$Age, na.rm = TRUE)\n\n\n# Step 2: Create DF of independent/dependent variables\nnonvars = c(\"PassengerId\",\"Name\",\"Ticket\",\"Embarked\",\"Cabin\")\nTrain = Train[,!(names(Train) %in% nonvars)]\nstr(Train)\n\n\n# Step 3: Build a Logistic Regression Model\nTitanicLog1 = glm(Survived~., data = Train, family = binomial)\nsummary(TitanicLog1)\n\n# Step 4: Revise Model\nTitanicLog2 = glm(Survived ~ . - Parch, data = Train, family = binomial)\nsummary(TitanicLog2)\n\nTitanicLog3 = glm(Survived ~ . - Parch - Fare, data = Train, family = binomial)\nsummary(TitanicLog3)\n\n\n# Step 5: Test Accuracy of Model on Training Data\n# predicted result of regression\nans_logit = rep(NA,891)\nfor(i in 1:891){\n  ans_logit[i] =as.integer(round(TitanicLog2$fitted.values[[i]],0))\n}","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"91f09687e6b85ba2770f5a1d1e11e8f25aade2e9"},"cell_type":"code","source":"# check result\nmean(ans_logit == train$Survived)\ntable(ans_logit)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"c611050450eb6f99c70c5e9c262803a1e844da1f"},"cell_type":"code","source":"table(train$Survived)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"2f6222a56e1d67c3b750581ae01000eed5af140d"},"cell_type":"code","source":"conf_mat <- caret::confusionMatrix(as.factor(ans_logit), as.factor(train$Survived))  #convert int to factor\nconf_mat","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"e21d29097276447b620e36acb678d1a4f20e51f5"},"cell_type":"code","source":"library(ROCR) \nauc(train$Survived, ans_logit)\npred <- prediction(train$Survived, ans_logit)\nperf <- performance(pred, \"tpr\", \"fpr\")\nplot(perf)","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}