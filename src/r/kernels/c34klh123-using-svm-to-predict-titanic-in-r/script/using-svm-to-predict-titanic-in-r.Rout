
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(ggplot2)
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> library(e1071)
> library(mice)

Attaching package: ‘mice’

The following objects are masked from ‘package:base’:

    cbind, rbind

Warning message:
package ‘mice’ was built under R version 3.6.2 
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:dplyr’:

    combine

The following object is masked from ‘package:ggplot2’:

    margin

> library(vcd)
Loading required package: grid
Warning message:
package ‘vcd’ was built under R version 3.6.2 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train<-read.csv("../input/train.csv")
> test<-read.csv("../input/test.csv")
> full<-bind_rows(train,test) 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> head(full)
  PassengerId Survived Pclass
1           1        0      3
2           2        1      1
3           3        1      3
4           4        1      1
5           5        0      3
6           6        0      3
                                                 Name    Sex Age SibSp Parch
1                             Braund, Mr. Owen Harris   male  22     1     0
2 Cumings, Mrs. John Bradley (Florence Briggs Thayer) female  38     1     0
3                              Heikkinen, Miss. Laina female  26     0     0
4        Futrelle, Mrs. Jacques Heath (Lily May Peel) female  35     1     0
5                            Allen, Mr. William Henry   male  35     0     0
6                                    Moran, Mr. James   male  NA     0     0
            Ticket    Fare Cabin Embarked
1        A/5 21171  7.2500              S
2         PC 17599 71.2833   C85        C
3 STON/O2. 3101282  7.9250              S
4           113803 53.1000  C123        S
5           373450  8.0500              S
6           330877  8.4583              Q
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full<-full[,-c(1,9)]
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full$family<-full$SibSp+full$Parch+1
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full$Familyd[full$family==1]<-"single"
> full$Familyd[full$family>1&full$family<5]<-"small"
> full$Familyd[full$family>=5]<-"large"
> full$Familyd<-as.factor(full$Familyd)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> apply(full,2,function(x)length(which(is.na(x))))
Survived   Pclass     Name      Sex      Age    SibSp    Parch     Fare 
     418        0        0        0      263        0        0        1 
   Cabin Embarked   family  Familyd 
       0        0        0        0 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> apply(full,2,function(x)length(which(x=="")))
Survived   Pclass     Name      Sex      Age    SibSp    Parch     Fare 
       0        0        0        0        0        0        0        0 
   Cabin Embarked   family  Familyd 
    1014        2        0        0 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> head(full$Name)
[1] Braund, Mr. Owen Harris                            
[2] Cumings, Mrs. John Bradley (Florence Briggs Thayer)
[3] Heikkinen, Miss. Laina                             
[4] Futrelle, Mrs. Jacques Heath (Lily May Peel)       
[5] Allen, Mr. William Henry                           
[6] Moran, Mr. James                                   
1307 Levels: Abbing, Mr. Anthony ... Zakarian, Mr. Ortin
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full$Name<-gsub("(.*, )|(\\. .*)","",full$Name)
> table(full$Name)

        Capt          Col          Don         Dona           Dr     Jonkheer 
           1            4            1            1            8            1 
        Lady        Major       Master         Miss         Mlle          Mme 
           1            2           61          260            2            1 
          Mr          Mrs           Ms          Rev          Sir the Countess 
         757          197            2            8            1            1 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> a_name<-c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don','Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
> full$Name[full$Name=="Mlle"]<-"Miss"
> full$Name[full$Name=="Ms"]<-"Miss"
> full$Name[full$Name=="Mme"]<-"Mrs"
> full$Name[full$Name %in% a_name]<-"Rare"
> table(full$Name)

Master   Miss     Mr    Mrs   Rare 
    61    264    757    198     29 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> age_plot<-ggplot(full,aes(Age))+
+   geom_histogram(col="black",fill="white")+
+   labs(title="Have NA's")
> set.seed(123)
> age<-full[!is.na(full$Age),]
> age_pre<-mice(full[,-1],method = "rf")

 iter imp variable
  1   1  Age  Fare
  1   2  Age  Fare
  1   3  Age  Fare
  1   4  Age  Fare
  1   5  Age  Fare
  2   1  Age  Fare
  2   2  Age  Fare
  2   3  Age  Fare
  2   4  Age  Fare
  2   5  Age  Fare
  3   1  Age  Fare
  3   2  Age  Fare
  3   3  Age  Fare
  3   4  Age  Fare
  3   5  Age  Fare
  4   1  Age  Fare
  4   2  Age  Fare
  4   3  Age  Fare
  4   4  Age  Fare
  4   5  Age  Fare
  5   1  Age  Fare
  5   2  Age  Fare
  5   3  Age  Fare
  5   4  Age  Fare
  5   5  Age  Fare
Warning message:
Number of logged events: 51 
> mice_output <- complete(age_pre)
> full$Age<-mice_output$Age
> age_plot1<-ggplot(full,aes(Age))+
+   geom_histogram(col="black",fill="white")+
+   labs(title="Remove NA's")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> length(which(is.na(full$Age)))
[1] 0
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> gridExtra::grid.arrange(age_plot,age_plot1)
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Warning message:
Removed 263 rows containing non-finite values (stat_bin). 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full[which(is.na(full$Fare)),]$Fare<-mice_output[which(is.na(full$Fare)),]$Fare
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> length(which(is.na(full$Fare)))
[1] 0
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full$Embarked<-as.factor(full$Embarked)
> embarked<-naiveBayes(Embarked~.-Embarked,full[,-c(1,9)])
> full[which(full$Embarked==""),]$Embarked<-predict(embarked,full$Embarked)[which(full$Embarked=="")]
Warning messages:
1: In predict.naiveBayes(embarked, full$Embarked) :
  Type mismatch between training and new data for variable 'Pclass'. Did you use factors with numeric labels for training, and numeric values for new data?
2: In predict.naiveBayes(embarked, full$Embarked) :
  Type mismatch between training and new data for variable 'Age'. Did you use factors with numeric labels for training, and numeric values for new data?
3: In predict.naiveBayes(embarked, full$Embarked) :
  Type mismatch between training and new data for variable 'SibSp'. Did you use factors with numeric labels for training, and numeric values for new data?
4: In predict.naiveBayes(embarked, full$Embarked) :
  Type mismatch between training and new data for variable 'Parch'. Did you use factors with numeric labels for training, and numeric values for new data?
5: In predict.naiveBayes(embarked, full$Embarked) :
  Type mismatch between training and new data for variable 'Fare'. Did you use factors with numeric labels for training, and numeric values for new data?
6: In predict.naiveBayes(embarked, full$Embarked) :
  Type mismatch between training and new data for variable 'family'. Did you use factors with numeric labels for training, and numeric values for new data?
> full$Embarked<-as.factor(as.character(full$Embarked))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> length(which(full$Embarked==""))
[1] 0
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> head(full$Cabin)
[1]      C85       C123          
187 Levels:  A10 A14 A16 A19 A20 A23 A24 A26 A31 A32 A34 A36 A5 A6 A7 ... F E57
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> length(which(full$Cabin==""))
[1] 1014
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full$Cabin<-as.character(full$Cabin)
> full$Cabin<-as.factor(sapply(full$Cabin,function(x)strsplit(x,"")[[1]][1]))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> head(full$Cabin)
[1] <NA> C    <NA> C    <NA> <NA>
Levels: A B C D E F G T
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ##classify data to two part: cabin have no NA, cabin are all NA
> cabin<-full[!is.na(full$Cabin),]
> cabin0<-full[is.na(full$Cabin),]
> 
> ##convert interger & character to factor(randomForest can only deal with num & factor)
> for(i in 1:ncol(cabin)){
+   if(is.integer(cabin[,i])){
+     cabin[,i]<-as.factor(cabin[,i])
+   }else if(is.character(cabin[,i])){
+     cabin[,i]<-as.factor(cabin[,i])
+   }
+ }
> for(i in 1:ncol(cabin0)){
+   if(is.integer(cabin0[,i])){
+     cabin0[,i]<-as.factor(cabin0[,i])
+   }else if(is.character(cabin0[,i])){
+     cabin0[,i]<-as.factor(cabin0[,i])
+   }
+ }
> 
> ##convert cabin and cabin0 with same levels in factor
> for(i in 1:ncol(cabin0)){
+   if(is.factor(cabin0[,i])){
+     levels(cabin0[,i])<-union(levels(cabin0[,i]),levels(cabin[,i]))
+   }
+ }
> for(i in 1:ncol(cabin)){
+   if(is.factor(cabin[,i])){
+     levels(cabin[,i])<-union(levels(cabin0[,i]),levels(cabin[,i]))
+   }
+ }
> 
> ##use randomForest to fill the NA in Cabin
> set.seed(1)
> ranavi0<-randomForest::randomForest(Cabin~.-Cabin,na.omit(cabin[,-1]))
> full[is.na(full$Cabin),]$Cabin<-predict(ranavi0,cabin0[,-c(1,9)])
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> length(which(is.na(full$Cabin)))
[1] 0
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> apply(full,2,function(x)length(which(is.na(x))))
Survived   Pclass     Name      Sex      Age    SibSp    Parch     Fare 
     418        0        0        0        0        0        0        0 
   Cabin Embarked   family  Familyd 
       0        0        0        0 
> apply(full,2,function(x)length(which(x=="")))
Survived   Pclass     Name      Sex      Age    SibSp    Parch     Fare 
       0        0        0        0        0        0        0        0 
   Cabin Embarked   family  Familyd 
       0        0        0        0 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train<-full[!is.na(full$Survived),]
> test<-full[is.na(full$Survived),]
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> dim(train)
[1] 891  12
> head(train)
  Survived Pclass Name    Sex Age SibSp Parch    Fare Cabin Embarked family
1        0      3   Mr   male  22     1     0  7.2500     F        S      2
2        1      1  Mrs female  38     1     0 71.2833     C        C      2
3        1      3 Miss female  26     0     0  7.9250     F        S      1
4        1      1  Mrs female  35     1     0 53.1000     C        S      2
5        0      3   Mr   male  35     0     0  8.0500     E        S      1
6        0      3   Mr   male  44     0     0  8.4583     F        Q      1
  Familyd
1   small
2   small
3  single
4   small
5  single
6  single
> str(train)
'data.frame':	891 obs. of  12 variables:
 $ Survived: int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass  : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name    : chr  "Mr" "Mrs" "Miss" "Mrs" ...
 $ Sex     : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age     : num  22 38 26 35 35 44 54 2 27 14 ...
 $ SibSp   : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch   : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Fare    : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin   : Factor w/ 8 levels "A","B","C","D",..: 6 3 6 3 5 6 5 6 7 6 ...
 $ Embarked: Factor w/ 3 levels "C","Q","S": 3 1 3 3 3 2 3 3 3 1 ...
 $ family  : num  2 2 1 2 1 1 1 5 3 2 ...
 $ Familyd : Factor w/ 3 levels "large","single",..: 3 3 2 3 2 2 2 1 3 3 ...
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> dim(test)
[1] 418  12
> head(test)
    Survived Pclass Name    Sex  Age SibSp Parch    Fare Cabin Embarked family
892       NA      3   Mr   male 34.5     0     0  7.8292     F        Q      1
893       NA      3  Mrs female 47.0     1     0  7.0000     F        S      2
894       NA      2   Mr   male 62.0     0     0  9.6875     E        Q      1
895       NA      3   Mr   male 27.0     0     0  8.6625     F        S      1
896       NA      3  Mrs female 22.0     1     1 12.2875     G        S      3
897       NA      3   Mr   male 14.0     0     0  9.2250     F        S      1
    Familyd
892  single
893   small
894  single
895  single
896   small
897  single
> str(test)
'data.frame':	418 obs. of  12 variables:
 $ Survived: int  NA NA NA NA NA NA NA NA NA NA ...
 $ Pclass  : int  3 3 2 3 3 3 3 2 3 3 ...
 $ Name    : chr  "Mr" "Mrs" "Mr" "Mr" ...
 $ Sex     : Factor w/ 2 levels "female","male": 2 1 2 2 1 2 1 2 1 2 ...
 $ Age     : num  34.5 47 62 27 22 14 30 26 18 21 ...
 $ SibSp   : int  0 1 0 0 1 0 0 1 0 2 ...
 $ Parch   : int  0 0 0 0 1 0 0 1 0 0 ...
 $ Fare    : num  7.83 7 9.69 8.66 12.29 ...
 $ Cabin   : Factor w/ 8 levels "A","B","C","D",..: 6 6 5 6 7 6 5 6 6 6 ...
 $ Embarked: Factor w/ 3 levels "C","Q","S": 2 3 2 3 3 3 2 3 1 3 ...
 $ family  : num  1 2 1 1 3 1 1 3 1 3 ...
 $ Familyd : Factor w/ 3 levels "large","single",..: 2 3 2 2 3 2 2 3 2 3 ...
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> my_mosaic<-function(file,xcolname,ycolname){
+   file<-file[,c(xcolname,ycolname)]          
+   cname<-c(xcolname,ycolname)                
+   a<-file[colnames(file)%in%cname]           
+   xname<-as.name(xcolname)         
+   yname<-as.name(ycolname)
+   prob<-signif(prop.table(table(a),1),digits = 2)
+   mosaic(prob,pop=F,shade = F,legend=T,rot_lables=c(0,90,0,0),
+          labeling_args = list(set_varnames=c(xname=xcolname,yname=ycolname)),
+          main = "Survived Rate")       
+   labeling_cells(text = prob,margin = 0)(prob) 
+ }
> 
> 
> bar_function<-function(x){
+   a<-as.data.frame(table(train[ ,x],factor(train[,"Survived"])))
+   ggplot(a,aes(Var1,Freq,fill=Var2))+
+   geom_bar(stat="identity",position ="dodge")+
+   geom_text(aes(x=Var1,y=Freq,label=Freq),position = position_dodge(width = .8),vjust=-.2)+
+   labs(x=x,y="Freq",fill="Survived")
+ }
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> bar_function("Pclass")
> my_mosaic(train,"Pclass","Survived")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> bar_function("Sex")
> my_mosaic(train,"Sex","Survived")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> bar_function("Name")
> my_mosaic(train,"Name","Survived")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(train,aes(as.factor(Survived),Age))+
+   geom_violin(aes(fill=Survived))+
+   labs(x="Survived")+
+   geom_hline(aes(yintercept=10),lty=2,lwd=1,col="red")+
+   scale_y_continuous(breaks = seq(0,80,10))+
+   theme(legend.position = "none")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> bar_function("family")
> 
> my_mosaic(train,"Familyd","Survived")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(train,aes(as.factor(Survived),Fare))+
+   geom_violin(aes(fill=Survived))+
+   labs(x="Survived")+
+   geom_hline(aes(yintercept=max(train[train$Survived==0,]$Fare)),lty=2,lwd=1,col="red")+
+   scale_y_continuous(breaks=c(seq(0,200,100),max(train[train$Survived==0,]$Fare),seq(300,500,100)))+
+   theme(legend.position = "none")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(train,aes(Fare))+
+   geom_histogram(data=train[train$Survived==0,],aes(fill="red"),colour="red",binwidth = 20,alpha=.3)+
+   geom_histogram(data=train[train$Survived==1,],aes(fill="blue"),colour="blue",binwidth = 20,alpha=.3)+
+   geom_vline(aes(xintercept=50),lty=2,lwd=.5)+
+   scale_colour_manual(name="Survived",values = c("red"="red","blue"="blue"),labels=c("red"=0,"blue"=1))+
+   scale_fill_manual(name="Survived",values = c("red"="red","blue"="blue"),labels=c("red"=0,"blue"=1))+
+   scale_x_continuous(breaks = c(0,50,seq(100,500,100)))+
+   labs(title="Fare by Embarked & Survived")+
+   theme(plot.title = element_text(hjust = .5))+
+   facet_grid(.~Embarked)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ##change Survived to factor
> full$Survived<-as.factor(full$Survived)
> 
> 
> for(i in c(1,2,3,6,7,10)){
+   if(is.integer(full[,i])){
+     full[,i]<-as.factor(full[,i])
+   }else if(is.character(full[,i])){
+     full[,i]<-as.factor(full[,i])
+   }
+ }
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ##
> levels(full$Pclass)<-seq(-1,1,length.out = length(levels(full$Pclass)))
> levels(full$Sex)<-seq(-1,1,length.out = length(levels(full$Sex))) 
> levels(full$SibSp)<-seq(-1,1,length.out = length(levels(full$SibSp)))
> levels(full$Parch)<-seq(-1,1,length.out = length(levels(full$Parch)))
> levels(full$Cabin)<-seq(-1,1,length.out = length(levels(full$Cabin)))
> levels(full$Embarked)<-seq(-1,1,length.out = length(levels(full$Embarked)))
> levels(full$Name)<-seq(-1,1,length.out = length(levels(full$Name)))
> levels(full$Familyd)<-seq(-1,1,length.out = length(levels(full$Familyd)))
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train<-full[!is.na(full$Survived),]
> test<-full[is.na(full$Survived),]
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> dim(train)
[1] 891  12
> dim(test)
[1] 418  12
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> head(train)
  Survived Pclass Name Sex Age              SibSp Parch    Fare
1        0      1    0   1  22 -0.666666666666667    -1  7.2500
2        1     -1  0.5  -1  38 -0.666666666666667    -1 71.2833
3        1      1 -0.5  -1  26                 -1    -1  7.9250
4        1     -1  0.5  -1  35 -0.666666666666667    -1 53.1000
5        0      1    0   1  35                 -1    -1  8.0500
6        0      1    0   1  44                 -1    -1  8.4583
               Cabin Embarked family Familyd
1  0.428571428571428        1      2       1
2 -0.428571428571429       -1      2       1
3  0.428571428571428        1      1       0
4 -0.428571428571429        1      2       1
5  0.142857142857143        1      1       0
6  0.428571428571428        0      1       0
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> set.seed(123)
> train_train<-train[sample(seq_len(nrow(train)),floor(.8*nrow(train))),]
> set.seed(123)
> train_test<-train[-sample(seq_len(nrow(train)),floor(.8*nrow(train))),]
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> svm_test<-tune.svm(Survived~.-Survived,data=train_train,gamma = 2^c(-5:5),cost = 2^c(-5:5))
> plot(svm_test)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ##the accurancy with each gamma and cost 
> d<-double(nrow(svm_test$performances))
> for(i in 1:nrow(svm_test$performances)){
+   b_svm<-svm(Survived~.-Survived,train_train,gamma=svm_test$performances[i,1],cost=svm_test$performances[i,2],type="C-classification")
+   b<-table(train_test[,1],predict(b_svm,train_test[,-1]))
+   d[i]<-sum(diag(b))/sum(b)
+ }
> 
> 
> e<-data.frame(gamma=svm_test$performances[1],cost=svm_test$performances[2],error=svm_test$performances[3],dispersion=svm_test$performances[4],accrancy=d)
> e<-e[order(e$acc,decreasing = T),]
> head(e,10)  
      gamma cost     error dispersion  accrancy
91  0.12500    8 0.1924883 0.03360093 0.8435754
111 0.03125   32 0.1713419 0.01720265 0.8435754
112 0.06250   32 0.1938772 0.03467104 0.8435754
81  0.25000    4 0.1952856 0.03865658 0.8379888
101 0.06250   16 0.1839984 0.02932840 0.8379888
102 0.12500   16 0.1995305 0.03901404 0.8379888
60  0.50000    1 0.1938772 0.03402937 0.8324022
80  0.12500    4 0.1797731 0.02459867 0.8324022
90  0.06250    8 0.1685250 0.01605003 0.8324022
113 0.12500   32 0.2008998 0.03902396 0.8324022
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> svm_test1<-tune.svm(Survived~.-Survived,data=train_train,gamma = seq(0,1,.05),cost = seq(.05,4,.25))
> plot(svm_test1)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ##the accurancy with each gamma and cost 
> d1<-double(nrow(svm_test1$performances))
> for(i in 1:nrow(svm_test1$performances)){
+   b_svm1<-svm(Survived~.-Survived,train_train,gamma=svm_test1$performances[i,1],cost=svm_test1$performances[i,2],type="C-classification")
+   b1<-table(train_test[,1],predict(b_svm1,train_test[,-1]))
+   d1[i]<-sum(diag(b1))/sum(b1)
+ }
> 
> 
> e1<-data.frame(gamma=svm_test1$performances[1],cost=svm_test1$performances[2],error=svm_test1$performances[3],dispersion=svm_test1$performances[4],accrancy=d1)
> e1<-e1[order(e1$acc,decreasing = T),]
> head(e1,10)
    gamma cost     error dispersion  accrancy
278  0.20 3.30 0.1869523 0.04038904 0.8435754
299  0.20 3.55 0.1883607 0.03993704 0.8435754
319  0.15 3.80 0.1911776 0.04211443 0.8435754
320  0.20 3.80 0.1869523 0.04093113 0.8435754
57   0.70 0.55 0.2080008 0.04820029 0.8379888
58   0.75 0.55 0.2107981 0.04392819 0.8379888
59   0.80 0.55 0.2107981 0.04392819 0.8379888
196  0.30 2.30 0.1939750 0.04138034 0.8379888
217  0.30 2.55 0.1897496 0.03709221 0.8379888
236  0.20 2.80 0.1897887 0.04569207 0.8379888
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> final<-svm(Survived~.-Survived,train,gamma=.05,cost=1.80,type="C-classification")
> Survived<-predict(final,test[,-1])
> solution <- data.frame(PassengerId = 892:1309, Survived = Survived)
> write.csv(solution, file = 'svm_predicton.csv', row.names = F)
> 
> 
> proc.time()
   user  system elapsed 
269.640   4.104 274.187 
