
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> #data wrangling library
> library(tidyverse)
â”€â”€ [1mAttaching packages[22m â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 1.3.0 â”€â”€
[32mâœ“[39m [34mggplot2[39m 3.3.2     [32mâœ“[39m [34mpurrr  [39m 0.3.4
[32mâœ“[39m [34mtibble [39m 3.0.1     [32mâœ“[39m [34mdplyr  [39m 1.0.2
[32mâœ“[39m [34mtidyr  [39m 1.1.0     [32mâœ“[39m [34mstringr[39m 1.4.0
[32mâœ“[39m [34mreadr  [39m 1.3.1     [32mâœ“[39m [34mforcats[39m 0.5.0
â”€â”€ [1mConflicts[22m â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€
[31mx[39m [34mdplyr[39m::[32mfilter()[39m masks [34mstats[39m::filter()
[31mx[39m [34mdplyr[39m::[32mlag()[39m    masks [34mstats[39m::lag()
Warning messages:
1: package â€˜ggplot2â€™ was built under R version 3.6.2 
2: package â€˜tibbleâ€™ was built under R version 3.6.2 
3: package â€˜tidyrâ€™ was built under R version 3.6.2 
4: package â€˜purrrâ€™ was built under R version 3.6.2 
5: package â€˜dplyrâ€™ was built under R version 3.6.2 
> library(tibble)
> 
> #collecting data
> files_directory <- list.files(path = "../input")
> 
> train_data <- as_data_frame(read_csv('../input/train.csv'))
Parsed with column specification:
cols(
  PassengerId = [32mcol_double()[39m,
  Survived = [32mcol_double()[39m,
  Pclass = [32mcol_double()[39m,
  Name = [31mcol_character()[39m,
  Sex = [31mcol_character()[39m,
  Age = [32mcol_double()[39m,
  SibSp = [32mcol_double()[39m,
  Parch = [32mcol_double()[39m,
  Ticket = [31mcol_character()[39m,
  Fare = [32mcol_double()[39m,
  Cabin = [31mcol_character()[39m,
  Embarked = [31mcol_character()[39m
)
Warning message:
`as_data_frame()` is deprecated as of tibble 2.0.0.
Please use `as_tibble()` instead.
The signature and semantics have changed, see `?as_tibble`.
[90mThis warning is displayed once every 8 hours.[39m
[90mCall `lifecycle::last_warnings()` to see where this warning was generated.[39m 
> test_data <- as_data_frame(read_csv('../input/test.csv'))
Parsed with column specification:
cols(
  PassengerId = [32mcol_double()[39m,
  Pclass = [32mcol_double()[39m,
  Name = [31mcol_character()[39m,
  Sex = [31mcol_character()[39m,
  Age = [32mcol_double()[39m,
  SibSp = [32mcol_double()[39m,
  Parch = [32mcol_double()[39m,
  Ticket = [31mcol_character()[39m,
  Fare = [32mcol_double()[39m,
  Cabin = [31mcol_character()[39m,
  Embarked = [31mcol_character()[39m
)
> reality <- as_data_frame(read_csv('../input/gender_submission.csv'))
Parsed with column specification:
cols(
  PassengerId = [32mcol_double()[39m,
  Survived = [32mcol_double()[39m
)
> 
> train_data$set <- "train"
> test_data$set  <- "test"
> test_data$Survived <- NA
> 
> full_data <- rbind(train_data, test_data)
> full_data_unedited <- rbind(train_data, test_data)
> 
> #check for missing value for possible feature (non-output)
> 
> full_data %>% 
+     select(-Survived) %>%
+         summarize_all(funs(sum(is.na(.))/n())) -> miss_valperc
Warning message:
`funs()` is deprecated as of dplyr 0.8.0.
Please use a list of either functions or lambdas: 

  # Simple named list: 
  list(mean = mean, median = median)

  # Auto named with `tibble::lst()`: 
  tibble::lst(mean, median)

  # Using lambdas
  list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))
[90mThis warning is displayed once every 8 hours.[39m
[90mCall `lifecycle::last_warnings()` to see where this warning was generated.[39m 
> 
> miss_valperc <- gather(miss_valperc, key="feature", value="missing_pct")
> 
> #loading the ggplot2
> library(ggplot2)
> 
> #visualize missing data
> ggplot(miss_valperc, aes(x = feature, y = missing_pct)) + geom_bar(stat = "identity", fill = "blue") + coord_flip()
> 
> full_data %>% select(-Cabin) -> full_data
> 
> glimpse(full_data)
Rows: 1,309
Columns: 12
$ PassengerId [3m[90m<dbl>[39m[23m 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17â€¦
$ Survived    [3m[90m<dbl>[39m[23m 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, â€¦
$ Pclass      [3m[90m<dbl>[39m[23m 3, 1, 3, 1, 3, 3, 1, 3, 3, 2, 3, 1, 3, 3, 3, 2, 3, 2, 3, â€¦
$ Name        [3m[90m<chr>[39m[23m "Braund, Mr. Owen Harris", "Cumings, Mrs. John Bradley (Fâ€¦
$ Sex         [3m[90m<chr>[39m[23m "male", "female", "female", "female", "male", "male", "maâ€¦
$ Age         [3m[90m<dbl>[39m[23m 22, 38, 26, 35, 35, NA, 54, 2, 27, 14, 4, 58, 20, 39, 14,â€¦
$ SibSp       [3m[90m<dbl>[39m[23m 1, 1, 0, 1, 0, 0, 0, 3, 0, 1, 1, 0, 0, 1, 0, 0, 4, 0, 1, â€¦
$ Parch       [3m[90m<dbl>[39m[23m 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 5, 0, 0, 1, 0, 0, â€¦
$ Ticket      [3m[90m<chr>[39m[23m "A/5 21171", "PC 17599", "STON/O2. 3101282", "113803", "3â€¦
$ Fare        [3m[90m<dbl>[39m[23m 7.2500, 71.2833, 7.9250, 53.1000, 8.0500, 8.4583, 51.8625â€¦
$ Embarked    [3m[90m<chr>[39m[23m "S", "C", "S", "S", "S", "Q", "S", "S", "S", "C", "S", "Sâ€¦
$ set         [3m[90m<chr>[39m[23m "train", "train", "train", "train", "train", "train", "trâ€¦
> 
> full_data %>% select(-PassengerId) -> full_data
> 
> #counting the percentage of output 0 and 1
> full_data %>% 
+     filter(set == 'train') %>%
+         count(Survived) %>%
+             mutate(percentage = n/sum(n)) -> y_ratio
> 
> y_ratio
[90m# A tibble: 2 x 3[39m
  Survived     n percentage
     [3m[90m<dbl>[39m[23m [3m[90m<int>[39m[23m      [3m[90m<dbl>[39m[23m
[90m1[39m        0   549      0.616
[90m2[39m        1   342      0.384
> 
> full_data %>% 
+     count(Pclass) 
[90m# A tibble: 3 x 2[39m
  Pclass     n
   [3m[90m<dbl>[39m[23m [3m[90m<int>[39m[23m
[90m1[39m      1   323
[90m2[39m      2   277
[90m3[39m      3   709
> 
> full_data <- full_data %>% 
+     mutate(Pclass = factor(Pclass, levels = c(1, 2, 3), labels = c("First", "Second", "Third"))) 
> 
> class(full_data$Pclass)
[1] "factor"
> 
> full_data %>%
+     mutate(title = gsub("^.*, (.*?)\\..*$", "\\1", Name)) -> full_data
> 
> full_data %>%
+     count(title)
[90m# A tibble: 18 x 2[39m
   title            n
   [3m[90m<chr>[39m[23m        [3m[90m<int>[39m[23m
[90m 1[39m Capt             1
[90m 2[39m Col              4
[90m 3[39m Don              1
[90m 4[39m Dona             1
[90m 5[39m Dr               8
[90m 6[39m Jonkheer         1
[90m 7[39m Lady             1
[90m 8[39m Major            2
[90m 9[39m Master          61
[90m10[39m Miss           260
[90m11[39m Mlle             2
[90m12[39m Mme              1
[90m13[39m Mr             757
[90m14[39m Mrs            197
[90m15[39m Ms               2
[90m16[39m Rev              8
[90m17[39m Sir              1
[90m18[39m the Countess     1
> 
> # Assigning obvious title to relevant major category
> full_data$title[full_data$title == 'Mlle'] <- 'Miss' 
> full_data$title[full_data$title == 'Ms']  <- 'Miss'
> full_data$title[full_data$title == 'Mme'] <- 'Mrs' 
> 
> #Assign the rest to Honored People / Important People
> ordinary_ppl <- list('Mlle','Ms','Mme','Mr','Mrs','Miss') 
> full_data$title[!(full_data$title %in% ordinary_ppl)] <- 'Honored_Important'
> 
> #count the distribution of title
> full_data %>% count(title)
[90m# A tibble: 4 x 2[39m
  title                 n
  [3m[90m<chr>[39m[23m             [3m[90m<int>[39m[23m
[90m1[39m Honored_Important    90
[90m2[39m Miss                264
[90m3[39m Mr                  757
[90m4[39m Mrs                 198
> 
> full_data %>% 
+     mutate(title = factor(title, levels = c('Honored_Important','Mr','Mrs','Miss'))) -> full_data
> 
> full_data %>%
+     count(Sex)
[90m# A tibble: 2 x 2[39m
  Sex        n
  [3m[90m<chr>[39m[23m  [3m[90m<int>[39m[23m
[90m1[39m female   466
[90m2[39m male     843
> 
> full_data %>% 
+     mutate(Sex = factor(Sex, levels = c('male', 'female'))) -> full_data
> 
> full_data %>%
+     mutate(Age = ifelse(is.na(Age), round(mean(Age, na.rm = TRUE)), Age)) -> full_data
> 
> #categorizing data
> full_data <- full_data %>%
+     mutate(age_cat = factor(case_when(Age < 13 ~ "Children",
+                               Age >= 13 & Age < 18 ~ "Teen",
+                               Age >= 18 & Age <= 55 ~ "Adult",
+                               Age > 55 ~ "Elder"), levels = c('Children', 'Teen', 'Adult', 'Elder'))) 
> 
> #take a look at its distribution
> full_data %>% count(age_cat)
[90m# A tibble: 4 x 2[39m
  age_cat      n
  [3m[90m<fct>[39m[23m    [3m[90m<int>[39m[23m
[90m1[39m Children    94
[90m2[39m Teen        60
[90m3[39m Adult     [4m1[24m096
[90m4[39m Elder       59
> 
> full_data %>%
+     mutate(Family_inship = SibSp + Parch + 1) -> full_data
> 
> #categorizing
> full_data <- full_data %>%
+     mutate(Family_inship = factor(case_when(Family_inship == 1 ~ "Alone",
+                                            Family_inship >= 2 & Family_inship <=5 ~ "Small",
+                                            Family_inship >5 ~ "Big"), levels = c("Alone", "Small", "Big")))
> 
> #how its distributed
> full_data %>%
+     count(Family_inship)
[90m# A tibble: 3 x 2[39m
  Family_inship     n
  [3m[90m<fct>[39m[23m         [3m[90m<int>[39m[23m
[90m1[39m Alone           790
[90m2[39m Small           459
[90m3[39m Big              60
> 
> #categorizing
> 
> # make category for ticket by count
> ticket_count <- full_data %>%
+         count(Ticket) %>%
+             mutate(ticket_for = factor(case_when(n == 1 ~ "Personal",
+                                                   n >= 2 & n<=5 ~"Small group",
+                                                 n>5 ~ "Big group"),
+                                       levels = c('Personal', 'Small group', 'Big group')))
> #merge
> full_data <- full_data %>%
+         inner_join(ticket_count, by = 'Ticket')
> 
> #how its distributed
> full_data %>%
+     count(ticket_for)
[90m# A tibble: 3 x 2[39m
  ticket_for      n
  [3m[90m<fct>[39m[23m       [3m[90m<int>[39m[23m
[90m1[39m Personal      713
[90m2[39m Small group   510
[90m3[39m Big group      86
> 
> full_data %>% select(-Fare) -> full_data
> 
> full_data <- full_data %>%
+         mutate(Embarked = ifelse(is.na(Embarked),'S',Embarked))
> 
> #categorizing
> full_data <- full_data %>%
+     mutate(Embarked = factor(Embarked, levels = c('C', 'Q', 'S')))
> 
> #See how its distributed
> full_data %>%
+     count(Embarked)
[90m# A tibble: 3 x 2[39m
  Embarked     n
  [3m[90m<fct>[39m[23m    [3m[90m<int>[39m[23m
[90m1[39m C          270
[90m2[39m Q          123
[90m3[39m S          916
> 
> full_data <- full_data %>%
+         select(Survived,Pclass, title, Sex, age_cat, Family_inship, ticket_for, Embarked, set )
> 
> #take a look at summary of our result in wrangling the data
> summary(full_data)
    Survived         Pclass                  title         Sex     
 Min.   :0.0000   First :323   Honored_Important: 90   male  :843  
 1st Qu.:0.0000   Second:277   Mr               :757   female:466  
 Median :0.0000   Third :709   Mrs              :198               
 Mean   :0.3838                Miss             :264               
 3rd Qu.:1.0000                                                    
 Max.   :1.0000                                                    
 NA's   :418                                                       
     age_cat     Family_inship       ticket_for  Embarked     set           
 Children:  94   Alone:790     Personal   :713   C:270    Length:1309       
 Teen    :  60   Small:459     Small group:510   Q:123    Class :character  
 Adult   :1096   Big  : 60     Big group  : 86   S:916    Mode  :character  
 Elder   :  59                                                              
                                                                            
                                                                            
                                                                            
> 
> #changing output (Survived) variable into categorical
> full_data %>%
+     mutate(Survived = factor(Survived, levels = c(0, 1, NA), labels = c("Not Survived", "Survived"))) -> full_data
> 
> #subset
> full_data %>% filter(set == 'train') -> train_data
> 
> #using chi square to evaluate
> Pclass_eff <- chisq.test(train_data$Pclass, train_data$Survived)
> Pclass_eff

	Pearson's Chi-squared test

data:  train_data$Pclass and train_data$Survived
X-squared = 102.89, df = 2, p-value < 2.2e-16

> 
> #visualizing both variable using barplot
> train_data %>%
+     ggplot(aes(x = Pclass, fill = Survived)) + geom_bar(position = "fill") + ylab("Pclass %")
> 
> #using chi square to evaluate
> title_eff <- chisq.test(train_data$title, train_data$Survived)
> title_eff

	Pearson's Chi-squared test

data:  train_data$title and train_data$Survived
X-squared = 284.93, df = 3, p-value < 2.2e-16

> 
> #visualizing both variable using barplot
> train_data %>%
+     ggplot(aes(x = title, fill = Survived)) + geom_bar(position = "fill") + ylab("Title %")
> 
> #using chi square to evaluate
> sex_eff <- chisq.test(train_data$title, train_data$Survived)
> sex_eff

	Pearson's Chi-squared test

data:  train_data$title and train_data$Survived
X-squared = 284.93, df = 3, p-value < 2.2e-16

> 
> #visualizing both variable using barplot
> train_data %>%
+     ggplot(aes(x = Sex, fill = Survived)) + geom_bar(position = "fill") + ylab("Sex %")
> 
> #using chi square to evaluate
> acat_eff <- chisq.test(train_data$age_cat, train_data$Survived)
> acat_eff

	Pearson's Chi-squared test

data:  train_data$age_cat and train_data$Survived
X-squared = 15.173, df = 3, p-value = 0.001675

> 
> #visualizing both variable using barplot
> train_data %>%
+     ggplot(aes(x = age_cat, fill = Survived)) + geom_bar(position = "fill") + ylab("Age Category %")
> 
> #inspecting why elder is least prioritized 
> #by their title and Sex
> train_data %>% filter(age_cat == 'Adult' | age_cat == 'Elder') %>%
+     group_by(age_cat) %>%
+         count(title, Sex) %>% select(age_cat, title, Sex, n) %>% mutate(n_perc = n/sum(n))
[90m# A tibble: 9 x 5[39m
[90m# Groups:   age_cat [2][39m
  age_cat title             Sex        n  n_perc
  [3m[90m<fct>[39m[23m   [3m[90m<fct>[39m[23m             [3m[90m<fct>[39m[23m  [3m[90m<int>[39m[23m   [3m[90m<dbl>[39m[23m
[90m1[39m Adult   Honored_Important male      20 0.027[4m1[24m 
[90m2[39m Adult   Honored_Important female     3 0.004[4m0[24m[4m7[24m
[90m3[39m Adult   Mr                male     468 0.634  
[90m4[39m Adult   Mrs               female   116 0.157  
[90m5[39m Adult   Miss              female   131 0.178  
[90m6[39m Elder   Honored_Important male       4 0.1    
[90m7[39m Elder   Mr                male      27 0.675  
[90m8[39m Elder   Mrs               female     6 0.15   
[90m9[39m Elder   Miss              female     3 0.075  
> 
> #using chi square to evaluate
> famship_eff <- chisq.test(train_data$Family_inship, train_data$Survived)
> famship_eff

	Pearson's Chi-squared test

data:  train_data$Family_inship and train_data$Survived
X-squared = 66.008, df = 2, p-value = 4.64e-15

> 
> #visualizing both variable using barplot
> train_data %>%
+     ggplot(aes(x = Family_inship, fill = Survived)) + geom_bar(position = "fill") + ylab("Number of Family member in ship %")
> 
> #using chi square to evaluate
> ticket_eff <- chisq.test(train_data$ticket_for, train_data$Survived)
> ticket_eff

	Pearson's Chi-squared test

data:  train_data$ticket_for and train_data$Survived
X-squared = 84.367, df = 2, p-value < 2.2e-16

> 
> #visualizing both variable using barplot
> train_data %>%
+     ggplot(aes(x = ticket_for, fill = Survived)) + geom_bar(position = "fill") + ylab("Type ticket purchased %")
> 
> #using chi square to evaluate
> emb_eff <- chisq.test(train_data$Embarked, train_data$Survived)
> emb_eff

	Pearson's Chi-squared test

data:  train_data$Embarked and train_data$Survived
X-squared = 25.964, df = 2, p-value = 2.301e-06

> 
> #visualizing both variable using barplot
> train_data %>%
+     ggplot(aes(x = Embarked, fill = Survived)) + geom_bar(position = "fill") + ylab("Embarked on port %")
> 
> #omitting Embarked variable
> full_data <- full_data %>% select(-Embarked)
> 
> #this is the ration between minority and majority class
> y_ratio
[90m# A tibble: 2 x 3[39m
  Survived     n percentage
     [3m[90m<dbl>[39m[23m [3m[90m<int>[39m[23m      [3m[90m<dbl>[39m[23m
[90m1[39m        0   549      0.616
[90m2[39m        1   342      0.384
> 
> #load necessary package
> library(caret)
Loading required package: lattice

Attaching package: â€˜caretâ€™

The following object is masked from â€˜package:purrrâ€™:

    lift

> 
> #subset to get the training data
> train_data <- full_data %>% filter(set == 'train')
> 
> #we will use k-fold cross validation
> # Define training control
> set.seed(123)
> train.control <- trainControl(method = "repeatedcv", 
+                               number = 10, repeats = 3)
> 
> # Train the model
> model <- train(Survived ~ Pclass + title + Sex + age_cat + Family_inship + ticket_for, 
+                data = train_data, method = "rf", trControl = train.control)
> 
> # Summarize the results
> print(model)
Random Forest 

891 samples
  6 predictor
  2 classes: 'Not Survived', 'Survived' 

No pre-processing
Resampling: Cross-Validated (10 fold, repeated 3 times) 
Summary of sample sizes: 802, 802, 801, 801, 802, 802, ... 
Resampling results across tuning parameters:

  mtry  Accuracy   Kappa    
   2    0.8180756  0.6100873
   7    0.8158660  0.6002647
  13    0.8128864  0.5942486

Accuracy was used to select the optimal model using the largest value.
The final value used for the model was mtry = 2.
> 
> test_data <- full_data %>% filter (set == 'test')
> result <- predict(model, test_data)
> 
> # Write CSV in R
> write.csv(result, file = "newest_titanic.csv")
> 
> 
> 
> proc.time()
   user  system elapsed 
 29.953   1.045  31.137 
