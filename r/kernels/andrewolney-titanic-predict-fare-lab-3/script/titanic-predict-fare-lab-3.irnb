{"cells":[{"metadata":{"_uuid":"c346bb7e8ceed3f432b3661b665ab54a905bc020","_execution_state":"idle","trusted":true},"cell_type":"markdown","source":"# Titanic Predict Fare\n\nThe purpose of this notebook is to predict how much Titanic passengers paid for their fares\n\n## Variable descriptions\n\n- (P)class: Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd)\n- (s)urvival: Survival (0 = No; 1 = Yes)\n- (n)ame: Name\n- (s)ex: Sex\n- (a)ge: Age\n- (s)ibsp: Number of Siblings/Spouses Aboard\n- (p)arch: Number of Parents/Children Aboard\n- (t)icket: Ticket Number\n- (f)are: Passenger Fare (British pound)\n- (c)abin: Cabin\n- (e)mbarked: Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton)\n- (b)oat: Lifeboat\n- (b)ody: Body Identification Number\n- (h)ome.dest: Home/Destination\n\n### Notes\n\n- Pclass is a proxy for socio-economic status (SES) 1st ~ Upper; 2nd ~ Middle; 3rd ~ Lower\n- Age is in Years; Fractional if Age less than One (1). If the Age is estimated, it is in the form xx.5\n- Fare is in Pre-1970 British Pounds (). Conversion Factors: 1 = 12s = 240d and 1s = 20d\n\nWith respect to the family relation variables (i.e. sibsp and parch) some relations were ignored. The following are the definitions used for sibsp and parch.\n\n- Sibling: Brother, Sister, Stepbrother, or Stepsister of Passenger Aboard Titanic\n- Spouse: Husband or Wife of Passenger Aboard Titanic (Mistresses and Fiances Ignored)\n- Parent: Mother or Father of Passenger Aboard Titanic\n- Child: Son, Daughter, Stepson, or Stepdaughter of Passenger Aboard Titanic\n- Other family relatives excluded from this study include cousins, nephews/nieces, aunts/uncles, and in-laws. Some children traveled only with a nanny, therefore parch=0 for them. As well, some traveled with very close friends or neighbors in a village, however, the definitions do not support such relations.\n\n### Running code\n\n- In a notebook, you can run a single code cell by clicking in the cell and then hitting  the blue arrow to the left, or by clicking in the cell and pressing Shift+Enter. In a script, you can run code by highlighting the code you want to run and then clicking the blue arrow at the bottom of this window.\n\n\n## Install/Load Packages\n"},{"metadata":{"trusted":true,"_uuid":"e8b961cd5ab787c20944cf04f6b4492855ed66f0"},"cell_type":"code","source":"if(!require(\"pacman\") ) install.packages(\"pacman\")\npacman::p_load(tidyverse,corrgram,faraway,metaSEM,mgcv)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"cd60fc2a7acaff8abbcc5a032baa8692aba5df14"},"cell_type":"markdown","source":"## Load data"},{"metadata":{"trusted":true,"_uuid":"418bc9c64f485b56addc695871d246b8a9703760"},"cell_type":"code","source":"train <- read_csv(\n    '../input/train.csv',\n    col_types=cols(\n        pclass = col_factor(NULL),\n        survived = col_factor(NULL),\n        sex = col_factor(NULL),\n        ticket = col_factor(NULL),\n        cabin = col_factor(NULL),\n        embarked = col_factor(NULL),\n        boat = col_factor(NULL),\n        body = col_factor(NULL),\n        home.dest = col_factor(NULL)\n    )\n)\nproblems(train)\nsummary(train)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"a7a516f05685a5cdf6a51dd954a6b56b844c186e"},"cell_type":"markdown","source":"## Result\n\n- Lots of NAs!"},{"metadata":{"trusted":true,"_uuid":"ca71d23f57494e9323662590459bafc63302ae4f"},"cell_type":"code","source":"test <- read_csv(\n    '../input/test-fare.csv',\n    col_types=cols(\n        pclass = col_factor(NULL),\n        survived = col_factor(NULL),\n        sex = col_factor(NULL),\n        ticket = col_factor(NULL),\n        cabin = col_factor(NULL),\n        embarked = col_factor(NULL),\n        boat = col_factor(NULL),\n        body = col_factor(NULL),\n        home.dest = col_factor(NULL)\n    )\n)\nproblems(test)\nsummary(test)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"0362b7fe206ff2dcdf2d1e616918e845c991d4e8"},"cell_type":"markdown","source":"## Relevel Data"},{"metadata":{"trusted":true,"_uuid":"75fa238b1bb3f27c7c594f811fd8e52a66958810"},"cell_type":"code","source":"#for debug\nlapply(train,nlevels) %>% as.data.frame\n\ntest$fare <- NA\nmerged = rbind(train,test)\ntrain2 <- as.data.frame(train)\nfor( i in colnames(merged)){\n    if( is.factor(merged[[i]])) {\n        levels(train[[i]]) <- levels(merged[[i]])\n        levels(test[[i]]) <- levels(merged[[i]])\n    }\n}\n\n#for debug\nlapply(train,nlevels) %>% as.data.frame","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"2019b2922e27faf37f10ba02f772ad81baac2cfb"},"cell_type":"markdown","source":"## Visualize"},{"metadata":{"trusted":true,"_uuid":"a026e1b578a30a9b49f8b38f303770be18aeb3ca"},"cell_type":"code","source":"train.complete <- na.omit(train)\ntrain$log.fare <- log(1+train$fare)\ntrain$sqrt.fare <- sqrt(train$fare)\noptions(repr.plot.width=7, repr.plot.height=14)\nop <- par(no.readonly = TRUE)\npar(mfrow = c(4,2))\nhist(train$fare, main=\"Histogram of Fare\")\nboxplot(train$fare,main=\"Fare\")\nhist(train$log.fare, main=\"Histogram of Log Fare\")\nboxplot(train$log.fare,main=\"Log Fare\")\nhist(train$sqrt.fare, main=\"Histogram of Sqrt Fare\")\nboxplot(train$sqrt.fare,main=\"Sqrt Fare\")\ndotchart(train$fare,group=train$pclass, main=\"Fare by passenger class\")\nplot(train$pclass, train$sex, main=\"Fare by Age\")\npar(op)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a6b2d11a1570b2727ac7657cb65631ad43661d56"},"cell_type":"markdown","source":"## RESULT\n- Looks like log transform is a good idea\n- Pclass looks like a good predictor of fare"},{"metadata":{"trusted":true,"_uuid":"4bec82ab2c9a6fa8c3b26cc2a057eec4d406cb7a"},"cell_type":"markdown","source":"# Correlations"},{"metadata":{"trusted":true,"_uuid":"6b9092c590fcbd2427a8f017ef17da77352f38b1"},"cell_type":"code","source":"options(repr.plot.width=10,repr.plot.height=10)\ncorrgram(train, order=TRUE, lower.panel=panel.pts,text.panel=panel.txt,upper.panel=panel.shade)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"5569a0b4ee1a9b45ffe4afca55b348912def978f"},"cell_type":"markdown","source":"## RESULT\n\n- Missing correlations due to NAs\n- Log.fare has better correlations with parch and sibsp but worse with age\n\n### Force correlations even though NAs (potentially misleading)"},{"metadata":{"trusted":true,"_uuid":"1865ad8c7bc00d355e632fd02a178eae762c2a93"},"cell_type":"code","source":"train.int <- sapply(train[-3],as.integer) #drop name\ncor(train.int, use=\"pairwise.complete.obs\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"6238ec190961aa2076373231b75d1f8040ca7881"},"cell_type":"markdown","source":"## RESULT\n\n- More evidence of better correlations with log.fare\n- Age might be worth imputing for missing values since it seems an OK predictor\n\n## Colinearity\nWe use VIF to identify; goal is VIF < 3.0. NOTE VIF on factors is dubious, so this isn't a perfect test"},{"metadata":{"trusted":true,"_uuid":"11dc5e88961434ac27f71f90f39bad906003453f"},"cell_type":"code","source":"#colnames(train)\ndm= data.matrix(train[c(\"pclass\",\"survived\",\"sex\")]) #use columns of our model only\nfaraway::vif(dm)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"5bae27e4c7225672ca45b5e8ba704db64f1666eb"},"cell_type":"markdown","source":"## RESULT\n- VIF OK\n- Could transform these factors to numeric and test again as another check (again, a flawed one)\n\n## Models"},{"metadata":{"trusted":true,"_uuid":"3b2d5b5f6daa2c13d4fe4ece0967ff0e62a6fb0c"},"cell_type":"code","source":"lm1 <- lm( log.fare ~ pclass + survived + sex, data=train)\nsummary(lm1)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"bad1cfe16825708a50573eb91dfbd7a139ad7728"},"cell_type":"code","source":"#Type 3 ANOVA in R\ndrop1(lm1,.~.,test=\"F\") #do single term deletions and calculate f-statistic p values from those","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"7805390bb5f5516893bbc04f394e695d02592e3d"},"cell_type":"markdown","source":"## RESULT\n- Log transform is good (in class we didn't use transform and $R^2$ was .38\n- Survived is garbage. From a prediction standpoint, we should remove it"},{"metadata":{"trusted":true,"_uuid":"d71b631f126fb1b7a41fb9ceddb5fa3fa91cbaf5"},"cell_type":"code","source":"#Special syntax for dropping terms\nlm1 <- update(lm1, . ~ . -survived) \nsummary(lm1)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"c3de5da69ce603460223be887da8f267b455aff4"},"cell_type":"markdown","source":"### Model Checking\n\n- Homogeneity\n    - Plot standardized residuals against fitted\n    - If spread is not even, then violated\n    - Either transform outcome variable or use GLS\n- Normality\n    - Histogram of residuals\n    - If non-normal, transformation may be needed\n- Independence : plot residuals against each predictor\n    - Use a different model to account for dependence"},{"metadata":{"trusted":true,"_uuid":"4582dd854b410c6378ef39eac3145841fb1881f5"},"cell_type":"code","source":"op <- par(mfrow = c(2,2))\nplot(lm1)\npar(op)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"c72351475ca99916cbd01d716c2b0a9dd9fb9bf8"},"cell_type":"markdown","source":"## RESULT\n\n- Not too bad; definitely better than the non log transformed model in class\n- Some extreme points are hurting the fit (off the QQ line)"},{"metadata":{"trusted":true,"_uuid":"65d57aacf0491045be003c078885b63b17f63dfe"},"cell_type":"code","source":"e <- rstandard(lm1)\ndf <- train #the lm excludes NA; so we must do so here as well\nop <- par(mfrow = c(2,2))\nhist(e)\nplot( e ~ df$pclass )\nplot( e ~ df$sex )\npar(op)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"26fecabd5fe6d2547947597782fae9ff6e6f8f42"},"cell_type":"markdown","source":"## RESULT\n- We see the same skew in the histogram\n- First class has more variability than others, though again this is helped by log tranform of fare\n\n## Submit to leaderboard\nNote you'd need to reverse the log transform for prediction. I leave that as an exercise (hint: make sure the base is the same as what we used for the log)"},{"metadata":{"trusted":true,"_uuid":"043505e4de410ad27d9272c93fc772bdcd9917d6"},"cell_type":"code","source":"predictions <- predict(lm1, newdata=test)\nhead( predictions )\ntest <- tibble::rowid_to_column(test, \"i\")\ndf.submission <- tbl_df(data.frame('Id' = as.character(test$Id), 'Estimated' = as.character(predictions)) ) #disable scientific notation, which throws off scoring\nwrite_csv( df.submission, 'submission.csv')","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"af47902c62a5d7e67c2d5cbf0b179452b823dba0"},"cell_type":"markdown","source":"## GAM fun\nMaybe pclass is nonlinear? Let's fit a spline."},{"metadata":{"trusted":true,"_uuid":"1bd8160aec8e9cbd08f81a421875deddd54ecaa7"},"cell_type":"code","source":"train$pclass.int = as.numeric(levels(train$pclass))[train$pclass]\ngam1 <- gam( log.fare ~ s(pclass.int,bs=\"cs\",k=2)  + sex, data=train)\nsummary(gam1)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"293a1ec04ed45853c38062f65992b512b965ff4a"},"cell_type":"markdown","source":"## RESULT\n- Hmm, maybe, but not really better in terms of $R^2$"},{"metadata":{"trusted":true,"_uuid":"415bf8804e17e9e2d63e7b1750cb5fb307c614af"},"cell_type":"code","source":"options(repr.plot.width=7, repr.plot.height=7)\nplot.gam(gam1)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"ad886acf007bbb19a8bbfdcd1df69c153b98999f"},"cell_type":"markdown","source":"## RESULT\n- Nope, really looks like just a line\n\n### Diagnositics"},{"metadata":{"trusted":true,"_uuid":"f21592ac62aaeda0db436c639d086b3f031790a6"},"cell_type":"code","source":"op <- par(mfrow = c(2,2))\ngam.check(gam1)\npar(op)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"dfb83e9f759d84080e8e47a388ca93775e09499a"},"cell_type":"markdown","source":"## RESULT\n- Not really any improvement\n\n## Significance of spline\nSince the two models are nested (we can set the spline to zero and then the two models are equivalent), we can do an anova test on the models to see if the spline is significant"},{"metadata":{"trusted":true,"_uuid":"6d90ddfcec89d9c089545b5b902862b04e6bfc23"},"cell_type":"code","source":"anova(lm1,gam1)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"8cab488be279915e37bfbaf30ade230dc18405b7"},"cell_type":"markdown","source":"## RESULT\n- It was significant when the dependent was fare, but not significant when we used log.fare\n- This appears to be a decent example of how using a log transformation helps keep you in a linear regression world, which you probably want to do rather than go to a more complicated model like GAM."},{"metadata":{"trusted":true,"_uuid":"fe06eba97350cfd9661c604bc484739f6dc47259"},"cell_type":"code","source":"","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}