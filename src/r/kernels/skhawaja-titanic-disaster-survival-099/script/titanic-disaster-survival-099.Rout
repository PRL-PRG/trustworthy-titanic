
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # Load packages
> library(mice)

Attaching package: ‘mice’

The following objects are masked from ‘package:base’:

    cbind, rbind

Warning message:
package ‘mice’ was built under R version 3.6.2 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:dplyr’:

    combine

> library(arulesViz) # visualizing association rules
Loading required package: arules
Loading required package: Matrix

Attaching package: ‘arules’

The following object is masked from ‘package:dplyr’:

    recode

The following objects are masked from ‘package:base’:

    abbreviate, write

Loading required package: grid
Registered S3 method overwritten by 'seriation':
  method         from 
  reorder.hclust gclus
Warning message:
package ‘arules’ was built under R version 3.6.2 
> library(ggplot2) # visualization

Attaching package: ‘ggplot2’

The following object is masked from ‘package:randomForest’:

    margin

Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library(ggthemes) # visualization
> library(scales) # visualization
Warning message:
package ‘scales’ was built under R version 3.6.2 
> 
> #setwd("C:/DataScience/SU-DSC/Titanic/Data")
> 
> 
> # Load data
> train <- read.csv("../input/train.csv", stringsAsFactors = F)
> head(train)
  PassengerId Survived Pclass
1           1        0      3
2           2        1      1
3           3        1      3
4           4        1      1
5           5        0      3
6           6        0      3
                                                 Name    Sex Age SibSp Parch
1                             Braund, Mr. Owen Harris   male  22     1     0
2 Cumings, Mrs. John Bradley (Florence Briggs Thayer) female  38     1     0
3                              Heikkinen, Miss. Laina female  26     0     0
4        Futrelle, Mrs. Jacques Heath (Lily May Peel) female  35     1     0
5                            Allen, Mr. William Henry   male  35     0     0
6                                    Moran, Mr. James   male  NA     0     0
            Ticket    Fare Cabin Embarked
1        A/5 21171  7.2500              S
2         PC 17599 71.2833   C85        C
3 STON/O2. 3101282  7.9250              S
4           113803 53.1000  C123        S
5           373450  8.0500              S
6           330877  8.4583              Q
> 
> test  <- read.csv("../input/test.csv", stringsAsFactors = F)
> head(test)
  PassengerId Pclass                                         Name    Sex  Age
1         892      3                             Kelly, Mr. James   male 34.5
2         893      3             Wilkes, Mrs. James (Ellen Needs) female 47.0
3         894      2                    Myles, Mr. Thomas Francis   male 62.0
4         895      3                             Wirz, Mr. Albert   male 27.0
5         896      3 Hirvonen, Mrs. Alexander (Helga E Lindqvist) female 22.0
6         897      3                   Svensson, Mr. Johan Cervin   male 14.0
  SibSp Parch  Ticket    Fare Cabin Embarked
1     0     0  330911  7.8292              Q
2     1     0  363272  7.0000              S
3     0     0  240276  9.6875              Q
4     0     0  315154  8.6625              S
5     1     1 3101298 12.2875              S
6     0     0    7538  9.2250              S
> 
> t  <- bind_rows(train, test) # bind training & test data
> tail(t)
     PassengerId Survived Pclass                           Name    Sex  Age
1304        1304       NA      3 Henriksson, Miss. Jenny Lovisa female 28.0
1305        1305       NA      3             Spector, Mr. Woolf   male   NA
1306        1306       NA      1   Oliva y Ocana, Dona. Fermina female 39.0
1307        1307       NA      3   Saether, Mr. Simon Sivertsen   male 38.5
1308        1308       NA      3            Ware, Mr. Frederick   male   NA
1309        1309       NA      3       Peter, Master. Michael J   male   NA
     SibSp Parch             Ticket     Fare Cabin Embarked
1304     0     0             347086   7.7750              S
1305     0     0          A.5. 3236   8.0500              S
1306     0     0           PC 17758 108.9000  C105        C
1307     0     0 SOTON/O.Q. 3101262   7.2500              S
1308     0     0             359309   8.0500              S
1309     1     1               2668  22.3583              C
> 
> t[890,]
    PassengerId Survived Pclass                  Name  Sex Age SibSp Parch
890         890        1      1 Behr, Mr. Karl Howell male  26     0     0
    Ticket Fare Cabin Embarked
890 111369   30  C148        C
> t[980,]
    PassengerId Survived Pclass                    Name    Sex Age SibSp Parch
980         980       NA      3 O'Donoghue, Ms. Bridget female  NA     0     0
    Ticket Fare Cabin Embarked
980 364856 7.75              Q
> str(t)
'data.frame':	1309 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : chr  "male" "female" "female" "female" ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  "" "C85" "" "C123" ...
 $ Embarked   : chr  "S" "C" "S" "S" ...
> 
> #Variable Name | Description
> #--------------|-------------
> #Survived      | Survived (1) or died (0)
> #Pclass        | Passenger's class
> #Name          | Passenger's name
> #Sex           | Passenger's sex
> #Age           | Passenger's age
> #SibSp         | Number of siblings/spouses aboard
> #Parch         | Number of parents/children aboard
> #Ticket        | Ticket number
> #Fare          | Fare
> #Cabin         | Cabin
> #Embarked      | Port of embarkation
> 
> 
> ## Data cleaning and feature engineering
> 
> ## Passenger's name
> 
> # Grab title from passenger names
> t$Title <- gsub('(.*, )|(\\..*)', '', t$Name)
> 
> # Show title counts by sex
> table(t$Sex, t$Title)
        
         Capt Col Don Dona  Dr Jonkheer Lady Major Master Miss Mlle Mme  Mr Mrs
  female    0   0   0    1   1        0    1     0      0  260    2   1   0 197
  male      1   4   1    0   7        1    0     2     61    0    0   0 757   0
        
          Ms Rev Sir the Countess
  female   2   0   0            1
  male     0   8   1            0
> 
> # low frequency Titles can be combined as "rare" level
> 
> rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
> 
> # Also reassign mlle, ms, and mme accordingly
> t$Title[t$Title == 'Mlle']        <- 'Miss' 
> t$Title[t$Title == 'Ms']          <- 'Miss'
> t$Title[t$Title == 'Mme']         <- 'Mrs' 
> t$Title[t$Title %in% rare_title]  <- 'Rare Title'
> 
> # Show title counts by Sex again
> table(t$Sex, t$Title)
        
         Master Miss  Mr Mrs Rare Title
  female      0  264   0 198          4
  male       61    0 757   0         25
> 
> # Finally, grab surname from passenger name
> t$Surname <- sapply(t$Name, function(x) strsplit(x, split = '[,.]')[[1]][1])
> 
> 
> cat(paste('We have ', nlevels(factor(t$Surname)), ' unique Surnames onboard Titanic.'))
We have  875  unique Surnames onboard Titanic.> 
> 
> ## Do families sink or swim together?
> 
> # Now that we've taken care of splitting passenger name into some new variables, we can take it a step
> # further and make some new family variables. 
> # First we're going to make a **family size** variable based on number of siblings/spouse(s) 
> # (maybe someone has more than one spouse?) and number of children/parents. 
> 
> # Create a family size variable including the passenger themselves
> t$Fsize <- t$SibSp + t$Parch + 1
> 
> # Create a family variable 
> t$Family <- paste(t$Surname, t$Fsize, sep='_')
> 
> #What does our family size variable look like? To help us understand how it may relate to survival,
> #let's plot it among the training data.
> 
> par(mar=c(2, 2, 2, 1), mfrow=c(1,1)) # plot margins and area
> 
> # Use ggplot2 to visualize the relationship between family size & survival
> ggplot(t, aes(x = Fsize, fill = factor(Survived))) +
+   geom_bar(stat='count', position='dodge') +
+   scale_x_continuous(breaks=c(1:11)) +
+   labs(x = 'Family Size') + theme_few()
> 
> #We can see that there' s a survival penalty to singletons and those with family sizes above 4. 
> #We can collapse this variable into three levels which will be helpful since there are comparatively
> #fewer large families. Let's create a **discretized family size** variable.
> 
> t$FsizeD[t$Fsize == 1] <- 'singleton'
> t$FsizeD[t$Fsize < 5 & t$Fsize > 1] <- 'small'
> t$FsizeD[t$Fsize > 4] <- 'large'
> 
> # Show family size by survival using a mosaic plot
> mosaicplot(table(t$FsizeD, t$Survived), main='Family Size by Survival', shade=TRUE)
> 
> #The mosaic plot shows that we preserve our rule that there's a survival penalty among singletons and
> #large families, but a benefit for passengers in small families. I want to do something further with our age variable, but `r sum(is.na(full$Age))` rows have missing age values, so we will have to wait until after we address missingness.
> 
> ## Treat a few more variables ...
> 
> # **passenger cabin** variable including about their **deck**. Let's take a look.
> 
> # This variable appears to have a lot of missing values
> t$Cabin[1:50]
 [1] ""            "C85"         ""            "C123"        ""           
 [6] ""            "E46"         ""            ""            ""           
[11] "G6"          "C103"        ""            ""            ""           
[16] ""            ""            ""            ""            ""           
[21] ""            "D56"         ""            "A6"          ""           
[26] ""            ""            "C23 C25 C27" ""            ""           
[31] ""            "B78"         ""            ""            ""           
[36] ""            ""            ""            ""            ""           
[41] ""            ""            ""            ""            ""           
[46] ""            ""            ""            ""            ""           
> 
> # The first character is the deck. For example:
> strsplit(t$Cabin[2], NULL)[[1]]
[1] "C" "8" "5"
> 
> # Create a Deck variable. Get passenger deck A - F:
> t$Deck <- factor(sapply(t$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
> 
> 
> # There's more that likely could be done here including looking into cabins with multiple rooms listed 
> # (e.g., row 28: "C23 C25 C27"), but given the sparseness of the column we'll stop here.
> 
> # Missingness - Managing Empties and NA values  
> # Now we're ready to start exploring missing data and rectifying it through imputation. 
> # There are a number of different ways we could go about doing this. Given the small size of the dataset,
> # we probably should not opt for deleting either entire observations (rows) or variables (columns)
> # containing missing values. We're left with the option of either replacing missing values with a sensible
> # values given the distribution of the data, e.g., the mean, median or mode. 
> # Finally, we could go with prediction. We'll use both of the two latter methods and use visualization
> # for guidance.
> 
> ## Sensible value imputation
> 
> # Passengers 62 and 830 are missing Embarkment
> t[t$Embarked=="", ] 
    PassengerId Survived Pclass                                      Name
62           62        1      1                       Icard, Miss. Amelie
830         830        1      1 Stone, Mrs. George Nelson (Martha Evelyn)
       Sex Age SibSp Parch Ticket Fare Cabin Embarked Title Surname Fsize
62  female  38     0     0 113572   80   B28           Miss   Icard     1
830 female  62     0     0 113572   80   B28            Mrs   Stone     1
     Family    FsizeD Deck
62  Icard_1 singleton    B
830 Stone_1 singleton    B
> t[t$Ticket==113572, ] 
    PassengerId Survived Pclass                                      Name
62           62        1      1                       Icard, Miss. Amelie
830         830        1      1 Stone, Mrs. George Nelson (Martha Evelyn)
       Sex Age SibSp Parch Ticket Fare Cabin Embarked Title Surname Fsize
62  female  38     0     0 113572   80   B28           Miss   Icard     1
830 female  62     0     0 113572   80   B28            Mrs   Stone     1
     Family    FsizeD Deck
62  Icard_1 singleton    B
830 Stone_1 singleton    B
> 
> # Passengers 62 and 830 also seem to be having the same ticket number, but let's fix the empties first.
> cat(paste('We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid $', t[62, 'Fare'][[1]][1], 'and $', t[830, 'Fare'][[1]][1], 'respectively and their classes are', t[62, 'Pclass'][[1]][1], 'and', t[830, 'Pclass'][[1]][1], '. So from where did they embark?'))
We will infer their values for **embarkment** based on present data that we can imagine may be relevant: **passenger class** and **fare**. We see that they paid $ 80 and $ 80 respectively and their classes are 1 and 1 . So from where did they embark?> 
> # Get rid of our missing passenger IDs
> embark_fare <- t %>% filter(PassengerId != 62 & PassengerId != 830)
> 
> # Use ggplot2 to visualize embarkment, passenger class, & median fare
> ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
+   geom_boxplot() +
+   geom_hline(aes(yintercept=80), 
+              colour='red', linetype='dashed', lwd=2) +
+   scale_y_continuous(labels=dollar_format()) +  theme_few()
Warning message:
Removed 1 rows containing non-finite values (stat_boxplot). 
> 
> # The median fare for a first class passenger departing from Charbourg ('C') coincides nicely with the $80 paid
> # by our embarkment-deficient passengers. I think we can safely replace the NA values with 'C'.
> 
> # Since their fare was $80 for 1st class, they most likely embarked from 'C'
> t$Embarked[c(62, 830)] <- 'C'
> t[t$Ticket==113572, ] # confirm that Embarked has 'C' for our 2 passengers 
    PassengerId Survived Pclass                                      Name
62           62        1      1                       Icard, Miss. Amelie
830         830        1      1 Stone, Mrs. George Nelson (Martha Evelyn)
       Sex Age SibSp Parch Ticket Fare Cabin Embarked Title Surname Fsize
62  female  38     0     0 113572   80   B28        C  Miss   Icard     1
830 female  62     0     0 113572   80   B28        C   Mrs   Stone     1
     Family    FsizeD Deck
62  Icard_1 singleton    B
830 Stone_1 singleton    B
> 
> # We're close to fixing the handful of NA values here and there. 
> # Passenger on row 1044 has an NA Fare value.
> 
> 
> # Show row 1044
> t[1044, ]
     PassengerId Survived Pclass               Name  Sex  Age SibSp Parch
1044        1044       NA      3 Storey, Mr. Thomas male 60.5     0     0
     Ticket Fare Cabin Embarked Title Surname Fsize   Family    FsizeD Deck
1044   3701   NA              S    Mr  Storey     1 Storey_1 singleton <NA>
> 
> # This is a third class passenger who departed from Southampton ('S'). 
> # Let's visualize Fares among all others sharing their class and embarkment 
> #(n = `r nrow(t[full$Pclass == '3' & t$Embarked == 'S', ]) - 1`).
> 
> ggplot(t[t$Pclass == '3' & t$Embarked == 'S', ], 
+        aes(x = Fare)) +
+   geom_density(fill = '#99d6ff', alpha=0.4) + 
+   geom_vline(aes(xintercept=median(Fare, na.rm=T)),
+              colour='red', linetype='dashed', lwd=1) +
+   scale_x_continuous() +  theme_few()
Warning message:
Removed 1 rows containing non-finite values (stat_density). 
> 
> # From this visualization, it seems quite reasonable to replace the NA Fare value with median for their
> # class and embarkment which is { median(t[t$Pclass == '3' & t$Embarked == 'S', ]$Fare, na.rm = TRUE) }
> 
> # Replace missing fare value with median fare for class/embarkment
> t$Fare[1044] <- median(t[t$Pclass == '3' & t$Embarked == 'S', ]$Fare, na.rm = TRUE)
> 
> ## Predictive imputation
> # Finally, as we noted earlier, there are quite a few missing **Age** values in our data. 
> # We are going to get a bit more fancy in imputing missing age values. Why? Because we can. 
> # We will create a model predicting ages based on other variables.
> 
> # Show number of missing Age values
> sum(is.na(t$Age))
[1] 263
> 
> #We could definitely use `rpart` (recursive partitioning for regression) to predict missing ages, 
> #You can read more about multiple imputation using chained equations in r 
> # [here](http://www.jstatsoft.org/article/view/v045i03/v45i03.pdf) (PDF). 
> # Since we haven't done it yet, I'll first factorize the factor variables and then perform mice imputation.
> 
> 
> # Make variables factors into factors
> fac_vars <- c('PassengerId','Pclass','Sex','Embarked','Title','Surname','Family','FsizeD')
> 
> t[fac_vars] <- lapply(t[fac_vars], function(x) as.factor(x))
> 
> 
> 
> # Set a random seed
> set.seed(11)
> 
> # Perform mice imputation, excluding certain less-than-useful variables:
> mice_mod <- mice(t[, !names(t) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')], method='rf')

 iter imp variable
  1   1  Age  Deck
  1   2  Age  Deck
  1   3  Age  Deck
  1   4  Age  Deck
  1   5  Age  Deck
  2   1  Age  Deck
  2   2  Age  Deck
  2   3  Age  Deck
  2   4  Age  Deck
  2   5  Age  Deck
  3   1  Age  Deck
  3   2  Age  Deck
  3   3  Age  Deck
  3   4  Age  Deck
  3   5  Age  Deck
  4   1  Age  Deck
  4   2  Age  Deck
  4   3  Age  Deck
  4   4  Age  Deck
  4   5  Age  Deck
  5   1  Age  Deck
  5   2  Age  Deck
  5   3  Age  Deck
  5   4  Age  Deck
  5   5  Age  Deck
Warning message:
Number of logged events: 50 
> 
> # Save the complete output 
> mice_output <- complete(mice_mod)
> 
> 
> # Let's compare the results we get with the original distribution of passenger ages to ensure that nothing has gone completely awry.
> 
> # Plot age distributions
> par(mfrow=c(1,2))
> hist(t$Age, freq=F, main='Age: Original Data', 
+      col='blue', ylim=c(0,0.04), border = "white")
> hist(mice_output$Age, freq=F, main='Age: MICE Output', 
+      col='dodgerblue', ylim=c(0,0.04), border="white")
> 
> # Things look good, so let's replace our age vector in the original data with the output from the `mice` model.
> 
> # Replace Age variable from the mice model.
> t$Age <- mice_output$Age
> 
> # Confirm number of missing Age values
> sum(is.na(t$Age)) # very cool
[1] 0
> 
> 
> # We've finished imputing values for all variables that we care about for now! 
> # Now that we have a complete Age variable, there are just a few finishing touches I'd like to make. 
> # We can use Age to do just a bit more feature engineering ...
> 
> 
> ## Feature Engineering: Round 2
> 
> # Now that we know everyone's age, we can create a couple of new age-dependent variables: 
> # **Child** and **Mother**. A child will simply be someone under 18 years of age and a mother is 
> # a passenger who is
> # 1) female, 
> # 2) is over 16, (I doubt that in 1912 first-time mothers in UK were above 18!)
> # 3) has more than 0 children (no kidding!), and 
> # 4) does not have the title 'Miss'.
> 
> # First we'll look at the relationship between age & survival
> ggplot(t[1:891,], aes(Age, fill = factor(Survived))) + 
+   geom_histogram() + 
+   # I include Sex since we know (a priori) it's a significant predictor
+   facet_grid(.~Sex) + 
+   theme_few()
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> 
> # Create the column Age Adult/Child, and indicate whether child or adult
> t$AgeAC[t$Age < 18] <- 'Child'
> t$AgeAC[t$Age >= 18] <- 'Adult'
> 
> # Show counts
> table(t$AgeAC, t$Survived)
       
          0   1
  Adult 479 272
  Child  70  70
> 
> # Looks like being a child doesn't hurt, but it's not going to necessarily save you either! 
> # We will finish off our feature engineering by creating the **Mother** variable. 
> # Maybe we can hope that mothers are more likely to have survived on the Titanic.
> 
> # Adding Mother variable
> t$Mother <- 'Not Mother'
> t$Mother[t$Sex == 'female' & t$Parch > 0 & t$Age > 18 & t$Title != 'Miss'] <- 'Mother'
> 
> # Show counts
> table(t$Mother, t$Survived)
            
               0   1
  Mother      16  39
  Not Mother 533 303
> 
> # Finish by factorizing our two new factor variables
> t$AgeAC  <- factor(t$AgeAC)
> t$Mother <- factor(t$Mother)
> 
> 
> # data seems pretty complete and clean.  Confirm just in case.
> md.pattern(t)
    PassengerId Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked
204           1      1    1   1   1     1     1      1    1     1        1
687           1      1    1   1   1     1     1      1    1     1        1
91            1      1    1   1   1     1     1      1    1     1        1
327           1      1    1   1   1     1     1      1    1     1        1
              0      0    0   0   0     0     0      0    0     0        0
    Title Surname Fsize Family FsizeD AgeAC Mother Survived Deck     
204     1       1     1      1      1     1      1        1    1    0
687     1       1     1      1      1     1      1        1    0    1
91      1       1     1      1      1     1      1        0    1    1
327     1       1     1      1      1     1      1        0    0    2
        0       0     0      0      0     0      0      418 1014 1432
> 
> # Wow! We have finally finished treating all of the relevant missing values in the Titanic dataset 
> # which has included some fancy imputation with `mice`. We have also successfully created several new 
> # variables which we hope will help us build a model which reliably predicts survival. 
> 
> # Prediction
> # At last we're ready to predict who survives among passengers of the Titanic based on variables that we carefully curated and treated for missing values. For this, we will rely on the `randomForest` classification algorithm; we spent all that time on imputation, after all.
> 
> ## Split into training & test sets
> 
> #Our first step is to split the data back into the original test and training sets.
> 
> # Split the data back into a train set and a test set
> train <- t[1:891,]
> test <- t[892:1309,]
> 
> 
> 
> ## Building the model 
> 
> #We then build our model using `randomForest` on the training set.
> 
> # Set a random seed
> set.seed(1942)
> 
> # Build the model (note: not all possible variables are used)
> rf_m <- randomForest(factor(Survived) ~ Pclass + Sex + Age + AgeAC +SibSp + Parch + Fare + Embarked + Title + FsizeD + Mother, data = train)
> 
> # Show model error
> #par(mfrow=c(1,1))
> plot(rf_m, ylim=c(0,0.36))
> legend('topright', colnames(rf_m$err.rate), col=1:3, fill=1:3)
> 
> 
> # The black line shows the overall error rate which falls below 20%. 
> # The red and green lines show the error rate for 'died' and 'survived' respectively. 
> # We can see that right now we're much more successful predicting death than we are survival. 
> 
> ## Variable importance
> 
> #Let's look at relative variable importance by plotting the mean decrease in Gini calculated across all trees.
> 
> # Get importance
> importance    <- importance(rf_m)
> varImportance <- data.frame(Variables = row.names(importance), 
+                             Importance = round(importance[ ,'MeanDecreaseGini'],2))
> 
> # Create a rank variable based on importance
> rankImportance <- varImportance %>%
+   mutate(Rank = paste0('#',dense_rank(desc(Importance))))
> 
> 
> # Use ggplot2 to visualize the relative importance of variables
> ggplot(rankImportance, aes(x = reorder(Variables, Importance), 
+                            y = Importance, fill = Importance)) +
+   geom_bar(stat='identity') + 
+   geom_text(aes(x = Variables, y = 0.5, label = Rank),
+             hjust=0, vjust=0.55, size = 4, colour = 'red') +
+   labs(x = 'Variables') +
+   coord_flip() + 
+   theme_few()
> 
> 
> # Whoa, glad we made our title variable! 
> # It has the highest relative importance out of all of our predictor variables. 
> # I think I'm most surprised to see that passenger class fell to `r rankImportance[rankImportance$Variable == 'Pclass', ]$Rank`, but maybe that's just bias coming from watching the movie Titanic too many times as a kid.
> 
> ## Prediction!
> 
> # We're ready for the final step --- making our prediction! 
> # When we finish here, we could iterate through the preceding steps making tweaks as we go or fit the data using different models or use different combinations of variables to achieve better predictions. But this is a good starting (and stopping) point for me now.
> 
> 
> # Predict using the test set
> prediction <- predict(rf_m, test)
> 
> # Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)
> solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
> 
> # Write the solution to file
> write.csv(solution, file = 'titanic-survival-arkitekt.csv', row.names = F)
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
 26.192   0.635  27.107 
