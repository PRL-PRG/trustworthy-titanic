{"cells":[{"metadata":{"_uuid":"1d7bed77042ad4d8906cadb3c9210cd2f3c345a3","_execution_state":"idle","trusted":true,"_kg_hide-input":false,"_kg_hide-output":false},"cell_type":"markdown","source":"**Methodology**\n1.\tImport training and test data frame from respective csv files. Combine the two data frames together by appending the test data frame after the training data frame (adding a dummy \"Survived\" column filled with -1 so that the column titles on both data frames match). The resulting data frame will be called \"combined_df\".\n2.\tPerform exploratory data analysis using ggplot. \n3.\tFrom the \"Name\" column, extract the title of each passenger and assign the values into a new \"Title\" column in \"combined_df\". \n4.\tClean up the titles column: \n    - Assign all instances of \"Mlle.\" and \"Ms.\" as \"Miss.\"\n    - Assign all instances of \"Mme.\" as \"Mrs. \"\n    - Assign any titles that are not \"Miss.\", \"Master.\", \"Mr.\", or \"Mrs.\" as \"Rare.\"\n    - This would result in 5 bins for titles: \"Miss.\", \"Master.\", \"Mr.\", \"Mrs.\", and \"Rare.\"\n5.\tRemove the \"Ticket\", \"Cabin\", and \"Names\" column as they are all either missing information, irrelevant, and/or have necessary information extracted already.  \n6.\tProduce a data frame \"age_summ\" that has the mean, median, standard deviation, min, and max ages for each \"Pclass\" and \"Sex\" group (6 total groups as there are 3 classes and 2 genders).\n7.\tFor each combination of \"Pclass\" and \"Sex\" in \"combined_df\" in the \"Age\" column with missing values, fill the missing value using the parameters for that combination in \"age_summ\" and a truncated normal distribution. \n8.\tBin the \"Age\" column into 5 bins at intervals of 16.\n9.\tCreate a new \"FamilySize\" column that is the sum of the \"Parch\" and \"SibSp\" column. \n10.\tBin the \"FamilySize\" column into 3 bins, one for family size of 1 (travelling alone), one for family size of two, and one for family size greater than 2. \n11.\tRemove the \"Parch\" and \"SibSp\" column.\n12.\tReplace the missing value in the \"Embarked\" column with the most common occurrence (\"S\", based on the training model)\n13.\tReplace the missing value in the \"Fare\" column with the median fare price for Pclass = 3 (based on the training model).\n14.\tMap the \"Title\", \"Sex\", and \"Embarked\" columns to discrete numerical values. \n15.\tBin the \"Fare\" column into 4 bins at the following intervals: [0,7.91], (7.91, 14.45], (14.45, 31], (31,Infinity]. \n16.\tRun random forest to fit the \"Survived\" variable in terms of \"Pclass\", \"Sex\", \"Age\", \"Fare\", \"Embarked\", \"Title\", and \"FamilySize\" from the training model, with 2000 trees. \n\n**Final score: 0.80861**"},{"metadata":{"trusted":true,"_uuid":"2e12c00b4299f57b7e68a338de6690b0c457187c"},"cell_type":"code","source":"library(\"readr\")\nlibrary(\"ggplot2\")\nlibrary(\"randomForest\")\nlibrary(\"tibble\")\nlibrary(\"stringr\")\nlibrary(\"dplyr\")\nlibrary(\"truncnorm\")\n\ntrain_df <- read_csv(\"../input/train.csv\")\ntest_df <- read_csv(\"../input/test.csv\")\n\n#-1 used in Survived column for test_df, bind train_df after test_df\ncombined_df <- test_df %>%\n  add_column(Survived = -1.0, .after = \"PassengerId\") %>% \n  rbind(train_df)\n\n# extract title from name for both dfs\ncombined_df$Title <- str_extract(combined_df$Name, pattern = \"([A-Za-z]+)\\\\.\")\n\n# making titles more consistent\ncombined_df$Title[combined_df$Title %in% c(\"Mlle.\",\"Ms.\")] <- \"Miss.\"\ncombined_df$Title[combined_df$Title %in% c(\"Mme.\")] <- \"Mrs.\"\ncombined_df$Title <- str_replace(combined_df$Title, c(\"^((?!Master.|Miss.|Mr.|Mrs.).)*$\"), \"Rare.\")\n\n# # remove ticket, cabin, and Name columns on both dfs\ncombined_df <- subset(combined_df, select = -c(Ticket, Cabin, Name))\n\n#calculate age data in train_df; consider using both data set\nage_summ <- train_df %>% \n  group_by(Pclass, Sex) %>% \n  summarize(mean = mean(Age, na.rm = TRUE), sd = sd(Age, na.rm = TRUE), \n            min = min(Age, na.rm = TRUE), max = max(Age, na.rm = TRUE))\n\n#calculate the number of NAs with Age for each group\nnum_NA <- combined_df %>%\n  group_by(Pclass, Sex) %>%\n  summarize(count = sum(is.na(Age)))\n\n#replce NA values within each group with a random number generated from a truncated normal \n#distribution based on age_summ\n\nk <- 1\n# i is Pclass, j is sex \nfor (i in 1:3)\n{\n  for (j in c(\"female\",\"male\")){\n    combined_df$Age[combined_df$Pclass == i & \n                    combined_df$Sex == j & \n                    is.na(combined_df$Age)] <- rtruncnorm(num_NA[[k,3]], a = age_summ[[k,5]], \n                                                          b= age_summ[[k,6]], mean = age_summ[[k,3]], \n                                                          sd = age_summ[[k,4]])\n    k <- k+1\n  }\n}\n\n# bin age into 5 bins\ncombined_df$Age[combined_df$Age <= 16] <- 0\ncombined_df$Age[combined_df$Age > 16 & combined_df$Age <= 32] <- 1\ncombined_df$Age[combined_df$Age > 32 & combined_df$Age <= 48] <- 2\ncombined_df$Age[combined_df$Age > 48 & combined_df$Age <= 64] <- 3\ncombined_df$Age[combined_df$Age > 64] <- 4\n\n# bin family size into 3 bins\ncombined_df$FamilySize <- combined_df$Parch + combined_df$SibSp + 1\n\ncombined_df$FamilySize[combined_df$FamilySize <= 1] <- 0\ncombined_df$FamilySize[combined_df$FamilySize > 1 & combined_df$FamilySize <= 2] <- 1\ncombined_df$FamilySize[combined_df$FamilySize > 2] <- 2\n\n\n# drop Parch and SibSp columns\ncombined_df <- subset(combined_df, select = -c(Parch, SibSp))\n\n#Replace NA for embarked with most common occurrence \ncombined_df[419:1309,][is.na(combined_df$Embarked[419:1309]),]$Embarked <- \"S\"\n\n#convert categorical variables to numerical\ncombined_df$Title <- as.numeric(plyr::mapvalues(combined_df$Title, from = c(\"Mr.\", \"Miss.\", \"Mrs.\", \"Master.\", \"Rare.\"), to = c(1,2,3,4,5)))\ncombined_df$Sex <- as.numeric(plyr::mapvalues(combined_df$Sex, from = c(\"female\", \"male\"), to = c(1,0)))\ncombined_df$Embarked <- as.numeric(plyr::mapvalues(combined_df$Embarked, from = c(\"S\", \"C\", \"Q\"), to = c(0,1,2)))\n\n#use median Pclass = 3 fare for missing value in test data set\ncombined_df[1:418,][is.na(combined_df$Fare[1:418]),]$Fare <- median(combined_df[419:1309,][combined_df$Pclass[419:1309] == 3,]$Fare, na.rm = TRUE)\n\n# create fare bands\ncombined_df$Fare[combined_df$Fare <= 7.91] <- 0\ncombined_df$Fare[combined_df$Fare > 7.91 & combined_df$Fare <= 14.45] <- 1\ncombined_df$Fare[combined_df$Fare > 14.45 & combined_df$Fare <= 31] <- 2\ncombined_df$Fare[combined_df$Fare > 31] <- 3\n\n#run randomForest\nset.seed(415)\n\ntrain_df_Final <- subset(combined_df[419:1309,], select = -c(PassengerId))\ntest_df_Final <- subset(combined_df[1:418,], select = -c(Survived))\n\nfit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + Fare +\n                      Embarked + Title + FamilySize,\n                    data=train_df_Final, \n                    importance=TRUE, \n                    ntree=2000)\n\nprediction <- predict(fit, test_df_Final)\nsubmit <- data.frame(PassengerId = test_df_Final$PassengerId, Survived = prediction)\n\nwrite.csv(submit, file = \"submit.csv\", row.names = FALSE)\n\n\n","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}