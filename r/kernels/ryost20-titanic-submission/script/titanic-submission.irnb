{"cells":[{"metadata":{"_uuid":"4e1436c6e6c5287ef391ae3a08b4176dfabfb29c","_execution_state":"idle","trusted":true},"cell_type":"code","source":"## Importing packages\n\n# This R environment comes with all of CRAN and many other helpful packages preinstalled.\n# You can see which packages are installed by checking out the kaggle/rstats docker image: \n# https://github.com/kaggle/docker-rstats\n\nlibrary(tidyverse) # metapackage with lots of helpful functions\n\n## Running code\n\n# In a notebook, you can run a single code cell by clicking in the cell and then hitting \n# the blue arrow to the left, or by clicking in the cell and pressing Shift+Enter. In a script, \n# you can run code by highlighting the code you want to run and then clicking the blue arrow\n# at the bottom of this window.\n\n## Reading in files\n\n# You can access files from datasets you've added to this kernel in the \"../input/\" directory.\n# You can see the files added to this kernel by running the code below. \n\nlist.files(path = \"../input\")\n\n## Saving data\n\n# If you save any files or images, these will be put in the \"output\" directory. You \n# can see the output directory by committing and running your kernel (using the \n# Commit & Run button) and then checking out the compiled version of your kernel.","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"331924a2dfa0ed5eed2c9e312f50e6f9bf4a4035"},"cell_type":"code","source":"# I like this library for Exploratory Data Analysis\nlibrary(DataExplorer)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"510a0edaa9b8c1ad5e7d22a8f6b654d5b6162ec0"},"cell_type":"code","source":"# Import the data into a data frame\ntraindf <- read_csv('../input/train.csv', col_types = ('nnfcfnn??n?f'))\n# I always think it's important to get a quick summary of the data\nsummary(traindf)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"d41c861010b1a3d5028f9a0c52025e9fc5663498"},"cell_type":"code","source":"# Let's look at the first few rows of data, just to see what we're dealing with\nhead(traindf)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"cc198baff62d65c57894c90c29caf3d1e223dc06"},"cell_type":"code","source":"# This will give us some very basic information about the data set\nplot_intro(traindf)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4b0f486effc99150803d7abe83b1407acc4b9db5"},"cell_type":"code","source":"# Since the last plot showed that we have some missing data, let's take a better look at what that data could be.\nplot_missing(traindf)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"689637f72973f02fb2a19d2a9b20854a28651bd1"},"cell_type":"code","source":"# Considering we're missing so much data from the Cabin column, I'm going to just drop it.\ntrimmed_df <- traindf\ntrimmed_df$Cabin = NULL\ntrimmed_df$Name = NULL\ntrimmed_df$Ticket = NULL\nstr(trimmed_df)\nplot_missing(trimmed_df)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8c868170c4aa8819be06919203a08930839afac9"},"cell_type":"code","source":"# This looks better. We still have some missing data, but it's much less than it was before. We'll figure out how to deal with the missing data going forward. \n# Some of it may just depend on whether or not we need that variable in our model\nlibrary(rpart)\nlibrary(rpart.plot)\nlibrary(C50)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"e212361aa59e620594f0ebd25f8cedbbc3d4c142"},"cell_type":"code","source":"# Let's just create a Logistic model first, just to see what it does. Ultimately, a decision tree will probably be better.\nlogit_model <- glm(Survived ~., data = trimmed_df, family = binomial(\"logit\"))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"11f9d0ae52d5078bb8f7c5947e05399be48bf772"},"cell_type":"code","source":"summary(logit_model)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"fc6a237895fe3a4b054d5af3624d8d3b05672a6f","scrolled":false},"cell_type":"code","source":"plot(logit_model)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"fa7d42bc3c9cf8fed3a16f82c6aadacd377bd929"},"cell_type":"code","source":"logit_predictions <- predict(logit_model, newdata = trimmed_df, type = \"response\")\nlibrary(caret)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"c5c1934ecfe4a8d2eebf951c5b20c714b85c96e6"},"cell_type":"code","source":"tree_model <- rpart(Survived ~., data = trimmed_df)\nsummary(tree_model)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"c08e5ffbfb361df6965369a87545950d9537ffe0"},"cell_type":"code","source":"rpart.plot(tree_model)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"cab091993331e520b990db9cba24d99afdace46c"},"cell_type":"code","source":"","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}