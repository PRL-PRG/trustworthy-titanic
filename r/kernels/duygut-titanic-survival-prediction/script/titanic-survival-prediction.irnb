{"cells":[{"metadata":{"_uuid":"069beaa9f8fa3e8afd35f1c4f89961b0b175a208","trusted":true},"cell_type":"markdown","source":"# Introduction and Motivation\n\nThe RMS Titanic was not only the largest ship at that time but also the largest man-made moving object in the world. It was the most deathful/fatal maritime disaster with over 1500 casualties. It is almost %68 of the total passengers and crew. There are several facts about the Titanic disaster. Such as;\n* An insufficient number of boats (20 out of 64 boats) that cause this huge number of deaths, \n* Most of the survivors being woman and children,\n* The most expensive first-class suites priced up to £870 in peak season (£79,000 today) according to Wikipedia. \n\nTitanic disaster is one of the most important catastrophes that data examination may provide details about survived and non-survived passenger characteristics. Thus, it is crucial to understand survivor profiles in order to save other lives.\n\nThe project have 4 main topics:\n\n**1.   Data Exploration**         - To understand and get detailed information about dependent variable and other parameters.\n\n**2.   Feature Engineering**  - To create new parameters that can increased accuracy and help to make better prediction. \n\n**3.   Data Analysis**              - To prepeare and fit the parameters for building model \n\n**4.   Model Building**           - To build different models and comparing their accuracy for making prediction with the best of."},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"ecd995a361b8f965bd9cb04b354d095702cbc87f"},"cell_type":"code","source":"library(ggplot2)\nlibrary(tidyverse)\nlibrary(knitr)\nlibrary(corrplot)\nlibrary(caret)\nlibrary(randomForest)\nlibrary(gbm)\nlibrary(vcd)\nlibrary(varSelRF)\nlibrary(ROCR)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"344162a0e21ea356456d0e2ec6278a539e0456ad"},"cell_type":"code","source":"train_data <- read.csv(\"../input/train.csv\")\ntest_data <- read.csv(\"../input/test.csv\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"ac3cd58f2faef7e272426797b00b04103c4cebc3"},"cell_type":"markdown","source":"# 1. Exploratory Data Analysis "},{"metadata":{"trusted":true,"_uuid":"0d46ce1f3c2f37aeac72a8e98cd09809d12baeb4"},"cell_type":"markdown","source":"Looking underlying structure and dimension of train data"},{"metadata":{"_uuid":"e0bbb799f3c159d4c48b3bb90134cc4b5539e644","trusted":true},"cell_type":"code","source":"str(train_data)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"eee56c31472efaf3e54490991570f1242f386eb1"},"cell_type":"code","source":"dim(train_data)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"9c015ba773cf7dd46383a3411b3e228a9095c669"},"cell_type":"markdown","source":"Printing first rows of train data"},{"metadata":{"trusted":true,"_uuid":"1e0c7ad4b0256bfa78337ecc97632ff2af8963dc"},"cell_type":"code","source":"head(train_data, n = 10)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d8b66a9d35e40d0715aead557386e5032ced3489"},"cell_type":"markdown","source":"Checking if there is any missing data"},{"metadata":{"trusted":true,"_uuid":"9671cf3c35f580387090285cf945476ee4ab6f46"},"cell_type":"code","source":"colSums(is.na(train_data))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"6d35241e9cb0be57324ac61483622e363f42d977"},"cell_type":"markdown","source":"The results show that almost a quarter of data is missing on the Age section.\n\nI would like to check if there is any invalid data like negative values or extra category in any parameters ."},{"metadata":{"trusted":true,"_uuid":"42ea489b5d46427711b03dce37c1087d155465fa"},"cell_type":"code","source":"summary(train_data)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"00b5d51d02e370b1166781ebb324b4ef94d8933d"},"cell_type":"markdown","source":"First apperance, Embarked columns may have empty values. In the part of Data Analysis, I will deal with missing and empty values."},{"metadata":{"_uuid":"45d33c830be08b4f5c0d788c4a1f9dba4a71a298"},"cell_type":"markdown","source":"Another part of data exploratory is predictors' effect on survivals. I will summarize the parameters mostly by visualizing them. It will help to discover patterns, identify important variables, make statistical summary, outliers control etc. Some graphs created for getting more knowledge about survived passenger specifics."},{"metadata":{"_uuid":"39daf7d7fab6334110095dbf0dd37e4ad0d1c464"},"cell_type":"markdown","source":"First, Survived group is converted to factor to be able to achieve better visual results"},{"metadata":{"trusted":true,"_uuid":"eef5de666712da5cf70435e4c292a15e70fe099d"},"cell_type":"code","source":"train_data$Survived <- as.factor(train_data$Survived)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"da1f4e75a7b488d2dc42e31b4131e6ebbe03d036"},"cell_type":"markdown","source":"### ***Survived vs Sex***"},{"metadata":{"_uuid":"765e6df54b54f09bfc6c846dd59820eeca79924a"},"cell_type":"markdown","source":"In Titanic facts, it is said that most of the rescued people were women. We can create a graph to visualize our data results.\nFor categorical data, bar graph is the most common way for visualization."},{"metadata":{"trusted":true,"_uuid":"ec65241a66cd681d38690b34a54e6ab9f6803f92"},"cell_type":"code","source":"ggplot(data = train_data, aes(x = Survived, fill = Sex)) +\n  geom_bar() +\n  geom_text(aes(label = scales::percent(..count.. / sum(..count..))), stat = 'count', position = position_stack(0.5)) +\n  ggtitle(\"Survived vs Sex\") + xlab(\"Survived\") + ylab (\"Count\") +\n  theme_classic() +\n  theme(plot.title = element_text(hjust = 0.5))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"dd82d3a879b5a7b4f84485099979a7fff3d1be6e"},"cell_type":"markdown","source":"The graph shows distribution of percentage on the female and male passenger by survived factor. The results are similar with the Titanic facts. Most survived and least non survived passengers are woman. Also, we can say that more than 80% of men are dead."},{"metadata":{"_uuid":"e15eb8262802bcb3e7f6f9aeea0ed9d225f4616e"},"cell_type":"markdown","source":"### ***Survived vs Age***\nAge is a continuous variable and it is not able to show survival rates on specific age ranges with continuous format. In general, the conversion continuous variables to categorical type can cause loss of information. However, in this case, the conversion to categorical variable makes interpretation simpler. Age variable split by 18 for range. This number is chosen to be able to seperate well children, young, adult and older persons.\n"},{"metadata":{"trusted":true,"_uuid":"cd2a0bce503ceda10ffc8bc6d874feef79146353"},"cell_type":"code","source":"train_data$Grouping_Age <-\n  cut(train_data$Age, breaks <- c(seq(0, 100, by <- 18), Inf))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"ffc6d3c29ca6dc6d4ff3fa768d54c276e102c336"},"cell_type":"code","source":"ggplot(data = train_data, aes(x = Grouping_Age, y = Survived)) +\n  geom_bar(aes(fill = Survived), stat = \"identity\") +\n  scale_fill_brewer(palette = \"Dark2\") +\n  ggtitle(\"Survived vs Age\") + xlab(\"Age Range\") + ylab (\"Survived or No Survived\") +\n  theme_classic() + coord_flip() +\n  theme(plot.title = element_text(hjust = 0.5))\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"fa1b185e5ee43da0e206757489a7ba0e9f54f060"},"cell_type":"markdown","source":"Survied vs Age graph show that young people ages between 18-36 are the most survived and non-survived group\nOn this range survived and non-survived passengers almost equal to each other.\nWe can say that this variable does not contribute any use for the people in this range. Lets look this idea with box-plot graph."},{"metadata":{"trusted":true,"_uuid":"0d8d395b5c3c9a8d82ff04f70b59594c8d2fbc29"},"cell_type":"code","source":"ggplot(na.omit(train_data), aes(Survived, Age)) +\n  geom_boxplot(outlier.color = \"red\", outlier.shape = 1) +\n  theme_minimal()","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"9d1bf9ed667a62f833ea7e8e18ebebe7734433cd"},"cell_type":"markdown","source":"Box-plot graph shows that, both groups' median are almost equal and around 28 years old.\nAlso, we can see that both groups have longer whiskers which means  Age variable is very wide on the Survived group.\nLastly, survived group have less outliers than non-survived group."},{"metadata":{"_uuid":"7688887d19ce1ae07876305ae7c133384a5ac3ca"},"cell_type":"markdown","source":"### ***Survived vs Ticket Class***\nAnother graph is about Pclass vs Survived. First pclass convert to factor"},{"metadata":{"trusted":true,"_uuid":"583b73374a06d139464856202bb7d1ea04f67bcf"},"cell_type":"code","source":"train_data$Pclass <- as.factor(train_data$Pclass)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"b05a2a7a9aabeae1bf2939720e0f9af0296d7207"},"cell_type":"code","source":"ggplot(data = train_data, aes(x = Pclass, y = Survived)) +\n  geom_bar(aes(fill = Survived), stat = \"identity\") +\n  scale_fill_brewer(palette = \"Reds\") +\n  labs(title = \"Ticket Class vs Survived\", x = \"Ticket Class\", y = \"Survived or No Survived\") +\n  theme_classic() +\n  theme(plot.title = element_text(hjust = 0.5))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"fe2d4585139feb50a26b64d5ab7ea9153739212e"},"cell_type":"markdown","source":"It is likely that 3rd class cabin is one of the places that was damaged significantly and reduced the survival rate comparing to other classes.\nConsidering lower class cabins usually placed lower levels of ships and those are the hardest places to leave during incidents,\nthe survival rate of 3rd is consistent with common knowlegde."},{"metadata":{"_uuid":"d86da97039272c9d30b1b90adc2e420fc03b1408"},"cell_type":"markdown","source":"### ***Survived vs Embarked***"},{"metadata":{"_uuid":"14fde92a868d75ac7ad269313ce31d784c24a7ab"},"cell_type":"markdown","source":"![alt text](https://upload.wikimedia.org/wikipedia/commons/5/51/Titanic_voyage_map.png) *Wikipedia"},{"metadata":{"trusted":true,"_uuid":"83d4ea305974eb60d72d968f5192e2f8b7582aa2"},"cell_type":"code","source":"ggplot(data = train_data, aes(x = Embarked, fill=Survived)) +\n  geom_bar()+\n  geom_text(stat='count', aes(label=..count..), position = position_stack(vjust = 0.5), size=3) +\n  labs(title = \"Survived vs Embarked\", x = \"Embarked\", y = \"Count\") +\n  theme_classic() +\n  theme(plot.title = element_text(hjust = 0.5))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"ec00fddf05a7b7a1c1adb0f55f84588b379ddeed"},"cell_type":"markdown","source":"The Embarked vs Survived graph shows that, more than 70% of passengers are onboarded from Southampton Port and more than 50% of them are not survived. \nMost of the data of Embarked gather on Southampton. This parameter may not have positive effect on the target variable for model building but we will check it later."},{"metadata":{"_uuid":"3b7af2a7af7f1a5775ad2e3b3c0b65ffeaae0a8f"},"cell_type":"markdown","source":"In this part, I made vizualization for some parameters which seems important for target value prediction. In the next part, I want to create some new parameters for adding Model Building. "},{"metadata":{"_uuid":"7f03abea7b3dd5d36382ae26045b86c95605f865"},"cell_type":"markdown","source":"# 2. Feature Engineering \nFirst, I want to create total number of family features. Below graphs shows that, in both group most passengers are single.\nThis features will help to analyze single passenger more easier and I may achieved more significant results."},{"metadata":{"trusted":true,"_uuid":"e852f75fb8381611572e20efeeaf90085efe0509"},"cell_type":"code","source":"d1 <- ggplot(data = train_data, aes(Parch)) +\n  geom_bar(stat = \"Count\") +\n  theme_minimal()\n\nd2 <- ggplot(data = train_data, aes(SibSp)) +\n  geom_bar(stat = \"Count\") +\n  theme_minimal()\n\ngrid.arrange(d1, d2, nrow = 1)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"26a455f17ecc61bef45f7bec2e88d2751b817ed5"},"cell_type":"code","source":"#Creating Total Family\ntrain_data$Total_Family <- train_data$SibSp + train_data$Parch + 1","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"dc82e3086872c657afd23fcab059033a60ea112a"},"cell_type":"markdown","source":"Below table shows that most survived and non survived persons have less family member"},{"metadata":{"trusted":true,"_uuid":"e0719f9b17ad2271ba9f2aca5f0a87301c4c6947"},"cell_type":"code","source":"train_data %>%\n  group_by(Survived, Total_Family) %>%\n  summarise_(n= ~n()) %>%\n  mutate(prop=prop.table(n)) %>%\n  kable()","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"8e5c533d3e40891b067b3af2235ff64a44032cb6"},"cell_type":"markdown","source":"Grouping Age vs Total_Family Group"},{"metadata":{"trusted":true,"_uuid":"f8c617ff071424e425ca73973fa930417ccbc5f2"},"cell_type":"code","source":"#Converting factor to visualize it\ntrain_data$Total_Family <- as.factor(train_data$Total_Family)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"0068967d1a2fe01657e3a107cc054fc0ee5a6912"},"cell_type":"code","source":"ggplot(data = train_data, aes(x = Grouping_Age, fill = Total_Family)) +\n  geom_bar() +\n  geom_text(stat = 'count', aes(label = ..count..),\n    position = position_stack(vjust = 0.5), size = 2) +\n  labs(title = \"Age vs Total_Family\", x = \"Age\", y = \"Count\") +\n  theme_classic() +\n  theme(plot.title = element_text(hjust = 0.5))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"59a605d81e2af9d26a6d67a1187a5d002eadbd1d"},"cell_type":"markdown","source":"The graph shows that 36 of under 18 years passenger travelled alone.\nSome Titanic Facts pages talk about crew which are under 18 and in data information on Kaggle said that \"Some children travelled only with a nanny, therefore parch=0 for them.\".\nIt demonstrated that, this 36 passenger form by children and crew."},{"metadata":{"trusted":true,"_uuid":"a80c41f9ad043f01e7ed59da86f8fbd1691156ca"},"cell_type":"code","source":"#Convert back to numeric \ntrain_data$Total_Family <- as.numeric(train_data$Total_Family)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"5eebae87f011839b661598386036f30977cedf39"},"cell_type":"markdown","source":"Second new parameter is Ticket Number. The aim of this engineering is creating group passenger and adding to model."},{"metadata":{"trusted":true,"_uuid":"9c937f4d29095e3613a1b4d25461175d8a6391dd"},"cell_type":"code","source":"train_data$Ticket_Code <- gsub('\\\\s[0-9]+|[0-9]{2,}|\\\\.', \"\", train_data$Ticket)\n\ntrain_data$Ticket_Number <- gsub('\\\\D+', '', train_data$Ticket)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"46a2aaa828bb965f7c582bed61f60a221fb891ad"},"cell_type":"code","source":"#Create new table for ticket number size\nTicket_Number_Size <-\n  train_data %>%\n  group_by(Ticket_Number) %>%\n  tally()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"7be32b0da7a6eae7cab4488d932e5034d442125e"},"cell_type":"code","source":"#Converting to Data Frame\nTicket_Number_Size <- as.data.frame(Ticket_Number_Size)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3b1a6b5b7e8954591eb1a6883d3c2fbc07b6be18"},"cell_type":"code","source":"#Join both table and adding to train_data\ntrain_data <-\n  train_data %>%\n  inner_join(Ticket_Number_Size, by = \"Ticket_Number\")\n\ntrain_data <-\n  rename(train_data, Ticket_Size = n)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"b492d301f4f32f61fc34434d88b18accac79746d"},"cell_type":"code","source":"#Add ticket number for \"Line\" tickets which seems empty value on the table.\ntrain_data <-\n  train_data %>%\n  mutate(Ticket_Number = ifelse(Ticket_Number == \"\", 0000 , Ticket_Number))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"d9250ba18c4a9d348b5359b2ed182c9685f21683"},"cell_type":"code","source":"#Adding Grouping Column\n#0 = Non-Group Passenger\n#1 = Grouping Passenger\n\ntrain_data <-\n  train_data %>%\n  mutate(Grouping_Ticket = ifelse(Ticket_Size == 1, 0, 1))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"6fafcc11e54934b8b6e8d046f010f5ce06c93726"},"cell_type":"code","source":"#Converting Factor \ntrain_data$Grouping_Ticket <- as.factor(train_data$Grouping_Ticket)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"082dd2d3ba67434f87b95f8a537eedfc0367d7e7"},"cell_type":"code","source":"table(train_data$Grouping_Ticket)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"e52733be4bb391f6020dd107e5bebb61919df95a"},"cell_type":"markdown","source":"# 3. Data Analysis\nLet's do the replacement of missing values. Age variables have around 177 null values. This values replace with its median. This methods work on randomly missing values"},{"metadata":{"trusted":true,"_uuid":"960716bed8a20588d597defdf63e20116774ed2c"},"cell_type":"code","source":"train_data <- \n  train_data %>%\n  mutate(Age = ifelse(is.na(Age), median(Age, na.rm=TRUE), Age))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"8ae0b676a8fbb0f14a39bf5ce8eda2c1ef4b556c"},"cell_type":"markdown","source":"Embarked table shows that, there is 2 empty values. The proportion of empty values are very low (< 0.1), so both values can be replaced with only \"S\" or \"S\" and \"C\" which are categories that have highest values.\nIn this case, these values will be replaced with only \"S\""},{"metadata":{"trusted":true,"_uuid":"42d14f952a48e31ce58a0bcbcd468942d55253a5"},"cell_type":"code","source":"train_data <-\n  train_data %>%\n  mutate(Embarked = ifelse(Embarked == \"\", 4 , Embarked))\n\ntrain_data$Embarked <- as.factor(train_data$Embarked)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"d34419d2f6776845525646581b1e94aed6bef221"},"cell_type":"code","source":"#Fare variable is continues. So, first we can check the range, distribution or etc.\nrange(train_data$Fare)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"0176c43959207e91302210b323dea33279dde136"},"cell_type":"markdown","source":"The range seems so wide, let's look at details with the density graph"},{"metadata":{"trusted":true,"_uuid":"de95f26739e9ed9a1c6277f5b45e9f987fba5bab"},"cell_type":"code","source":"ggplot(data = train_data,\n       aes(x = Fare, fill = Survived),\n       binwidth = bwidth) +\n  geom_area(stat = \"bin\" , binwidth = 25) +  geom_density(alpha = .2) + \n  theme_classic() + scale_fill_brewer(palette =\"Paired\") +\n  labs(title = \"Fare Density\", x = \"Fare\", y = \"Count\") + \n  theme(plot.title = element_text(hjust = 0.5))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"a5ce8a9659691174dabde12dc36d04efb47fa71d"},"cell_type":"markdown","source":" Light colored part on vertical perspective is getting lower and lower as the Fare goes higher, this correlates with the idea that passenger paid high prices for the ticket had higher class tickets and were in upper parts of the ship which eases to survive during the incident. Although, there is one catch, due to number of sample it is not so visible on the graph but after Fare around 270, the survival rate is much worse than the low fares we should dig down and find who are these passengers paid over ~250 and died, this can give us more detail about survival behaviour\""},{"metadata":{"trusted":true,"_uuid":"2b7b0a4d2da6bf3a7b53ef466a5232608b1ea2a1"},"cell_type":"code","source":"# Also some passenger's ticket price is zero.\n\n#First examine them\ntrain_data %>%\n  filter(Fare == 0)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"8ec1a6e946a9b3cfb32f8f18840b5b602c8e0516"},"cell_type":"markdown","source":"The table shows that 15 passengers' ticket has no price. 4 of them are crew, we can understand that with the Ticket_Code which is LINE.\nOther can be crew also?. Base on the Pclass parameter we can say that, this group is mix of crew and passenger. It seems like some passenger have promotional ticket.\n\nSecond analysis about survival behaviour on Fare parameters. To achieve this, Fare is converted to categorical values.\nLet's create seperate categories for the min and max fares. Also the distribution is dense on the range of 1 to 100. "},{"metadata":{"trusted":true,"_uuid":"b2bc43df3055bf6511af36df369a1adfa8916f07"},"cell_type":"code","source":"train_data <- train_data %>%\n  mutate(Categorical_Fare = cut(\n    Fare,\n    breaks = c(-Inf, 0, 10, 50, 100, 200, 300, 600),\n    labels = c(\"0\", \"1-10\", \"11-50\", \"51 - 100\", \"101-200\", \"201-300\", \"500+\")\n  ))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f91748d1e0a3435f3674f5312efc7aa3d9ea7224"},"cell_type":"code","source":"train_data$Categorical_Fare <- as.factor(train_data$Categorical_Fare)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"24a71ce8b81a7713e04fa21b2238d8db3c4f37be"},"cell_type":"code","source":"##Visualize\nggplot(data = train_data, aes(x = Categorical_Fare, y = Survived)) +\n  geom_bar(aes(fill = Survived), stat = \"identity\") + scale_fill_brewer(palette =\n                                                                          \"Accent\") + theme_classic() +\n  labs(title = \"Fare Category vs Survived\", x = \"Fare Category\", y = \"Survived or No Survived\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"48615808ea91a0eb2e497ca0169f6efb4ee1d35f"},"cell_type":"markdown","source":"The graph shows more details about Fare parameter. Most passengers' fare is between 11-50 and there is a strong relationship between survived passenger and high ticket price.\nUsing this categorical variable can be more significant on the model."},{"metadata":{"_uuid":"7806eae0664047970316381ff235842cafae79e5"},"cell_type":"markdown","source":"## Correlation\nAnother step is compute correlation coefficients between variables. For Contunies variables, correlation matrix is one of the best method which leverage Pearson correlation. However, this data has a lot of categorical and few continuous variable types.\nCorrelation matrix will still be built for continuous variables to explore positive or negative relationship between them with Pearson correlation.\n"},{"metadata":{"trusted":true,"_uuid":"b0ee9030fedaf78bd311d616a075ea65137d02de"},"cell_type":"code","source":"numeric_data <- train_data[, c(6:8, 10, 14, 17)]\ncorr_matrix <- cor(numeric_data, method = \"pearson\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"6bb5c55cc4b4816834d824f5a2bb639b76dacb8b"},"cell_type":"code","source":"corrplot.mixed(corr_matrix, tl.cex = .6, addrect = 2)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"c4601d9005604a2cb7b069703e631a1fd389aaf9"},"cell_type":"markdown","source":"Total_Family is derived a column and fuction of SibSp and Parch variables. So it was certainly expected to see the correlation between those. An interesting fact is that correlation revealed a relationship between Total Family and Ticket Size. Equality or similarity of these calues show that mostly family members have the same ticket (ticket no). However, we should still eliminate the correlated features. Total_Family is the highest correlated parameters with SibSp, Parch and Ticket_Size. On the model, only this parameter will be used."},{"metadata":{"_uuid":"6444ee9e6f7ac59151d9b0eede45ca6d9a2525c7"},"cell_type":"markdown","source":"Secondly, measure of strength of the association between categorical parameters will be checked. In these circumstances, Person Chi-Square can used for significance test and Cramer's V can used for effect size of parameters. These test can help to choose which parameter will be used on model building."},{"metadata":{"trusted":true,"_uuid":"6a2a24e71aad8bc0aeb2821c24b318b611664234"},"cell_type":"code","source":"#First some categorical parameters will be visualizing.\n\nmosaic(\n  ~ Pclass + Sex + Grouping_Ticket + Survived,\n  data = train_data,\n  gp = shading_hcl,\n  main = \"Mosaic Plot for Categorical Variables\"\n)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"50ea49bc892a27f075bc1a83675d2e2720ea2439"},"cell_type":"markdown","source":"For Person Chi-Square, let's construct the hypothesis;\n\n* H0: The two variables have no significant relationship\n* H1: The two variables have significant relationship"},{"metadata":{"trusted":true,"_uuid":"a0b0006a66d55449807371109917989fa1192702"},"cell_type":"code","source":"#Survived vs Pclass\ntable1 <- xtabs(~ Survived + Pclass, data = train_data)\nassocstats(table1)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"c46b5e1b74af31496d5a19d185e079edc881ad4c"},"cell_type":"markdown","source":"p-Value of Pearson(0.00) less than the significance level of 0.05. It means **null hypotesis rejected**. The conclusion is that there is a significant relationship between them and the relationship is **strong** based on the Cramer's V result (0.34)."},{"metadata":{"trusted":true,"_uuid":"17b8de848ec450874d0d9c7628d9d8e198850326"},"cell_type":"code","source":"#Survived vs Sex\ntable2 <- xtabs(~ Survived + Sex, data = train_data)\nassocstats(table2)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"dc56d5821b90cc18eefcaad09c965d5012e7ba55"},"cell_type":"markdown","source":"p-Value of Pearson(0.00) less than the significance level of 0.05. It means **null hypotesis rejected**. The conclusion is there is a significant relationship between them and the relationship is **very strong** based on the Cramer's V result (0.54)."},{"metadata":{"trusted":true,"_uuid":"b26d26d722c0d75b09e07f2d59b2e34ddfcafdb5"},"cell_type":"code","source":"#Survived vs Embarked\ntable3 <- xtabs(~ Survived + Embarked, data = train_data)\nassocstats(table3)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"cb4d85f9b866f61872e4801ed842e6c05407c761"},"cell_type":"markdown","source":"p-Value of Pearson(0.00) less than the significance level of 0.05. It means **null hypotesis rejected.** The conclusion is there is a significant relationship between them and the relationship is **weak** based on the Cramer's V result (0.17)."},{"metadata":{"trusted":true,"_uuid":"482a3721acc9c891939d3093205f14eb7fe4c239"},"cell_type":"code","source":"#Survived vs Grouping Ticket\ntable4 <- xtabs(~ Survived + Grouping_Ticket, data = train_data)\nassocstats(table4)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"6aca7bf0fd94c1b0fbca89599d642ee26198f369"},"cell_type":"markdown","source":"p-Value of Pearson(0) less than the significance level of 0.05. It means **null hypotesis rejected**. The conclusion is there is a significant relationship between them and the relationship is **weak** based on the Cramer's V result (0.23)."},{"metadata":{"trusted":true,"_uuid":"22374272669b687cfa0ebe50961e3af6136e60b2"},"cell_type":"code","source":"#Survived vs Categorical Fare\ntable5 <- xtabs(~ Survived + Categorical_Fare, data = train_data)\nassocstats(table5)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"e4cde3b8f86072e3358d5a57b92fc643cc25ed46"},"cell_type":"markdown","source":"p-Value of Pearson(0.00) less than the significance level of 0.05. It means **null hypotesis rejected**. The conclusion is there is a significant relationship between them and the relationship is **strong** based on the Cramer's V result(0.36)."},{"metadata":{"_uuid":"119656baf7ccaf5f06f761c1516b22167c29e544"},"cell_type":"markdown","source":"The results show that, Embarked and Grouping_Ticket parameters have weak relationship. It means that they may not have a positive contribution on the model. We will go into the details during model building."},{"metadata":{"_uuid":"a848c6a27b15d4438d9fc813813a5b2e162cc9a1"},"cell_type":"markdown","source":"Final step of Train Data analysis is creating the new data frame with parameters which they will be used on the model.\n\nThe parameters are: Survived, Pclass, Sex, Age, Embarked, Total_Family, Grouping_Ticket and Categorical_Fare"},{"metadata":{"trusted":true,"_uuid":"804edf2029bc8a9550e4825148ecab84c05a65d1"},"cell_type":"code","source":"train_data_model <- train_data[, c(2:3, 5:6, 12, 14, 18:19)]","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"0fab96e2fe0030a831a20207c4556b295d6a1481"},"cell_type":"markdown","source":"## Test Data\nLets look out the test data quickly and add new features the same of train data"},{"metadata":{"trusted":true,"_uuid":"2902fac9148704f92f20b3f12cafc17814256966"},"cell_type":"code","source":"str(test_data)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"19eff0a55b8ad976581cfe1a36a768e013863167"},"cell_type":"code","source":"#Convert Pclass to factor\ntest_data$Pclass <- as.factor(test_data$Pclass)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"cca263337f8408cf2cb0cab1d0c152e2bcad17f8"},"cell_type":"code","source":"#Convert Embaked names same with Train Data\ntest_data <- test_data %>%\n  mutate(Embarked = recode(Embarked, C = \"2\",\n                          Q = \"3\",\n                          S = \"4\"))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"0c344e8b51274e1b8870f6e4a365260a50a57839"},"cell_type":"code","source":"test_data %>%\n  group_by(Embarked) %>%\n  summarize(n = n()) %>%\n  kable()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"72425b9a713a4c4d0b8cd18761ebf67c747707e1"},"cell_type":"code","source":"#Checking missing values\ncolSums(is.na(test_data))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"3443938419387056225e0cc404dd74ad4ec7f29d"},"cell_type":"markdown","source":"It seems that the age and fare variables have missing values. Although, the Fare have only 1 missing value. Both groups will be replaced with their median."},{"metadata":{"trusted":true,"_uuid":"2945db682a1854d648fb455ac9604944225ad254"},"cell_type":"code","source":"#Age\ntest_data <- \n  test_data %>%\n  mutate(Age = ifelse(is.na(Age), mean(Age, na.rm=TRUE), Age))\n\n#Fare\ntest_data <- \n  test_data %>%\n  mutate(Fare = ifelse(is.na(Fare), mean(Fare, na.rm=TRUE), Fare))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"5c53f610af8928847ce06472c5fe833372a5fe3e"},"cell_type":"code","source":"#Create total_family group for test data\ntest_data$Total_Family <- test_data$SibSp + test_data$Parch + 1","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4736af4ad532e3f6cc61c8759a1b1a410f799dfc"},"cell_type":"code","source":"#Create Grouping Ticket parameter for test data\n\ntest_data$Ticket_Number <- gsub('\\\\D+', '', test_data$Ticket)\n\n\n#Create new table for ticket number size\nTicket_Number_Size <-\n  test_data %>%\n  group_by(Ticket_Number) %>%\n  tally()\n\n#Converting to Data Frame\nTicket_Number_Size <- as.data.frame(Ticket_Number_Size)\n\n#Join both table and adding to train_data\ntest_data <-\n  test_data %>%\n  inner_join(Ticket_Number_Size, by = \"Ticket_Number\")\n\ntest_data <-\n  rename(test_data, Ticket_Size = n)\n\n#Add ticket number for Line tickets which seems empty value on the table.\ntest_data <-\n  test_data %>%\n  mutate(Ticket_Number = ifelse(Ticket_Number == \"\", 0000 , Ticket_Number))\n\n#Adding Grouping Column\n#0 = Non-Group Passenger\n#1 = Grouping Passenger\n\ntest_data <-\n  test_data %>%\n  mutate(Grouping_Ticket = ifelse(Ticket_Size == 1, 0, 1))\n\ntest_data$Grouping_Ticket <- as.factor(test_data$Grouping_Ticket)\n\ntable(test_data$Grouping_Ticket)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"00eeb2c0509ed2aee310d40947a1f90544c81ce9"},"cell_type":"code","source":"#Converting Fare to categorical data\ntest_data <- test_data %>%\n  mutate(Categorical_Fare = cut(Fare, breaks = c(-Inf, 0, 10, 50, 100, 200, 300, 600), labels=c(\"0\", \"1-10\", \"11-50\", \"51 - 100\",\"101-200\", \"201-300\", \"500+\")))\n\ntest_data$Categorical_Fare <- as.factor(test_data$Categorical_Fare)   ","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"72df129b1b0871d25b8a63f0618eb9ed7b4c4dcf"},"cell_type":"code","source":"str(test_data)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"070b11c9861c92ef9868d3bf7f61782ea9babb15"},"cell_type":"code","source":"#Choosing parameters for test_data\ntest_data_model <- test_data[, c(2, 4:5, 11:12, 15:16)]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"02d9f115d924b83611a353b24af2071d663bec2c"},"cell_type":"code","source":"str(train_data_model)\nstr(test_data_model)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"ec446e4ddc28c93ad5fba76aef7a414bbd977b0c"},"cell_type":"markdown","source":"# 4. Model Building"},{"metadata":{"_uuid":"dcce471d5b50950bdddbed80471d6756330ec86b"},"cell_type":"markdown","source":"3 Different Supervised Learning Algorithms will be used for model building: SVM, Random Forest and Gradient Boosting.\n* SVM will be used because it is one of the powerful statistical technique for binary classification.\n* Random forest will be used because most of the dependence variables are categorical and random forest work well with them.\n* Gradient Bossting method will be used. It build trees one at a time, where each new tree helps to correct errors made by previously trained tree while RF train each tree independently, using a random sample of the data.\n* Extreme Gradient Boosting method choosed. It performs parallel processing to improve computational efficiency.\n"},{"metadata":{"trusted":true,"_uuid":"4b08e10d498f58e3de5982a375abc1bd0f865161","scrolled":true},"cell_type":"markdown","source":"## Choosing Important Parameters\nHyperparameter optimization approach is applied going to the learning phase. This approach will help to select optimal hyperpatameters or in other word to tune the parameters. Thus, a loss function will be minimized. \nGradient Boosting method will help to find relative influence for each parameters.\n"},{"metadata":{"_uuid":"9d77323d7430cd86eb7a72612d0371ad6d45e4f7","trusted":true},"cell_type":"code","source":"GBM_model <- gbm(Survived ~ ., \n           data = train_data_model, distribution = \"multinomial\",\n           bag.fraction = 0.5, n.trees = 1000, interaction.depth =3, shrinkage = 0.01, n.minobsinnode = 10, cv.folds = 10)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8ea2dd71b982d4a9db52f7d42a1e5442ec04f5eb"},"cell_type":"code","source":"#Visualization\n\npar(mar = c(5, 8, 1, 1))\nsummary(\n GBM_model, \n  cBars = 10,\n  method = relative.influence,\n  las = 2)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a540986d0775518f0aaf76751aedfc9c9dc95e9f"},"cell_type":"markdown","source":"The graph shows that Embarked and Grouping Ticket parameters should not be inserted into the model. But I would like to do a cross check to ensure about parameters. Therefore I will be using random forest method with varSelRF library."},{"metadata":{"trusted":true,"_uuid":"3efcd75302b81229f7262f2d18b77bc89bcd3dc1"},"cell_type":"code","source":"RF_variables <- varSelRF(train_data_model[, -1], train_data_model[, 1], ntree = 1000,\n                       c.sd=1, returnFirstForest = TRUE)\n\nprint(RF_variables)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"cd7e161c0f0f55bcca9c9518d1acebcd802fe800","trusted":true},"cell_type":"code","source":"train_data_model <- train_data_model[, c(1:4, 6, 8)]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"d9308531a2e93440a0798941a41ace5d3ea7ba8f"},"cell_type":"markdown","source":"## Data Splitting\nTraining data will be split into training(70%) and testing data(30%). The aim of this splitting is minimizing the error rate. The training set used for model building and test set used for model assessment. Another important thing is cross validation. This method will help to measure and assesing model performance and avoid overfitting."},{"metadata":{"_uuid":"036f6e944e504256342f458728fe72ecb3918068","trusted":true},"cell_type":"code","source":"trainIndex <- createDataPartition(y=train_data_model$Survived, p=0.70, list=FALSE)\n\ntrain_set <- train_data_model[trainIndex,]\ntest_set <- train_data_model[-trainIndex,]","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"71dd09763f356cc2ba4bbd8c17f773b3d13e7cdd","trusted":true},"cell_type":"code","source":"#10 times repeated 10 fold cross validation will be used.\nset.seed(123)\ntrCont <- trainControl(method = \"repeatedcv\",\n                      number = 10,\n                      repeats = 10)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"8e76e0694448bbd6d2d938d1a1154b4eb8969b84"},"cell_type":"markdown","source":"## Support Vector Machine - RBF Kernel"},{"metadata":{"_uuid":"ac114ab2598a92a29bf5fdba94185668a4bedc17","trusted":true},"cell_type":"code","source":"SVM_model <- train(\n  Survived ~ .,\n  data = train_set,\n  method = \"svmRadial\",\n  trControl = trCont\n)\nprint(SVM_model)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"11adc623e50b75c1d94b7aacbac81e5cb75ffbcb"},"cell_type":"code","source":"#Prediction\nSVM_pred <- predict(SVM_model, test_set)\n#Confusion Matrix\nSVM_Conf <- confusionMatrix(SVM_pred, test_set$Survived)\nprint(SVM_Conf)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"feb592731f968ae55a7e18c9ad6b2777eb20acc6"},"cell_type":"markdown","source":"## Random Forest\nFirst RandomForest package will be used and check Gini coefficient for variable importance"},{"metadata":{"_uuid":"27745a55996c431877b95ef2df09acaceb04f7ca","trusted":true},"cell_type":"code","source":"RF_model <- randomForest(Survived ~ .,\n                        data = train_set,\n                        importance = TRUE,\n                       ntree = 1000)\nprint(RF_model) \nvarImpPlot(RF_model)\nimportance(RF_model)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"e94f54eec3965f888cd7c427287a46394f721697"},"cell_type":"markdown","source":"Based on the Gini graph, we can say that Sex and Age parameters are more important than others on the model. "},{"metadata":{"trusted":true,"_uuid":"e24d6e0cba0f938df372dae6e9b4704f84a2999b"},"cell_type":"code","source":"##Cross validation method.\n\nRF_model_caret <- train(\n  Survived ~  .,\n  data = train_set,\n  method = \"rf\",\n  trControl = trCont\n)\nprint(RF_model_caret)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"08d0b93078e8f3bcacc4dd9616a17db2fe51cbe0"},"cell_type":"code","source":"#Prediction\nRF_pred <- predict(RF_model_caret, test_set)\n\n#Confusion Matrix\nRF_Conf <- confusionMatrix(RF_pred, test_set$Survived)\nprint(RF_Conf)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"88a2126db0630db65b309861bc85c3c4b6c2ea3b"},"cell_type":"markdown","source":"## Extreme Gradient Boosting"},{"metadata":{"trusted":true,"_uuid":"ef91291d79e92faba0dea43a4845fc22490c1419"},"cell_type":"code","source":"XGBM_model <- train(\n  Survived ~  .,\n  data = train_set,\n  method = \"xgbTree\",\n  trainControl = trCont\n)\nprint(XGBM_model)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"136b17f1d623cdb69e51a133d99ef2d78b0952cb"},"cell_type":"code","source":"#Prediction\nXGBM_pred <- predict(XGBM_model, test_set)\n\n#Confusion Matrix\nXGBM_Conf <- confusionMatrix(XGBM_pred, test_set$Survived)\nprint(XGBM_Conf)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"81b924cdbe681ef387af3914c7583254588fd9e3"},"cell_type":"markdown","source":"## Comparing Machine Learning Models with ROC"},{"metadata":{"_uuid":"3f8dc33eab23d209de02d6261afcf403e25cb0a0","trusted":true},"cell_type":"code","source":"pred_combine <- cbind(SVM_pred, RF_pred, XGBM_pred)\n\nprediction_matrix <- prediction(pred_combine, labels = matrix(test_set$Survived, \n                                              nrow = length(test_set$Survived), ncol = 3) )\n\nperformance_matrix <- performance(prediction_matrix, \"tpr\", \"fpr\")\nplot(performance_matrix, col = as.list(1:3), main = \"ML-ROC Curves\", \n     type = \"l\",xlab= \"False Positive Rate\", ylab=\"True Positive Rate\")\nlegend(x = \"bottomright\", legend = c(\"SVM\", \"RF\", \"GBM\"), fill = 1:3)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"a061d26571b7583273407a7fb29be6fdbed07c5e"},"cell_type":"markdown","source":"The ROC curve shows the model performance. On this graph, 3 models have been compared and difference between models are very few. However, Random Forest have more AUC area than others. This led to better classifier. In other words, Random Forest line more lean to True Positive Rate than False Positive Rate.  Base on these conclusion, real test data prediction will made with Random Forest Model. "},{"metadata":{"trusted":true,"_uuid":"be5c7c40d48577a0fecd26190d7c0e03ae98cfb9"},"cell_type":"code","source":"RF_pred_last <- predict(RF_model_caret, test_data)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"f7424e063c36015cd610553e6e8b9f902349a0ec"},"cell_type":"markdown","source":"## Writing Submission File "},{"metadata":{"trusted":true,"_uuid":"32644337dc3d41cabbc8b9adc0f8817895ed755b"},"cell_type":"code","source":"final_file <- data_frame(PassengerId= test_data[, 1], Survived = RF_pred_last)\nOutput_prediction <- write.csv(final_file, file = \"Prediction_Results_RF.csv\", row.names = FALSE)\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"06d6894e429563048cfa5c83910d31c3a82d01fd"},"cell_type":"markdown","source":"# Conclusions\n\nI am really happy to finish my first Kaggle, I freshen up my memories and have chance to practice with R programming language. The most important things for data analysis is to understand data with data exploration and feature engineering. \nI would be appreciated for any comments and feedbacks. "}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}