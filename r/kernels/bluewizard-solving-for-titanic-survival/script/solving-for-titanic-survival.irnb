{"cells":[{"metadata":{"_uuid":"d6f18d00468510ddc82cc37795ed31717f960469","_execution_state":"idle","trusted":true},"cell_type":"code","source":"suppressWarnings(suppressMessages(library(\"tidyverse\")))\nsuppressWarnings(suppressMessages(library(\"caret\")))\nsuppressWarnings(suppressMessages(library(\"ranger\"))) # Faster RF modeling\nsuppressWarnings(suppressMessages(library(\"wru\"))) # Bayesian prediction of ethnicity\n\n# Custom function\n`%not in%` <- function (x, table) is.na(match(x, table, nomatch=NA_integer_))\n\n# Random seed\nset.seed(43287)\noptions(repr.plot.width=6, repr.plot.height=4)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"795059f43aa6b8230fd9d3ab5c2aab243aad018c"},"cell_type":"code","source":"# Load data\ntest.csv <- read.csv('../input/test.csv', stringsAsFactors = FALSE)\ntrain.csv <- read.csv('../input/train.csv', stringsAsFactors = FALSE)\ntrain.csv$Survived <- as.factor(train.csv$Survived)\ntrain <- train.csv\ntest <- test.csv\n\n# Impute missing ages in Test data\ntest.csv %>% select(-Ticket, -Name, -Cabin, -Embarked) -> test.ages\npre.proc <- preProcess(test.ages, method = \"bagImpute\")\ntest.ages <- predict(pre.proc, test.ages)\ntest$Age <- test.ages$Age\n\n# Impute missing ages in Training data\ntrain.csv %>% select(-Ticket, -Name, -Cabin, -Embarked) -> train.ages\npre.proc <- preProcess(train.ages, method = \"bagImpute\")\ntrain.ages <- predict(pre.proc, train.ages)\ntrain$Age <- train.ages$Age","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"2202af4d04c2b97720d4d3c0c8f7b012b52159bc"},"cell_type":"markdown","source":"# Features"},{"metadata":{"_uuid":"4581684b187d6862234875ff1e2004c513d65943"},"cell_type":"markdown","source":"## Honorifics (titles)"},{"metadata":{"trusted":true,"_uuid":"2782ae47db79797241d0aabc0aeb735d8c4e612f"},"cell_type":"code","source":"train %>%\n  rowwise %>%\n  mutate(title = gsub('(.*, )|(\\\\..*)', '', Name)) -> train","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"94e2cf37890ff7779dfd13e6a1f6c847d5f7d1cd"},"cell_type":"markdown","source":"Give unusual titles (e.g., \"the Countess\" or \"Capt\") a special status. These titles are associated with survival among women. I think this suggests we're on the right track."},{"metadata":{"trusted":true,"_uuid":"eaac65a0e330e3e3a400c9fb88d249f8de8e8a2e"},"cell_type":"code","source":"# Titles\ntrain %>%\n  ggplot(., aes(title, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by titles\")\n\n# Special titles\ntrain %>%\n  filter(title %not in% c(\"Mr\", \"Ms\", \"Mrs\", \"Miss\", \"Master\")) %>%\n  ggplot(., aes(title, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by special titles by sex\") + facet_wrap(~ Sex)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"57fbbb41d348c95f5891cbc6099d8474bce5bea5"},"cell_type":"markdown","source":"As I understand \"Master\" is a title given to young boys, while young girls are also often called \"Miss\". One person with a \"Dr\" title is a woman, and so has a higher likelihood of survival than her male counterparts, so we'll reclassify her."},{"metadata":{"trusted":true,"_uuid":"235d015ddca8a10be71b75b0c3b293eba2f4c1e9"},"cell_type":"code","source":"train %>%\n  mutate(child = ifelse(Age < 15, 1, 0),\n         title.class = case_when(\n            title %in% c(\"Master\") ~ \"Boy\",\n            title %in% c(\"Miss\") & child == 1 ~ \"Girl\",\n            title %in% c(\"Mrs\") ~ \"Woman\",\n            title %in% c(\"Miss\", \"Mme\", \"Mlle\", \"Ms\") ~ \"Lady\",\n            title %in% c(\"Dr\") & Sex == \"female\" ~ \"Woman\",\n            title %in% c(\"Mr\") ~ \"Man\",\n            title %in% c(\"Capt\", \"Don\", \"Col\", \"Major\", \"Dr\", \"Rev\", \n                         \"Dona\", \"Jonkheer\", \"the Countess\", \"Lady\", \"Sir\") ~ \"Special\",\n            TRUE ~ \"Other\")) -> train\n\ntrain %>%\n  ggplot(., aes(x=title.class, fill=Survived)) + \n  geom_bar() + \n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by title and sex\") + facet_wrap(~ Sex)\n\ntrain %>%\n  ggplot(., aes(x=title.class, fill=Survived)) + \n  geom_bar() + \n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by title and Pclass\") + facet_wrap(~ Pclass)\n\ntrain %>% ungroup %>% count(title.class)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"5f93edb05a95caf7c8c421d8fb30363bb8fb3b87"},"cell_type":"markdown","source":"## Family size\n\nCombine `SibSp` and `Parch` into a single \"family size\" variable."},{"metadata":{"trusted":true,"_uuid":"71ffddabeb002920883d12a01c5e58286c75a3d2"},"cell_type":"code","source":"train %>%\n  mutate(family.size = SibSp + Parch,\n         family.size.simple = case_when(\n            family.size == 0 ~ \"0\",\n            between(family.size, 1, 3) ~ \"1-3\",\n            family.size > 3 ~ \">3\")) -> train","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"80067bb7d4e95b346d6fee0195ad82ccaece1c19"},"cell_type":"code","source":"train %>%\n  ggplot(., aes(family.size)) +\n  geom_histogram(bins=30)\n\ntrain %>%\n  ggplot(., aes(family.size, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by family size and sex\") + facet_wrap(~ Sex)\n\ntrain %>%\n  ggplot(., aes(family.size.simple, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by family size and sex\") + facet_wrap(~ Sex)\n\ntrain %>%\n  ggplot(., aes(family.size.simple, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by family size and Pclass\") + facet_wrap(~ Pclass)\n\ntrain %>% ungroup %>% count(family.size.simple)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"991e11f1fbbeefe72e0f35b24f347674a825e7de"},"cell_type":"markdown","source":"## Fare\n\nGroup fares into reasonably small buckets."},{"metadata":{"trusted":true,"_uuid":"74c04f982033d3d6396ff70804c3d172b457b902"},"cell_type":"code","source":"train %>%\n  ggplot(., aes(Fare)) +\n  geom_histogram(bins=30)\n\ntrain %>%\n  rowwise %>%\n  mutate(Fare.grps = case_when(\n            between(Fare, 0, 100) ~ \"0-100\",\n            Fare > 100 ~ \">100\")) -> train\n\ntrain %>%\n  ggplot(., aes(Fare.grps, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by fare groups and class\") + facet_wrap(~ Pclass)\n\ntrain %>% ungroup %>% count(Fare.grps)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"6d83705cf0601b9667b102c9ec234354bbb03896"},"cell_type":"markdown","source":"## Passenger class"},{"metadata":{"trusted":true,"_uuid":"18e08d398e3f041d5c989dfc7bd9e81ab89f1798"},"cell_type":"code","source":"train %>%\n  ggplot(., aes(Pclass, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by passenger class\")","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"a39436d4a0597b8e2c9818b3d4e99f1db9e3ac4b"},"cell_type":"markdown","source":"## Age\n\nGroup ages into reasonably small buckets."},{"metadata":{"trusted":true,"_uuid":"fb54b831f153eb161cf03beec9788351eea5cf81"},"cell_type":"code","source":"train %>%\n  ggplot(., aes(Age)) +\n  geom_histogram(bins=30)\n\ntrain %>%\n  mutate(Age.grps = case_when(\n            between(Age, 0, 12) ~ \"young\",\n            between(Age, 12, 50) ~ \"middle\",\n            Age > 50 ~ \"old\")) -> train\n\ntrain %>%\n  ggplot(., aes(Age.grps, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Age groups survival by Pclass\") + facet_wrap(~ Pclass)\n\ntrain %>%\n  ggplot(., aes(Age.grps, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Age groups survival by Sex\") + facet_wrap(~ Sex)\n\ntrain %>%\n  ggplot(., aes(Age.grps, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Age groups survival by Sex and Pclass\") + facet_wrap(~ Sex*Pclass)\n\ntrain %>% count(Age.grps)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"f80c3cff73588e87788b4220df66268e4c0778b0"},"cell_type":"markdown","source":"## Ticket prefix\n\nExtract the prefix from the ticket, since this seems to represent the passenger's final destination. Combine codes that are similar or seem to have a typo."},{"metadata":{"trusted":true,"_uuid":"9c1b1261e73e69c15ace6e9ad7421e70c2591439","scrolled":true},"cell_type":"code","source":"train %>%\n    rowwise %>%\n    mutate(ticket.prefix = ifelse(grepl(\" \", Ticket), sub(\" .*\", \"\", Ticket), \"\"),\n           ticket.prefix = toupper(gsub(\"(\\\\.)|(\\\\/)\", \"\", ticket.prefix)),\n           ticket.prefix = case_when(\n            ticket.prefix == \"STONO\" ~ \"SOTONO\",\n            ticket.prefix == \"STONO2\" ~ \"SOTONO\",\n            ticket.prefix == \"SOTONOQ\" ~ \"SOTONO\",\n            ticket.prefix == \"SOTONO2\" ~ \"SOTONO\",\n            ticket.prefix == \"SCAH\" ~ \"SCA\",\n            ticket.prefix == \"SCA4\" ~ \"SCA\",\n            ticket.prefix == \"PPP\" ~ \"PP\",\n            ticket.prefix == \"CASOTON\" ~ \"CA\",\n            ticket.prefix == \"AS\" ~ \"A\",\n            ticket.prefix == \"A4\" ~ \"A\",\n            ticket.prefix == \"A5\" ~ \"A\",\n            ticket.prefix == \"SOP\" ~ \"SOPP\",\n            ticket.prefix == \"SWPP\" ~ \"\",\n            ticket.prefix == \"FA\" ~ \"\",\n            TRUE ~ ticket.prefix)) -> train\n\ntrain %>%\n  ggplot(., aes(ticket.prefix, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by ticket prefix\") +\n  coord_flip()","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"df3975315b8c35b1c43c10b22a53cec23c1b9805"},"cell_type":"markdown","source":"## Dead relatives"},{"metadata":{"trusted":true,"_uuid":"095621667bf2416d631664b651e8a02dbdd7207d"},"cell_type":"code","source":"train %>%\n    rowwise %>%\n    mutate(surname = gsub('( .*)|(*,*)', '', Name)) -> train\n\ntrain %>%\n  select(-Embarked) %>%\n  rowwise %>%\n  cbind(Embarked = train.csv$Embarked) %>%\n  mutate(surname.E = paste0(Embarked,\".\",surname)) -> train\n\ntrain %>%\n  ungroup %>%\n  group_by(surname.E) %>%\n  summarise(n.fam = n(),\n            dead.family = sum(1 - as.numeric(as.character(Survived))),\n            all.died = ifelse(dead.family/n.fam == 1, 1, 0)) -> dead.family.df\n\ntrain %>%\n  left_join(., dead.family.df, by = 'surname.E') -> train","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"850d8805bb4ea72f33bdced8bb6958674acfab66"},"cell_type":"code","source":"train %>%\n  ggplot(., aes(factor(dead.family), fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by dead relatives by Sex\") + facet_wrap(~ Sex)\n\ntrain %>%\n  ggplot(., aes(factor(dead.family), fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by dead relatives by Sex and Pclass\") + facet_wrap(~ Sex*Pclass)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"149f008edcb85e19f0b0b65fc301e67003b57fac"},"cell_type":"markdown","source":"## Race from surname\n\nPredict the passenger's race/ethnicity using their surname. Since there wasn't a lot of diversity on the Titanic, we'll combine into \"White\" and \"Non-white\" categories."},{"metadata":{"trusted":true,"_uuid":"706f56d40bab15a643188addfe1d11ecebe978b3"},"cell_type":"code","source":"predict_race(train, surname.only = T) -> train\n\ntrain %>%\n  rowwise %>%\n  mutate(race = case_when(\n            pred.whi == max(pred.whi, pred.bla, pred.his, pred.asi, pred.oth) ~ \"White\",\n            TRUE ~ \"Non-White\"\n          )) ->train\n\ntrain %>%\n  ggplot(., aes(race, fill=Survived)) + \n  geom_bar() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + \n  ggtitle(\"Survival by race and sex\") + facet_wrap(~ Sex)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"ec006f6820ed708d1c30df48c043f5904d757a95"},"cell_type":"markdown","source":"# Models"},{"metadata":{"_uuid":"ad9f9b5611664e23112a58e7317f4da6404775b8"},"cell_type":"markdown","source":"## Random forest"},{"metadata":{"trusted":true,"_uuid":"36d1023cf5025b2fce23325eabb3121b3ba2d293"},"cell_type":"code","source":"trctrl <- trainControl(\n  method = \"repeatedcv\", \n    number = 10,\n    repeats = 10)\n\ntgctrl <- expand.grid(\n    .mtry = 7,\n    .splitrule = \"gini\",\n    .min.node.size = 10)\n\nfit.rf <- train(Survived ~ \n                    Sex + \n                    title.class + \n                    family.size.simple + \n                    Fare.grps + \n                    Pclass + \n                    Age.grps + \n                    Embarked + \n                    ticket.prefix + \n                    race,\n                    #all.died, # We won't train on this, but we'll use it later to flip predictions\n             data = train, \n             trControl = trctrl,\n             metric = \"Accuracy\",\n             importance = \"impurity\",\n             tuneGrid = tgctrl,\n             num.trees = 2000,\n             method = \"ranger\")\nfit.rf","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"8aea729528d0fdb2af831f9ae783eaa2c8d948e4"},"cell_type":"markdown","source":"# Predict!"},{"metadata":{"_uuid":"8ec0b04c9a98af3357dd55153eeb478f62b78805"},"cell_type":"markdown","source":"## Apply transforms to test data"},{"metadata":{"trusted":true,"_uuid":"72f0d033d8df0df179e34e299df79437c1a141c3","scrolled":true},"cell_type":"code","source":"test %>% \n  mutate(Fare = ifelse(PassengerId == 1044, \n                       median((test %>% filter(!is.na(Fare), \n                                               Pclass == 3, \n                                               PassengerId != 1044))$Fare), Fare)) -> test\n\ntest %>%\n  rowwise %>%\n  mutate(title = gsub('(.*, )|(\\\\..*)', '', Name),\n         child = ifelse(Age < 15, 1, 0),\n         title.class = case_when(\n            title %in% c(\"Master\") ~ \"Boy\",\n            title %in% c(\"Miss\") & child == 1 ~ \"Girl\",\n            title %in% c(\"Mrs\") ~ \"Woman\",\n            title %in% c(\"Miss\", \"Mme\", \"Mlle\", \"Ms\") ~ \"Lady\",\n            title %in% c(\"Dr\") & Sex == \"female\" ~ \"Woman\",\n            title %in% c(\"Mr\") ~ \"Man\",\n            title %in% c(\"Capt\", \"Don\", \"Col\", \"Major\", \"Dr\", \"Rev\", \n                         \"Dona\", \"Jonkheer\", \"the Countess\", \"Lady\", \"Sir\") ~ \"Special\",\n            TRUE ~ \"Other\"),\n         family.size = SibSp + Parch,\n         family.size.simple = case_when(\n            family.size == 0 ~ \"0\",\n            between(family.size, 1, 3) ~ \"1-3\",\n            family.size > 3 ~ \">3\"\n          ),\n         Fare.grps = case_when(\n            between(Fare, 0, 100) ~ \"0-100\",\n            Fare > 100 ~ \">100\",\n          ),\n         Age.grps = case_when(\n            between(Age, 0, 12) ~ \"young\",\n            between(Age, 12, 50) ~ \"middle\",\n            Age > 50 ~ \"old\"\n          ),\n         ticket.prefix = ifelse(grepl(\" \", Ticket), sub(\" .*\", \"\", Ticket), \"\"),\n         ticket.prefix = toupper(gsub(\"(\\\\.)|(\\\\/)\", \"\", ticket.prefix)),\n           ticket.prefix = case_when(\n            ticket.prefix == \"STONO\" ~ \"SOTONO\",\n            ticket.prefix == \"STONOQ\" ~ \"SOTONO\",\n            ticket.prefix == \"STONO2\" ~ \"SOTONO\",\n            ticket.prefix == \"SOTONOQ\" ~ \"SOTONO\",\n            ticket.prefix == \"SOTONO2\" ~ \"SOTONO\",\n            ticket.prefix == \"SCAH\" ~ \"SCA\",\n            ticket.prefix == \"SCA4\" ~ \"SCA\",\n            ticket.prefix == \"SCA3\" ~ \"SCA\",\n            ticket.prefix == \"PPP\" ~ \"PP\",\n            ticket.prefix == \"CASOTON\" ~ \"CA\",\n            ticket.prefix == \"AS\" ~ \"A\",\n            ticket.prefix == \"A4\" ~ \"A\",\n            ticket.prefix == \"A5\" ~ \"A\",\n            ticket.prefix == \"SOP\" ~ \"SOPP\",\n            ticket.prefix == \"SWPP\" ~ \"\",\n            ticket.prefix == \"FA\" ~ \"\",\n            ticket.prefix == \"AQ3\" ~ \"\",\n            ticket.prefix == \"AQ4\" ~ \"\",\n            ticket.prefix == \"LP\" ~ \"\",\n            TRUE ~ ticket.prefix),\n         surname = gsub('( .*)|(*,*)', '', Name),\n         surname.E = paste0(Embarked, \".\", surname)) -> test.final\n\n# Ethnicity\npredict_race(test.final, surname.only = T) -> test.final\n\ntest.final %>%\n  rowwise %>%\n  mutate(race = case_when(\n            pred.whi == max(pred.whi, pred.bla, pred.his, pred.asi, pred.oth) ~ \"White\",\n            TRUE ~ \"Non-White\")) -> test.final\n\n# Dead family members\ntest.final %>%\n  left_join(., dead.family.df, by = 'surname.E') -> test.final","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"bde9ac3028788ac9e78ba748113437e685267777"},"cell_type":"markdown","source":"## Predict using random forest"},{"metadata":{"trusted":true,"_uuid":"5690a32aeb03262485f49a1da44722fb5a3ffebb"},"cell_type":"code","source":"Survived <- predict(fit.rf, test.final)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"87e59779c182cfddfbd452f02829d35987643e20"},"cell_type":"markdown","source":"If all family members died and the passenger had more than 1 family member, then flip a prediction of survival to a prediction of no survival."},{"metadata":{"trusted":true,"_uuid":"2509c180d3b8e73c8380c9f8b87726b90818384f"},"cell_type":"code","source":"Survived <- as.numeric(as.character(Survived))\n\ntest.final %>%\n    cbind(., Survived) -> test.pred\n\ntest.pred %>%\n    mutate(Survived = case_when(\n                          is.na(n.fam) ~ Survived,\n                          all.died == 1 & n.fam > 1 & Survived == 1 ~ 0,\n                          TRUE ~ Survived\n                        )\n           ) -> test.pred\n\npred.rf <- data.frame(\n  cbind(\n    PassengerId = as.integer(as.character(test.final$PassengerId)),\n    Survived = as.integer(as.character(test.pred$Survived))\n    )\n  )        \n\nwrite_csv(pred.rf, 'rf.output.csv')","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}