{"cells":[{"metadata":{"_uuid":"9cb9089a686783fbe8c2a42939e5465285e822fc","_execution_state":"idle","trusted":true},"cell_type":"code","source":"## Importing packages\n\n# This R environment comes with all of CRAN and many other helpful packages preinstalled.\n# You can see which packages are installed by checking out the kaggle/rstats docker image: \n# https://github.com/kaggle/docker-rstats\n\nlibrary(tidyverse) # metapackage with lots of helpful functions\n\n## Running code\n\n# In a notebook, you can run a single code cell by clicking in the cell and then hitting \n# the blue arrow to the left, or by clicking in the cell and pressing Shift+Enter. In a script, \n# you can run code by highlighting the code you want to run and then clicking the blue arrow\n# at the bottom of this window.\n\n## Reading in files\n\n# You can access files from datasets you've added to this kernel in the \"../input/\" directory.\n# You can see the files added to this kernel by running the code below. \n\nlist.files(path = \"../input\")\n\n## Saving data\n\n# If you save any files or images, these will be put in the \"output\" directory. You \n# can see the output directory by committing and running your kernel (using the \n# Commit & Run button) and then checking out the compiled version of your kernel.","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3962dc6be5550d10791633495b0f51b948ea0c1e"},"cell_type":"code","source":"#Loading library\nlibrary(tidyverse)\nlibrary('ggplot2') # visualization\nlibrary('ggthemes') # visualization\nlibrary('scales') # visualization\nlibrary('dplyr') # data manipulation\nlibrary('mice') # imputation\nlibrary('randomForest') # classification algorithm\n\n#Checking the files loaded into kernel\nlist.files(path = \"../input\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f0667b30b134b205e42df7e219aeaeadc28058da"},"cell_type":"code","source":"#Checking the working directory\ngetwd()\n#loading the data files\ntrain <- read.csv(\"../input/train.csv\",stringsAsFactors=F )\ntest <- read.csv(\"../input/test.csv\",stringsAsFactors=F)\n\nfull <- bind_rows(train,test)\n#Checking the structure of data\nstr(full)\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"302009daa408b9008eaea9ab8d91bbac1a72b42b"},"cell_type":"code","source":"#Create the user define function for descriptive analysis\nvar_summ <- function(x){\n    if(class(x)==\"numeric\"){\n        var_type=class(x)\n        n <- length(x)\n        n_miss <- sum(is.na(x))\n        mean <- mean(x,na.rm=T)\n        std <- sd(x,na.rm=T)\n        min <- min(x,na.rm=T)\n        max <- max(x,na.rm=T)\n        return(c(var_type=var_type,n=n,n_miss=n_miss,mean=mean,std=std,min=min,max=max))\n    }\n    else{\n        var_type=class(x)\n        n = length(x)\n        n_miss = sum(is.na(x))\n         return(c(n=n,n_miss=n_miss))\n    }\n}\n\n#checking the variable is numeric or not.\nnum_var <- sapply(full,is.numeric)\n\n#apply above defined function on the data\nnum_data <- t(data.frame(apply(full[num_var],2,var_summ)))\nnum_data\ncat_data <- data.frame(apply(full[!num_var],2,var_summ))\ncat_data\n\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"234b26285b0c84169b09668ef4c4d848dc1e316b"},"cell_type":"code","source":"#playing with name variable-extracting title of name\nfull$Title <- gsub('(.*, )|(\\\\..*)', '', full$Name)\n\n#Checking title with gender\ntable(full$Sex,full$Title)\n#combined the rare title into group\nrare_title <- c(\"Capt\",\"Col\",\"Don\",\"Dona\",\"Dr\",\"Jonkheer\",\"Lady\",\"Major\",\"Mlle\",\"Mme\",\"Ms\",\"Rev\",\"Sir\",\"the Countess\")\n\nfull$Title[full$Title %in% rare_title] <- \"rare_title\"\n\n#Show title count by sex.\ntable(full$Sex,full$Title)\n\n# Finally, grab surname from passenger name\nfull$Surname <- sapply(full$Name,  \n                      function(x) strsplit(x, split = '[,.]')[[1]][1])","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4a2ad06fb9769b89e3107e4b85b5c6774627bcc8"},"cell_type":"code","source":"#family size calculation\nfull$Fsize <- full$Parch+full$SibSp+1\n\n#create a family variable\nfull$Family <- paste(full$Surname, full$Fsize, sep='_')\n\nggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +\n  geom_bar(stat='count', position='dodge') +\n  scale_x_continuous(breaks=c(1:11)) +\n  labs(x = 'Family Size') +\n  theme_few()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"11f6175279c04046e85fe2f9636a916d493a8c5a"},"cell_type":"code","source":"#grouping family by its size\nfull$FsizeD[full$Fsize==1] <- \"Singleton\"\nfull$FsizeD[full$Fsize<5 & full$Fsize>1]  <- \"Small\"\nfull$FsizeD[full$Fsize>4] <- \"Large\"\n\n#Checking survival by familysize\ntable(full$Survive,full$FsizeD)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"0608442580afb6e4a3f1b93058acd8bb5efb050b"},"cell_type":"code","source":"# Create a Deck Variable\nfull$Cabin[1:28]\nstrsplit(full$Cabin[2],NULL)[[1]][1]\nfull$Deck <- factor(sapply(full$Cabin,function(x) strsplit(x,NULL)[[1]][1]))\ntable(full$Deck)                           \n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8969d5ce3f24afeb50d7d87af4f69ed4b6d61def"},"cell_type":"code","source":"#Missing Value Treatment\nunique(full$Embarked)\ntable(full$Embarked)\nfull[c(62,830),]\n\n#removing missing value\nembarked_value <- full %>% filter(PassengerId !=62 & PassengerId !=830)\n\n# Use ggplot2 to visualize embarkment, passenger class, & median fare\nggplot(embarked_value,aes(x=Embarked,y=Fare, fill=factor(Pclass)))+\ngeom_boxplot()+\ngeom_hline(aes(yintercept=80), colour='red', linetype='dashed', lwd=2)+\nscale_y_continuous(labels=dollar_format())+\ntheme_few()\n\n# Since their fare was $80 for 1st class, they most likely embarked from 'C'\nfull$Embarked[c(62,830)] <- 'C'\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"fdd606d7e70ffa7df6078cbef2737136826dc80b"},"cell_type":"code","source":"#Fare missing Value Treatmet\nfull[is.na(full$Fare),]\nfull[1044,]\n\n#cheking fare distribution for class=3 & embarked=S\nggplot(full[full$Pclass==3 & full$Embarked=='S',],aes(x=Fare))+\ngeom_density(fill='#99d6ff',alpha=0.4)+\ngeom_vline(aes(xintercept=median(Fare,na.rm=T)),colour='red',linetype='dashed',lwd=1)+\nscale_x_continuous(labels=dollar_format())+\ntheme_few()\n\n# Replace missing fare value with median fare for class/embarkment\nfull$Fare[1044] <- median(full[full$Pclass==3 & full$Embarked=='S',]$Fare,na.rm=T)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3152b64083bd5ff53d72cf056fdc1587dab693de"},"cell_type":"code","source":"#Age missing value treatment with predictive imputation\n#no of missing age value\nsum(is.na(full$Age))\n\n#we are going to use MICE imputation\nfactor_vars <- c('PassengerId','Pclass','Sex','Embarked','Title','Surname','Family','FsizeD')\nfull[factor_vars] <- lapply(full[factor_vars],function(x) as.factor(x))\n\n# Set a random seed\nset.seed(129)\n\n# Perform mice imputation, excluding certain less-than-useful variables:\nmice_mod <- mice(full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Family','Surname','Survived')], method='rf')\n\n#save the complete output\nmice_output <- complete(mice_mod)                            ","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"155af2edf8985f43d61e001e7733cb9068741cce"},"cell_type":"code","source":"# Plot age distributions\npar(mfrow=c(1,2))\nhist(full$Age, freq=F, main='Age: Original Data', \n  col='darkgreen', ylim=c(0,0.04))\nhist(mice_output$Age, freq=F, main='Age: MICE Output', \n  col='lightgreen', ylim=c(0,0.04))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"aaa3ebdb54c9e834ca41b372e85b2a4b5516e9dc"},"cell_type":"code","source":"#now replace the age to mice age\nfull$Age <- mice_output$Age\nsum(is.na(full$Age))\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"2e9df85b9a84345a00dca45afbb482fde4489ebb"},"cell_type":"code","source":"# Create the column child, and indicate whether child or adult\nfull$Child[full$Age < 18] <- 'Child'\nfull$Child[full$Age >= 18] <- 'Adult'\n\n# Show counts\ntable(full$Child, full$Survived)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"1de486c4e5a42f434236ae52654b29be41ac57ad"},"cell_type":"code","source":"# Adding Mother variable\nfull$Mother <- 'Not Mother'\nfull$Mother[full$Sex == 'female' & full$Parch > 0 & full$Age > 18 & full$Title != 'Miss'] <- 'Mother'\n\n# Show counts\ntable(full$Mother, full$Survived)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a16bfa8af6a7706134d919d7f2c039dcfc090ed4"},"cell_type":"code","source":"# Finish by factorizing our two new factor variables\nfull$Child  <- factor(full$Child)\nfull$Mother <- factor(full$Mother)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"b80673854a0b36ff3612097cea6295ff4ff46bc1"},"cell_type":"code","source":"#Now all the variable is treated & going for the prediction using randomforest\n# Split the data back into a train set and a test set\ntrain <- full[1:891,]\ntest <- full[892:1309,]\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"d20099a39430f58ba8330fc30d04b6a233e0aa5c"},"cell_type":"code","source":"#Building the Model\n#set seed\nset.seed(101)\n\n#build the model using random forest\nrf_model <- randomForest(factor(Survived)~Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+Title+FsizeD+Child+Mother,data=train)\nrf_model\n#Giving 16.61% Error which we can accept right now","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"00fa223a6edaae9afe0de1b79d9b8d2499726f01"},"cell_type":"code","source":"#Applyin the model to test data set to predict\nprediction <- predict(rf_model,test)\n\n#Save the prediction into data frame\nsolution <- data.frame(PassengerID=test$PassengerId,Survived=prediction)\ntable(solution$Survived)\n\n#Write solution to a csv file\nwrite.csv(solution,'rf_model_solution.csv',row.names=F)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a433457bcab655f7bfe2a7ebbdbbf830216dca9f"},"cell_type":"code","source":"","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"b31f8071c78f6c310801d0e3a3ae7c7deb048044"},"cell_type":"code","source":"","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}