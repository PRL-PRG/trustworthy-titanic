
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> # This R environment comes with all of CRAN preinstalled, as well as many other helpful packages
> # The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats
> # For example, here's several helpful packages to load in 
> 
> # Load packages
> library('ggplot2') # visualization
Warning message:
package â€˜ggplot2â€™ was built under R version 3.6.2 
> library('ggthemes') # visualization
> library('scales') # visualization
Warning message:
package â€˜scalesâ€™ was built under R version 3.6.2 
> library('dplyr') # data manipulation

Attaching package: â€˜dplyrâ€™

The following objects are masked from â€˜package:statsâ€™:

    filter, lag

The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

Warning message:
package â€˜dplyrâ€™ was built under R version 3.6.2 
> library('mice') # imputation

Attaching package: â€˜miceâ€™

The following objects are masked from â€˜package:baseâ€™:

    cbind, rbind

Warning message:
package â€˜miceâ€™ was built under R version 3.6.2 
> library('randomForest') # classification algorithm
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: â€˜randomForestâ€™

The following object is masked from â€˜package:dplyrâ€™:

    combine

The following object is masked from â€˜package:ggplot2â€™:

    margin

> library(VIM) # for NA
Loading required package: colorspace
Loading required package: grid
VIM is ready to use.

Suggestions and bug-reports can be submitted at: https://github.com/statistikat/VIM/issues

Attaching package: â€˜VIMâ€™

The following object is masked from â€˜package:datasetsâ€™:

    sleep

> library(dummies) #For String Index
dummies-1.5.6 provided by Decision Patterns

> # For modeling and predictions
> library(caret)
Loading required package: lattice
> library(glmnet)
Loading required package: Matrix
Loaded glmnet 4.0-2
Warning message:
package â€˜glmnetâ€™ was built under R version 3.6.2 
> library(ranger)

Attaching package: â€˜rangerâ€™

The following object is masked from â€˜package:randomForestâ€™:

    importance

> library(e1071)
> # Input data files are available in the "../input/" directory.
> # For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory
> 
> system("ls ../input")
gender_submission.csv
test.csv
train.csv
> traindata=read.csv("../input/train.csv",header = TRUE, stringsAsFactors  = FALSE,na.strings=c("NA","NaN", ""," ") )
> 
> testdata=read.csv("../input/test.csv",header = TRUE, stringsAsFactors  = FALSE,na.strings=c("NA","NaN", ""," "))
> testdata$Survived=NA
> fulldata=rbind(traindata,testdata)
> #Check Null Data
> aggr_plot <- aggr(fulldata, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(fulldata), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))

 Variables sorted by number of missings: 
    Variable        Count
       Cabin 0.7746371276
    Survived 0.3193277311
         Age 0.2009167303
    Embarked 0.0015278839
        Fare 0.0007639419
 PassengerId 0.0000000000
      Pclass 0.0000000000
        Name 0.0000000000
         Sex 0.0000000000
       SibSp 0.0000000000
       Parch 0.0000000000
      Ticket 0.0000000000
Warning message:
In plot.aggr(res, ...) : not enough horizontal space to display frequencies
> #Cabin has 80% data missing, Age has 20 % Missing and Embarked and Fare had less then 2%
> 
> #First Get Last name (family Name ) and Title details from name
> 
> 
> fulldata$Title=sub(' ','',sapply(fulldata$Name,FUN=function(x){strsplit(x,split='[.,.]')[[1]][2]}))
> fulldata$Lastname=sub(' ','',sapply(fulldata$Name,FUN=function(x){strsplit(x,split='[.,.]')[[1]][1]}))
> #List of titles
> unique(fulldata$Title)
 [1] "Mr"           "Mrs"          "Miss"         "Master"       "Don"         
 [6] "Rev"          "Dr"           "Mme"          "Ms"           "Major"       
[11] "Lady"         "Sir"          "Mlle"         "Col"          "Capt"        
[16] "the Countess" "Jonkheer"     "Dona"        
> table (fulldata$Sex,fulldata$Title)
        
         Capt Col Don Dona  Dr Jonkheer Lady Major Master Miss Mlle Mme  Mr Mrs
  female    0   0   0    1   1        0    1     0      0  260    2   1   0 197
  male      1   4   1    0   7        1    0     2     61    0    0   0 757   0
        
          Ms Rev Sir the Countess
  female   2   0   0            1
  male     0   8   1            0
> 
> # Map Title to smaller subset
> 
> map <- new.env(hash=T, parent=emptyenv())
> key <- c( "Mr","Mrs"    ,"Lady"  ,"Mme" ,"Ms" ,"Miss" ,"Mlle","Master","Rev","Don","Sir","Dr","Col" ,"Capt","Major")  
> keyvalue <- c("Mr","Mrs","Mrs","Mrs","Miss","Miss","Miss","Master","Rev","Mr","Sir","Dr","Col","Col","Col") 
> for(keyv in key)
+ {
+   map[[keyv]]=(keyvalue[key==keyv])
+ }
> 
> fulldata$Title=sapply(fulldata$Title,FUN=function(x){map[[x]]})
> fulldata$Title=as.character(fulldata$Title)
> fulldata$Title[c(760, 1306)] <- 'Mrs' 
> fulldata$Title[c(823)] <- 'Mr'
> fulldata$FamilySize=fulldata$SibSp+ fulldata$Parch+1
> 
> #ppl who were travlling on same ticket group 
> 
> fulldata$Groupticket=NA
> fulldata <- (transform(fulldata, Groupticket = match(Ticket, unique(Ticket))))
> 
> #ppl sharing same family name
> 
> fulldata$Samesurname=NA
> fulldata <- (transform(fulldata, Samesurname = match(Lastname, unique(Lastname))))
> fulldata$Groupticket <- as.factor(fulldata$Groupticket)
> fulldata$Samesurname <- as.factor(fulldata$Samesurname)
> 
> 
> fulldata <- fulldata %>% 
+   group_by(Groupticket) %>% 
+   mutate(TicketGroupSize = n()) %>%
+   ungroup()
> 
> fulldata <- fulldata %>% 
+   group_by(Samesurname) %>% 
+   mutate(FamilynameSize = n()) %>%
+   ungroup()
> 
>  fulldata$Deck=sub(' ','',sapply(fulldata$Cabin,FUN=function(x){substring(x,0,1)}))
> 
> 
> #Check Null Records
> 
> #Check Embarked
> 
> fulldata[(which(is.na(fulldata$Embarked))) ,c(1,3,6,10,20) ]
[90m# A tibble: 2 x 5[39m
  PassengerId Pclass   Age  Fare Deck 
        [3m[90m<int>[39m[23m  [3m[90m<int>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m
[90m1[39m          62      1    38    80 B    
[90m2[39m         830      1    62    80 B    
> 
> 
> embark_fare <- fulldata %>%
+   filter(PassengerId != 62 & PassengerId != 830)
> 
> # Use ggplot2 to visualize embarkment, passenger class, & median fare
> ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
+   geom_boxplot() +
+   geom_hline(aes(yintercept=80), 
+              colour='red', linetype='dashed', lwd=2) +
+   scale_y_continuous(labels=dollar_format()) +
+   theme_few()
Warning message:
Removed 1 rows containing non-finite values (stat_boxplot). 
> fulldata$Embarked[c(62, 830)] <- 'C'
> 
> #Check Fare
> 
> fulldata[(which(is.na(fulldata$Fare) | fulldata$Fare==0)) ,c(1,3,6,10,20) ]
[90m# A tibble: 18 x 5[39m
   PassengerId Pclass   Age  Fare Deck 
         [3m[90m<int>[39m[23m  [3m[90m<int>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m
[90m 1[39m         180      3  36       0 [31mNA[39m   
[90m 2[39m         264      1  40       0 B    
[90m 3[39m         272      3  25       0 [31mNA[39m   
[90m 4[39m         278      2  [31mNA[39m       0 [31mNA[39m   
[90m 5[39m         303      3  19       0 [31mNA[39m   
[90m 6[39m         414      2  [31mNA[39m       0 [31mNA[39m   
[90m 7[39m         467      2  [31mNA[39m       0 [31mNA[39m   
[90m 8[39m         482      2  [31mNA[39m       0 [31mNA[39m   
[90m 9[39m         598      3  49       0 [31mNA[39m   
[90m10[39m         634      1  [31mNA[39m       0 [31mNA[39m   
[90m11[39m         675      2  [31mNA[39m       0 [31mNA[39m   
[90m12[39m         733      2  [31mNA[39m       0 [31mNA[39m   
[90m13[39m         807      1  39       0 A    
[90m14[39m         816      1  [31mNA[39m       0 B    
[90m15[39m         823      1  38       0 [31mNA[39m   
[90m16[39m        [4m1[24m044      3  60.5    [31mNA[39m [31mNA[39m   
[90m17[39m        [4m1[24m158      1  [31mNA[39m       0 [31mNA[39m   
[90m18[39m        [4m1[24m264      1  49       0 B    
> 
> #find value for Fare 0 also
> 
> fulldata$Fare[fulldata$Fare==0]=NA
> str(fulldata)
tibble [1,309 Ã— 20] (S3: tbl_df/tbl/data.frame)
 $ PassengerId    : int [1:1309] 1 2 3 4 5 6 7 8 9 10 ...
 $ Survived       : int [1:1309] 0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass         : int [1:1309] 3 1 3 1 3 3 1 3 3 2 ...
 $ Name           : chr [1:1309] "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex            : chr [1:1309] "male" "female" "female" "female" ...
 $ Age            : num [1:1309] 22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp          : int [1:1309] 1 1 0 1 0 0 0 3 0 1 ...
 $ Parch          : int [1:1309] 0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket         : chr [1:1309] "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare           : num [1:1309] 7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin          : chr [1:1309] NA "C85" NA "C123" ...
 $ Embarked       : chr [1:1309] "S" "C" "S" "S" ...
 $ Title          : chr [1:1309] "Mr" "Mrs" "Miss" "Mrs" ...
 $ Lastname       : chr [1:1309] "Braund" "Cumings" "Heikkinen" "Futrelle" ...
 $ FamilySize     : num [1:1309] 2 2 1 2 1 1 1 5 3 2 ...
 $ Groupticket    : Factor w/ 929 levels "1","2","3","4",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ Samesurname    : Factor w/ 875 levels "1","2","3","4",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ TicketGroupSize: int [1:1309] 1 2 1 2 1 1 2 5 3 2 ...
 $ FamilynameSize : int [1:1309] 2 2 1 2 2 3 2 5 6 2 ...
 $ Deck           : Named chr [1:1309] NA "C" NA "C" ...
  ..- attr(*, "names")= chr [1:1309] NA "C85" NA "C123" ...
> 
> 
> #replace fare with Mean values     
>          
> fulldata[, names(fulldata) %in% c('Pclass','Deck','Embarked','Fare')]=  fulldata[, names(fulldata) %in% c('Pclass','Deck','Embarked','Fare')] %>%
+   group_by(Pclass,Deck,Embarked) %>% 
+   mutate_each(funs(replace(Fare, which(is.na(Fare)),
+                            mean(Fare,na.rm = TRUE))))
Warning messages:
1: `funs()` is deprecated as of dplyr 0.8.0.
Please use a list of either functions or lambdas: 

  # Simple named list: 
  list(mean = mean, median = median)

  # Auto named with `tibble::lst()`: 
  tibble::lst(mean, median)

  # Using lambdas
  list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))
[90mThis warning is displayed once every 8 hours.[39m
[90mCall `lifecycle::last_warnings()` to see where this warning was generated.[39m 
2: `mutate_each_()` is deprecated as of dplyr 0.7.0.
Please use `across()` instead.
[90mThis warning is displayed once every 8 hours.[39m
[90mCall `lifecycle::last_warnings()` to see where this warning was generated.[39m 
> 
> 
> 
> # convert Values into factor
> 
> str(fulldata)
tibble [1,309 Ã— 20] (S3: tbl_df/tbl/data.frame)
 $ PassengerId    : int [1:1309] 1 2 3 4 5 6 7 8 9 10 ...
 $ Survived       : int [1:1309] 0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass         : int [1:1309] 3 1 3 1 3 3 1 3 3 2 ...
 $ Name           : chr [1:1309] "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex            : chr [1:1309] "male" "female" "female" "female" ...
 $ Age            : num [1:1309] 22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp          : int [1:1309] 1 1 0 1 0 0 0 3 0 1 ...
 $ Parch          : int [1:1309] 0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket         : chr [1:1309] "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare           : num [1:1309] 7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin          : chr [1:1309] NA "C85" NA "C123" ...
 $ Embarked       : chr [1:1309] "S" "C" "S" "S" ...
 $ Title          : chr [1:1309] "Mr" "Mrs" "Miss" "Mrs" ...
 $ Lastname       : chr [1:1309] "Braund" "Cumings" "Heikkinen" "Futrelle" ...
 $ FamilySize     : num [1:1309] 2 2 1 2 1 1 1 5 3 2 ...
 $ Groupticket    : Factor w/ 929 levels "1","2","3","4",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ Samesurname    : Factor w/ 875 levels "1","2","3","4",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ TicketGroupSize: int [1:1309] 1 2 1 2 1 1 2 5 3 2 ...
 $ FamilynameSize : int [1:1309] 2 2 1 2 2 3 2 5 6 2 ...
 $ Deck           : Named chr [1:1309] NA "C" NA "C" ...
  ..- attr(*, "names")= chr [1:1309] NA "C85" NA "C123" ...
> 
> 
> factor_vars <- c('Pclass','Sex','Embarked','Title','Survived')
> 
> fulldata[factor_vars] <- lapply(fulldata[factor_vars], function(x) as.factor(x))
> 
> 
> #pridict Age based on Mice
> 
> 
> mice_mod <- mice(fulldata[, names(fulldata) %in% c('Pclass','Sex','SibSp','Parch','Fare','Embarked','FamilySize','FamilynameSize','TicketGroupSize','Age')], method='rf') 

 iter imp variable
  1   1  Age
  1   2  Age
  1   3  Age
  1   4  Age
  1   5  Age
  2   1  Age
  2   2  Age
  2   3  Age
  2   4  Age
  2   5  Age
  3   1  Age
  3   2  Age
  3   3  Age
  3   4  Age
  3   5  Age
  4   1  Age
  4   2  Age
  4   3  Age
  4   4  Age
  4   5  Age
  5   1  Age
  5   2  Age
  5   3  Age
  5   4  Age
  5   5  Age
Warning message:
Number of logged events: 25 
> predicted_output <- complete(mice_mod)
> #Check Age distribution 
> par(mfrow=c(1,2))
> hist(fulldata$Age, freq=F, main='Age: Original Data', 
+      col='darkgreen', ylim=c(0,0.04))
> hist(predicted_output$Age, freq=F, main='Age: MICE Output', 
+      col='lightgreen', ylim=c(0,0.04))
> 
> 
> fulldata$Age[is.na(fulldata$Age)] <- predicted_output$Age[is.na(fulldata$Age)]
> 
> 
> #Predict Traveller Deck based on Fare 
> 
> 
> 
> predicted_deck <- train(
+   Deck ~ Pclass +  Fare + Embarked ,
+   tuneGrid = data.frame(mtry = c(2, 3, 7)),
+   data = fulldata[!is.na(fulldata$Deck), ],
+   method = "ranger",
+   trControl = trainControl(
+     method = "cv", number = 10,
+     repeats = 10, verboseIter = TRUE),
+   importance = 'impurity'
+ )
Error: The tuning parameter grid should have columns mtry, splitrule, min.node.size
In addition: Warning message:
`repeats` has no meaning for this resampling method. 
Execution halted
