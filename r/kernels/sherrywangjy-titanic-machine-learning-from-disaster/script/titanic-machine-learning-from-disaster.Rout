
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> # This R script will run on our backend. You can write arbitrary code here!
> 
> # Many standard libraries are already installed, such as randomForest
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.
> library(mice)

Attaching package: ‘mice’

The following objects are masked from ‘package:base’:

    cbind, rbind

Warning message:
package ‘mice’ was built under R version 3.6.2 
> library(lattice)
> # The train and test data is stored in the ../input directory
> train <- read.csv("../input/train.csv")
> test  <- read.csv("../input/test.csv")
> test$Survived<-0
> dataTita<-rbind(train,test)
> #survived       (0 = No; 1 = Yes)
> #pclass          Passenger Class   (1 = 1st; 2 = 2nd; 3 = 3rd)
> #name            Name
> #sex             Sex
> #age             Age
> #sibsp           Number of Siblings/Spouses Aboard
> #parch           Number of Parents/Children Aboard
> #ticket          Ticket Number
> #fare            Passenger Fare
> #cabin           Cabin
> #embarked        Port of Embarkation   (C = Cherbourg; Q = Queenstown; S = Southamp
> 
> #check,data 
> str(dataTita)
'data.frame':	1309 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : num  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : Factor w/ 1307 levels "Abbing, Mr. Anthony",..: 109 191 358 277 16 559 520 629 417 581 ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : Factor w/ 929 levels "110152","110413",..: 524 597 670 50 473 276 86 396 345 133 ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : Factor w/ 187 levels "","A10","A14",..: 1 83 1 57 1 1 131 1 1 1 ...
 $ Embarked   : Factor w/ 4 levels "","C","Q","S": 4 2 4 4 4 3 4 4 4 2 ...
> dataTita$Name<-as.character(dataTita$Name)
> dataTita$title<-sapply(dataTita$Name,FUN=function(x){strsplit(x,"[,.]")[[1]][[2]]})
> dataTita$title<-gsub(" ","",dataTita$title)
> dataTita$title[dataTita$title%in%c('Mlle','Ms','Lady')]<-'Miss'
> dataTita$title[dataTita$title=="Mme"]<-"Mrs"
> dataTita$title[dataTita$title %in% c("Capt","Col","Don","Dona","Dr","Jonkheer","Master",
+                                      "Major","Rev","Sir","theCountess")]<-"rare title"
> dataTita$Family<-apply(dataTita[,names(dataTita)%in%c("SibSp","Parch")],1,sum)
> 
> #find missing values
> apply(dataTita,2,FUN=function(x){sum(is.na(x))})
PassengerId    Survived      Pclass        Name         Sex         Age 
          0           0           0           0           0         263 
      SibSp       Parch      Ticket        Fare       Cabin    Embarked 
          0           0           0           1           0           0 
      title      Family 
          0           0 
> apply(dataTita,2,FUN=function(x){sum(x=="")})
PassengerId    Survived      Pclass        Name         Sex         Age 
          0           0           0           0           0          NA 
      SibSp       Parch      Ticket        Fare       Cabin    Embarked 
          0           0           0          NA        1014           2 
      title      Family 
          0           0 
> 
> #missing value imputation
> dataTita$Embarked[c(62,830)]<-"S"
> dataTita$Fare[1044]<-mean(dataTita[which(dataTita$Pclass==3 & 
+                                            dataTita$PassengerId!=1044),9])
Warning message:
In mean.default(dataTita[which(dataTita$Pclass == 3 & dataTita$PassengerId !=  :
  argument is not numeric or logical: returning NA
> imp<-mice(dataTita[,names(dataTita)%in%c("Pclass","Age","SibSp","Parch","Fare")],
+           m=5,meth="rf",seed = 1234)

 iter imp variable
  1   1  Age  Fare
  1   2  Age  Fare
  1   3  Age  Fare
  1   4  Age  Fare
  1   5  Age  Fare
  2   1  Age  Fare
  2   2  Age  Fare
  2   3  Age  Fare
  2   4  Age  Fare
  2   5  Age  Fare
  3   1  Age  Fare
  3   2  Age  Fare
  3   3  Age  Fare
  3   4  Age  Fare
  3   5  Age  Fare
  4   1  Age  Fare
  4   2  Age  Fare
  4   3  Age  Fare
  4   4  Age  Fare
  4   5  Age  Fare
  5   1  Age  Fare
  5   2  Age  Fare
  5   3  Age  Fare
  5   4  Age  Fare
  5   5  Age  Fare
> densityplot(imp)
> dataTita<-cbind(dataTita[,!names(dataTita)%in%c("Pclass","Age","SibSp","Parch","Fare")],
+                 complete(imp,1))
> 
> #Predict
> dataTita$title<-as.factor(dataTita$title)
> dataTita$Embarked<-as.factor(dataTita$Embarked)
> dataTita$Sex<-as.factor(dataTita$Sex)
> train<-dataTita[1:891,]
> test<-dataTita[892:1309,!names(dataTita)%in%c("Survived")]
> train$title<-as.factor(train$title)
> train$Embarked<-as.factor(train$Embarked)
> train$Sex<-as.factor(train$Sex)
> train.rf<-randomForest(factor(Survived)~Age+Pclass+Family+Fare+title+Embarked+Sex,
+                        data = train,ntree=50)
> train.rf

Call:
 randomForest(formula = factor(Survived) ~ Age + Pclass + Family +      Fare + title + Embarked + Sex, data = train, ntree = 50) 
               Type of random forest: classification
                     Number of trees: 50
No. of variables tried at each split: 2

        OOB estimate of  error rate: 16.95%
Confusion matrix:
    0   1 class.error
0 500  49  0.08925319
1 102 240  0.29824561
> test.rf<-predict(train.rf,test)
> testresult<-data.frame(PassengerId=test$PassengerId,Survived=test.rf)
> write.csv(testresult,"result.csv",row.names = FALSE)
> 
> proc.time()
   user  system elapsed 
  2.137   0.250   2.396 
