
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library('Amelia')
Loading required package: Rcpp
## 
## Amelia II: Multiple Imputation
## (Version 1.7.6, built: 2019-11-24)
## Copyright (C) 2005-2020 James Honaker, Gary King and Matthew Blackwell
## Refer to http://gking.harvard.edu/amelia/ for more information
## 
> library('dplyr')

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> library('stringr')
> library('randomForest')
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:dplyr’:

    combine

> library('caret')
Loading required package: lattice
Loading required package: ggplot2

Attaching package: ‘ggplot2’

The following object is masked from ‘package:randomForest’:

    margin

Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> 
> #setwd('~/sandbox/kaggle/titanic')
> d <- read.csv("../input/train.csv")
> t <- read.csv("../input/test.csv")
> 
> 
> d$Pclass <- as.factor(d$Pclass)
> t$Pclass <- as.factor(t$Pclass)
> 
> d$Fare <- pmax(log(d$Fare),0)
> t$Fare <- pmax(log(t$Fare),0)
> 
> #create feature from family size - was suggested
> d$FamSize <- d$Parch + d$SibSp + 1
> t$FamSize <- t$Parch + t$SibSp + 1
> 
> #create feature based on name
> basic.titles <- c('Mr','Mrs','Master','Miss','Ms','Mlle','Mdm')
> 
> extract.title <- function(n)
+ {
+   (str_split(str_split(n,', ')[[1]][2],'\\.')[[1]][1])
+ }
> 
> d$Title <- sapply(as.character(d$Name),extract.title)
> d$Noble <- !(d$Title %in% basic.titles)
> 
> t$Title <- sapply(as.character(t$Name),extract.title)
> t$Noble <- !(t$Title %in% basic.titles)
> 
> d$Title <- as.factor(d$Title)
> t$Title <- as.factor(t$Title)
> 
> missmap(d)
> 
> #infer missing age - use average age for title
> #select title, avg(age) group by title, join to data and coalesce age, avg(age)
> 
> titles <- group_by(d, Title)
> title.age.avg <- summarise(titles, avg.age = mean(Age, na.rm = TRUE))
`summarise()` ungrouping output (override with `.groups` argument)
> 
> d <- inner_join(by = "Title" ,d,title.age.avg)
> t <- left_join(by = "Title" ,t,title.age.avg) #we could observe a rare title.
> 
> d$HadAge <- !is.na(d$Age)
> d$InferredAge <- coalesce(d$Age,d$avg.age)
> 
> t$HadAge <- !is.na(t$Age)
> t$InferredAge <- coalesce(t$Age,t$avg.age)
> #split and train and test
> 
> d.s <- select(d,Survived,InferredAge,HadAge,Pclass,Sex,Parch,Embarked,Fare,SibSp,Noble,FamSize)
> d.s.a <- (d.s) %>% na.omit()
> d.s.a$Survived<- factor(d.s.a$Survived)
> 
> # define an 80%/20% train/test split of the dataset
> d.s.a$id <- 1:nrow(d.s.a)
> train.ix <- sample_frac(d.s.a,0.8)
> d.train <- d.s.a[train.ix$id,]
> d.test <- d.s.a[-train.ix$id,]
> 
> rf <- randomForest(Survived ~ ., select(d.train,Survived,Pclass,Sex,Fare,Noble,SibSp,Parch,HadAge,InferredAge,FamSize), ntree=50, norm.votes=FALSE)
> varImpPlot(rf)
> 
> #peel off low perfomers
> rf <- randomForest(Survived ~ ., select(d.train,Survived,Pclass,Sex,Fare,InferredAge,FamSize), ntree=50, norm.votes=FALSE)
> 
> y.test <- select(d.test,Survived)
> p <- predict(rf,select(d.test,Pclass,Sex,Fare,Noble,InferredAge,FamSize))
> 
> #evaluate
> confusionMatrix(p, y.test$Survived)
Confusion Matrix and Statistics

          Reference
Prediction   0   1
         0 103  15
         1   8  52
                                          
               Accuracy : 0.8708          
                 95% CI : (0.8124, 0.9163)
    No Information Rate : 0.6236          
    P-Value [Acc > NIR] : 1.869e-13       
                                          
                  Kappa : 0.7189          
                                          
 Mcnemar's Test P-Value : 0.2109          
                                          
            Sensitivity : 0.9279          
            Specificity : 0.7761          
         Pos Pred Value : 0.8729          
         Neg Pred Value : 0.8667          
             Prevalence : 0.6236          
         Detection Rate : 0.5787          
   Detection Prevalence : 0.6629          
      Balanced Accuracy : 0.8520          
                                          
       'Positive' Class : 0               
                                          
> 
> #make output for kaggle
> 
> 
> 
> df.submit <- data.frame(matrix(nrow = 418,ncol = 2))
> names(df.submit) <- c('PassengerId','Survived')
> df.submit$PassengerId <- t$PassengerId
> 
> rf <- randomForest(Survived ~ ., select(d.s.a,Survived,Pclass,Sex,Fare,InferredAge,FamSize), ntree=50, norm.votes=FALSE)
> 
> p2 <- predict(rf,select(t,Pclass,Sex,Fare,InferredAge,FamSize))
> df.submit$Survived <- p2
> 
> df.submit[153,2] <- 0 #clean up one NA
> 
> write.table(df.submit,'submit.csv',sep=',',row.names=FALSE,quote = FALSE)
> 
> proc.time()
   user  system elapsed 
  1.768   0.142   1.928 
