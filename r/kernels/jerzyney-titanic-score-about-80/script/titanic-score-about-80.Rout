
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(ggplot2); library(caret); library(Hmisc)
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
Loading required package: lattice
Loading required package: survival

Attaching package: ‘survival’

The following object is masked from ‘package:caret’:

    cluster

Loading required package: Formula

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:base’:

    format.pval, units

Warning message:
package ‘survival’ was built under R version 3.6.2 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> trainData <- read.csv("../input/train.csv", header = TRUE, stringsAsFactors = FALSE)
> testData <- read.csv("../input/test.csv", header = TRUE, stringsAsFactors = FALSE)
> inTrain <- createDataPartition(y=trainData$Survived, p=0.8, list=FALSE)
> trainDataTest <- trainData[-inTrain,]
> trainData <- trainData[inTrain,]
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> str(trainData)
'data.frame':	713 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 9 10 11 12 ...
 $ Survived   : int  0 1 1 1 0 0 1 1 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 3 2 3 1 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : chr  "male" "female" "female" "female" ...
 $ Age        : num  22 38 26 35 35 NA 27 14 4 58 ...
 $ SibSp      : int  1 1 0 1 0 0 0 1 1 0 ...
 $ Parch      : int  0 0 0 0 0 0 2 0 1 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  "" "C85" "" "C123" ...
 $ Embarked   : chr  "S" "C" "S" "S" ...
> summary(trainData$Age)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
   0.42   20.00   28.00   29.93   39.00   80.00     141 
> 
> 
> ## ----pressure, echo=FALSE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> plot(density(trainData$Age, na.rm = TRUE), main="Age density")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> t1 <- table(trainData$Survived, trainData$Sex)
> barplot(t1, xlab = "Gender", ylab = "Number of People", main = "survived and deceased between male and female")
> prop.table(t1)
   
       female      male
  0 0.0911641 0.5217391
  1 0.2664797 0.1206171
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> cutAge <- cut2(trainData$Age, g=6)
> tableAge <- table(trainData$Survived, cutAge)
> prop.table(tableAge)
   cutAge
    [ 0.42,19.0) [19.00,23.5) [23.50,28.5) [28.50,36.0) [36.00,45.0)
  0   0.09965035   0.10139860   0.10139860   0.09615385   0.08566434
  1   0.09965035   0.04370629   0.06118881   0.08391608   0.06118881
   cutAge
    [45.00,80.0]
  0   0.10839161
  1   0.05769231
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> sum(trainData$Survived[is.na(trainData$Age)])/sum(is.na(trainData$Age))
[1] 0.3049645
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> t2 <- table(trainData$Survived,trainData$Pclass)
> t2/rep(apply(t2, 2, sum), each=2)
   
            1         2         3
  0 0.3546512 0.5369128 0.7551020
  1 0.6453488 0.4630872 0.2448980
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> trainData$hasCabin <- "noCabin"
> for(i in 1:length(trainData$Survived)){
+   if(trainData$Cabin[i]!="") trainData$hasCabin[i] <- "hasCabin"
+ }
> table(trainData$Survived, trainData$hasCabin)
   
    hasCabin noCabin
  0       48     389
  1      110     166
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> trainDataTest$hasCabin <- "noCabin"
> for(i in 1:length(trainDataTest$Survived)){
+   if(trainDataTest$Cabin[i]!="") trainDataTest$hasCabin[i] <- "hasCabin"
+ }
> 
> testData$hasCabin <- "noCabin"
> for(i in 1:length(testData$PassengerId)){
+   if(testData$Cabin[i]!="") testData$hasCabin[i] <- "hasCabin"
+ }
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> cutFare <- cut2(trainData$Fare, g=5)
> t3 <- table(trainData$Survived, cutFare)
> prop.table(t3)
   cutFare
    [ 0.00,  7.89) [ 7.89, 12.00) [12.00, 23.25) [23.25, 42.40) [42.40,512.33]
  0     0.15287518     0.15848527     0.11640954     0.11360449     0.07152875
  1     0.04908836     0.04207574     0.08415147     0.08415147     0.12762973
> barplot(t3, xlab="Fare", ylab="count", main="Survival by Fare")
> median(trainData$Fare)
[1] 14.5
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> trainData$Sex <- gsub("female", 1, trainData$Sex)
> trainData$Sex <- gsub("^male", 0, trainData$Sex)
> trainData$Sex <- as.numeric(trainData$Sex)
> trainDataTest$Sex <- gsub("female", 1, trainDataTest$Sex)
> trainDataTest$Sex <- gsub("^male", 0, trainDataTest$Sex)
> trainDataTest$Sex <- as.numeric(trainDataTest$Sex)
> testData$Sex <- gsub("female", 1, testData$Sex)
> testData$Sex <- gsub("^male", 0, testData$Sex)
> testData$Sex <- as.numeric(testData$Sex)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> places <- c("S", "C", "Q")
> trainData$Embarked <- match(trainData$Embarked, places)
> trainDataTest$Embarked <- match(trainDataTest$Embarked, places)
> testData$Embarked <- match(testData$Embarked, places)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> summary(trainData$Name)
   Length     Class      Mode 
      713 character character 
> createTitles <- function(names){
+   namesSplit <- strsplit(names, " ")
+   commonTitles <- c("Col.", "Dr.", "Major", "Master", "Miss.", "Mr.", "Mrs.", "Rev.")
+   titles <- ""
+   for(i in 1:length(namesSplit)){
+     if(is.na(match(namesSplit[[i]][2], commonTitles))){
+       titles <- c(titles,"UT")
+     }
+        else{
+     titles <- c(titles, namesSplit[[i]][2])
+        }
+   }
+   return(as.factor(titles[-1]))
+ }
> Titles <- createTitles(trainData$Name)
> summary(Titles)
 Col.   Dr. Miss.   Mr.  Mrs.  Rev.    UT 
    2     6   149   394    94     6    62 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> trainData$Title <- Titles
> trainDataTest$Title <- createTitles(trainDataTest$Name)
> testData$Title <- createTitles(testData$Name)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> trainData$Family <- trainData$SibSp+trainData$Parch
> trainDataTest$Family <- trainDataTest$SibSp+trainDataTest$Parch
> testData$Family <- testData$SibSp+testData$Parch
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #note that the fuction returns the full ages vector containing the infered values
> ageInference <- function(allAges, allTitles){
+   for (i in 1:length(allAges)){
+     if(is.na(allAges[i])){
+       tmpTitle <- allTitles[i]
+       allAges[i] <- round(mean(allAges[allTitles == tmpTitle], na.rm=TRUE), digits=2)
+     }
+   }
+   #if there are still missing values, just replace them by the overall mean:
+   for(i in 1:length(allAges)){
+     if(is.na(allAges[i])) allAges[i] <- round(mean(allAges, na.rm=TRUE), digits=2)
+   }
+   return(allAges)
+ }
> ageInf <- ageInference(trainData$Age, trainData$Title)
> summary(ageInf)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.42   22.00   30.00   30.03   36.00   80.00 
> summary(trainData$Age)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
   0.42   20.00   28.00   29.93   39.00   80.00     141 
> trainData$AgeInf <- ageInf
> ggplot()+
+   geom_density(data=trainData, aes(x=Age), color="red")+
+   geom_density(data=trainData, aes(x=AgeInf), color="green")
Warning message:
Removed 141 rows containing non-finite values (stat_density). 
> 
> trainDataTest$AgeInf <- ageInference(trainDataTest$Age, trainDataTest$Title)
> testData$AgeInf <- ageInference(testData$Age, testData$Title)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> summary(trainData)
  PassengerId       Survived          Pclass          Name          
 Min.   :  1.0   Min.   :0.0000   Min.   :1.000   Length:713        
 1st Qu.:217.0   1st Qu.:0.0000   1st Qu.:2.000   Class :character  
 Median :454.0   Median :0.0000   Median :3.000   Mode  :character  
 Mean   :449.4   Mean   :0.3871   Mean   :2.309                     
 3rd Qu.:679.0   3rd Qu.:1.0000   3rd Qu.:3.000                     
 Max.   :891.0   Max.   :1.0000   Max.   :3.000                     
                                                                    
      Sex              Age            SibSp            Parch       
 Min.   :0.0000   Min.   : 0.42   Min.   :0.0000   Min.   :0.0000  
 1st Qu.:0.0000   1st Qu.:20.00   1st Qu.:0.0000   1st Qu.:0.0000  
 Median :0.0000   Median :28.00   Median :0.0000   Median :0.0000  
 Mean   :0.3576   Mean   :29.93   Mean   :0.5428   Mean   :0.3941  
 3rd Qu.:1.0000   3rd Qu.:39.00   3rd Qu.:1.0000   3rd Qu.:0.0000  
 Max.   :1.0000   Max.   :80.00   Max.   :8.0000   Max.   :6.0000  
                  NA's   :141                                      
    Ticket               Fare            Cabin              Embarked    
 Length:713         Min.   :  0.000   Length:713         Min.   :1.000  
 Class :character   1st Qu.:  7.925   Class :character   1st Qu.:1.000  
 Mode  :character   Median : 14.500   Mode  :character   Median :1.000  
                    Mean   : 32.572                      Mean   :1.362  
                    3rd Qu.: 31.275                      3rd Qu.:2.000  
                    Max.   :512.329                      Max.   :3.000  
                                                         NA's   :1      
   hasCabin           Title         Family            AgeInf     
 Length:713         Col. :  2   Min.   : 0.0000   Min.   : 0.42  
 Class :character   Dr.  :  6   1st Qu.: 0.0000   1st Qu.:22.00  
 Mode  :character   Miss.:149   Median : 0.0000   Median :30.00  
                    Mr.  :394   Mean   : 0.9369   Mean   :30.03  
                    Mrs. : 94   3rd Qu.: 1.0000   3rd Qu.:36.00  
                    Rev. :  6   Max.   :10.0000   Max.   :80.00  
                    UT   : 62                                    
> summary(trainDataTest)
  PassengerId       Survived          Pclass          Name          
 Min.   :  7.0   Min.   :0.0000   Min.   :1.000   Length:178        
 1st Qu.:237.8   1st Qu.:0.0000   1st Qu.:2.000   Class :character  
 Median :429.0   Median :0.0000   Median :3.000   Mode  :character  
 Mean   :432.5   Mean   :0.3708   Mean   :2.309                     
 3rd Qu.:633.8   3rd Qu.:1.0000   3rd Qu.:3.000                     
 Max.   :882.0   Max.   :1.0000   Max.   :3.000                     
                                                                    
      Sex              Age            SibSp            Parch       
 Min.   :0.0000   Min.   : 1.00   Min.   :0.0000   Min.   :0.0000  
 1st Qu.:0.0000   1st Qu.:21.00   1st Qu.:0.0000   1st Qu.:0.0000  
 Median :0.0000   Median :28.00   Median :0.0000   Median :0.0000  
 Mean   :0.3315   Mean   :28.77   Mean   :0.4438   Mean   :0.3315  
 3rd Qu.:1.0000   3rd Qu.:36.00   3rd Qu.:1.0000   3rd Qu.:0.0000  
 Max.   :1.0000   Max.   :70.50   Max.   :4.0000   Max.   :4.0000  
                  NA's   :36                                       
    Ticket               Fare            Cabin              Embarked    
 Length:178         Min.   :  0.000   Length:178         Min.   :1.000  
 Class :character   1st Qu.:  7.896   Class :character   1st Qu.:1.000  
 Mode  :character   Median : 12.475   Mode  :character   Median :1.000  
                    Mean   : 30.730                      Mean   :1.362  
                    3rd Qu.: 28.928                      3rd Qu.:2.000  
                    Max.   :512.329                      Max.   :3.000  
                                                         NA's   :1      
   hasCabin           Title         Family           AgeInf     
 Length:178         Dr.  :  1   Min.   :0.0000   Min.   : 1.00  
 Class :character   Miss.: 30   1st Qu.:0.0000   1st Qu.:21.25  
 Mode  :character   Mr.  :108   Median :0.0000   Median :30.00  
                    Mrs. : 27   Mean   :0.7753   Mean   :28.77  
                    UT   : 12   3rd Qu.:1.0000   3rd Qu.:35.00  
                                Max.   :6.0000   Max.   :70.50  
                                                                
> summary(testData)
  PassengerId         Pclass          Name                Sex        
 Min.   : 892.0   Min.   :1.000   Length:418         Min.   :0.0000  
 1st Qu.: 996.2   1st Qu.:1.000   Class :character   1st Qu.:0.0000  
 Median :1100.5   Median :3.000   Mode  :character   Median :0.0000  
 Mean   :1100.5   Mean   :2.266                      Mean   :0.3636  
 3rd Qu.:1204.8   3rd Qu.:3.000                      3rd Qu.:1.0000  
 Max.   :1309.0   Max.   :3.000                      Max.   :1.0000  
                                                                     
      Age            SibSp            Parch           Ticket         
 Min.   : 0.17   Min.   :0.0000   Min.   :0.0000   Length:418        
 1st Qu.:21.00   1st Qu.:0.0000   1st Qu.:0.0000   Class :character  
 Median :27.00   Median :0.0000   Median :0.0000   Mode  :character  
 Mean   :30.27   Mean   :0.4474   Mean   :0.3923                     
 3rd Qu.:39.00   3rd Qu.:1.0000   3rd Qu.:0.0000                     
 Max.   :76.00   Max.   :8.0000   Max.   :9.0000                     
 NA's   :86                                                          
      Fare            Cabin              Embarked       hasCabin        
 Min.   :  0.000   Length:418         Min.   :1.000   Length:418        
 1st Qu.:  7.896   Class :character   1st Qu.:1.000   Class :character  
 Median : 14.454   Mode  :character   Median :1.000   Mode  :character  
 Mean   : 35.627                      Mean   :1.464                     
 3rd Qu.: 31.500                      3rd Qu.:2.000                     
 Max.   :512.329                      Max.   :3.000                     
 NA's   :1                                                              
   Title         Family            AgeInf     
 Col. :  2   Min.   : 0.0000   Min.   : 0.17  
 Dr.  :  1   1st Qu.: 0.0000   1st Qu.:21.73  
 Miss.: 77   Median : 0.0000   Median :30.00  
 Mr.  :234   Mean   : 0.8397   Mean   :30.27  
 Mrs. : 70   3rd Qu.: 1.0000   3rd Qu.:36.88  
 Rev. :  2   Max.   :10.0000   Max.   :76.00  
 UT   : 32                                    
> plot(as.factor(trainData$Embarked))
> 
> #replace missing Embarked by 1
> 
> trainData$Embarked[is.na(trainData$Embarked)] <- 1
> trainDataTest$Embarked[is.na(trainDataTest$Embarked)] <- 1
> testData$Embarked[is.na(testData$Embarked)] <- 1
> 
> #replace missing Fare by overall mean
> trainData$Fare[is.na(trainData$Fare)] <- round(mean(trainData$Fare, na.rm=TRUE), digits=2)
> trainDataTest$Fare[is.na(trainDataTest$Fare)] <- round(mean(trainDataTest$Fare, na.rm=TRUE), digits=2)
> testData$Fare[is.na(testData$Fare)] <- round(mean(testData$Fare, na.rm=TRUE), digits=2)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> trainData$Survived <- as.factor(trainData$Survived)
> trainDataTest$Survived <- as.factor(trainDataTest$Survived)
> 
> control <- trainControl(method="cv", number=5)
> mod1 <- train(trainData$Survived ~ Pclass + Sex + AgeInf + SibSp + Parch + Fare + Embarked + Title + Family + hasCabin, data=trainData, method="rf", trControl=control)
Error in `[.data.frame`(data, , all.vars(Terms), drop = FALSE) : 
  undefined columns selected
Calls: train -> train.formula -> [ -> [.data.frame
Execution halted
