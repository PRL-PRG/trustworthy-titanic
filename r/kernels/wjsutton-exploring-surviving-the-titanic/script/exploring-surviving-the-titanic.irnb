{"cells":[{"metadata":{"_kg_hide-input":false,"trusted":true,"_kg_hide-output":false,"_uuid":"a689c97a5e996fd1aac00995bfb6906efb0f3320"},"cell_type":"code","source":"# Loading in libraries and datasets\n#source(\"https://raw.githubusercontent.com/wjsutton/data_profiler/master/data_profiler.R\")\nlibrary(randomForest)\nlibrary(stringr)\nlibrary(dplyr)\ntrain <- read.csv(\"../input/train.csv\", stringsAsFactors=FALSE)\ntest <- read.csv(\"../input/test.csv\", stringsAsFactors=FALSE)\n\ntest$Survived <- NA\nall <- rbind(train, test)\n","execution_count":153,"outputs":[]},{"metadata":{"_kg_hide-input":true,"trusted":true,"_kg_hide-output":true,"_uuid":"658dd318602984c26638bdb22dd8d9920753b3a5"},"cell_type":"code","source":"### The Data Profiler Function \n#   The aim of the function is to profile a simple data quality check \n#   on an object it is given. \n\n#   First a message is printed describing the structure of the object \n#   inputted and its dimensions.\n\n#   Next a table is built describing the data quality, each row relates \n#   to a column in object inputted.\n\n#   Table Definitions:\n\n#   column        | definition\n#   --------------------------------\n#   column_name   | Column position and name, if no name is present \"NULL\" is \n#                 | returned.\n#   obj_structure | Assesses how the object is structured, returns: vector, factor,\n#                 | list, character, matrix, array or unknown.\n#   obj_data_type | Assesses the type of data, returns: numeric, string, logical or \n#                 | date.\n#   uniqueness    | Returns a percentage score calculated from the number of distinct\n#                 | elements divided by the total number of elements.\n#   completeness  | Returns a percentage score calculated from the number of non-blank,\n#                 | non-empty and non-null elements divided by the total number of \n#                 | elements.\n#   min           | The minimum value, if string data type this is the minimum \n#                 | character length.\n#   max           | The maxiumum value, if string data type this is the maxiumum \n#                 | character length.\n#   avg           | The average value, if string data type this is the average \n#                 | character length.\n#   standDev      | The standard deviation value, if string data type this is the  \n#                 | standard deviation of character length.\n\n\n\nprofile <- function(test_obj){\n  # What object have I got?\n  if (is.vector(test_obj)){\n    obj_structure <- \"vector\"\n    message <- paste0(\"Object is a vector of length \",length(test_obj))\n  }\n  else if (is.data.frame(test_obj)){\n    obj_structure <- \"data.frame\"\n    message <- paste0(\"Object is a data frame, \",ncol(test_obj),\" columns by \",nrow(test_obj),\" rows\")\n  }\n  else if (is.factor(test_obj)){\n    obj_structure <- \"factor\"\n    message <- paste0(\"Object is a factor of length \",length(test_obj))\n  }\n  else if (is.character(test_obj)){\n    obj_structure <- \"character\"\n    message <- paste0(\"Object is a character of length \",length(test_obj))\n  }\n  else if (is.list(test_obj)){\n    obj_structure <- \"list\"\n    message <- paste0(\"Object is a list of length \",length(test_obj))\n  }\n  else if (is.matrix(test_obj)){\n    obj_structure <- \"matrix\"\n    message <- paste0(\"Object is a matrix, \",ncol(test_obj),\" columns by \",nrow(test_obj),\" rows\")\n  }\n  else if (is.array(test_obj)){\n    obj_structure <- \"array\"\n    message <- paste0(\"Object is an array, with dimensions \",(paste(shQuote(dim(test_array), type=\"sh\"), collapse = \",\")))\n  }\n  else {\n    obj_structure <- \"unknown\"\n    message <- \"Unknown object\"\n  }\n  print(message)\n  # pass for one dimensional objects\n  if (is.element(obj_structure,c(\"vector\",\"factor\",\"list\")) == TRUE){\n    # Data type\n    if (is.numeric(test_obj)){\n      obj_data_type <- \"numeric\"\n    }\n    else if (is.logical(test_obj)){\n      obj_data_type <- \"logical\"\n    }\n    else if (class(test_obj) == \"Date\"){\n      obj_data_type <- \"date\"\n    }\n    else {\n      obj_data_type <- \"string\"\n    }\n    uniqueness <- paste0(round((length(unique(test_obj))/length(test_obj))*100,2),\"%\")\n    blanks <- sum(\n      length(which(\"\" == test_obj)),\n      length(which(\"[[:space]]\" == test_obj)),\n      length(which(is.na(test_obj)))\n    )\n    completeness <- paste0(round(((length(test_obj)-blanks)/length(test_obj))*100,2),\"%\")\n    if (obj_data_type != \"string\") {\n      max <- max(test_obj)\n      min <- min(test_obj)\n      avg <- round(mean(test_obj),2)\n      standDev <- round(sd(test_obj),2)\n    }\n    \n    else if (obj_data_type == \"string\") {\n      max <- max(nchar(as.vector(test_obj)))\n      min <- min(nchar(as.vector(test_obj)))\n      avg <- round(mean(nchar(as.vector(test_obj))),2)\n      standDev <- round(sd(nchar(as.vector(test_obj))),2)\n    }\n    col_name <- names(test_obj)\n    if (length(col_name) == 0) {\n      col_name <-\"NULL\"\n    }\n    column_name <- paste0(\"Column \",1,\": (\",col_name,\")\")\n    output <- cbind(column_name,obj_structure,obj_data_type,uniqueness,completeness,min,max,avg,standDev)\n    print(output)\n    \n  }\n  #pass for multi-dimensional objects\n  else {\n    for (i in 1:ncol(test_obj)){\n      if (is.vector(test_obj[[i]])){\n        obj_structure <- \"vector\"\n      }\n      else if (is.data.frame(test_obj[[i]])){\n        obj_structure <- \"data.frame\"\n      }\n      else if (is.factor(test_obj[[i]])){\n        obj_structure <- \"factor\"\n      }\n      else if (is.character(test_obj[[i]])){\n        obj_structure <- \"character\"\n      }\n      else if (is.list(test_obj[[i]])){\n        obj_structure <- \"list\"\n      }\n      else if (is.data.frame(test_obj[[i]])){\n        obj_structure <- \"data.frame\"\n      }\n      else if (is.matrix(test_obj[[i]])){\n        obj_structure <- \"matrix\"\n      }\n      else if (is.array(test_obj[[i]])){\n        obj_structure <- \"array\"\n      }\n      else {\n        obj_structure <- \"unknown\"\n      }\n      if (is.numeric(test_obj[[i]])){\n        obj_data_type <- \"numeric\"\n      }\n      else if (is.logical(test_obj[[i]])){\n        obj_data_type <- \"logical\"\n      }\n      else if (class(test_obj[[i]]) == \"Date\"){\n        obj_data_type <- \"date\"\n      }\n      else {\n        obj_data_type <- \"string\"\n      }\n      uniqueness <- paste0(round((length(unique(test_obj[[i]]))/length(test_obj[[i]]))*100,2),\"%\")\n      blanks <- sum(\n        length(which(\"\" == test_obj[[i]])),\n        length(which(\"[[:space]]\" == test_obj[[i]])),\n        length(which(is.na(test_obj[[i]])))\n      )\n      completeness <- paste0(round(((length(test_obj[[i]])-blanks)/length(test_obj[[i]]))*100,2),\"%\")\n      if (obj_data_type != \"string\") {\n        max <- max(test_obj[[i]])\n        min <- min(test_obj[[i]])\n        avg <- round(mean(test_obj[[i]]),2)\n        standDev <- round(sd(test_obj[[i]]),2)\n      }\n      \n      else if (obj_data_type == \"string\") {\n        max <- max(nchar(as.vector(test_obj[[i]])))\n        min <- min(nchar(as.vector(test_obj[[i]])))\n        avg <- round(mean(nchar(as.vector(test_obj[[i]]))),2)\n        standDev <- round(sd(nchar(as.vector(test_obj[[i]]))),2)\n      }\n      col_name <- names(test_obj[i])\n      if (length(col_name) == 0) {\n        col_name <-\"NULL\"\n      }\n      column_name <- paste0(\"Column \",i,\": (\",col_name,\")\")\n      output_i <- cbind(column_name,obj_structure,obj_data_type,uniqueness,completeness,min,max,avg,standDev)\n      if (i == 1){\n        output <- output_i\n      }\n      else {\n        output <- rbind(output,output_i)\n      }\n      \n    }\n    print(output)\n  }\n}","execution_count":62,"outputs":[]},{"metadata":{"_execution_state":"idle","_kg_hide-output":false,"_uuid":"ecf85ece458de7bd86013f02d5f0b79e1ce64453","trusted":true,"_cell_guid":"b082e043-1c63-4959-9167-944272a6984e"},"cell_type":"code","source":"# understanding dataset \nprofile(all)\n","execution_count":64,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"60e32637a0218a97f7ba7cebbd59c17109db0b25"},"cell_type":"code","source":"#datasets <- c('train','test')\n#variables <- c('Sex','Name','Embarked','Cabin')\n#for (i in 1:length(datasets)){\n#    for (j in 1:length(variables)){\n#        x <- paste0(datasets[i],'$',variables[j])\n#        y <- as.factor(eval(parse(text=x)))\n#        y2 <- 0\n        #eval(parse(text=x)) <- as.factor(eval(parse(text=x)))\n        #assign(paste0(x),as.factor(eval(parse(text=x))))\n        #assign('y',as.factor(eval(parse(text=x))))\n        #assign(paste0(x),y)\n#        do.call('<-',list(paste0(x),y2))\n        #assign('train$Name',as.factor(train$Name))\n#}\n#}\nall$Sex <- as.factor(all$Sex)\nall$Survived <- as.factor(all$Survived)\nall$Pclass <- as.ordered(all$Pclass)\nall$Embarked <- as.factor(all$Embarked)\n\nall$PclassSex[all$Pclass=='1' & all$Sex=='male'] <- 'P1Male'\nall$PclassSex[all$Pclass=='2' & all$Sex=='male'] <- 'P2Male'\nall$PclassSex[all$Pclass=='3' & all$Sex=='male'] <- 'P3Male'\nall$PclassSex[all$Pclass=='1' & all$Sex=='female'] <- 'P1Female'\nall$PclassSex[all$Pclass=='2' & all$Sex=='female'] <- 'P2Female'\nall$PclassSex[all$Pclass=='3' & all$Sex=='female'] <- 'P3Female'\nall$PclassSex <- as.factor(all$PclassSex)\n\nall$Surname <- substr(str_extract(pattern = '[a-z|A-Z]*,', all$Name),1,nchar(str_extract(pattern = '[a-z|A-Z]*,', all$Name))-1)\n\nall$Titles <- str_sub(all$Name,str_locate(pattern = '[,] ', all$Name)[,1],str_locate(pattern = '[a-z][/.] ', all$Name)[,1])\nall$Titles <- gsub('the','',all$Titles)\nall$Titles <- gsub(',','',all$Titles)\nall$Titles <- gsub(' ','',all$Titles)\n\nall$Titles[all$Titles %in% c(\"Mlle\", \"Ms\")] <- \"Miss\"\nall$Titles[all$Titles== \"Mme\"] <- \"Mrs\"\nall$Titles[!(all$Titles %in% c('Master', 'Miss', 'Mr', 'Mrs'))] <- \"Rare Title\"\nall$Titles <- as.factor(all$Titles)\n\n#train$Sex <- as.factor(train$Sex)\n#train$Name <- as.factor(train$Name)\n#train$Embarked <- as.factor(train$Embarked)\n#train$Cabin <- as.factor(train$Cabin)\n\n#test$Sex <- as.factor(test$Sex)\n#test$Name <- as.factor(test$Name)\n#test$Embarked <- as.factor(test$Embarked)\n#test$Cabin <- as.factor(test$Cabin)\n\n#levels(train$Sex) <- levels(c(train$Sex,test$Sex))\n#levels(test$Sex) <- levels(c(train$Sex,test$Sex))\n\n#levels(train$Name) <- levels(c(train$Name,test$Name))\n#levels(test$Name) <- levels(c(train$Name,test$Name))\n\n#levels(train$Embarked) <- levels(c(train$Embarked,test$Embarked))\n#levels(test$Embarked) <- levels(c(train$Embarked,test$Embarked))\n\n#levels(train$Cabin) <- levels(c(train$Cabin,test$Cabin))\n#levels(test$Cabin) <- levels(c(train$Cabin,test$Cabin))\n\n#train_v2 <- train[c(2,1,3,5,7,8,10,12)]\n#train_v3 <- train[c(2,10,12)]\n#test_v2 <- test[c(1,2,4,6,7,9,11)]\n\n#train[is.na(train)] <- 0\n#test[is.na(test)] <- 0\n#model <- glm(formula = Survived ~., family = binomial(link = \"logit\"),data = train_v3)\n#str(train_v2)\n#str(test)\n#str(test_v2)\n\ntrainClean <- all[!is.na(all$Survived),]\ntestClean <- all[is.na(all$Survived),]\n\ntrainClean[is.na(trainClean)] <- 0\n\ntrainClean$Titles <- as.factor(trainClean$Titles)","execution_count":175,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"ec5954ad61e7872cae0d736c0900a493b0a79ccd"},"cell_type":"code","source":"# putting together a random forest model\n\nset.seed(1)\n#fit <- randomForest(as.factor(Survived) ~., data=train_v2, importance=TRUE, ntree=2000)\nfit <- randomForest(as.factor(Survived) ~ PclassSex + Fare + Embarked + Titles, \n                    data=trainClean, importance=TRUE, ntree=5000)\nvarImpPlot(fit)","execution_count":230,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"436475d08fbb49dfba987547f8c193321c42af73"},"cell_type":"code","source":"#Prediction <- predict(fit, test_v2)\nPrediction <- predict(fit, testClean)\n\n#head(Prediction)\n#head(test_v2)\n#str(test_v2)\n#str(train_v2)\n#submit <- data.frame(PassengerId = test_v2$PassengerId, Survived = Prediction, row.names=NULL)\nsubmit <- data.frame(PassengerId = testClean$PassengerId, Survived = Prediction, row.names=NULL)\n#head(submit)\nsubmit[is.na(submit)] <- 0\nwrite.csv(submit, file = \"firstforest.csv\", row.names = FALSE)","execution_count":179,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}