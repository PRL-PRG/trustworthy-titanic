
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> titanic.train <- read.csv("../input/train.csv", stringsAsFactor=FALSE)
> titanic.test <- read.csv("../input/test.csv", stringsAsFactor=FALSE)
> 
> 
> 
> ## ----message=F,warning=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(plyr)
> library(rpart)
> library(caret)
Loading required package: lattice
Loading required package: ggplot2
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library(caTools)
> library(mice)

Attaching package: ‘mice’

The following objects are masked from ‘package:base’:

    cbind, rbind

Warning message:
package ‘mice’ was built under R version 3.6.2 
> library(stringr)
> library(Hmisc)
Loading required package: survival

Attaching package: ‘survival’

The following object is masked from ‘package:caret’:

    cluster

Loading required package: Formula

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:plyr’:

    is.discrete, summarize

The following objects are masked from ‘package:base’:

    format.pval, units

Warning message:
package ‘survival’ was built under R version 3.6.2 
> library(ggplot2)
> library(vcd)
Loading required package: grid
Warning message:
package ‘vcd’ was built under R version 3.6.2 
> library(ROCR)
Warning message:
package ‘ROCR’ was built under R version 3.6.2 
> library(pROC)
Type 'citation("pROC")' for a citation.

Attaching package: ‘pROC’

The following objects are masked from ‘package:stats’:

    cov, smooth, var

> library(VIM)
Loading required package: colorspace

Attaching package: ‘colorspace’

The following object is masked from ‘package:pROC’:

    coords

VIM is ready to use.

Suggestions and bug-reports can be submitted at: https://github.com/statistikat/VIM/issues

Attaching package: ‘VIM’

The following object is masked from ‘package:datasets’:

    sleep

> library(glmnet)    
Loading required package: Matrix
Loaded glmnet 4.0-2
Warning message:
package ‘glmnet’ was built under R version 3.6.2 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> str(titanic.train)
'data.frame':	891 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : chr  "male" "female" "female" "female" ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  "" "C85" "" "C123" ...
 $ Embarked   : chr  "S" "C" "S" "S" ...
> summary(titanic.train)
  PassengerId       Survived          Pclass          Name          
 Min.   :  1.0   Min.   :0.0000   Min.   :1.000   Length:891        
 1st Qu.:223.5   1st Qu.:0.0000   1st Qu.:2.000   Class :character  
 Median :446.0   Median :0.0000   Median :3.000   Mode  :character  
 Mean   :446.0   Mean   :0.3838   Mean   :2.309                     
 3rd Qu.:668.5   3rd Qu.:1.0000   3rd Qu.:3.000                     
 Max.   :891.0   Max.   :1.0000   Max.   :3.000                     
                                                                    
     Sex                 Age            SibSp           Parch       
 Length:891         Min.   : 0.42   Min.   :0.000   Min.   :0.0000  
 Class :character   1st Qu.:20.12   1st Qu.:0.000   1st Qu.:0.0000  
 Mode  :character   Median :28.00   Median :0.000   Median :0.0000  
                    Mean   :29.70   Mean   :0.523   Mean   :0.3816  
                    3rd Qu.:38.00   3rd Qu.:1.000   3rd Qu.:0.0000  
                    Max.   :80.00   Max.   :8.000   Max.   :6.0000  
                    NA's   :177                                     
    Ticket               Fare           Cabin             Embarked        
 Length:891         Min.   :  0.00   Length:891         Length:891        
 Class :character   1st Qu.:  7.91   Class :character   Class :character  
 Mode  :character   Median : 14.45   Mode  :character   Mode  :character  
                    Mean   : 32.20                                        
                    3rd Qu.: 31.00                                        
                    Max.   :512.33                                        
                                                                          
> table(titanic.train$Survived, titanic.train$Sex)
   
    female male
  0     81  468
  1    233  109
> 
> 
> ## ---- warning=FALSE,fig.height=3,fig.width=7-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(titanic.train, aes(x=Age, y=PassengerId, color = as.factor(Survived))) +                      
+     geom_point() + 
+     facet_grid(Sex ~.) +
+     ggtitle("Survival vs Passenger's Age")+
+     xlab("Age") + 
+     theme(legend.position = "none")+
+     scale_colour_manual(values = c("#FF0000","#0000FF"))
Warning message:
Removed 177 rows containing missing values (geom_point). 
> 
> 
> ## ---- warning=FALSE,fig.height=3,fig.width=7-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(titanic.train[titanic.train$Embarked != "",], aes(x=Embarked, y=PassengerId)) +  
+   geom_tile(aes(fill = as.factor(Survived))) + 
+   facet_grid(. ~ Pclass) +
+   ggtitle("Survival vs Passenger's Pclass and Port of Embarkation")+
+   theme(legend.position = "none")+
+   scale_fill_manual(values = c("#FF0000","#0000FF"))
> 
> 
> ## ---- warning=FALSE,fig.height=3,fig.width=7-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(titanic.train[titanic.train$Embarked != "",], aes(x=Embarked, y=PassengerId)) +  
+   geom_tile(aes(fill = as.factor(Survived))) + 
+   facet_grid(. ~ Sex) +
+   ggtitle("Survival vs Passenger's Sex and Port of Embarkation")+
+   theme(legend.position = "none")+
+   scale_fill_manual(values = c("#FF0000","#0000FF"))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> mosaic(~ Sex + (Age > 15) + (SibSp + Parch > 0) + Survived, data = titanic.train[complete.cases(titanic.train),],
+        shade=T, legend=T)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> Survived = titanic.train$Survived
> titanic.test$Survived = NA
> all = rbind(titanic.train, titanic.test)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> all$Title = sapply(all$Name,function(x) strsplit(x,', ')[[1]][2])
> all$Title = sapply(all$Title,function(x) strsplit(x,'\\. ')[[1]][1])
> 
> as.data.frame(
+   cbind("Title" = unique(all$Title), 
+         "No_of_passengers" = sapply(unique(all$Title), function(x) nrow(all[all$Title == x,])),
+         "Age_missing" = sapply(unique(all$Title), function(x) nrow(all[all$Title == x & is.na(all$Age),])),
+         "Minimum_Age" = sapply(unique(all$Title), function(x) min(all[all$Title == x,'Age'], na.rm = TRUE)),
+         "Maximum_Age" = sapply(unique(all$Title), function(x) max(all[all$Title == x,'Age'], na.rm = TRUE))), row.names = F)
          Title No_of_passengers Age_missing Minimum_Age Maximum_Age
1            Mr              757         176          11          80
2           Mrs              197          27          14          76
3          Miss              260          50        0.17          63
4        Master               61           8        0.33        14.5
5           Don                1           0          40          40
6           Rev                8           0          27          57
7            Dr                8           1          23          54
8           Mme                1           0          24          24
9            Ms                2           1          28          28
10        Major                2           0          45          52
11         Lady                1           0          48          48
12          Sir                1           0          49          49
13         Mlle                2           0          24          24
14          Col                4           0          47          60
15         Capt                1           0          70          70
16 the Countess                1           0          33          33
17     Jonkheer                1           0          38          38
18         Dona                1           0          39          39
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #   Mr:     For men above 14.5 years
> #   Master: For boys below and equal to 14.5 years
> #   Miss:   For girls below and equal to 14.5 years
> #   Ms:     For women above 14.5 years, maybe unmarried
> #   Mrs:    For married women above 14.5 years
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> all[(all$Title == "Mr" & all$Age <= 14.5 & !is.na(all$Age)),]$Title = "Master"
> 
> all[all$Title == "Capt"|
+     all$Title == "Col"|
+     all$Title == "Don"|
+     all$Title == "Major"|
+     all$Title == "Rev"|      
+     all$Title == "Jonkheer"|
+     all$Title == "Sir",]$Title = "Mr"
> 
> # None of these women are travelling with family, hence can be categorised as single women for this analysis
> all[all$Title == "Dona"|
+       all$Title == "Mlle"|
+       all$Title == "Mme",]$Title = "Ms"
> 
> # Categories Lady and Countess as a married woman
> all[all$Title == "Lady"| all$Title == "the Countess",]$Title = "Mrs"
> 
> # Categorise doctors as per their sex
> all[all$Title == "Dr" & all$Sex == "female",]$Title = "Ms"
> all[all$Title == "Dr" & all$Sex == "male",]$Title = "Mr"
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> all$Title = as.factor(all$Title)
> all$Title <- droplevels(all$Title)
> summary(all$Title)
Master   Miss     Mr    Mrs     Ms 
    66    260    777    199      7 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> all$FamilySize = ifelse(all$SibSp + all$Parch + 1 <= 3, 1,0) # Small = 1, Big = 0
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> all$Mother = ifelse(all$Title=="Mrs" & all$Parch > 0, 1,0)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> all$Single = ifelse(all$SibSp + all$Parch + 1 == 1, 1,0) # People travelling alone
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> all$FamilyName = sapply(all$Name,function(x) strsplit(x,', ')[[1]][1])
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> Family.Ticket = all[all$Single == 0,c("FamilyName", "Ticket")]
> Family.Ticket = Family.Ticket[order(Family.Ticket$FamilyName),]
> head(Family.Ticket)
     FamilyName    Ticket
280      Abbott C.A. 2673
747      Abbott C.A. 2673
1284     Abbott C.A. 2673
309     Abelson P/PP 3381
875     Abelson P/PP 3381
41        Ahlin      7546
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> all$FamilyName  = paste(all$FamilyName , str_sub(all$Ticket,-3,-1), sep="")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> all$FamilySurvived = 0
> # Dataset of passengers with family
> Families = all[(all$Parch+all$SibSp) > 0,]
> 
> # Group families by their family name and number of survivals in the family
> Survival.GroupByFamilyName = aggregate(as.numeric(Families$Survived), by=list("FamilyName" = Families$FamilyName), FUN=sum, na.rm=TRUE)
> 
> # Family is considered to have survived if atleast one member survived
> FamilyWithSurvival = Survival.GroupByFamilyName[Survival.GroupByFamilyName$x > 0,]$FamilyName
> all[apply(all, 1, function(x){ifelse(x["FamilyName"] %in% FamilyWithSurvival,TRUE,FALSE)}),]$FamilySurvived = 1
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> all$AgeClass = ifelse(all$Age<=10,1,
+                       ifelse(all$Age>10 & all$Age<=20,2,
+                              ifelse(all$Age>20 & all$Age<=35,3,4)))
> all$AgeClass = as.factor(all$AgeClass)
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> all$Pclass = as.factor(all$Pclass)
> all$Sex = as.factor(all$Sex)
> all[all$Embarked == "",]$Embarked = NA
> all$Embarked = as.factor(all$Embarked)
> all[all$Cabin == "",]$Cabin = NA
> all$Cabin = as.factor(all$Cabin)
> all$FamilySize = as.factor(all$FamilySize)
> all$Mother = as.factor(all$Mother)
> all$Single = as.factor(all$Single)
> all$FamilyName = as.factor(all$FamilyName)
> 
> md.pattern(all[,!names(all) %in% c("Survived", "Name", "PassengerId", "Ticket", "AgeClass")])
    Pclass Sex SibSp Parch Title FamilySize Mother Single FamilyName
270      1   1     1     1     1          1      1      1          1
773      1   1     1     1     1          1      1      1          1
23       1   1     1     1     1          1      1      1          1
240      1   1     1     1     1          1      1      1          1
2        1   1     1     1     1          1      1      1          1
1        1   1     1     1     1          1      1      1          1
         0   0     0     0     0          0      0      0          0
    FamilySurvived Fare Embarked Age Cabin     
270              1    1        1   1     1    0
773              1    1        1   1     0    1
23               1    1        1   0     1    1
240              1    1        1   0     0    2
2                1    1        0   1     1    1
1                1    0        1   1     0    2
                 0    1        2 263  1014 1280
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> all$Embarked[is.na(all$Embarked)] = 'S'
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> fit.Fare = rpart(Fare ~ Pclass + SibSp + Parch + Age + Embarked + Title, 
+                  data = all[!is.na(all$Fare),],
+                  method = "anova")
> all$Fare[is.na(all$Fare)] = predict(fit.Fare, newdata = all[is.na(all$Fare), ])
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> marginplot(data.frame(all$Age, all$Pclass))
> 
> 
> ## ---- warning=FALSE,results='hide'-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> ageData <- mice(all[, !names(all) %in% c("Survived", "Name", "PassengerId", "Ticket", "AgeClass", "Cabin", "FamilyName")],m=8,maxit=8,meth='pmm',seed=251863)

 iter imp variable
  1   1  Age
  1   2  Age
  1   3  Age
  1   4  Age
  1   5  Age
  1   6  Age
  1   7  Age
  1   8  Age
  2   1  Age
  2   2  Age
  2   3  Age
  2   4  Age
  2   5  Age
  2   6  Age
  2   7  Age
  2   8  Age
  3   1  Age
  3   2  Age
  3   3  Age
  3   4  Age
  3   5  Age
  3   6  Age
  3   7  Age
  3   8  Age
  4   1  Age
  4   2  Age
  4   3  Age
  4   4  Age
  4   5  Age
  4   6  Age
  4   7  Age
  4   8  Age
  5   1  Age
  5   2  Age
  5   3  Age
  5   4  Age
  5   5  Age
  5   6  Age
  5   7  Age
  5   8  Age
  6   1  Age
  6   2  Age
  6   3  Age
  6   4  Age
  6   5  Age
  6   6  Age
  6   7  Age
  6   8  Age
  7   1  Age
  7   2  Age
  7   3  Age
  7   4  Age
  7   5  Age
  7   6  Age
  7   7  Age
  7   8  Age
  8   1  Age
  8   2  Age
  8   3  Age
  8   4  Age
  8   5  Age
  8   6  Age
  8   7  Age
  8   8  Age
Warning message:
Number of logged events: 64 
> 
> ## ---- warning=FALSE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Check out the imputed data
> head(ageData$imp$Age)
    1    2  3  4    5  6  7  8
6  30 35.0 31 21 34.5 40 29 26
18 19 22.0 17 24 50.0 24 41 58
20 19 60.5 23 28 27.0 19 22 39
27 39 17.0 32 34 37.0 44 22 20
29 28 27.0 14 30 36.5  2 17 37
30 29 49.0 31 47 28.0 28 27 19
> 
> # Check if the imputed data distribution follows the existing age distribution.
> ggplot(all,aes(x=Age)) + 
+   geom_density(data=data.frame(all$PassengerId, complete(ageData,6)), alpha = 0.2, fill = "blue")+
+   geom_density(data=all, alpha = 0.2, fill = "Red")+
+   labs(title="Age Distribution")+
+   labs(x="Age")
Warning message:
Removed 263 rows containing non-finite values (stat_density). 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Sixth imputed data is picked up for further analysis based on the density distribution
> all.imp <- data.frame(all$PassengerId, complete(ageData,6))
> 
> all$Age = all.imp$Age
> 
> all[is.na(all$AgeClass),]$AgeClass = ifelse(all[is.na(all$AgeClass),]$Age<=10,1,
+                       ifelse(all[is.na(all$AgeClass),]$Age>10 & all[is.na(all$AgeClass),]$Age<=20,2,
+                              ifelse(all[is.na(all$AgeClass),]$Age>20 & all[is.na(all$AgeClass),]$Age<=35,3,4)))
> 
> # All women above age of 14.5, with title Miss are to be recategorised as Ms.
> all[all$Title == "Miss" & all$Age > 14.5,]$Title = "Ms"
> 
> # Check if titles and age are as required.
> table(all$Title, all$Age > 14.5)
        
         FALSE TRUE
  Master    66    0
  Miss      71    0
  Mr         1  776
  Mrs        1  198
  Ms         0  196
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Extract single alphabet prefixed to each cabin number provided. Each of these letters represent the part of the deck were these cabins were located.
> all$CabinNo = sapply(all$Cabin,function(x) substr(x,1,1))
> all$CabinNo[all$CabinNo == ""] = NA
> table(is.na(all$CabinNo))

FALSE  TRUE 
  295  1014 
> 
> # Dataset of all families with cabin data
> familyWithCabinNo = unique(all[!is.na(all$CabinNo) & all$SibSp + all$Parch > 0,c("FamilyName", "CabinNo")])
> head(familyWithCabinNo)
     FamilyName CabinNo
2    Cumings599       C
4   Futrelle803       C
11 Sandstrom549       G
28   Fortune950       C
32   Spencer569       B
53    Harper572       D
> 
> # Function to check if these people are travelling with family 
> checkIfHasCabin <- function(familyName, CabinNo){   
+   ifelse (familyName %in% familyWithCabinNo$FamilyName, familyWithCabinNo$CabinNo, CabinNo)      
+ }
> 
> # Assign same cabin number to those members of a single family, whose cabin number is missing 
> all[is.na(all$CabinNo),]$CabinNo = apply(all[ is.na(all$CabinNo),c("FamilyName", "CabinNo")], 1, function(y) checkIfHasCabin(y["FamilyName"], y["CabinNo"]))
> 
> table(is.na(all$CabinNo))

FALSE  TRUE 
  299  1010 
> table(all$CabinNo, all$Pclass)
   
     1  2  3
  A 22  0  0
  B 65  0  0
  C 96  0  2
  D 40  6  0
  E 34  4  3
  F  0 13  8
  G  0  0  5
  T  1  0  0
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Note: This procedure has been taken from script submitted on Kaggle.
> 
> # for first class obs
> A.1 = round(22/(323-65) * 65)
> B.1 = round(65/(323-65) * 65)
> C.1 = round(96/(323-65) * 65)
> D.1 = round(40/(323-65) * 65)
> E.1 = 65 - (A.1+B.1+C.1+D.1)
> # for second class
> D.2 = round(6/(277-254) * 254)
> E.2 = round(4/(277-254) * 254)
> F.2 = 254 - (D.2+E.2)
> # for third class
> E.3 = round(3/(709-691) * 691)
> F.3 = round(8/(709-691) * 691)
> G.3 = 691 - (E.3+F.3)
> 
> set.seed(0)
> all[ sample( which( all$Pclass==1 & is.na(all$CabinNo)), A.1 ) , "CabinNo"] <- rep("A", A.1)
> all[ sample( which( all$Pclass==1 & is.na(all$CabinNo)), B.1 ) , "CabinNo"] <- rep("B", B.1)
> all[ sample( which( all$Pclass==1 & is.na(all$CabinNo)), C.1 ) , "CabinNo"] <- rep("C", C.1)
> all[ sample( which( all$Pclass==1 & is.na(all$CabinNo)), D.1 ) , "CabinNo"] <- rep("D", D.1)
> all[ sample( which( all$Pclass==1 & is.na(all$CabinNo)), E.1 ) , "CabinNo"] <- rep("E", E.1)
> 
> set.seed(0)
> all[ sample( which( all$Pclass==2 & is.na(all$CabinNo)), D.2 ) , "CabinNo"] <- rep("D", D.2)
> all[ sample( which( all$Pclass==2 & is.na(all$CabinNo)), E.2 ) , "CabinNo"] <- rep("E", E.2)
> all[ sample( which( all$Pclass==2 & is.na(all$CabinNo)), F.2 ) , "CabinNo"] <- rep("F", F.2)
> 
> set.seed(0)
> all[ sample( which( all$Pclass==3 & is.na(all$CabinNo)), E.3 ) , "CabinNo"] <- rep("E", E.3)
> all[ sample( which( all$Pclass==3 & is.na(all$CabinNo)), F.3 ) , "CabinNo"] <- rep("F", F.3)
> all[ sample( which( all$Pclass==3 & is.na(all$CabinNo)), G.3 ) , "CabinNo"] <- rep("G", G.3)
> 
> all$CabinNo = as.factor(all$CabinNo)
> table(all$CabinNo, all$Pclass)
   
      1   2   3
  A  28   0   0
  B  81   0   0
  C 120   0   2
  D  50  72   0
  E  43  48 118
  F   0 157 315
  G   0   0 274
  T   1   0   0
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> all$Ticket = NULL
> all$Name = NULL
> all$Cabin = NULL
> 
> summary(all)
  PassengerId      Survived      Pclass      Sex           Age       
 Min.   :   1   Min.   :0.0000   1:323   female:466   Min.   : 0.17  
 1st Qu.: 328   1st Qu.:0.0000   2:277   male  :843   1st Qu.:21.00  
 Median : 655   Median :0.0000   3:709                Median :29.00  
 Mean   : 655   Mean   :0.3838                        Mean   :29.88  
 3rd Qu.: 982   3rd Qu.:1.0000                        3rd Qu.:39.00  
 Max.   :1309   Max.   :1.0000                        Max.   :80.00  
                NA's   :418                                          
     SibSp            Parch            Fare         Embarked    Title    
 Min.   :0.0000   Min.   :0.000   Min.   :  0.000   C:270    Master: 66  
 1st Qu.:0.0000   1st Qu.:0.000   1st Qu.:  7.896   Q:123    Miss  : 71  
 Median :0.0000   Median :0.000   Median : 14.454   S:916    Mr    :777  
 Mean   :0.4989   Mean   :0.385   Mean   : 33.279            Mrs   :199  
 3rd Qu.:1.0000   3rd Qu.:0.000   3rd Qu.: 31.275            Ms    :196  
 Max.   :8.0000   Max.   :9.000   Max.   :512.329                        
                                                                         
 FamilySize Mother   Single         FamilyName   FamilySurvived   AgeClass
 0: 125     0:1222   0:519   Sage343     :  11   Min.   :0.0000   1:105   
 1:1184     1:  87   1:790   Goodwin144  :   8   1st Qu.:0.0000   2:200   
                             Andersson082:   7   Median :0.0000   3:599   
                             Asplund077  :   7   Mean   :0.2223   4:405   
                             Fortune950  :   6   3rd Qu.:0.0000           
                             Panula295   :   6   Max.   :1.0000           
                             (Other)     :1264                            
    CabinNo   
 F      :472  
 G      :274  
 E      :209  
 C      :122  
 D      :122  
 B      : 81  
 (Other): 29  
> 
> train = all[1:891,]
> test = all[892:1309,]
> 
> train$Survived <- as.factor(Survived)
> train$Survived <- as.factor(mapvalues(train$Survived, c("0", "1"), c("No","Yes")))
> train$PassengerId = NULL
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train.male = subset(train, train$Sex == "male")
> train.female = subset(train, train$Sex == "female")
> test.male = subset(test, test$Sex == "male")
> test.female = subset(test, test$Sex == "female")
> 
> train.male$Sex = NULL
> train.male$Mother = NULL
> train.male$Title = droplevels(train.male$Title)
> 
> train.female$Sex = NULL
> train.female$Title = droplevels(train.female$Title)
> 
> test.male$Sex = NULL
> test.male$Mother = NULL
> test.male$Title = droplevels(test.male$Title)
> 
> test.female$Sex = NULL
> test.female$Title = droplevels(test.female$Title)
> 
> # MALE
> set.seed(100)
> splt.m = sample.split(train.male, 0.75)  
> cv.train.m = train.male[splt.m,]
> cv.test.m = train.male[!splt.m,]
> 
> # FEMALE
> set.seed(100)
> splt.f = sample.split(train.female, 0.75)  
> cv.train.f = train.female[splt.f,]
> cv.test.f = train.female[!splt.f,]
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> x.m = data.matrix(cv.train.m[,2:14])
> y.m = cv.train.m$Survived
> 
> set.seed(356)
> # 10 fold cross validation
> cvfit.m.ridge = cv.glmnet(x.m, y.m, 
+                   family = "binomial", 
+                   alpha = 0,
+                   type.measure = "class")
> 
> cvfit.m.lasso = cv.glmnet(x.m, y.m, 
+                   family = "binomial", 
+                   alpha = 1,
+                   type.measure = "class")
> par(mfrow=c(1,2))
> plot(cvfit.m.ridge, main = "Ridge")
> plot(cvfit.m.lasso, main = "Lasso")
> coef(cvfit.m.ridge, s = "lambda.min")
14 x 1 sparse Matrix of class "dgCMatrix"
                           1
(Intercept)     2.0826558708
Pclass         -0.3955426817
Age            -0.0092108500
SibSp          -0.2561132145
Parch          -0.0561512946
Fare            0.0001499092
Embarked       -0.1121453068
Title          -1.4852688700
FamilySize      0.5827544488
Single          0.2951098582
FamilyName     -0.0005546517
FamilySurvived  1.5167903838
AgeClass       -0.1414274143
CabinNo        -0.0477847271
> 
> 
> ## ----warning=FALSE---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Prediction on training set
> PredTrain.M = predict(cvfit.m.ridge, newx=x.m, type="class")
> table(cv.train.m$Survived, PredTrain.M, cv.train.m$Title)
, ,  = Master

     PredTrain.M
       No Yes
  No   14   0
  Yes   1  18

, ,  = Mr

     PredTrain.M
       No Yes
  No  311   2
  Yes  62   4

> 
> # Prediction on validation set
> PredTest.M = predict(cvfit.m.ridge, newx=data.matrix(cv.test.m[,2:14]), type="class")
> table(cv.test.m$Survived, PredTest.M, cv.test.m$Title)
, ,  = Master

     PredTest.M
       No Yes
  No    6   0
  Yes   0   4

, ,  = Mr

     PredTest.M
       No Yes
  No  135   0
  Yes  20   0

> 
> # Prediction on test set
> PredTest.M = predict(cvfit.m.ridge, newx=data.matrix(test.male[,3:15]), type="class")
> table(PredTest.M, test.male$Title)
          
PredTest.M Master  Mr
       No      15 243
       Yes      8   0
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> x.f = data.matrix(cv.train.f[,2:15])
> y.f = cv.train.f$Survived
> 
> set.seed(356)
> cvfit.f.ridge = cv.glmnet(x.f, y.f, 
+                   family = "binomial", 
+                   alpha = 0,
+                   type.measure = "class")
> cvfit.f.lasso = cv.glmnet(x.f, y.f, 
+                   family = "binomial", 
+                   alpha = 1,
+                   type.measure = "class")
> par(mfrow=c(1,2))
> plot(cvfit.f.ridge, main = "Ridge")
> plot(cvfit.f.lasso, main = "Lasso")
> coef(cvfit.f.ridge, s = "lambda.min")
15 x 1 sparse Matrix of class "dgCMatrix"
                           1
(Intercept)     0.2539547716
Pclass         -0.9263797799
Age            -0.0032006570
SibSp          -0.1965839906
Parch          -0.0278873511
Fare            0.0002569075
Embarked       -0.3140163479
Title           0.0499073884
FamilySize      0.7559767859
Mother         -0.0517439784
Single          1.4412724977
FamilyName      0.0002067751
FamilySurvived  3.1620972323
AgeClass       -0.1117021037
CabinNo        -0.0585641537
> 
> 
> 
> ## ---- warning=F,message=F--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Ridge Model
> # Prediction on training set
> PredTrain.F = predict(cvfit.f.ridge, newx=x.f, type="class")
> table(cv.train.f$Survived, PredTrain.F, cv.train.f$Title)
, ,  = Miss

     PredTrain.F
      No Yes
  No  15   2
  Yes  0  20

, ,  = Mrs

     PredTrain.F
      No Yes
  No  16   3
  Yes  0  73

, ,  = Ms

     PredTrain.F
      No Yes
  No   7  18
  Yes  0  77

> confusionMatrix(cv.train.f$Survived, PredTrain.F)
Error: `data` and `reference` should be factors with the same levels.
Execution halted
