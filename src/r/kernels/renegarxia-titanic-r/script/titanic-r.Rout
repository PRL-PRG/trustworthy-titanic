
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(caret)
Loading required package: lattice
Loading required package: ggplot2
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:ggplot2’:

    margin

> 
> trainSet <- read.table("../input/train.csv", sep=",", header=TRUE)
> testSet <- read.table("../input/test.csv", sep=",", header=TRUE)
> trainSet$Survived <- factor(trainSet$Survived)
> set.seed(42)
> 
> # Convert Survived to Factor
> trainSet$Survived <- factor(trainSet$Survived)
> # Set a random seed (so you will get the same results as me)
> set.seed(42)
> 
> # Train the model using a "random forest" algorithm
> model <- train(Survived ~ Pclass + Sex + SibSp +
+             Embarked + Parch + Fare, # Survived is a function of the variables we decided to include
+             data = trainSet, # Use the trainSet dataframe as the training data
+             method = "rf",# Use the "random forest" algorithm
+             trControl = trainControl(method = "cv", # Use cross-validation
+                                     number = 5)) # Use 5 folds for cross-validation
> 
> 
> testSet$Fare <- ifelse(is.na(testSet$Fare), mean(testSet$Fare, na.rm = TRUE), testSet$Fare)
> 
> testSet$Survived <-  predict(model, newdata = testSet)
> 
> submission <- testSet[c("PassengerId", "Survived")]
> write.table(submission, file="submission.csv", col.names = TRUE, row.names = FALSE, sep = ",")
> 
> proc.time()
   user  system elapsed 
  6.428   0.273   6.728 
