
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> ## Importing packages
> 
> # This R environment comes with all of CRAN and many other helpful packages preinstalled.
> # You can see which packages are installed by checking out the kaggle/rstats docker image: 
> # https://github.com/kaggle/docker-rstats
> 
> library(tidyverse) # metapackage with lots of helpful functions
â”€â”€ [1mAttaching packages[22m â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 1.3.0 â”€â”€
[32mâœ“[39m [34mggplot2[39m 3.3.2     [32mâœ“[39m [34mpurrr  [39m 0.3.4
[32mâœ“[39m [34mtibble [39m 3.0.1     [32mâœ“[39m [34mdplyr  [39m 1.0.2
[32mâœ“[39m [34mtidyr  [39m 1.1.0     [32mâœ“[39m [34mstringr[39m 1.4.0
[32mâœ“[39m [34mreadr  [39m 1.3.1     [32mâœ“[39m [34mforcats[39m 0.5.0
â”€â”€ [1mConflicts[22m â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€
[31mx[39m [34mdplyr[39m::[32mfilter()[39m masks [34mstats[39m::filter()
[31mx[39m [34mdplyr[39m::[32mlag()[39m    masks [34mstats[39m::lag()
Warning messages:
1: package â€˜ggplot2â€™ was built under R version 3.6.2 
2: package â€˜tibbleâ€™ was built under R version 3.6.2 
3: package â€˜tidyrâ€™ was built under R version 3.6.2 
4: package â€˜purrrâ€™ was built under R version 3.6.2 
5: package â€˜dplyrâ€™ was built under R version 3.6.2 
> library(VIM)
Loading required package: colorspace
Loading required package: grid
VIM is ready to use.

Suggestions and bug-reports can be submitted at: https://github.com/statistikat/VIM/issues

Attaching package: â€˜VIMâ€™

The following object is masked from â€˜package:datasetsâ€™:

    sleep

> library(data.table)

Attaching package: â€˜data.tableâ€™

The following objects are masked from â€˜package:dplyrâ€™:

    between, first, last

The following object is masked from â€˜package:purrrâ€™:

    transpose

> library(tidyr)
> library(readr)
> ## Running code
> 
> # In a notebook, you can run a single code cell by clicking in the cell and then hitting 
> # the blue arrow to the left, or by clicking in the cell and pressing Shift+Enter. In a script, 
> # you can run code by highlighting the code you want to run and then clicking the blue arrow
> # at the bottom of this window.
> 
> ## Reading in files
> 
> # You can access files from datasets you've added to this kernel in the "../input/" directory.
> # You can see the files added to this kernel by running the code below. 
> 
> list.files(path = "../input")
[1] "gender_submission.csv" "test.csv"              "train.csv"            
> 
> ## Saving data
> 
> # If you save any files or images, these will be put in the "output" directory. You 
> # can see the output directory by committing and running your kernel (using the 
> # Commit & Run button) and then checking out the compiled version of your kernel.
> 
> 
> 
> 
> 
> 
> #####Read data from the files#######
> 
> Training_data<-read.csv('../input/train.csv',na.strings =c("","na") )
> Test_data<-read.csv('../input/test.csv',na.strings=c("",'na'))
> gender<-read.csv('../input/gender_submission.csv')
> 
> ###Getting insight into the datatype####
> str(Training_data)
'data.frame':	891 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : Factor w/ 891 levels "Abbing, Mr. Anthony",..: 109 191 358 277 16 559 520 629 417 581 ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : Factor w/ 681 levels "110152","110413",..: 524 597 670 50 473 276 86 396 345 133 ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : Factor w/ 147 levels "A10","A14","A16",..: NA 82 NA 56 NA NA 130 NA NA NA ...
 $ Embarked   : Factor w/ 3 levels "C","Q","S": 3 1 3 3 3 2 3 3 3 1 ...
> 
> 
> ######Informing the model about factors######
> Training_data$Pclass<-factor(Training_data$Pclass)
> Training_data$Survived<-factor(Training_data$Survived)
> Training_data$Embarked<-factor(Training_data$Embarked)
> 
> 
> 
> Test_data$Pclass<-factor(Test_data$Pclass)
> 
> 
> 
> 
> #######Summary of Training data#####
> summary(Training_data)
  PassengerId    Survived Pclass                                     Name    
 Min.   :  1.0   0:549    1:216   Abbing, Mr. Anthony                  :  1  
 1st Qu.:223.5   1:342    2:184   Abbott, Mr. Rossmore Edward          :  1  
 Median :446.0            3:491   Abbott, Mrs. Stanton (Rosa Hunt)     :  1  
 Mean   :446.0                    Abelson, Mr. Samuel                  :  1  
 3rd Qu.:668.5                    Abelson, Mrs. Samuel (Hannah Wizosky):  1  
 Max.   :891.0                    Adahl, Mr. Mauritz Nils Martin       :  1  
                                  (Other)                              :885  
     Sex           Age            SibSp           Parch             Ticket   
 female:314   Min.   : 0.42   Min.   :0.000   Min.   :0.0000   1601    :  7  
 male  :577   1st Qu.:20.12   1st Qu.:0.000   1st Qu.:0.0000   347082  :  7  
              Median :28.00   Median :0.000   Median :0.0000   CA. 2343:  7  
              Mean   :29.70   Mean   :0.523   Mean   :0.3816   3101295 :  6  
              3rd Qu.:38.00   3rd Qu.:1.000   3rd Qu.:0.0000   347088  :  6  
              Max.   :80.00   Max.   :8.000   Max.   :6.0000   CA 2144 :  6  
              NA's   :177                                      (Other) :852  
      Fare                Cabin     Embarked  
 Min.   :  0.00   B96 B98    :  4   C   :168  
 1st Qu.:  7.91   C23 C25 C27:  4   Q   : 77  
 Median : 14.45   G6         :  4   S   :644  
 Mean   : 32.20   C22 C26    :  3   NA's:  2  
 3rd Qu.: 31.00   D          :  3             
 Max.   :512.33   (Other)    :186             
                  NA's       :687             
> 
> 
> ######This line of code helps us identify the count NA values in differnet columns##
> NA_value_Train<-sapply(Training_data,function(x) sum(is.na(x)))
> NA_value_Test<-sapply(Test_data,function(x) sum(is.na(x)))
> 
> #### We observe that Cabin has highest NA values ######
> Training_data$Cabin<-NULL  ####Removing the cabin column 
> Test_data$Cain<-NULL
> 
> #####Handling the Missing data using KNN Imputation technique#####
> imputed_Training_data<-kNN(Training_data,variable ='Age')
> imputed_test_data<-kNN(Test_data,variable=c('Age','Fare'))
> 
> #####Removing the logical variable added due to imputation####
> imputed_Training_data$Age_imp<-NULL
> imputed_test_data$Age_imp<-NULL
> imputed_test_data$Fare_imp<-NULL
> ####Applying the logistic regression model on the train data######
> 
> survive_model<-glm(Survived ~Age+Sex+Pclass+SibSp+Fare+Embarked+Parch, data =imputed_Training_data,family ='binomial')
> 
> #####Prediciting the test data######
> 
> survival_test<-predict(survive_model,newdata=imputed_test_data,type = 'response')
> 
> 
> ######Checking accuracy through confusion matrix ######
> pred=rep(0,nrow(imputed_test_data))
> pred[survival_test >0.56]=1
> 
> table(pred,gender$Survived,dnn =c('Predicted','Actual'))
         Actual
Predicted   0   1
        0 244  33
        1  26 115
> 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
  3.965   0.257   2.920 
