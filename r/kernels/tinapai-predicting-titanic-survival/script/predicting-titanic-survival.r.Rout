
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> # This R environment comes with all of CRAN preinstalled, as well as many other helpful packages
> # The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats
> # For example, here's several helpful packages to load in 
> 
> library(ggplot2)
Warning message:
package â€˜ggplot2â€™ was built under R version 3.6.2 
> library(readr)
> library(plyr)
> library(dplyr)

Attaching package: â€˜dplyrâ€™

The following objects are masked from â€˜package:plyrâ€™:

    arrange, count, desc, failwith, id, mutate, rename, summarise,
    summarize

The following objects are masked from â€˜package:statsâ€™:

    filter, lag

The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

Warning message:
package â€˜dplyrâ€™ was built under R version 3.6.2 
> #library(mice) # imputation
> library(randomForest) # classification algorithm
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: â€˜randomForestâ€™

The following object is masked from â€˜package:dplyrâ€™:

    combine

The following object is masked from â€˜package:ggplot2â€™:

    margin

> 
> # Input data files are available in the "../input/" directory.
> # For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory
> 
> system("ls ../input")
gender_submission.csv
test.csv
train.csv
> # Any results you write to the current directory are saved as output.
> 
> train <- read.csv("../input/train.csv", stringsAsFactors=F)
> test <- read.csv("../input/test.csv", stringsAsFactors=F)
> 
> str(train)
'data.frame':	891 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : chr  "male" "female" "female" "female" ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  "" "C85" "" "C123" ...
 $ Embarked   : chr  "S" "C" "S" "S" ...
> str(test)
'data.frame':	418 obs. of  11 variables:
 $ PassengerId: int  892 893 894 895 896 897 898 899 900 901 ...
 $ Pclass     : int  3 3 2 3 3 3 3 2 3 3 ...
 $ Name       : chr  "Kelly, Mr. James" "Wilkes, Mrs. James (Ellen Needs)" "Myles, Mr. Thomas Francis" "Wirz, Mr. Albert" ...
 $ Sex        : chr  "male" "female" "male" "male" ...
 $ Age        : num  34.5 47 62 27 22 14 30 26 18 21 ...
 $ SibSp      : int  0 1 0 0 1 0 0 1 0 2 ...
 $ Parch      : int  0 0 0 0 1 0 0 1 0 0 ...
 $ Ticket     : chr  "330911" "363272" "240276" "315154" ...
 $ Fare       : num  7.83 7 9.69 8.66 12.29 ...
 $ Cabin      : chr  "" "" "" "" ...
 $ Embarked   : chr  "Q" "S" "Q" "S" ...
> 
> #First, make a full set from train and test
> 
> #Check that there are no NAs in train$Survive
> train %>%
+ summarise(numSurviveNAs = sum(is.na(Survived)))
  numSurviveNAs
1             0
> 
> #Create a test$Survived column so we can combine train and test
> test$Survived <- NA
> full <- rbind(train, test)
> 
> str(full)
'data.frame':	1309 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : chr  "male" "female" "female" "female" ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  "" "C85" "" "C123" ...
 $ Embarked   : chr  "S" "C" "S" "S" ...
> 
> #Which variables have missing data?
> varMissings <- c()
> for(column in names(full)) {
+     misses <- sapply(full[[column]], function(x) {return(x=='' | is.na(x))})
+     varMissings <- c(varMissings, sum(misses))
+ }
> names(varMissings) <- names(full)
> 
> varMissings
PassengerId    Survived      Pclass        Name         Sex         Age 
          0         418           0           0           0         263 
      SibSp       Parch      Ticket        Fare       Cabin    Embarked 
          0           0           0           1        1014           2 
> 
> 
> makeBarPlot <- function(df, column) {
+     print(column)
+     column <- as.name(column)
+     #tabulatedDf <- df %>%
+     #    group_by_(column) %>%
+     #    summarise(count = n())
+     tabulatedDf <- count(df, column) 
+     head(tabulatedDf)
+     ggplot(tabulatedDf, aes(x=column, y=count, fill=factor(column), label=count)) +
+         geom_bar(stat="identity") +
+         labs(title="Bar Graph of Survival", fill=column)  +
+        geom_text(aes(y = count + 10), position = position_dodge(0.9))
+ }
> 
> makeBarPlot(full, "Survived")
[1] "Survived"
Error: Must group by variables found in `.data`.
* Column `column` is not found.
Backtrace:
[90m    [39mâ–ˆ
[90m 1. [39mâ””â”€global::makeBarPlot(full, "Survived")
[90m 2. [39m  â””â”€dplyr::count(df, column)
[90m 3. [39m    â”œâ”€dplyr::group_by(x, ..., .add = TRUE, .drop = .drop)
[90m 4. [39m    â””â”€dplyr:::group_by.data.frame(x, ..., .add = TRUE, .drop = .drop)
[90m 5. [39m      â””â”€dplyr::group_by_prepare(.data, ..., .add = .add)
Execution halted
