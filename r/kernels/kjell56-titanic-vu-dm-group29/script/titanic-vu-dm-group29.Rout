
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## ----load data-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> data = read.csv('../input/train.csv', header=TRUE)
> test = read.csv('../input/test.csv', header=TRUE)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> library(ggplot2)
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library(dplyr)
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:ggplot2’:

    margin

The following object is masked from ‘package:dplyr’:

    combine

> plot(data)
> 
> 
> ## ----plot------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> data$PassengerId <- as.integer(data$PassengerId)
> data$Survived <- as.logical(data$Survived)
> data$Pclass <- ordered(data$Pclass, levels=c(1,2,3))
> data$Name <- as.character(data$Name)
> data$Sex <- as.factor(data$Sex)
> data$Age <- as.numeric(data$Age)
> data$SibSp <- as.integer(data$SibSp)
> data$Parch <- as.integer(data$Parch)
> data$Ticket <- as.character(data$Ticket)
> data$Fare <- as.numeric(data$Fare)
> data$Cabin <- as.character(data$Cabin)
> data$Embarked <- as.factor(data$Embarked)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(data, aes(Pclass, fill = Survived)) + 
+   geom_bar(stat="count", position = "dodge") + 
+   scale_fill_brewer(palette = "Set1")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(data, aes(Sex, fill = Survived)) + 
+   geom_bar(stat="count", position = "dodge") + 
+   scale_fill_brewer(palette = "Set1")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(data, aes(x=Age, fill=Survived)) + geom_histogram(position="dodge", bins = 9) + scale_x_continuous(breaks=seq(0,80, 10))
Warning message:
Removed 177 rows containing non-finite values (stat_bin). 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(data[data$Sex=="female",], aes(x=Age, fill=Survived)) + geom_histogram(position="dodge", binwidth = 10) + scale_x_continuous(breaks=seq(0,70, 10))
Warning message:
Removed 53 rows containing non-finite values (stat_bin). 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(data[data$Sex=="male",], aes(x=Age, fill=Survived)) + geom_histogram(position="dodge", bins = 9) + scale_x_continuous(breaks=seq(0,80, 10))
Warning message:
Removed 124 rows containing non-finite values (stat_bin). 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(data,aes(x=SibSp, fill=Survived)) + geom_histogram(position="dodge", binwidth=1) + scale_x_continuous(breaks=0:8)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(data,aes(x=Parch, fill=Survived)) + geom_histogram(position="dodge", binwidth=1)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(data,aes(x=Parch+SibSp, fill=Survived)) + geom_histogram(position="dodge", binwidth=1) + scale_x_continuous(breaks=0:10)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(data[data$Sex=="male",],aes(x=Parch+SibSp, fill=Survived)) + geom_histogram(position="dodge", binwidth=1) + scale_x_continuous(breaks=0:10)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(data,aes(x=Fare, fill=Survived)) + geom_histogram(position="dodge", binwidth=50)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> plot(data$Fare~data$Pclass)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(data[data$Pclass==1,],aes(x=Fare, fill=Survived)) + geom_histogram(position="dodge", binwidth=20)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(data[data$Sex=="male",],aes(x=Fare, fill=Survived)) + geom_histogram(position="dodge", binwidth=50) + scale_x_continuous(breaks=seq(0, 550,50))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(data[data$Sex=="female",],aes(x=Fare, fill=Survived)) + geom_histogram(position="dodge", binwidth=50, breaks=seq(0,550, 50))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> table(data$Survived[data$Cabin!=""])

FALSE  TRUE 
   68   136 
> table(data$Survived[data$Cabin==""])

FALSE  TRUE 
  481   206 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(data,aes(x=Embarked, fill=Survived)) + geom_histogram(stat="count",position="dodge")
Warning message:
Ignoring unknown parameters: binwidth, bins, pad 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> data$Name <- NULL
> data$Ticket <- NULL
> prediction = data.frame(PassengerId=data$PassengerId, Survived=data$Survived)
> data$Cabin <- NULL
> data$PassengerId <- NULL
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> plot(data)
> levels(data$Embarked)
[1] ""  "C" "Q" "S"
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> data$Embarked <- gsub('', which.max(data$Embarked), data$Embarked)
> list_na <- colnames(data)[ apply(data, 2, anyNA) ]
> 
> ##Generate mean
> nonmissingage <- na.omit(data$Age) 
> meanmissingage <- mean(nonmissingage)
> 
> ##Replace values with mean
> df_titanic_replace <- data %>%
+    mutate(replace_mean_age  = ifelse(is.na(data$Age), meanmissingage, data$Age))
> 
> ##Add family size
> df_titanic_replace$familiy_size = data$SibSp+data$Parch
> 
> ##Remove the age
> df_titanic_replace$Age <- NULL
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ##Transform age to categorical
> df_titanic_replace$Sex <- as.integer(df_titanic_replace$Sex)
> df_titanic_replace[df_titanic_replace=='1C1'] = 1
> df_titanic_replace[df_titanic_replace=='1Q1'] = 2
> df_titanic_replace[df_titanic_replace=='1S1'] = 3
> 
> ##Family size
> ggplot(data, aes(df_titanic_replace$familiy_size, fill = df_titanic_replace$Survived)) + 
+   geom_bar(stat="count", position = "dodge") + 
+   scale_fill_brewer(palette = "Set1")
> 
> ##Categorize the ages
> df_titanic_replace$agecat = cut(df_titanic_replace$replace_mean_age, c(0,20,40,60,80,100), labels=c(1:5))
> df_titanic_replace$replace_mean_age = NULL
> 
> ##categorize the fare
> df_titanic_replace$farecat = cut(df_titanic_replace$Fare, c(-1,0,50,100,150,200,600), labels=c(0:5))
> df_titanic_replace$Fare = NULL
> 
> ##Fareplot
> ggplot(data, aes(df_titanic_replace$farecat, fill = df_titanic_replace$Survived)) + 
+   geom_bar(stat="count", position = "dodge") + 
+   scale_fill_brewer(palette = "Set1")
> 
> ##Ageplot
> ggplot(data, aes(df_titanic_replace$agecat, fill = df_titanic_replace$Survived)) + 
+   geom_bar(stat="count", position = "dodge") + 
+   scale_fill_brewer(palette = "Set1")
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ##remove the sibsp and parch
> df_titanic_replace$SibSp = NULL
> df_titanic_replace$Parch = NULL
> df_titanic_replace$Embarked = as.factor(df_titanic_replace$Embarked)
> head(df_titanic_replace)
  Survived Pclass Sex Embarked familiy_size agecat farecat
1    FALSE      3   2        3            1      2       1
2     TRUE      1   1        1            1      2       2
3     TRUE      3   1        3            0      2       1
4     TRUE      1   1        3            1      2       2
5    FALSE      3   2        3            0      2       1
6    FALSE      3   2        2            0      2       1
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> test$PassengerId <- as.integer(test$PassengerId)
> test$Pclass <- ordered(test$Pclass, levels=c(1,2,3))
> test$Name <- as.character(test$Name)
> test$Sex <- as.factor(test$Sex)
> test$Age <- as.numeric(test$Age)
> test$SibSp <- as.integer(test$SibSp)
> test$Parch <- as.integer(test$Parch)
> test$Ticket <- as.character(test$Ticket)
> test$Fare <- as.numeric(test$Fare)
> test$Embarked <- as.character(test$Embarked)
> test$Name <- NULL
> test$Ticket <- NULL
> test$Cabin <- NULL
> 
> list_na <- colnames(test)[ apply(test, 2, anyNA) ]
> 
> ##Generate age mean
> nonmissingage <- na.omit(test$Age) 
> meanmissingage <- mean(nonmissingage)
> 
> #$Generate fare mean
> nomissinfare <- na.omit(test$Fare)
> meanmissingfare <- mean(nomissinfare)
> 
> ##Replace values with mean
> df_titanic_replace_test <- test %>%
+    mutate(replace_mean_age  = ifelse(is.na(test$Age), meanmissingage, test$Age),
+           replace_mean_fare = ifelse(is.na(test$Fare), meanmissingfare, test$Fare))
> 
> ##Add family size
> df_titanic_replace_test$familiy_size = test$SibSp+test$Parch
> df_titanic_replace_test$Age <- NULL
> 
> ##Transform age to categorical
> df_titanic_replace_test$Sex <- as.integer(df_titanic_replace_test$Sex)
> df_titanic_replace_test[df_titanic_replace_test=='C'] = 1
> df_titanic_replace_test[df_titanic_replace_test=='Q'] = 2
> df_titanic_replace_test[df_titanic_replace_test=='S'] = 3
> 
> ##Categorize the ages
> df_titanic_replace_test$agecat = cut(df_titanic_replace_test$replace_mean_age, c(0,20,40,60,80,100), labels=c(1:5))
> df_titanic_replace_test$replace_mean_age = NULL
> 
> ##categorize the fare
> df_titanic_replace_test$farecat = cut(df_titanic_replace_test$replace_mean_fare, c(-1,0,50,100,150,200,600), labels=c(0:5))
> df_titanic_replace_test$Fare = NULL
> df_titanic_replace_test$replace_mean_fare = NULL
> 
> ##remove the sibsp and parch
> df_titanic_replace_test$SibSp = NULL
> df_titanic_replace_test$Parch = NULL
> 
> df_titanic_replace_test$Embarked = as.factor(df_titanic_replace_test$Embarked)
> head(df_titanic_replace_test)
  PassengerId Pclass Sex Embarked familiy_size agecat farecat
1         892      3   2        2            0      2       1
2         893      3   1        3            1      3       1
3         894      2   2        2            0      4       1
4         895      3   2        3            0      2       1
5         896      3   1        3            2      2       1
6         897      3   2        3            0      1       1
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ##Doing logistic regression
> model <- glm(df_titanic_replace$Survived ~.,family=binomial(link = 'logit'),data=df_titanic_replace)
> summary(model)

Call:
glm(formula = df_titanic_replace$Survived ~ ., family = binomial(link = "logit"), 
    data = df_titanic_replace)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.1215  -0.6159  -0.4231   0.6022   2.8366  

Coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept)   3.78015    1.17617   3.214 0.001309 ** 
Pclass.L     -1.36766    0.22107  -6.187 6.15e-10 ***
Pclass.Q     -0.22296    0.19013  -1.173 0.240926    
Sex          -2.74338    0.20465 -13.405  < 2e-16 ***
Embarked2    -0.06314    0.38329  -0.165 0.869161    
Embarked3    -0.43818    0.24128  -1.816 0.069366 .  
familiy_size -0.22458    0.06655  -3.374 0.000740 ***
agecat2      -0.80213    0.24117  -3.326 0.000881 ***
agecat3      -1.41068    0.33717  -4.184 2.87e-05 ***
agecat4      -1.88413    0.66486  -2.834 0.004598 ** 
farecat1      1.63686    1.06325   1.539 0.123687    
farecat2      2.41419    1.09080   2.213 0.026882 *  
farecat3      2.28796    1.23738   1.849 0.064453 .  
farecat4      1.07190    1.34206   0.799 0.424466    
farecat5      1.74928    1.22403   1.429 0.152970    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1186.66  on 890  degrees of freedom
Residual deviance:  781.87  on 876  degrees of freedom
AIC: 811.87

Number of Fisher Scoring iterations: 5

> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #Predict on training set
> baseAcur = 549 / (549 + 342)
> 
> predictTrain = predict(model, type = "response")
> table(df_titanic_replace$Survived, predictTrain >= 0.5)
       
        FALSE TRUE
  FALSE   473   76
  TRUE    102  240
> 
> accuracy = (244 + 458) / nrow(df_titanic_replace)
> sensitivity = 244 / (244 + 98)
> specificity = 458 / (458 + 91)
> 
> cat("accuracy: ", accuracy, " > ", "baseline: ", baseAcur)
accuracy:  0.7878788  >  baseline:  0.6161616> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> #Predict on test set
> predictLogistic = predict(model, type = "response", newdata = df_titanic_replace_test)
> 
> # no preference over error t = 0.5
> df_titanic_replace_test$Survived = as.numeric(predictLogistic >= 0.5)
> table(df_titanic_replace_test$Survived)

  0   1 
255 163 
> 
> predictionsLog = data.frame(df_titanic_replace_test[c("PassengerId","Survived")])
> write.csv(file = "TitanicLogisticPred", x = predictionsLog, row.names=FALSE)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ##Random forest
> require(randomForest)
> titanic.randomforest <- randomForest(df_titanic_replace$Survived ~.,
+                       data=df_titanic_replace, 
+                       importance=TRUE, 
+                       ntree=20)
Warning message:
In randomForest.default(m, y, ...) :
  The response has five or fewer unique values.  Are you sure you want to do regression?
> summary(titanic.randomforest)
                Length Class  Mode     
call              5    -none- call     
type              1    -none- character
predicted       891    -none- numeric  
mse              20    -none- numeric  
rsq              20    -none- numeric  
oob.times       891    -none- numeric  
importance       12    -none- numeric  
importanceSD      6    -none- numeric  
localImportance   0    -none- NULL     
proximity         0    -none- NULL     
ntree             1    -none- numeric  
mtry              1    -none- numeric  
forest           11    -none- list     
coefs             0    -none- NULL     
y               891    -none- numeric  
test              0    -none- NULL     
inbag             0    -none- NULL     
terms             3    terms  call     
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #Predict on training
> baseAcur = 549 / (549 + 342)
> predictTrain = predict(titanic.randomforest, type = "response")
> table(df_titanic_replace$Survived, predictTrain >= 0.5)
       
        FALSE TRUE
  FALSE   493   56
  TRUE    119  223
> 
> accuracy = (229 + 487) / nrow(df_titanic_replace)
> sensitivity = 229 / (229 + 113)
> specificity = 487 / (487 + 62)
> cat("accuracy: ", accuracy, " > ", "baseline: ", baseAcur)
accuracy:  0.8035915  >  baseline:  0.6161616> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #Predict on test set
> predictRandomForest <- predict(titanic.randomforest, df_titanic_replace_test)
> df_titanic_replace_test$Survived = as.numeric(predictRandomForest >= 0.5)
> 
> predictionsFor = data.frame(df_titanic_replace_test[c("PassengerId","Survived")])
> write.csv(file = "TitanicRandomForest", x = predictionsFor, row.names=FALSE)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> qqnorm(predictLogistic, main="P-Values Logistic")
> qqnorm(predictRandomForest, main="P-Values Random Forests")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ##Do a test to test if difference models are significant
> sigtest = wilcox.test(predictLogistic, predictRandomForest)
> sigtest

	Wilcoxon rank sum test with continuity correction

data:  predictLogistic and predictRandomForest
W = 86546, p-value = 0.8152
alternative hypothesis: true location shift is not equal to 0

> 
> 
> proc.time()
   user  system elapsed 
  3.140   0.174   3.347 
