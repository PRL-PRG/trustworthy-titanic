{"cells":[{"metadata":{"_uuid":"785cb55cc14f94062465dce50941083a104b9670"},"cell_type":"markdown","source":"# 타이타닉 분석"},{"metadata":{"_uuid":"74819787c544c55eae615e0e6699ef7d7f7b3d22"},"cell_type":"markdown","source":"## 1. 소개"},{"metadata":{"_uuid":"6cb751f5d40a53b089f88f6fdc209617e45471f5"},"cell_type":"markdown","source":"### 1.1 데이터 설명\n* train.csv : 예측 모델을 만들기 위해 사용하는 학습 데이터다. 탑승객의 신상정보와 생존유무가 주어진다. <br />\n* test.csv - 학습 데이터에서 신상정보 및 파생변수를 토대로 모델을 만들고 test.csv파일을 이용하여 생존유무를 예측한다. <br />\n* sampleSubmission.csv - 제출시 사용하는 csv 파일이다. <br />"},{"metadata":{"_uuid":"bce6500a1587a2587c57df5982851a0adeabbc98"},"cell_type":"markdown","source":"### 1.2 변수 설명\n* survival : 생존유무, target 값. (0 = 사망, 1 = 생존) <br />\n* pclass : 티켓 클래스. (1 = 1st, 2 = 2nd, 3 = 3rd) <br />\n* sex : 성별 <br />\n* Age : 나이(세) <br />\n* sibsp : 함께 탑승한 형제자매, 배우자 수 총합 <br />\n* parch : 함께 탑승한 부모, 자녀 수 총합 <br />\n* ticket : 티켓 넘버 <br />\n* fare : 탑승 요금 <br />\n* cabin : 객실 넘버 <br />\n* embarked : 탑승 항구"},{"metadata":{"_uuid":"1c46227173f080ce3300a656d3b31139d8b80ca0"},"cell_type":"markdown","source":"## 2. 준비작업\n### 2.1 Packages"},{"metadata":{"trusted":true,"_uuid":"ce644bfd12f315d382830c7c67ef3762f130e50e"},"cell_type":"code","source":"library(readr)\nlibrary(stringr) # 문자열 처리 패키지\nlibrary(doBy)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(RColorBrewer)\nlibrary(corrplot)\nlibrary(doBy)\nlibrary(dplyr) # 전처리\nlibrary(randomForest)\nlibrary(gridExtra)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"8668831cb76fb764800a42a7c9abc9297e875be4"},"cell_type":"markdown","source":"### 2.2 Loading the data\n\nread.csv()보다 readr 패키지의 read_csv()가 조금 더 빨리 데이터를 읽어온다는 장점이 있다.<br />\n그러나 read_csv()는 stringsAsFactors 옵션이 없어서 문자열(Character)과 요인(Factor)를 구별하지 못하고 모두 Character로 불러온다.<br />\n\n추가적으로 R에서 기본 내장함수 rbind()는 두 데이터의 차원이 같을 때 병합할 수 있는데 test셋에는 Y값이 없어서 차원이 다르다.<br />\n이에 따라 dplyr::bind_rows()를 사용하여 test데이터의 Y값은 NA처리하며 병합한다.\n"},{"metadata":{"trusted":true,"_uuid":"0b66ec9313cdb02df87df72db57577878ec93582"},"cell_type":"code","source":"train <- read_csv('../input/train.csv')\ntest <- read_csv('../input/test.csv')\nfull <- bind_rows(train, test)\n\nfull <- full %>% # ticket과 cabin은 파생변수 생성을 위해 문자열로 놔둠\n  mutate(Survived = factor(Survived),\n         Pclass   = factor(Pclass, ordered = T),\n         Name     = factor(Name),\n         Sex      = factor(Sex),\n         Embarked = factor(Embarked))\n\nstr(full)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"911cb1a0ebb52f3aa157d73ddeda255b1263917f"},"cell_type":"markdown","source":"# 3. 탐색적 데이터 분석(EDA)"},{"metadata":{"_uuid":"71a3f5f63952ff4cede0f44d00106d3b9e2cd7b2"},"cell_type":"markdown","source":"## 3.1 수치값을 활용한 data 확인"},{"metadata":{"trusted":true,"_uuid":"5fbb912b9b0673ad027f9db9d531d0c41501d246"},"cell_type":"code","source":"head(full)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"05b998b2dad513946ddb3aac9eb19f9da07fea4a"},"cell_type":"code","source":"str(full)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"2ee010cd4a28e55cadd52691827d489734dbc5b8"},"cell_type":"code","source":"summary(full)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"aa369968ee722591d9d1429f4d0f0b54b2d36064"},"cell_type":"markdown","source":"1. 사망자가 생존자보다 많다 <br />\n2. 남성이 여성보다 2배 가까이 더 많다 <br />\n3. SibSp의 3분위값이 1이므로 대부분 부부끼리 혹은 형제끼리 탑승했다 <br />\n4. Parch의 3분위수가 0이므로 부모나 자녀와 함께 탑승한 승객이 많지 않다 <br />\n5. Fare의 최대값이 512로 이상치가 아닌지 확인이 필요해 보인다 <br />\n6. 결측치가 많은 데이터임을 확인할 수있다. <br />"},{"metadata":{"trusted":true,"_uuid":"94dd4d4deeed93194d109334c26ce996e29d3f40"},"cell_type":"code","source":"sapply(train, function(x) length(unique(x)))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"53b755230066c10e180afd2aa00704030cd88009"},"cell_type":"markdown","source":"## 3.2 결측치 확인 및 시각화"},{"metadata":{"trusted":true,"_uuid":"4022ebd459a6bdccf9d3837909eaf22d24fef294"},"cell_type":"code","source":"colSums(is.na(full))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"e373c6c80e6eb4d949aae3aa31f806ce5317cc76"},"cell_type":"code","source":"missing_values <- full %>%      # 결측치 비율을 데이터프레임으로\n  dplyr::summarize_all(funs(sum(is.na(.))/n()))\n\n# tidyr::gather()함수를 이용하여 stack화 시킴 (설명변수들이 key로 지정한 변수에 나열되고, 결측값들이 value로 지정한 변수의 값으로)\nmissing_values <- tidyr::gather(missing_values,\n                                key = \"feature\", value = \"missing_pct\")\nmissing_values","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"33a7d2da3db43ce35c33dd7181b3674b3cadd9da"},"cell_type":"code","source":"missing_values %>% \n  ggplot(aes(x = reorder(feature, missing_pct), y = missing_pct)) + # 정렬을 위한 reorder() 축지정\n  geom_bar(stat = \"identity\", fill = \"red\") +  # bar plot 그리기 stat = 'identity' 데이터프레임 값을 그대로 이용하여 그리라는 옵션\n  ggtitle(\"Rate of missing values in each features\") +\n  theme(plot.title = element_text(face = \"bold\",    # 글씨체 \n                                  hjust = 0.5,      # Horizon(가로비율) = 0.5\n                                  size = 15, color = \"darkblue\")) +\n  labs(x = \"Feature names\", y = \"Rate\") +  # x,y축 제목 지정\n  coord_flip() # Plot의 x, y축 변환 \n\n# 결측값이 있는 변수로만 시각화\nmissing_values <- missing_values[missing_values$missing_pct > 0, ]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4e6661b529ed36148bad0e69e2f29ff192610d9c"},"cell_type":"code","source":"missing_values <- missing_values[missing_values$missing_pct > 0, ]\n\nmissing_values %>% \n  ggplot(aes(x = reorder(feature, missing_pct), y = missing_pct)) + # 정렬을 위한 reorder() 축지정\n  geom_bar(stat = \"identity\", fill = \"red\") +  # bar plot 그리기 stat = 'identity' 데이터프레임 값을 그대로 이용하여 그리라는 옵션\n  ggtitle(\"Rate of missing values in each features\") +\n  theme(plot.title = element_text(face = \"bold\",    # 글씨체 \n                                  hjust = 0.5,      # Horizon(가로비율) = 0.5\n                                  size = 15, color = \"darkblue\")) +\n  labs(x = \"Feature names\", y = \"Rate\") +  # x,y축 제목 지정\n  coord_flip() # Plot의 x, y축 변환 ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"556d483259b33af6a5750f9a69f8cbfca03e250d"},"cell_type":"markdown","source":"## 3.3 변수 EDA"},{"metadata":{"_uuid":"fdc276f5a29d6c282d9e42d4cfdf9747f3e2921a"},"cell_type":"markdown","source":"### 3.3.1 Sex"},{"metadata":{"trusted":true,"_uuid":"5c53338f791e7f6522c0a58842de67c56e431a53"},"cell_type":"code","source":"table(full$Sex)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8d7399cdc45328e6891fa03d15d0a92232d4f1b9"},"cell_type":"code","source":"full %>% group_by(Survived, Sex) %>% summarise(freq = n())","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9fa61effd76aabd7ab81dacf286a0ed616eb0d42"},"cell_type":"code","source":"prop.table(table(full$Sex,full$Survived),1) #여자들이 생존할 확률이 높음","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"1a3faf3c5259a4ed88096d6cd246edc9e185406d"},"cell_type":"code","source":"# 성별 막대그래프\nsex.p1 <- full %>% \n  dplyr::group_by(Sex) %>% \n  summarize(N = n()) %>% \n  ggplot(aes(Sex, N)) +\n  geom_col() +\n  geom_text(aes(label = N), size = 5, vjust = 1.2, color = \"#FFFFFF\") + \n  ggtitle(\"Bar plot of Sex\") +\n  labs(x = \"Sex\", y = \"Count\")\n\n# 성별에 따른 생존률 막대그래프\nsex.p2 <- full%>%\n  filter(!is.na(Survived)) %>%\n  ggplot(aes(factor(Sex), fill = factor(Survived))) +\n  geom_bar(position = \"fill\") + \n  scale_y_continuous(labels = percent) +\n  scale_fill_brewer(palette = \"Set1\") +  # palette에 어떤색 넣을지 지정\n   # 일정한 간격으로 x축과 y축 설정 : scale_x_continuous(breaks=seq())\n  # 분석가 마음대로 x축과 y축 설정 : scale_x_continuous(breaks=c())\n  ggtitle(\"Survival Rate by Sex\") + \n  labs(x = \"Sex\", y = \"Rate\")\n\ngrid.arrange(sex.p1,sex.p2,ncol=2)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"551e6176acdd507479b85fd05dc1173400cbccfe"},"cell_type":"markdown","source":"### 3.3.2 Pclass"},{"metadata":{"trusted":true,"_uuid":"74ba69203594777102ebdf498f818308b8d21599"},"cell_type":"code","source":"table(full$Pclass)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"50a2570f7979cfe17570a03511563f4bd8ea5d66"},"cell_type":"code","source":"prop.table(table(full$Pclass,full$Survived),1) # 더 좋은 객실 이용자일수록 생존할 확률이 높음","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f0217c199edbfb698dfd33f42ee40f2d016df983"},"cell_type":"code","source":"# Pclass 막대그래프\npclass.p1 <- full %>% \n  dplyr::group_by(Pclass) %>% \n  summarize(N = n()) %>% \n  ggplot(aes(Pclass, N)) +\n  geom_col() +\n  geom_text(aes(label = N), size = 5, vjust = 1.2, color = \"#FFFFFF\") + \n  ggtitle(\"Bar plot of Pclass\") +\n  labs(x = \"Pclass\", y = \"Count\")\n\n# Pclass에 따른 생존률 막대그래프\npclass.p2 <- full%>%\n  filter(!is.na(Survived)) %>%\n  ggplot(aes(factor(Pclass), fill = factor(Survived))) +\n  geom_bar(position = \"fill\") + \n  scale_fill_brewer(palette = \"Set1\") +  \n  ggtitle(\"Survival Rate by Pclass\") + \n  labs(x = \"Pclass\", y = \"Rate\")\n\ngrid.arrange(pclass.p1,pclass.p2,ncol=2)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"ebaa045fee739843ffd872949c2c0e66ccaf7b7a"},"cell_type":"markdown","source":"### 3.3.3 Fare"},{"metadata":{"trusted":true,"_uuid":"cb1962cf4fd454c68e693ef8a87b88ff706f5e37"},"cell_type":"code","source":"hist(full$Fare)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3f4e984bf39f3c2f730d6db1b759c25884331b34"},"cell_type":"code","source":"# fare 히스토그램\nFare.p1 <- full %>%\n  ggplot(aes(Fare)) + \n  geom_histogram(col    = \"yellow\",\n                 fill   = \"blue\", \n                 alpha  = .5) +\n  ggtitle(\"Histogram of passengers Fare\") +\n  theme(plot.title = element_text(face = \"bold\", hjust = 0.5, size = 15))\n\n# 생존여부에 따른 fare box plot\nFare.p2 <- full %>%\n  filter(!is.na(Survived)) %>% \n  ggplot(aes(Survived, Fare)) +  # x축에 생존 y축에 fare\n  # 관측치를 회색점으로 찍되, 중복되는 부분은 퍼지게 그려줍니다.\n  geom_jitter(col = \"gray\") + \n  # 상자그림 : 투명도 50% \n  geom_boxplot(alpha = .5) + \n  ggtitle(\"Boxplot of passengers Fare\") +\n  theme(plot.title = element_text(face = \"bold\", hjust = 0.5, size = 15))\n\ngrid.arrange(Fare.p1,Fare.p2,ncol=2)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"7376efeea780704f8d6f7f9ee80ea0d654422219"},"cell_type":"markdown","source":"### 3.3.4 Age"},{"metadata":{"trusted":true,"_uuid":"0d0582c2eb10e2bf782f76c69d17eeb38fbea092"},"cell_type":"code","source":"hist(full$Age)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"35996f690a91fdc15a209bd30a4c84408a4c59b6"},"cell_type":"code","source":"# 나이 분포 히스토그램\nage.p1 <- full %>% \n  ggplot(aes(Age)) +     # x값에 따른 y값을 그리는 것이 아니므로 축 지정 안해줘도 됨 \n  # 히스토그램 그리기, 설정\n  geom_histogram(breaks = seq(0, 80, by = 1), # 간격 설정 \n                 col    = \"red\",              # 막대 경계선 색깔 \n                 fill   = \"green\",            # 막대 내부 색깔 \n                 alpha  = .5) +               # 막대 투명도 = 50% \n  # Plot title\n  ggtitle(\"All Titanic passengers age hitogram\") +\n  theme(plot.title = element_text(face = \"bold\",    # 글씨체 \n                                  hjust = 0.5,      # Horizon(가로비율) = 0.5\n                                  size = 15, color = \"darkblue\"))\n\n# 나이에 따른 생존 분포 파악\nage.p2 <- full %>% \n  filter(!is.na(Survived)) %>%\n  ggplot(aes(Age, fill = Survived)) + \n  geom_density(alpha = .5) +   # 막대그래프가 아니고 밀도그래프니까 plot으로 축 지정하고 geom_bar 대신에 geom_density\n  ggtitle(\"Titanic passengers age density plot\") + \n  theme(plot.title = element_text(face = \"bold\", hjust = 0.5,\n                                  size = 15, color = \"darkblue\"))\n\ngrid.arrange(age.p1,age.p2,ncol=2)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"3738b3634474bdbe5b2f934b55ab7b1986376ca9"},"cell_type":"markdown","source":"### 3.3.5 Sibsp"},{"metadata":{"trusted":true,"_uuid":"348368dd19b55224a7a75cacd3c552b11e9bd79a"},"cell_type":"code","source":"table(full$SibSp)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9ce20033727510f372d319ae48329d1a0781d13d"},"cell_type":"code","source":"train %>% group_by(Survived, SibSp) %>% summarise(freq = n())","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"c73539202cf6f58093b16ea5c12bf4213a635309"},"cell_type":"code","source":"prop.table(table(train$SibSp,train$Survived),1) #배우자,형제자매가 많을수록 생존률이 떨어짐","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"4e3be3d7a0f099e20d8927a7f52dc9bb224e88ed"},"cell_type":"markdown","source":"### 3.3.6 Parch"},{"metadata":{"trusted":true,"_uuid":"12afd70f981306a4d0bd1bdedaa655f21363caf3"},"cell_type":"code","source":"table(train$Parch)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"c144ebe1e3b2bf0272fccd2444eb5ba8221d88c1"},"cell_type":"code","source":"train %>% group_by(Survived, Parch) %>% summarise(freq = n())","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"894f9bd5652d629e36451f673932066dc24b3b6c"},"cell_type":"code","source":"prop.table(table(train$Parch,train$Survived),1) #부모와 자녀를 1~3명 정도 동승했을 경우 생존률이 높음 ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"8349eccf29306314fd2deb0471d10db72155125b"},"cell_type":"markdown","source":"### 3.3.7 Embarked"},{"metadata":{"trusted":true,"_uuid":"8457d727e11a6e74fbedcaa9b7899c9a2c8c3882"},"cell_type":"code","source":"table(train$Embarked) #결측값 2개","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"77c5950ef84a07fe875c4f4088272e5063003a12"},"cell_type":"code","source":"train %>% group_by(Survived, Embarked) %>% summarise(freq = n())","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f896ecca9e2a7e2a226243e0db4b861825cc093e"},"cell_type":"code","source":"prop.table(table(train$Embarked,train$Survived),1) # C에서 탑승한 인원들만 생존률이 더 높다","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"92668542d324a5a6f8dd2cb7049a08f12ba538e9"},"cell_type":"markdown","source":"# 4. 결측치 처리"},{"metadata":{"_uuid":"bb41e6d17155bd073ac6f083c425e9bbd810081a"},"cell_type":"markdown","source":"3.2 EDA 과정에서 결측치가 Cabin에 1014개, Age에 263개, Embarked 2개, Fare에 1개 존재한다는 것을 확인했다<br />\nCabin은 결측치 수가 너무 많아서 그냥 변수를 제거하고, 차후 파생병수 Deck을 생성할 것이다<br />\n따라서 Cabin 변수를 제외한 나머지 변수들에 대한 결측치 처리를 수행하려 한다<br />\n\nAge 결측처리는 5.feature engineering 과정에서 생성한 파생변수 title을 이용하여 처리하기 위해 5.4 Age feature engineering 과정에서 결측처리를 병행하도록 한다<br />\n\n따라서 해당 절에서는 Embarked 와 Fare의 결측처리를 우선 수행한다"},{"metadata":{"trusted":true,"_uuid":"13f157c4b396b8fb570d59fdec8e3edbd736f968"},"cell_type":"code","source":"colSums(is.na(full))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d810e53d79eac0eb1ec74a1392a75dd68cb8cf0e"},"cell_type":"markdown","source":"## 4.1 Embarked 결측처리"},{"metadata":{"trusted":true,"_uuid":"e3b392e92e41363dc734eb9a3a5e1bc5853506c8"},"cell_type":"code","source":"full[is.na(full$Embarked), ] #두개의 관측치 모두 Fare가 80이고, Pclass가 1임","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"2a52ebf303ff5f78029b6465a49505522e0cf921"},"cell_type":"code","source":"embark_fare <- full[!is.na(full$Embarked), ]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"5da041b8d1d4041f669d5638d1b8c417eb0c14c7"},"cell_type":"code","source":"ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +\n  geom_boxplot() +\n  geom_hline(aes(yintercept=80), # fare가 80에 line 생성\n             colour='red', linetype='dashed', lwd=2) +\n  scale_y_continuous()","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"10b46ee71a89925e4f2bed543377a093c639564c"},"cell_type":"markdown","source":"fare가 80면서 Pclass가 1인 승객들 대다수는 Embark가 C다"},{"metadata":{"trusted":true,"_uuid":"02524487935362e59bb2177c352eb44cb34937d8"},"cell_type":"code","source":"full$Embarked[c(62, 830)] <- 'C'\nfull[c(62, 830),] ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"4757069558c5ad93ee9e234024c9b361dc6eb187"},"cell_type":"markdown","source":"## 4.2 Fare 결측처리"},{"metadata":{"trusted":true,"_uuid":"95935641cecdf3ec1a7e8932f46bddfcf28d7f3c"},"cell_type":"code","source":"full  %>% filter(is.na(full$Fare)) #Pclasss가 3이고, Embarked는 S임","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8123423a50a224e52b07b2589f8b74c50e305f1c"},"cell_type":"code","source":"full$Fare[1044] <- median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE) #중앙값으로 결측치 처리\nfull[1044,]","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"4bff237444c13bd68346a956225cc045b86ed085"},"cell_type":"markdown","source":"# 5. Feature engineering"},{"metadata":{"_uuid":"5eab099431124a851d562b3ba183badab64386e0"},"cell_type":"markdown","source":"## 5.1 Name"},{"metadata":{"_uuid":"bef1c0f9271db5a038b3154441d80111196ba96c"},"cell_type":"markdown","source":"Name에서 성별과 관련된 이름만을 추출하고 범주화해서 Title 파생변수를 생성한다"},{"metadata":{"trusted":true,"_uuid":"dcd1edc6367bf6ff0166fc12795fd79aea77faf7"},"cell_type":"code","source":"Title <- full$Name\nTitle <- gsub(\"^.*, (.*?)\\\\..*$\", \"\\\\1\", Title) # 정규표현식\nfull$Title <- Title\nunique(full$Title)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"dd4c187a64801b94c79a0f1950ef3331a54260e3"},"cell_type":"markdown","source":"이 title이라는 파생변수를 그대로 사용할 경우 모델의(특히 Tree based model) 복잡도가 상당히 높아지기 때문에 범주를 줄여줘야한다.\n그 전에 descr패키지를 이용해서 각 범주별 빈도수와 비율을 확인해보겠다"},{"metadata":{"trusted":true,"_uuid":"67fe3f79e1a5d138e3561d3009e12fdd6c22c0a5"},"cell_type":"code","source":"# 범주별 빈도수, 비율 확인 \ndescr::CrossTable(full$Title)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"75828436b599abc081c4b69eb0493d8bb0d844cd"},"cell_type":"code","source":"# 5개 범주로 단순화 시키는 작업 \nfull <- full %>%\n  # \"%in%\" 대신 \"==\"을 사용하게되면 Recyling Rule 때문에 원하는대로 되지 않습니다.\n  mutate(Title = ifelse(Title %in% c(\"Mlle\", \"Ms\", \"Lady\", \"Dona\"), \"Miss\", Title), # %in% 개념\n         Title = ifelse(Title == \"Mme\", \"Mrs\", Title),\n         Title = ifelse(Title %in% c(\"Capt\", \"Col\", \"Major\", \"Dr\", \"Rev\", \"Don\",\n                                     \"Sir\", \"the Countess\", \"Jonkheer\"), \"Officer\", Title),\n         Title = factor(Title))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"cfae9470a660b3a3c7a597d7ce5fbbb8a083f441"},"cell_type":"code","source":"# 파생변수 생성 후 각 범주별 빈도수, 비율 확인 \ndescr::CrossTable(full$Title) # 5개의 범주로 축소","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"8c4fc807f1b0add38152dfa7ee81f6316fd45dab"},"cell_type":"markdown","source":"## 5.2 Sex"},{"metadata":{"_uuid":"d813d04fb8ed10207f27f42bb0bb93c501788e5a"},"cell_type":"markdown","source":"성별을 더미화한다"},{"metadata":{"trusted":true,"_uuid":"73c088e698ffa6f29eaccbd79277a90571924c0f"},"cell_type":"code","source":"full$Sex <- ifelse(full$Sex == \"male\" ,0 , 1)\nfull$Sex <- as.factor(full$Sex)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"197f6edcbc06928b37a02a7f25b4dc5dcb472459"},"cell_type":"markdown","source":"## 5.3 Fsize"},{"metadata":{"_uuid":"bbbdb4d2bbfe1ac2662f4735a759896bffd3a061"},"cell_type":"markdown","source":"Sibsp와 Parch를 이용하여 Fsize 파생변수를 생성한다"},{"metadata":{"trusted":true,"_uuid":"fb66af8a49693b2c6f77eaf828981b59efb3d7d3"},"cell_type":"code","source":"full$Fsize <- full$SibSp + full$Parch + 1\ntable(full$Fsize)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"972662785fc7f71c5800e993a211b5569895c90c"},"cell_type":"code","source":"# Fsize에 따른 생존율 시각화\nFsize.p1 <- full%>%\n  filter(!is.na(Survived)) %>%\n  ggplot(aes(Fsize, fill = Survived)) +\n  geom_bar(position = \"fill\") + \n  scale_y_continuous(labels = percent) +\n  scale_x_continuous(breaks=c(1:11)) +\n  scale_fill_brewer(palette = \"Set1\") +  # palette에 어떤색 넣을지 지정\n  # 일정한 간격으로 x축과 y축 설정 : scale_x_continuous(breaks=seq())\n  # 분석가 마음대로 x축과 y축 설정 : scale_x_continuous(breaks=c())\n  ggtitle(\"Survival Rate by Fsize\") + \n  labs(x = \"Fsize\", y = \"Rate\")\n\nFsize.p1\n\n\n\n#ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +\n#  geom_bar(stat='count', position='fill') +   #position = 'dodge', 'fill' 구분\n#  scale_x_continuous(breaks=c(1:11)) +\n#  labs(x = 'Family Size', y = 'Rate') \n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"2cdde2f30ce29cf40f8d3bc89ed45b09ee0c72c2"},"cell_type":"code","source":"# 범주화\nfull$Familysize[full$Fsize == 1] <- 'single'\nfull$Familysize[full$Fsize < 5 & full$Fsize > 1] <- 'small'\nfull$Familysize[full$Fsize > 4] <- 'large'\n\nfull$Familysize <- as.factor(full$Familysize)\ntable(full$Familysize)","execution_count":null,"outputs":[]},{"metadata":{"scrolled":false,"trusted":true,"_uuid":"d74dc1b3ccfe04e53fb2fb319b613c657334d9a5"},"cell_type":"code","source":"# 범주화 후 Familiysize에 따른 생존율 시각화\nggplot(full[1:891,], aes(x = Familysize, fill = Survived)) +\n  geom_bar(position = 'fill') +\n  ggtitle(\"Survival Rate by Familysize\")\n  labs(x=\"Familysize\", y=\"Rate\")\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"04bb0a4ea4777f39a99dd1e194d91a62ac29691d"},"cell_type":"markdown","source":"## 5.4 Cabin"},{"metadata":{"trusted":true,"_uuid":"2c8b06aee6c1b3dcbd26a39737bb4ec46e20b257"},"cell_type":"code","source":"full$Cabin[1:28]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"cd4b6bb83df685646dae7d1f69c283ab35d4fb99"},"cell_type":"code","source":"strsplit(full$Cabin[2], NULL)[[1]]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"b69bc59562cc486bc5f36fa433c93f3c36a8fffa"},"cell_type":"code","source":"full$Deck<-factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"639a52ec4c0ed8533b63fb85a3219b1ae74bf6da"},"cell_type":"code","source":"full$Deck=as.character(full$Deck)\nstr(full)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a23a35c7e460a9075fb77b4b802e39a6c3153d17"},"cell_type":"code","source":"#Cabin 변수 제거\nfull=full[,-11]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8c5cba5bbb06bf5e7993a9a35327bb71bf2b43d7"},"cell_type":"code","source":"head(full)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3e57fac76b1d9ffcb00e8d8da85ddfe7b18c23cb"},"cell_type":"code","source":"full$Deck[is.na(full$Deck)] <- \"U\"\n\ncabin=full %>%filter(!is.na(full$Survived)& full$Deck!='U')\n\nggplot(cabin,aes(x=Deck, fill=factor(Survived), na.rm=TRUE)) +\n        geom_bar(stat='count') +\n        facet_grid(.~Pclass) +\n        labs(title=\"Survivor split by Pclass and Deck\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"full=full  %>% \n    mutate(Deck= ifelse(Pclass==1 & Deck==\"U\",\"X\",\n                        ifelse(Pclass==2 & Deck==\"U\",\"Y\",\n                               ifelse(Pclass==3 & Deck==\"U\",\"Z\",Deck)))\n          )","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"full  %>% count(Deck)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d203c392dd99b3e12ddaf13e79417b8626a99459"},"cell_type":"markdown","source":"## 5.5 Age"},{"metadata":{"_uuid":"4d16144756e57dee8f8803668d268cbeca0b3eab"},"cell_type":"markdown","source":"Age의 결측처리와 변수 가공을 수행한다"},{"metadata":{"_uuid":"56eadf22279c8ab96c22938588653326066b3c32"},"cell_type":"markdown","source":"### 5.5.1 Age 결측처리"},{"metadata":{"_uuid":"90dee78817da44760b0e69b56f200acbc7b7c1ba"},"cell_type":"markdown","source":"#### Sex에 따른 Age 탐색"},{"metadata":{"trusted":true,"_uuid":"bd9a3a684605ab7994602c5b7bd9e0854222568d"},"cell_type":"code","source":"age.sex <- full %>% \n  ggplot(aes(Age, fill = Sex)) + \n  geom_density(alpha = .5) +  \n  ggtitle(\"Titanic passengers Age density plot\") + \n  theme(plot.title = element_text(face = \"bold\", hjust = 0.5,\n                                  size = 15, color = \"darkblue\"))\nage.sex","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"5b3476031817785b2f0b3e8fa8c79fcade802a96"},"cell_type":"markdown","source":"#### Pclass에 따른 Age 탐색"},{"metadata":{"trusted":true,"_uuid":"9f1c76bc96547708bc2afe28fc16b877ef34ab1f"},"cell_type":"code","source":"age.pclass <- full %>% \n  ggplot(aes(Age, fill = Pclass)) + \n  geom_density(alpha = .5) +  \n  ggtitle(\"Titanic passengers Age density plot\") + \n  theme(plot.title = element_text(face = \"bold\", hjust = 0.5,\n                                  size = 15, color = \"darkblue\"))\nage.pclass","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"304fc71a43e3e5864094848fb6efd49e8a4fdefc"},"cell_type":"markdown","source":"#### Title에 따른 Age 탐색"},{"metadata":{"trusted":true,"_uuid":"93bfb059691ef56c3baf3616a3fd23ac9d7c11ea"},"cell_type":"code","source":"age.title <- full %>% \n  ggplot(aes(Age, fill = Title)) + \n  geom_density(alpha = .5) +  \n  ggtitle(\"Titanic passengers Age density plot\") + \n  theme(plot.title = element_text(face = \"bold\", hjust = 0.5,\n                                  size = 15, color = \"darkblue\"))\nage.title","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"cd57f0b69198446c557af785c71c211184db4c61"},"cell_type":"markdown","source":"title에 따른 결측처리 방법을 선택한다\n각 분포가 정규분포라고 보기 힘드므로 중앙값을 사용한다"},{"metadata":{"trusted":true,"_uuid":"f96230a0b34376eec737493c6c458a487d827f31"},"cell_type":"code","source":"plot(full$Title)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"dcfe7ec6f7986e008e3035de5db1ce68e0414b52"},"cell_type":"code","source":"# title별 Median Age를 통한 결측값 처리\nfull=as.data.frame(full)\nsummaryBy(Age ~ Title, data=full, FUN=c(mean, sd, median), na.rm=TRUE) ## ddply로도","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"c541529577b1e5a180a449123e4f9fa61ee0f75b"},"cell_type":"code","source":"full$Age <- ifelse((is.na(full$Age) & full$Title == 'Master'), 4, full$Age)\nfull$Age <- ifelse((is.na(full$Age) & full$Title == 'Miss'), 22, full$Age)\nfull$Age <- ifelse((is.na(full$Age) & full$Title == 'Mr'), 29, full$Age)\nfull$Age <- ifelse((is.na(full$Age) & full$Title == 'Mrs'), 35, full$Age)\nfull$Age <- ifelse((is.na(full$Age) & full$Title == 'Officer'), 48, full$Age)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"f372788ef7bf9c573a5dc99b88c6b22bbf94ae3b"},"cell_type":"markdown","source":"### 5.5.2 Age 변수 가공"},{"metadata":{"trusted":true,"_uuid":"615d0c618a898351bb5746bd55190047681638a3"},"cell_type":"code","source":"hist(full$Age, freq=F, main='Age',col='lightgreen', ylim=c(0,0.05))\n\n# child : 18세 이하\n# adult : 19세 이상 64세 이하\n# senior : 65세 이상\n\nfull$Age <- ifelse(full$Age <= 18, \"child\",\n                   ifelse(full$Age > 18 & full$Age <= 64, \"adult\",\"senior\"))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"fc694a83f48fb1d836524aedb936552b20de4ce8"},"cell_type":"markdown","source":"## 5.6 Ticket"},{"metadata":{"_uuid":"21ebf031e134f8e9cbd2b944de44b8fc3257a6c7"},"cell_type":"markdown","source":"Ticket 변수를 이용하여 GroupSize 파생변수를 생성한다"},{"metadata":{"trusted":true,"_uuid":"2049c700d5ae049853a5c32f9e4a6bf46280b4ea"},"cell_type":"code","source":"length(unique(full$Ticket))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"90a11520b290f1497d2f5a27da2fea435a031169"},"cell_type":"code","source":"head(full$Ticket)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f40660d6a11acecd458381d9ded17f942a9f2d3a"},"cell_type":"code","source":"full  %>%  arrange(Ticket) #같은 티켓인데도 불구하고 Family가 single, 친구등과 같이 온것으로 유추","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"fbcd60e3a7483cbb7c28a22b0ee0e41abe543bde"},"cell_type":"code","source":"full$TravelGroup <- NA","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"84dd599bb5ed99bd94488f8f69698f3ae7d07bbd"},"cell_type":"code","source":"full <- (transform(full, TravelGroup = match(Ticket, unique(Ticket))))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"ebc06d204ba6c6d488237109afd85c31b60dceb1"},"cell_type":"code","source":"full <- full %>% \n            group_by(TravelGroup) %>% \n            mutate(GroupSize = n()) %>%\n            ungroup()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9edd219db805a9b1565cd3359d237b0d74ca251a"},"cell_type":"code","source":"full  %>% arrange(Ticket)  %>% head()","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"dda2fe935f8ec467ad476122aab2a03417cea90b"},"cell_type":"markdown","source":"# 6. Predict"},{"metadata":{"_uuid":"b396aa081e1f9b049ae24fb49a7b569c1c607cda"},"cell_type":"markdown","source":"## 6.1 변수선택\nPclass, Sex, Age, Fare, Embarked, Title, Fsize, GroupSize, Deck"},{"metadata":{"trusted":true,"_uuid":"0e4dba0a43350b9bc6f5752c3d41d2c063164ed0"},"cell_type":"code","source":"str(full)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"134696968bc53f8e23e4f0b2b69f5bb4dbfa5629"},"cell_type":"code","source":"#범주화 안된 변수들 범주화 처리\nfactor_vars <- c('Age','GroupSize','Deck')\n\nfull[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))\n                            \n#Fare log변환\nfull$Fare=log1p(full$Fare)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"full=full  %>%  select(-c(1,4,7,8,9,13,16))\nstr(full)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"61ccc792c90dab6aa36b0a85efa5f230537b85aa"},"cell_type":"code","source":"train <-full  %>% filter(is.na(Survived)==FALSE)\ntest <-full  %>% filter(is.na(Survived)==TRUE)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"42e5f889dd260a09a08682294966ef8c24d3fc58"},"cell_type":"code","source":"train_label <- as.numeric(train$Survived)-1\ntest_label <- test$Survived\n\n\nx_train<- model.matrix(~.-1, data = train[,-1]) %>% data.frame\n\nx_test <- model.matrix(~.-1, data = test[,-1]) %>% data.frame","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"# XGBOOST"},{"metadata":{},"cell_type":"markdown","source":"## (1) cross vaildation"},{"metadata":{"trusted":true},"cell_type":"code","source":"library(xgboost)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"dtrain <- xgb.DMatrix(data = as.matrix(x_train), label=train_label)\ndtest <- xgb.DMatrix(data = as.matrix(x_test))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"set.seed(2019)\nparam <- list(objective   = \"binary:logistic\",\n              eval_metric = \"auc\",\n              max_depth   = 6,\n              eta         = 0.01,\n              gammma      = 0,\n              subsamle    = 0.5,\n              colsample_bytree = 0.5,\n              min_child_weight = 5)\n# xgb_cv <- xgb.cv(params  = param,\n#               data    = dtrain,\n#               nrounds = 5000,\n#               nfold   = 5,\n#               nthread = -1,\n#               silent = 1,\n#               print_every_n = 100,\n#               verbose = 0)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"# best=xgb_cv$best_iteration  # optimal number of tree","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"# auc=xgb_cv$evaluation_log\n# auc  %>% filter(test_auc_mean==max(auc[,4]))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"xgb <- xgb.train(params  = param,\n              data    = dtrain,\n              nrounds = 4790,\n              silent = 1,\n              print_every_n = 100,\n              verbose = 0)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"## (2) Threshold"},{"metadata":{"trusted":true},"cell_type":"code","source":"library(caret)\nset.seed(123)\nsplit <- createDataPartition(y = train$Survived,p = 0.7,list = FALSE)\n\nnew_train <- train[split,] \nnew_test <- train[-split,]\n\n\nx_label= as.numeric(new_train$Survived)-1\ny_label= as.numeric(new_test$Survived)-1\n\nnew_train2 <- model.matrix(~.-1, data = new_train[,-1]) %>% data.frame\nnew_test2 <- model.matrix(~.-1, data = new_test[,-1]) %>% data.frame\n\ndtrain2 <- xgb.DMatrix(data = as.matrix(new_train2), label=x_label)\ndtest2 <- xgb.DMatrix(data = as.matrix(new_test2), label=y_label)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"xgb2 <- xgb.train(params  = param,\n              data    = dtrain2,\n              nrounds = 4790,\n              silent = 1,\n              print_every_n = 100,\n              verbose = 0)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"set.seed(2019)\nXGB_pred2 <- predict(xgb2, dtest2)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"head(XGB_pred2,10)\nhead(new_test$Survived,10)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"set.seed(2019)\nXGB_pred2 <- predict(xgb2, dtest2)\nXGB_pred2 <- ifelse(XGB_pred2>=0.5,1,0)\n#plot ROC \nlibrary(ROCR) \nlibrary(Metrics)\npr <- prediction(XGB_pred2,new_test$Survived)\nperf <- performance(pr,measure = \"tpr\",x.measure = \"fpr\") \nplot(perf) > auc(new_test$Survived,XGB_pred) #0.8109","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"auc(new_test$Survived,XGB_pred2)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"set.seed(2019)\nXGB_pred2 <- predict(xgb2, dtest2)\nXGB_pred2 <- ifelse(XGB_pred2>=0.4,1,0)\n#plot ROC \nlibrary(ROCR) \nlibrary(Metrics)\npr <- prediction(XGB_pred2,new_test$Survived)\nperf <- performance(pr,measure = \"tpr\",x.measure = \"fpr\") \nplot(perf) > auc(new_test$Survived,XGB_pred2) #0.815","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"auc(new_test$Survived,XGB_pred2)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"* 임계값을 0.4로 했을때가 성능이 더 좋음"},{"metadata":{},"cell_type":"markdown","source":"## (3) Submission"},{"metadata":{"trusted":true},"cell_type":"code","source":"set.seed(2019)\nXGB_pred <- predict(xgb, dtest)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"XGB_pred <- ifelse(XGB_pred>=0.4,1,0)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"xgb.importance(colnames(dtrain), model = xgb) %>% \n  xgb.plot.importance(top_n = 30)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"submission_xgb <- read.csv('../input/sample_submission.csv')\nsubmission_xgb$Survived <- XGB_pred\nwrite.csv(submission_xgb, file='submission_xgb.csv', row.names = F)","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"codemirror_mode":"r","file_extension":".r","mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.5.1"}},"nbformat":4,"nbformat_minor":1}