
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> train <- read.csv("../input/train.csv")
> test <- read.csv("../input/test.csv")
> 
> # Install and load required packages for decision trees and forests
> library(rpart)
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.
> library(party)
Loading required package: grid
Loading required package: mvtnorm
Loading required package: modeltools
Loading required package: stats4
Loading required package: strucchange
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

Loading required package: sandwich
Warning messages:
1: package ‘party’ was built under R version 3.6.2 
2: package ‘zoo’ was built under R version 3.6.2 
> 
> # Join together the test and train sets for easier feature engineering
> test$Survived <- NA
> combi <- rbind(train, test)
> 
> # Convert to a string
> combi$Name <- as.character(combi$Name)
> 
> # Engineered variable: Title
> combi$Title <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})
> combi$Title <- sub(' ', '', combi$Title)
> # Combine small title groups
> combi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'
> combi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'
> combi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'
> # Convert to a factor
> combi$Title <- factor(combi$Title)
> 
> # Engineered variable: Family size
> combi$FamilySize <- combi$SibSp + combi$Parch + 1
> 
> # Engineered variable: Family
> combi$Surname <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})
> combi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep="")
> combi$FamilyID[combi$FamilySize <= 2] <- 'Small'
> # Delete erroneous family IDs
> famIDs <- data.frame(table(combi$FamilyID))
> famIDs <- famIDs[famIDs$Freq <= 2,]
> combi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- 'Small'
> # Convert to a factor
> combi$FamilyID <- factor(combi$FamilyID)
> 
> # Fill in Age NAs
> 
> Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize, 
+                 data=combi[!is.na(combi$Age),], method="anova")
> combi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age),])
> # Check what else might be missing
> 
> # Fill in Embarked blanks
> 
> which(combi$Embarked == '')
[1]  62 830
> combi$Embarked[c(62,830)] = "S"
> combi$Embarked <- factor(combi$Embarked)
> # Fill in Fare NAs
> 
> which(is.na(combi$Fare))
[1] 1044
> combi$Fare[1044] <- median(combi$Fare, na.rm=TRUE)
> 
> 
> # Split back into test and train sets
> train <- combi[1:891,]
> test <- combi[892:1309,]
> 
> # Build condition inference tree Random Forest
> set.seed(415)
> fit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,
+                data = train, controls=cforest_unbiased(ntree=1500, mtry=3)) 
> # Now let's make a prediction and write a submission file
> Prediction <- predict(fit, test, OOB=TRUE, type = "response")
> submit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)
Error in data.frame(PassengerId = test$PassengerId, Survived = Prediction) : 
  arguments imply differing number of rows: 418, 891
Execution halted
