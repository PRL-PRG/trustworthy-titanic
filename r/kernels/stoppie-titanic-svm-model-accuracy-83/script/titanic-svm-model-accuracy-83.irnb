{"cells":[{"metadata":{"_uuid":"d9ce47a31cb9fd4b8952b76631bed77ed3142bb9","_execution_state":"idle","trusted":true},"cell_type":"code","source":"library(tidyverse) # metapackage with lots of helpful functions\nlibrary(mlr) # wrapper for machine learning algorithms\nlibrary(kernlab) # svm learner\n# library(parallel) # parallel computations\n# library(parallelMap) # parallel computations","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"6c450f523c7b29c7c5dff8e2d1943a4b102ece09"},"cell_type":"markdown","source":"**Read the training and test samples:**"},{"metadata":{"trusted":true,"_uuid":"18f5f15fc10b5be4d565ee2eb4d1b0a9c7deaca2"},"cell_type":"code","source":"# train\ntitanic_train <- read_csv(\n    '../input/train.csv',\n    col_types = cols(\n        PassengerId = col_character(),\n        Survived = col_character(),\n        Pclass = col_character(),\n        Name = col_character(),\n        Sex = col_character(),\n        Age = col_double(),\n        SibSp = col_integer(),\n        Parch = col_integer(),\n        Ticket = col_character(),\n        Fare = col_double(),\n        Cabin = col_character(),\n        Embarked = col_character()\n    )\n) %>%\nmutate(label = 'train') %>%\nselect(-PassengerId)\n\n# test\ntitanic_test <- read_csv(\n    '../input/test.csv',\n    col_types = cols(\n        PassengerId = col_character(),\n        Pclass = col_character(),\n        Name = col_character(),\n        Sex = col_character(),\n        Age = col_double(),\n        SibSp = col_integer(),\n        Parch = col_integer(),\n        Ticket = col_character(),\n        Fare = col_double(),\n        Cabin = col_character(),\n        Embarked = col_character()\n    )\n) %>%\nmutate(\n    label = 'test',\n    Survived = '0'\n) %>%\nselect(-PassengerId)\n\n# merge\ntitanic <- rbind(titanic_train, titanic_test)\n\n# head\nhead(titanic, 10)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"85e6456a068307e8969c8396dc0d59fbaaf9243c"},"cell_type":"markdown","source":"**Summary of the data:**"},{"metadata":{"trusted":true,"_uuid":"c678ce065350eff2955cc5aeb6a9cc8f581c94a3"},"cell_type":"code","source":"summarizeColumns(titanic)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"ed68b644419173c8f1e078a3ecf17d4c0f3917ed"},"cell_type":"markdown","source":"**Retrieve the title and nickname from the name column:**"},{"metadata":{"trusted":true,"_uuid":"c97df6e948c665482fefcc45ab3179a39d1a42b3"},"cell_type":"code","source":"titanic <- titanic %>%\nmutate(\n    Title = str_extract(Name, '\\\\w+(?=\\\\.)'),\n    Nickname = str_extract(Name, '\\\\(.+\\\\)'),\n    HasNickname = if_else(is.na(Nickname), '0', '1')\n) %>%\nselect(-one_of('Nickname', 'Name'))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"270ac202fb443b73c957de030bd0c2bfb9138ab9"},"cell_type":"markdown","source":"**Check the title distribution:**"},{"metadata":{"trusted":true,"_uuid":"0e07ba60b97bf2014d491359385aca18b0966c12"},"cell_type":"code","source":"table(titanic$Title) %>% data.frame %>% setNames(c('Title', 'Frequency'))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"3d93fa3f1615c0aaf0e0a90f69a0d2a002bc78a2"},"cell_type":"markdown","source":"**Merge some titles:**"},{"metadata":{"trusted":true,"_uuid":"6872176a453d4b091d88060ece39eebe7951ba95"},"cell_type":"code","source":"titanic <- titanic %>%\nmutate(\n    Title = case_when(\n        Title %in% c('Capt', 'Col', 'Major') ~ 'Officer',\n        Title %in% c('Countess', 'Don', 'Dona', 'Jonkheer', 'Lady', 'Ms', 'Sir') ~ 'Honorific',\n        Title == 'Mlle' ~ 'Miss',\n        Title == 'Mme' ~ 'Mrs',\n        TRUE ~ as.character(Title)\n    )\n)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"e784fccac5565f567f5b73f583d09525e31fea09"},"cell_type":"markdown","source":"**Histogram of the Age:**"},{"metadata":{"trusted":true,"_uuid":"6e9d8c4f156ea1f6cc5602e8216ed7fe3ce8eb7b"},"cell_type":"code","source":"ggplot(titanic, aes(x = Age)) +\ngeom_histogram(bins = 20) +\ntheme_light() +\nggtitle('Age distribution')","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"dda80eeb09775c3a29cc6f34d0f4a0118b06086b"},"cell_type":"markdown","source":"**Check min and max ages on each Title group:**"},{"metadata":{"trusted":true,"_uuid":"184b9c3282c268098772db2ca0ad359a42fc0829"},"cell_type":"code","source":"titanic %>%\ngroup_by(Title) %>%\nsummarize(\n    min_age = min(Age, na.rm = T),\n    max_age = max(Age, na.rm = T),\n    missing_count = sum(is.na(Age)) / n()\n)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"701ba6cb836b650d00369c05b6507dce2dbfc73b"},"cell_type":"markdown","source":"**Count family size:**"},{"metadata":{"trusted":true,"_uuid":"b5d1b32b02b15e3ab7a047e3ce88bce4ea82883d"},"cell_type":"code","source":"titanic <- titanic %>%\nmutate(\n    Family = SibSp + Parch\n)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"bebf463aa6b848af58db4294c0242711386ebc2e"},"cell_type":"markdown","source":"**Add information about number of passengers on the Ticket:**"},{"metadata":{"trusted":true,"_uuid":"61fd00f2db25fd42a59c012ff32e23228bed183b"},"cell_type":"code","source":"titanic <- titanic %>%\ngroup_by(Ticket) %>%\nmutate(TicketSize = n()) %>%\nungroup","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d35a6550088cf9297c336f8c2158c68c2a39c033"},"cell_type":"markdown","source":"**Split the Ticket names and try to aggregate them:**"},{"metadata":{"trusted":true,"_uuid":"7df475a28ba861200649feab08e23fa5b086dffd"},"cell_type":"code","source":"titanic <- titanic %>%\nmutate(\n    TicketGroup = word(Ticket) %>% str_replace_all(\"[[:punct:]]\", \"\"),\n    TicketGroup = if_else(is.na(as.numeric(TicketGroup)), TicketGroup, 'NONE')\n) %>%\nselect(-Ticket)\n\n# check TicketGroup distribution\ntable(titanic$TicketGroup) %>% data.frame %>% setNames(c('TicketGroup', 'Frequency'))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"557ff07d90c48194704d09c17ee468d2a47a560c"},"cell_type":"markdown","source":"**Aggregate some of the TicketGroups:**"},{"metadata":{"trusted":true,"_uuid":"d834d16e26844f07ff7c0308cd1c808ad128692b"},"cell_type":"code","source":"titanic <- titanic %>%\ngroup_by(TicketGroup) %>%\nmutate(\n    group_size = n()\n) %>%\nungroup %>%\nmutate(\n    TicketGroup = if_else(\n        group_size < 7L,\n        'OTHER',\n        TicketGroup\n    )\n) %>%\nselect(-group_size)\n\n# distribution of TicketGroup\ntable(titanic$TicketGroup) %>% data.frame %>% setNames(c('TicketGroup', 'Frequency'))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"ee5c89c1b941800b1efb0f9fa396089566e02783"},"cell_type":"markdown","source":"**Distribution of the Fare:**"},{"metadata":{"trusted":true,"_uuid":"dda3cad18fd30c43d3786eca43b0bc9423e2b666"},"cell_type":"code","source":"ggplot(titanic, aes(x = Fare)) +\ngeom_histogram(bins = 15) +\ntheme_light() +\nggtitle('Fare distribution')","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"cd0ac1e496675d463d514382268d2f37a39fea0a"},"cell_type":"markdown","source":"**Distribution of the log of the Fare:**"},{"metadata":{"trusted":true,"_uuid":"3fb9da6d21d14fc3719d8c3a9bc54ee96170901d"},"cell_type":"code","source":"ggplot(titanic, aes(x = log(Fare + 1))) +\ngeom_histogram(bins = 15) +\ntheme_light() +\nggtitle('Log(Fare + 1) distribution')","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"8262bc54f7ccd4d8edfe595158e462d7fd3b949e"},"cell_type":"markdown","source":"**Modify Fare - calculate log:**"},{"metadata":{"trusted":true,"_uuid":"6dc3de6a905f9d49b081cc0e31dc1f1ae6d65ed6"},"cell_type":"code","source":"titanic$Fare <- log(titanic$Fare + 1)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"297d8244eb13ee7307d1ba4fbc44e99f7ed34f2a"},"cell_type":"markdown","source":"**Retrieve cabin class:**"},{"metadata":{"trusted":true,"_uuid":"b3557c11493fd25ce3132d7e7126a1262caa877c"},"cell_type":"code","source":"titanic <- titanic %>%\nmutate(\n    CabinGroup =\n        str_split(Cabin, '\\\\s') %>% # split Cabins by any white space character\n        lapply(substr, start = 1, stop = 1) %>% # get first character of each Cabin\n        # get the mode of all cabins\n        lapply(function(vec) {\n            uniq_vec <- unique(vec) # unique values\n            uniq_vec[which.max(tabulate(match(vec, uniq_vec)))] # mode\n        }) %>%\n        as.character\n) %>%\nselect(-Cabin)\n\n# check CabinGroup distribution\ntable(titanic$CabinGroup) %>% data.frame %>% setNames(c('CabinGroup', 'Frequency'))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"1040a392d384c043cb1a11eab681b97efc4bc64a"},"cell_type":"markdown","source":"**Assign T and G CabinGroup to the C group:**"},{"metadata":{"trusted":true,"_uuid":"6c0d9ef12cccf764d05df8f3c7dc44e40fdc44aa"},"cell_type":"code","source":"titanic <- titanic %>%\nmutate(\n    CabinGroup = if_else(\n        CabinGroup %in% c('G', 'T'),\n        NA_character_,\n        CabinGroup\n    )\n)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d10efce7805e2d1d20a0bc365b79b22fda10ef57"},"cell_type":"markdown","source":"**Embarked distribution:**"},{"metadata":{"trusted":true,"_uuid":"8327a39ed9795d409caef0e4662fa665b3d1f83a"},"cell_type":"code","source":"table(titanic$Embarked) %>% data.frame %>% setNames(c('Embarked', 'Frequency'))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"27f64f736eafe62e22edcebc4527eb93abc63150"},"cell_type":"markdown","source":"**Final table:**"},{"metadata":{"trusted":true,"_uuid":"78fbe86fde32ecbea330f66d6ba5591d4f1a58c9"},"cell_type":"code","source":"head(titanic, 20)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"2b10e86349cc59ead7e9fc632910a5cbb9f64158"},"cell_type":"markdown","source":"**Character as factor:**"},{"metadata":{"trusted":true,"_uuid":"a4086c3dc6afbd754923dad933cd704dfe51ef14"},"cell_type":"code","source":"titanic <- titanic %>%\nmutate_if(sapply(titanic, is.character), factor)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"96c87f9f6fcd7b1762a5beb0bc31be4ca508782f"},"cell_type":"markdown","source":"**Summary:**"},{"metadata":{"trusted":true,"_uuid":"bae950a36ce1d34c6c0bffc73632ed9bf3a84cee"},"cell_type":"code","source":"summarizeColumns(titanic)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d52cc6dff9e9160b447a0c3ce822f4434c37039a"},"cell_type":"markdown","source":"**Get the train data:**"},{"metadata":{"trusted":true,"_uuid":"b07e28877e95b0c91ab7900a88ac4039519b28af"},"cell_type":"code","source":"train_data <- titanic %>%\n# filter(label.train == 1) %>%\n# select(-one_of(c('label.train', 'label.test'))) %>%\nfilter(label == 'train') %>%\nselect(-label)\n\nhead(train_data, 20)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"5edc72b0239ca545011d86d8398365ee05a1d782"},"cell_type":"markdown","source":"**Create the train task:**"},{"metadata":{"trusted":true,"_uuid":"000c21bbace6e5f59ccb8843cd2e2ea48ce91375"},"cell_type":"code","source":"train_data <- train_data %>%\nreplace_na(\n    replace = list(\n        Age = mean(train_data$Age, na.rm = TRUE),\n        Fare = mean(train_data$Fare, na.rm = TRUE),\n        Embarked = 'S',\n        CabinGroup = 'C'\n    )\n)\n\ntrain_task <- makeClassifTask(\n    data = train_data,\n    target = 'Survived',\n    positive = '1'\n)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"62e7efb59f4ec998166f27297606880a691485ee"},"cell_type":"markdown","source":"**Learners:**"},{"metadata":{"trusted":true,"_uuid":"84b0c99b0b9f982bdb2de27838fcf227b58495d1"},"cell_type":"code","source":"svm_learner <- makeLearner(\n    'classif.ksvm',\n    predict.type = 'prob',\n    par.vals = list(\n        scaled = TRUE,\n        type = 'nu-svc'\n    )\n)\n\nc50_learner <- makeLearner(\n    'classif.C50',\n    predict.type = 'prob',\n    par.vals = list(\n        winnow = TRUE\n    )\n)\n\nlogreg_learner <- makeLearner(\n    'classif.glmnet',\n    predict.type = 'prob',\n    par.vals = list(\n        standardize = TRUE\n    )\n)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"afc7dcbfc1bb0c36aacf1992c697ef7a5132e665"},"cell_type":"code","source":"# getLearnerParamSet('classif.ksvm')\n# getLearnerParamSet('classif.C50')\n# getLearnerParamSet('classif.glmnet')","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"97c0ca7ccaa24e0f76e25f178d3216277534a19a"},"cell_type":"markdown","source":"**Resample method:**"},{"metadata":{"trusted":true,"_uuid":"0a7ff698e8ec0e5c9a0cec08006f0de15ccb03f3"},"cell_type":"code","source":"# svm_resample <- makeResampleDesc('Bootstrap', iters = 20)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"aa48bbb01cae5d11515be301b0434ad0b7e9401c"},"cell_type":"markdown","source":"**Search strategy:**"},{"metadata":{"trusted":true,"_uuid":"e5145f62a731df57d8be06978289f0cdd7ffee73"},"cell_type":"code","source":"# svm_control <- makeTuneControlIrace(show.irace.output = TRUE, maxExperiments = 500)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"adcf1d51657b25dd7e720351a85d644e91161734"},"cell_type":"markdown","source":"**Set of hyperparameters:**"},{"metadata":{"trusted":true,"_uuid":"0c72bed5570f0672d8146d429c5cf551f6464050"},"cell_type":"code","source":"# svm_paramset <- makeParamSet(\n#   makeDiscreteParam('kernel', values = c('rbfdot', 'laplacedot')),\n#   makeNumericParam('sigma', lower = 0, upper = 5),\n#   makeNumericParam('nu', lower = 0.05, upper = 0.6)\n# )\n\n# svm_paramset <- makeParamSet(\n#     makeIntegerParam('trials', lower = 1, upper = 100),\n#     makeNumericParam('CF', lower = 0.8, upper = 0.99),\n#     makeIntegerParam('minCases', lower = 3, upper = 100)\n# )\n\n# svm_paramset <- makeParamSet(\n#     makeNumericParam('alpha', lower = 0, upper = 1),\n#     makeNumericParam('s', lower = 0, upper = 0.03)\n# )","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"78d881cbd26eb0b3a1fef81a97f268b0f1fc1a0e"},"cell_type":"markdown","source":"**Start parallelization:**"},{"metadata":{"trusted":true,"_uuid":"ee8ba4442e86b82b7c92261e5688b851b97e4db0"},"cell_type":"code","source":"# parallelStart(mode = 'socket', cpus = 4)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"47b19bd434281fc7d3efbce02e6ae79cc1846614"},"cell_type":"markdown","source":"**Tuning:**"},{"metadata":{"trusted":true,"_uuid":"39ce51735813169e6a102da8877662ff24778df9","scrolled":true},"cell_type":"code","source":"# svm_tune <- tuneParams(\n#   learner = logreg_learner,\n#   task = train_task,\n#   resampling = svm_resample,\n#   measures = acc,\n#   par.set = svm_paramset,\n#   control = svm_control\n# )","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"24154bc3217a044bb413f2dee1d63d103d55f6a0"},"cell_type":"markdown","source":"**Set hyperparameters:**"},{"metadata":{"trusted":true,"_uuid":"e83733469d99fb76470dd60658d80ed0884d7277"},"cell_type":"code","source":"titanic_learner <- svm_learner <- setHyperPars(\n    svm_learner,\n    par.vals = list(\n        kernel = 'laplacedot',\n        sigma = 0.0214442,\n        nu = 0.4805411\n    )\n)\n\n# c50_learner <- setHyperPars(\n#     c50_learner,\n#     par.vals = list(\n#         trials = 41,\n#         CF = 0.9257832,\n#         minCases = 6\n#     )\n# )\n\n# logreg_learner <- setHyperPars(\n#     logreg_learner,\n#     par.vals = list(\n#         alpha = 0.3632723,\n#         s = 0.02710750\n#     )\n# )\n\n# wrapper\n# titanic_learner <- makeStackedLearner(\n#     base.learners = list(\n#         svm_learner,\n#         c50_learner,\n#         logreg_learner\n#     ),\n# #     super.learner = makeLearner('classif.glmnet', predict.type = 'response'),\n#     predict.type = 'prob',\n#     method = 'hill.climb',\n# #     resampling = makeResampleDesc('CV', iters = 20)\n# )","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"9421e99d8ca87422a3efc07708d292e504e723e1"},"cell_type":"markdown","source":"**Train the data:**"},{"metadata":{"trusted":true,"_uuid":"028d043f60aabaa0aba71e1a21ee24b36b9def1f"},"cell_type":"code","source":"titanic_model <- train(titanic_learner, train_task)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"2386996746f0f2987418b741668d9cf07edd4ecc"},"cell_type":"markdown","source":"**Check the performance of the model:**"},{"metadata":{"trusted":true,"_uuid":"91e2233635b8bce301edcf1ccd32a9da682324df"},"cell_type":"code","source":"titanic_performance <- resample(\n  learner = titanic_learner,\n  task = train_task,\n  resampling = makeResampleDesc('CV', iters = 20),\n  measures = list(acc, tpr, fpr, kappa)\n)\n\ntitanic_performance$aggr %>% data.frame %>% setNames('Measure')","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"0d99de32cfcdf3d65f22be0d452476d53e12c748"},"cell_type":"markdown","source":"**Get the test data:**"},{"metadata":{"trusted":true,"_uuid":"68e92b0594c759a6d68f4ae1978d6e05a499f951"},"cell_type":"code","source":"test_data <- titanic %>%\n# filter(label.test == 1) %>%\n# select(-one_of(c('label.train', 'label.test'))) %>%\nfilter(label == 'test') %>%\nselect(-label)\n\ntest_data$Survived <- factor(sample(0:1, nrow(test_data), replace = TRUE))\n\nhead(test_data, 20)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"366414928745c5d6f0c193fa0c9de271b1a63f29"},"cell_type":"markdown","source":"**Create the test task:**"},{"metadata":{"trusted":true,"_uuid":"99a3c701adceb09315b78864c411db0ee813faf2"},"cell_type":"code","source":"test_data <- test_data %>%\nreplace_na(\n    replace = list(\n        Age = mean(train_data$Age),\n        Fare = mean(train_data$Fare),\n        Embarked = 'S',\n        CabinGroup = 'C'\n    )\n)\n\ntest_task <- makeClassifTask(\n    data = test_data,\n    target = 'Survived',\n    positive = '1'\n)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8ab11e8094027d1e511f41e8e4af6a1e3125722f"},"cell_type":"markdown","source":"**Predict the target value for the test data:**"},{"metadata":{"trusted":true,"_uuid":"2b8ac7ae5f6845e023d8f68ffe0e6eaa4f6f3a6c"},"cell_type":"code","source":"test_predict <- predict(titanic_model, test_task)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"b8ff46f1f50da43ca4eec6aeb080732dd6bffc0a"},"cell_type":"markdown","source":"**Save the output prediction:**"},{"metadata":{"trusted":true,"scrolled":true,"_uuid":"2c89a21c18ed78dd9fc3acee357d30f6d3190a98"},"cell_type":"code","source":"prediction <- read_csv(\n    '../input/gender_submission.csv',\n    col_types = cols(\n        PassengerId = col_character(),\n        Survived = col_character()\n    )\n)\n\nprediction$Survived <- test_predict$data$response\nwrite_csv(prediction, 'titanic_svm_prediction.csv')","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}