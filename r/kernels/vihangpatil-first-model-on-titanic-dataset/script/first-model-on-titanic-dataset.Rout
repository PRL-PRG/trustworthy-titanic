
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## ---- include=FALSE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Multiple plot function 
> # from http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/
> # 
> # ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
> # - cols:   Number of columns in layout
> # - layout: A matrix specifing the layout. If present, 'cols' is ignored.
> #
> # If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
> # then plot 1 will go in the upper left, 2 will go in the upper right, and
> # 3 will go all the way across the bottom.
> #
> multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
+   library(grid)
+ 
+   # Make a list from the ... arguments and plotlist
+   plots <- c(list(...), plotlist)
+ 
+   numPlots = length(plots)
+ 
+   # If layout is NULL, then use 'cols' to determine layout
+   if (is.null(layout)) {
+     # Make the panel
+     # ncol: Number of columns of plots
+     # nrow: Number of rows needed, calculated from # of cols
+     layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
+                     ncol = cols, nrow = ceiling(numPlots/cols))
+   }
+ 
+  if (numPlots==1) {
+     print(plots[[1]])
+ 
+   } else {
+     # Set up the page
+     grid.newpage()
+     pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
+ 
+     # Make each plot, in the correct location
+     for (i in 1:numPlots) {
+       # Get the i,j matrix positions of the regions that contain this subplot
+       matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
+ 
+       print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
+                                       layout.pos.col = matchidx$col))
+     }
+   }
+ }
> 
> 
> ## ---- message = FALSE, warning = FALSE-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(data.table)
> library(ggplot2)
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library(plyr)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:plyr’:

    arrange, count, desc, failwith, id, mutate, rename, summarise,
    summarize

The following objects are masked from ‘package:data.table’:

    between, first, last

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> library(caret)
Loading required package: lattice
> library(caretEnsemble)

Attaching package: ‘caretEnsemble’

The following object is masked from ‘package:ggplot2’:

    autoplot

> 
> 
> ## ---- message = FALSE, warning=FALSE---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> test             <- read.csv("../input/test.csv",  stringsAsFactors = F, header = T, na.strings = c('NA',''))
> train_valid_data <- read.csv("../input/train.csv", stringsAsFactors = F, header = T, na.strings = c('NA',''))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> str(train_valid_data)
'data.frame':	891 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : chr  "male" "female" "female" "female" ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  NA "C85" NA "C123" ...
 $ Embarked   : chr  "S" "C" "S" "S" ...
> 
> 
> ## ---- message = FALSE------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train_valid_data$PassengerId <- as.character(train_valid_data$PassengerId)
> 
> 
> ## ---- message = FALSE------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train_valid_data$Survived <- as.factor(ifelse(train_valid_data$Survived == 1, 'Survived', 'Perished'))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> round(prop.table(table(train_valid_data$Survived)),2)

Perished Survived 
    0.62     0.38 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> head(train_valid_data$Ticket, 15)
 [1] "A/5 21171"        "PC 17599"         "STON/O2. 3101282" "113803"          
 [5] "373450"           "330877"           "17463"            "349909"          
 [9] "347742"           "237736"           "PP 9549"          "113783"          
[13] "A/5. 2151"        "347082"           "350406"          
> train_valid_data$Ticket <- NULL
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train_valid_data$Pclass <- as.factor(train_valid_data$Pclass)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> round(prop.table(table(train_valid_data$Survived, train_valid_data$Pclass), margin = 2),2)
          
              1    2    3
  Perished 0.37 0.53 0.76
  Survived 0.63 0.47 0.24
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train_valid_data$Cabin <- substr(train_valid_data$Cabin,0,1)
> train_valid_data$Cabin <- ifelse(is.na(train_valid_data$Cabin), 'X', train_valid_data$Cabin)
> train_valid_data$Cabin <- ifelse(train_valid_data$Cabin %in% c('A', 'B', 'C', 'D', 'E'), train_valid_data$Cabin, 'X')
> train_valid_data$Cabin <- as.factor(train_valid_data$Cabin)
> 
> table(train_valid_data$Cabin, train_valid_data$Pclass)
   
      1   2   3
  A  15   0   0
  B  47   0   0
  C  59   0   0
  D  29   4   0
  E  25   4   3
  X  41 176 488
> 
> table(train_valid_data[train_valid_data$Pclass=='1',]$Cabin, train_valid_data[train_valid_data$Pclass=='1',]$Survived)
   
    Perished Survived
  A        8        7
  B       12       35
  C       24       35
  D        7       22
  E        7       18
  X       22       19
> 
> 
> ## ---- message=FALSE, warning=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(train_valid_data, aes(x = Fare, fill = Pclass)) +
+   geom_density(alpha = 0.5) +
+   lims(x = c(0, 100))
Warning message:
Removed 53 rows containing non-finite values (stat_density). 
> 
> 
> ## ---- message=FALSE, warning=FALSE, fig.height=10--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> p1 = ggplot(train_valid_data, aes(x = Fare, fill = Survived)) + 
+       geom_density(alpha = 0.5) +
+       geom_vline(xintercept = c(15, 25, 50), size = 1.2, col = 'blue') +
+       ggtitle("Distribution of survivors respect to the fare") +
+       lims(x = c(0, 100))
> 
> p2 = ggplot(train_valid_data, aes(x = Fare, fill = Survived)) + 
+       geom_density(alpha = 0.5, position = 'fill') +
+       geom_vline(xintercept = c(15, 25, 50), size = 1.2, col = 'blue') +
+       ggtitle("Proportion of survivors respect to the age") +
+       lims(x = c(0, 100))
> 
> multiplot(p1, p2, cols=1)
Warning messages:
1: Removed 53 rows containing non-finite values (stat_density). 
2: Removed 53 rows containing non-finite values (stat_density). 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> if(anyNA(train_valid_data$Fare)) train_valid_data[is.na(train_valid_data$Fare),]$Fare <- mean(train_valid_data$Fare, na.rm = T)
> 
> train_valid_data$Fare_type <- as.factor(ifelse(train_valid_data$Fare <= 15, "Low", 
+                                         ifelse(train_valid_data$Fare >  15 & train_valid_data$Fare <= 25, "Medium", 
+                                         ifelse(train_valid_data$Fare >  25 & train_valid_data$Fare <= 50, "High", "Very_High"))))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> round(prop.table(table(train_valid_data$Survived, train_valid_data$Fare_type), margin = 2),2)
          
           High  Low Medium Very_High
  Perished 0.58 0.75   0.54      0.32
  Survived 0.42 0.25   0.46      0.68
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train_valid_data$Sex <- as.factor(train_valid_data$Sex)
> round(prop.table(table(train_valid_data$Survived, train_valid_data$Sex), margin = 2),2)
          
           female male
  Perished   0.26 0.81
  Survived   0.74 0.19
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> head(train_valid_data$Name, 15)
 [1] "Braund, Mr. Owen Harris"                            
 [2] "Cumings, Mrs. John Bradley (Florence Briggs Thayer)"
 [3] "Heikkinen, Miss. Laina"                             
 [4] "Futrelle, Mrs. Jacques Heath (Lily May Peel)"       
 [5] "Allen, Mr. William Henry"                           
 [6] "Moran, Mr. James"                                   
 [7] "McCarthy, Mr. Timothy J"                            
 [8] "Palsson, Master. Gosta Leonard"                     
 [9] "Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)"  
[10] "Nasser, Mrs. Nicholas (Adele Achem)"                
[11] "Sandstrom, Miss. Marguerite Rut"                    
[12] "Bonnell, Miss. Elizabeth"                           
[13] "Saundercock, Mr. William Henry"                     
[14] "Andersson, Mr. Anders Johan"                        
[15] "Vestrom, Miss. Hulda Amanda Adolfina"               
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train_valid_data$Name_title <- as.factor(ifelse(grepl(pattern = " miss.", x = train_valid_data$Name, ignore.case = T), "miss",
+                                 ifelse(grepl(pattern = " mrs.", x = train_valid_data$Name, ignore.case = T), "mrs", 
+                                 ifelse(grepl(pattern = " mr.", x = train_valid_data$Name, ignore.case = T), "mr", 
+                                 ifelse(grepl(pattern = " master.", x = train_valid_data$Name, ignore.case = T), "master", 
+                                 ifelse((as.character.factor(train_valid_data$Sex)=='male') & (train_valid_data$Age>=13), "mr", 
+                                 ifelse((as.character.factor(train_valid_data$Sex)=='male') & (train_valid_data$Age<13), "master", "mrs")))))))
> 
> train_valid_data$Name_title[is.na(train_valid_data$Name_title)] <- ifelse((is.na(train_valid_data$Name_title)) & (as.character.factor(train_valid_data$Sex) == 'male'), 'mr', 'mrs')
Warning message:
In x[...] <- m :
  number of items to replace is not a multiple of replacement length
> 
> train_valid_data$Name <- NULL
> 
> round(prop.table(table(train_valid_data$Name_title)),2)

master   miss     mr    mrs 
  0.04   0.20   0.60   0.15 
> 
> 
> ## ---- warning=FALSE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train_valid_data$family_size <- train_valid_data$Parch + train_valid_data$SibSp + 1
> 
> train_valid_data$family_size_group <- as.factor(ifelse(train_valid_data$family_size == 1, "1",
+                                           ifelse(train_valid_data$family_size >= 2 & train_valid_data$family_size < 4, "2_3",
+                                           ifelse(train_valid_data$family_size >= 4, "4+", NA))))
> 
> train_valid_data$Parch_group <-  as.factor(ifelse(train_valid_data$Parch == 0, "0",
+                                           ifelse(train_valid_data$Parch == 1, "1",
+                                           ifelse(train_valid_data$Parch >= 2, "2+", NA))))
> 
> train_valid_data$SibSp_group <-  as.factor(ifelse(train_valid_data$SibSp == 0, "0",
+                                           ifelse(train_valid_data$SibSp == 1, "1",
+                                           ifelse(train_valid_data$SibSp >= 2, "2+", NA))))
> 
> 
> ## ---- warning=FALSE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> summary(train_valid_data$Age)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
   0.42   20.12   28.00   29.70   38.00   80.00     177 
> 
> 
> ## ---- warning=FALSE, fig.height=10-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> p1 <- ggplot(train_valid_data, aes(x = Age, fill = Survived)) + 
+         geom_density(alpha = 0.5) +
+         geom_vline(xintercept = c(13, 30, 50), size = 1.2, col = 'blue') +
+         ggtitle("Distribution of survivors respect to the age") +
+         lims(x = c(0, 80)) 
> 
> p2 <- ggplot(train_valid_data, aes(x = Age, fill = Survived)) + 
+         geom_density(alpha = 0.5, position = "fill") +
+         geom_vline(xintercept = c(13, 30, 50), size = 1.2, col = 'blue') +
+         ggtitle("Proportion of survivors respect to the age") +
+         lims(x = c(0, 80))
> 
> multiplot(p1, p2, cols=1)
Warning messages:
1: Removed 177 rows containing non-finite values (stat_density). 
2: Removed 177 rows containing non-finite values (stat_density). 
> 
> 
> ## ----age_model, warning=FALSE, message=FALSE-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> Age_model <- train(Age ~ Sex + Pclass + SibSp + Parch + Fare + Name_title,
+                  data = train_valid_data[complete.cases(train_valid_data),], 
+                  method = "rf")
> 
> train_valid_data[is.na(train_valid_data$Age),]$Age <- predict(object = Age_model, 
+                                                               newdata = train_valid_data[is.na(train_valid_data$Age),])
> 
> 
> ## ---- warning=FALSE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train_valid_data$Age_group <- as.factor(ifelse(train_valid_data$Age > 0  & train_valid_data$Age <= 13,  "g0_13", 
+                                         ifelse(train_valid_data$Age > 13 & train_valid_data$Age <= 30,  "g13_30", 
+                                         ifelse(train_valid_data$Age > 30 & train_valid_data$Age <= 50,  "g30_50", 
+                                         ifelse(train_valid_data$Age > 50, "g50_inf", NA)))))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> round(prop.table(table(train_valid_data$Survived, train_valid_data$Age_group), margin = 2),2)
          
           g0_13 g13_30 g30_50 g50_inf
  Perished  0.44   0.67   0.58    0.66
  Survived  0.56   0.33   0.42    0.34
> 
> 
> ## ---- warning=FALSE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> round(prop.table(table(train_valid_data$Embarked)), 2)

   C    Q    S 
0.19 0.09 0.72 
> if(anyNA(train_valid_data$Embarked)) train_valid_data[is.na(train_valid_data$Embarked),]$Embarked <- "S" 
> train_valid_data$Embarked <- as.factor(train_valid_data$Embarked)
> 
> 
> ## ---- warning=FALSE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train_valid_data$Fare_family_div <- train_valid_data$Fare / train_valid_data$family_size
> train_valid_data$Age_Fare_mult <- train_valid_data$Age * train_valid_data$Fare
> train_valid_data$SibSp_Parch_mult <- train_valid_data$SibSp * train_valid_data$Parch
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train_valid_data$Survived <- as.factor(ifelse(as.character.factor(train_valid_data$Survived) == 'Survived', '1', '0'))
> str(train_valid_data)
'data.frame':	891 obs. of  20 variables:
 $ PassengerId      : chr  "1" "2" "3" "4" ...
 $ Survived         : Factor w/ 2 levels "0","1": 1 2 2 2 1 1 1 1 2 2 ...
 $ Pclass           : Factor w/ 3 levels "1","2","3": 3 1 3 1 3 3 1 3 3 2 ...
 $ Sex              : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age              : num  22 38 26 35 35 ...
 $ SibSp            : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch            : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Fare             : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin            : Factor w/ 6 levels "A","B","C","D",..: 6 3 6 3 6 6 5 6 6 6 ...
 $ Embarked         : Factor w/ 3 levels "C","Q","S": 3 1 3 3 3 2 3 3 3 1 ...
 $ Fare_type        : Factor w/ 4 levels "High","Low","Medium",..: 2 4 2 4 2 2 4 3 2 1 ...
 $ Name_title       : Factor w/ 4 levels "master","miss",..: 3 4 2 4 3 3 3 1 4 4 ...
 $ family_size      : num  2 2 1 2 1 1 1 5 3 2 ...
 $ family_size_group: Factor w/ 3 levels "1","2_3","4+": 2 2 1 2 1 1 1 3 2 2 ...
 $ Parch_group      : Factor w/ 3 levels "0","1","2+": 1 1 1 1 1 1 1 2 3 1 ...
 $ SibSp_group      : Factor w/ 3 levels "0","1","2+": 2 2 1 2 1 1 1 3 1 2 ...
 $ Age_group        : Factor w/ 4 levels "g0_13","g13_30",..: 2 3 2 3 3 2 4 1 2 2 ...
 $ Fare_family_div  : num  3.62 35.64 7.92 26.55 8.05 ...
 $ Age_Fare_mult    : num  160 2709 206 1858 282 ...
 $ SibSp_Parch_mult : int  0 0 0 0 0 0 0 3 0 0 ...
> 
> 
> ## ---- warning = FALSE, message=FALSE, results="hide", echo=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> test$PassengerId <- as.character(test$PassengerId)
> 
> test$Pclass      <- as.factor(test$Pclass)
> 
> test$Cabin <- substr(test$Cabin,0,1)
> test$Cabin <- ifelse(is.na(test$Cabin), 'X', test$Cabin)
> test$Cabin <- ifelse(test$Cabin %in% c('A', 'B', 'C', 'D', 'E'), test$Cabin, 'X')
> test$Cabin <- as.factor(test$Cabin)
> 
> test$Sex         <- as.factor(test$Sex)
> 
> if(anyNA(test$Fare)) test[is.na(test$Fare),]$Fare <- mean(train_valid_data$Fare, na.rm = T)
> 
> test$Fare_type   <- as.factor(ifelse(test$Fare <= 15, "Low", 
+                               ifelse(test$Fare >  15 & test$Fare <= 25, "Medium", 
+                               ifelse(test$Fare >  25 & test$Fare <= 50, "High", 
+                               "Very_High"))))
> 
> test$Name_title <- as.factor(ifelse(grepl(pattern = " miss.", x = test$Name, ignore.case = T), "miss",
+                                 ifelse(grepl(pattern = " mrs.", x = test$Name, ignore.case = T), "mrs", 
+                                 ifelse(grepl(pattern = " mr.", x = test$Name, ignore.case = T), "mr", 
+                                 ifelse(grepl(pattern = " master.", x = test$Name, ignore.case = T), "master", 
+                                 ifelse((as.character.factor(test$Sex)=='male') & (test$Age>=13), "mr", 
+                                 ifelse((as.character.factor(test$Sex)=='male') & (test$Age<13), "master", "mrs")))))))
> 
> test$Name_title[is.na(test$Name_title)] <- ifelse((is.na(test$Name_title)) & (as.character.factor(test$Sex) == 'male'), 'mr', 'mrs')
> 
> test$family_size <- test$Parch + test$SibSp + 1
> 
> test$family_size_group <- as.factor(ifelse(test$family_size == 1, "1", 
+                               ifelse(test$family_size >= 2 & test$family_size < 4, "2_3", 
+                               ifelse(test$family_size >= 4, "4+", NA))))
> 
> test$Parch_group <-  as.factor(ifelse(test$Parch == 0, "0",
+                                ifelse(test$Parch == 1, "1",
+                                ifelse(test$Parch >= 2, "2+", NA))))
> 
> test$SibSp_group <-  as.factor(ifelse(test$SibSp == 0, "0",
+                                ifelse(test$SibSp == 1, "1",
+                                ifelse(test$SibSp >= 2, "2+", NA))))
>                                           
> if(anyNA(test$Embarked)) test[is.na(test$Embarked),]$Embarked <- "S" 
> 
> test$Embarked <- as.factor(test$Embarked)
>                           
> test[is.na(test$Age),]$Age <- predict(object = Age_model, newdata = test[is.na(test$Age),])
> 
> test$Age_group <- as.factor(ifelse(test$Age > 0  & test$Age <= 13,  "g0_13", 
+                             ifelse(test$Age > 13 & test$Age <= 30,  "g13_30", 
+                             ifelse(test$Age > 30 & test$Age <= 50,  "g30_50", 
+                             ifelse(test$Age > 50, "g50_inf", NA)))))
>                             
> test$Fare_family_div <- test$Fare / test$family_size
> test$Age_Fare_mult <- test$Age * test$Fare
> test$SibSp_Parch_mult <- test$SibSp * test$Parch
> 
> 
> 
> ## ---- message = FALSE, warning = FALSE-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> set.seed(88)
> trainIndex  <- createDataPartition(train_valid_data$Survived, p = .6, list = FALSE, times = 1)
> training    <- train_valid_data[ trainIndex,]
> validation  <- train_valid_data[-trainIndex,]
> 
> 
> ## ---- warning=FALSE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> round(prop.table(table(training$Survived)),2)  

   0    1 
0.62 0.38 
> 
> 
> ## ---- warning=FALSE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> training_list <- list(training_original   = training,
+                       #training_upSample   = upSample(x = training[, -1], y = training$Survived, yname = "Survived"),
+                       training_downSample = downSample(x = training[, -1], y = training$Survived, yname = "Survived"))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> algorithms <- c("plr", "lda", "glm", "rpart", "C5.0", "rf")
> 
> 
> ## ----model_1, message=FALSE, warning = FALSE, results="hide"---------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> results <- list()
> 
> modelFit_final <- NULL
> best_accuracy  <- 0
> 
> for(i in seq(algorithms)){ 
+   for(j in seq(training_list)){
+     
+     dataset <- training_list[[j]]
+     
+     set.seed(88)
+     modelFit    <- train(Survived ~ Sex + Pclass + Name_title + Parch + SibSp + SibSp_Parch_mult + Age + Fare + Embarked,
+                          #Survived ~ Sex + Pclass + Cabin + Name_title + family_size + family_size_group + 
+                          #           SibSp + SibSp_group + Parch + Parch_group + Age + Age_group + 
+                          #           Fare + Fare_type + Embarked + Fare_family_div + Age_Fare_mult + SibSp_Parch_mult,
+                          data = dataset,
+                          preProcess = c("center", "scale"),
+                          trControl = trainControl(method = "repeatedcv", number = 10, repeats = 3),
+                          tuneLength = 3,
+                          method = algorithms[i])
+     
+     validation$my_prediction <- predict(object = modelFit, newdata = validation, type = "raw")
+     validation$result        <- ifelse(validation$my_prediction == validation$Survived, 1, 0)
+     accuracy                  <- round(mean(validation$result),3)
+     dataname                  <- names(training_list)[j]
+     results                   <- c(results, list(c(modelFit$modelInfo$label, algorithms[i], dataname, accuracy)))
+   
+     if(accuracy >= best_accuracy){
+       modelFit_final <- modelFit
+       best_accuracy <- accuracy
+     }
+   }
+ }
1 package is needed for this model and is not installed. (stepPlr). Would you like to try to install it now?Error: Required package is missing
Execution halted
