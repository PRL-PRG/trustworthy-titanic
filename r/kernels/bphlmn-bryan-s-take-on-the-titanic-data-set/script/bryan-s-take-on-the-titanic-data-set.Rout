
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## ----setup, include=FALSE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> knitr::opts_chunk$set(echo = TRUE)
> 
> 
> ## ----package loading-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Load packages
> 
> library(ggplot2) # data visualization
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library(dplyr) # data manipulation

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> 
> 
> ## ----load data-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Load the datasets
> df.train <- read.csv('../input/train.csv', stringsAsFactors = FALSE)
> df.test <- read.csv('../input/test.csv', stringsAsFactors = FALSE)
> 
> # Combine both datasets into one data frame
> df.full <- bind_rows(df.train, df.test)
> 
> # See what the dataset contains!
> str(df.full)
'data.frame':	1309 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : chr  "male" "female" "female" "female" ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  "" "C85" "" "C123" ...
 $ Embarked   : chr  "S" "C" "S" "S" ...
> 
> 
> ## ----survival--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # How many in the train dataset survived?
> table(df.full$Survived)

  0   1 
549 342 
> 
> # Factorize Survived
> df.full$Survived <- factor(df.full$Survived)
> 
> 
> ## ----pclass----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # What values does Pclass contain?
> table(df.full$Pclass)

  1   2   3 
323 277 709 
> 
> 
> ## ----pclass exploration----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Factorize Pclass
> df.full$Pclass <- factor(df.full$Pclass)
> 
> # Use ggplot to visualize relationship between Pclass & Survived
> ggplot(df.full[1:891,], aes(x = Pclass, fill = Survived)) +
+     geom_bar(stat='count', position='dodge', color = 'black') +
+     scale_x_discrete(breaks=c(1:3)) +
+     labs(x = 'Passenger Class') + theme_minimal()
> 
> 
> ## ----upper vs lower--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> df.full$TicketClass[df.full$Pclass %in% c(1, 2)] <- 'upper'
> df.full$TicketClass[df.full$Pclass == 3] <- 'lower'
> df.full$TicketClass <- factor(df.full$TicketClass)
> 
> table(df.full$TicketClass)

lower upper 
  709   600 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Factorize Sex
> df.full$Sex <- factor(df.full$Sex)
> 
> ggplot(df.full[1:891,], aes(x = Sex, fill = Survived)) +
+     geom_bar(stat='count', position='dodge', color = 'black') +
+     scale_x_discrete() + labs(x = 'Sex') + theme_minimal()
> 
> 
> ## ----age hist--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(df.full[1:891,], aes(x = Age, fill = Survived)) + 
+     geom_histogram(binwidth = 5, color = 'black') +
+     theme_minimal()
Warning message:
Removed 177 rows containing non-finite values (stat_bin). 
> 
> 
> ## ----age hist sex----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(df.full[1:891,], aes(x = Age, fill = Survived)) + 
+     geom_histogram(binwidth = 5, color = 'black') +
+     theme_minimal() + facet_wrap( ~ Sex, ncol = 2)
Warning message:
Removed 177 rows containing non-finite values (stat_bin). 
> 
> 
> ## ----missing age-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Number of observations missing age
> sum(is.na(df.full$Age))
[1] 263
> 
> 
> ## ----missing age children--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # How many passengers have no age recorded but are likely children?
> length(df.full$Age[is.na(df.full$Age) & df.full$SibSp > 1])
[1] 18
> 
> 
> ## ----children vs. adults---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Create a column distinguishing child or adult
> df.full$ChildAdult[is.na(df.full$Age) & df.full$SibSp > 1] <- 'child'
> 
> 
> ## ----siblings and spouses--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(df.full[1:891,], aes(x = SibSp, fill = Survived)) + 
+     geom_bar(stat='count', position='dodge', color = 'black') +
+     scale_x_continuous() + labs(x = '# of Siblings/Spouses') + theme_minimal()
> 
> 
> ## ----family size-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Create the family size feature
> df.full$FamilySize <- df.full$SibSp + df.full$Parch + 1
> 
> # Plot family size/survival histogram
> ggplot(df.full[1:891,], aes(x = FamilySize, fill = Survived)) + 
+     geom_bar(stat='count', position='dodge', color = 'black') +
+     scale_x_continuous(breaks = 1:11) + labs(x = 'Family Size') + theme_minimal()
> 
> 
> ## ----FamilySizeDiscrete----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Create the feature FamilySizeDiscrete, based on the previous plot
> df.full$FamilySizeDiscrete[df.full$FamilySize == 1] <- 'single'
> df.full$FamilySizeDiscrete[df.full$FamilySize > 1 & df.full$FamilySize < 5] <- 'small'
> df.full$FamilySizeDiscrete[df.full$FamilySize > 4] <- 'large'
> 
> # Now make this feature a factor
> df.full$FamilySizeDiscrete <- factor(df.full$FamilySizeDiscrete)
> 
> # Show this how this new variable influences surviving
> ggplot(df.full[1:891,], aes(x = FamilySizeDiscrete, fill = Survived)) + 
+     geom_bar(stat='count', position='dodge', color = 'black') +
+     scale_x_discrete() + labs(x = 'Family Size') + theme_minimal()
> 
> 
> ## ----ticket----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Preview of the Ticket feature
> head(df.full$Ticket)
[1] "A/5 21171"        "PC 17599"         "STON/O2. 3101282" "113803"          
[5] "373450"           "330877"          
> 
> 
> proc.time()
   user  system elapsed 
  1.323   0.067   1.391 
