
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## ----warning = FALSE,message = FALSE---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(caret)
Loading required package: lattice
Loading required package: ggplot2
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> library(VIM)
Loading required package: colorspace
Loading required package: grid
VIM is ready to use.

Suggestions and bug-reports can be submitted at: https://github.com/statistikat/VIM/issues

Attaching package: ‘VIM’

The following object is masked from ‘package:datasets’:

    sleep

> library(mice)

Attaching package: ‘mice’

The following objects are masked from ‘package:base’:

    cbind, rbind

Warning message:
package ‘mice’ was built under R version 3.6.2 
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:dplyr’:

    combine

The following object is masked from ‘package:ggplot2’:

    margin

> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train <- read.csv(file = "../input/train.csv")
> test <- read.csv(file = "../input/test.csv")
> sub <- read.csv(file = "../input/gender_submission.csv")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> str(train)
'data.frame':	891 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : Factor w/ 891 levels "Abbing, Mr. Anthony",..: 109 191 358 277 16 559 520 629 417 581 ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : Factor w/ 681 levels "110152","110413",..: 524 597 670 50 473 276 86 396 345 133 ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : Factor w/ 148 levels "","A10","A14",..: 1 83 1 57 1 1 131 1 1 1 ...
 $ Embarked   : Factor w/ 4 levels "","C","Q","S": 4 2 4 4 4 3 4 4 4 2 ...
> str(test)
'data.frame':	418 obs. of  11 variables:
 $ PassengerId: int  892 893 894 895 896 897 898 899 900 901 ...
 $ Pclass     : int  3 3 2 3 3 3 3 2 3 3 ...
 $ Name       : Factor w/ 418 levels "Abbott, Master. Eugene Joseph",..: 210 409 273 414 182 370 85 58 5 104 ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 2 2 1 2 1 2 1 2 ...
 $ Age        : num  34.5 47 62 27 22 14 30 26 18 21 ...
 $ SibSp      : int  0 1 0 0 1 0 0 1 0 2 ...
 $ Parch      : int  0 0 0 0 1 0 0 1 0 0 ...
 $ Ticket     : Factor w/ 363 levels "110469","110489",..: 153 222 74 148 139 262 159 85 101 270 ...
 $ Fare       : num  7.83 7 9.69 8.66 12.29 ...
 $ Cabin      : Factor w/ 77 levels "","A11","A18",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Embarked   : Factor w/ 3 levels "C","Q","S": 2 3 2 3 3 3 2 3 1 3 ...
> train$Survived <- as.factor(train$Survived)
> levels(test$Embarked) <- levels(train$Embarked)
> 
> 
> ## ----fig.width = 9---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> aggr(train,numbers = TRUE)
> colSums(is.na(train))
PassengerId    Survived      Pclass        Name         Sex         Age 
          0           0           0           0           0         177 
      SibSp       Parch      Ticket        Fare       Cabin    Embarked 
          0           0           0           0           0           0 
> train$Age[is.na(train$Age)] <- mean(train$Age,na.rm = T)
> 
> 
> ## ----fig.width = 9---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> aggr(test,numbers = TRUE)
> colSums(is.na(test))
PassengerId      Pclass        Name         Sex         Age       SibSp 
          0           0           0           0          86           0 
      Parch      Ticket        Fare       Cabin    Embarked 
          0           0           1           0           0 
> test$Age[is.na(test$Age)] <- mean(test$Age,na.rm = T)
> test$Fare[is.na(test$Fare)] <- mean(test$Fare,na.rm = T)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> trainInd <- createDataPartition(train$Survived,p = 0.8,list = FALSE)
> train_X <- train[trainInd,]
> train_Y <- train[-trainInd,]
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> set.seed(5)
> RF <- randomForest(Survived ~ .,data = train_X[,-c(1,4,9,11)],ntree = 2000)
> pred <- predict(RF,newdata = train_Y)
> pred
  1   5  25  29  31  35  36  38  39  42  45  48  49  50  58  61  66  71  72  75 
  0   0   0   1   0   1   0   0   1   1   1   1   0   1   0   0   1   0   0   0 
 79  84  89  94  97 107 109 113 130 136 137 138 141 144 146 153 154 157 160 164 
  1   0   1   0   0   1   0   0   0   0   1   1   1   0   0   0   0   1   0   0 
170 172 176 183 188 193 194 195 202 203 216 223 231 232 233 247 256 259 266 268 
  0   0   0   0   0   0   1   1   0   0   1   0   1   0   0   1   1   1   0   0 
277 278 280 290 294 297 299 300 315 316 319 329 331 334 336 337 339 344 350 360 
  0   0   0   1   0   0   0   1   0   1   1   0   1   0   0   0   0   0   0   1 
361 363 373 379 388 390 393 397 401 420 425 426 433 438 441 443 449 452 453 459 
  0   0   0   0   1   1   0   1   0   1   0   0   1   1   1   0   1   0   0   1 
465 469 473 474 480 482 483 485 487 491 492 495 499 511 523 531 533 536 542 552 
  0   0   1   1   1   0   0   1   1   0   0   0   1   0   0   1   0   1   0   0 
554 565 602 608 609 610 614 617 638 646 652 653 654 656 666 669 673 687 690 693 
  0   0   0   0   1   1   0   0   0   1   1   0   1   0   0   0   0   0   1   0 
701 702 723 726 730 752 756 757 758 773 775 779 786 793 794 797 799 804 808 818 
  1   1   0   0   0   1   1   0   0   1   1   0   0   0   0   1   0   1   1   0 
830 832 835 838 839 841 842 843 850 854 855 869 870 877 879 889 891 
  1   1   0   0   0   0   0   1   1   1   1   0   1   0   0   0   0 
Levels: 0 1
> pred_result <- bind_cols(train_Y,"pred" = pred)
> pred_result[,c(1,2,13)]
    PassengerId Survived pred
1             1        0    0
2             5        0    0
3            25        0    0
4            29        1    1
5            31        0    0
6            35        0    1
7            36        0    0
8            38        0    0
9            39        0    1
10           42        0    1
11           45        1    1
12           48        1    1
13           49        0    0
14           50        0    1
15           58        0    0
16           61        0    0
17           66        1    1
18           71        0    0
19           72        0    0
20           75        1    0
21           79        1    1
22           84        0    0
23           89        1    1
24           94        0    0
25           97        0    0
26          107        1    1
27          109        0    0
28          113        0    0
29          130        0    0
30          136        0    0
31          137        1    1
32          138        0    1
33          141        0    1
34          144        0    0
35          146        0    0
36          153        0    0
37          154        0    0
38          157        1    1
39          160        0    0
40          164        0    0
41          170        0    0
42          172        0    0
43          176        0    0
44          183        0    0
45          188        1    0
46          193        1    0
47          194        1    1
48          195        1    1
49          202        0    0
50          203        0    0
51          216        1    1
52          223        0    0
53          231        1    1
54          232        0    0
55          233        0    0
56          247        0    1
57          256        1    1
58          259        1    1
59          266        0    0
60          268        1    0
61          277        0    0
62          278        0    0
63          280        1    0
64          290        1    1
65          294        0    0
66          297        0    0
67          299        1    0
68          300        1    1
69          315        0    0
70          316        1    1
71          319        1    1
72          329        1    0
73          331        1    1
74          334        0    0
75          336        0    0
76          337        0    0
77          339        1    0
78          344        0    0
79          350        0    0
80          360        1    1
81          361        0    0
82          363        0    0
83          373        0    0
84          379        0    0
85          388        1    1
86          390        1    1
87          393        0    0
88          397        0    1
89          401        1    0
90          420        0    1
91          425        0    0
92          426        0    0
93          433        1    1
94          438        1    1
95          441        1    1
96          443        0    0
97          449        1    1
98          452        0    0
99          453        0    0
100         459        1    1
101         465        0    0
102         469        0    0
103         473        1    1
104         474        1    1
105         480        1    1
106         482        0    0
107         483        0    0
108         485        1    1
109         487        1    1
110         491        0    0
111         492        0    0
112         495        0    0
113         499        0    1
114         511        1    0
115         523        0    0
116         531        1    1
117         533        0    0
118         536        1    1
119         542        0    0
120         552        0    0
121         554        1    0
122         565        0    0
123         602        0    0
124         608        1    0
125         609        1    1
126         610        1    1
127         614        0    0
128         617        0    0
129         638        0    0
130         646        1    1
131         652        1    1
132         653        0    0
133         654        1    1
134         656        0    0
135         666        0    0
136         669        0    0
137         673        0    0
138         687        0    0
139         690        1    1
140         693        1    0
141         701        1    1
142         702        1    1
143         723        0    0
144         726        0    0
145         730        0    0
146         752        1    1
147         756        1    1
148         757        0    0
149         758        0    0
150         773        0    1
151         775        1    1
152         779        0    0
153         786        0    0
154         793        0    0
155         794        0    0
156         797        1    1
157         799        0    0
158         804        1    1
159         808        0    1
160         818        0    0
161         830        1    1
162         832        1    1
163         835        0    0
164         838        0    0
165         839        1    0
166         841        0    0
167         842        0    0
168         843        1    1
169         850        1    1
170         854        1    1
171         855        0    1
172         869        0    0
173         870        1    1
174         877        0    0
175         879        0    0
176         889        0    0
177         891        0    0
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> cm <- table(train_Y$Survived,pred)
> accuracy <- sum(diag(cm))/sum(cm)
> accuracy
[1] 0.8474576
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> set.seed(6)
> Pred <- predict(RF,newdata = test)
> Pred
  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20 
  0   0   0   0   0   0   1   0   1   0   0   0   1   0   1   1   0   0   1   1 
 21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40 
  0   0   1   0   1   0   1   0   0   0   0   0   0   0   1   0   0   0   0   0 
 41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60 
  0   0   0   1   1   0   0   0   1   0   0   0   1   1   0   0   0   0   0   1 
 61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80 
  0   0   0   1   1   1   1   0   0   1   1   0   1   0   1   0   0   1   0   1 
 81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99 100 
  1   0   0   0   0   0   1   1   1   1   1   0   1   0   0   0   1   0   1   0 
101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 
  1   0   0   0   0   0   0   0   0   0   0   1   1   1   1   0   0   1   0   1 
121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 
  1   0   1   0   0   1   0   1   0   0   0   0   0   0   0   0   0   0   1   0 
141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 
  0   1   0   0   0   0   0   0   0   0   1   0   0   0   0   0   1   1   0   1 
161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 
  1   1   1   0   0   1   0   0   1   1   0   0   0   0   0   1   1   0   1   1 
181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 
  0   0   1   0   1   0   1   0   0   0   0   0   0   0   1   0   1   1   0   0 
201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 
  1   1   0   1   0   0   1   0   1   0   0   0   0   1   0   0   1   0   1   0 
221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 
  1   0   1   0   1   1   0   1   0   0   0   1   0   0   0   0   0   0   1   1 
241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 
  1   1   0   0   0   0   1   0   1   0   1   0   1   0   0   0   0   0   1   0 
261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 
  0   0   1   1   0   0   0   0   0   0   0   0   1   1   0   1   0   0   0   0 
281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 
  1   1   1   1   1   0   0   0   0   0   0   1   0   0   0   0   1   0   0   0 
301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 
  0   0   0   0   1   1   1   0   0   0   0   0   0   1   1   1   0   0   0   0 
321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 
  0   0   0   0   1   0   1   0   0   0   1   0   0   1   0   0   0   0   0   0 
341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 
  0   0   0   1   0   1   0   1   0   1   1   0   0   0   1   0   1   0   0   1 
361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 
  0   1   1   0   1   0   0   1   1   0   0   1   0   0   1   1   0   0   0   0 
381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 
  0   0   1   1   0   1   0   0   0   0   0   1   0   0   0   1   0   1   0   0 
401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 
  1   0   1   0   0   0   0   0   1   1   1   1   1   0   1   0   0   0 
Levels: 0 1
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> submission <- cbind(sub,"Survived" = Pred)
> submission <- submission[,c(1,3)]
> write.csv(submission,file = "submission.csv",row.names=FALSE)
> 
> 
> proc.time()
   user  system elapsed 
  3.286   0.226   3.585 
