
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## ----preliminaries---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> library(caret)
Loading required package: lattice
Loading required package: ggplot2
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library(party)
Loading required package: grid
Loading required package: mvtnorm
Loading required package: modeltools
Loading required package: stats4
Loading required package: strucchange
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

Loading required package: sandwich
Warning messages:
1: package ‘party’ was built under R version 3.6.2 
2: package ‘zoo’ was built under R version 3.6.2 
> library(ggplot2)
> library(mice)

Attaching package: ‘mice’

The following objects are masked from ‘package:base’:

    cbind, rbind

Warning message:
package ‘mice’ was built under R version 3.6.2 
> library(knitr)
> 
> # setwd("E:\\kaggle\\titanic")
> # setwd("/volumes/hp c350b/kaggle/titanic")
> 
> read_titanic <- function(x, ...) 
+ {
+ 	d <- read.csv(x, na.strings = "", ...)
+ 	names(d) <- tolower(names(d))
+ 
+ 	d[["pclass"]] <- factor(d[["pclass"]], levels = c("3", "2", "1"), ordered = TRUE)
+ 	d[["sex"]] <- factor(d[["sex"]])
+ 	if(sum(grepl(pattern = "^surv", names(d))) > 0) {
+         d[["survived"]] <- factor(d[["survived"]], 
+                                     levels = c("0", "1"), 
+                                     labels = c("Died", "Survived"))
+         }
+ 	d
+ }
> 
> tr <- read_titanic("../input/train.csv")
> tst <- read_titanic("../input/test.csv")
> 
> #tr <- read_titanic("train.csv")
> #tst <- read_titanic("test.csv")
> 
> all <- rbind(cbind(dataset = "training", tr), 
+                 cbind(dataset = "testing", survived = NA, tst))
> 
> # count missing values
> 
> miss <- function(x) unlist(lapply(x, function(k) sum(is.na(k))))
> 
> miss(tr)
passengerid    survived      pclass        name         sex         age 
          0           0           0           0           0         177 
      sibsp       parch      ticket        fare       cabin    embarked 
          0           0           0           0         687           2 
> miss(tst)
passengerid      pclass        name         sex         age       sibsp 
          0           0           0           0          86           0 
      parch      ticket        fare       cabin    embarked 
          0           0           1         327           0 
> 
> # age has many and that's probably an important predictor, will need to fix those
> # the testing dataset has a missing fare and the training set has a couple missing embark locations
> 
> mosaicplot(tr$pclass ~ tr$survived, col = c("red", "green"))
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> mosaicplot(tr$sex ~ tr$survived, col = c("red", "green"))
> 
> 
> 
> ## ---- fig.width = 7, fig.height = 7----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> extract_text <- function(x, type = c("lastname", "title"))
+ {
+     type <- match.arg(type)
+     if(type == "lastname") {
+         m <- regexpr(pattern = "^[^,]+", text = x)
+     } else if(type == "title") {
+         m <- regexpr(pattern = "(?<=,\\s)[^\\.]+", text = x, perl = TRUE)
+     }
+     substr(x, start = m, stop = m + attr(m, "match.length") - 1)
+ }
> 
> all$lastname <- vapply(all[["name"]], function(k) extract_text(k, type = "lastname"), character(1))
> all$title <- vapply(all[["name"]], function(k) extract_text(k, type = "title"), character(1))
> 
> kable(data.frame(table(all$title)))


|Var1         | Freq|
|:------------|----:|
|Capt         |    1|
|Col          |    4|
|Don          |    1|
|Dona         |    1|
|Dr           |    8|
|Jonkheer     |    1|
|Lady         |    1|
|Major        |    2|
|Master       |   61|
|Miss         |  260|
|Mlle         |    2|
|Mme          |    1|
|Mr           |  757|
|Mrs          |  197|
|Ms           |    2|
|Rev          |    8|
|Sir          |    1|
|the Countess |    1|
> 
> # I have to know if the captain went down with the ship...
> 
> DOWN_WITH_SHIP <- all[all$title == "Capt", "survived"] == "Died"
> DOWN_WITH_SHIP # HARDMAN
[1] TRUE
> 
> # let's recode some of these titles
> 
> title_recodes <- list(list(old = c("Mlle", "Mme", "Ms"), new = "Miss"),
+                       list(old = c("Dona"), new = "Mrs"),
+                       list(old = c("Don"), new = "Mr"),
+                       list(old = c("Capt", "Major", "Col"), new = "Mil"),
+                       list(old = c("Dr", "Rev", "Sir"), new = "Hon"),
+                       list(old = c("Jonkheer", "Lady", "the Countess"), new = "HonF"))
> 
> recode_titles <- function(recodes, df)
+ {   
+     stopifnot(is.list(recodes))
+     for(j in seq(length(recodes))) {
+         df[df[["title"]] %in% recodes[[j]][["old"]], "title"] <- recodes[[j]][["new"]]
+         }
+     df
+ }
> 
> all <- recode_titles(title_recodes, all)
> all$title <- factor(all$title)
> 
> kable(data.frame(table(all$title))) # these should work better for classification


|Var1   | Freq|
|:------|----:|
|Hon    |   17|
|HonF   |    3|
|Master |   61|
|Mil    |    7|
|Miss   |  265|
|Mr     |  758|
|Mrs    |  198|
> 
> # what titles do the children get?
> 
> table(all[all$sex == "male" & all$age <= 16, "title"])

   Hon   HonF Master    Mil   Miss     Mr    Mrs 
     0      0     53      0      0     17      0 
> table(all[all$sex == "female" & all$age <= 16, "title"]) # there are two married 16 year olds...

   Hon   HonF Master    Mil   Miss     Mr    Mrs 
     0      0      0      0     61      0      3 
> 
> # now we need to find some way of imputing the missing age values
> 
> prop.table(table(tr[,"survived"]))

     Died  Survived 
0.6161616 0.3838384 
> prop.table(table(tr[is.na(tr$age), "survived"]))

     Died  Survived 
0.7062147 0.2937853 
> 
> # the proportions of survival between those with missing age values
> # and the whole population are fairly different, so the values
> # are probably not missing at random
> 
> # what are the titles of the passengers with missing age values?
> 
> table(all[is.na(all$age), "title"]) 

   Hon   HonF Master    Mil   Miss     Mr    Mrs 
     1      0      8      0     51    176     27 
> 
> # that's uninformative, I was hoping a big chunk would be from some obvious age group
> # let's just impute them then
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> # remove the factor variables and survival in the imputation call
> pmms <- mice(all[, c("age", "sex", "sibsp", "parch", "fare")], 
+                     method = "pmm", printFlag = F)
> 
> out <- complete(pmms)
> 
> # validate the results of the imputation
> summary(all$age)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
   0.17   21.00   28.00   29.88   39.00   80.00     263 
> summary(out$age) # imputation didn't change the age distribution significantly
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.17   21.00   28.00   29.99   39.00   80.00 
> 
> plot_data <- rbind(data.frame(dataset = "original", age = all[!is.na(all$age), "age"]),
+                     data.frame(dataset = "imputed", age = out[["age"]]))
> 
> g <- ggplot(data = plot_data, aes(x = age))
> g <- g + geom_histogram(aes(y = ..density..), binwidth = 5)
> g <- g + facet_grid(. ~ dataset)
> g # looks fine
> 
> all$age <- out$age
> 
> tr <- all[all$dataset == "training",]
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> ## let's also fix the missing "embarks" while we're at it
> 
> all[is.na(all$embarked),]
     dataset passengerid survived pclass
62  training          62 Survived      1
830 training         830 Survived      1
                                         name    sex age sibsp parch ticket
62                        Icard, Miss. Amelie female  38     0     0 113572
830 Stone, Mrs. George Nelson (Martha Evelyn) female  62     0     0 113572
    fare cabin embarked lastname title
62    80   B28     <NA>    Icard  Miss
830   80   B28     <NA>    Stone   Mrs
> 
> # they're first class and they paid $80
> 
> with(all[all$pclass == 1,], tapply(fare, embarked, summary))
$C
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  25.74   49.50   76.73  106.85  134.50  512.33 

$Q
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
     90      90      90      90      90      90 

$S
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   0.00   26.55   52.00   72.15   83.47  263.00 

> 
> # every first class passenger from "Q" paid $90, so it's not there
> # > 50% of the passengers paid less than $80 from C, compared to
> # about 20% in S. seems C is most likely. boxplot it
> 
> with(all[all$pclass == 1,], 
+         boxplot(fare ~ embarked, 
+                     main = "First-Class Fares by Embark Point"))
> abline(h = unique(all[is.na(all$embarked), "fare"]), col = "red")
> # they're right at the median for C, so that's most likely
> # we'll go with that
> 
> all[is.na(all$embarked), "embarked"] <- "C"
> 
> # in the testing set, there's a missing fare
> # where did they come from?
> 
> all[is.na(all$fare),] # 3rd class passenger embarking from "S"
     dataset passengerid survived pclass               name  sex  age sibsp
1044 testing        1044     <NA>      3 Storey, Mr. Thomas male 60.5     0
     parch ticket fare cabin embarked lastname title
1044     0   3701   NA  <NA>        S   Storey    Mr
> 
> boxplot(all[all$pclass == 3 & all$embarked == "S", "fare"]) # fairly well concentrated, we'll use the median
> 
> all[is.na(all$fare), "fare"] <- median(all[all$pclass == 3 & all$embarked == "S", "fare"], na.rm = TRUE)
> 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> # in 1912, being 16 was a big deal and life expectancy was 50-55
> 
> categorize_age <- function(x, baby_age, child_age, adult_age) 
+ {
+     if(x <= baby_age) {
+         "Baby"
+     } else if(x <= child_age) {
+         "Child"
+     } else if(x <= adult_age) {
+         "Adult"
+     } else {
+         "Elderly"
+     }
+ }
> 
> tr$age_cat <- factor(vapply(tr$age, function(j) categorize_age(j, 4, 16, 55), character(1)))
> 
> # how informative is that on its own?
> prop.table(table(tr$age_cat, tr$survived), margin = 1) # somewhat
         
               Died  Survived
  Adult   0.6378601 0.3621399
  Baby    0.3478261 0.6521739
  Child   0.5479452 0.4520548
  Elderly 0.6511628 0.3488372
> 
> # can we set more informative breakpoints for the age categories?
> # suppose we want to pick the three values in the function above that make the most
> # heterogenous groups in the above table call
> # that is, we want to maximize absolute distance in each row
> # so dig it
> 
> hetero_measure <- function(ages)
+ {
+     stopifnot(length(ages) == 3)
+     baby <- ages[1]
+     chld <- ages[2]
+     adlt <- ages[3]
+ 
+     if(baby < 1) return(NA)
+ 
+     cats <- factor(vapply(tr$age, function(j) 
+                     categorize_age(j, baby, chld, adlt), character(1)))
+     
+     tbl <- prop.table(table(cats, tr$survived), margin = 1)
+     -sum(abs(tbl[,1] - tbl[,2]))
+ }
> 
> best_ages <- optim(par = c(4, 16, 55), fn = hetero_measure)$par
> best_ages # optim thinks we're better off with these
[1]  6.453993 21.089410 63.297743
> 
> # let's see
> 
> best_ages <- round(best_ages)
> 
> tr$age_cat <- factor(vapply(tr$age, function(j) 
+                         categorize_age(j, best_ages[1], best_ages[2], best_ages[3]), character(1)))
> 
> prop.table(table(tr$age_cat, tr$survived), margin = 1) # old people basically getting pushed into the water 
         
               Died  Survived
  Adult   0.6261981 0.3738019
  Baby    0.3148148 0.6851852
  Child   0.6497462 0.3502538
  Elderly 0.8571429 0.1428571
> 
> # those ages spread out the child and adult numbers substantially
> # that could be a bit of an overfit, but let's stick with those
> 
> all$age_cat <- factor(vapply(all$age, function(j) 
+                         categorize_age(j, best_ages[1], best_ages[2], best_ages[3]), character(1)))
> 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> # so let's create some more informative family features
> # but first, let's explore how important family really is
> 
> # how much does having a surviving child affect your likelihood to survive?
> 
> surv_child <- function(nm, age, par_embrk, prch, titl, dta, no_surv_check = FALSE)
+ {
+ 
+     if(age <= 16 || prch == 0 || titl %in% c("Miss")) return(0)
+ 
+     flt <- dta[dta[["lastname"]] == nm &
+                 dta[["embarked"]] == par_embrk &
+                 dta[["parch"]] > 0 &
+                 dta[["age_cat"]] %in% c("Baby", "Child"),]
+ 
+     if(nrow(flt) == 0) {
+         0
+     } else {
+         if(no_surv_check) return(1)
+         if(any(flt[["survived"]] == "Survived")) {
+             2
+         } else {
+             1
+         }
+     }
+ 
+ }
> 
> tr$child_survived <- unlist(Map(f = function(a, b, c, d, e) 
+                                     surv_child(a, b, c, d, e, dta = tr),
+                                          tr$lastname,
+                                          tr$age,
+                                          tr$embarked,
+                                          tr$parch,
+                                          tr$title))
> 
> tr$child_survived <- factor(tr$child_survived, levels = c(0, 1, 2),
+                                 labels = c("No Children Aboard",
+                                             "Children Died",
+                                             "Children Survived"))
> 
> mosaicplot(tr$child_survived ~ tr$survived)
> 
> # information! people with no children died with about same proportion as whole population
> # but people whose children died disproportionately also died
> # and vice versa
> 
> # is it different for mothers and fathers?
> 
> tbl <- table(tr$child_survived, tr$survived, tr$sex)
> tbl
, ,  = female

                    
                     Died Survived
  No Children Aboard   68      211
  Children Died        11        1
  Children Survived     2       21

, ,  = male

                    
                     Died Survived
  No Children Aboard  445      105
  Children Died        11        0
  Children Survived    12        4

> 
> # mothers overwhelmingly die or survive with their children
> # being a father doesn't seem to help you
> # let's flag mothers then. I'm going to use the stricter criteria for determining
> # a mother that's set forth in my function, as opposed to using the parch variable
> 
> all$mother <- factor(unlist(Map(f = function(a, b, c, d, e) 
+                                     surv_child(a, b, c, d, e, dta = all, no_surv_check = TRUE),
+                                          all$lastname,
+                                          all$age,
+                                          all$embarked,
+                                          all$parch,
+                                          all$title)))
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> # how bout if you had a surviving spouse?
> 
> surv_spouse <- function(nm, age, sps_embrk, sbsp, sx, titl, dta)
+ {
+     if(age <= 16 || sbsp == 0 || titl %in% c("Miss")) return(0)
+ 
+     mtch.sex <- ifelse(sx == "male", "female", "male")
+ 
+         flt <- dta[dta[["lastname"]] == nm &
+                 dta[["embarked"]] == sps_embrk &
+                 dta[["sibsp"]] > 0 &
+                 dta[["sex"]] == mtch.sex &
+                 !(dta[["age_cat"]] %in% c("Baby", "Child")),]
+ 
+     if(nrow(flt) == 0) {
+         0
+     } else {
+         if(any(flt[["survived"]] == "Survived")) {
+             2 # hopefully that "any" isn't necessary but who knows
+         } else {
+             1
+         }
+     }
+ 
+ }
> 
> tr$spouse_survived <- unlist(Map(f = function(a, b, c, d, e, f) 
+                                     surv_spouse(a, b, c, d, e, f, dta = tr),
+                                          tr$lastname,
+                                          tr$age,
+                                          tr$embarked,
+                                          tr$sibsp,
+                                          tr$sex,
+                                          tr$title))
> 
> tr$spouse_survived <- factor(tr$spouse_survived, levels = c(0, 1, 2),
+                                 labels = c("No Spouse Aboard",
+                                             "Spouse Died",
+                                             "Spouse Survived"))
> 
> mosaicplot(tr$spouse_survived ~ tr$survived)
> # this one looks less helpful
> # jack did die even though rose lived
> 
> with(tr[tr$sex == "female",], prop.table(table(tr$spouse_survived, tr$survived), margin = 1))
                  
                        Died  Survived
  No Spouse Aboard 0.6257745 0.3742255
  Spouse Died      0.4473684 0.5526316
  Spouse Survived  0.5869565 0.4130435
> with(tr[tr$sex == "male",], prop.table(table(tr$spouse_survived, tr$survived), margin = 1))
                  
                        Died  Survived
  No Spouse Aboard 0.6257745 0.3742255
  Spouse Died      0.4473684 0.5526316
  Spouse Survived  0.5869565 0.4130435
> 
> # yeah, not doing us much good. we'll leave it off
> 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> # lastly let's see if we can squeeze anything out of this cabin business
> # it looks like the first letter corresponds to some part of the ship
> # that might be important
> # we'll treat the missing values as a factor level, since we don't have info to impute them
> 
> all$ship_part <- substr(all$cabin, start = 1, stop = 1)
> 
> table(all$pclass, all$ship_part, useNA = "ifany") 
   
      A   B   C   D   E   F   G   T <NA>
  3   0   0   0   0   3   8   5   0  693
  2   0   0   0   6   4  13   0   0  254
  1  22  65  94  40  34   0   0   1   67
> 
> # it looks like this is only filled out for 1st class passengers?
> # so this is going to carry lots of the same information as the pclass variable
> 
> all[is.na(all$ship_part) | all$ship_part %in% c("T"), "ship_part"] <- "Unknown"
> 
> all$ship_part <- factor(all$ship_part)
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> keep_vars <- setdiff(names(all), c("dataset", "ticket", "cabin", "name", "lastname"))
> 
> testing <- all[all$dataset == "testing", keep_vars]
> training <- all[all$dataset == "training", setdiff(keep_vars, "passengerid")]
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> # fit <- train(survived ~ ., data = training, method = "rf")
> 
> # plot(fit$finalModel)
> 
> # varImpPlot(fit$finalModel)
> 
> # testing$survived <- ifelse(predict(fit, testing) == "Survived", 1, 0)
> 
> # submission <- testing[, c("passengerid", "survived")]
> 
> #write.csv(submission, file = "submission.csv", row.names = FALSE)
> 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> fit <- cforest(survived ~ ., data = training, controls = cforest_unbiased(ntree = 2000, mtry = 3))
> 
> testing$survived <- ifelse(predict(fit, testing, OOB = TRUE, type = "response") == "Survived", 1, 0)
Error in `$<-.data.frame`(`*tmp*`, survived, value = c(0, 1, 0, 1, 0,  : 
  replacement has 891 rows, data has 418
Calls: $<- -> $<-.data.frame
Execution halted
