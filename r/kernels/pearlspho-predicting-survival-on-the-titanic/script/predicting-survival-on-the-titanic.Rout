
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## ----setup, include=FALSE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> knitr::opts_chunk$set(echo = TRUE)
> 
> 
> ## ----message = FALSE-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # For data manipulation and tidying
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> 
> # For data visualizations
> library(ggplot2)
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> 
> # For modeling and predictions
> library(caret)
Loading required package: lattice
> library(glmnet)
Loading required package: Matrix
Loaded glmnet 4.0-2
Warning message:
package ‘glmnet’ was built under R version 3.6.2 
> library(ranger)
> library(e1071)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train <- read.csv('../input/train.csv', header = TRUE, stringsAsFactors = FALSE)
> train$Dataset <- "train"
> 
> test <- read.csv('../input/test.csv', header = TRUE, stringsAsFactors = FALSE)
> test$Dataset <- "test"
> 
> full <- bind_rows(train, test)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> str(full)
'data.frame':	1309 obs. of  13 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : chr  "male" "female" "female" "female" ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  "" "C85" "" "C123" ...
 $ Embarked   : chr  "S" "C" "S" "S" ...
 $ Dataset    : chr  "train" "train" "train" "train" ...
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> factor_variables <- c('PassengerId', 'Survived', 'Pclass', 'Sex', 'Embarked', 'Dataset')
> full[factor_variables] <- lapply(full[factor_variables], function(x) as.factor(x))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> names <- full$Name
> 
> titles <-  gsub("^.*, (.*?)\\..*$", "\\1", names)
> 
> full$Titles <- titles
> 
> unique(full$Titles)
 [1] "Mr"           "Mrs"          "Miss"         "Master"       "Don"         
 [6] "Rev"          "Dr"           "Mme"          "Ms"           "Major"       
[11] "Lady"         "Sir"          "Mlle"         "Col"          "Capt"        
[16] "the Countess" "Jonkheer"     "Dona"        
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> table(full$Sex, full$Title)
        
         Capt Col Don Dona  Dr Jonkheer Lady Major Master Miss Mlle Mme  Mr Mrs
  female    0   0   0    1   1        0    1     0      0  260    2   1   0 197
  male      1   4   1    0   7        1    0     2     61    0    0   0 757   0
        
          Ms Rev Sir the Countess
  female   2   0   0            1
  male     0   8   1            0
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> table(full$Pclass, full$Titles)
   
    Capt Col Don Dona  Dr Jonkheer Lady Major Master Miss Mlle Mme  Mr Mrs  Ms
  1    1   4   1    1   6        1    1     2      5   60    2   1 159  77   0
  2    0   0   0    0   2        0    0     0     11   50    0   0 150  55   1
  3    0   0   0    0   0        0    0     0     45  150    0   0 448  65   1
   
    Rev Sir the Countess
  1   0   1            1
  2   8   0            0
  3   0   0            0
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full$Titles <- gsub("Dona|Lady|Madame|the Countess", "Lady", full$Titles)
> full$Titles <- gsub("Don|Jonkheer|Sir", "Sir", full$Titles)
> 
> unique(full$Titles)
 [1] "Mr"     "Mrs"    "Miss"   "Master" "Sir"    "Rev"    "Dr"     "Mme"   
 [9] "Ms"     "Major"  "Lady"   "Mlle"   "Col"    "Capt"  
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full$Titles <- as.factor(full$Titles)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full <- mutate(full, FamilySize = SibSp + Parch + 1)
> 
> 
> ## ----echo = FALSE----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> hist(full$FamilySize, 
+      main = "Family Group Size", 
+      xlab = "People per Family Group", 
+      col = "#56B4E9",
+      xlim = c(1,11),
+      breaks = 11)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full$TravelGroup <- NA
> 
> 
> ## ----results = 'hide'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full2 <- arrange(full, Ticket)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> head(full2)
  PassengerId Survived Pclass
1         258        1      1
2         505        1      1
3         760        1      1
4         263        0      1
5         559        1      1
6         586        1      1
                                                      Name    Sex Age SibSp
1                                     Cherry, Miss. Gladys female  30     0
2                                    Maioni, Miss. Roberta female  16     0
3 Rothes, the Countess. of (Lucy Noel Martha Dyer-Edwards) female  33     0
4                                        Taussig, Mr. Emil   male  52     1
5                   Taussig, Mrs. Emil (Tillie Mandelbaum) female  39     1
6                                      Taussig, Miss. Ruth female  18     0
  Parch Ticket  Fare Cabin Embarked Dataset Titles FamilySize TravelGroup
1     0 110152 86.50   B77        S   train   Miss          1          NA
2     0 110152 86.50   B79        S   train   Miss          1          NA
3     0 110152 86.50   B77        S   train   Lady          1          NA
4     1 110413 79.65   E67        S   train     Mr          3          NA
5     1 110413 79.65   E67        S   train    Mrs          3          NA
6     2 110413 79.65   E68        S   train   Miss          3          NA
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full2 <- (transform(full2, TravelGroup = match(Ticket, unique(Ticket))))
> 
> # Can't forget to make those Travel Groups into factors!
> full2$TravelGroup <- as.factor(full2$TravelGroup)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full3 <- full2 %>% 
+             group_by(TravelGroup) %>% 
+             mutate(GroupSize = n()) %>%
+             ungroup()
> 
> 
> ## ----echo = FALSE, fig.show = 'hold', fig.width = 4, fig.height = 3.5------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> hist(full3$FamilySize, 
+      main = "Family Group Size", 
+      xlab = "People per Family Group", 
+      col = "#56B4E9",
+      xlim = c(1,11),
+      breaks = 11)
> hist(full3$GroupSize, 
+      main = "Travel Group Size", 
+      xlab = "People per Travel Group", 
+      col = "#D55E00",
+      xlim = c(1,11),
+      breaks = 11)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> filtered <- filter(full3, GroupSize == 1)
> 
> # How many were listed as being onboard with siblings or spouses?
> fSibSp <- filtered[filtered$SibSp > 0, ]
> nrow(fSibSp)
[1] 42
> 
> # How many were listed as being onboard with parents or children?
> fParch <- filtered[filtered$Parch > 0, ]
> nrow(fParch)
[1] 16
> 
> # How many of those people overlapped both groups?
> sum(fSibSp$PassengerId %in% fParch$PassengerId)
[1] 8
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> summary(full3)
  PassengerId   Survived   Pclass      Name               Sex     
 1      :   1   0   :549   1:323   Length:1309        female:466  
 2      :   1   1   :342   2:277   Class :character   male  :843  
 3      :   1   NA's:418   3:709   Mode  :character               
 4      :   1                                                     
 5      :   1                                                     
 6      :   1                                                     
 (Other):1303                                                     
      Age            SibSp            Parch          Ticket         
 Min.   : 0.17   Min.   :0.0000   Min.   :0.000   Length:1309       
 1st Qu.:21.00   1st Qu.:0.0000   1st Qu.:0.000   Class :character  
 Median :28.00   Median :0.0000   Median :0.000   Mode  :character  
 Mean   :29.88   Mean   :0.4989   Mean   :0.385                     
 3rd Qu.:39.00   3rd Qu.:1.0000   3rd Qu.:0.000                     
 Max.   :80.00   Max.   :8.0000   Max.   :9.000                     
 NA's   :263                                                        
      Fare            Cabin           Embarked  Dataset        Titles   
 Min.   :  0.000   Length:1309         :  2    test :418   Mr     :757  
 1st Qu.:  7.896   Class :character   C:270    train:891   Miss   :260  
 Median : 14.454   Mode  :character   Q:123                Mrs    :197  
 Mean   : 33.295                      S:914                Master : 61  
 3rd Qu.: 31.275                                           Dr     :  8  
 Max.   :512.329                                           Rev    :  8  
 NA's   :1                                                 (Other): 18  
   FamilySize      TravelGroup     GroupSize     
 Min.   : 1.000   779    :  11   Min.   : 1.000  
 1st Qu.: 1.000   105    :   8   1st Qu.: 1.000  
 Median : 1.000   776    :   8   Median : 1.000  
 Mean   : 1.884   336    :   7   Mean   : 2.102  
 3rd Qu.: 2.000   455    :   7   3rd Qu.: 3.000  
 Max.   :11.000   460    :   7   Max.   :11.000  
                  (Other):1261                   
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full3[(which(is.na(full3$Fare))) , 1]
[90m# A tibble: 1 x 1[39m
  PassengerId
  [3m[90m<fct>[39m[23m      
[90m1[39m 1044       
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Resort the dataset by Passenger Number
> full4 <- arrange(full3, PassengerId)
> 
> # Where did this passenger leave from? What was their class?
> full4[1044, c(3, 12)]
[90m# A tibble: 1 x 2[39m
  Pclass Embarked
  [3m[90m<fct>[39m[23m  [3m[90m<fct>[39m[23m   
[90m1[39m 3      S       
> 
> 
> ## ----echo = FALSE, warning = FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> ggplot(full4[full4$Pclass == '3' & full$Embarked == 'S', ], 
+   aes(x = Fare)) +
+   geom_density(fill = '#56B4E9', alpha = 0.4) + 
+   geom_vline(aes(xintercept = median(Fare, na.rm = T)),
+     colour = '#D55E00', linetype = 'dotted', lwd = 1) +
+   scale_x_continuous() +
+   theme(panel.grid.major = element_blank())
Warning message:
Removed 1 rows containing non-finite values (stat_density). 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full4 %>%
+   filter(Pclass == '3' & Embarked == 'S') %>%
+   summarise(missing_fare = median(Fare, na.rm = TRUE))
[90m# A tibble: 1 x 1[39m
  missing_fare
         [3m[90m<dbl>[39m[23m
[90m1[39m         8.05
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full4$Fare[1044] <- 8.05
> 
> summary(full4$Fare)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   7.896  14.454  33.276  31.275 512.329 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full4$Embarked[full4$Embarked == ""] <- NA
> 
> full4[(which(is.na(full4$Embarked))), 1]
[90m# A tibble: 2 x 1[39m
  PassengerId
  [3m[90m<fct>[39m[23m      
[90m1[39m 62         
[90m2[39m 830        
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full4[c(62, 830), c(1,3,10)]
[90m# A tibble: 2 x 3[39m
  PassengerId Pclass  Fare
  [3m[90m<fct>[39m[23m       [3m[90m<fct>[39m[23m  [3m[90m<dbl>[39m[23m
[90m1[39m 62          1         80
[90m2[39m 830         1         80
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> full4 %>%
+   group_by(Embarked, Pclass) %>%
+   filter(Pclass == "1") %>%
+   summarise(mfare = median(Fare),
+             n = n())
`summarise()` regrouping output by 'Embarked' (override with `.groups` argument)
[90m# A tibble: 4 x 4[39m
[90m# Groups:   Embarked [4][39m
  Embarked Pclass mfare     n
  [3m[90m<fct>[39m[23m    [3m[90m<fct>[39m[23m  [3m[90m<dbl>[39m[23m [3m[90m<int>[39m[23m
[90m1[39m C        1       76.7   141
[90m2[39m Q        1       90       3
[90m3[39m S        1       52     177
[90m4[39m [31mNA[39m       1       80       2
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Assign empty embark ports to 'C'
> full4$Embarked[c(62,830)] <- 'C'
> 
> # Drop unused levels (since there should be no more blanks)
> full4$Embarked <- droplevels(full4$Embarked)
> 
> # Check to make sure there are no NA's or blanks
> levels(full4$Embarked)
[1] "C" "Q" "S"
> 
> 
> ## ----results = 'hide'------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> predicted_age <- train(
+   Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Titles + FamilySize + GroupSize,
+   tuneGrid = data.frame(mtry = c(2, 3, 7)),
+   data = full4[!is.na(full4$Age), ],
+   method = "ranger",
+   trControl = trainControl(
+       method = "cv", number = 10,
+       repeats = 10, verboseIter = TRUE),
+   importance = 'impurity'
+   )
Error: The tuning parameter grid should have columns mtry, splitrule, min.node.size
In addition: Warning message:
`repeats` has no meaning for this resampling method. 
Execution halted
