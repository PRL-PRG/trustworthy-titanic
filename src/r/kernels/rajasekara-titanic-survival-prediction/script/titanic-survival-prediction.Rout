
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # read data
> train <- read.csv('../input/train.csv')
> test  <- read.csv('../input/test.csv')
> 
> library(ggplot2) # visualization
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library(ggthemes) # visualization
> library(dplyr) # data manipulation

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> 
> 
> #create Survived column in test
> test$Survived <- "NA" 
> 
> #create Train or Test column in both
> train$TrainOrTest <- "Train"
> test$TrainOrTest <- "Test"
> 
> # Union both train and test
> full <- rbind(train, test)
> 
> str(full)
'data.frame':	1309 obs. of  13 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : chr  "0" "1" "1" "1" ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : Factor w/ 1307 levels "Abbing, Mr. Anthony",..: 109 191 358 277 16 559 520 629 417 581 ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : Factor w/ 929 levels "110152","110413",..: 524 597 670 50 473 276 86 396 345 133 ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : Factor w/ 187 levels "","A10","A14",..: 1 83 1 57 1 1 131 1 1 1 ...
 $ Embarked   : Factor w/ 4 levels "","C","Q","S": 4 2 4 4 4 3 4 4 4 2 ...
 $ TrainOrTest: chr  "Train" "Train" "Train" "Train" ...
> 
> #create Family Size column
> full$FamilySize <- 1+full$SibSp+full$Parch
> 
> table(full$Sex) #0

female   male 
   466    843 
> sum(is.na(full$Age)) #263
[1] 263
> table(full$FamilySize) #0

  1   2   3   4   5   6   7   8  11 
790 235 159  43  22  25  16   8  11 
> sum(is.na(full$Fare)) #1
[1] 1
> table(full$Embarked) #2

      C   Q   S 
  2 270 123 914 
> table(full$Pclass) #0

  1   2   3 
323 277 709 
> 
>         
>         # 1. Predictive Model to predict the missing Age values 
>         UpperQuartileAge <- boxplot.stats(full$Age)$stats[5] #Set Upper Whisker as limit to exclude outliers
>         NonAgeOutliers <- full$Age < UpperQuartileAge #Get the set with no outliers
>         full_NoAgeOutliers <- full[NonAgeOutliers,] # filter dataset with no Age outliers
>         summary(full_NoAgeOutliers$Age, na.rm = TRUE)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
   0.17   21.00   28.00   29.48   38.00   65.00     263 
>         
>            # Build model
>         set.seed(123)
>         Age.equation = "Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked" # formula for lm
>         Age_Model <- lm (
+                 formula = Age.equation, 
+                 data = full_NoAgeOutliers # data without outliers
+         )
>         Blank_Age_Rows <- full[
+                 is.na(full$Age), #blank Age
+                 c("Pclass", "Sex", "SibSp", "Parch", "Fare", "Embarked") # include only these columns
+                 ]
>         Predicted_Age_Rows <- predict(Age_Model, newdata = Blank_Age_Rows)
>         
>         # Add these predicted missing Age back to the full dataset
>         full[is.na(full$Age),"Age" ]     <- Predicted_Age_Rows # replaces only the cells in Age column with NAs with the newly predicted values
>         
>         full[is.na(full$Age),"Age" ] # now this should not return any values, as the missing rows are already replaced with predicted Age values
numeric(0)
>         summary(full$Age)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 -1.752  22.000  27.000  29.361  36.000  80.000 
>         full[full$Age<0,"Age"] <- median(full$Age)
>         
>         # 2. Predictive Model to predict the missing Fare values 
>         UpperQuartileFare <- boxplot.stats(full$Fare)$stats[5] #Set Upper Whisker as limit to exclude outliers
>         NonFareOutliers <- full$Fare < UpperQuartileFare #Get the set with no outliers
>         full_NoFareOutliers <- full[NonFareOutliers,] # filter dataset with no Fare outliers
>         summary(full_NoFareOutliers$Fare, na.rm = TRUE)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's 
  0.000   7.879  13.000  17.754  26.000  63.358       1 
>         
>         # Build model
>         set.seed(1234)
>         Fare.equation = "Fare ~ Pclass + Sex + SibSp + Parch + Age + Embarked" # formula for lm
>         Fare_Model <- lm (
+                 formula = Fare.equation, 
+                 data = full_NoFareOutliers # data without outliers
+         )
>         
>         # predict missing Age values
>         Blank_Fare_Rows <- full[
+                 is.na(full$Fare), #blank Fare
+                 c("Pclass", "Sex", "SibSp", "Parch", "Age", "Embarked") # include only these columns
+                 ]
>         Predicted_Fare_Rows <- predict(Fare_Model, newdata = Blank_Fare_Rows)
>         
>         # Add these predicted missing Fare back to the full dataset
>         full[is.na(full$Fare),"Fare" ] <- Predicted_Fare_Rows # replaces only the cells in Age column with NAs with the newly predicted values
>         
>         full[is.na(full$Fare),"Fare" ] # now this should not return any values, as the missing rows are already replaced with predicted Age values
numeric(0)
>         full[full$Fare<0,"Fare"] <- median(full$Fare)
>           
>         # 3. Impute missing Embarked values 
>         full[is.na(full$Embarked),"Embarked"] <- "S"
>         
> str(full)
'data.frame':	1309 obs. of  14 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : chr  "0" "1" "1" "1" ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : Factor w/ 1307 levels "Abbing, Mr. Anthony",..: 109 191 358 277 16 559 520 629 417 581 ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age        : num  22 38 26 35 35 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : Factor w/ 929 levels "110152","110413",..: 524 597 670 50 473 276 86 396 345 133 ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : Factor w/ 187 levels "","A10","A14",..: 1 83 1 57 1 1 131 1 1 1 ...
 $ Embarked   : Factor w/ 4 levels "","C","Q","S": 4 2 4 4 4 3 4 4 4 2 ...
 $ TrainOrTest: chr  "Train" "Train" "Train" "Train" ...
 $ FamilySize : num  2 2 1 2 1 1 1 5 3 2 ...
> 
> full$AgeGroup <-  cut(full$Age , breaks = c(-1,5,10,20,30,40,50,60,70,80))
> full$FareGroup <- cut(full$Fare, breaks = c(-1,5,10,25,50,75,100,150,200,300,500,1000))
> 
>         
> #Identify Factors
> full$Pclass <- as.factor(full$Pclass)
> full$Sex <- as.factor(full$Sex)
> full$AgeGroup <- as.factor(full$AgeGroup)
> full$FamilySize <- as.factor(full$FamilySize)
> full$SibSp <- as.factor(as.character(full$SibSp))
> full$Parch <- as.factor(as.character(full$Parch))
> full$FareGroup <- as.factor(full$FareGroup)
> full$Embarked <- as.factor(full$Embarked)
> full$Survived <- as.factor(full$Survived)
> str(full)
'data.frame':	1309 obs. of  16 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : Factor w/ 3 levels "0","1","NA": 1 2 2 2 1 1 1 1 2 2 ...
 $ Pclass     : Factor w/ 3 levels "1","2","3": 3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : Factor w/ 1307 levels "Abbing, Mr. Anthony",..: 109 191 358 277 16 559 520 629 417 581 ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age        : num  22 38 26 35 35 ...
 $ SibSp      : Factor w/ 7 levels "0","1","2","3",..: 2 2 1 2 1 1 1 4 1 2 ...
 $ Parch      : Factor w/ 8 levels "0","1","2","3",..: 1 1 1 1 1 1 1 2 3 1 ...
 $ Ticket     : Factor w/ 929 levels "110152","110413",..: 524 597 670 50 473 276 86 396 345 133 ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : Factor w/ 187 levels "","A10","A14",..: 1 83 1 57 1 1 131 1 1 1 ...
 $ Embarked   : Factor w/ 4 levels "","C","Q","S": 4 2 4 4 4 3 4 4 4 2 ...
 $ TrainOrTest: chr  "Train" "Train" "Train" "Train" ...
 $ FamilySize : Factor w/ 9 levels "1","2","3","4",..: 2 2 1 2 1 1 1 5 3 2 ...
 $ AgeGroup   : Factor w/ 9 levels "(-1,5]","(5,10]",..: 4 5 4 5 5 4 7 1 4 3 ...
 $ FareGroup  : Factor w/ 11 levels "(-1,5]","(5,10]",..: 2 5 2 5 2 2 5 3 3 4 ...
> 
> 
> # build model
> install.packages("randomForest")
trying URL 'https://cran.rstudio.com/bin/macosx/el-capitan/contrib/3.6/randomForest_4.6-14.tgz'
Content type 'application/x-gzip' length 253893 bytes (247 KB)
==================================================
downloaded 247 KB


The downloaded binary packages are in
	/var/folders/z8/75snmrgn3n3cyk89jxrwc4dc0000gn/T//Rtmp197rEQ/downloaded_packages
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:dplyr’:

    combine

The following object is masked from ‘package:ggplot2’:

    margin

> 
> titanic_model<-randomForest(factor(Survived) ~ Pclass + Sex + AgeGroup + FamilySize + FareGroup + Embarked, data = full[full$TrainOrTest == "Train",])
> str(test)
'data.frame':	418 obs. of  13 variables:
 $ PassengerId: int  892 893 894 895 896 897 898 899 900 901 ...
 $ Pclass     : int  3 3 2 3 3 3 3 2 3 3 ...
 $ Name       : Factor w/ 418 levels "Abbott, Master. Eugene Joseph",..: 210 409 273 414 182 370 85 58 5 104 ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 2 2 1 2 1 2 1 2 ...
 $ Age        : num  34.5 47 62 27 22 14 30 26 18 21 ...
 $ SibSp      : int  0 1 0 0 1 0 0 1 0 2 ...
 $ Parch      : int  0 0 0 0 1 0 0 1 0 0 ...
 $ Ticket     : Factor w/ 363 levels "110469","110489",..: 153 222 74 148 139 262 159 85 101 270 ...
 $ Fare       : num  7.83 7 9.69 8.66 12.29 ...
 $ Cabin      : Factor w/ 77 levels "","A11","A18",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Embarked   : Factor w/ 3 levels "C","Q","S": 2 3 2 3 3 3 2 3 1 3 ...
 $ Survived   : chr  "NA" "NA" "NA" "NA" ...
 $ TrainOrTest: chr  "Test" "Test" "Test" "Test" ...
> set.seed(12345)
> Prediction <- predict(titanic_model, full[full$TrainOrTest == "Test",])
> 
> Submission <- data.frame(PassengerID = test$PassengerId, Survived = Prediction)
> 
> write.csv(Submission, file = 'Submission.csv', row.names = FALSE)
> 
> proc.time()
   user  system elapsed 
  3.417   0.261   4.836 
