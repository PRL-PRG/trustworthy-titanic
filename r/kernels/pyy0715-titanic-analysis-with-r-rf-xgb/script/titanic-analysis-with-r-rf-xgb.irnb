{"cells":[{"metadata":{"_uuid":"32c0c53cc9a41a8c2b73fd99403dc1be6fbe55d1"},"cell_type":"markdown","source":"# 타이타닉 분석"},{"metadata":{"_uuid":"623bb09ab6e2734626a634acd8f55212d6aada9e"},"cell_type":"markdown","source":"## 1. 소개"},{"metadata":{"_uuid":"273f08d50d7921171ee8b24eb64d205abade5355"},"cell_type":"markdown","source":"### 1.1 데이터 설명\n* train.csv : 예측 모델을 만들기 위해 사용하는 학습 데이터다. 탑승객의 신상정보와 생존유무가 주어진다. <br />\n* test.csv - 학습 데이터에서 신상정보 및 파생변수를 토대로 모델을 만들고 test.csv파일을 이용하여 생존유무를 예측한다. <br />\n* sampleSubmission.csv - 제출시 사용하는 csv 파일이다. <br />"},{"metadata":{"_uuid":"d14342756597070188502f7db172c60a0de7a2ce"},"cell_type":"markdown","source":"### 1.2 변수 설명\n* survival : 생존유무, target 값. (0 = 사망, 1 = 생존) <br />\n* pclass : 티켓 클래스. (1 = 1st, 2 = 2nd, 3 = 3rd) <br />\n* sex : 성별 <br />\n* Age : 나이(세) <br />\n* sibsp : 함께 탑승한 형제자매, 배우자 수 총합 <br />\n* parch : 함께 탑승한 부모, 자녀 수 총합 <br />\n* ticket : 티켓 넘버 <br />\n* fare : 탑승 요금 <br />\n* cabin : 객실 넘버 <br />\n* embarked : 탑승 항구"},{"metadata":{"_uuid":"a7d420e4ee4bfe8ab7abaa5bc4647a3937fbad6d"},"cell_type":"markdown","source":"## 2. 준비작업\n### 2.1 Packages"},{"metadata":{"trusted":true,"_uuid":"8caff423bee5b454f305b21b0556316f9c2c6c31"},"cell_type":"code","source":"library(readr)\nlibrary(stringr) # 문자열 처리 패키지\nlibrary(doBy)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(RColorBrewer)\nlibrary(corrplot)\nlibrary(doBy)\nlibrary(dplyr) # 전처리\nlibrary(randomForest)\nlibrary(gridExtra)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"96514bf54e68ae0c8894bec7fb049a57ad862edc"},"cell_type":"markdown","source":"### 2.2 Loading the data\n\nread.csv()보다 readr 패키지의 read_csv()가 조금 더 빨리 데이터를 읽어온다는 장점이 있다.<br />\n그러나 read_csv()는 stringsAsFactors 옵션이 없어서 문자열(Character)과 요인(Factor)를 구별하지 못하고 모두 Character로 불러온다.<br />\n\n추가적으로 R에서 기본 내장함수 rbind()는 두 데이터의 차원이 같을 때 병합할 수 있는데 test셋에는 Y값이 없어서 차원이 다르다.<br />\n이에 따라 dplyr::bind_rows()를 사용하여 test데이터의 Y값은 NA처리하며 병합한다.\n"},{"metadata":{"trusted":true,"_uuid":"92e3eb150e2f8908288fa665e2746ed0436368a5"},"cell_type":"code","source":"train <- read_csv('../input/train.csv')\ntest <- read_csv('../input/test.csv')\nfull <- bind_rows(train, test)\n\nfull <- full %>% # ticket과 cabin은 파생변수 생성을 위해 문자열로 놔둠\n  mutate(Survived = factor(Survived),\n         Pclass   = factor(Pclass, ordered = T),\n         Name     = factor(Name),\n         Sex      = factor(Sex),\n         Embarked = factor(Embarked))\n\nstr(full)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"e7726ede378c3e7aaf72f6dd5e15a66c830249ff"},"cell_type":"markdown","source":"# 3. 탐색적 데이터 분석(EDA)"},{"metadata":{"_uuid":"54067df41b04f87aaafab2630ed4f2dd9120e5c1"},"cell_type":"markdown","source":"## 3.1 수치값을 활용한 data 확인"},{"metadata":{"trusted":true,"_uuid":"1716a1d121ac811f36a1ce68849818170a0c71b6"},"cell_type":"code","source":"head(full)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"fc65cab4badfdc75cbff4ca6c7503a1c06e68bc2"},"cell_type":"code","source":"str(full)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"e7802a353a3e3258103e9bf13f289be8b2764a8c"},"cell_type":"code","source":"summary(full)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"5c809ef81baa11e2a96f3d8ff6b21b08372707d2"},"cell_type":"markdown","source":"1. 사망자가 생존자보다 많다 <br />\n2. 남성이 여성보다 2배 가까이 더 많다 <br />\n3. SibSp의 3분위값이 1이므로 대부분 부부끼리 혹은 형제끼리 탑승했다 <br />\n4. Parch의 3분위수가 0이므로 부모나 자녀와 함께 탑승한 승객이 많지 않다 <br />\n5. Fare의 최대값이 512로 이상치가 아닌지 확인이 필요해 보인다 <br />\n6. 결측치가 많은 데이터임을 확인할 수있다. <br />"},{"metadata":{"trusted":true,"_uuid":"2700a6ddfc06bf0c130c2c9c2bed407b244b68f5"},"cell_type":"code","source":"sapply(train, function(x) length(unique(x)))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"1788d9cb2afed26ec29d8b780f73f4b1b481972d"},"cell_type":"markdown","source":"## 3.2 결측치 확인 및 시각화"},{"metadata":{"trusted":true,"_uuid":"fa443208accede539ac696e3a54366e275a10fed"},"cell_type":"code","source":"colSums(is.na(full))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"6d34c768a25971ddfa841037602849fe7846ed20"},"cell_type":"code","source":"missing_values <- full %>%      # 결측치 비율을 데이터프레임으로\n  dplyr::summarize_all(funs(sum(is.na(.))/n()))\n\n# tidyr::gather()함수를 이용하여 stack화 시킴 (설명변수들이 key로 지정한 변수에 나열되고, 결측값들이 value로 지정한 변수의 값으로)\nmissing_values <- tidyr::gather(missing_values,\n                                key = \"feature\", value = \"missing_pct\")\nmissing_values","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"533983cdd85c248b09b26920bdbd211b90753ef7"},"cell_type":"code","source":"missing_values %>% \n  ggplot(aes(x = reorder(feature, missing_pct), y = missing_pct)) + # 정렬을 위한 reorder() 축지정\n  geom_bar(stat = \"identity\", fill = \"red\") +  # bar plot 그리기 stat = 'identity' 데이터프레임 값을 그대로 이용하여 그리라는 옵션\n  ggtitle(\"Rate of missing values in each features\") +\n  theme(plot.title = element_text(face = \"bold\",    # 글씨체 \n                                  hjust = 0.5,      # Horizon(가로비율) = 0.5\n                                  size = 15, color = \"darkblue\")) +\n  labs(x = \"Feature names\", y = \"Rate\") +  # x,y축 제목 지정\n  coord_flip() # Plot의 x, y축 변환 \n\n# 결측값이 있는 변수로만 시각화\nmissing_values <- missing_values[missing_values$missing_pct > 0, ]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a7c5826356713fd97563379cd8f2a94296575c7d"},"cell_type":"code","source":"missing_values <- missing_values[missing_values$missing_pct > 0, ]\n\nmissing_values %>% \n  ggplot(aes(x = reorder(feature, missing_pct), y = missing_pct)) + # 정렬을 위한 reorder() 축지정\n  geom_bar(stat = \"identity\", fill = \"red\") +  # bar plot 그리기 stat = 'identity' 데이터프레임 값을 그대로 이용하여 그리라는 옵션\n  ggtitle(\"Rate of missing values in each features\") +\n  theme(plot.title = element_text(face = \"bold\",    # 글씨체 \n                                  hjust = 0.5,      # Horizon(가로비율) = 0.5\n                                  size = 15, color = \"darkblue\")) +\n  labs(x = \"Feature names\", y = \"Rate\") +  # x,y축 제목 지정\n  coord_flip() # Plot의 x, y축 변환 ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"6651581fb95a6ce478e96b3cd3238979192da708"},"cell_type":"markdown","source":"## 3.3 변수 EDA"},{"metadata":{"_uuid":"649f5e37c9bb0eb585d2be407f2284d67777c234"},"cell_type":"markdown","source":"### 3.3.1 Sex"},{"metadata":{"trusted":true,"_uuid":"67f938cbc34617f041f75174415e93800dc7e6f3"},"cell_type":"code","source":"table(full$Sex)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"6ebd48f3ec7bdf8e66354636788e5f1df5d9cdb3"},"cell_type":"code","source":"full %>% group_by(Survived, Sex) %>% summarise(freq = n())","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"5e95070d23b8b2f6feb6293751995541e270b70a"},"cell_type":"code","source":"prop.table(table(full$Sex,full$Survived),1) #여자들이 생존할 확률이 높음","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"02c28c80403f5646b4f84a20761034a595d4cf6a"},"cell_type":"code","source":"# 성별 막대그래프\nsex.p1 <- full %>% \n  dplyr::group_by(Sex) %>% \n  summarize(N = n()) %>% \n  ggplot(aes(Sex, N)) +\n  geom_col() +\n  geom_text(aes(label = N), size = 5, vjust = 1.2, color = \"#FFFFFF\") + \n  ggtitle(\"Bar plot of Sex\") +\n  labs(x = \"Sex\", y = \"Count\")\n\n# 성별에 따른 생존률 막대그래프\nsex.p2 <- full%>%\n  filter(!is.na(Survived)) %>%\n  ggplot(aes(factor(Sex), fill = factor(Survived))) +\n  geom_bar(position = \"fill\") + \n  scale_y_continuous(labels = percent) +\n  scale_fill_brewer(palette = \"Set1\") +  # palette에 어떤색 넣을지 지정\n   # 일정한 간격으로 x축과 y축 설정 : scale_x_continuous(breaks=seq())\n  # 분석가 마음대로 x축과 y축 설정 : scale_x_continuous(breaks=c())\n  ggtitle(\"Survival Rate by Sex\") + \n  labs(x = \"Sex\", y = \"Rate\")\n\ngrid.arrange(sex.p1,sex.p2,ncol=2)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"9904db658f1b0414a133b15916946b43b0fd5bf4"},"cell_type":"markdown","source":"### 3.3.2 Pclass"},{"metadata":{"trusted":true,"_uuid":"3ec75b82d676c0646a50874e1523a879ee968763"},"cell_type":"code","source":"table(full$Pclass)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"c35146d06f00948f13ad927530a273b070aff355"},"cell_type":"code","source":"prop.table(table(full$Pclass,full$Survived),1) # 더 좋은 객실 이용자일수록 생존할 확률이 높음","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"0b24ec440aa5006bae11f781cbd3bee5ec5fa79a"},"cell_type":"code","source":"# Pclass 막대그래프\npclass.p1 <- full %>% \n  dplyr::group_by(Pclass) %>% \n  summarize(N = n()) %>% \n  ggplot(aes(Pclass, N)) +\n  geom_col() +\n  geom_text(aes(label = N), size = 5, vjust = 1.2, color = \"#FFFFFF\") + \n  ggtitle(\"Bar plot of Pclass\") +\n  labs(x = \"Pclass\", y = \"Count\")\n\n# Pclass에 따른 생존률 막대그래프\npclass.p2 <- full%>%\n  filter(!is.na(Survived)) %>%\n  ggplot(aes(factor(Pclass), fill = factor(Survived))) +\n  geom_bar(position = \"fill\") + \n  scale_fill_brewer(palette = \"Set1\") +  \n  ggtitle(\"Survival Rate by Pclass\") + \n  labs(x = \"Pclass\", y = \"Rate\")\n\ngrid.arrange(pclass.p1,pclass.p2,ncol=2)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"cba644f5b2c83dafb3d048143ec6ba5a4f7d59c7"},"cell_type":"markdown","source":"### 3.3.3 Fare"},{"metadata":{"trusted":true,"_uuid":"1ed4e810e01eb836b000b9a51d580bd524260fac"},"cell_type":"code","source":"hist(full$Fare)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"c626947f9d91f9863323fd74c82261dab61ddbc8"},"cell_type":"code","source":"# fare 히스토그램\nFare.p1 <- full %>%\n  ggplot(aes(Fare)) + \n  geom_histogram(col    = \"yellow\",\n                 fill   = \"blue\", \n                 alpha  = .5) +\n  ggtitle(\"Histogram of passengers Fare\") +\n  theme(plot.title = element_text(face = \"bold\", hjust = 0.5, size = 15))\n\n# 생존여부에 따른 fare box plot\nFare.p2 <- full %>%\n  filter(!is.na(Survived)) %>% \n  ggplot(aes(Survived, Fare)) +  # x축에 생존 y축에 fare\n  # 관측치를 회색점으로 찍되, 중복되는 부분은 퍼지게 그려줍니다.\n  geom_jitter(col = \"gray\") + \n  # 상자그림 : 투명도 50% \n  geom_boxplot(alpha = .5) + \n  ggtitle(\"Boxplot of passengers Fare\") +\n  theme(plot.title = element_text(face = \"bold\", hjust = 0.5, size = 15))\n\ngrid.arrange(Fare.p1,Fare.p2,ncol=2)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"63abc287e36ada6edd2bbe8c8fbf3b6778a62d55"},"cell_type":"markdown","source":"### 3.3.4 Age"},{"metadata":{"trusted":true,"_uuid":"0b683c6730c8d0fe40327c899c2a739be7c50f87"},"cell_type":"code","source":"hist(full$Age)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"bd5f7ce139eb75cce8f782c7a2e4c707fabd8c00"},"cell_type":"code","source":"# 나이 분포 히스토그램\nage.p1 <- full %>% \n  ggplot(aes(Age)) +     # x값에 따른 y값을 그리는 것이 아니므로 축 지정 안해줘도 됨 \n  # 히스토그램 그리기, 설정\n  geom_histogram(breaks = seq(0, 80, by = 1), # 간격 설정 \n                 col    = \"red\",              # 막대 경계선 색깔 \n                 fill   = \"green\",            # 막대 내부 색깔 \n                 alpha  = .5) +               # 막대 투명도 = 50% \n  # Plot title\n  ggtitle(\"All Titanic passengers age hitogram\") +\n  theme(plot.title = element_text(face = \"bold\",    # 글씨체 \n                                  hjust = 0.5,      # Horizon(가로비율) = 0.5\n                                  size = 15, color = \"darkblue\"))\n\n# 나이에 따른 생존 분포 파악\nage.p2 <- full %>% \n  filter(!is.na(Survived)) %>%\n  ggplot(aes(Age, fill = Survived)) + \n  geom_density(alpha = .5) +   # 막대그래프가 아니고 밀도그래프니까 plot으로 축 지정하고 geom_bar 대신에 geom_density\n  ggtitle(\"Titanic passengers age density plot\") + \n  theme(plot.title = element_text(face = \"bold\", hjust = 0.5,\n                                  size = 15, color = \"darkblue\"))\n\ngrid.arrange(age.p1,age.p2,ncol=2)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"faa70c8497a872ae857640ce3155d65087662e4f"},"cell_type":"markdown","source":"### 3.3.5 Sibsp"},{"metadata":{"trusted":true,"_uuid":"7efd997c33d5027d4246c178955f6edbb0f2c0c2"},"cell_type":"code","source":"table(full$SibSp)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3f4098594834ef2f0baf063da1b771db7ea49f1f"},"cell_type":"code","source":"train %>% group_by(Survived, SibSp) %>% summarise(freq = n())","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3de42135c1ea96eabac8e3b2eeb27321424eba85"},"cell_type":"code","source":"prop.table(table(train$SibSp,train$Survived),1) #배우자,형제자매가 많을수록 생존률이 떨어짐","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"5d06adfa0e1c84f9d9c3a8252b9a4f95b8cc5270"},"cell_type":"markdown","source":"### 3.3.6 Parch"},{"metadata":{"trusted":true,"_uuid":"6f41420e01a56f56fd69d91dd0ee02cbfd4eb290"},"cell_type":"code","source":"table(train$Parch)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"6cdc539c493a9bc810d5cf53eaa98d339521797e"},"cell_type":"code","source":"train %>% group_by(Survived, Parch) %>% summarise(freq = n())","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"71f402ebb08f0b12a19ade1e4255a3a2e3139acd"},"cell_type":"code","source":"prop.table(table(train$Parch,train$Survived),1) #부모와 자녀를 1~3명 정도 동승했을 경우 생존률이 높음 ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"561ef78e47b46e26bdaa0feb537eea0425d6f7af"},"cell_type":"markdown","source":"### 3.3.7 Embarked"},{"metadata":{"trusted":true,"_uuid":"957d7678af3d3301d94ef11122e661ddbf269b15"},"cell_type":"code","source":"table(train$Embarked) #결측값 2개","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"152dcf83c08cb7afd54676f3229b5285daf1b627"},"cell_type":"code","source":"train %>% group_by(Survived, Embarked) %>% summarise(freq = n())","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8b967fd483649398862a136cc845dca20f6fc810"},"cell_type":"code","source":"prop.table(table(train$Embarked,train$Survived),1) # C에서 탑승한 인원들만 생존률이 더 높다","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"471d4f1b14eb0604694ed64ec6a2da2982b49f18"},"cell_type":"markdown","source":"# 4. 결측치 처리"},{"metadata":{"_uuid":"345652b8c0499bc69f56ed0cc1add043a0ecf3bd"},"cell_type":"markdown","source":"3.2 EDA 과정에서 결측치가 Cabin에 1014개, Age에 263개, Embarked 2개, Fare에 1개 존재한다는 것을 확인했다<br />\nCabin은 결측치 수가 너무 많아서 그냥 변수를 제거하고, 차후 파생병수 Deck을 생성할 것이다<br />\n따라서 Cabin 변수를 제외한 나머지 변수들에 대한 결측치 처리를 수행하려 한다<br />\n\nAge 결측처리는 5.feature engineering 과정에서 생성한 파생변수 title을 이용하여 처리하기 위해 5.4 Age feature engineering 과정에서 결측처리를 병행하도록 한다<br />\n\n따라서 해당 절에서는 Embarked 와 Fare의 결측처리를 우선 수행한다"},{"metadata":{"trusted":true,"_uuid":"1c34ada6e01f8fb58c9ad3b7bfa90e7c93bec48b"},"cell_type":"code","source":"colSums(is.na(full))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"fb2294a96b65c5bb2c992c02070e29e2b88af0f3"},"cell_type":"markdown","source":"## 4.1 Embarked 결측처리"},{"metadata":{"trusted":true,"_uuid":"d12f51422d9af865263bd69a5920c5108ec73249"},"cell_type":"code","source":"full[is.na(full$Embarked), ] #두개의 관측치 모두 Fare가 80이고, Pclass가 1임","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"60d7974bb9f7c2bb2acbd80c662c49510f1b3c98"},"cell_type":"code","source":"embark_fare <- full[!is.na(full$Embarked), ]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"c83c94274f5ec1442a92205584c98ed5458449d1"},"cell_type":"code","source":"ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +\n  geom_boxplot() +\n  geom_hline(aes(yintercept=80), # fare가 80에 line 생성\n             colour='red', linetype='dashed', lwd=2) +\n  scale_y_continuous()","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"29334d4260644e035f24db9a0c2a781b65582d4b"},"cell_type":"markdown","source":"fare가 80면서 Pclass가 1인 승객들 대다수는 Embark가 C다"},{"metadata":{"trusted":true,"_uuid":"f6cf9fb7c2c9358c3b5a11fbfde814051dd9e5aa"},"cell_type":"code","source":"full$Embarked[c(62, 830)] <- 'C'\nfull[c(62, 830),] ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"be090e16f28b3f3fc024820fa27ad9fd668783cb"},"cell_type":"markdown","source":"## 4.2 Fare 결측처리"},{"metadata":{"trusted":true,"_uuid":"6dbbb20523558361433aa367d8b647ac34bb3f8c"},"cell_type":"code","source":"full  %>% filter(is.na(full$Fare)) #Pclasss가 3이고, Embarked는 S임","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"6bc0d41fb1cc9246d63eb33a2158e96ecaed7f5e"},"cell_type":"code","source":"full$Fare[1044] <- median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE) #중앙값으로 결측치 처리\nfull[1044,]","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"0bfb72edad59214b71f8cf377c13c786c76c5b49"},"cell_type":"markdown","source":"# 5. Feature engineering"},{"metadata":{"_uuid":"6ef51cbb2ba5668e7b6149653f76a95f0ad515e1"},"cell_type":"markdown","source":"## 5.1 Name"},{"metadata":{"_uuid":"2d5375adfb8ddfd25bdcc275dd377c1e42dc8a59"},"cell_type":"markdown","source":"Name에서 성별과 관련된 이름만을 추출하고 범주화해서 Title 파생변수를 생성한다"},{"metadata":{"trusted":true,"_uuid":"b41e23bdf53385ca253a47c958893d982f722828"},"cell_type":"code","source":"Title <- full$Name\nTitle <- gsub(\"^.*, (.*?)\\\\..*$\", \"\\\\1\", Title) # 정규표현식\nfull$Title <- Title\nunique(full$Title)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"a7cbdff4871903da13d32c3abbc80d52a6482bfe"},"cell_type":"markdown","source":"이 title이라는 파생변수를 그대로 사용할 경우 모델의(특히 Tree based model) 복잡도가 상당히 높아지기 때문에 범주를 줄여줘야한다.\n그 전에 descr패키지를 이용해서 각 범주별 빈도수와 비율을 확인해보겠다"},{"metadata":{"trusted":true,"_uuid":"c9d5af417fabc8855d5af7f849b39dedfe8f1736"},"cell_type":"code","source":"# 범주별 빈도수, 비율 확인 \ndescr::CrossTable(full$Title)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"ade403c8aeffac285fccbf009ca0f8d56dd99451"},"cell_type":"code","source":"# 5개 범주로 단순화 시키는 작업 \nfull <- full %>%\n  # \"%in%\" 대신 \"==\"을 사용하게되면 Recyling Rule 때문에 원하는대로 되지 않습니다.\n  mutate(Title = ifelse(Title %in% c(\"Mlle\", \"Ms\", \"Lady\", \"Dona\"), \"Miss\", Title), # %in% 개념\n         Title = ifelse(Title == \"Mme\", \"Mrs\", Title),\n         Title = ifelse(Title %in% c(\"Capt\", \"Col\", \"Major\", \"Dr\", \"Rev\", \"Don\",\n                                     \"Sir\", \"the Countess\", \"Jonkheer\"), \"Officer\", Title),\n         Title = factor(Title))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"294e8471224baeb42179651bb51f687c95fb3108"},"cell_type":"code","source":"# 파생변수 생성 후 각 범주별 빈도수, 비율 확인 \ndescr::CrossTable(full$Title) # 5개의 범주로 축소","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"90d90de2d3a25b2390afa82acb1a912d9052e69f"},"cell_type":"markdown","source":"## 5.2 Sex"},{"metadata":{"_uuid":"d1127aa9d06be85d9c64405ab11d5b0e72c838bc"},"cell_type":"markdown","source":"성별을 더미화한다"},{"metadata":{"trusted":true,"_uuid":"1ad4e6356cdb93dad7d929b19293551ec4c18311"},"cell_type":"code","source":"full$Sex <- ifelse(full$Sex == \"male\" ,0 , 1)\nfull$Sex <- as.factor(full$Sex)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"a0058683c746ef3d3f90357fd4fdd72b59046a44"},"cell_type":"markdown","source":"## 5.3 Fsize"},{"metadata":{"_uuid":"3d113ee95d4e9f1808c6ade0535ad541179ea0ac"},"cell_type":"markdown","source":"Sibsp와 Parch를 이용하여 Fsize 파생변수를 생성한다"},{"metadata":{"trusted":true,"_uuid":"b08905723593513066b7bcd366e9e44d520fdbf4"},"cell_type":"code","source":"full$Fsize <- full$SibSp + full$Parch + 1\ntable(full$Fsize)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3d42211a85e124f8bc7d6aab282d85a5c54c7454"},"cell_type":"code","source":"# Fsize에 따른 생존율 시각화\nFsize.p1 <- full%>%\n  filter(!is.na(Survived)) %>%\n  ggplot(aes(Fsize, fill = Survived)) +\n  geom_bar(position = \"fill\") + \n  scale_y_continuous(labels = percent) +\n  scale_x_continuous(breaks=c(1:11)) +\n  scale_fill_brewer(palette = \"Set1\") +  # palette에 어떤색 넣을지 지정\n  # 일정한 간격으로 x축과 y축 설정 : scale_x_continuous(breaks=seq())\n  # 분석가 마음대로 x축과 y축 설정 : scale_x_continuous(breaks=c())\n  ggtitle(\"Survival Rate by Fsize\") + \n  labs(x = \"Fsize\", y = \"Rate\")\n\nFsize.p1\n\n\n\n#ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +\n#  geom_bar(stat='count', position='fill') +   #position = 'dodge', 'fill' 구분\n#  scale_x_continuous(breaks=c(1:11)) +\n#  labs(x = 'Family Size', y = 'Rate') \n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"3d4425c7b5c9ef3a866d1ffaae2496a8ac93e5d1"},"cell_type":"code","source":"# 범주화\nfull$Familysize[full$Fsize == 1] <- 'single'\nfull$Familysize[full$Fsize < 5 & full$Fsize > 1] <- 'small'\nfull$Familysize[full$Fsize > 4] <- 'large'\n\nfull$Familysize <- as.factor(full$Familysize)\ntable(full$Familysize)","execution_count":null,"outputs":[]},{"metadata":{"scrolled":false,"trusted":true,"_uuid":"8003c08ca6f5ab4cc0b8f521e47a0eae6222a368"},"cell_type":"code","source":"# 범주화 후 Familiysize에 따른 생존율 시각화\nggplot(full[1:891,], aes(x = Familysize, fill = Survived)) +\n  geom_bar(position = 'fill') +\n  ggtitle(\"Survival Rate by Familysize\")\n  labs(x=\"Familysize\", y=\"Rate\")\n","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"cf9e0b6bba37758e442a99abf94185a596e7ab19"},"cell_type":"markdown","source":"## 5.4 Cabin"},{"metadata":{"trusted":true,"_uuid":"44d0c3b4d0aecbd32eb92e99c77b9200cac5b2c6"},"cell_type":"code","source":"full$Cabin[1:28]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4ee0ade72dfe299a6868489b90f5fdfc6f50f061"},"cell_type":"code","source":"strsplit(full$Cabin[2], NULL)[[1]]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"cf3a90010b94c261dfe9f3ef0fa1381583988375"},"cell_type":"code","source":"full$Deck<-factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"72c56ee6dadd55849b494da2c288550ff2628006"},"cell_type":"code","source":"str(full)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"ba2a90cdd3fc6f3c1ad28fc88aaab786a8a535d5"},"cell_type":"code","source":"#Cabin 변수 제거\nfull=full[,-11]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"1c5e318bc4d95c7130e627c875e6f52b92c661e5"},"cell_type":"code","source":"head(full)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"bc4ac82a0238085655a6e4c476d53e469960c51f"},"cell_type":"code","source":"levels(full$Deck)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"19ee74d2547c5f892d848e8e9bf8d29bfe26216d"},"cell_type":"code","source":"full$Deck[is.na(full$Deck)] <- \"U\"\n\ncabin=full %>%filter(!is.na(full$Survived)& full$Deck!='U')\n\nggplot(cabin,aes(x=Deck, fill=factor(Survived), na.rm=TRUE)) +\n        geom_bar(stat='count') +\n        facet_grid(.~Pclass) +\n        labs(title=\"Survivor split by Pclass and Deck\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"6d48506e821b7d5d73d19f49b5f6b3288de13a31"},"cell_type":"code","source":"prop.table(table(full$Survived[(!is.na(full$Survived)&full$Deck!='U')], full$Deck[(!is.na(full$Survived)&full$Deck!='U')]),2)*100","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"10338c31f77e598d174184925cc86a0ec4340781"},"cell_type":"markdown","source":"## 5.5 Age"},{"metadata":{"_uuid":"275f19796c1593777c5693a33f1c3eb3b5188ef3"},"cell_type":"markdown","source":"Age의 결측처리와 변수 가공을 수행한다"},{"metadata":{"_uuid":"a7ece5a08478ff84239eba48bf0cc0be0dcf155c"},"cell_type":"markdown","source":"### 5.5.1 Age 결측처리"},{"metadata":{"_uuid":"fac2c063fc64208d240456d133118722d336c9c5"},"cell_type":"markdown","source":"#### Sex에 따른 Age 탐색"},{"metadata":{"trusted":true,"_uuid":"d7d6e7b2b30c112b8099e798fbd53d7fefd88daf"},"cell_type":"code","source":"age.sex <- full %>% \n  ggplot(aes(Age, fill = Sex)) + \n  geom_density(alpha = .5) +  \n  ggtitle(\"Titanic passengers Age density plot\") + \n  theme(plot.title = element_text(face = \"bold\", hjust = 0.5,\n                                  size = 15, color = \"darkblue\"))\nage.sex","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"13ab985511b4421dcc0243f783111f92c9c7f606"},"cell_type":"markdown","source":"#### Pclass에 따른 Age 탐색"},{"metadata":{"trusted":true,"_uuid":"f61a649502d19bc2a8ef92f55cc4eccd979bd770"},"cell_type":"code","source":"age.pclass <- full %>% \n  ggplot(aes(Age, fill = Pclass)) + \n  geom_density(alpha = .5) +  \n  ggtitle(\"Titanic passengers Age density plot\") + \n  theme(plot.title = element_text(face = \"bold\", hjust = 0.5,\n                                  size = 15, color = \"darkblue\"))\nage.pclass","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"309e8b2fe8aa5f7f6d2c2977e32de91296effc9d"},"cell_type":"markdown","source":"#### Title에 따른 Age 탐색"},{"metadata":{"trusted":true,"_uuid":"6881b133206551b3730dc4cc8c8c1baa5243bafd"},"cell_type":"code","source":"age.title <- full %>% \n  ggplot(aes(Age, fill = Title)) + \n  geom_density(alpha = .5) +  \n  ggtitle(\"Titanic passengers Age density plot\") + \n  theme(plot.title = element_text(face = \"bold\", hjust = 0.5,\n                                  size = 15, color = \"darkblue\"))\nage.title","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"4f1af75b8a0bbfe01f595273f3a8a9a58708d768"},"cell_type":"markdown","source":"title에 따른 결측처리 방법을 선택한다\n각 분포가 정규분포라고 보기 힘드므로 중앙값을 사용한다"},{"metadata":{"trusted":true,"_uuid":"12efe1209a3da3972008d0eeecce96fd9a93b6d6"},"cell_type":"code","source":"plot(full$Title)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9977bbfa1bccd0f7139dae3c9335e52a7df6cc15"},"cell_type":"code","source":"# title별 Median Age를 통한 결측값 처리\nfull=as.data.frame(full)\nsummaryBy(Age ~ Title, data=full, FUN=c(mean, sd, median), na.rm=TRUE) ## ddply로도","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"c6d37453a19d44c7a3a79630185aa993726c7811"},"cell_type":"code","source":"full$Age <- ifelse((is.na(full$Age) & full$Title == 'Master'), 4, full$Age)\nfull$Age <- ifelse((is.na(full$Age) & full$Title == 'Miss'), 22, full$Age)\nfull$Age <- ifelse((is.na(full$Age) & full$Title == 'Mr'), 29, full$Age)\nfull$Age <- ifelse((is.na(full$Age) & full$Title == 'Mrs'), 35, full$Age)\nfull$Age <- ifelse((is.na(full$Age) & full$Title == 'Officer'), 48, full$Age)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"31b31e167a87bfc9413a6ab78c4205f894fe0e15"},"cell_type":"markdown","source":"### 5.5.2 Age 변수 가공"},{"metadata":{"trusted":true,"_uuid":"2eb06e8a232a408a8456356dfa034a9be9ee2925"},"cell_type":"code","source":"hist(full$Age, freq=F, main='Age',col='lightgreen', ylim=c(0,0.05))\n\n# child : 18세 이하\n# adult : 19세 이상 64세 이하\n# senior : 65세 이상\n\nfull$Age <- ifelse(full$Age <= 18, \"child\",\n                   ifelse(full$Age > 18 & full$Age <= 64, \"adult\",\"senior\"))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"31f96b26d1ee35b79d6b8892700bcacf3dac0775"},"cell_type":"markdown","source":"## 5.6 Ticket"},{"metadata":{"_uuid":"64b4b860b05e46fdf2a98fd0338aa312854da92c"},"cell_type":"markdown","source":"Ticket 변수를 이용하여 GroupSize 파생변수를 생성한다"},{"metadata":{"trusted":true,"_uuid":"29e182720a142eb094c2377453c50480d6812a19"},"cell_type":"code","source":"length(unique(full$Ticket))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"bf3919a28fdadfbaf704f1af29d28668af9f0a82"},"cell_type":"code","source":"head(full$Ticket)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"5889a6acc7281cbf959766e80f46f380fea03388"},"cell_type":"code","source":"full  %>%  arrange(Ticket) #같은 티켓인데도 불구하고 Family가 single, 친구등과 같이 온것으로 유추","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"2e6d1e2d8f635a62bab5282b6afa55103a1b1d9c"},"cell_type":"code","source":"full$TravelGroup <- NA","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"20c3d2add4bb342c1ead2eaeca6ab76b07503bbe"},"cell_type":"code","source":"full <- (transform(full, TravelGroup = match(Ticket, unique(Ticket))))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"8d10eb8eb9a48dc5973878e38b4b2dfb0d4a642d"},"cell_type":"code","source":"full <- full %>% \n            group_by(TravelGroup) %>% \n            mutate(GroupSize = n()) %>%\n            ungroup()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f1e2f1b81277f89314c6ad0e8c5931a3b3f65c28"},"cell_type":"code","source":"full  %>% arrange(Ticket)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"db9bfbc9dee3d7ddaa3ce0dd782615c667baba50"},"cell_type":"markdown","source":"# 6. Predict"},{"metadata":{"_uuid":"909a7fdc3622e3fdbf7cf677130ec78b6e79c6e7"},"cell_type":"markdown","source":"## 6.1 변수선택\nPclass, Sex, Age, Fare, Embarked, Title, Fsize, GroupSize, Deck"},{"metadata":{"trusted":true,"_uuid":"d57c962fec6d34e3da99972574c835494a08d77c"},"cell_type":"code","source":"str(full)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9b0b9e5b8a7c14ac48daf936013ffc324ad04f0c"},"cell_type":"code","source":"#범주화 안된 변수들 범주화 처리\nfactor_vars <- c('Age','GroupSize')\n\nfull[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))\n                            \n#Fare log변환\nfull$Fare=log(full$Fare+1)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4b1762baf0186ca97f9de9bf846e6410c2832071"},"cell_type":"code","source":"train <- full[1:891,]\ntest <- full[892:1309,]","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"6e1cd8c1f3a0aa430ae0163572216c5c2be35107"},"cell_type":"code","source":"colSums(is.na(full))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"24132c995e79a04a725ec80512bce9929a9143ac"},"cell_type":"markdown","source":"## 6.2 랜덤포레스트"},{"metadata":{"trusted":true,"_uuid":"d70a76c798459f8f16b48381854f6fbd2d19741b"},"cell_type":"code","source":"set.seed(123)\n\nrf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + Fare+\n                                            Embarked + Title + \n                                            Familysize+GroupSize,\n                                            data = train)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"62ef809f5558742586b93756055fd70745b404bf"},"cell_type":"code","source":"plot(rf_model, ylim=c(0,0.36))\nlegend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"2a56ec5598dd75b5e66786781bab5da58f66878e"},"cell_type":"code","source":"#변수 중요도\nimportance    <- importance(rf_model)\nvarImportance <- data.frame(Variables = row.names(importance), \n                            Importance = round(importance[ ,'MeanDecreaseGini'],2))\n\nrankImportance <- varImportance %>%\n  mutate(Rank = paste0('#',dense_rank(desc(Importance))))\n\nggplot(rankImportance, aes(x = reorder(Variables, Importance), \n    y = Importance, fill = Importance)) +\n  geom_bar(stat='identity') + \n  geom_text(aes(x = Variables, y = 0.5, label = Rank),\n    hjust=0, vjust=0.55, size = 4, colour = 'red') +\n  labs(x = 'Variables') +\n  coord_flip()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"405429b696dc75aa45a4097ba0ca51eb34d981ec"},"cell_type":"code","source":"prediction <- predict(rf_model, test)\n\nsolution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)\n\n# write.csv(solution, file = 'rf_mod_Solution.csv', row.names = F)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"f01910ae5dcc8bd13049e81a986edb930320c705"},"cell_type":"code","source":"rf_model","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"cb53d0349a2696e19b61ba7e0f2c5b9e607c0d7a"},"cell_type":"markdown","source":"## 6.3 XGBOOST"},{"metadata":{"_uuid":"f41fa3f4a3e9b030a34441f26299b59e7a912c5b"},"cell_type":"markdown","source":"### 6.3.1 교차검증"},{"metadata":{"trusted":true,"_uuid":"392a68970076add52d48f1cab22ae7ce05db765e"},"cell_type":"code","source":"library(caret)\nlibrary(Matrix)\nlibrary(xgboost)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4d4b885453142bc22a973938ad469f0d5039f8d6"},"cell_type":"code","source":"train.control = trainControl(method = \"cv\",\n                              number = 5,\n                              savePredictions = TRUE)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"24fd03f85e6c87463810abfab437cc50a83a2ab0"},"cell_type":"code","source":"tune.grid = expand.grid(eta = c(0.075, 0.1),\n                         nrounds = c(50, 100),\n                         max_depth = 3:8,\n                         min_child_weight = c(2.25, 2.5),\n                         colsample_bytree = c(0.4, 0.5),\n                         gamma = 0,\n                         subsample = 1)","execution_count":null,"outputs":[]},{"metadata":{"scrolled":true,"trusted":true,"_uuid":"76ce8b3a4bf651ab88b705c1c103c38457f6af93"},"cell_type":"code","source":"tune.grid","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"5b8ed327c4c9f3e3088190e5a2b0e9e6de9602d3"},"cell_type":"code","source":"caret.cv = train(Survived ~  Pclass + Sex + Age + Fare+Embarked + Title + Familysize+GroupSize, \n                  data = train,\n                  method = \"xgbTree\",\n                  tuneGrid = tune.grid,\n                  trControl = train.control)\npreds_XG = predict(caret.cv, test)\nSurvivedXG = preds_XG","execution_count":null,"outputs":[]},{"metadata":{"scrolled":true,"trusted":true,"_uuid":"933be34bb8dfd12dec35e24c85c4b058b809644b"},"cell_type":"code","source":"caret.cv$best","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"de7988891316d5353fb1d9f7b09233b022431dc5"},"cell_type":"code","source":"caret.cv","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"a92b0c76b388615aae3a6022eb0c59146c60c119"},"cell_type":"code","source":"caret.cv$finalModel","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"933041f8794dfda7aca720a1b3c9c9b081d74163"},"cell_type":"markdown","source":"### 6.3.2 최종모델 생성"},{"metadata":{"trusted":true,"_uuid":"03a82e831ecf99f03611aa05aad6f062635c58c7"},"cell_type":"code","source":"full2=full  %>%  select(-c(PassengerId,Name,SibSp,Parch,Ticket,Fsize,Deck,TravelGroup))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"bcd6b87cbf06bec0bdc01a7d76cef3c8225ec8d8"},"cell_type":"code","source":"train = full2[1:891,]\ntest = full2[892:1309,]\n\ntrain$Survived=as.numeric(train$Survived)-1","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"4f287ab74ad2854ee4c4f9dd213d6842bc72a045"},"cell_type":"code","source":"options(na.action='na.pass')\ntrainm <- sparse.model.matrix(Survived ~ ., data = train)\ntrain_label <- train$Survived\ntrain_matrix <- xgb.DMatrix(data = trainm, label=train_label)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"1d00afa7b705c4b15a5b6205e92cfe7fbc1cd995"},"cell_type":"code","source":"testm <- sparse.model.matrix(Survived ~ ., data = test)\ndtest <- xgb.DMatrix(data = as.matrix(testm))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"e0013fa5c13fa09765d92445fb77258d9cc43f94"},"cell_type":"code","source":"default_param<-list(\n        objective = \"binary:logistic\",\n        booster = \"gbtree\",\n        eta=0.075,\n        gamma=0,\n        max_depth=8, \n        min_child_weight=2.25,\n        subsample=1,\n        colsample_bytree=0.5\n)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"b2c6d852a263e1f6973b5af4eaa837e83cf6b48b"},"cell_type":"code","source":"xgb.model=xgb.train(data=train_matrix,\n                    params=default_param,\n                    nrounds=100,\n                    vedose=1)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"16a63f755bfc0baf72607ac344d8a1606799e077"},"cell_type":"code","source":"XGB_pred <- predict(xgb.model, dtest)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"422af6fa68870ed68c7d24c006bff1e3d84e7d5b"},"cell_type":"code","source":"XGB_pred <- ifelse(XGB_pred>=0.5,1,0)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"24f077aa907b4d7a2bd290b45c6523289acba2ba"},"cell_type":"code","source":"# Get the trained model\nmodel <- xgb.dump(xgb.model, with_stats=TRUE)\n\n# Get the feature real names\nnames <- dimnames(train_matrix)[[2]]\n\n# Compute feature importance matrix\nimportance_matrix <- xgb.importance(names, model=xgb.model)[0:20] # View top 20 most important features\n\n# Plot\nxgb.plot.importance(importance_matrix)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"1426492e684be5ad549e659f8e61ce7007c301c4"},"cell_type":"code","source":"test2 <- full[892:1309,]\nsolution <- data.frame(PassengerID = test2$PassengerId, Survived = XGB_pred)\n\n# write.csv(solution, file = 'xg_mod_Solution.csv', row.names = F)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"9147aec94cbbe8fb6c062eaf04da5b373c9c0b46"},"cell_type":"code","source":"table(prediction,XGB_pred)","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"codemirror_mode":"r","file_extension":".r","mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.5.1"}},"nbformat":4,"nbformat_minor":1}