
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> # This R script will run on our backend. You can write arbitrary code here!
> 
> # Many standard libraries are already installed, such as randomForest
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.
> 
> # Load packages
> library('ggplot2') # visualization

Attaching package: ‘ggplot2’

The following object is masked from ‘package:randomForest’:

    margin

Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library('ggthemes') # visualization
> library('scales') # visualization
Warning message:
package ‘scales’ was built under R version 3.6.2 
> library('dplyr') # data manipulation

Attaching package: ‘dplyr’

The following object is masked from ‘package:randomForest’:

    combine

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> library('mice') # imputation

Attaching package: ‘mice’

The following objects are masked from ‘package:base’:

    cbind, rbind

Warning message:
package ‘mice’ was built under R version 3.6.2 
> 
> # The train and test data is stored in the ../input directory
> train <- read.csv('../input/train.csv', stringsAsFactors = F)
> test  <- read.csv('../input/test.csv', stringsAsFactors = F)
> 
> full  <- bind_rows(train, test) # bind training & test data
> 
> # check data
> str(full)
'data.frame':	1309 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : chr  "male" "female" "female" "female" ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  "" "C85" "" "C123" ...
 $ Embarked   : chr  "S" "C" "S" "S" ...
> 
> # Grab title from passenger names
> full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
> # Show title counts by sex
> table(full$Sex, full$Title)
        
         Capt Col Don Dona  Dr Jonkheer Lady Major Master Miss Mlle Mme  Mr Mrs
  female    0   0   0    1   1        0    1     0      0  260    2   1   0 197
  male      1   4   1    0   7        1    0     2     61    0    0   0 757   0
        
          Ms Rev Sir the Countess
  female   2   0   0            1
  male     0   8   1            0
> 
> # Titles with very low cell counts to be combined to "rare" level
> rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', 
+                 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
> 
> # Also reassign mlle, ms, and mme accordingly
> full$Title[full$Title == 'Mlle']        <- 'Miss' 
> full$Title[full$Title == 'Ms']          <- 'Miss'
> full$Title[full$Title == 'Mme']         <- 'Mrs' 
> full$Title[full$Title %in% rare_title]  <- 'Rare Title'
> 
> # Show title counts by sex again
> table(full$Sex, full$Title)
        
         Master Miss  Mr Mrs Rare Title
  female      0  264   0 198          4
  male       61    0 757   0         25
> 
> # Finally, grab surname from passenger name
> full$Surname <- sapply(full$Name,  
+                       function(x) strsplit(x, split = '[,.]')[[1]][1])
> 
> cat(paste('We have <b>', nlevels(factor(full$Surname)), '</b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.'))
We have <b> 875 </b> unique surnames. I would be interested to infer ethnicity based on surname --- another time.> 
> # Create a family size variable including the passenger themselves
> full$Fsize <- full$SibSp + full$Parch + 1
> 
> # Create a family variable 
> full$Family <- paste(full$Surname, full$Fsize, sep='_')
> 
> 
> # Discretize family size
> full$FsizeD[full$Fsize == 1] <- 'singleton'
> full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'
> full$FsizeD[full$Fsize > 4] <- 'large'
> 
> # Show family size by survival using a mosaic plot
> mosaicplot(table(full$FsizeD, full$Survived), main='Family Size by Survival', shade=TRUE)
> 
> 
> 
> # We can inspect the train data. The results of this are printed in the log tab below
> #summary(train)
> 
> # Here we will plot the passenger survival by class
> train$Survived <- factor(train$Survived, levels=c(1,0))
> levels(train$Survived) <- c("Survived", "Died")
> train$Pclass <- as.factor(train$Pclass)
> levels(train$Pclass) <- c("1st Class", "2nd Class", "3rd Class")
> 
> #png("1_survival_by_class.png", width=800, height=600)
> #mosaicplot(train$Pclass ~ train$Survived, main="Passenger Survival by Class",
> #           color=c("#8dd3c7", "#fb8072"), shade=FALSE,  xlab="", ylab="",
> #           off=c(0), cex.axis=1.4)
> dev.off()
null device 
          1 
> 
> proc.time()
   user  system elapsed 
  0.726   0.076   0.800 
