{"cells":[{"metadata":{"_uuid":"43ab97550ad46fd3073b73429802a733004c32d4","_cell_guid":"4896d028-3efd-dadb-285e-c3c28f7bb214"},"cell_type":"markdown","source":"> Testing the notebook on Kaggle\nLoading libraries"},{"metadata":{"_execution_state":"idle","_uuid":"6b8320c0f7e7d644fee3320d999492c9452a9039","_cell_guid":"eda1db48-63a2-6dc7-6bd8-2d8db5380719","trusted":false},"cell_type":"code","source":"library('ggplot2') # visualization\nlibrary('ggthemes') # visualization\nlibrary('scales') # visualization\nlibrary('dplyr') # data manipulation\nlibrary('mice') # imputation\nlibrary('randomForest') # classification algorithm","execution_count":null,"outputs":[]},{"metadata":{"_execution_state":"idle","_uuid":"6ce87b42b60c6c25a02003b7ac5c7ee102bcd62d"},"cell_type":"markdown","source":"Just putting some break on it"},{"metadata":{"_execution_state":"idle","_uuid":"93e88475e689a1e800ff26d43ab6acab42fe682b","trusted":false},"cell_type":"code","source":"train <- read.csv('../input/train.csv', stringsAsFactors = F)\ntest  <- read.csv('../input/test.csv', stringsAsFactors = F)\n\nfull  <- bind_rows(train, test) # bind training & test data\n\n# check data\nstr(train)\nstr(test)","execution_count":null,"outputs":[]},{"metadata":{"_execution_state":"idle","_uuid":"fb69d6031142236d80e93b8d3e6297cf356f1867","trusted":false},"cell_type":"code","source":"table(train$Embarked)\nfull$Embarked[c(62, 830)] <- 'C'\nfull$Fare[1044] <- median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE)\nsum(is.na(full$Age))","execution_count":null,"outputs":[]},{"metadata":{"_execution_state":"idle","_uuid":"aad6bce3633390843ba4049148e712fd3a6c98d6","trusted":false},"cell_type":"code","source":"# Make variables factors into factors\nfactor_vars <- c('PassengerId','Pclass','Sex','Embarked')\n\nfull[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))\n\n# Set a random seed\nset.seed(129)\n\n# Perform mice imputation, excluding certain less-than-useful variables:\nmice_mod <- mice(full[, !names(full) %in% c('PassengerId','Name','Ticket',\n                                            'Cabin','Survived')], method='rf') \nmice_output <- complete(mice_mod)","execution_count":null,"outputs":[]},{"metadata":{"_execution_state":"idle","_uuid":"e91b141b8d097eb162bfeabc24263c3dac24da5a","trusted":false},"cell_type":"code","source":"head(mice_output)","execution_count":null,"outputs":[]},{"metadata":{"_execution_state":"idle","_uuid":"6014c261d0b8aed3e4c34328142ec88e91d1d963","trusted":false},"cell_type":"code","source":"# Plot age distributions\npar(mfrow=c(1,2))\nhist(full$Age, freq=F, main='Age: Original Data', \n  col='darkgreen')\nhist(mice_output$Age, freq=F, main='Age: MICE Output', \n  col='lightgreen')\n\n# Replace Age variable from the mice model.\nfull$Age <- mice_output$Age\n\n# Show new number of missing Age values\nsum(is.na(full$Age))","execution_count":null,"outputs":[]},{"metadata":{"_execution_state":"idle","_uuid":"2fbd16346df4c4a9e575184b024664db98c41070","trusted":false},"cell_type":"code","source":"md.pattern(full)","execution_count":null,"outputs":[]},{"metadata":{"_execution_state":"idle","_uuid":"8370ed1f85b1a9631ed5b3b2b321b8d39bf467b1","trusted":false},"cell_type":"code","source":"train <- full[1:891,]\ntest <- full[892:1309,]\n# Set a random seed\nset.seed(754)\n\n# Build the model (note: not all possible variables are used)\nrf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + \n                                            Fare + Embarked,\n                                            data = train)\n\n# Show model error\nplot(rf_model, ylim=c(0,0.36))\nlegend('topright', colnames(rf_model$err.rate), col=1:3, fill=1:3)","execution_count":null,"outputs":[]},{"metadata":{"_execution_state":"idle","_uuid":"3f8d1ea43a64e0eaff7e30a5950424d8dd88cb9f","trusted":false},"cell_type":"code","source":"head(rf_model)","execution_count":null,"outputs":[]},{"metadata":{"_execution_state":"idle","_uuid":"203454da4111f49379d9d2cdea2439db50f28698","trusted":false},"cell_type":"code","source":"# Get importance\nimportance    <- importance(rf_model)\nvarImportance <- data.frame(Variables = row.names(importance), \n                            Importance = round(importance[ ,'MeanDecreaseGini'],2))\n\n# Create a rank variable based on importance\nrankImportance <- varImportance %>%\n  mutate(Rank = paste0('#',dense_rank(desc(Importance))))\n\n# Use ggplot2 to visualize the relative importance of variables\nggplot(rankImportance, aes(x = reorder(Variables, Importance), \n    y = Importance, fill = Importance)) +\n  geom_bar(stat='identity') + \n  geom_text(aes(x = Variables, y = 0.5, label = Rank),\n    hjust=0, vjust=0.55, size = 4, colour = 'red') +\n  labs(x = 'Variables') +\n  coord_flip() + \n  theme_few()","execution_count":null,"outputs":[]},{"metadata":{"_execution_state":"idle","_uuid":"bc8a2a8ebc7ffdee0bd08d9c9c77967a0a181fe8","trusted":false},"cell_type":"code","source":"# Predict using the test set\nprediction <- predict(rf_model, test)\n\n# Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)\nsolution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)\n\n# Write the solution to file\nwrite.csv(solution, file = 'rf_mod_Solution.csv', row.names = F)","execution_count":null,"outputs":[]}],"metadata":{"_is_fork":false,"_change_revision":0,"kernelspec":{"language":"R","name":"ir","display_name":"R"},"language_info":{"name":"R","pygments_lexer":"r","file_extension":".r","mimetype":"text/x-r-source","version":"3.4.0","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}