
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## ----message=FALSE---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #Loading the necessary libraries
> library(ggplot2)
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library(lattice)
> library(caret)
> library(ranger)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> library(e1071)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #Reading the train and the test datasets.
> train <- read.csv("../input/train.csv",stringsAsFactors = FALSE)
> test <- read.csv("../input/test.csv", stringsAsFactors = FALSE)
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #Checking the structure of the dataset
> str(train)
'data.frame':	891 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : chr  "male" "female" "female" "female" ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  "" "C85" "" "C123" ...
 $ Embarked   : chr  "S" "C" "S" "S" ...
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #Examining the summary of the dataset
> summary(train)
  PassengerId       Survived          Pclass          Name          
 Min.   :  1.0   Min.   :0.0000   Min.   :1.000   Length:891        
 1st Qu.:223.5   1st Qu.:0.0000   1st Qu.:2.000   Class :character  
 Median :446.0   Median :0.0000   Median :3.000   Mode  :character  
 Mean   :446.0   Mean   :0.3838   Mean   :2.309                     
 3rd Qu.:668.5   3rd Qu.:1.0000   3rd Qu.:3.000                     
 Max.   :891.0   Max.   :1.0000   Max.   :3.000                     
                                                                    
     Sex                 Age            SibSp           Parch       
 Length:891         Min.   : 0.42   Min.   :0.000   Min.   :0.0000  
 Class :character   1st Qu.:20.12   1st Qu.:0.000   1st Qu.:0.0000  
 Mode  :character   Median :28.00   Median :0.000   Median :0.0000  
                    Mean   :29.70   Mean   :0.523   Mean   :0.3816  
                    3rd Qu.:38.00   3rd Qu.:1.000   3rd Qu.:0.0000  
                    Max.   :80.00   Max.   :8.000   Max.   :6.0000  
                    NA's   :177                                     
    Ticket               Fare           Cabin             Embarked        
 Length:891         Min.   :  0.00   Length:891         Length:891        
 Class :character   1st Qu.:  7.91   Class :character   Class :character  
 Mode  :character   Median : 14.45   Mode  :character   Mode  :character  
                    Mean   : 32.20                                        
                    3rd Qu.: 31.00                                        
                    Max.   :512.33                                        
                                                                          
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #Converting Survived to a factor 
> train$Survived <- factor(train$Survived)
> 
> #Converting Pclass to a factor
> train$Pclass <- factor(train$Pclass)
> 
> #Converting Sex to a factor
> train$Sex  <- factor(train$Sex)
> 
> #Converting SibSp to a factor
> train$SibSp <- factor(train$SibSp)
> 
> #Converting Parch to a factor
> train$Parch <- factor(train$Parch)
> 
> #Converting Embarked to a factor
> train$Embarked <- factor(train$Embarked, ordered = FALSE)
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> head(train$Name)
[1] "Braund, Mr. Owen Harris"                            
[2] "Cumings, Mrs. John Bradley (Florence Briggs Thayer)"
[3] "Heikkinen, Miss. Laina"                             
[4] "Futrelle, Mrs. Jacques Heath (Lily May Peel)"       
[5] "Allen, Mr. William Henry"                           
[6] "Moran, Mr. James"                                   
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> convert_name <- function(name) {
+   
+   if (grepl("\\(.*\\)", name)) {           # women: take name from inside parentheses
+     gsub("^.*\\((.*)\\)$", "\\1", name)
+   } else {                                # men: take name before comma and after title
+     gsub("^(.*),\\s[a-zA-Z\\.]*\\s(.*)$", "\\2 \\1", name)
+   }
+ }
> #grepl() searches for pattern and is gives a logical result. 
> #gsub(pattern, replacement, string) is used to replace every occurence of pattern in the string with the replacement.  
> 
> ###The pattern is as :
> #  * ^        denotes starting of pattern
> #  * .*       denotes occurence of any character zero or more times.
> #  * \\(      denotes that we are actually looking for '(' in the string. Names of females of the dataset are inside paranthesis.
> #  * (.*)     denotes a back-reference.
> #  * \\)      denotes we actually want to look for ) in the string.
> #  * \\1      denotes first back-reference. For every occurence of (.*), there is a back-reference 
> #  * \\s      matches a space
> # * [a-zA-z] This sprecifies character ranges. All characters in a-z and A-Z are matched.
> #  * $        denotes end of string.
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> pass_names <- train$Name
> 
> clean_pass_names <- vapply(pass_names, FUN = convert_name,
+                            FUN.VALUE = character(1), USE.NAMES = FALSE)
> 
> train$Name <-  clean_pass_names
> 
> #The function is applied to pass_names (The vector that contains all the names of the train dataset) via vapply so as to use convert_names for all names in the dataset.
> 
> head(train$Name)
[1] "Owen Harris Braund"     "Florence Briggs Thayer" "Laina Heikkinen"       
[4] "Lily May Peel"          "William Henry Allen"    "James Moran"           
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train %>% 
+     ggplot(aes(x = Pclass, fill = Survived)) + 
+           geom_bar()
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> tab <- table(train$Pclass, train$Survived)
> prop.table(tab,1)
   
            0         1
  1 0.3703704 0.6296296
  2 0.5271739 0.4728261
  3 0.7576375 0.2423625
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train %>%
+       ggplot(aes(x = Sex, fill = Survived)) + 
+             geom_bar(stat = "count", position = "fill")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> tab <- table(train$Sex, train$Survived)
> prop.table(tab,1)
        
                 0         1
  female 0.2579618 0.7420382
  male   0.8110919 0.1889081
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train %>%
+       ggplot(aes(x = Age, fill = Survived)) + 
+             geom_histogram()
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Warning message:
Removed 177 rows containing non-finite values (stat_bin). 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train %>%
+   filter(Embarked %in% c("S","C","Q")) %>%
+   ggplot() +
+   geom_bar(aes(Embarked, fill = Pclass), position = "dodge") +
+   facet_grid(~ Survived)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> tab <- table(train$Embarked, train$Survived)
> prop.table(tab,1)
   
            0         1
    0.0000000 1.0000000
  C 0.4464286 0.5535714
  Q 0.6103896 0.3896104
  S 0.6630435 0.3369565
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> sum(is.na(train$Age))
[1] 177
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #An example using median imputation
> #train(x,y, preProcess = "medianImpute")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #Choosing independent columns 
> x <- train[,c("Age","Pclass","Sex","Embarked")]
> #Choosing the dependent column
> y <- train$Survived
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #Set a random seed
> set.seed(123)
> 
> #the method "ranger" here is a fast alternative of randomForest.
> #trainControl is used to define cross-validation.
> model<- train(x = x,y = y,preProcess = "medianImpute", method = "ranger", trControl = trainControl(method = "cv", number = 10))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> model
Random Forest 

891 samples
  4 predictor
  2 classes: '0', '1' 

Pre-processing: median imputation (1), ignore (3) 
Resampling: Cross-Validated (10 fold) 
Summary of sample sizes: 802, 802, 801, 801, 802, 802, ... 
Resampling results across tuning parameters:

  mtry  splitrule   Accuracy   Kappa    
  2     gini        0.8226788  0.6013932
  2     extratrees  0.8193457  0.5925639
  3     gini        0.8103059  0.5824964
  3     extratrees  0.8181713  0.5936433
  4     gini        0.8069098  0.5829613
  4     extratrees  0.8068971  0.5853519

Tuning parameter 'min.node.size' was held constant at a value of 1
Accuracy was used to select the optimal model using the largest value.
The final values used for the model were mtry = 2, splitrule = gini
 and min.node.size = 1.
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Predict using the test set
> prediction <- predict(model, test)
> 
> # Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)
> solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
> 
> # Write the solution to file
> write.csv(solution, file = 'rfSolution.csv', row.names = F)
> 
> 
> proc.time()
   user  system elapsed 
 26.404   0.525   6.862 
