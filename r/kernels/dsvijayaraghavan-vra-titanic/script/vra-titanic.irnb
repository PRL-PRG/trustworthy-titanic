{"cells":[{"metadata":{"_uuid":"051d70d956493feee0c6d64651c6a088724dca2a","_execution_state":"idle","trusted":true},"cell_type":"code","source":"## Importing packages\n\n# This R environment comes with all of CRAN and many other helpful packages preinstalled.\n# You can see which packages are installed by checking out the kaggle/rstats docker image: \n# https://github.com/kaggle/docker-rstats\n\nlibrary(tidyverse) # metapackage with lots of helpful functions\n\n## Running code\n\n# In a notebook, you can run a single code cell by clicking in the cell and then hitting \n# the blue arrow to the left, or by clicking in the cell and pressing Shift+Enter. In a script, \n# you can run code by highlighting the code you want to run and then clicking the blue arrow\n# at the bottom of this window.\n\n## Reading in files\n\n# You can access files from datasets you've added to this kernel in the \"../input/\" directory.\n# You can see the files added to this kernel by running the code below. \n\nlist.files(path = \"../input\")\n\n## Saving data\n\n# If you save any files or images, these will be put in the \"output\" directory. You \n# can see the output directory by committing and running your kernel (using the \n# Commit & Run button) and then checking out the compiled version of your kernel.","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"library(ggplot2)\nlibrary(dplyr)\nlibrary(GGally)\nlibrary(rpart)\nlibrary(rpart.plot)\nlibrary(randomForest)\n\ntest <- read.csv(\"../input/test.csv\",stringsAsFactors = FALSE)\ntrain <- read.csv(\"../input/train.csv\", stringsAsFactors = FALSE)\n\nLT=dim(train)[1]\n\n#bind the rows without considering the columns as constraint\nfull <- bind_rows(train,test)\n\n#checking the NA values\ncolSums(is.na(full)) #SURVIVED, Age and Fare having NA VALUES with count\n\ncolSums(full==\"\") #also helped to know oly NA values and empty string, \n                  #Embarked  and cabin having empty values\n\n#feed values in the embarked column \nfull$Embarked[full$Embarked == \"\"] <- \"S\" #s Has a lot values in the list\n\n# Let's see how many features we can move to factors\n\napply(full,2, function(x) length(unique(x)))\n\n\nfactor_variables <- c(\"Survived\",\"Pclass\",\"Sex\",\"Embarked\")\n\nfor (i in factor_variables) {\n  full[,i] <- as.factor(full[,i])\n}\n\nstr(full)\n\n#analysis by graph\n#sex vs survived with train dataset, sex vs survival\nggplot(data=full[1:LT,],aes(x=Sex,fill=Survived))+geom_bar()\n\n#embarked vs survival\nggplot(data = full[1:LT,],aes(x=Embarked,fill=Survived))+\n  geom_bar(position=\"fill\")+ylab(\"Frequency\")\n\nt<-table(full[1:LT,]$Embarked,full[1:LT,]$Survived)\nfor (i in 1:dim(t)[1]){\n  t[i,]<-t[i,]/sum(t[i,])*100\n}\nt\n\n#Pclass vs survival\nggplot(data = full[1:LT,],aes(x=Pclass,fill=Survived))+\n  geom_bar(position=\"fill\")+ylab(\"Frequency\")\n\n#embarked vs survival, facet_wrap with Pclass\nggplot(data = full[1:LT,],aes(x=Embarked,fill=Survived))+\n  geom_bar(position=\"fill\")+facet_wrap(~Pclass)\n\n#sibsp vs survival\nggplot(data = full[1:LT,],aes(x=SibSp,fill=Survived))+geom_bar()\n\n#Parch vs survival\nggplot(data = full[1:LT,],aes(x=Parch,fill=Survived))+geom_bar()\n\n\n#age vs survival, in histogram\nggplot(data = full[!(is.na(full[1:LT,]$Age)),],aes(x=Age,fill=Survived))+geom_histogram(binwidth =3)\n\n#Fare vs survival, in histogram\nggplot(data = full[1:LT,],aes(x=Fare,fill=Survived))+geom_histogram(binwidth =20, position=\"fill\")\n\n#Add the mean value of Fare in the NA values\nfull$Fare[is.na(full$Fare)] <- mean(full$Fare,na.rm=T)\n\nsum(is.na(full$Age))\n\n#Add the mean value of age in the NA values\n#full$Age[is.na(full$Age)] <- mean(full$Age,na.rm=T)\npredicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked,\n                       data = full[!is.na(full$Age),], method = \"anova\")\n\nfull$Age[is.na(full$Age)] <- predict(predicted_age, full[is.na(full$Age),])\n\n\n\n\n#Title column generated from the name\nfull$Title <- gsub('(.*, )|(\\\\..*)', '', full$Name)\nfull$Title[full$Title == 'Mlle']<- 'Miss' \nfull$Title[full$Title == 'Ms']<- 'Miss'\nfull$Title[full$Title == 'Mme']<- 'Mrs' \nfull$Title[full$Title == 'Lady']<- 'Miss'\nfull$Title[full$Title == 'Dona']<- 'Miss'\n\n#changed the other column values as officer\nofficer<- c('Capt','Col','Don','Dr','Jonkheer','Major','Rev','Sir','the Countess')\nfull$Title[full$Title %in% officer]<-'Officer'\n\nfull$Title<- as.factor(full$Title)\n\n#Title vs Survival\nggplot(data = full[1:LT,],aes(x=Title,fill=Survived))+geom_bar(position=\"fill\")+ylab(\"Frequency\")\n\n\n\n\n\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"#Model Prediction \ntrain_im<- full[1:LT,c(\"Survived\",\"Pclass\",\"Sex\",\"Age\",\"Fare\",\"SibSp\",\"Parch\",\"Title\")]\nind<-sample(1:dim(train_im)[1],500) # Sample of 500 out of 891\ntrain1<-train_im[ind,] # The train set of the model\ntrain2<-train_im[-ind,] # The test set of the model\n\n# Let's try to run a logistic regression\nmodel <- glm(Survived ~.,family=binomial(link='logit'),data=train1)\nsummary(model)\n\nglm(formula = Survived ~ ., family = binomial(link = \"logit\"),data = train1)\n\n#Survival Prediction\npred.train <- predict(model,train2)\npred.train <- ifelse(pred.train > 0.5,1,0)\n\nmean(pred.train==train2$Survived)\n\n#Precision and recall the model\nt1<-table(pred.train,train2$Survived)\npresicion<- t1[1,1]/(sum(t1[1,]))\nrecall<- t1[1,1]/(sum(t1[,1]))\n\npresicion\n\n\nrecall\n\n#F1 Score\nF1<- 2*presicion*recall/(presicion+recall)\n\n\n# F1 score on the initial test set is 0.871. This pretty good.\n\n# Let's run it on the test set:\n\ntest_im <- full[LT+1:1309,c(\"Pclass\",\"Sex\",\"Age\",\"SibSp\",\"Parch\",\"Fare\",\"Title\")]\n\npred.test <- predict(model,test_im)[1:418]\npred.test <- ifelse(pred.test > 0.5,1,0)\nres<- data.frame(test$PassengerId,pred.test)\nnames(res)<-c(\"PassengerId\",\"Survived\")\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"#Decision Tree Model\nmodel_dt<- rpart(Survived ~.,data=train1, method=\"class\")\nrpart.plot(model_dt)\n\n#predicting the test data\npred.train.dt <- predict(model_dt,train2,type = \"class\")\nmean(pred.train.dt==train2$Survived)\n\n\nt2<-table(pred.train.dt,train2$Survived)\n\npresicion_dt<- t2[1,1]/(sum(t2[1,]))\nrecall_dt<- t2[1,1]/(sum(t2[,1]))\npresicion_dt\n\nrecall_dt\n\n\nF1_dt<- 2*presicion_dt*recall_dt/(presicion_dt+recall_dt)\nF1_dt\n\npred.test.dt <- predict(model_dt,test_im,type=\"class\")[1:418]\nres_dt<- data.frame(test$PassengerId,pred.test.dt)\nnames(res_dt)<-c(\"PassengerId\",\"Survived\")\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"write.csv(res_dt,file=\"gender_submission.csv\",row.names = F)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"model_rf<-randomForest(Survived~.,data=train1)\nplot(model_rf)\n\n#prediction based on random forest\npred.train.rf <- predict(model_rf,train2)\nmean(pred.train.rf==train2$Survived)\n\n\nt1<-table(pred.train.rf,train2$Survived)\npresicion<- t1[1,1]/(sum(t1[1,]))\nrecall<- t1[1,1]/(sum(t1[,1]))\npresicion\n\nrecall\n\nF1<- 2*presicion*recall/(presicion+recall)\nF1\n\npred.test.rf <- predict(model_rf,test_im)[1:418]\nres_rf<- data.frame(test$PassengerId,pred.test.rf)\nnames(res_rf)<-c(\"PassengerId\",\"Survived\")\n","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}