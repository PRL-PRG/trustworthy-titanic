
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(ggplot2) # include ggplot library                     
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library(scales)  # include scales library                     
Warning message:
package ‘scales’ was built under R version 3.6.2 
> # read files
> 
> trainf <- read.csv("../input/train.csv", header=TRUE, as.is=TRUE)  
> testf  <- read.csv("../input/test.csv",  header=TRUE,  as.is=TRUE) 
> 
> #testf <- read.csv("C:/Users/Jessica/Desktop/Spring 16/Math 336/Proj 1/Final/test.csv")
> #trainf <- read.csv("C:/Users/Jessica/Desktop/Spring 16/Math 336/Proj 1/Final/train.csv")
> 
> lname <- function( sort ) 
+ {
+   sortName <- strsplit( sort, ',' ) # split elements into substring family
+   sortName[[1]][1]
+ }
> #select family names
> trainf$Family <- sapply(trainf$Name, lname, USE.NAMES=FALSE) 
> testf$Family  <- sapply(testf$Name,  lname, USE.NAMES=FALSE)  
> 
> traindata <- data.frame(survived = trainf$Survived, # survived
+                         class = trainf$Pclass,     # class
+                         gender = trainf$Sex,        # gender
+                         Family = trainf$Family,     # family
+                         test = FALSE )              #headers neglected
> 
> testdata  <- data.frame(survived = NA,                 # no
+                         class = testf$Pclass,     # class
+                         gender = testf$Sex,        # gender
+                         Family = testf$Family,     # family
+                         test = TRUE )              #headers included
> 
> allinfo <- rbind(traindata, testdata) #combine data into vector
> 
> familymembers <- table(factor(allinfo$Family )) #last names into same family
> 
> countf <- function(familyCount)  #count family members
+ { 
+   familymembers[[familyCount]] 
+ }
> 
> allinfo$family_count <- sapply(allinfo$Family, FUN = countf )
> 
> #if family > 1, then traveling  alone
> allinfo$alone <- factor(ifelse(allinfo$family_count > 1, "With Family", "Alone")) 
> 
> tempvariable <- allinfo[ !allinfo$test, ] 
> 
> #create plots
> plot1 <- ggplot( tempvariable, aes(x = alone, y = survived) )  + #creates plot
+   
+   stat_summary(fun.y = mean,  
+                geom = "bar",  # bar graph
+                size = 2,      # size
+                fill=muted("red")) + # 
+   xlab('Travel Type') +   # x-label
+   ylab('Survival Rate') + # y-label
+   ggtitle("Survival Rate: Alone or with Family") # chart title
Warning message:
`fun.y` is deprecated. Use `fun` instead. 
> 
> plot2 <- ggplot(tempvariable, aes(x = alone, y = survived))  + # ggplot creates plot 
+   
+   stat_summary(fun.y = mean, 
+                geom = "bar", # bar graph
+                size = 2,     # size
+                fill=muted("blue")) +  
+   facet_grid(class~gender) +  
+   xlab( 'Travel Type') +    # x-label
+   ylab( 'Survival Rate' ) + # y-label
+   ggtitle("Survival Rate: Class and Gender") 
Warning message:
`fun.y` is deprecated. Use `fun` instead. 
> 
> #print plots
> png("travelnsurvival.png", width=500, height=800)
> print(plot1)
> dev.off()
null device 
          1 
> 
> png("classngender.png", width=500, height=800)
> print(plot2)
> dev.off()
null device 
          1 
> 
> proc.time()
   user  system elapsed 
  0.906   0.099   1.044 
