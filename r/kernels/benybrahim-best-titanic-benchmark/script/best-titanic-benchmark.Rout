
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # Load packages
> library('ggplot2') # visualization
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library('ggthemes') # visualization
> library('scales') # visualization
Warning message:
package ‘scales’ was built under R version 3.6.2 
> library('dplyr') # data manipulation

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> library('mice') # imputation

Attaching package: ‘mice’

The following objects are masked from ‘package:base’:

    cbind, rbind

Warning message:
package ‘mice’ was built under R version 3.6.2 
> library('randomForest') # classification algorithm
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:dplyr’:

    combine

The following object is masked from ‘package:ggplot2’:

    margin

> library('plyr') # for the revalue() function
------------------------------------------------------------------------------
You have loaded plyr after dplyr - this is likely to cause problems.
If you need functions from both plyr and dplyr, please load plyr first, then dplyr:
library(plyr); library(dplyr)
------------------------------------------------------------------------------

Attaching package: ‘plyr’

The following objects are masked from ‘package:dplyr’:

    arrange, count, desc, failwith, id, mutate, rename, summarise,
    summarize

> library('stringr')  # for the str_sub() function
> library('caret') # For machine learning
Loading required package: lattice
> 
> train <- read.csv('../input/train.csv', stringsAsFactors = F)
> test  <- read.csv('../input/test.csv', stringsAsFactors = F)
> 
> full  <- bind_rows(train, test) # bind training & test data
> 
> # check data
> str(full)
'data.frame':	1309 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : chr  "male" "female" "female" "female" ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  "" "C85" "" "C123" ...
 $ Embarked   : chr  "S" "C" "S" "S" ...
> 
> full$Survived <- revalue(factor(full$Survived), c("1" = "Survived", "0" = "Perished"))
> # Grab title from passenger names
> full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
> # Titles with very low cell counts to be combined to "rare" level
> rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', 
+                 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
> 
> # Also reassign mlle, ms, and mme accordingly
> full$Title[full$Title == 'Mlle']        <- 'Miss' 
> full$Title[full$Title == 'Ms']          <- 'Miss'
> full$Title[full$Title == 'Mme']         <- 'Mrs' 
> full$Title[full$Title %in% rare_title]  <- 'Rare Title'
> 
> # Create a family size variable including the passenger themselves
> full$Fsize <- full$SibSp + full$Parch + 1
> 
> full$FsizeD[full$Fsize == 1] <- 'singleton'
> full$FsizeD[full$Fsize < 5 & full$Fsize > 1] <- 'small'
> full$FsizeD[full$Fsize > 4] <- 'large'
> 
> full$Deck<-factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
>     
> full$Embarked[c(62, 830)] <- 'C'
> # Replace missing fare value with median fare for class/embarkment
> full$Fare[1044] <- median(full[full$Pclass == '3' & full$Embarked == 'S', ]$Fare, na.rm = TRUE)
> 
> ## test a character as an EVEN single digit
> isEven <- function(x) x %in% c("0","2","4","6","8") 
> ## test a character as an ODD single digit
> isOdd <- function(x) x %in% c("1","3","5","7","9") 
> full$Side <- NA
> full$Cabin.last.digit <- str_sub(full$Cabin, -1)
> full$Side[which(isEven(full$Cabin.last.digit))] <- "port"
> full$Side[which(isOdd(full$Cabin.last.digit))] <- "starboard"
> 
> # Make variables factors into factors
> factor_vars <- c('PassengerId','Pclass','Sex','Embarked','Title','FsizeD','Side')
> 
> full[factor_vars] <- lapply(full[factor_vars], function(x) as.factor(x))
> 
> # Set a random seed
> set.seed(129)
> 
> # Perform mice imputation, excluding certain less-than-useful variables:
> mice_mod <- mice(full[, !names(full) %in% c('PassengerId','Name','Ticket','Cabin','Survived')], method='rf') 

 iter imp variable
  1   1  Age  Deck  Side
  1   2  Age  Deck  Side
  1   3  Age  Deck  Side
  1   4  Age  Deck  Side
  1   5  Age  Deck  Side
  2   1  Age  Deck  Side
  2   2  Age  Deck  Side
  2   3  Age  Deck  Side
  2   4  Age  Deck  Side
  2   5  Age  Deck  Side
  3   1  Age  Deck  Side
  3   2  Age  Deck  Side
  3   3  Age  Deck  Side
  3   4  Age  Deck  Side
  3   5  Age  Deck  Side
  4   1  Age  Deck  Side
  4   2  Age  Deck  Side
  4   3  Age  Deck  Side
  4   4  Age  Deck  Side
  4   5  Age  Deck  Side
  5   1  Age  Deck  Side
  5   2  Age  Deck  Side
  5   3  Age  Deck  Side
  5   4  Age  Deck  Side
  5   5  Age  Deck  Side
Warning message:
Number of logged events: 76 
>     
> mice_output <- complete(mice_mod)
> # Replace Age variable from the mice model.
> full$Age <- mice_output$Age
> full$Deck <- mice_output$Deck
> full$Side <- mice_output$Side
> 
> # Create the column child, and indicate whether child or adult
> full$Child[full$Age < 16] <- 'Child'
> full$Child[full$Age >= 16] <- 'Adult'
>     
> # Adding Mother variable
> full$Mother <- 'Not Mother'
> full$Mother[full$Sex == 'female' & full$Parch > 0] <- 'Mother'
> 
> # Finish by factorizing our two new factor variables
> full$Child  <- factor(full$Child)
> full$Mother <- factor(full$Mother)
> 
> # Split the data back into a train set and a test set
> train <- full[1:891,]
> test <- full[892:1309,]
> 
> # Set a random seed
> set.seed(754)
> 
> # Build the model (note: not all possible variables are used)
> rf_model <- train(Survived ~ Sex:I(Pclass=="3") + Age + I(exp(Fare)) + Title + Sex*Child + Pclass:Child +
+             Mother*I(FsizeD =="large") + I(FsizeD =="large")*Sex + Sex:I(Embarked=="Q") + 
+             Side:I(Pclass=="1") , method="glm",  data = train)
There were 49 warnings (use warnings() to see them)
> 
> print(rf_model)
Generalized Linear Model 

891 samples
 10 predictor
  2 classes: 'Perished', 'Survived' 

No pre-processing
Resampling: Bootstrapped (25 reps) 
Summary of sample sizes: 891, 891, 891, 891, 891, 891, ... 
Resampling results:

  Accuracy  Kappa    
  0.829279  0.6271326

> 
> # Predict using the test set
> prediction <- predict(rf_model, test)
Warning message:
In predict.lm(object, newdata, se.fit, scale = 1, type = if (type ==  :
  prediction from a rank-deficient fit may be misleading
> 
> # Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)
> prediction <- revalue(prediction, c("Survived" = "1", "Perished" = "0"))
> 
> solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
> 
> # Write the solution to file
> 
> write.csv(solution, file = 'rf_mod_Solution.csv', row.names = F)
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> write.csv(solution, file = 'rf_mod_Solution.csv', row.names = F)
> 
> proc.time()
   user  system elapsed 
 47.562   0.913  49.702 
