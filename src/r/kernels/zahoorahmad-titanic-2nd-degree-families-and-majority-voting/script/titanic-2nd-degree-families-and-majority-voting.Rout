
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## ----setup, include=FALSE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> knitr::opts_chunk$set(echo = TRUE)
> 
> 
> ## ---- message=FALSE, warning=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(Hmisc)
Loading required package: lattice
Loading required package: survival
Loading required package: Formula
Loading required package: ggplot2

Attaching package: ‘Hmisc’

The following objects are masked from ‘package:base’:

    format.pval, units

Warning messages:
1: package ‘survival’ was built under R version 3.6.2 
2: package ‘ggplot2’ was built under R version 3.6.2 
> library(knitr)
> library(ggplot2)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:Hmisc’:

    src, summarize

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> library(caret)

Attaching package: ‘caret’

The following object is masked from ‘package:survival’:

    cluster

> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:dplyr’:

    combine

The following object is masked from ‘package:ggplot2’:

    margin

> library(gridExtra)

Attaching package: ‘gridExtra’

The following object is masked from ‘package:randomForest’:

    combine

The following object is masked from ‘package:dplyr’:

    combine

> library(ROCR)
Warning message:
package ‘ROCR’ was built under R version 3.6.2 
> library(corrplot)
corrplot 0.84 loaded
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train <- read.csv("../input/train.csv", stringsAsFactors = F, na.strings = c("NA", ""))
> test <- read.csv("../input/test.csv", stringsAsFactors = F, na.strings = c("NA", ""))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> str(train)
'data.frame':	891 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : chr  "male" "female" "female" "female" ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  NA "C85" NA "C123" ...
 $ Embarked   : chr  "S" "C" "S" "S" ...
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> test$Survived <- NA
> all <- rbind(train, test)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> sapply(all, function(x) {sum(is.na(x))})
PassengerId    Survived      Pclass        Name         Sex         Age 
          0         418           0           0           0         263 
      SibSp       Parch      Ticket        Fare       Cabin    Embarked 
          0           0           0           1        1014           2 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> all$Sex <- as.factor(all$Sex)
> all$Survived <- as.factor(all$Survived)
> all$Pclass <- as.ordered(all$Pclass) #because Pclass is ordinal
> 
> 
> ## ---- out.width="50%"------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(all[!is.na(all$Survived),], aes(x = Survived, fill = Survived)) +
+   geom_bar(stat='count') +
+   labs(x = 'How many people died and survived on the Titanic?') +
+         geom_label(stat='count',aes(label=..count..), size=7) +
+         theme_grey(base_size = 18)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> p1 <- ggplot(all, aes(x = Sex, fill = Sex)) +
+   geom_bar(stat='count', position='dodge') + theme_grey() +
+   labs(x = 'All data') +
+         geom_label(stat='count', aes(label=..count..)) +
+         scale_fill_manual("legend", values = c("female" = "pink", "male" = "green"))
> p2 <- ggplot(all[!is.na(all$Survived),], aes(x = Sex, fill = Survived)) +
+   geom_bar(stat='count', position='dodge') + theme_grey() +
+   labs(x = 'Training data only') +
+         geom_label(stat='count', aes(label=..count..))
> 
> grid.arrange(p1,p2, nrow=1)
> 
> 
> ## ---- out.width="100%"-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> p3 <- ggplot(all, aes(x = Pclass, fill = Pclass)) +
+   geom_bar(stat='count', position='dodge') +
+   labs(x = 'Pclass, All data') + geom_label(stat='count', aes(label=..count..)) +
+    theme(legend.position="none") + theme_grey()     
> p4 <- ggplot(all[!is.na(all$Survived),], aes(x = Pclass, fill = Survived)) +
+   geom_bar(stat='count', position='dodge') + labs(x = 'Training data only') +
+         theme(legend.position="none") + theme_grey()
> p5 <- ggplot(all[!is.na(all$Survived),], aes(x = Pclass, fill = Survived)) +
+   geom_bar(stat='count', position='stack') +
+   labs(x = 'Training data only', y= "Count") + facet_grid(.~Sex) +
+         theme(legend.position="none") + theme_grey()
> p6 <- ggplot(all[!is.na(all$Survived),], aes(x = Pclass, fill = Survived)) +
+   geom_bar(stat='count', position='fill') +
+   labs(x = 'Training data only', y= "Percent") + facet_grid(.~Sex) +
+         theme(legend.position="none") + theme_grey()
> 
> grid.arrange(p3, p4, p5, p6, ncol=2)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> all$PclassSex[all$Pclass=='1' & all$Sex=='male'] <- 'P1Male'
> all$PclassSex[all$Pclass=='2' & all$Sex=='male'] <- 'P2Male'
> all$PclassSex[all$Pclass=='3' & all$Sex=='male'] <- 'P3Male'
> all$PclassSex[all$Pclass=='1' & all$Sex=='female'] <- 'P1Female'
> all$PclassSex[all$Pclass=='2' & all$Sex=='female'] <- 'P2Female'
> all$PclassSex[all$Pclass=='3' & all$Sex=='female'] <- 'P3Female'
> all$PclassSex <- as.factor(all$PclassSex)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #Extracting Title and Surname from Name
> all$Surname <- sapply(all$Name, function(x) {strsplit(x, split='[,.]')[[1]][1]})
>  #correcting some surnames that also include a maiden name
> all$Surname <- sapply(all$Surname, function(x) {strsplit(x, split='[-]')[[1]][1]})
> all$Title <- sapply(all$Name, function(x) {strsplit(x, split='[,.]')[[1]][2]})
> all$Title <- sub(' ', '', all$Title) #removing spaces before title
> kable(table(all$Sex, all$Title))


|       | Capt| Col| Don| Dona| Dr| Jonkheer| Lady| Major| Master| Miss| Mlle| Mme|  Mr| Mrs| Ms| Rev| Sir| the Countess|
|:------|----:|---:|---:|----:|--:|--------:|----:|-----:|------:|----:|----:|---:|---:|---:|--:|---:|---:|------------:|
|female |    0|   0|   0|    1|  1|        0|    1|     0|      0|  260|    2|   1|   0| 197|  2|   0|   0|            1|
|male   |    1|   4|   1|    0|  7|        1|    0|     2|     61|    0|    0|   0| 757|   0|  0|   8|   1|            0|
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> all$Title[all$Title %in% c("Mlle", "Ms")] <- "Miss"
> all$Title[all$Title== "Mme"] <- "Mrs"
> all$Title[!(all$Title %in% c('Master', 'Miss', 'Mr', 'Mrs'))] <- "Rare Title"
> all$Title <- as.factor(all$Title)
> kable(table(all$Sex, all$Title))


|       | Master| Miss|  Mr| Mrs| Rare Title|
|:------|------:|----:|---:|---:|----------:|
|female |      0|  264|   0| 198|          4|
|male   |     61|    0| 757|   0|         25|
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(all[!is.na(all$Survived),], aes(x = Title, fill = Survived)) +
+   geom_bar(stat='count', position='stack') +
+   labs(x = 'Title') +theme_grey()
> 
> 
> ## ---- message=FALSE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #creating family size variable (Fsize)
> all$Fsize <- all$SibSp+all$Parch +1
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(all[!is.na(all$Survived),], aes(x = Fsize, fill = Survived)) +
+   geom_bar(stat='count', position='dodge') +
+   scale_x_continuous(breaks=c(1:11)) +
+   labs(x = 'Family Size') + theme_grey()
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #composing variable that combines total Fsize and Surname
> all$FsizeName <- paste(as.character(all$Fsize), all$Surname, sep="")
> 
> SizeCheck <- all %>%
+         group_by(FsizeName, Fsize) %>%
+         summarise(NumObs=n())
`summarise()` regrouping output by 'FsizeName' (override with `.groups` argument)
> SizeCheck$NumFam <- SizeCheck$NumObs/SizeCheck$Fsize
> SizeCheck$modulo <- SizeCheck$NumObs %% SizeCheck$Fsize
> SizeCheck <- SizeCheck[SizeCheck$modulo !=0,]
> sum(SizeCheck$NumObs) #total number of Observations with inconsistencies
[1] 93
> kable(SizeCheck[SizeCheck$FsizeName %in% c('3Davies', '5Hocking', '6Richards', '2Wilkes', '3Richards', '4Hocking'),]) #only display some inconsistencies that are discussed in the text


|FsizeName | Fsize| NumObs|    NumFam| modulo|
|:---------|-----:|------:|---------:|------:|
|2Wilkes   |     2|      1| 0.5000000|      1|
|3Davies   |     3|      5| 1.6666667|      2|
|3Richards |     3|      2| 0.6666667|      2|
|4Hocking  |     4|      2| 0.5000000|      2|
|5Hocking  |     5|      1| 0.2000000|      1|
|6Richards |     6|      1| 0.1666667|      1|
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> kable(all[all$FsizeName=='3Davies',c(2,3,14,5,6,7,8,17,9,15)])


|     |Survived |Pclass |Surname |Sex    | Age| SibSp| Parch|FsizeName |Ticket     |Title  |
|:----|:--------|:------|:-------|:------|---:|-----:|-----:|:---------|:----------|:------|
|550  |1        |2      |Davies  |male   |   8|     1|     1|3Davies   |C.A. 33112 |Master |
|566  |0        |3      |Davies  |male   |  24|     2|     0|3Davies   |A/4 48871  |Mr     |
|901  |NA       |3      |Davies  |male   |  21|     2|     0|3Davies   |A/4 48871  |Mr     |
|1079 |NA       |3      |Davies  |male   |  17|     2|     0|3Davies   |A/4 48873  |Mr     |
|1222 |NA       |2      |Davies  |female |  48|     0|     2|3Davies   |C.A. 33112 |Mrs    |
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> all$FsizeName[c(550, 1222)] <- '2Davies'
> all$SibSp[550] <- 0
> all$Parch[1222] <- 1
> all$Fsize[c(550, 1222)] <- 2
> kable(all[all$FsizeName=='2Davies',c(2,3,14,5,6,7,8,17,9,15)])


|     |Survived |Pclass |Surname |Sex    | Age| SibSp| Parch|FsizeName |Ticket     |Title  |
|:----|:--------|:------|:-------|:------|---:|-----:|-----:|:---------|:----------|:------|
|550  |1        |2      |Davies  |male   |   8|     0|     1|2Davies   |C.A. 33112 |Master |
|1222 |NA       |2      |Davies  |female |  48|     0|     1|2Davies   |C.A. 33112 |Mrs    |
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> kable(all[all$Ticket %in% c('29104', '29105', '29106'),c(2,3,4,5,6,7,8,9,15)])


|    |Survived |Pclass |Name                                  |Sex    |   Age| SibSp| Parch|Ticket |Title  |
|:---|:--------|:------|:-------------------------------------|:------|-----:|-----:|-----:|:------|:------|
|408 |1        |2      |Richards, Master. William Rowe        |male   |  3.00|     1|     1|29106  |Master |
|438 |1        |2      |Richards, Mrs. Sidney (Emily Hocking) |female | 24.00|     2|     3|29106  |Mrs    |
|530 |0        |2      |Hocking, Mr. Richard George           |male   | 23.00|     2|     1|29104  |Mr     |
|775 |1        |2      |Hocking, Mrs. Elizabeth (Eliza Needs) |female | 54.00|     1|     3|29105  |Mrs    |
|832 |1        |2      |Richards, Master. George Sibley       |male   |  0.83|     1|     1|29106  |Master |
|944 |NA       |2      |Hocking, Miss. Ellen Nellie""         |female | 20.00|     2|     1|29105  |Miss   |
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> NC <- all[all$FsizeName %in% SizeCheck$FsizeName,] #create data frame with only relevant Fsizenames
> 
> #extracting maiden names
> NC$Name <- sub("\\s$", "", NC$Name) #removing spaces at end Name
> NC$Maiden <- sub(".*[^\\)]$", "", NC$Name) #remove when not ending with ')'
> NC$Maiden <- sub(".*\\s(.*)\\)$", "\\1", NC$Maiden)
> NC$Maiden[NC$Title!='Mrs'] <- "" #cleaning up other stuff between brackets (including Nickname of a Mr)
> NC$Maiden <- sub("^\\(", '', NC$Maiden) #removing opening brackets (sometimes single name, no spaces between brackets)
> #making an exceptions match
> NC$Maiden[NC$Name=='Andersen-Jensen, Miss. Carla Christine Nielsine'] <- 'Jensen'
> 
> #take only Maiden names that also exist as surname in other Observations
> NC$Maiden2[NC$Maiden %in% NC$Surname] <- NC$Maiden[NC$Maiden %in% NC$Surname] 
> #create surname+maiden name combinations
> NC$Combi[!is.na(NC$Maiden2)] <- paste(NC$Surname[!is.na(NC$Maiden2)], NC$Maiden[!is.na(NC$Maiden2)])
> 
> #create labels dataframe with surname and maiden merged into one column
> labels1 <- NC[!is.na(NC$Combi), c('Surname','Combi')]
> labels2 <- NC[!is.na(NC$Combi), c('Maiden','Combi')]
> colnames(labels2) <- c('Surname', 'Combi')
> labels1 <- rbind(labels1, labels2)
> 
> NC$Combi <- NULL
> NC <- left_join(NC, labels1, by='Surname')
> 
> #Find the maximum Fsize within each newly found 'second degree' family
> CombiMaxF <- NC[!is.na(NC$Combi),] %>%
+         group_by(Combi) %>%
+         summarise(MaxF=max(Fsize)) #summarise(MaxF=n())
`summarise()` ungrouping output (override with `.groups` argument)
> NC <- left_join(NC, CombiMaxF, by = "Combi")
> 
> #create family names for those larger families
> NC$FsizeCombi[!is.na(NC$Combi)] <- paste(as.character(NC$Fsize[!is.na(NC$Combi)]), NC$Combi[!is.na(NC$Combi)], sep="")
> 
> #find the ones in which not all Fsizes are the same
> FamMaid <- NC[!is.na(NC$FsizeCombi),] %>%
+         group_by(FsizeCombi, MaxF, Fsize) %>%
+         summarise(NumObs=n())
`summarise()` regrouping output by 'FsizeCombi', 'MaxF' (override with `.groups` argument)
> FamMaidWrong <- FamMaid[FamMaid$MaxF!=FamMaid$NumObs,]
> 
> kable(unique(NC[!is.na(NC$Combi) & NC$FsizeCombi %in% FamMaidWrong$FsizeCombi, c('Combi', 'MaxF')]))


|   |Combi                | MaxF|
|:--|:--------------------|----:|
|7  |Backstrom Gustafsson |    4|
|15 |Strom Persson        |    3|
|17 |Jacobsohn Christy    |    4|
|30 |Richards Hocking     |    6|
|34 |Renouf Jefferys      |    4|
|35 |Hirvonen Lindqvist   |    3|
|50 |Davidson Hays        |    4|
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> NC$MaxF <- NULL #erasing MaxF column maiden combi's
> 
> #Find the maximum Fsize within remaining families (no maiden combi's)
> FamMale <- NC[is.na(NC$Combi),] %>%
+         group_by(Surname) %>%
+         summarise(MaxF=max(Fsize))
`summarise()` ungrouping output (override with `.groups` argument)
> NC <- left_join(NC, FamMale, by = "Surname")
> 
> NCMale <- NC[is.na(NC$Combi),] %>%
+         group_by(Surname, FsizeName, MaxF) %>%
+         summarise(count=n()) %>%
+         group_by(Surname, MaxF) %>%
+         filter(n()>1) %>%
+         summarise(NumFsizes=n())
`summarise()` regrouping output by 'Surname', 'FsizeName' (override with `.groups` argument)
`summarise()` regrouping output by 'Surname' (override with `.groups` argument)
> 
> NC$Combi[NC$Surname %in% NCMale$Surname] <- NC$Surname[NC$Surname %in% NCMale$Surname]
> 
> kable(NCMale[, c(1,2)])


|Surname       | MaxF|
|:-------------|----:|
|Kink          |    5|
|Vander Planke |    4|
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> kable(all[all$Surname=='Vander Planke', c(2,3,4,5,6,7,8,9,15)])


|     |Survived |Pclass |Name                                                    |Sex    | Age| SibSp| Parch|Ticket |Title |
|:----|:--------|:------|:-------------------------------------------------------|:------|---:|-----:|-----:|:------|:-----|
|19   |0        |3      |Vander Planke, Mrs. Julius (Emelia Maria Vandemoortele) |female |  31|     1|     0|345763 |Mrs   |
|39   |0        |3      |Vander Planke, Miss. Augusta Maria                      |female |  18|     2|     0|345764 |Miss  |
|334  |0        |3      |Vander Planke, Mr. Leo Edmondus                         |male   |  16|     2|     0|345764 |Mr    |
|1037 |NA       |3      |Vander Planke, Mr. Julius                               |male   |  31|     3|     0|345763 |Mr    |
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #selecting those 37 passengers In Not Correct dataframe
> NC <- NC[(NC$FsizeCombi %in% FamMaidWrong$FsizeCombi)|(NC$Surname %in% NCMale$Surname),]
> 
> #calculating the average Fsize for those 9 families
> NC1 <- NC %>%
+         group_by(Combi) %>%
+         summarise(Favg=mean(Fsize))
`summarise()` ungrouping output (override with `.groups` argument)
> kable(NC1)


|Combi                |     Favg|
|:--------------------|--------:|
|Backstrom Gustafsson | 3.000000|
|Davidson Hays        | 3.000000|
|Hirvonen Lindqvist   | 2.333333|
|Jacobsohn Christy    | 3.000000|
|Kink                 | 3.400000|
|Renouf Jefferys      | 3.000000|
|Richards Hocking     | 4.166667|
|Strom Persson        | 2.333333|
|Vander Planke        | 3.000000|
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> NC <- left_join(NC, NC1, by = "Combi") #adding Favg to NC dataframe 
> NC$Favg <- round(NC$Favg) #rounding those averages to integers
> NC <- NC[, c('PassengerId', 'Favg')]
> all <- left_join(all, NC, by='PassengerId')
> 
> #replacing Fsize by Favg
> all$Fsize[!is.na(all$Favg)] <- all$Favg[!is.na(all$Favg)]
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #creating a variable with almost the same ticket numbers (only last 2 digits varying)
> all$Ticket2 <- sub("..$", "xx", all$Ticket)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> rest <- all %>%
+         select(PassengerId, Title, Age, Ticket, Ticket2, Surname, Fsize) %>%
+         filter(Fsize=='1') %>%
+         group_by(Ticket2, Surname) %>%
+         summarise(count=n())
`summarise()` regrouping output by 'Ticket2' (override with `.groups` argument)
> rest <- rest[rest$count>1,]
> rest1 <- all[(all$Ticket2 %in% rest$Ticket2 & all$Surname %in% rest$Surname & all$Fsize=='1'), c('PassengerId', 'Surname', 'Title', 'Age', 'Ticket', 'Ticket2', 'Fsize', 'SibSp', 'Parch')]
> rest1 <- left_join(rest1, rest, by = c("Surname", "Ticket2"))
> rest1 <- rest1[!is.na(rest1$count),]
> rest1 <- rest1 %>%
+         arrange(Surname, Ticket2)
> kable(rest1[1:12,])


| PassengerId|Surname  |Title  | Age|Ticket             |Ticket2            | Fsize| SibSp| Parch| count|
|-----------:|:--------|:------|---:|:------------------|:------------------|-----:|-----:|-----:|-----:|
|         949|Abelseth |Mr     |  25|348122             |3481xx             |     1|     0|     0|     2|
|        1237|Abelseth |Miss   |  16|348125             |3481xx             |     1|     0|     0|     2|
|         211|Ali      |Mr     |  24|SOTON/O.Q. 3101311 |SOTON/O.Q. 31013xx |     1|     0|     0|     2|
|         785|Ali      |Mr     |  25|SOTON/O.Q. 3101312 |SOTON/O.Q. 31013xx |     1|     0|     0|     2|
|         115|Attalah  |Miss   |  17|2627               |26xx               |     1|     0|     0|     2|
|         245|Attalah  |Mr     |  30|2694               |26xx               |     1|     0|     0|     2|
|         379|Betros   |Mr     |  20|2648               |26xx               |     1|     0|     0|     2|
|        1231|Betros   |Master |  NA|2622               |26xx               |     1|     0|     0|     2|
|         472|Cacic    |Mr     |  38|315089             |3150xx             |     1|     0|     0|     4|
|         535|Cacic    |Miss   |  30|315084             |3150xx             |     1|     0|     0|     4|
|         929|Cacic    |Miss   |  21|315087             |3150xx             |     1|     0|     0|     4|
|        1202|Cacic    |Mr     |  18|315091             |3150xx             |     1|     0|     0|     4|
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #replacing Fsize size in my overall dataframe with the count numbers in the table above
> all <- left_join(all, rest1)
Joining, by = c("PassengerId", "Age", "SibSp", "Parch", "Ticket", "Surname", "Title", "Fsize", "Ticket2")
> for (i in 1:nrow(all)){
+         if (!is.na(all$count[i])){
+                 all$Fsize[i] <- all$count[i]
+         }
+ }
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> kable(all[all$Ticket=='1601', c('Survived', 'Pclass', 'Title', 'Surname', 'Age', 'Ticket', 'SibSp', 'Parch', 'Fsize')])


|    |Survived |Pclass |Title |Surname | Age|Ticket | SibSp| Parch| Fsize|
|:---|:--------|:------|:-----|:-------|---:|:------|-----:|-----:|-----:|
|75  |1        |3      |Mr    |Bing    |  32|1601   |     0|     0|     1|
|170 |0        |3      |Mr    |Ling    |  28|1601   |     0|     0|     1|
|510 |1        |3      |Mr    |Lang    |  26|1601   |     0|     0|     1|
|644 |1        |3      |Mr    |Foo     |  NA|1601   |     0|     0|     1|
|693 |1        |3      |Mr    |Lam     |  NA|1601   |     0|     0|     2|
|827 |0        |3      |Mr    |Lam     |  NA|1601   |     0|     0|     2|
|839 |1        |3      |Mr    |Chip    |  32|1601   |     0|     0|     1|
|931 |NA       |3      |Mr    |Hee     |  NA|1601   |     0|     0|     1|
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #composing data frame with group size for each Ticket
> TicketGroup <- all %>%
+         select(Ticket) %>%
+         group_by(Ticket) %>%
+         summarise(Tsize=n())
`summarise()` ungrouping output (override with `.groups` argument)
> all <- left_join(all, TicketGroup, by = "Ticket")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(all[!is.na(all$Survived),], aes(x = Tsize, fill = Survived)) +
+   geom_bar(stat='count', position='dodge') +
+   scale_x_continuous(breaks=c(1:11)) +
+   labs(x = 'Ticket Size') + theme_grey()
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #taking the max of family and ticket size as the group size
> all$Group <- all$Fsize
> for (i in 1:nrow(all)){
+            all$Group[i] <- max(all$Group[i], all$Tsize[i])
+ }
> 
> #Creating final group categories
> all$GroupSize[all$Group==1] <- 'solo'
> all$GroupSize[all$Group==2] <- 'duo'
> all$GroupSize[all$Group>=3 & all$Group<=4] <- 'group'
> all$GroupSize[all$Group>=5] <- 'large group'
> all$GroupSize <- as.factor(all$GroupSize)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> g1 <- ggplot(all[!is.na(all$Survived),], aes(x = Group, fill = Survived)) +
+   geom_bar(stat='count', position='dodge') +
+   scale_x_continuous(breaks=c(1:11)) +
+   labs(x = 'Final Group Sizes') + theme_grey()
> 
> g2 <- ggplot(all[!is.na(all$Survived),], aes(x = GroupSize, fill = Survived)) +
+   geom_bar(stat='count', position='dodge') +
+   labs(x = 'Final Group Categories') + theme_grey() +
+         scale_x_discrete (limits = c('solo', 'duo', 'group', 'large group'))
> grid.arrange(g2, g1)
> 
> 
> ## ---- echo=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #clean up
> all$count <- NULL
> all$Name <- NULL
> rm(CombiMaxF)
> rm(FamMaid)
> rm(FamMaidWrong)
> rm(FamMale)
> rm(labels1)
> rm(labels2)
> rm(NC)
> rm(NC1)
> rm(NCMale)
> rm(rest)
> #rm(rest1)
> rm(SizeCheck)
> rm(TicketGroup)
> rm(p1); rm(p2); rm(p3); rm(p4); rm(p5); rm(p6)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #display passengers with missing Embarked
> kable(all[which(is.na(all$Embarked)),c('Surname', 'Title', 'Survived', 'Pclass', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'Group') ])


|    |Surname |Title |Survived |Pclass | Age| SibSp| Parch|Ticket | Fare|Cabin |Embarked | Group|
|:---|:-------|:-----|:--------|:------|---:|-----:|-----:|:------|----:|:-----|:--------|-----:|
|62  |Icard   |Miss  |1        |1      |  38|     0|     0|113572 |   80|B28   |NA       |     2|
|830 |Stone   |Mrs   |1        |1      |  62|     0|     0|113572 |   80|B28   |NA       |     2|
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> all$FarePP <- all$Fare/all$Tsize #creating the Fare Per Person variable
> 
> tab2 <- all[(!is.na(all$Embarked) & !is.na(all$Fare)),] %>%
+         group_by(Embarked, Pclass) %>%
+         summarise(FarePP=median(FarePP))
`summarise()` regrouping output by 'Embarked' (override with `.groups` argument)
> kable(tab2)


|Embarked |Pclass |  FarePP|
|:--------|:------|-------:|
|C        |1      | 34.6500|
|C        |2      | 13.8583|
|C        |3      |  7.2271|
|Q        |1      | 30.0000|
|Q        |2      | 12.3500|
|Q        |3      |  7.7500|
|S        |1      | 26.5500|
|S        |2      | 11.5000|
|S        |3      |  7.7958|
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #imputing missing Embarked values
> all$Embarked[all$Ticket=='113572'] <- 'C'
> #converting Embarked into a factor
> all$Embarked <- as.factor(all$Embarked)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #display passengers with missing Fare
> kable(all[which(is.na(all$Fare)), c('Surname', 'Title', 'Survived', 'Pclass', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked', 'Group')])


|     |Surname |Title |Survived |Pclass |  Age| SibSp| Parch|Ticket | Fare|Cabin |Embarked | Group|
|:----|:-------|:-----|:--------|:------|----:|-----:|-----:|:------|----:|:-----|:--------|-----:|
|1044 |Storey  |Mr    |NA       |3      | 60.5|     0|     0|3701   |   NA|NA    |S        |     1|
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #imputing FarePP (as the Fare will be dropped later on anyway)
> all$FarePP[1044] <- 7.8
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> tab3 <- all[(!is.na(all$FarePP)),] %>%
+         group_by(Pclass) %>%
+         summarise(MedianFarePP=median(FarePP))
`summarise()` ungrouping output (override with `.groups` argument)
> all <- left_join(all, tab3, by = "Pclass")
> all$FarePP[which(all$FarePP==0)] <- all$MedianFarePP[which(all$FarePP==0)]
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(all, aes(x=FarePP)) +
+         geom_histogram(binwidth = 5, fill='blue') + theme_grey() +
+         scale_x_continuous(breaks= seq(0, 150, by=10))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #Note Hmisc needs to be loaded before dplyr, as the other way around errors occured due to the kernel using the Hmisc summarize function instead of the dplyr summarize function
> all$FareBins <- cut2(all$FarePP, g=5)
> 
> ggplot(all[!is.na(all$Survived),], aes(x=FareBins, fill=Survived))+
+         geom_bar(stat='count') + theme_grey() + facet_grid(.~Pclass)+
+         theme(axis.text.x = element_text(angle = 45, hjust = 1))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(all[(!is.na(all$Survived) & !is.na(all$Age)),], aes(x = Age, fill = Survived)) +
+ geom_density(alpha=0.5, aes(fill=factor(Survived))) + labs(title="Survival density and Age") +
+ scale_x_continuous(breaks = scales::pretty_breaks(n = 10)) + theme_grey()
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(all[!is.na(all$Age),], aes(x = Title, y = Age, fill=Pclass )) +
+   geom_boxplot() + scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) + theme_grey()
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #predicting Age with Linear Regression
> set.seed(12000)
> AgeLM <- lm(Age ~ Pclass + Sex + SibSp + Parch + Embarked + Title + GroupSize, data=all[!is.na(all$Age),])
> summary(AgeLM)

Call:
lm(formula = Age ~ Pclass + Sex + SibSp + Parch + Embarked + 
    Title + GroupSize, data = all[!is.na(all$Age), ])

Residuals:
    Min      1Q  Median      3Q     Max 
-28.595  -7.937  -1.155   6.228  44.059 

Coefficients:
                     Estimate Std. Error t value Pr(>|t|)    
(Intercept)            2.8646     6.1895   0.463 0.643590    
Pclass.L              -9.8174     0.6477 -15.159  < 2e-16 ***
Pclass.Q               2.8176     0.6659   4.231 2.53e-05 ***
Sexmale                5.7173     5.9004   0.969 0.332789    
SibSp                 -0.9291     0.5121  -1.814 0.069931 .  
Parch                  0.2598     0.5625   0.462 0.644329    
EmbarkedQ              6.6340     1.8125   3.660 0.000265 ***
EmbarkedS              1.7143     0.9171   1.869 0.061874 .  
TitleMiss             17.4486     6.1527   2.836 0.004659 ** 
TitleMr               22.3092     1.7722  12.589  < 2e-16 ***
TitleMrs              32.0366     6.1628   5.198 2.42e-07 ***
TitleRare Title       30.0730     2.8336  10.613  < 2e-16 ***
GroupSizegroup        -0.3730     1.0836  -0.344 0.730771    
GroupSizelarge group   0.8846     1.7620   0.502 0.615753    
GroupSizesolo          3.1269     0.9590   3.261 0.001148 ** 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 10.88 on 1031 degrees of freedom
Multiple R-squared:  0.4379,	Adjusted R-squared:  0.4302 
F-statistic: 57.36 on 14 and 1031 DF,  p-value: < 2.2e-16

> all$AgeLM <- predict(AgeLM, all)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> par(mfrow=c(1,2))
> hist(all$Age[!is.na(all$Age)], main='Original data, non-missing', xlab='Age', col='green')
> hist(all$AgeLM[is.na(all$Age)], main= 'LM NA predictions', xlab='Age', col='orange', xlim=range(0:80))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #display which passengers are predicted to be children (age<18) with Linear Regression.
> all[(is.na(all$Age) & all$AgeLM <18), c('Sex', 'SibSp', 'Parch', 'Title', 'Pclass', 'Survived', 'AgeLM')]
        Sex SibSp Parch  Title Pclass Survived     AgeLM
66     male     1     1 Master      3        1  1.747930
129  female     1     1   Miss      3        1 13.479274
160    male     8     2 Master      3        0 -1.524135
177    male     3     1 Master      3        0  2.861592
181  female     8     2   Miss      3        0 10.207209
230  female     3     1   Miss      3        0 14.592936
241  female     1     0   Miss      3        0 13.592488
410  female     3     1   Miss      3        0 14.592936
486  female     3     1   Miss      3        0 14.592936
710    male     1     1 Master      3        1  1.747930
793  female     8     2   Miss      3        0 10.207209
864  female     8     2   Miss      3        0 10.207209
889  female     1     2   Miss      3        0 15.453354
1080 female     8     2   Miss      3     <NA> 10.207209
1136   male     1     2 Master      3     <NA>  3.722010
1231   male     0     0 Master      3     <NA>  2.790243
1236   male     1     1 Master      3     <NA>  3.462242
1309   male     1     1 Master      3     <NA>  1.747930
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #imputing Linear Regression predictions for missing Ages
> indexMissingAge <- which(is.na(all$Age))
> indexAgeSurvivedNotNA<- which(!is.na(all$Age) & (!is.na(all$Survived))) #needed in sections 4.6 and 4.7
> all$Age[indexMissingAge] <- all$AgeLM[indexMissingAge]
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #replacing NAs with imaginary Deck U, and keeping only the first letter of ech Cabin (=Deck)
> all$Cabin[is.na(all$Cabin)] <- "U"
> all$Cabin <- substring(all$Cabin, 1, 1)
> all$Cabin <- as.factor(all$Cabin)
> 
> ggplot(all[(!is.na(all$Survived)& all$Cabin!='U'),], aes(x=Cabin, fill=Survived)) +
+         geom_bar(stat='count') + theme_grey() + facet_grid(.~Pclass) + labs(title="Survivor split by class and Cabin")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> c1 <- round(prop.table(table(all$Survived[(!is.na(all$Survived)&all$Cabin!='U')], all$Cabin[(!is.na(all$Survived)&all$Cabin!='U')]),2)*100)
> kable(c1)


|   |  A|  B|  C|  D|  E|  F|  G|   T|   U|
|:--|--:|--:|--:|--:|--:|--:|--:|---:|---:|
|0  | 53| 26| 41| 24| 25| 38| 50| 100| NaN|
|1  | 47| 74| 59| 76| 75| 62| 50|   0| NaN|
> 
> 
> ## ---- out.width="50%"------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(all[all$Age<14.5 & !is.na(all$Survived),], aes(x=Pclass, fill=Survived))+
+         geom_bar(stat='count') + theme_grey(base_size = 18)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> all$IsChildP12 <- 'No'
> all$IsChildP12[all$Age<=14.5 & all$Pclass %in% c('1', '2')] <- 'Yes'
> all$IsChildP12 <- as.factor(all$IsChildP12)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> d1 <- ggplot(all[!is.na(all$Survived),], aes(x = Embarked, fill = Survived)) +
+   geom_bar(stat='count') + theme_grey() + labs(x = 'Embarked', y= 'Count')
> d2 <- ggplot(all[!is.na(all$Survived),], aes(x = Embarked, fill = Survived)) +
+   geom_bar(stat='count', position= 'fill') + theme_grey() + labs(x = 'Embarked', y= 'Percent')
> 
> grid.arrange(d1, d2, nrow=1)
> 
> 
> ## ---- message=FALSE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(all[indexAgeSurvivedNotNA,], aes(x = Age, fill = Survived)) +
+ geom_histogram(aes(fill=factor(Survived))) + labs(title="Survival density, known-ages, and Embarked") +
+ scale_x_continuous(breaks = scales::pretty_breaks(n = 5)) + theme_grey() + facet_grid(.~Embarked)
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> tab1 <- rbind(table(all$Embarked[!is.na(all$Survived)]),table(all$Embarked[indexAgeSurvivedNotNA]))
> tab1 <- cbind(tab1, (rowSums(tab1)))
> tab1 <- rbind(tab1, tab1[1,]-tab1[2,])
> tab1 <- rbind(tab1, round((tab1[3,]/tab1[1,])*100))
> rownames(tab1) <- c("All", "With Age", "Missing Age", "Percent Missing")
> colnames(tab1) <- c("C", "Q", "S", "Total")
> kable(tab1)


|                |   C|  Q|   S| Total|
|:---------------|---:|--:|---:|-----:|
|All             | 170| 77| 644|   891|
|With Age        | 132| 28| 554|   714|
|Missing Age     |  38| 49|  90|   177|
|Percent Missing |  22| 64|  14|    20|
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> TicketSurvivors <- all %>%
+         group_by(Ticket) %>%
+         summarize(Tsize = length(Survived),
+                   NumNA = sum(is.na(Survived)),
+                   SumSurvived = sum(as.numeric(Survived)-1, na.rm=T))
`summarise()` ungrouping output (override with `.groups` argument)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> all <- left_join(all, TicketSurvivors)
Joining, by = c("Ticket", "Tsize")
> all$AnySurvivors[all$Tsize==1] <- 'other'
> all$AnySurvivors[all$Tsize>=2] <- ifelse(all$SumSurvived[all$Tsize>=2]>=1, 'survivors in group', 'other')
> all$AnySurvivors <- as.factor(all$AnySurvivors)
> 
> kable(x=table(all$AnySurvivors), col.names= c('AnySurvivors', 'Frequency'))


|AnySurvivors       | Frequency|
|:------------------|---------:|
|other              |       950|
|survivors in group |       359|
> 
> 
> ## ---- out.width="50%"------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> all$IsSolo[all$SibSp==0] <- 'Yes'
> all$IsSolo[all$SibSp!=0] <- 'No'
> all$IsSolo <- as.factor(all$IsSolo)
> 
> ggplot(all[!is.na(all$Survived),], aes(x = IsSolo, fill = Survived)) +
+   geom_bar(stat='count') + theme_grey(base_size = 18)
> 
> 
> ## ---- echo=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #cleaning up
> all$PassengerId <- NULL
> all$SibSp <- NULL
> all$Parch <- NULL
> all$Ticket <- NULL
> all$Fare <- NULL
> all$Cabin <- NULL
> all$Surname <- NULL
> all$Fsize <- NULL
> all$FsizeName <- NULL
> all$Favg <- NULL
> all$Tsize <- NULL
> #all$Group <- NULL
> all$Ticket2 <- NULL
> all$AgeLM <- NULL
> all$Child <- NULL
> all$HasParch <- NULL
> all$MedianFarePP <- NULL
> rm(tab1); rm(tab2); rm(tab3); rm(AgeLM); rm(c1); rm(d1); rm(d2);
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #splitting data into train and test set again
> trainClean <- all[!is.na(all$Survived),]
> testClean <- all[is.na(all$Survived),]
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> set.seed(2017)
> caret_matrix <- train(x=trainClean[,c('PclassSex', 'GroupSize', 'FarePP', 'AnySurvivors', 'IsChildP12')], y=trainClean$Survived, data=trainClean, method='rf', trControl=trainControl(method="cv", number=5))
> caret_matrix
Random Forest 

891 samples
  5 predictor
  2 classes: '0', '1' 

No pre-processing
Resampling: Cross-Validated (5 fold) 
Summary of sample sizes: 712, 713, 712, 713, 714 
Resampling results across tuning parameters:

  mtry  Accuracy   Kappa    
  2     0.8608294  0.6979518
  3     0.8563474  0.6901601
  5     0.8574521  0.6961329

Accuracy was used to select the optimal model using the largest value.
The final value used for the model was mtry = 2.
> caret_matrix$results
  mtry  Accuracy     Kappa AccuracySD    KappaSD
1    2 0.8608294 0.6979518 0.04207323 0.08866286
2    3 0.8563474 0.6901601 0.03454434 0.07324607
3    5 0.8574521 0.6961329 0.03031080 0.06247914
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> varImpPlot(caret_matrix$finalModel, main=" Variable importance")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #using the model to make Survival predictions on the test set
> solution_rf <- predict(caret_matrix, testClean)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> set.seed(2017)
> caret_svm <- train(Survived~ PclassSex + FarePP + AnySurvivors + IsChildP12 + IsSolo, data=trainClean, method='svmRadial', preProcess= c('center', 'scale'), trControl=trainControl(method="cv", number=5))
> caret_svm
Support Vector Machines with Radial Basis Function Kernel 

891 samples
  5 predictor
  2 classes: '0', '1' 

Pre-processing: centered (9), scaled (9) 
Resampling: Cross-Validated (5 fold) 
Summary of sample sizes: 712, 713, 712, 713, 714 
Resampling results across tuning parameters:

  C     Accuracy   Kappa    
  0.25  0.8181886  0.5996692
  0.50  0.8204485  0.6081073
  1.00  0.8215784  0.6123348

Tuning parameter 'sigma' was held constant at a value of 0.1251178
Accuracy was used to select the optimal model using the largest value.
The final values used for the model were sigma = 0.1251178 and C = 1.
> caret_svm$results
      sigma    C  Accuracy     Kappa AccuracySD    KappaSD
1 0.1251178 0.25 0.8181886 0.5996692 0.04651750 0.09732829
2 0.1251178 0.50 0.8204485 0.6081073 0.04651085 0.09993280
3 0.1251178 1.00 0.8215784 0.6123348 0.04671297 0.10137590
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #using the model to make Survival predictions on the test set
> solution_svm <- predict(caret_svm, testClean)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> set.seed(2017)
> caret_boost <- train(Survived~ PclassSex + GroupSize + FareBins + AnySurvivors + IsChildP12, data=trainClean, method='gbm', preProcess= c('center', 'scale'), trControl=trainControl(method="cv", number=7), verbose=FALSE)
> print(caret_boost)
Stochastic Gradient Boosting 

891 samples
  5 predictor
  2 classes: '0', '1' 

Pre-processing: centered (14), scaled (14) 
Resampling: Cross-Validated (7 fold) 
Summary of sample sizes: 763, 763, 763, 764, 765, 764, ... 
Resampling results across tuning parameters:

  interaction.depth  n.trees  Accuracy   Kappa    
  1                   50      0.8114860  0.5896318
  1                  100      0.8204765  0.6058680
  1                  150      0.8518857  0.6825604
  2                   50      0.8317346  0.6380252
  2                  100      0.8507610  0.6812263
  2                  150      0.8586176  0.6966272
  3                   50      0.8541268  0.6909383
  3                  100      0.8530373  0.6843223
  3                  150      0.8507963  0.6785718

Tuning parameter 'shrinkage' was held constant at a value of 0.1

Tuning parameter 'n.minobsinnode' was held constant at a value of 10
Accuracy was used to select the optimal model using the largest value.
The final values used for the model were n.trees = 150, interaction.depth =
 2, shrinkage = 0.1 and n.minobsinnode = 10.
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #using the model to make Survival predictions on the test set
> solution_boost <- predict(caret_boost, testClean)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #adding model predictions to test dataframe
> testClean$RF <- as.numeric(solution_rf)-1
> testClean$SVM <- as.numeric(solution_svm)-1
> testClean$Boost <- as.numeric(solution_boost)-1
> 
> #compose correlations plot
> corrplot.mixed(cor(testClean[, c('RF', 'SVM', 'Boost')]), order="hclust", tl.col="black")
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> testClean$Sum <- testClean$RF + testClean$SVM + testClean$Boost
> testClean$Majority <- ifelse(testClean$Sum<=1, 0, 1)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> testClean$DisagreeSVM <- ifelse(testClean$RF==testClean$Boost & testClean$SVM != testClean$RF, testClean$RF, testClean$SVM)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #predictions of the models on the training set
> trainClean$RF <- predict(caret_matrix, trainClean)
> trainClean$SVM <- predict(caret_svm, trainClean)
> trainClean$Boost <- predict(caret_boost, trainClean)
> 
> 
> #plot differences between actual survived and predictions
> f1 <- ggplot(trainClean[trainClean$Survived != trainClean$RF,], aes(x=PclassSex, fill=RF)) +
+         geom_bar(stat='count') + labs(title="FP and FN, RF model") + theme_grey() +
+         theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
+         theme(legend.position="none") + xlab("")
> 
> f2 <- ggplot(trainClean[trainClean$Survived != trainClean$SVM,], aes(x=PclassSex, fill=SVM)) +
+         geom_bar(stat='count')+ labs(title="FP and FN, SVM model") + theme_grey() +
+         theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
+         theme(legend.position="none") + xlab("")
> 
> f3 <- ggplot(trainClean[trainClean$Survived != trainClean$Boost,], aes(x=PclassSex, fill=Boost)) +
+         geom_bar(stat='count')+ labs(title="FP and FN, GBM model") + theme_grey() +
+         theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
+         theme(legend.position="none") + xlab("")
> 
> grid.arrange(f1, f2, f3, nrow = 1)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #selecting SVM prediction, and GMB predictions for P3
> testClean$Select <- ifelse(testClean$Pclass != 3, testClean$SVM, testClean$Boost)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #writing final submission file
> submission_select <- data.frame(PassengerId = test$PassengerId, Survived = testClean$Select)
> write.csv(submission_select, file = 'Titanic_select.csv', row.names = F)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> cat('Total number of Male passengers in P1 in the test set is', length(testClean$Survived[testClean$PclassSex=='P1Male']))
Total number of Male passengers in P1 in the test set is 57> 
> p1m_surv <- as.data.frame(sapply(testClean[testClean$PclassSex=='P1Male', c('RF', 'SVM', 'Boost')], function(x) {sum(x)}))
> kable(x=p1m_surv, col.names = c('Predicted number of survivors'))


|      | Predicted number of survivors|
|:-----|-----------------------------:|
|RF    |                             7|
|SVM   |                             2|
|Boost |                            13|
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> p1m1 <- ggplot(all[indexAgeSurvivedNotNA,] %>% filter(PclassSex=='P1Male'), aes(x = Age, fill = Survived)) + geom_density(alpha=0.5, aes(fill=factor(Survived))) + labs(title="Survival density and Age P1 Male") + theme_grey()
> 
> all$P1AgeMale[indexAgeSurvivedNotNA=T & all$PclassSex=='P1Male' & all$Age<40] <- 'Under40'
> all$P1AgeMale[indexAgeSurvivedNotNA=T & all$PclassSex=='P1Male' & all$Age>=40] <- 'Over40'
> 
> p1m2 <- ggplot(all[!is.na(all$Survived) & !is.na(all$P1AgeMale),], aes(x=P1AgeMale, fill=Survived))+
+         geom_bar(stat = 'count', position = 'fill') + theme(legend.position="none")
> 
> 
> grid.arrange(p1m1, p1m2, widths=c(2,1))
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(all[!is.na(all$Survived),], aes(x=IsSolo, fill=Survived))+
+         geom_bar(stat='count', position='fill') + facet_grid(.~Pclass+Sex)
> 
> 
> proc.time()
   user  system elapsed 
 19.910   0.842  21.090 
