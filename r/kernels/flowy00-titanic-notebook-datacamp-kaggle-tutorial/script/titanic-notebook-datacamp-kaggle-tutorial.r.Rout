
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> library(rpart)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> 
> # Load in the packages to build a fancy plot
> library(rattle)
Loading required package: tibble
Loading required package: bitops
Rattle: A free graphical interface for data science with R.
Version 5.4.0 Copyright (c) 2006-2020 Togaware Pty Ltd.
Type 'rattle()' to shake, rattle, and roll your data.
Warning messages:
1: package ‘rattle’ was built under R version 3.6.2 
2: package ‘tibble’ was built under R version 3.6.2 
> library(rpart.plot)
> library(RColorBrewer)
> 
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:rattle’:

    importance

The following object is masked from ‘package:dplyr’:

    combine

> 
> train <- read.csv("../input/train.csv")
> test <- read.csv("../input/test.csv")
> 
> 
> str(train)
'data.frame':	891 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : Factor w/ 891 levels "Abbing, Mr. Anthony",..: 109 191 358 277 16 559 520 629 417 581 ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : Factor w/ 681 levels "110152","110413",..: 524 597 670 50 473 276 86 396 345 133 ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : Factor w/ 148 levels "","A10","A14",..: 1 83 1 57 1 1 131 1 1 1 ...
 $ Embarked   : Factor w/ 4 levels "","C","Q","S": 4 2 4 4 4 3 4 4 4 2 ...
> 
> table(train$Survived)

  0   1 
549 342 
> 
> prop.table(table(train$Survived))

        0         1 
0.6161616 0.3838384 
> 
> table(train$Sex, train$Survived)
        
           0   1
  female  81 233
  male   468 109
> 
> prop.table(table(train$Sex,train$Survived), 1)
        
                 0         1
  female 0.2579618 0.7420382
  male   0.8110919 0.1889081
> 
> train$Child <- NA
> train$Child[train$Age < 18] <- 1
> train$Child[train$Age >= 18] <- 0
> 
> prop.table(table(train$Child, train$Survived), 1)
   
            0         1
  0 0.6189684 0.3810316
  1 0.4601770 0.5398230
> 
> #make a copy of test
> test_one <- test
> # Initialize a Survived column to 0
> test_one$Survived <- 0
> # Set Survived to 1 if Sex equals "female"
> test_one$Survived[test_one$Sex == "female"] <- 1
> 
> 
> # Copy of test
> test_one <- test
> 
> # Initialize a Survived column to 0
> test_one$Survived <- 0
> 
> # Set Survived to 1 if Sex equals "female"
> test_one$Survived[test_one$Sex == "female"] <- 1
> 
> 
> my_tree <- rpart(Survived ~ Sex + Age,
+                  data = train,
+                  method ="class")
> 
> my_tree_two <- rpart(Survived ~ 
+                      Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, 
+                      data = train, 
+                      method = "class")
> 
> plot(my_tree)
> text(my_tree)
> 
> plot(my_tree_two)
> text(my_tree_two)
> 
> fancyRpartPlot(my_tree)
> 
> fancyRpartPlot(my_tree_two)
> 
> # Make predictions on the test set
> my_prediction <- predict(my_tree_two, newdata = test, type = "class")
> str(my_prediction)
 Factor w/ 2 levels "0","1": 1 1 1 1 2 1 2 1 2 1 ...
 - attr(*, "names")= chr [1:418] "1" "2" "3" "4" ...
> # Finish the data.frame() call
> my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
> 
> # Use nrow() on my_solution
> nrow(my_solution)
[1] 418
> 
> #modify the split
> my_tree_three <- rpart(Survived ~ 
+                        Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
+                        data = train, 
+                        method = "class", 
+                        control = rpart.control(minsplit = 50, cp = 0))
> 
> # Visualize my_tree_three
> fancyRpartPlot(my_tree_three)
> 
> # Create train_two
> train_two <- train
> train_two$family_size <- train_two$SibSp + train_two$Parch + 1
> 
> # Finish the command
> my_tree_four <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + family_size,
+                       data = train_two, method = "class")
> 
> # Visualize your new decision tree
> fancyRpartPlot(my_tree_four)
> 
> str(train)
'data.frame':	891 obs. of  13 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : Factor w/ 891 levels "Abbing, Mr. Anthony",..: 109 191 358 277 16 559 520 629 417 581 ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : Factor w/ 681 levels "110152","110413",..: 524 597 670 50 473 276 86 396 345 133 ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : Factor w/ 148 levels "","A10","A14",..: 1 83 1 57 1 1 131 1 1 1 ...
 $ Embarked   : Factor w/ 4 levels "","C","Q","S": 4 2 4 4 4 3 4 4 4 2 ...
 $ Child      : num  0 0 0 0 0 NA 0 1 0 1 ...
> 
> train_two$family_size <- train_two$SibSp + train_two$Parch + 1
> 
> # Passenger on row 62 and 830 do not have a value for embarkment.
> # Since many passengers embarked at Southampton, we give them the value S.
> train$Embarked[c(62, 830)] <- "S"
> 
> # Factorize embarkment codes.
> train$Embarked <- factor(train$Embarked)
> 
> # Passenger on row 1044(when combining train and test) has an NA Fare value. 
> #Let's replace it with the median fare value.
> test[153,]
    PassengerId Pclass               Name  Sex  Age SibSp Parch Ticket Fare
153        1044      3 Storey, Mr. Thomas male 60.5     0     0   3701   NA
    Cabin Embarked
153              S
> test$Fare[153] <- median(train$Fare, na.rm = TRUE)
> test[153,]
    PassengerId Pclass               Name  Sex  Age SibSp Parch Ticket    Fare
153        1044      3 Storey, Mr. Thomas male 60.5     0     0   3701 14.4542
    Cabin Embarked
153              S
> 
> 
> train$family_size <- train$SibSp + train$Parch + 1
> test$family_size <- test$SibSp + test$Parch + 1
> 
> # How to fill in missing Age values?
> # We make a prediction of a passengers Age using the other variables and a decision tree model.
> # This time you give method = "anova" since you are predicting a continuous variable.
> 
> predicted_train_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + family_size,
+                        data = train[!is.na(train$Age),], method = "anova")
> predicted_test_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + family_size,
+                        data = train[!is.na(test$Age),], method = "anova")
> 
> train$Age[is.na(train$Age)] <- predict(predicted_train_age, train[is.na(train$Age),])
> 
> 
> test$Age[is.na(test$Age)] <- predict(predicted_test_age, train[is.na(test$Age),])
Warning message:
In test$Age[is.na(test$Age)] <- predict(predicted_test_age, train[is.na(test$Age),  :
  number of items to replace is not a multiple of replacement length
> 
> 
> # Set seed for reproducibility
> set.seed(111)
> # Apply the Random Forest Algorithm
> my_forest <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
+                           data = train, importance = TRUE, ntree = 100)
> 
> # Make your prediction using the test set
> my_prediction <- predict(my_forest, test)
> 
> # Create a data frame with two columns: PassengerId & Survived. Survived contains your predictions
> my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
> 
> 
> 
> varImpPlot(my_forest)
> 
> 
> 
> proc.time()
   user  system elapsed 
  0.928   0.085   1.019 
