
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> library('ggplot2') # visualization
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library('ggthemes') # visualization
> library('scales') # visualization
Warning message:
package ‘scales’ was built under R version 3.6.2 
> library('dplyr') # data manipulation

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> library('mice') # imputation

Attaching package: ‘mice’

The following objects are masked from ‘package:base’:

    cbind, rbind

Warning message:
package ‘mice’ was built under R version 3.6.2 
> library('randomForest')
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:dplyr’:

    combine

The following object is masked from ‘package:ggplot2’:

    margin

> 
> # The train and test data is stored in the ../input directory
> train <- read.csv("../input/train.csv", stringsAsFactors = F)
> test  <- read.csv("../input/test.csv", stringsAsFactors = F)
> combined  <- bind_rows(train, test) # bind training & test data
> # We can inspect the train data. The results of this are printed in the log tab below
> #-----------------------------------------
> str(combined)
'data.frame':	1309 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : chr  "male" "female" "female" "female" ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  "" "C85" "" "C123" ...
 $ Embarked   : chr  "S" "C" "S" "S" ...
> 
> combined[combined==""]<-NA
> 
> sum(is.na(combined$Sex))
[1] 0
> 
> #amount of male compared to female
> ggplot(combined[1:891,], aes(x = Sex, fill = factor(Survived))) +
+   geom_bar(stat='count', position='dodge') +
+   scale_x_discrete(breaks=c('female','male')) +
+   labs(x = 'Sex') +
+   theme_few()
> 
> sum(is.na(combined$Embarked))
[1] 2
> 
> filter(combined, is.na(Embarked))
  PassengerId Survived Pclass                                      Name    Sex
1          62        1      1                       Icard, Miss. Amelie female
2         830        1      1 Stone, Mrs. George Nelson (Martha Evelyn) female
  Age SibSp Parch Ticket Fare Cabin Embarked
1  38     0     0 113572   80   B28     <NA>
2  62     0     0 113572   80   B28     <NA>
> 
> # Get rid of our missing passenger IDs
> embark_fare <- combined %>%
+   filter(PassengerId != 62 & PassengerId != 830)
> 
> # Use ggplot2 to visualize embarkment, passenger class, & median fare
> ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
+   geom_boxplot() +
+   geom_hline(aes(yintercept=80), 
+     colour='red', linetype='dashed', lwd=2) +
+   scale_y_continuous(labels=dollar_format()) +
+   theme_few()
Warning message:
Removed 1 rows containing non-finite values (stat_boxplot). 
> 
> # Since their fare was $80 for 1st class, they most likely embarked from 'C'
> combined$Embarked[c(62, 830)] <- 'C'
> 
> #amount of male compared to female
> ggplot(combined[1:891,], aes(x = Embarked, fill = factor(Survived))) +
+   geom_bar(stat='count', position='dodge') +
+   scale_x_discrete(breaks=c('C','Q','S')) +
+   labs(x = 'Embarked') +
+   theme_few()
> 
> sum(is.na(combined$Pclass))
[1] 0
> 
> #amount of male compared to female
> ggplot(combined[1:891,], aes(x = Pclass, fill = factor(Survived))) +
+   geom_bar(stat='count', position='dodge') +
+   scale_x_continuous(breaks=c(1:3)) +
+   labs(x = 'Passenger Class') +
+   theme_few()
> 
> # Create a family size variable
> combined$FamSize <- combined$SibSp + combined$Parch + 1
> 
> # Use ggplot2 to visualize the relationship between family size & survival
> ggplot(combined[1:891,], aes(x = FamSize, fill = factor(Survived))) +
+   geom_bar(stat='count', position='dodge') +
+   scale_x_continuous(breaks=c(1:11)) +
+   labs(x = 'Family Size') +
+   theme_few()
> 
> sum(is.na(combined$Fare))
[1] 1
> 
> filter(combined, is.na(Fare))
  PassengerId Survived Pclass               Name  Sex  Age SibSp Parch Ticket
1        1044       NA      3 Storey, Mr. Thomas male 60.5     0     0   3701
  Fare Cabin Embarked FamSize
1   NA  <NA>        S       1
> 
> ggplot(combined[combined$Pclass == '3' & combined$Embarked == 'S', ], 
+   aes(x = Fare)) +
+   geom_density(fill = '#99d6ff', alpha=0.4) + 
+   geom_vline(aes(xintercept=median(Fare, na.rm=T)),
+     colour='red', linetype='dashed', lwd=1) +
+   scale_x_continuous(labels=dollar_format()) +
+   theme_few()
Warning message:
Removed 1 rows containing non-finite values (stat_density). 
> 
> median(combined[combined$Pclass == '3' & combined$Embarked == 'S', ]$Fare, na.rm = TRUE)
[1] 8.05
> 
> # Replace missing fare value with median fare for class/embarkment
> combined$Fare[1044] <- median(combined[combined$Pclass == '3' & combined$Embarked == 'S', ]$Fare, na.rm = TRUE)
> 
> # Use ggplot2 to visualize the relationship between fare & survival
> # First we'll look at the relationship between age & survival
> ggplot(combined[1:891,], aes(Fare, fill = factor(Survived))) + 
+   geom_histogram(binwidth = 6) + 
+   facet_grid(.~Sex) + 
+   theme_few()
> 
> sum(is.na(combined$Age))
[1] 263
> 
> # Grab title from passenger names
> combined$Title <- gsub('(.*, )|(\\..*)', '', combined$Name)
> 
> # Titles with very low cell counts to be combined to "rare" level
> rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', 
+                 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
> 
> # Also reassign mlle, ms, and mme accordingly
> combined$Title[combined$Title == 'Mlle']        <- 'Miss' 
> combined$Title[combined$Title == 'Ms']          <- 'Miss'
> combined$Title[combined$Title == 'Mme']         <- 'Mrs' 
> combined$Title[combined$Title %in% rare_title]  <- 'Rare_Title'
> 
> # Show title counts by sex again
> table(combined$Sex, combined$Title)
        
         Master Miss  Mr Mrs Rare_Title
  female      0  264   0 198          4
  male       61    0 757   0         25
> 
> # Finally, grab surname from passenger name
> 
> combined$Surname <- sapply(combined$Name,  
+                       function(x) strsplit(x, split = '[,.]')[[1]][1])
> 
> # Create a family variable 
> combined$Fam <- paste(combined$Surname, combined$FamSize, sep='_')
> 
> # Discretize family size
> combined$Fam_SizeD[combined$FamSize == 1] <- 'single'
> combined$Fam_SizeD[combined$FamSize < 5 & combined$FamSize > 1] <- 'small'
> combined$Fam_SizeD[combined$FamSize > 4] <- 'large'
> 
> # Make variables factors into factors
> factor_vars <- c('PassengerId','Pclass','Sex','Embarked',
+                  'Title','Surname','Fam','Fam_SizeD')
> 
> combined[factor_vars] <- lapply(combined[factor_vars], function(x) as.factor(x))
> 
> # Set a random seed
> set.seed(129)
> 
> # Perform mice imputation, excluding certain less-than-useful variables:
> mice_mod <- mice(combined[, !names(combined) %in% c('PassengerId','Name','Ticket','Cabin','Fam','Surname','Survived')], method='rf') 

 iter imp variable
  1   1  Age
  1   2  Age
  1   3  Age
  1   4  Age
  1   5  Age
  2   1  Age
  2   2  Age
  2   3  Age
  2   4  Age
  2   5  Age
  3   1  Age
  3   2  Age
  3   3  Age
  3   4  Age
  3   5  Age
  4   1  Age
  4   2  Age
  4   3  Age
  4   4  Age
  4   5  Age
  5   1  Age
  5   2  Age
  5   3  Age
  5   4  Age
  5   5  Age
Warning message:
Number of logged events: 25 
> 
> # Save the complete output 
> mice_output <- complete(mice_mod)
> 
> # Plot age distributions
> par(mfrow=c(1,2))
> hist(combined$Age, freq=F, main='Age: Original Data', 
+   col='darkgreen', ylim=c(0,0.04))
> hist(mice_output$Age, freq=F, main='Age: MICE Output', 
+   col='lightgreen', ylim=c(0,0.04))
> 
> # Replace Age variable from the mice model.
> combined$Age <- mice_output$Age
> 
> # Show new number of missing Age values
> sum(is.na(combined$Age))
[1] 0
> 
> # First we'll look at the relationship between age & survival
> ggplot(combined[1:891,], aes(Age, fill = factor(Survived))) + 
+   geom_histogram(binwidth=2) + 
+   facet_grid(.~Sex) + 
+   theme_few()
> 
> # Split the data back into a train set and a test set
> train <- combined[1:891,]
> test <- combined[892:1309,]
> 
> # Create the column child, and indicate whether child or adult
> combined$Status[combined$Age < 18] <- 'Child'
> combined$Status[combined$Age >= 18] <- 'Adult'
> 
> # Show counts
> table(combined$Status, combined$Survived)
       
          0   1
  Adult 479 272
  Child  70  70
> 
> # Adding Mother variable
> combined$Mother <- 'Not Mother'
> combined$Mother[combined$Sex == 'female' & combined$Parch > 0 & combined$Age > 18 & combined$Title != 'Miss'] <- 'Mother'
> 
> # Show counts
> table(combined$Mother, combined$Survived)
            
               0   1
  Mother      16  39
  Not Mother 533 303
> 
> # Finish by factorizing our two new factor variables
> combined$Status  <- factor(combined$Status)
> combined$Mother <- factor(combined$Mother)
> 
> md.pattern(combined)
    PassengerId Pclass Name Sex Age SibSp Parch Ticket Fare Embarked FamSize
204           1      1    1   1   1     1     1      1    1        1       1
687           1      1    1   1   1     1     1      1    1        1       1
91            1      1    1   1   1     1     1      1    1        1       1
327           1      1    1   1   1     1     1      1    1        1       1
              0      0    0   0   0     0     0      0    0        0       0
    Title Surname Fam Fam_SizeD Status Mother Survived Cabin     
204     1       1   1         1      1      1        1     1    0
687     1       1   1         1      1      1        1     0    1
91      1       1   1         1      1      1        0     1    1
327     1       1   1         1      1      1        0     0    2
        0       0   0         0      0      0      418  1014 1432
> 
> # Set a random seed
> set.seed(1000)
> 
> # Build the model (note: not all possible variables are used)
> RanFor_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + 
+                                             Fare + Embarked + Title + 
+                                             Fam_SizeD,
+                                             data = train,
+                                             ntree = 900,
+                                             mtry = 6,
+                                             nodesize = 0.01 * nrow(test))
> 
> # Show model error
> plot(RanFor_model, ylim=c(0,0.36))
> legend('bottomleft',colnames(RanFor_model$err.rate), col=1:3, fill=1:3, bty='n', lty=1:3, cex=0.8)
> 
> # Get importance
> importance <- importance(RanFor_model)
> varImportance <- data.frame(Variables = row.names(importance), 
+                             Importance = round(importance[ ,'MeanDecreaseGini'],2))
> 
> # Create a rank variable based on importance
> rankImportance <- varImportance %>%
+   mutate(Rank = paste0('#',dense_rank(desc(Importance))))
> 
> # Use ggplot2 to visualize the relative importance of variables
> ggplot(rankImportance, aes(x = reorder(Variables, Importance), 
+     y = Importance, fill = Importance)) +
+   geom_bar(stat='identity') + 
+   geom_text(aes(x = Variables, y = 0.5, label = Rank),
+     hjust=0, vjust=0.55, size = 4, colour = 'red') +
+   labs(x = 'Variables') +
+   coord_flip() + 
+   theme_few()
> 
> # Predict using the test set
> prediction <- predict(RanFor_model, test)
> 
> # Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)
> solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
> 
> # Write the solution to file
> write.csv(solution, file = 'RanFor_Solution.csv', row.names = F)
> 
> proc.time()
   user  system elapsed 
  4.848   0.286   5.165 
