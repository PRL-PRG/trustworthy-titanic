{"cells":[{"metadata":{"trusted":true,"_uuid":"7d1ec673551dac5fbae7862f98d037ac270c0cba"},"cell_type":"code","source":"","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"35ec8b2c76008bf2b018496f79956c35431d90f8","_execution_state":"idle","trusted":true},"cell_type":"code","source":"## Importing packages\n\n# This R environment comes with all of CRAN and many other helpful packages preinstalled.\n# You can see which packages are installed by checking out the kaggle/rstats docker image: \n# https://github.com/kaggle/docker-rstats\n\nlibrary(tidyverse) # metapackage with lots of helpful functions\n\n## Running code\n\n# In a notebook, you can run a single code cell by clicking in the cell and then hitting \n# the blue arrow to the left, or by clicking in the cell and pressing Shift+Enter. In a script, \n# you can run code by highlighting the code you want to run and then clicking the blue arrow\n# at the bottom of this window.\n\n## Reading in files\n\n# You can access files from datasets you've added to this kernel in the \"../input/\" directory.\n# You can see the files added to this kernel by running the code below. \n\nlist.files(path = \"../input\")\n\n## Saving data\n\n# If you save any files or images, these will be put in the \"output\" directory. You \n# can see the output directory by committing and running your kernel (using the \n# Commit & Run button) and then checking out the compiled version of your kernel.\n\ntrain <- list.files(path = \"../input/Titanic:Machine Learning from Disaster/train\")\ntest <- list.files(path = \"../input/Titanic:Machine Learning from Disaster/test\")\n\n\n\n\n# combining the datasets: DPLYR - bind_rows\ncombined <- bind_rows(train, test)\n\n# Univariate Analysis ####\n# Age\nhist(combined$Age)\nsummary(combined$Age) # Min is 17 Months Baby and Max is 80 Years.\n\n# Survived Column\ntable(train$Survived)\nround(prop.table(table(train$Survived))*100,2) # convert the data in %age\n# 62% People Died and ~38% people survived\n\n# Create a Histogram of Age basis Survived Column\n# People who Survived or Died in terms of Age.\np1 <- ggplot(train, aes(Age, fill=factor(Survived)))+geom_histogram(bins = 30)+\n  labs(title=\"Titanic: Survived Basis Age\")\n\n# Gender Wise Survival\np2 <- ggplot(train, aes(Sex,fill=factor(Survived)))+\n  geom_bar(stat = \"count\", position = \"dodge\")+\n  labs(title=\"Titanic: Survived Basis Gender\")\n\n# Age Vs S & Gender Vs S\n# Combine all these 03...Age Gender and Survived\np3 <- ggplot(train, aes(Age, fill=factor(Survived)))+geom_histogram(bins = 30)+\n  xlab(\"Age\")+ylab(\"Count\")+facet_grid(.~Sex)+ggtitle(\"Survived ~ Age Vs Sex\")\n\nlibrary(cowplot)\nplot1 <- plot_grid(p1,p2, nrow = 1)\nplot_grid(p3, plot1, ncol = 1)\n\n# Family (SIBSP + PARCH)\ncombined$Family <- combined$SibSp+combined$Parch+1 # 1 is added to signify the people travel Alone.\n\n# Large Families Sink Together whereas Lone Travellers or Small Families have better survival chances.\ncombined$Family==1 # if family equates to 01 - Singles else if the family >1 <5 - Small else large\ncombined$family_cat[combined$Family==1] <- \"Singles\" # Case 01\ncombined$family_cat[combined$Family>1 & combined$Family<5] <- \"Small\"\ncombined$family_cat[combined$Family>4] <- \"Large\"\ntable(combined$family_cat)\ncombined$family_cat <- factor(combined$family_cat)\n\n\n# Name of the Passengers - Extract the Titles and create a new col of Titles\n?strsplit\nsapply(strsplit(combined$Name, split = \",\"), head,1)\nfirstname <- sapply(strsplit(combined$Name, split = \",\"), tail,1)\ntitles <- sapply(strsplit(firstname, split = \". \"), head,1)\ntable(titles)\n\n# Create Column of Titles\ncombined <- mutate(combined, titles)\n\n# We will put Others for the rest of the names\nTitle.Ignore <- c(\" Capt\",\" Col\", \" Don\", \" Dona\", \" Dr\", \" Jonkheer\", \" Lady\",\n                  \" Major\", \" Mlle\", \" Mme\", \" Rev\", \" Sir\", \" th\")\n\n# To Convert these titles into others\ncombined$titles[combined$titles %in% Title.Ignore] <- \"Others\"\ncombined$titles[combined$titles==\" Ms\"] <- \" Miss\"\nstr(combined$titles)\ncombined$titles <- factor(combined$titles)\ntable(combined$titles)\n\n# Split the Data\ntrain_new <- combined[1:891,]\ntest_new <- combined[892:1309,]\ntest_new$Survived <- NULL # Removing Survived Col\n\n# Missing Values - na.roughfix\ntrain_new$Name <- factor(train_new$Name)\ntrain_new$Ticket <- factor(train_new$Ticket)\ntrain_new$Cabin <- factor(train_new$Cabin)\n\nlibrary(randomForest)\nsum(is.na(train_new))\ntrain_new <- na.roughfix(train_new)\n\nstr(test_new)\ntest_new$Name <- factor(test_new$Name)\ntest_new$Ticket <- factor(test_new$Ticket)\ntest_new$Cabin <- factor(test_new$Cabin)\nsum(is.na(test_new))\ntest_new <- na.roughfix(test_new)\n\n# time to make a decision tree model and do some predictions\n\nlibrary(rpart)\ntitanic.dtree <- rpart(Survived~Pclass+Sex+Age+SibSp+Parch+\n                         Fare+Embarked+Family+family_cat+titles,\n                       data = train_new, method = \"class\")\nlibrary(partykit)\nplot(as.party(titanic.dtree))\n\n# Prediction \ntitanic.predict <- predict(titanic.dtree, test_new, type = \"class\")\n\nsolution <- data.frame(PassengerId=test_new$PassengerId, \n                       Survived=titanic.predict)\nwrite.csv(solution, file = \"Titanic DTREE Submission.csv\", row.names = F)\n\n","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}