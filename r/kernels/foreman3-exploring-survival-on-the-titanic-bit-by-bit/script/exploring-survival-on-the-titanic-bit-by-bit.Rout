
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## ---- message = FALSE------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Load packages
> library('ggplot2') # visualization
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library('ggthemes') # visualization
> library('scales') # visualization
Warning message:
package ‘scales’ was built under R version 3.6.2 
> library('dplyr') # data manipulation

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> library('mice') # imputation

Attaching package: ‘mice’

The following objects are masked from ‘package:base’:

    cbind, rbind

Warning message:
package ‘mice’ was built under R version 3.6.2 
> library('randomForest') # classification algorithm
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:dplyr’:

    combine

The following object is masked from ‘package:ggplot2’:

    margin

> 
> 
> ## ---- message=FALSE, warning=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train <- read.csv('../input/train.csv', stringsAsFactors = F)
> test  <- read.csv('../input/test.csv', stringsAsFactors = F)
> 
> full  <- bind_rows(train, test) # bind training & test data
> 
> # check data
> str(full)
'data.frame':	1309 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : chr  "male" "female" "female" "female" ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  "" "C85" "" "C123" ...
 $ Embarked   : chr  "S" "C" "S" "S" ...
> 
> 
> ## ---- message=FALSE, warning=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Grab title from passenger names
> full$Title <- gsub('(.*, )|(\\..*)', '', full$Name)
> 
> # Show title counts by sex
> table(full$Sex, full$Title)
        
         Capt Col Don Dona  Dr Jonkheer Lady Major Master Miss Mlle Mme  Mr Mrs
  female    0   0   0    1   1        0    1     0      0  260    2   1   0 197
  male      1   4   1    0   7        1    0     2     61    0    0   0 757   0
        
          Ms Rev Sir the Countess
  female   2   0   0            1
  male     0   8   1            0
> 
> royal_title <- c('Lady', 'the Countess', 'Sir')
> foreign_title <- c('Dona', 'Don', 'Jonkheer')
> military_title <- c('Capt', 'Col', 'Major')
> 
> # Titles with very low cell counts to be combined to "rare" level
> # BOB's TWEEK - Not including Rev in this list, based on another's recommendation... Good Revs didn't make it
> 
> 
> rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', 
+                 'Dr', 'Major', 'Sir', 'Jonkheer')
> 
> 
> # Also reassign mlle, ms, and mme accordingly
> full$Title[full$Title == 'Mlle']        <- 'Miss' 
> full$Title[full$Title == 'Ms']          <- 'Miss'
> full$Title[full$Title == 'Mme']         <- 'Mrs' 
> full$Title[full$Title %in% royal_title]  <- 'Royal'
> full$Title[full$Title %in% military_title]  <- 'Military'
> full$Title[full$Title %in% foreign_title]  <- 'Exotic'
> 
> # Show title counts by sex again
> table(full$Sex, full$Title)
        
          Dr Exotic Master Military Miss  Mr Mrs Rev Royal
  female   1      1      0        0  264   0 198   0     2
  male     7      2     61        7    0 757   0   8     1
> 
> # Finally, grab surname from passenger name
> full$Surname <- sapply(full$Name,  
+                       function(x) strsplit(x, split = '[,.]')[[1]][1])
> 
> 
> ## ----results='asis'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> cat(paste('We have <b>', nlevels(factor(full$Surname)), '</b> unique surnames. I would be interested to infer ethnicity 
+ based on surname (Said Megan - Id have no idea how to do that)'))
We have <b> 875 </b> unique surnames. I would be interested to infer ethnicity 
based on surname (Said Megan - Id have no idea how to do that)> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Create a family size variable including the passenger themselves
> full$Fsize <- full$SibSp + full$Parch + 1
> 
> # Create a family variable 
> full$Family <- paste(full$Surname, full$Fsize, sep='_')
> 
> 
> ## ---- message=FALSE, warning=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Use ggplot2 to visualize the relationship between Title & survival
> ggplot(full[1:891,], aes(x = Title, fill = factor(Survived))) +
+   geom_bar(stat='count', position='dodge') +
+   labs(x = 'Title') +
+   theme_few()
> 
> 
> ## ---- message=FALSE, warning=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Use ggplot2 to visualize the relationship between family size & survival
> ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
+   geom_bar(stat='count', position='dodge') +
+   scale_x_continuous(breaks=c(1:11)) +
+   labs(x = 'Family Size') +
+   theme_few()
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Discretize family size
> full$FsizeD[full$Fsize == 1] <- 'singleton'
> full$FsizeD[full$Fsize > 1] <- 'pairs'
> full$FsizeD[full$Fsize > 2] <- 'micro'
> full$FsizeD[full$Fsize > 4] <- 'mid'
> full$FsizeD[full$Fsize > 7] <- 'large'
> 
> 
> # Show family size by survival using the same plot types
> 
> # Use ggplot2 to visualize the relationship between family size & survival
> ggplot(full[1:891,], aes(x = FsizeD, fill = factor(Survived))) +
+   geom_bar(stat='count', position='dodge') +
+   labs(x = 'Family Size D') +
+   theme_few()
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # This variable appears to have a lot of missing values
> full$Cabin[1:28]
 [1] ""            "C85"         ""            "C123"        ""           
 [6] ""            "E46"         ""            ""            ""           
[11] "G6"          "C103"        ""            ""            ""           
[16] ""            ""            ""            ""            ""           
[21] ""            "D56"         ""            "A6"          ""           
[26] ""            ""            "C23 C25 C27"
> 
> # The first character is the deck. For example:
> strsplit(full$Cabin[2], NULL)[[1]]
[1] "C" "8" "5"
> 
> # Create a Deck variable. Get passenger deck A - F:
> full$Deck<-factor(sapply(full$Cabin, function(x) strsplit(x, NULL)[[1]][1]))
> 
> # Use ggplot2 to visualize the relationship between family size & survival
> ggplot(full[1:891,], aes(x = Deck, fill = factor(Survived))) +
+   geom_bar(stat='count', position='dodge') +
+   labs(x = 'Deck') +
+   theme_few()
>   
> # Hum, who has a known Deck?
> table(full$Pclass, full$Deck)
   
     A  B  C  D  E  F  G  T
  1 22 65 94 40 34  0  0  1
  2  0  0  0  6  4 13  0  0
  3  0  0  0  0  3  8  5  0
> 
> 
> #Did we look at survival by Class?
> # Use ggplot2 to visualize the relationship between Class & survival
> ggplot(full[1:891,], aes(x = Pclass, fill = factor(Survived))) +
+   geom_bar(stat='count', position='dodge') +
+   labs(x = 'Class') +
+   theme_few()
>   
>   
> #How may did the classes do, that had a known cabin?
> table(full$Survived[!is.na(full$Deck)], full$Pclass[!is.na(full$Deck)])
   
      1   2   3
  0  59   3   6
  1 117  13   6
>   
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Passengers 62 and 830 are missing Embarkment
> full[c(62, 830, 1, 2, 3), 'Embarked']
[1] ""  ""  "S" "C" "S"
> full[c(62, 830, 1, 2, 3), 'Fare']
[1] 80.0000 80.0000  7.2500 71.2833  7.9250
> full[c(62, 830, 1, 2, 3), 'Age']
[1] 38 62 22 38 26
> full[c(62, 830, 1, 2, 3), 'Pclass']
[1] 1 1 3 1 3
> full[c(62, 830, 1, 2, 3), 'Deck']
[1] B    B    <NA> C    <NA>
Levels: A B C D E F G T
> 
> 
> ## ----results='asis'--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> cat(paste('We will infer their values for **embarkment** based on present data that we can imagine
+ may be relevant: **passenger class** and **fare**. We see that they paid<b> $', full[c(62, 830), 'Fare'][[1]][1],
+ '</b>and<b> $', full[c(62, 830), 'Fare'][[2]][1], '</b>respectively and their classes are<b>', full[c(62, 830),
+ 'Pclass'][[1]][1], '</b>and<b>', full[c(62, 830), 'Pclass'][[2]][1], '</b>. So from where did they embark?'))
We will infer their values for **embarkment** based on present data that we can imagine
may be relevant: **passenger class** and **fare**. We see that they paid<b> $ 80 </b>and<b> $ 80 </b>respectively and their classes are<b> 1 </b>and<b> 1 </b>. So from where did they embark?> 
> 
> ## ---- message=FALSE, warning=FALSE-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Get rid of our missing passenger IDs
> embark_fare <- full %>%
+   filter(PassengerId != 62 & PassengerId != 830)
> 
> # Use ggplot2 to visualize embarkment, passenger class, & median fare
> ggplot(embark_fare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +
+   geom_boxplot() +
+   geom_hline(aes(yintercept=80), 
+     colour='red', linetype='dashed', lwd=2) +
+   scale_y_continuous(labels=dollar_format()) +
+   theme_few()
Warning message:
Removed 1 rows containing non-finite values (stat_boxplot). 
> 
> 
> proc.time()
   user  system elapsed 
  1.576   0.084   1.667 
