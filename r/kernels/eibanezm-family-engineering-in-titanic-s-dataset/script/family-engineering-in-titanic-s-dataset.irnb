{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "eb4c6f8c-e2a0-e1f3-363f-de7cc862eb37"
      },
      "source": [
        "\n",
        "In the first examinations of Titanic's data it seems that a lot of men perished, while the survival probabilities of women and children were higher. It seems to reflect the application of a 'children and women first' protocol to some extent.\n",
        "It is possible to classify passengers as 'Mr', 'Mss', 'Mrs' or 'Master' using plain title information inside their Names, but it would be nice if we could know if a passenger was a child, a mother, a father, or even was traveling with his/her spouse but without children, and so on. I am going to elaborate on family roles of passengers, starting from:\n",
        "\n",
        " - Title inside passenger's Name,\n",
        " - Number of siblings/spouse (SibSp),\n",
        " - Number of parents/children (Parch),\n",
        " - Age, and\n",
        " - Family, deduced from Surname and Ticket\n",
        "\n",
        "Let's start:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "74fa7b2f-0a5d-d3f6-8bcd-ef971e61c2e8"
      },
      "outputs": [],
      "source": [
        "library(dplyr)\n",
        "library(gmodels)\n",
        "train<-read.table('../input/train.csv', sep=',', stringsAsFactors=F, header=T)\n",
        "test<-read.table('../input/test.csv', sep=',', stringsAsFactors=F, header=T)\n",
        "# The two datasets, train and test, are binded together to form a 'full' dataset\n",
        "test$Survived <- NA\n",
        "full <- rbind(train, test)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "cd9fd739-af66-8229-8c4c-8a5b98ab16ef"
      },
      "source": [
        "I have created the variable 'Title' from the 'Name'.  It seems there are some titles that are quite similar, so I have grouped them:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "c4ba410e-694b-2e28-f5f2-451b93e89b39"
      },
      "outputs": [],
      "source": [
        "full$Title <- gsub('(.*, )|(\\\\..*)','', full$Name)\n",
        "group_by(full,Title) %>% summarize(count=n())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "5682704c-2dc3-d717-dc77-97c462cb2ea3"
      },
      "outputs": [],
      "source": [
        "full$Title[full$Title %in% c('Col', 'Major')]  <- 'Mil'\n",
        "full$Title[full$Title %in% c('Don', 'Capt', 'Jonkheer')]  <- 'Mr'\n",
        "full$Title[full$Title %in% c('Dona', 'Mme', 'Lady')]  <- 'Mrs'\n",
        "full$Title[full$Title %in% c('Ms', 'Mlle')]  <- 'Miss'\n",
        "full$Title[full$Title %in% c('Sir', 'the Countess')]  <- 'Noble'\n",
        "\n",
        "# adjust Mr/Master according to Age\n",
        "full$Title[full$Title == 'Master' & full$Age > 13] <- 'Mr'\n",
        "full$Title[full$Title == 'Mr' & full$Age <= 13] <- 'Master'\n",
        "# there are women married labeled as 'Miss':\n",
        "full$Name[grepl('Mrs',full$Name) & full$Title != 'Mrs']\n",
        "# so I adjust them:\n",
        "full$Title[grepl('Mrs',full$Name) & full$Title != 'Mrs'] <- 'Mrs'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "c4396ffd-94a4-ed60-0735-cd872a00c893"
      },
      "source": [
        "I am trying yo identify all the family members that were traveling together, in order to identify who was the father, the mother and the children.\n",
        "The rule applied to identify a family will be the following: the passengers of the family will share the same Surname and Ticket Number.\n",
        "However, there are cases when the same family members travel with more than one ticket. In this case it might be likely those ticket numbers to be correlative, so I will try to detect it:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "ac0e6391-514d-fd0d-2f41-e436692b345c"
      },
      "outputs": [],
      "source": [
        "# new variable 'Surname' added:\n",
        "full$Surname <- gsub('(, .*)','',full$Name)\n",
        "\n",
        "# some tickets have non-numeric characters before the number; they must be removed:\n",
        "CastTicketsToNumbers <- function(ticket) {\n",
        "    resultado <- ticket\n",
        "    for (i in seq(1,length(ticket))) {\n",
        "        espacio <- regexpr(' ', ticket[i])[1]\n",
        "        if (espacio > 0) {\n",
        "            resultado[i] <- substr(ticket[i],espacio+1,nchar(ticket[i]))\n",
        "            if (is.na(suppressWarnings(as.numeric(resultado[i])))) {\n",
        "                espacio <- regexpr(' ', resultado[i])[1]\n",
        "                if (espacio > 0) resultado[i] <- substr(resultado[i],espacio+1,nchar(resultado[i]))\n",
        "            }\n",
        "        }\n",
        "    }\n",
        "   resultado\n",
        "}\n",
        "full$TicketNumber <- CastTicketsToNumbers(full$Ticket)\n",
        "    \n",
        "# now there are only 4 passengers with tickets not numeric:\n",
        "full[is.na(as.numeric(full$TicketNumber)),]\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "2a59eccb-259f-c1f8-e944-f3396e359086"
      },
      "source": [
        "After that, I have created a new variable 'TicketAlt' that takes into account those cases when one family travels with two (or more) correlative ticket numbers:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "c9ecf935-e0ef-87e8-3521-f27d69360259"
      },
      "outputs": [],
      "source": [
        "x <- group_by(full, TicketNumber, Surname) %>% summarize(n=n()) %>% arrange(TicketNumber, Surname)\n",
        "x$TicketAlt <- x$TicketNumber\n",
        "previous_ticket <- -1\n",
        "previous_surname <- ''\n",
        "for (i in seq(1, nrow(x))) {\n",
        "    if ((suppressWarnings(as.numeric(x[i,1])) - previous_ticket == 1) & (x[i,2] == previous_surname)) \n",
        "        x$TicketAlt[i] <- previous_ticket\n",
        "    else {\n",
        "        previous_ticket <- suppressWarnings(as.numeric(x[i,1]))\n",
        "        previous_surname <- x[i,2]\n",
        "    }\n",
        "}\n",
        "full <- merge(full, x)\n",
        "full <- merge(full, group_by(full,TicketAlt) %>% summarize(GroupSize=n()))\n",
        "full$Family <- paste(full$Surname, full$TicketAlt)\n",
        "full <- merge(full, group_by(full,Family) %>% summarize(FamilySize=n()))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "686dd5f6-e7c5-fad8-e7a4-9adc0bca718f"
      },
      "source": [
        "I have defined some rules in a data frame named 'fc'. Each rule match values of FamilySize, SibSp and Parch with a ruleId and a Type. The objective is that the Type variable will tell which role the passenger plays in the family:\n",
        "\n",
        " - 'child': if travels with parent(s)\n",
        " - 'parent': if travels with child(s)\n",
        " - 'brother': if travels with brothers and without parents\n",
        " - 'alone': (self-explanatory)\n",
        " - 'unknown': when the pair of values (SibSp, Parch) might be applied to more than one case. For instance, SibSp=1 and Parch=1 might mean 'parent traveling with spouse and one child' or 'child traveling with one sibling and one parent'.\n",
        "\n",
        "Later, 'parent' will be transformed in 'father' or 'mother' (based on 'Sex'), and we will try to solve the 'unknown' into 'father', 'mother', 'child' or 'husband'/'wife' (in the case the spouses travel without children).\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "b41cf9d6-f346-1acd-7111-1feeaf9369c3"
      },
      "outputs": [],
      "source": [
        "fc <- data.frame(\n",
        "\tFamilySize=c(1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 11, 11, 11, 11, 4),\n",
        "\tSibSp=c(0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 2, 0, 3, 1, 3, 0, 4, 1, 4, 0, 5, 1, 5, 0, 6, 1, 8, 0, 9, 3), \n",
        "\tParch=c(0, 0, 1, 0, 1, 2, 2, 3, 1, 3, 2, 4, 1, 4, 2, 5, 1, 5, 2, 6, 1, 6, 2, 7, 1, 9, 2, 10, 1, 0),\n",
        "\truleId=c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29),\n",
        "\tType=c('alone', 'unknown', 'unknown', 'brother', 'unknown', 'unknown', 'unknown', 'parent', 'child', 'parent', 'child', 'parent', \n",
        "\t\t'child', 'parent', 'child', 'parent', 'child', 'parent', 'child', 'parent', 'child', 'parent', 'child', 'parent', 'child', 'parent',\n",
        "\t\t'child', 'parent', 'child', 'brother'),\n",
        "    stringsAsFactors=F\n",
        ")\n",
        "fc"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "22509d45-2683-a63f-fd88-4a849692fd47"
      },
      "outputs": [],
      "source": [
        "# merging both data frames, full and fc, will add a new column 'Type' in full data frame:\n",
        "full <- merge(x=full, y=fc, all.x=T)\n",
        "\n",
        "sum(is.na(full$Type))\n",
        "# there are 117 rows that could not be properly classified.\n",
        "# The causes are multiple:\n",
        "# a) Surnames registered not exactly in the same way\n",
        "#    for all family members (for instance, Frolicher's Family)\n",
        "# b) Family structures more complex than envisaged (with grandparents, unlces, etc).\n",
        "#    Although the maiden name is present in the 'Name' column, I have not even tried to use it.\n",
        "# c) Family members travelling with several tickets that are not correlative.\n",
        "# d) Mistakes registering 'SibSp' and 'Parch' values ?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "a6948c1d-2dfe-8ae7-5f26-c12de8aeee4e"
      },
      "outputs": [],
      "source": [
        "# However, some data manipulation can be made in order to classify the passengers:\n",
        "filter.1 <- (filter(full, is.na(Type)) %>% group_by(Family, FamilySize) %>% summarize(n=n()) %>% \n",
        "             filter(n != FamilySize))$Family\n",
        "full[full$Family %in% filter.1 & full$FamilySize==2 & is.na(full$ruleId), \n",
        "     c('SibSp', 'Parch', 'ruleId', 'Type')] <- list(1, 0, 1, 'unknown')\n",
        "full[full$Family %in% filter.1 & full$FamilySize==3, \n",
        "     c('SibSp', 'Parch', 'ruleId', 'Type')] <- list(1, 1, 4, 'unknown')\n",
        "\n",
        "filter.2 <- (filter(full, is.na(Type)) %>% group_by(Family, FamilySize) %>% summarize(n=n()) %>% \n",
        "             filter(n == FamilySize))$Family\n",
        "full[full$Family %in% filter.2 & full$SibSp==0 & full$Parch==0, \n",
        "     c('SibSp', 'Parch', 'ruleId', 'Type')] <- list(1, 0, 1, 'unknown')\n",
        "\n",
        "filter.3 <- (filter(full, is.na(Type)) %>% group_by(Family, FamilySize) %>% summarize(n=n()) %>% \n",
        "             filter(n == FamilySize))$Family\n",
        "filter.4 <- (filter(full, Family %in% filter.3) %>% group_by(Surname) %>% summarize(n=n()) %>% \n",
        "             filter(n == 2))$Surname\n",
        "full[full$Surname %in% filter.4 & is.na(full$Type), \n",
        "     c('SibSp', 'Parch', 'FamilySize', 'ruleId', 'Type')] <- list(1, 0, 2, 1, 'unknown')\n",
        "\n",
        "filter.5 <- (filter(full, is.na(Type)) %>% group_by(Family) %>% summarize(n=n()) %>% \n",
        "             filter(n==1))$Family\n",
        "full[full$Family %in% filter.5 & is.na(full$Type), \n",
        "     c('SibSp', 'Parch', 'ruleId', 'Type')] <- list(0, 0, 0, 'alone')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "161c3ef1-82ca-edc8-4c60-6e08900a8e72"
      },
      "outputs": [],
      "source": [
        "# There are 5 rules (Id numbers 1, 2, 4, 5 and 6) that have 'Type'=='unknown'\n",
        "# Now we are going to assign them to the proper Type:\n",
        "\n",
        "# ruleId ==1 : husband and wife without chidren or brothers.\n",
        "# If one of them's Title is 'Mrs', then they are husband/wife\n",
        "full$Type[full$ruleId==1 & \n",
        "          full$Title=='Mrs' & \n",
        "          full$Family %in% (filter(full, ruleId==1, Sex=='male') %>% select(Family))[,1]] <- 'wife'\n",
        "full$Type[full$ruleId==1 & \n",
        "          full$Sex=='male' & \n",
        "          full$Family %in% (filter(full, ruleId==1, Title=='Mrs') %>% select(Family))[,1]] <- 'husband'\n",
        "full$Type[full$ruleId==1 & full$Type=='unknown'] <- 'brother'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "c828a638-6bb6-e084-4386-cc9b0ff132f1"
      },
      "outputs": [],
      "source": [
        "#ruleId ==2 : father or mother + child. The child is the youngest:\n",
        "minAgeRule2 <- filter(full, ruleId==2, !is.na(Age)) %>% group_by(Family, FamilySize) %>% summarize(total=n(), minimum=min(Age)) %>% filter(FamilySize==total)\n",
        "FindYoungest <- function(x,y) {\n",
        "    for (i in seq(nrow(x))) {\n",
        "        for (j in seq(nrow(y))) {\n",
        "            if (y$Family[j] == x$Family[i] & y$Type[j] == 'unknown' & y$Age[j] == x$minimum[i])\n",
        "                y$Type[j] <- 'child'\n",
        "        }\n",
        "    }\n",
        "y\n",
        "} \n",
        "full <- FindYoungest(minAgeRule2, full)\n",
        "full$Type[full$ruleId==2 & full$Type=='unknown' & full$Title=='Mrs'] <- 'mother'\n",
        "full$Type[full$ruleId==2 & full$Type=='unknown' & full$Title=='Miss'] <- 'child'\n",
        "full$Type[full$ruleId==2 & full$Type=='unknown' & full$Title=='Master'] <- 'child'\n",
        "full$Type[full$ruleId==2 & \n",
        "          full$Type=='unknown' & \n",
        "          full$Family %in% (filter(full, ruleId==2, Type=='mother') %>% select(Family))[,1]] <- 'child'\n",
        "full$Type[full$ruleId==2 & \n",
        "          full$Type=='unknown'& \n",
        "          full$Family %in% (filter(full, ruleId==2, Type=='child') %>% select(Family))[,1]] <- 'father'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "913d0338-ba2a-0be8-eb35-b6ab8727e49a"
      },
      "outputs": [],
      "source": [
        "# ruleId ==4 and 5: they could be 1 father or mother with 2 children, or father, mother and one child:\n",
        "# The child is the youngest:\n",
        "minAgeRule5 <- filter(full, ruleId %in% c(4,5), !is.na(Age)) %>% group_by(Family, FamilySize) %>% summarize(total=n(), minimum=min(Age)) %>% filter(FamilySize==total)\n",
        "full <- FindYoungest(minAgeRule5, full)\n",
        "full$Type[full$ruleId %in% c(4,5) & full$Title=='Mrs'] <- 'mother'\n",
        "full$Type[full$ruleId %in% c(4,5) & full$Title=='Master'] <- 'child'\n",
        "full$Type[full$ruleId %in% c(4,5) & full$Title=='Miss'] <- 'child'\n",
        "full$Type[full$ruleId %in% c(4,5) & \n",
        "          full$Type=='unknown' & \n",
        "          full$Family %in% (filter(full, ruleId %in% c(4,5), Type=='mother', SibSp==0) %>% select(Family))[,1]] <- 'child'\n",
        "full$Type[full$ruleId %in% c(4,5) & \n",
        "          full$Type=='unknown' & \n",
        "          full$Family %in% (filter(full, ruleId %in% c(4,5), Type=='mother', SibSp==1) %>% select(Family))[,1] & \n",
        "          full$Family %in% (filter(full, ruleId %in% c(4,5), Type=='child', SibSp==0) %>% select(Family))[,1] ] <- 'father'\n",
        "full$Type[full$ruleId %in% c(4,5) & \n",
        "          full$Type=='unknown'  & \n",
        "          !full$Family %in% (filter(full, ruleId %in% c(4,5), Type=='mother') %>% select(Family))[,1]] <- 'father'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "414aeefd-1452-ccec-6281-a4f53d72a774"
      },
      "outputs": [],
      "source": [
        "# ruleId ==6 : father, mother and 2 children\n",
        "minAgeRule6 <- filter(full, ruleId==6, !is.na(Age)) %>% group_by(Family, FamilySize) %>% summarize(total=n(), minimum=min(Age)) %>% filter(FamilySize==total)\n",
        "full <- FindYoungest(minAgeRule6, full)\n",
        "full$Type[full$ruleId==6 & full$Title=='Mrs'] <- 'mother'\n",
        "full$Type[full$ruleId==6 & full$Title=='Master'] <- 'child'\n",
        "full$Type[full$ruleId==6 & full$Title=='Miss'] <- 'child'\n",
        "full$Type[full$ruleId==6 & \n",
        "          full$Type=='unknown' & \n",
        "          full$Family %in% (filter(full, ruleId==6, Type!='unknown') %>% group_by(Family) %>% summarize(n=n()) %>% filter(n==3))$Family] <- 'father'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "61c9ae21-32e4-7902-9f72-3f95d3e1cd67"
      },
      "outputs": [],
      "source": [
        "# finally, we separate mothers and fathers of the previous rules:\n",
        "full$Type[full$Type=='parent' & full$Sex=='female'] <- 'mother'\n",
        "full$Type[full$Type=='parent' & full$Sex=='male'] <- 'father'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "374a1e61-fe75-f6f6-03bf-04a2370e1515"
      },
      "outputs": [],
      "source": [
        "# Let's see the results:\n",
        "with(filter(full,!is.na(Survived)), CrossTable(Type, Survived))"
      ]
    }
  ],
  "metadata": {
    "_change_revision": 0,
    "_is_fork": false,
    "kernelspec": {
      "display_name": "R",
      "language": "R",
      "name": "ir"
    },
    "language_info": {
      "codemirror_mode": "r",
      "file_extension": ".r",
      "mimetype": "text/x-r-source",
      "name": "R",
      "pygments_lexer": "r",
      "version": "3.3.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}