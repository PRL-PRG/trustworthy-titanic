
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> # This R environment comes with all of CRAN preinstalled, as well as many other helpful packages
> # The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats
> # For example, here's several helpful packages to load in 
> 
> library(ggplot2) # Data visualization
Warning message:
package â€˜ggplot2â€™ was built under R version 3.6.2 
> library(readr) # CSV file I/O, e.g. the read_csv function
> library(caret)
Loading required package: lattice
> library(pROC)
Type 'citation("pROC")' for a citation.

Attaching package: â€˜pROCâ€™

The following objects are masked from â€˜package:statsâ€™:

    cov, smooth, var

> 
> 
> # Input data files are available in the "../input/" directory.
> # For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory
> 
> system("ls ../input")
gender_submission.csv
test.csv
train.csv
> 
> # Any results you write to the current directory are saved as output.
> 
> train <- read_csv('../input/train.csv')
Parsed with column specification:
cols(
  PassengerId = [32mcol_double()[39m,
  Survived = [32mcol_double()[39m,
  Pclass = [32mcol_double()[39m,
  Name = [31mcol_character()[39m,
  Sex = [31mcol_character()[39m,
  Age = [32mcol_double()[39m,
  SibSp = [32mcol_double()[39m,
  Parch = [32mcol_double()[39m,
  Ticket = [31mcol_character()[39m,
  Fare = [32mcol_double()[39m,
  Cabin = [31mcol_character()[39m,
  Embarked = [31mcol_character()[39m
)
> test  <- read_csv('../input/test.csv')
Parsed with column specification:
cols(
  PassengerId = [32mcol_double()[39m,
  Pclass = [32mcol_double()[39m,
  Name = [31mcol_character()[39m,
  Sex = [31mcol_character()[39m,
  Age = [32mcol_double()[39m,
  SibSp = [32mcol_double()[39m,
  Parch = [32mcol_double()[39m,
  Ticket = [31mcol_character()[39m,
  Fare = [32mcol_double()[39m,
  Cabin = [31mcol_character()[39m,
  Embarked = [31mcol_character()[39m
)
> 
> library('dplyr') # data manipulation

Attaching package: â€˜dplyrâ€™

The following objects are masked from â€˜package:statsâ€™:

    filter, lag

The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

Warning message:
package â€˜dplyrâ€™ was built under R version 3.6.2 
> library('ggplot2') # Data Visualization
> library('ggthemes') # Data Visualization
> 
> options(warn = -1)
> # load train.csv
> train <- read.csv('../input/train.csv', stringsAsFactors = F)
> # load test.csv
> test  <- read.csv('../input/test.csv', stringsAsFactors = F)
> # combine them as a whole
> test$Survived <- NA
> full <- rbind(train,test)
> 
> head(train)
  PassengerId Survived Pclass
1           1        0      3
2           2        1      1
3           3        1      3
4           4        1      1
5           5        0      3
6           6        0      3
                                                 Name    Sex Age SibSp Parch
1                             Braund, Mr. Owen Harris   male  22     1     0
2 Cumings, Mrs. John Bradley (Florence Briggs Thayer) female  38     1     0
3                              Heikkinen, Miss. Laina female  26     0     0
4        Futrelle, Mrs. Jacques Heath (Lily May Peel) female  35     1     0
5                            Allen, Mr. William Henry   male  35     0     0
6                                    Moran, Mr. James   male  NA     0     0
            Ticket    Fare Cabin Embarked
1        A/5 21171  7.2500              S
2         PC 17599 71.2833   C85        C
3 STON/O2. 3101282  7.9250              S
4           113803 53.1000  C123        S
5           373450  8.0500              S
6           330877  8.4583              Q
> 
> #overall survival rate
> sum(train$Survived)/length(train$Survived)
[1] 0.3838384
> 
> # Sex vs Survived
> #male fare the worst
> ggplot(train[1:891,], aes(Sex, fill = factor(Survived))) + 
+   geom_bar(stat = "count", position = 'dodge')+
+   theme_few() +
+   xlab("Sex") +
+   ylab("Count") +
+   scale_fill_discrete(name = "Survived") + 
+   ggtitle("Sex vs Survived")
> 
> #Pclass vs Survived 
> ggplot(train[1:891,], aes(Pclass,fill = factor(Survived))) +
+   geom_bar(stat = "count")+
+   xlab('Pclass') +
+   ylab("Count") +
+   scale_fill_discrete(name = " Survived") + 
+   ggtitle("Pclass vs Survived")+
+   theme_few()
> 
> set.seed(2415784)
> train <- read.csv('../input/train.csv', stringsAsFactors = F)
> test  <- read.csv('../input/test.csv', stringsAsFactors = F)
> 
> total  <- bind_rows(train, test) 
> 
> # Extract title based on proximiy to . in string
> train$Title <- gsub('(.*, )|(\\..*)', '', train$Name) 
> table(train$Title)

        Capt          Col          Don           Dr     Jonkheer         Lady 
           1            2            1            7            1            1 
       Major       Master         Miss         Mlle          Mme           Mr 
           2           40          182            2            1          517 
         Mrs           Ms          Rev          Sir the Countess 
         125            1            6            1            1 
> 
> #no Rev survived
> sum(train$Survived[train$Title=='Rev'])
[1] 0
> 
> #survival rate for people whose `Age` is empty
> sum(subset(train,is.na(Age))$Survived)/length(subset(train,is.na(Age))$Survived)
[1] 0.2937853
> 
> #Embarked vs Survived
> ggplot(train[1:891,], aes(Embarked,fill = factor(Survived))) +
+   geom_bar(stat = "count")+
+   xlab('Embarked') +
+   ylab("Count") +
+   scale_fill_discrete(name = " Survived") + 
+   ggtitle("Embarked vs Survived")+
+   theme_few()
> 
> full$Child[full$Age < 12] <- 'Child'
> full$Child[full$Age >= 12] <- 'Adult'
> 
> ggplot(full[1:891,][full[1:891,]$Child == 'Child', ], aes(Pclass,fill = factor(Survived))) +
+   geom_bar(stat = "count")+
+   xlab('Pclass') +
+   ylab("Count") +
+   scale_fill_discrete(name = " Survived") + 
+   ggtitle("Pclass vs Survived")+
+   theme_few()
> 
> #Sadly, Capt Edward Smith went down with the ship. 
> train$Survived[train$Title == 'Capt']
[1] 0
> 
> max(train$Fare[train$Survived == 0])
[1] 263
> train$Name[train$Fare == max(train$Fare[train$Survived == 0])]
[1] "Fortune, Mr. Charles Alexander" "Fortune, Miss. Mabel Helen"    
[3] "Fortune, Miss. Alice Elizabeth" "Fortune, Mr. Mark"             
> 
> # Family Size
> # It help when Family size == 2, 3, 4 and hurt when Family size exceeds 4.
> full$Fsize <- full$SibSp + full$Parch + 1
> 
> ggplot(full[1:891,], aes(x = Fsize, fill = factor(Survived))) +
+   geom_bar(stat='count', position='dodge') +
+   scale_x_continuous(breaks=c(1:11)) +
+   xlab('Family Size') +
+   ylab("Count") +
+   theme_few()+
+   scale_fill_discrete(name = "Survived") + 
+   ggtitle("Family Size vs Survived")
> 
> # Step 1: Load + Clean Data
> Train = read.csv("../input/train.csv")
> Test = read.csv("../input/test.csv")
> 
> str(Train)
'data.frame':	891 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : Factor w/ 891 levels "Abbing, Mr. Anthony",..: 109 191 358 277 16 559 520 629 417 581 ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : Factor w/ 681 levels "110152","110413",..: 524 597 670 50 473 276 86 396 345 133 ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : Factor w/ 148 levels "","A10","A14",..: 1 83 1 57 1 1 131 1 1 1 ...
 $ Embarked   : Factor w/ 4 levels "","C","Q","S": 4 2 4 4 4 3 4 4 4 2 ...
> summary(Train)
  PassengerId       Survived          Pclass     
 Min.   :  1.0   Min.   :0.0000   Min.   :1.000  
 1st Qu.:223.5   1st Qu.:0.0000   1st Qu.:2.000  
 Median :446.0   Median :0.0000   Median :3.000  
 Mean   :446.0   Mean   :0.3838   Mean   :2.309  
 3rd Qu.:668.5   3rd Qu.:1.0000   3rd Qu.:3.000  
 Max.   :891.0   Max.   :1.0000   Max.   :3.000  
                                                 
                                    Name         Sex           Age       
 Abbing, Mr. Anthony                  :  1   female:314   Min.   : 0.42  
 Abbott, Mr. Rossmore Edward          :  1   male  :577   1st Qu.:20.12  
 Abbott, Mrs. Stanton (Rosa Hunt)     :  1                Median :28.00  
 Abelson, Mr. Samuel                  :  1                Mean   :29.70  
 Abelson, Mrs. Samuel (Hannah Wizosky):  1                3rd Qu.:38.00  
 Adahl, Mr. Mauritz Nils Martin       :  1                Max.   :80.00  
 (Other)                              :885                NA's   :177    
     SibSp           Parch             Ticket         Fare       
 Min.   :0.000   Min.   :0.0000   1601    :  7   Min.   :  0.00  
 1st Qu.:0.000   1st Qu.:0.0000   347082  :  7   1st Qu.:  7.91  
 Median :0.000   Median :0.0000   CA. 2343:  7   Median : 14.45  
 Mean   :0.523   Mean   :0.3816   3101295 :  6   Mean   : 32.20  
 3rd Qu.:1.000   3rd Qu.:0.0000   347088  :  6   3rd Qu.: 31.00  
 Max.   :8.000   Max.   :6.0000   CA 2144 :  6   Max.   :512.33  
                                  (Other) :852                   
         Cabin     Embarked
            :687    :  2   
 B96 B98    :  4   C:168   
 C23 C25 C27:  4   Q: 77   
 G6         :  4   S:644   
 C22 C26    :  3           
 D          :  3           
 (Other)    :186           
> 
> # fill in missing values for Age
> Train$Age[is.na(Train$Age)] = mean(Train$Age, na.rm = TRUE)
> Test$Age[is.na(Test$Age)] = mean(Test$Age, na.rm = TRUE)
> 
> 
> # Step 2: Create DF of independent/dependent variables
> nonvars = c("PassengerId","Name","Ticket","Embarked","Cabin")
> Train = Train[,!(names(Train) %in% nonvars)]
> str(Train)
'data.frame':	891 obs. of  7 variables:
 $ Survived: int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass  : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Sex     : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age     : num  22 38 26 35 35 ...
 $ SibSp   : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch   : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Fare    : num  7.25 71.28 7.92 53.1 8.05 ...
> 
> 
> # Step 3: Build a Logistic Regression Model
> TitanicLog1 = glm(Survived~., data = Train, family = binomial)
> summary(TitanicLog1)

Call:
glm(formula = Survived ~ ., family = binomial, data = Train)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.7129  -0.6032  -0.4273   0.6191   2.4186  

Coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept)  4.960445   0.532937   9.308  < 2e-16 ***
Pclass      -1.084297   0.139119  -7.794 6.49e-15 ***
Sexmale     -2.762930   0.199011 -13.883  < 2e-16 ***
Age         -0.039702   0.007797  -5.092 3.55e-07 ***
SibSp       -0.350725   0.109552  -3.201  0.00137 ** 
Parch       -0.111963   0.117400  -0.954  0.34024    
Fare         0.002852   0.002361   1.208  0.22718    
---
Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1186.66  on 890  degrees of freedom
Residual deviance:  788.73  on 884  degrees of freedom
AIC: 802.73

Number of Fisher Scoring iterations: 5

> 
> # Step 4: Revise Model
> TitanicLog2 = glm(Survived ~ . - Parch, data = Train, family = binomial)
> summary(TitanicLog2)

Call:
glm(formula = Survived ~ . - Parch, family = binomial, data = Train)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.7458  -0.5948  -0.4170   0.6109   2.4501  

Coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept)  4.942367   0.530775   9.312  < 2e-16 ***
Pclass      -1.098189   0.137969  -7.960 1.72e-15 ***
Sexmale     -2.726408   0.194561 -14.013  < 2e-16 ***
Age         -0.039385   0.007773  -5.067 4.05e-07 ***
SibSp       -0.378646   0.106212  -3.565 0.000364 ***
Fare         0.002373   0.002250   1.054 0.291707    
---
Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1186.66  on 890  degrees of freedom
Residual deviance:  789.65  on 885  degrees of freedom
AIC: 801.65

Number of Fisher Scoring iterations: 5

> 
> TitanicLog3 = glm(Survived ~ . - Parch - Fare, data = Train, family = binomial)
> summary(TitanicLog3)

Call:
glm(formula = Survived ~ . - Parch - Fare, family = binomial, 
    data = Train)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.6869  -0.6055  -0.4169   0.6111   2.4547  

Coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept)  5.191976   0.478346  10.854  < 2e-16 ***
Pclass      -1.172391   0.119725  -9.792  < 2e-16 ***
Sexmale     -2.739806   0.194142 -14.112  < 2e-16 ***
Age         -0.039793   0.007755  -5.131 2.88e-07 ***
SibSp       -0.357788   0.104033  -3.439 0.000583 ***
---
Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1186.66  on 890  degrees of freedom
Residual deviance:  790.84  on 886  degrees of freedom
AIC: 800.84

Number of Fisher Scoring iterations: 5

> 
> 
> # Step 5: Test Accuracy of Model on Training Data
> # predicted result of regression
> ans_logit = rep(NA,891)
> for(i in 1:891){
+   ans_logit[i] =as.integer(round(TitanicLog2$fitted.values[[i]],0))
+ }
> 
> # check result
> mean(ans_logit == train$Survived)
[1] 0.7923681
> table(ans_logit)
ans_logit
  0   1 
558 333 
> 
> table(train$Survived)

  0   1 
549 342 
> 
> conf_mat <- caret::confusionMatrix(as.factor(ans_logit), as.factor(train$Survived))  #convert int to factor
> conf_mat
Confusion Matrix and Statistics

          Reference
Prediction   0   1
         0 461  97
         1  88 245
                                          
               Accuracy : 0.7924          
                 95% CI : (0.7642, 0.8186)
    No Information Rate : 0.6162          
    P-Value [Acc > NIR] : <2e-16          
                                          
                  Kappa : 0.5589          
                                          
 Mcnemar's Test P-Value : 0.5564          
                                          
            Sensitivity : 0.8397          
            Specificity : 0.7164          
         Pos Pred Value : 0.8262          
         Neg Pred Value : 0.7357          
             Prevalence : 0.6162          
         Detection Rate : 0.5174          
   Detection Prevalence : 0.6263          
      Balanced Accuracy : 0.7780          
                                          
       'Positive' Class : 0               
                                          
> 
> library(ROCR) 
> auc(train$Survived, ans_logit)
Setting levels: control = 0, case = 1
Setting direction: controls < cases
Area under the curve: 0.778
> pred <- prediction(train$Survived, ans_logit)
> perf <- performance(pred, "tpr", "fpr")
> plot(perf)
> 
> proc.time()
   user  system elapsed 
  2.873   0.184   3.056 
