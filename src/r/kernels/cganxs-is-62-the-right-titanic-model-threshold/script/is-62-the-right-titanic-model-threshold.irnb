{"cells":[{"metadata":{"_uuid":"e327a7128869ee1eeaeffb6a7933e5c05e809dea"},"cell_type":"markdown","source":"# Summary\nThis is my first attempt at both a competition and writing a kernel. I used a random forest model to select features but pretty quickly hit a wall and stopped getting improvements in scores. The best score I got was  **0.79425**.\n\nBut then I had a thought. Why was I using 50% as the threshold to label a passenger as having survived? Is 50% the right threshold? This kernel attempts to show how I ended up picking a threshold of 62% and got a score of **0.82296**, an improvement of **2.871%!**\n\n#### Note: For some reason that I don't understand, the submission I ran locally scored 0.82296 but the submission through the kernel scores 0.81818.\n"},{"metadata":{"trusted":true,"_uuid":"c52112f15c851c1b3303322a0083f487c948b7de"},"cell_type":"markdown","source":"# Load packages and data\nCombine test and train for data clean up and scaling"},{"metadata":{"_uuid":"1cc82ef9fa3e79b3d7b04c8ff4e36c7c9cd39b4f","_execution_state":"idle","trusted":true,"_kg_hide-input":false,"_kg_hide-output":true,"scrolled":false},"cell_type":"code","source":"options(stringsAsFactors = FALSE)\nlibrary(reshape2)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(stringi)\nlibrary(rpart)\nlibrary(boot)\nlibrary(stringr)\nlibrary(randomForest)\nlibrary(e1071)\n\ntrain.df <- read.csv(\"../input/train.csv\")\nsubmission.df <- read.csv(\"../input/test.csv\")\ncombined.df <- bind_rows(train.df, submission.df)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"64164e488a0b0b0c174abe1a4d49f415cac4ac9e"},"cell_type":"markdown","source":"# Clean features.\n### Started by:\n* Recoding some features like port of embarkation and passenger class to a more descriptive name\n* Parsing out title and last name from name; grouped some like titles together\n* Parsing out ticket into prefix and ticket number\n* Parsing out cabin deck from cabin\n* Adding unskewed fare as fare seemed rather skewed\n* Adding dummy features"},{"metadata":{"_kg_hide-output":true,"_kg_hide-input":true,"trusted":true,"_uuid":"a0688618adf4746ba3ab8bf273eb04a4b572eaa0"},"cell_type":"code","source":"# Sex feature\ncategories <- factor(combined.df$Sex)\ncombined.df <- cbind(combined.df, \n                     model.matrix(~categories + 0))\ncolnames(combined.df) <- sub(\"categories\", \"\", colnames(combined.df))\nrm(categories)\n\n# Pclass feature\ncombined.df$Pclass <- ifelse(combined.df$Pclass == 1, \"Pclass.Upper\", \n                             ifelse(combined.df$Pclass == 2, \"Pclass.Middle\", \n                                    ifelse(combined.df$Pclass == 3, \"Pclass.Lower\", \"Pclass.Other\")))\ncategories <- factor(combined.df$Pclass)\ncombined.df <- cbind(combined.df, \n                     model.matrix(~categories + 0))\ncolnames(combined.df) <- sub(\"categories\", \"\", colnames(combined.df))\nrm(categories)\n\n# Port of Embarkation feature\ncombined.df$Embarked <- ifelse(combined.df$Embarked == \"C\", \"Cherbourg\", \n                               ifelse(combined.df$Embarked == \"Q\", \"Queenstown\", \n                                      ifelse(combined.df$Embarked == \"S\", \"Southampton\", \"Unknown\")))\ncategories <- factor(combined.df$Embarked)\ncombined.df <- cbind(combined.df, \n                     model.matrix(~categories + 0))\ncolnames(combined.df) <- sub(\"categories\", \"Embarked.\", colnames(combined.df))\nrm(categories)\n\n# Fare feature\ncombined.df$Fare[is.na(combined.df$Fare)] <- median(combined.df$Fare, na.rm = TRUE)\ncombined.df$Fare.Unskewed <- log(combined.df$Fare+1)\n\n# Cabin feature\ncombined.df$Cabin <- ifelse(combined.df$Cabin == \"\", \"Unknown\", combined.df$Cabin)\n\nCabin.Deck <- as.data.frame(\n  stri_extract_all_words(\n    gsub(\"[0-9]\",\"\" , \n         combined.df$Cabin,\n         ignore.case = TRUE), \n    simplify = T), \n  stringsAsFactors = F)\nnames(Cabin.Deck) <- c(\"Cabin.Deck\", \"Cabin.Deck2\", \"Cabin.Deck3\", \"Cabin.Deck4\")\nCabin.Deck$Cabin <- combined.df$Cabin\n\nCabin.Deck <- \n  Cabin.Deck[c(\"Cabin\", \"Cabin.Deck\")] %>%\n  group_by(Cabin, Cabin.Deck) %>%\n  summarise(n = n()) %>%\n  select(Cabin, Cabin.Deck) %>%\n  ungroup()\n\ncategories <- factor(Cabin.Deck$Cabin.Deck)\nCabin.Deck <- cbind(Cabin.Deck, \n                    model.matrix(~categories + 0))\ncolnames(Cabin.Deck) <- sub(\"categories\", \"Cabin.Deck.\", colnames(Cabin.Deck))\n\ncombined.df <- \n  combined.df %>%\n  left_join(Cabin.Deck, by = c(\"Cabin\" = \"Cabin\"))\nrm(categories, Cabin.Deck)\n\n# Ticket feature\nTicket.Number <- stri_extract_last_words(combined.df$Ticket)\ncombined.df$Ticket2 <- gsub(\"[^0-9A-Za-z///' ]\",\"\" , combined.df$Ticket ,ignore.case = TRUE)\ncombined.df$Ticket2 <- sub(\"/\", \"-\", combined.df$Ticket2)\nboundary.count <- stri_count_boundaries(combined.df$Ticket2)\nTicket.Parsed <- as.data.frame(stri_extract_all_words(combined.df$Ticket2, simplify = T), stringsAsFactors = F)\nTicket.Prefix <- \n  cbind(combined.df$Ticket, boundary.count, Ticket.Parsed) %>%\n  mutate(Ticket.Prefix = ifelse(boundary.count==1, \"None\", \n                                ifelse(boundary.count==2, V1, \n                                       ifelse(boundary.count==3, paste0(V1, \"-\", V2), paste0(V1, \"-\", V2,\"-\", V3))))) %>%\n  select(Ticket.Prefix)\ncombined.df <-   cbind(combined.df, Ticket.Number, Ticket.Prefix)\ncombined.df$Ticket2 <- NULL\ncombined.df$Ticket.Prefix <- toupper(combined.df$Ticket.Prefix)\ncombined.df$Ticket.Prefix <- sub(\"SOTON-\", \"\", combined.df$Ticket.Prefix)\ncombined.df$Ticket.Prefix <- sub(\"STON-\", \"\", combined.df$Ticket.Prefix)\ncombined.df$Ticket.Prefix <- sub(\"-BASLE\", \"\", combined.df$Ticket.Prefix)\ncombined.df$Ticket.Prefix <- sub(\"-SOTON\", \"\", combined.df$Ticket.Prefix)\ncombined.df$Ticket.Prefix <- sub(\"-PARIS\", \"\", combined.df$Ticket.Prefix)\ncombined.df$Ticket.Prefix <- sub(\"O-2\", \"O2\", combined.df$Ticket.Prefix)\ncombined.df$Ticket.Prefix <- sub(\"WE-P\", \"WEP\", combined.df$Ticket.Prefix)\ncabin.id.df <- unique(combined.df[c(\"Ticket.Prefix\", \"Ticket.Number\")]) \ncabin.id.df$CabinId <- seq.int(nrow(cabin.id.df))\ncombined.df <- \n  combined.df %>%\n  left_join(cabin.id.df, by = c(\"Ticket.Number\" = \"Ticket.Number\", \"Ticket.Prefix\" = \"Ticket.Prefix\"))\nrm(Ticket.Number, boundary.count, Ticket.Parsed, Ticket.Prefix, cabin.id.df)\n\n# Name feature; title\nName2 <- trimws(do.call(rbind, strsplit(combined.df$Name, \",\"))[,2])\nTitle <- trimws(do.call(rbind, stri_split_fixed(str = Name2, pattern = \".\", n = 2))[,1])\nrm(Name2)\nTitle <- sub(\"the \", \"\", Title)\nTitle <- sub(\"Mme\", \"Mrs\", Title)\nTitle <- sub(\"Dona\", \"Mrs\", Title)\nTitle <- sub(\"Don\", \"Mr\", Title)\nTitle <- sub(\"Mlle\", \"Miss\", Title)\nTitle <- sub(\"Countess\", \"Nobility\", Title)\nTitle <- sub(\"Jonkheer\", \"Nobility\", Title)\nTitle <- sub(\"Lady\", \"Nobility\", Title)\nTitle <- sub(\"Sir\", \"Nobility\", Title)\nTitle <- sub(\"Capt\", \"Military\", Title)\nTitle <- sub(\"Col\", \"Military\", Title)\nTitle <- sub(\"Major\", \"Military\", Title)\ncombined.df <- cbind(combined.df, Title)\n\ncategories <- factor(combined.df$Title)\ncombined.df <- cbind(combined.df, \n                     model.matrix(~categories + 0))\ncolnames(combined.df) <- sub(\"categories\", \"Name.Title.\", colnames(combined.df))\nrm(Title, categories)\n\n# Name feature; last name\ncombined.df$Name.Last <- trimws(do.call(rbind, strsplit(combined.df$Name, \",\"))[,1])","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"8a4867d56f3c917e953f27f0ebd9a6697c9fc050"},"cell_type":"markdown","source":"# Clean Age"},{"metadata":{"trusted":true,"_uuid":"dfb2d245b5cfdbb91ccb20e8f7155afc37781f78"},"cell_type":"code","source":"summary(combined.df$Age)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"91e873078f2c588a0884e55f49f7547da28d3b69"},"cell_type":"markdown","source":"263 passengers do not have age so I tried to use a random forest model to fill in missing age.\nI also added a feature to indicate if the age is estimated or not. My thinking was, why would the age of a survivor not be known?"},{"metadata":{"_kg_hide-output":true,"_kg_hide-input":true,"trusted":true,"_uuid":"8a9d8327a2dacf111751ebefbb9b9624d6862837"},"cell_type":"code","source":"# Scale the numerical variables only for age predictors\nage.df <- combined.df[c(\"PassengerId\", \"Age\")]\nage.names <- c(\"SibSp\", \"Parch\", \"Fare\", \"female\", \"male\", \"Pclass.Lower\", \"Pclass.Middle\", \n               \"Pclass.Upper\", \"Embarked.Cherbourg\", \"Embarked.Queenstown\", \"Embarked.Southampton\", \n               \"Embarked.Unknown\", \"Name.Title.Dr\", \"Name.Title.Master\", \"Name.Title.Military\", \n               \"Name.Title.Miss\", \"Name.Title.Mr\", \"Name.Title.Mrs\", \"Name.Title.Ms\", \n               \"Name.Title.Nobility\", \"Name.Title.Rev\")\n\nscaled.age.num <-\n  combined.df[ , (names(combined.df) %in% age.names)] %>%\n  scale()\nscaled.age.df <- cbind(age.df, scaled.age.num)\nrm(age.df, scaled.age.num)\n\nset.seed(1489) \n# Split between train, test and predict\nage.predict.df <- scaled.age.df[is.na(scaled.age.df$Age), ] \n\nage.estimated.df <- \n  scaled.age.df[!is.na(scaled.age.df$Age), ] %>%\n  filter(Age-floor(Age)>0)\n\nage.test.train.df <- \n  scaled.age.df[!is.na(scaled.age.df$Age), ] %>%\n  filter(Age >= 1 & floor(Age)-Age==0)\n\nsample <- sample.int(n = nrow(age.test.train.df), \n                     size = floor(.8*nrow(age.test.train.df)), \n                     replace = F)\nage.train.df <- age.test.train.df[sample, ] \nage.test.df  <- age.test.train.df[-sample, ] \n\n# Random forest model\nage_train_y <- age.train.df[, \"Age\"]\nage_train_x <- age.train.df[ , (names(age.train.df) %in% age.names)] \nage_test_y <- age.test.df[, \"Age\"]\nage_test_x <- age.test.df[ , (names(age.test.df) %in% age.names)] \n\nage_rf_model <- randomForest(age_train_x, \n                             y = age_train_y , \n                             ntree = 500, \n                             importance = TRUE)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"a65452097e556dac7fcc6f50bacf6ee557946be0"},"cell_type":"markdown","source":"Predicts age within 10 years. Could be improved but better than using average.\nFill in NA's in age with predicted age."},{"metadata":{"trusted":true,"_uuid":"b1ce942d5828742956c89b737408b510d02c3e29"},"cell_type":"code","source":"sqrt(mean(as.numeric((predict(age_rf_model) - age_train_y)^2)))\nsqrt(mean(((predict(age_rf_model, age_test_x) - age_test_y)^2)))","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-output":true,"_kg_hide-input":true,"trusted":true,"_uuid":"0e48aaa749d2e4b3b35e43e1fc4b218f49d23dbf"},"cell_type":"code","source":"PassengerId <- age.predict.df[, \"PassengerId\"]\nage_predict_x <- age.predict.df[ , (names(age.predict.df) %in% age.names)] \nage_predicted <- predict(age_rf_model, age_predict_x)\nage.predicted.df <- data.frame(cbind(PassengerId, age_predicted))\n\ncombined.df <-\n  combined.df %>%\n  dplyr::left_join(age.predicted.df, by = c(\"PassengerId\" = \"PassengerId\")) %>%\n  mutate(Age.Estimated = ifelse(is.na(Age), 1, \n                                ifelse(Age >= 1 & floor(Age) != Age, 1, 0)),\n         Age = ifelse(is.na(Age), age_predicted, Age))\ncombined.df$age_predicted <- NULL","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"eb349ba5a3ae0cf8c9a1145aaf8561a460cafb48"},"cell_type":"code","source":"summary(combined.df$Age)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"4c643a5c7f0f79a00ca27f80e8fc2af4bcba66bf"},"cell_type":"markdown","source":"# Feature Engineering \nAt this point I've cleaned and prepared existing features and are ready to add new ones. I decided to use ticket as a proxy for cabin since actual cabin feature was spotty. Based on this, I addded:\n* Average fare for ticket prefix\n* Fare, passenger count for entire cabin. How many distinct last names in same cabin?\n* Fare, passenger count for family in cabin. If you are traveling with strangers, are you going to act as a unit or do you care only about your family?\n* Did other family members survived? Added indicator\n* Categorize cabin based on composition\n* Is son/daughter traveling with mom?"},{"metadata":{"_kg_hide-output":true,"_kg_hide-input":true,"trusted":true,"_uuid":"a87f16924a5111bcf96f2197183898ba582a6e22"},"cell_type":"code","source":"# Add prefix average fare\nticket.prefix.fare.df <-\n  combined.df %>%\n  group_by(Ticket.Prefix, Ticket.Number) %>%\n  summarise(Fare = sum(Fare)) %>%\n  group_by(Ticket.Prefix) %>%\n  summarise(Fare = sum(Fare),\n            Count = n(),\n            Prefix.Avg.Fare = sum(Fare)/n()) %>%\n  select(Ticket.Prefix, Prefix.Avg.Fare)\n\n# Cabin Level Metrics\ncabin.proxy.df <-\n  combined.df %>%\n  group_by(CabinId) %>%\n  summarise(Cabin.Passenger.Count = n(),\n            Cabin.Fare = sum(Fare),\n            Cabin.Distinct.Last.Names = n_distinct(Name.Last)) \ncabin.proxy.df$Cabin.Fare.Unskewed <- log(cabin.proxy.df$Cabin.Fare+1)\n\n# Cabin Family Level Metrics\ncabin.family.fare.df <-\n  combined.df %>%\n  group_by(CabinId, Name.Last) %>%\n  summarise(Cabin.Family.Count = n(),\n            Cabin.Family.Fare = sum(Fare),\n            Cabin.Family.Age = mean(Age))\ncabin.family.fare.df$Cabin.Family.Fare.Unskewed <- log(cabin.family.fare.df$Cabin.Family.Fare+1)\n\n# Create function to add # of surviving family members for each passenger\ncombined.df$Survived.Proxy <- ifelse(is.na(combined.df$Survived), 0, combined.df$Survived)\nsurviving.family.fun <- function(x) {\n  cabin <- as.list(unique(combined.df %>% filter(PassengerId == x) %>% select(CabinId)))\n  Surviving.Family.df <-\n    combined.df %>% \n    filter(CabinId == cabin & PassengerId != x) %>%\n    group_by(CabinId, Name.Last) %>%\n    summarise(Passenger.Known.Surviving.Family = sum(Survived.Proxy))\n  Passenger.Surviving.Family.df <-\n    combined.df[c(\"PassengerId\", \"CabinId\", \"Name.Last\")] %>% \n    filter(PassengerId == x) %>%\n    left_join(Surviving.Family.df, by = c(\"CabinId\" = \"CabinId\", \"Name.Last\" = \"Name.Last\")) %>%\n    select(PassengerId, Passenger.Known.Surviving.Family)\n  return(Passenger.Surviving.Family.df)}\n\nPassenger.Surviving.Family.df <- \n  lapply(as.list(combined.df$PassengerId), surviving.family.fun) %>% \n  bind_rows() %>%\n  mutate(Passenger.Known.Surviving.Family = \n           ifelse(is.na(Passenger.Known.Surviving.Family), 0, Passenger.Known.Surviving.Family))\n\n# Add features to combined data\ncombined.df <- \n  combined.df %>%\n  left_join(ticket.prefix.fare.df, by = c(\"Ticket.Prefix\" = \"Ticket.Prefix\")) %>%\n  left_join(cabin.proxy.df, by = c(\"CabinId\" = \"CabinId\")) %>%\n  left_join(cabin.family.fare.df, by = c(\"CabinId\" = \"CabinId\", \"Name.Last\" = \"Name.Last\")) %>%\n  left_join(Passenger.Surviving.Family.df, by = c(\"PassengerId\" = \"PassengerId\"))\ncombined.df$Survived.Proxy <- NULL\ncombined.df$Passenger.Known.Surviving.Family.Pct <- \n  ifelse(combined.df$Cabin.Family.Count-1==0, 0, \n         combined.df$Passenger.Known.Surviving.Family/(combined.df$Cabin.Family.Count-1))\n\n# Classify Cabins\ncombined.df$Cabin.Group <- ifelse(combined.df$Cabin.Passenger.Count==1, \"Single\", \n                                  ifelse(combined.df$Cabin.Distinct.Last.Names==1, \"Family\", \"Other\"))\ncategories <- factor(combined.df$Cabin.Group)\ncombined.df <- cbind(combined.df, \n                     model.matrix(~categories + 0))\ncolnames(combined.df) <- sub(\"categories\", \"Cabin.\", colnames(combined.df))\nrm(categories)\n\n# Traveling with mom?\nmom.df <-\n  combined.df[c(\"CabinId\", \"PassengerId\", \"Name\", \"Name.Last\", \"Title\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Cabin.Family.Count\")] %>%\n  filter(Sex == \"female\" & Cabin.Family.Count>1 & Parch>0 & Title ==\"Mrs\") %>%\n  mutate(Travel.with.Mom = 1)\n\npassengers.wmom.df <-\n  combined.df[c(\"CabinId\", \"Name.Last\", \"PassengerId\")] %>%\n  filter(!PassengerId %in% as.list(mom.df$PassengerId)) %>%\n  left_join(mom.df[c(\"CabinId\", \"Name.Last\", \"Travel.with.Mom\")], by = c(\"CabinId\" = \"CabinId\", \"Name.Last\" = \"Name.Last\")) %>%\n  select(PassengerId, Travel.with.Mom) %>%\n  filter(!is.na(Travel.with.Mom))\n\ncombined.df <-\n  combined.df %>%\n  left_join(passengers.wmom.df, by = c(\"PassengerId\" = \"PassengerId\"))\ncombined.df$Travel.with.Mom <- ifelse(is.na(combined.df$Travel.with.Mom), 0, combined.df$Travel.with.Mom)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"dd85903c8e5b7ac17b11fc8b97b1b21a9b264505"},"cell_type":"markdown","source":"# Scale features\nOnce all clean up and feature engineering done, scale data and re-split back into train and test"},{"metadata":{"_kg_hide-input":true,"_kg_hide-output":true,"trusted":true,"_uuid":"4a6b17dadf3d1503574723821c94abab6f88f25e"},"cell_type":"code","source":"# Scale the numerical variables only for age predictors used in model\npassenger.id <- c(\"PassengerId\", \"Survived\")\nscaled.df <-\n  combined.df[,sapply(combined.df, is.numeric)] %>%\n  scale() %>%\n  data.frame()\nscaled.survival.df <- cbind(combined.df[ , (names(combined.df) %in% passenger.id)],\n                            scaled.df[ , (!names(scaled.df) %in% passenger.id)])\n                            \n# Resplit df back into test/train and submission\ntest.train.df <- scaled.survival.df[!is.na(scaled.survival.df$Survived), ] #891\nsubmission.df <- scaled.survival.df[is.na(scaled.survival.df$Survived), ] #418\nsubmission.df$Survived <- NULL\n\n# Split between train and test\nset.seed(1489)\nsample <- sample.int(n = nrow(test.train.df), \n                     size = floor(.8*nrow(test.train.df)), \n                     replace = F)\nsurvival.train.df <- test.train.df[sample, ]\nsurvival.test.df  <- test.train.df[-sample, ] ","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"5877cb06e154eab1153ee7d43a169b419aa00d80"},"cell_type":"markdown","source":"# Pick features and threshold\nAfter several rounds of random forest models and adding new features, I settle on a set of features and scored **0.79425** when I submitted the data. My approach was to use a random forest model and if the prediction was over 0.5, the labeled it as 1, if not as 0 but this got me thinking, is 50% the right threshold? Does it maximize the correct outcomes?\n\nTurns out 62% is more optimal."},{"metadata":{"_kg_hide-output":true,"trusted":true,"_uuid":"3bc0afb797efa7961ff53e230ee9b891208f4afe"},"cell_type":"code","source":"features.selected <- c(\"Pclass.Lower\", \"Pclass.Middle\", \"Pclass.Upper\", \"Embarked.Cherbourg\", \n                       \"Embarked.Queenstown\", \"Embarked.Southampton\", \"Embarked.Unknown\", \n                       \"Name.Title.Dr\", \"Name.Title.Master\", \"Name.Title.Military\", \n                       \"Name.Title.Miss\", \"Name.Title.Mr\", \"Name.Title.Mrs\", \n                       \"Name.Title.Ms\", \"Name.Title.Nobility\", \"Name.Title.Rev\", \"Age\", \n                       \"Fare.Unskewed\", \"female\", \"male\", \"Age.Estimated\", \"SibSp\", \"Parch\", \n                       \"Cabin.Passenger.Count\", \"Cabin.Fare.Unskewed\", \n                       \"Cabin.Distinct.Last.Names\", \"Cabin.Family\", \"Cabin.Other\", \"Cabin.Single\", \n                       \"Prefix.Avg.Fare\", \"Cabin.Deck.A\", \"Cabin.Deck.B\", \"Cabin.Deck.C\", \n                       \"Cabin.Deck.D\", \"Cabin.Deck.E\", \"Cabin.Deck.F\", \"Cabin.Deck.Unknown\", \n                       \"Passenger.Known.Surviving.Family\", \"Passenger.Known.Surviving.Family.Pct\")","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-output":true,"_kg_hide-input":true,"trusted":true,"_uuid":"25ad4dbbb68b5cfc55ef2e1bb88cf3f681e45b0b"},"cell_type":"code","source":"# Random forest model\nsurvival_train_y <- survival.train.df[, \"Survived\"]\nsurvival_train_x <- survival.train.df[ , (names(survival.train.df) %in% features.selected)] \nsurvival_test_y <- survival.test.df[, \"Survived\"]\nsurvival_test_x <- survival.test.df[ , (names(survival.test.df) %in% features.selected)] \n\nsurvival_rf_model <- randomForest(survival_train_x, \n                                  y = survival_train_y , \n                                  ntree = 500, \n                                  importance = TRUE)\n\n# Threshold function\nthreshold.fun <- function(x) {\n  oob_results <-\n    cbind(Outcome=survival_train_y, \n          Prediction=ifelse(predict(survival_rf_model) > x, 1, 0)) %>%\n    data.frame() %>%\n    mutate(Set = \"Train\",\n           Threshold = x,\n           Pred_Desc = ifelse(Outcome==Prediction, \"Correct Prediction\",\n                              ifelse(Outcome==0 & Prediction ==1, \"False Pos (Drwn)\", \"False Neg (Surv)\"))) %>%\n    group_by(Set, Threshold, Pred_Desc) %>%\n    summarise(Passenger.Count = n())\n  \n  test_results <-\n    cbind(Outcome=survival_test_y,\n          Prediction=ifelse(predict(survival_rf_model, survival_test_x) > x, 1, 0)) %>%\n    data.frame() %>%\n    mutate(Set = \"Test\",\n           Threshold = x,\n           Pred_Desc = \n             ifelse(Outcome==Prediction, \"Correct Prediction\",\n                    ifelse(Outcome==0 & Prediction ==1, \"False Pos (Drwn)\", \"False Neg (Surv)\"))) %>%\n    group_by(Set, Threshold, Pred_Desc) %>%\n    summarise(Passenger.Count = n())\n  \n  results.df <- rbind(oob_results, test_results)\n  return(results.df)}\n\nresults.df <- \n  lapply(seq(from = 0, to = 1, by = 0.01), \n         threshold.fun) %>% \n  bind_rows() ","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"1cedc94487b2efb669ec5d2473a1b4df38ba7145"},"cell_type":"code","source":"ggplot(results.df %>% filter(Set == \"Train\"), aes(x = Threshold, y = Passenger.Count)) +\n  geom_line(aes(color = Pred_Desc), size = 1)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"e8fcd46c4cd2c14e0b92f854af94cb4e0845076c"},"cell_type":"code","source":"ggplot(results.df %>% filter(Set == \"Test\"), aes(x = Threshold, y = Passenger.Count)) +\n  geom_line(aes(color = Pred_Desc), size = 1)","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"1f572fcf36826a8397dabf7706aa7d9a59bf6ce8"},"cell_type":"markdown","source":"50% threshold seems to be too low; threshold that maximizes correct predictions somewhere in the high 50%s, low 60%s range. "},{"metadata":{"trusted":true,"_uuid":"a41d2fd5b31cc9071027d0cc7221ca9b90149472"},"cell_type":"code","source":"head(results.df %>% filter(Set == \"Train\" & Pred_Desc == \"Correct Prediction\") %>%\n  arrange(desc(Passenger.Count)))","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"bce1364681b9a68732a6beb1247fe0a7da5aae90"},"cell_type":"markdown","source":"I submitted several different thresholds and **62% **scored the highest with **0.82296.**"},{"metadata":{"trusted":true,"_uuid":"348173b8f8a0bc386ddda1a4e22adf1f8a41d2d6"},"cell_type":"code","source":"survival.threshold <- 0.62\n\n# Predict on submission data\nsurvival_submission_x <- submission.df[ , (names(submission.df) %in% features.selected)] \nsurvival_submision_pred <- predict(survival_rf_model, survival_submission_x)\n\nPassengerId <- submission.df[, \"PassengerId\"]\nSurvived <- ifelse(survival_submision_pred > survival.threshold, 1, 0)\nkaggle.submission <- cbind(PassengerId, Survived)\nwrite.csv(kaggle.submission, \n          file = paste0(\"submission_\", survival.threshold*100, \"threshold.csv\"), \n          row.names = F)","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}