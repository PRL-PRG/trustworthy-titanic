
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> library(mice)

Attaching package: ‘mice’

The following objects are masked from ‘package:base’:

    cbind, rbind

Warning message:
package ‘mice’ was built under R version 3.6.2 
> library(nnet)
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:dplyr’:

    combine

> library(rpart)
> library(e1071)
> train <- read.csv("../input/train.csv", stringsAsFactors = FALSE,
+                   na.strings = "")
> test <- read.csv("../input/test.csv", stringsAsFactors = FALSE,
+                  na.strings = "")
> full <- bind_rows(train, test)
> full$Title <- gsub("^.*, |\\. .*$", "", full$Name)
> Mr <- c("Col", "Don", "Jonkheer", "Sir")
> Mrs <- c("Dona", "Lady", "Mme", "the Countess")
> Miss <- c("Mlle", "Ms")
> full$Title[full$Title %in% Mr] <- "Mr"
> full$Title[full$Title %in% Mrs] <- "Mrs"
> full$Title[full$Title %in% Miss] <- "Miss"
> full$Fsize <- full$SibSp + full$Parch + 1
> full$FsizeD[full$Fsize == 1] <- "Singleton"
> full$FsizeD[full$Fsize >1 & full$Fsize < 5] <- "Small"
> full$FsizeD[full$Fsize > 4] <- "Large"
> factor_var <- c("Survived", "Pclass", "Sex", "Embarked",
+                 "Title", "FsizeD")
> full[factor_var] <- lapply(full[factor_var], factor)
> res <- data.frame(PassengerId = test[, 1], Survived = 0)
> 
> for (i in 1 : 5){
+   full_mice <- full
+   mice_mod <- mice(full_mice[, c(3, 5 : 8, 10, 12)], method = "rf")
+   mice_output <- complete(mice_mod)
+   full_mice[, c(6, 10, 12)] <- mice_output[, c(3, 6, 7)]
+   full_mice$Embarked <- factor(full_mice$Embarked)
+   full_mice$Child <- factor(ifelse(full_mice$Age <= 12, 1, 0))
+   full_mice <- full_mice[, -c(9, 11)]
+   train <- full_mice[1 : nrow(train), ]
+   test <- full_mice[(nrow(train) + 1) : nrow(full_mice), -2]
+   #logistic
+   logistic_mod <- glm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare +
+                Embarked + Title + FsizeD + Child, family = binomial, data = train)
+   res$Survived <- res$Survived + round(predict(logistic_mod, test, type = "response"), 0)
+   #nnet
+   nn_mod <- nnet(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare +
+                    Embarked + Title + FsizeD + Child, data = train, size = 10, decay = 0.01)
+   res$Survived <- res$Survived + as.numeric(predict(nn_mod, test, type = "class"))
+   #randomForest
+   rf_mod <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare +
+                            Embarked + Title + FsizeD + Child, data = train)
+   res$Survived <- res$Survived + as.numeric(predict(rf_mod, test))
+   #SVM
+   svm_mod <- svm(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare +
+                    Embarked + Title + FsizeD + Child, data = train)
+   res$Survived <- res$Survived + as.numeric(predict(svm_mod, test))
+   #rpart
+   rpart_mod <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare +
+                  Embarked + Title + FsizeD + Child, data = train, method = "class")
+   rpart_predict <- predict(rpart_mod, newdata = test)
+   res$Survived <- res$Survived + ifelse(rpart_predict[, 1] < rpart_predict[, 2], 1, 0)
+ }

 iter imp variable
  1   1  Age  Fare  Embarked
  1   2  Age  Fare  Embarked
  1   3  Age  Fare  Embarked
  1   4  Age  Fare  Embarked
  1   5  Age  Fare  Embarked
  2   1  Age  Fare  Embarked
  2   2  Age  Fare  Embarked
  2   3  Age  Fare  Embarked
  2   4  Age  Fare  Embarked
  2   5  Age  Fare  Embarked
  3   1  Age  Fare  Embarked
  3   2  Age  Fare  Embarked
  3   3  Age  Fare  Embarked
  3   4  Age  Fare  Embarked
  3   5  Age  Fare  Embarked
  4   1  Age  Fare  Embarked
  4   2  Age  Fare  Embarked
  4   3  Age  Fare  Embarked
  4   4  Age  Fare  Embarked
  4   5  Age  Fare  Embarked
  5   1  Age  Fare  Embarked
  5   2  Age  Fare  Embarked
  5   3  Age  Fare  Embarked
  5   4  Age  Fare  Embarked
  5   5  Age  Fare  Embarked
# weights:  211
initial  value 956.381429 
iter  10 value 536.181643
iter  20 value 455.958580
iter  30 value 389.290640
iter  40 value 357.555854
iter  50 value 338.751554
iter  60 value 324.169360
iter  70 value 319.741999
iter  80 value 318.448420
iter  90 value 315.207897
iter 100 value 310.146524
final  value 310.146524 
stopped after 100 iterations

 iter imp variable
  1   1  Age  Fare  Embarked
  1   2  Age  Fare  Embarked
  1   3  Age  Fare  Embarked
  1   4  Age  Fare  Embarked
  1   5  Age  Fare  Embarked
  2   1  Age  Fare  Embarked
  2   2  Age  Fare  Embarked
  2   3  Age  Fare  Embarked
  2   4  Age  Fare  Embarked
  2   5  Age  Fare  Embarked
  3   1  Age  Fare  Embarked
  3   2  Age  Fare  Embarked
  3   3  Age  Fare  Embarked
  3   4  Age  Fare  Embarked
  3   5  Age  Fare  Embarked
  4   1  Age  Fare  Embarked
  4   2  Age  Fare  Embarked
  4   3  Age  Fare  Embarked
  4   4  Age  Fare  Embarked
  4   5  Age  Fare  Embarked
  5   1  Age  Fare  Embarked
  5   2  Age  Fare  Embarked
  5   3  Age  Fare  Embarked
  5   4  Age  Fare  Embarked
  5   5  Age  Fare  Embarked
# weights:  211
initial  value 688.292997 
iter  10 value 535.187186
iter  20 value 477.118291
iter  30 value 377.174061
iter  40 value 346.572273
iter  50 value 335.051908
iter  60 value 330.930408
iter  70 value 328.971790
iter  80 value 326.632617
iter  90 value 318.757677
iter 100 value 304.594415
final  value 304.594415 
stopped after 100 iterations

 iter imp variable
  1   1  Age  Fare  Embarked
  1   2  Age  Fare  Embarked
  1   3  Age  Fare  Embarked
  1   4  Age  Fare  Embarked
  1   5  Age  Fare  Embarked
  2   1  Age  Fare  Embarked
  2   2  Age  Fare  Embarked
  2   3  Age  Fare  Embarked
  2   4  Age  Fare  Embarked
  2   5  Age  Fare  Embarked
  3   1  Age  Fare  Embarked
  3   2  Age  Fare  Embarked
  3   3  Age  Fare  Embarked
  3   4  Age  Fare  Embarked
  3   5  Age  Fare  Embarked
  4   1  Age  Fare  Embarked
  4   2  Age  Fare  Embarked
  4   3  Age  Fare  Embarked
  4   4  Age  Fare  Embarked
  4   5  Age  Fare  Embarked
  5   1  Age  Fare  Embarked
  5   2  Age  Fare  Embarked
  5   3  Age  Fare  Embarked
  5   4  Age  Fare  Embarked
  5   5  Age  Fare  Embarked
# weights:  211
initial  value 550.891656 
iter  10 value 494.988805
iter  20 value 401.461530
iter  30 value 353.442884
iter  40 value 335.387647
iter  50 value 321.670712
iter  60 value 318.038622
iter  70 value 311.344572
iter  80 value 301.026219
iter  90 value 293.590172
iter 100 value 293.130562
final  value 293.130562 
stopped after 100 iterations

 iter imp variable
  1   1  Age  Fare  Embarked
  1   2  Age  Fare  Embarked
  1   3  Age  Fare  Embarked
  1   4  Age  Fare  Embarked
  1   5  Age  Fare  Embarked
  2   1  Age  Fare  Embarked
  2   2  Age  Fare  Embarked
  2   3  Age  Fare  Embarked
  2   4  Age  Fare  Embarked
  2   5  Age  Fare  Embarked
  3   1  Age  Fare  Embarked
  3   2  Age  Fare  Embarked
  3   3  Age  Fare  Embarked
  3   4  Age  Fare  Embarked
  3   5  Age  Fare  Embarked
  4   1  Age  Fare  Embarked
  4   2  Age  Fare  Embarked
  4   3  Age  Fare  Embarked
  4   4  Age  Fare  Embarked
  4   5  Age  Fare  Embarked
  5   1  Age  Fare  Embarked
  5   2  Age  Fare  Embarked
  5   3  Age  Fare  Embarked
  5   4  Age  Fare  Embarked
  5   5  Age  Fare  Embarked
# weights:  211
initial  value 707.127509 
iter  10 value 556.969407
iter  20 value 528.847779
iter  30 value 488.820906
iter  40 value 455.479889
iter  50 value 434.406268
iter  60 value 379.065782
iter  70 value 345.241400
iter  80 value 331.607091
iter  90 value 330.908819
iter 100 value 327.599786
final  value 327.599786 
stopped after 100 iterations

 iter imp variable
  1   1  Age  Fare  Embarked
  1   2  Age  Fare  Embarked
  1   3  Age  Fare  Embarked
  1   4  Age  Fare  Embarked
  1   5  Age  Fare  Embarked
  2   1  Age  Fare  Embarked
  2   2  Age  Fare  Embarked
  2   3  Age  Fare  Embarked
  2   4  Age  Fare  Embarked
  2   5  Age  Fare  Embarked
  3   1  Age  Fare  Embarked
  3   2  Age  Fare  Embarked
  3   3  Age  Fare  Embarked
  3   4  Age  Fare  Embarked
  3   5  Age  Fare  Embarked
  4   1  Age  Fare  Embarked
  4   2  Age  Fare  Embarked
  4   3  Age  Fare  Embarked
  4   4  Age  Fare  Embarked
  4   5  Age  Fare  Embarked
  5   1  Age  Fare  Embarked
  5   2  Age  Fare  Embarked
  5   3  Age  Fare  Embarked
  5   4  Age  Fare  Embarked
  5   5  Age  Fare  Embarked
# weights:  211
initial  value 705.008786 
iter  10 value 485.695906
iter  20 value 429.945842
iter  30 value 392.120060
iter  40 value 363.858889
iter  50 value 342.713058
iter  60 value 338.720906
iter  70 value 325.409311
iter  80 value 322.422592
iter  90 value 314.604779
iter 100 value 299.739423
final  value 299.739423 
stopped after 100 iterations
> 
> res$Survived <- ifelse(res$Survived > 12, 1, 0)
> write.csv(res, file = "Titanic_voting.csv", row.names = FALSE)
> 
> proc.time()
   user  system elapsed 
 21.430   1.617  23.362 
