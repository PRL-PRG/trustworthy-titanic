
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library(tidyverse) # metapackage with lots of helpful functions
â”€â”€ [1mAttaching packages[22m â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 1.3.0 â”€â”€
[32mâœ“[39m [34mggplot2[39m 3.3.2     [32mâœ“[39m [34mpurrr  [39m 0.3.4
[32mâœ“[39m [34mtibble [39m 3.0.1     [32mâœ“[39m [34mdplyr  [39m 1.0.2
[32mâœ“[39m [34mtidyr  [39m 1.1.0     [32mâœ“[39m [34mstringr[39m 1.4.0
[32mâœ“[39m [34mreadr  [39m 1.3.1     [32mâœ“[39m [34mforcats[39m 0.5.0
â”€â”€ [1mConflicts[22m â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€
[31mx[39m [34mdplyr[39m::[32mfilter()[39m masks [34mstats[39m::filter()
[31mx[39m [34mdplyr[39m::[32mlag()[39m    masks [34mstats[39m::lag()
Warning messages:
1: package â€˜ggplot2â€™ was built under R version 3.6.2 
2: package â€˜tibbleâ€™ was built under R version 3.6.2 
3: package â€˜tidyrâ€™ was built under R version 3.6.2 
4: package â€˜purrrâ€™ was built under R version 3.6.2 
5: package â€˜dplyrâ€™ was built under R version 3.6.2 
> list.files(path = "../input")
[1] "gender_submission.csv" "test.csv"              "train.csv"            
> 
> library(tidyverse) # metapackage with lots of helpful functions
> list.files(path = "../input")
[1] "gender_submission.csv" "test.csv"              "train.csv"            
> titanic.train<-read.csv(file = "../input/train.csv",stringsAsFactors = FALSE,header =TRUE)
> titanic.test<-read.csv(file = "../input/test.csv",stringsAsFactors = FALSE,header =TRUE)
> 
> titanic.train$IstrainSet<-TRUE
> titanic.test$IstrainSet<- FALSE
> 
> #dupnames<-as.character(titanic.full[which(duplicated(as.character(titanic.full$Name))),"Name"])
> 
> titanic.test$Survived<-NA
> ##combine the datasets
> titanic.full<- rbind(titanic.train,titanic.test)
> ##clean the data files
> ##replace the blank values of ages in both data sets by median value
> median(titanic.train$Age)
[1] NA
> ##NA.RM to remove null values
> table(titanic.full$Embarked)

      C   Q   S 
  2 270 123 914 
> ##what are those null values
> titanic.full[titanic.full$Embarked == '',"Embarked"]
[1] "" ""
> 
> titanic.full[titanic.full$Embarked == '',"Embarked"]<-'S'
> 
> ##Now replace blanks of age by median
> library(stringr)
> ##for(Name in titanic.full)
> #Title1<-str_extract(titanic.full$Name,"[,] [A-z][a-z].")
> #Title2<-str_extract(titanic.full$Name,"[,] [A-z][a-z][a-z].")
> Title<-str_extract(titanic.full$Name," ([A-Za-z]+)[.]" )
> titanic.full$Title<-Title
> 
> #Assign each of these title values to a variable and find median
> ##According to title u shud find the median of each group like Mr. Mis MrsTitle
> ##titanic.full$Age
> # 
> # agecluster <-aggregate(titanic.full$Age, by=list(Title),FUN= median, na.rm=TRUE)
> #  if(Title %in% agecluster$Group.1)
> #    is.na(titanic.full$Age)<-agecluster$x
> #****INSTALL DPLYR PACKAGE BEFORE RUNNING GROUPBY***#
> #install.packages("dplyr")
> library(dplyr)
> #titanic.full <- titanic.full %>% group_by(titanic.full$Title) %>% mutate(num_avg = median(Age,na.rm= T))
> #titanic.full$Age[is.na(titanic.full$Age)] <- titanic.full$num_avg[is.na(titanic.full$Age)]
> # age.median<-median(titanic.full$Age,na.rm=TRUE)
> # titanic.full[is.na(titanic.full$Age),"Age"]<-age.median
> 
> ##CHECHKOUT FOR MISSING VALUES OF FARE AND REPLACE THEMT
> ##i am taking all the non outlier values in a variable by comparing it with upper whisker
> upper.whisker<-boxplot.stats(titanic.full$Fare)$stats[5]
> nonoutlier<-titanic.full$Fare<upper.whisker
> ##titanic.full[nonoutlier,]
> titanic.full$Embarked<-as.factor(titanic.full$Embarked)
> 
> titanic.full$Name<-as.factor(titanic.full$Name)
> 
> titanic.full$Sex<-as.factor(titanic.full$Sex)
> 
> titanic.full$Title<-as.factor(titanic.full$Title)
> 
> titanic.full$Ticket<-as.factor(titanic.full$Ticket)
> 
> #Assign each of these title values to a variable and find median
> ##According to title u shud find the median of each group like Mr. Mis MrsTitle
> ##titanic.full$Age
> 
> #this is working good the above as.factor()
> 
> #implement is factor and that code for
> 
> ##now write the formula for fare equation it depends on all the other cols
> 
> titanic.full$FamilySize <- titanic.full$SibSp + titanic.full$Parch + 1
> table(titanic.full$FamilySize)

  1   2   3   4   5   6   7   8  11 
790 235 159  43  22  25  16   8  11 
> titanic.full$FamilySizelabel <- sapply(1:nrow(titanic.full), function(x) 
+   ifelse(titanic.full$FamilySize[x]==1, "Single", 
+          ifelse(titanic.full$FamilySize[x]>4, "Large", "Small")))
> 
> titanic.full$FamilySizelabel<-as.factor(titanic.full$FamilySizelabel)
> 
> 
> 
> 
> 
> #install.packages("rpart")
> library(rpart)
> 
> Agefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize+Ticket,
+                 data=titanic.full[!is.na(titanic.full$Age),], 
+                 method="anova")
> titanic.full$Age[is.na(titanic.full$Age)] <- predict(Agefit,titanic.full[is.na(titanic.full$Age),])
> 
> fare.eq = "Fare~Pclass+Sex+Parch+Age+SibSp+Embarked+Title+FamilySizelabel"
> fare.model<-lm(
+   
+   formula = fare.eq,
+   data=titanic.full[nonoutlier,]
+ )
> 
> ##Now predict the new data on trained model so whats the new data???
> ##new data
> ##only those rows has missing vals of fare
> fare.row<-titanic.full[
+   
+   is.na(titanic.full$Fare),
+   c("Pclass","Sex","Age","Embarked","SibSp","Parch","Title","FamilySizelabel")
+   ]
> fare.predictions<-predict(fare.model,newdata = fare.row)
> 
> titanic.full[is.na(titanic.full$Fare),"Fare"]<-fare.predictions
> ##one missing value
> #fare.median<-median(titanic.full$Fare,na.rm=TRUE)
> #titanic.full[is.na(titanic.full$Fare),"Fare"]<-fare.median
> 
> 
> 
> 
> ##Survived column caluclation for test dataset
> 
> # Survived.eq<-"Survived ~ Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+FamilySize+FamilySizelabel+Title"
> # survive.formula<-as.formula(Survived.eq)
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> ##Use as.factor() function for categorical variables like Sex Name and Embarked
> 
> titanic.full$Embarked<-as.factor(titanic.full$Embarked)
> 
> titanic.full$Name<-as.factor(titanic.full$Name)
> 
> titanic.full$Sex<-as.factor(titanic.full$Sex)
> 
> titanic.full$FamilySizelabel<-as.factor(titanic.full$FamilySizelabel)
> titanic.full$Title<-as.factor(titanic.full$Title)
> 
> titanic.full$Ticket<-as.factor(titanic.full$Ticket)
> 
> #Now split the dataset to two types of data sets
> titanic.train<-titanic.full[titanic.full$IstrainSet == TRUE,]
> titanic.test<-titanic.full[titanic.full$IstrainSet == FALSE,]
> ##make survived column as afactor
> 
> titanic.train$Survived<-as.factor(titanic.train$Survived)
> 
> ##Survived column caluclation for test dataset
> 
> # Survived.eq<-"Survived ~ Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+FamilySize+FamilySizelabel+Title"
> # survive.formula<-as.formula(Survived.eq)
> 
> ##INSTALL THE RANDOM FOREST AND APPLY LIBRARY() FUNCTION
> # install.packages("randomForest")
> # 
> # library(randomForest)
> # 
> # ##using random forest
> 
> ## **Survived column caluclation for test dataset**
> 
> Survived.eq<-"Survived ~ Pclass+Sex+Age+SibSp+Parch+Fare+Embarked+FamilySize+FamilySizelabel+Title"
> survive.formula<-as.formula(Survived.eq)
> titanic.model<-randomForest(formula=survive.formula,data = titanic.train,ntree =2000,mtry = 3,nodesize = 0.01*nrow(titanic.test))
Error in randomForest(formula = survive.formula, data = titanic.train,  : 
  could not find function "randomForest"
Execution halted
