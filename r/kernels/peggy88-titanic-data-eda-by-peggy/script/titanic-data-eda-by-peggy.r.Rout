
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> # This R environment comes with all of CRAN preinstalled, as well as many other helpful packages
> # The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats
> # For example, here's several helpful packages to load in 
> 
> library(ggplot2) # Data visualization
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library(readr) # CSV file I/O, e.g. the read_csv function
> 
> train <- read.csv("../input/train.csv")
> test <- read.csv("../input/test.csv")
> # View the structure of training dataset
> str(train)
'data.frame':	891 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : Factor w/ 891 levels "Abbing, Mr. Anthony",..: 109 191 358 277 16 559 520 629 417 581 ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : Factor w/ 681 levels "110152","110413",..: 524 597 670 50 473 276 86 396 345 133 ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : Factor w/ 148 levels "","A10","A14",..: 1 83 1 57 1 1 131 1 1 1 ...
 $ Embarked   : Factor w/ 4 levels "","C","Q","S": 4 2 4 4 4 3 4 4 4 2 ...
> # View the structure of test dataset
> str(test)
'data.frame':	418 obs. of  11 variables:
 $ PassengerId: int  892 893 894 895 896 897 898 899 900 901 ...
 $ Pclass     : int  3 3 2 3 3 3 3 2 3 3 ...
 $ Name       : Factor w/ 418 levels "Abbott, Master. Eugene Joseph",..: 210 409 273 414 182 370 85 58 5 104 ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 2 2 1 2 1 2 1 2 ...
 $ Age        : num  34.5 47 62 27 22 14 30 26 18 21 ...
 $ SibSp      : int  0 1 0 0 1 0 0 1 0 2 ...
 $ Parch      : int  0 0 0 0 1 0 0 1 0 0 ...
 $ Ticket     : Factor w/ 363 levels "110469","110489",..: 153 222 74 148 139 262 159 85 101 270 ...
 $ Fare       : num  7.83 7 9.69 8.66 12.29 ...
 $ Cabin      : Factor w/ 77 levels "","A11","A18",..: 1 1 1 1 1 1 1 1 1 1 ...
 $ Embarked   : Factor w/ 3 levels "C","Q","S": 2 3 2 3 3 3 2 3 1 3 ...
> 
> #We notice that some features are not of the type they are supposed to be in. 
> #Hence we observe and transform the data type of the variables accordingly.
> 
> #Convert name feature to character
> train$Name <- as.character(train$Name)
> test$Name <- as.character(test$Name)
> 
> #Convert Survived and PClass to factor
> train$Survived <- as.factor(train$Survived)
> train$Pclass <- as.factor(train$Pclass)
> 
> test$Pclass <- as.factor(test$Pclass)
> 
> str(train)
'data.frame':	891 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : Factor w/ 2 levels "0","1": 1 2 2 2 1 1 1 1 2 2 ...
 $ Pclass     : Factor w/ 3 levels "1","2","3": 3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : Factor w/ 681 levels "110152","110413",..: 524 597 670 50 473 276 86 396 345 133 ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : Factor w/ 148 levels "","A10","A14",..: 1 83 1 57 1 1 131 1 1 1 ...
 $ Embarked   : Factor w/ 4 levels "","C","Q","S": 4 2 4 4 4 3 4 4 4 2 ...
> 
> #Checking how many survived in training data
> table(train$Survived)

  0   1 
549 342 
> 
> 
> #Checking summary of dataset
> summary(train)
  PassengerId    Survived Pclass      Name               Sex     
 Min.   :  1.0   0:549    1:216   Length:891         female:314  
 1st Qu.:223.5   1:342    2:184   Class :character   male  :577  
 Median :446.0            3:491   Mode  :character               
 Mean   :446.0                                                   
 3rd Qu.:668.5                                                   
 Max.   :891.0                                                   
                                                                 
      Age            SibSp           Parch             Ticket   
 Min.   : 0.42   Min.   :0.000   Min.   :0.0000   1601    :  7  
 1st Qu.:20.12   1st Qu.:0.000   1st Qu.:0.0000   347082  :  7  
 Median :28.00   Median :0.000   Median :0.0000   CA. 2343:  7  
 Mean   :29.70   Mean   :0.523   Mean   :0.3816   3101295 :  6  
 3rd Qu.:38.00   3rd Qu.:1.000   3rd Qu.:0.0000   347088  :  6  
 Max.   :80.00   Max.   :8.000   Max.   :6.0000   CA 2144 :  6  
 NA's   :177                                      (Other) :852  
      Fare                Cabin     Embarked
 Min.   :  0.00              :687    :  2   
 1st Qu.:  7.91   B96 B98    :  4   C:168   
 Median : 14.45   C23 C25 C27:  4   Q: 77   
 Mean   : 32.20   G6         :  4   S:644   
 3rd Qu.: 31.00   C22 C26    :  3           
 Max.   :512.33   D          :  3           
                  (Other)    :186           
> 
> plot(train$Sex, train$Survived, col=c("red","blue"))
> 
> #Check for missing values
> colSums(is.na(train))
PassengerId    Survived      Pclass        Name         Sex         Age 
          0           0           0           0           0         177 
      SibSp       Parch      Ticket        Fare       Cabin    Embarked 
          0           0           0           0           0           0 
> colSums(is.na(test))
PassengerId      Pclass        Name         Sex         Age       SibSp 
          0           0           0           0          86           0 
      Parch      Ticket        Fare       Cabin    Embarked 
          0           0           1           0           0 
> 
> #We can deal with missing values in many ways. 
> #since Fare variable is missing only one value in test data, lets fill it
> train2 <- train
> test2 <- test
> test2$Survived <- NA
> full <- rbind(train2, test2)
> 
> full[!complete.cases(full$Fare),]
     PassengerId Survived Pclass               Name  Sex  Age SibSp Parch
1044        1044     <NA>      3 Storey, Mr. Thomas male 60.5     0     0
     Ticket Fare Cabin Embarked
1044   3701   NA              S
> full$Fare[1044] <- median(full$Fare, na.rm = TRUE)
> full[!complete.cases(full$Fare),]
 [1] PassengerId Survived    Pclass      Name        Sex         Age        
 [7] SibSp       Parch       Ticket      Fare        Cabin       Embarked   
<0 rows> (or 0-length row.names)
> 
> 
> #Fill in Age values now
> train[is.na(train)] <- median(train$Age, na.rm = TRUE)
> test[is.na(test)] <- median(test$Age, na.rm = TRUE)
> 
> 
> 
> #Lets split the full data into train and test data again
> traindata <- full[1:891,]
> testdata <- full[892:1309,]
> 
> dim(traindata)
[1] 891  12
> dim(testdata)
[1] 418  12
> 
> #Building a classification model to predict survival status of test data
> library(rpart)
> dt <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=traindata, method= "class")
> prediction <- predict(dt, newdata = testdata, type = "class")
> 
> submission <- data.frame(PassengerId = testdata$PassengerId, Survived = prediction)
> write.csv(submission, file =  "gender_submission.csv", row.names = FALSE)
> 
> 
> 
> proc.time()
   user  system elapsed 
  0.612   0.063   0.669 
