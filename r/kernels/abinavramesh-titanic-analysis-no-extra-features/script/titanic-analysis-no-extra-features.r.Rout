
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> library(tidyverse) 
â”€â”€ [1mAttaching packages[22m â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 1.3.0 â”€â”€
[32mâœ“[39m [34mggplot2[39m 3.3.2     [32mâœ“[39m [34mpurrr  [39m 0.3.4
[32mâœ“[39m [34mtibble [39m 3.0.1     [32mâœ“[39m [34mdplyr  [39m 1.0.2
[32mâœ“[39m [34mtidyr  [39m 1.1.0     [32mâœ“[39m [34mstringr[39m 1.4.0
[32mâœ“[39m [34mreadr  [39m 1.3.1     [32mâœ“[39m [34mforcats[39m 0.5.0
â”€â”€ [1mConflicts[22m â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€
[31mx[39m [34mdplyr[39m::[32mfilter()[39m masks [34mstats[39m::filter()
[31mx[39m [34mdplyr[39m::[32mlag()[39m    masks [34mstats[39m::lag()
Warning messages:
1: package â€˜ggplot2â€™ was built under R version 3.6.2 
2: package â€˜tibbleâ€™ was built under R version 3.6.2 
3: package â€˜tidyrâ€™ was built under R version 3.6.2 
4: package â€˜purrrâ€™ was built under R version 3.6.2 
5: package â€˜dplyrâ€™ was built under R version 3.6.2 
> library(readr)
> library(dplyr) # For Data-frame manipulation
> library(ggplot2) # For visualizations
> library(stringr)
> library(lubridate)

Attaching package: â€˜lubridateâ€™

The following objects are masked from â€˜package:baseâ€™:

    date, intersect, setdiff, union

Warning message:
package â€˜lubridateâ€™ was built under R version 3.6.2 
> library(tidyr)
> library(readxl)
> library(pROC) #for obtaining ROC and AUC
Type 'citation("pROC")' for a citation.

Attaching package: â€˜pROCâ€™

The following objects are masked from â€˜package:statsâ€™:

    cov, smooth, var

> library(plotly) # For interactive visualizations

Attaching package: â€˜plotlyâ€™

The following object is masked from â€˜package:ggplot2â€™:

    last_plot

The following object is masked from â€˜package:statsâ€™:

    filter

The following object is masked from â€˜package:graphicsâ€™:

    layout

Warning message:
package â€˜plotlyâ€™ was built under R version 3.6.2 
> library(class) # For K-NN algorithm
> library(dummies) # Package used for dummifying variables
dummies-1.5.6 provided by Decision Patterns

> library(randomForest) # Package used for Random Forest classification
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: â€˜randomForestâ€™

The following object is masked from â€˜package:dplyrâ€™:

    combine

The following object is masked from â€˜package:ggplot2â€™:

    margin

> library(mice) # For imputing variables

Attaching package: â€˜miceâ€™

The following objects are masked from â€˜package:baseâ€™:

    cbind, rbind

Warning message:
package â€˜miceâ€™ was built under R version 3.6.2 
> library(purrr) # For functional programming in R
> 
> train <- read_csv("../input/train.csv")
Parsed with column specification:
cols(
  PassengerId = [32mcol_double()[39m,
  Survived = [32mcol_double()[39m,
  Pclass = [32mcol_double()[39m,
  Name = [31mcol_character()[39m,
  Sex = [31mcol_character()[39m,
  Age = [32mcol_double()[39m,
  SibSp = [32mcol_double()[39m,
  Parch = [32mcol_double()[39m,
  Ticket = [31mcol_character()[39m,
  Fare = [32mcol_double()[39m,
  Cabin = [31mcol_character()[39m,
  Embarked = [31mcol_character()[39m
)
> test <- read_csv("../input/test.csv")
Parsed with column specification:
cols(
  PassengerId = [32mcol_double()[39m,
  Pclass = [32mcol_double()[39m,
  Name = [31mcol_character()[39m,
  Sex = [31mcol_character()[39m,
  Age = [32mcol_double()[39m,
  SibSp = [32mcol_double()[39m,
  Parch = [32mcol_double()[39m,
  Ticket = [31mcol_character()[39m,
  Fare = [32mcol_double()[39m,
  Cabin = [31mcol_character()[39m,
  Embarked = [31mcol_character()[39m
)
> gender_submission <- read_csv("../input/gender_submission.csv")
Parsed with column specification:
cols(
  PassengerId = [32mcol_double()[39m,
  Survived = [32mcol_double()[39m
)
> 
> summary(train)
  PassengerId       Survived          Pclass          Name          
 Min.   :  1.0   Min.   :0.0000   Min.   :1.000   Length:891        
 1st Qu.:223.5   1st Qu.:0.0000   1st Qu.:2.000   Class :character  
 Median :446.0   Median :0.0000   Median :3.000   Mode  :character  
 Mean   :446.0   Mean   :0.3838   Mean   :2.309                     
 3rd Qu.:668.5   3rd Qu.:1.0000   3rd Qu.:3.000                     
 Max.   :891.0   Max.   :1.0000   Max.   :3.000                     
                                                                    
     Sex                 Age            SibSp           Parch       
 Length:891         Min.   : 0.42   Min.   :0.000   Min.   :0.0000  
 Class :character   1st Qu.:20.12   1st Qu.:0.000   1st Qu.:0.0000  
 Mode  :character   Median :28.00   Median :0.000   Median :0.0000  
                    Mean   :29.70   Mean   :0.523   Mean   :0.3816  
                    3rd Qu.:38.00   3rd Qu.:1.000   3rd Qu.:0.0000  
                    Max.   :80.00   Max.   :8.000   Max.   :6.0000  
                    NA's   :177                                     
    Ticket               Fare           Cabin             Embarked        
 Length:891         Min.   :  0.00   Length:891         Length:891        
 Class :character   1st Qu.:  7.91   Class :character   Class :character  
 Mode  :character   Median : 14.45   Mode  :character   Mode  :character  
                    Mean   : 32.20                                        
                    3rd Qu.: 31.00                                        
                    Max.   :512.33                                        
                                                                          
> 
> summary(test)
  PassengerId         Pclass          Name               Sex           
 Min.   : 892.0   Min.   :1.000   Length:418         Length:418        
 1st Qu.: 996.2   1st Qu.:1.000   Class :character   Class :character  
 Median :1100.5   Median :3.000   Mode  :character   Mode  :character  
 Mean   :1100.5   Mean   :2.266                                        
 3rd Qu.:1204.8   3rd Qu.:3.000                                        
 Max.   :1309.0   Max.   :3.000                                        
                                                                       
      Age            SibSp            Parch           Ticket         
 Min.   : 0.17   Min.   :0.0000   Min.   :0.0000   Length:418        
 1st Qu.:21.00   1st Qu.:0.0000   1st Qu.:0.0000   Class :character  
 Median :27.00   Median :0.0000   Median :0.0000   Mode  :character  
 Mean   :30.27   Mean   :0.4474   Mean   :0.3923                     
 3rd Qu.:39.00   3rd Qu.:1.0000   3rd Qu.:0.0000                     
 Max.   :76.00   Max.   :8.0000   Max.   :9.0000                     
 NA's   :86                                                          
      Fare            Cabin             Embarked        
 Min.   :  0.000   Length:418         Length:418        
 1st Qu.:  7.896   Class :character   Class :character  
 Median : 14.454   Mode  :character   Mode  :character  
 Mean   : 35.627                                        
 3rd Qu.: 31.500                                        
 Max.   :512.329                                        
 NA's   :1                                              
> 
> full<-bind_rows(train %>% select(-Survived),test)
> summary(full)
  PassengerId       Pclass          Name               Sex           
 Min.   :   1   Min.   :1.000   Length:1309        Length:1309       
 1st Qu.: 328   1st Qu.:2.000   Class :character   Class :character  
 Median : 655   Median :3.000   Mode  :character   Mode  :character  
 Mean   : 655   Mean   :2.295                                        
 3rd Qu.: 982   3rd Qu.:3.000                                        
 Max.   :1309   Max.   :3.000                                        
                                                                     
      Age            SibSp            Parch          Ticket         
 Min.   : 0.17   Min.   :0.0000   Min.   :0.000   Length:1309       
 1st Qu.:21.00   1st Qu.:0.0000   1st Qu.:0.000   Class :character  
 Median :28.00   Median :0.0000   Median :0.000   Mode  :character  
 Mean   :29.88   Mean   :0.4989   Mean   :0.385                     
 3rd Qu.:39.00   3rd Qu.:1.0000   3rd Qu.:0.000                     
 Max.   :80.00   Max.   :8.0000   Max.   :9.000                     
 NA's   :263                                                        
      Fare            Cabin             Embarked        
 Min.   :  0.000   Length:1309        Length:1309       
 1st Qu.:  7.896   Class :character   Class :character  
 Median : 14.454   Mode  :character   Mode  :character  
 Mean   : 33.295                                        
 3rd Qu.: 31.275                                        
 Max.   :512.329                                        
 NA's   :1                                              
> 
> #Fare is dependent on pclass and embarked
> #What value does the missing value for Fare have for columns pclass and embarked
> full[is.na(full$Fare),]
[90m# A tibble: 1 x 11[39m
  PassengerId Pclass Name    Sex     Age SibSp Parch Ticket  Fare Cabin Embarked
        [3m[90m<dbl>[39m[23m  [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m   [3m[90m<chr>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m  [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m [3m[90m<chr>[39m[23m   
[90m1[39m        [4m1[24m044      3 Storeyâ€¦ male   60.5     0     0 3701      [31mNA[39m [31mNA[39m    S       
> 
> # Since the missing record had PClass = 3 and Embarked="S", we can see how Fare is distributed for these conditions
> 
>  ggplotly(full %>% select(Pclass,Fare,Embarked) %>% filter(Pclass==3,Embarked=="S") %>% ggplot(aes(Fare))+geom_density() )
Warning message:
Removed 1 rows containing non-finite values (stat_density). 
>  full %>% select(Pclass,Fare,Embarked) %>% filter(Pclass==3,Embarked=="S") %>%summarize(median(Fare,na.rm=TRUE))
[90m# A tibble: 1 x 1[39m
  `median(Fare, na.rm = TRUE)`
                         [3m[90m<dbl>[39m[23m
[90m1[39m                         8.05
> 
> #Hence we can populate the missing Fare wih the median
> full[is.na(full$Fare),][["Fare"]]<-as.data.frame(full %>% select(Pclass,Fare,Embarked) %>% filter(Pclass==3,Embarked=="S"))[["Fare"]]%>%median(na.rm = TRUE)
> sum(is.na(full$Fare))
[1] 0
> 
> # Checking the columns that have NA in Embarked
> full[is.na(full$Embarked),]
[90m# A tibble: 2 x 11[39m
  PassengerId Pclass Name    Sex     Age SibSp Parch Ticket  Fare Cabin Embarked
        [3m[90m<dbl>[39m[23m  [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m   [3m[90m<chr>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m  [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m [3m[90m<chr>[39m[23m   
[90m1[39m          62      1 Icard,â€¦ femaâ€¦    38     0     0 113572    80 B28   [31mNA[39m      
[90m2[39m         830      1 Stone,â€¦ femaâ€¦    62     0     0 113572    80 B28   [31mNA[39m      
> 
>  ggplotly(full %>% select(Pclass,Fare,Embarked) %>% filter(Pclass==1) %>% ggplot(aes(y=Fare,x=Embarked))+geom_boxplot() )
> 
> full[is.na(full$Embarked),]$Embarked<-"C"
> 
> full$Pclass <- as.factor(full$Pclass)
> full$Sex <- as.factor(full$Sex)
>   
> # Random Forest classifier made using variables Pclass, Sex, SibSp, Parch
> rf<-randomForest(formula= Age ~Pclass+Sex+SibSp+Parch, data = full%>% filter(!is.na(Age)))
> full$Age_rf_imputation <- full$Age  
> full[is.na(full$Age_rf_imputation),][["Age_rf_imputation"]] <-predict(rf,newdata =full %>% filter(is.na(Age)) )
> 
> head(full)
[90m# A tibble: 6 x 12[39m
  PassengerId Pclass Name  Sex     Age SibSp Parch Ticket  Fare Cabin Embarked
        [3m[90m<dbl>[39m[23m [3m[90m<fct>[39m[23m  [3m[90m<chr>[39m[23m [3m[90m<fct>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m  [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m [3m[90m<chr>[39m[23m   
[90m1[39m           1 3      Brauâ€¦ male     22     1     0 A/5 2â€¦  7.25 [31mNA[39m    S       
[90m2[39m           2 1      Cumiâ€¦ femaâ€¦    38     1     0 PC 17â€¦ 71.3  C85   C       
[90m3[39m           3 3      Heikâ€¦ femaâ€¦    26     0     0 STON/â€¦  7.92 [31mNA[39m    S       
[90m4[39m           4 1      Futrâ€¦ femaâ€¦    35     1     0 113803 53.1  C123  S       
[90m5[39m           5 3      Alleâ€¦ male     35     0     0 373450  8.05 [31mNA[39m    S       
[90m6[39m           6 3      Moraâ€¦ male     [31mNA[39m     0     0 330877  8.46 [31mNA[39m    Q       
[90m# â€¦ with 1 more variable: Age_rf_imputation [3m[90m<dbl>[90m[23m[39m
> 
> ggplotly(ggplot(full,aes(Age))+geom_histogram())
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Warning message:
Removed 263 rows containing non-finite values (stat_bin). 
> 
> 
> ggplotly(ggplot(full,aes(Age_rf_imputation))+geom_histogram())
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> 
> sum(is.na(full$Age))
[1] 263
> 
> summary(full)
  PassengerId   Pclass      Name               Sex           Age       
 Min.   :   1   1:323   Length:1309        female:466   Min.   : 0.17  
 1st Qu.: 328   2:277   Class :character   male  :843   1st Qu.:21.00  
 Median : 655   3:709   Mode  :character                Median :28.00  
 Mean   : 655                                           Mean   :29.88  
 3rd Qu.: 982                                           3rd Qu.:39.00  
 Max.   :1309                                           Max.   :80.00  
                                                        NA's   :263    
     SibSp            Parch          Ticket               Fare        
 Min.   :0.0000   Min.   :0.000   Length:1309        Min.   :  0.000  
 1st Qu.:0.0000   1st Qu.:0.000   Class :character   1st Qu.:  7.896  
 Median :0.0000   Median :0.000   Mode  :character   Median : 14.454  
 Mean   :0.4989   Mean   :0.385                      Mean   : 33.276  
 3rd Qu.:1.0000   3rd Qu.:0.000                      3rd Qu.: 31.275  
 Max.   :8.0000   Max.   :9.000                      Max.   :512.329  
                                                                      
    Cabin             Embarked         Age_rf_imputation
 Length:1309        Length:1309        Min.   : 0.17    
 Class :character   Class :character   1st Qu.:22.00    
 Mode  :character   Mode  :character   Median :29.28    
                                       Mean   :29.77    
                                       3rd Qu.:36.00    
                                       Max.   :80.00    
                                                        
> 
> # Convert the following columns into factors
> convert_factors <- c("PassengerId","Pclass","Sex","Embarked")
> full[convert_factors]<- map(.x=convert_factors, .f= function(x){as.factor(full[[x]])})
> 
> # Set a random seed
>   set.seed(129)
> 
> # Perform mice imputation, including only useful variables:
>   mice_mod <- mice(full[, names(full) %in% c("Pclass","Sex","Embarked","Age","SibSp","Parch","Fare")], method='rf') 

 iter imp variable
  1   1  Age
  1   2  Age
  1   3  Age
  1   4  Age
  1   5  Age
  2   1  Age
  2   2  Age
  2   3  Age
  2   4  Age
  2   5  Age
  3   1  Age
  3   2  Age
  3   3  Age
  3   4  Age
  3   5  Age
  4   1  Age
  4   2  Age
  4   3  Age
  4   4  Age
  4   5  Age
  5   1  Age
  5   2  Age
  5   3  Age
  5   4  Age
  5   5  Age
>   
>   mice_output <- complete(mice_mod)
> 
> # Distribution of original Age distributions
> ggplotly(ggplot(full,aes(Age))+geom_histogram())
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
Warning message:
Removed 263 rows containing non-finite values (stat_bin). 
> 
> 
> 
> # Distribution of imputed Age distribution using "mice"
> ggplotly(ggplot(mice_output,aes(Age))+geom_histogram())
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> 
> full[c("Pclass","Sex","Embarked","Age","SibSp","Parch","Fare")] <-mice_output[c("Pclass","Sex","Embarked","Age","SibSp","Parch","Fare")]
> 
> head(full)
[90m# A tibble: 6 x 12[39m
  PassengerId Pclass Name  Sex     Age SibSp Parch Ticket  Fare Cabin Embarked
  [3m[90m<fct>[39m[23m       [3m[90m<fct>[39m[23m  [3m[90m<chr>[39m[23m [3m[90m<fct>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m  [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m [3m[90m<fct>[39m[23m   
[90m1[39m 1           3      Brauâ€¦ male     22     1     0 A/5 2â€¦  7.25 [31mNA[39m    S       
[90m2[39m 2           1      Cumiâ€¦ femaâ€¦    38     1     0 PC 17â€¦ 71.3  C85   C       
[90m3[39m 3           3      Heikâ€¦ femaâ€¦    26     0     0 STON/â€¦  7.92 [31mNA[39m    S       
[90m4[39m 4           1      Futrâ€¦ femaâ€¦    35     1     0 113803 53.1  C123  S       
[90m5[39m 5           3      Alleâ€¦ male     35     0     0 373450  8.05 [31mNA[39m    S       
[90m6[39m 6           3      Moraâ€¦ male     38     0     0 330877  8.46 [31mNA[39m    Q       
[90m# â€¦ with 1 more variable: Age_rf_imputation [3m[90m<dbl>[90m[23m[39m
> 
> # Remove the column Age_rf_imputation
> full$Age_rf_imputation <- NULL
> 
> #Split it back into train and test sets
> train<-bind_cols(full[1:dim(train)[1],],Survived=train$Survived)
> test <-full[-(1:dim(train)[1]),]
> 
> plot_ly(train %>% group_by(Survived) %>% count(), labels = ~Survived, values = ~n, type = 'pie') %>%
+   layout(title = 'Total Survived vs Not Survived',
+          xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
+          yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
Warning message:
`arrange_()` is deprecated as of dplyr 0.7.0.
Please use `arrange()` instead.
See vignette('programming') for more help
[90mThis warning is displayed once every 8 hours.[39m
[90mCall `lifecycle::last_warnings()` to see where this warning was generated.[39m 
> 
>   ggplotly(train %>% group_by(Survived,Pclass) %>% count() %>% ggplot(aes(x=factor(Pclass),y=n,fill=factor(Survived))) + geom_col(position = "fill") + labs(x="Passenger Class",y="Proportion of People", title = "Proportion survived vs Not-Survived with respect to Passenger Class")+scale_fill_discrete(name = "Survived"))
> 
>   ggplotly(train %>% group_by(Survived,Pclass) %>% count() %>% ggplot(aes(x=factor(Survived),y=n,fill=factor(Pclass))) + geom_col(position = "fill") + labs(x="Survived",y="Proportion of People", title = "Proportion Survived vs Not-Survived")+scale_fill_discrete(name = "Passenger Class"))
> 
>   ggplotly(train %>% group_by(Survived,Sex) %>% count() %>% ggplot(aes(x=factor(Sex),y=n,fill=factor(Survived))) + geom_col(position = "fill") + labs(x="Sex",y="Proportion of People", title = "Proportion survived vs Not Survived")+scale_fill_discrete(name = "Survived"))
> 
>  ggplotly(train %>% group_by(Survived,Sex) %>% count() %>% ggplot(aes(x=factor(Survived),y=n,fill=factor(Sex))) + geom_col(position = "fill") + labs(x="Survived",y="Proportion of People", title = "Proportion survived vs Not Survived")+scale_fill_discrete(name = "Gender"))
> 
> #Number of people with different number of siblings
> train %>% group_by(SibSp) %>% count()  
[90m# A tibble: 7 x 2[39m
[90m# Groups:   SibSp [7][39m
  SibSp     n
  [3m[90m<dbl>[39m[23m [3m[90m<int>[39m[23m
[90m1[39m     0   608
[90m2[39m     1   209
[90m3[39m     2    28
[90m4[39m     3    16
[90m5[39m     4    18
[90m6[39m     5     5
[90m7[39m     8     7
> 
> #Percentage of people Not-Survived  
> ggplotly(train %>% group_by(SibSp,Survived) %>%summarise(n=n())%>% ungroup()%>% group_by(SibSp) %>%mutate(Total_per_sibling=sum(n),perc_dead=(n/Total_per_sibling)*100)%>%filter(Survived==0)%>%ggplot(aes(x=factor(SibSp),y=perc_dead)) + geom_col(position = "dodge",fill="skyblue") + labs(x="Number of siblings or spouses",y="Percentage of People Not-Survived (%)", title = "Percentage of people Not-Survived"))
`summarise()` regrouping output by 'SibSp' (override with `.groups` argument)
> 
> # Count of people with different number of Parents/children
> train %>% group_by(Parch) %>% count()  
[90m# A tibble: 7 x 2[39m
[90m# Groups:   Parch [7][39m
  Parch     n
  [3m[90m<dbl>[39m[23m [3m[90m<int>[39m[23m
[90m1[39m     0   678
[90m2[39m     1   118
[90m3[39m     2    80
[90m4[39m     3     5
[90m5[39m     4     4
[90m6[39m     5     5
[90m7[39m     6     1
> 
> # Percentage of people dead with respect to the number of children/parents
> ggplotly(train %>% group_by(Parch,Survived) %>%summarise(n=n())%>% ungroup()%>% group_by(Parch) %>%mutate(Total_per_sibling=sum(n),perc_dead=(n/Total_per_sibling)*100)%>%filter(Survived==0)%>%ggplot(aes(x=factor(Parch),y=perc_dead)) + geom_col(position = "dodge",fill="skyblue") + labs(x="Number of Parents or children",y="Percentage of People Not-Survived (%)", title = "Percentage of people Not-Survived"))
`summarise()` regrouping output by 'Parch' (override with `.groups` argument)
> 
> #Number of people at different embarking stations
> train %>% group_by(Embarked) %>% count() 
[90m# A tibble: 3 x 2[39m
[90m# Groups:   Embarked [3][39m
  Embarked     n
  [3m[90m<fct>[39m[23m    [3m[90m<int>[39m[23m
[90m1[39m C          170
[90m2[39m Q           77
[90m3[39m S          644
> 
> ggplotly(train %>% filter(!is.na(Embarked))%>%group_by(Embarked,Survived) %>%summarise(n=n())%>% ungroup()%>% group_by(Embarked) %>%mutate(Total_per_sibling=sum(n),perc_dead=(n/Total_per_sibling)*100)%>%filter(Survived==0)%>%ggplot(aes(x=factor(Embarked),y=perc_dead)) + geom_col(position = "dodge",fill="skyblue") + labs(x="Station embarked",y="Percentage of People Not-Survived (%)", title = "Percentage of people Not-Survived"))
`summarise()` regrouping output by 'Embarked' (override with `.groups` argument)
> 
>   # By Cabin
>  train %>% mutate(Cabin_corrected= substring(Cabin,1,1)) %>% filter(!is.na(Cabin_corrected)) %>% count(Cabin_corrected)%>% mutate(Total_count=sum(n))
[90m# A tibble: 8 x 3[39m
  Cabin_corrected     n Total_count
  [3m[90m<chr>[39m[23m           [3m[90m<int>[39m[23m       [3m[90m<int>[39m[23m
[90m1[39m A                  15         204
[90m2[39m B                  47         204
[90m3[39m C                  59         204
[90m4[39m D                  33         204
[90m5[39m E                  32         204
[90m6[39m F                  13         204
[90m7[39m G                   4         204
[90m8[39m T                   1         204
> 
> ggplotly(train %>% select(Survived,Age,Sex)%>% ggplot(aes(x=factor(Survived),y=Age))+geom_boxplot()+facet_wrap(~factor(Sex)) + labs(x="Survived"))
Warning message:
`group_by_()` is deprecated as of dplyr 0.7.0.
Please use `group_by()` instead.
See vignette('programming') for more help
[90mThis warning is displayed once every 8 hours.[39m
[90mCall `lifecycle::last_warnings()` to see where this warning was generated.[39m 
> 
> # Converting variables into factors in training and test set
> 
>   train$Survived <- factor(train$Survived)
>   train$Pclass <- factor(train$Pclass)
>   train$Sex <- factor(train$Sex)
>   train$Embarked <- factor(train$Embarked)
> 
>   
>   test$Pclass <- factor(test$Pclass)
>   test$Sex <- factor(test$Sex)
>   test$Embarked <- factor(test$Embarked)
>   
> 
> # Logistic regression model built on important variables
> 
> lin_reg<- glm(formula = Survived ~., data = train %>% select(-c(Name,Cabin,Ticket,PassengerId)),family = "binomial")
> summary(lin_reg)

Call:
glm(formula = Survived ~ ., family = "binomial", data = train %>% 
    select(-c(Name, Cabin, Ticket, PassengerId)))

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.5732  -0.6304  -0.4042   0.6088   2.4217  

Coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept)  3.948614   0.472882   8.350  < 2e-16 ***
Pclass2     -0.955096   0.301447  -3.168  0.00153 ** 
Pclass3     -2.204158   0.307651  -7.164 7.81e-13 ***
Sexmale     -2.689237   0.200371 -13.421  < 2e-16 ***
Age         -0.033697   0.007474  -4.508 6.53e-06 ***
SibSp       -0.310848   0.110767  -2.806  0.00501 ** 
Parch       -0.081526   0.117784  -0.692  0.48883    
Fare         0.001970   0.002440   0.807  0.41945    
EmbarkedQ   -0.148991   0.376930  -0.395  0.69264    
EmbarkedS   -0.432280   0.238242  -1.814  0.06961 .  
---
Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1186.66  on 890  degrees of freedom
Residual deviance:  789.06  on 881  degrees of freedom
AIC: 809.06

Number of Fisher Scoring iterations: 5

> 
> prediction_linreg<-predict(lin_reg,newdata = train %>% select(-c(Name,Cabin,Ticket,Survived,PassengerId)) ,type = "response") 
> 
> table(train$Survived,as.numeric(prediction_linreg>0.5))
   
      0   1
  0 480  69
  1 103 239
> 
> # Import the library pROC to plot ROC values
>  library(pROC)
> 
> # Create an ROC object 
>  ROC <- roc(train$Survived, as.numeric(prediction_linreg>0.5))
Setting levels: control = 0, case = 1
Setting direction: controls < cases
> 
> #Plot the ROC curve
>  plot(ROC, col = "blue")
> 
> # Find the Area under the curve for prediction of training set
> paste("The Area under the curve is : ", auc(ROC)) 
[1] "The Area under the curve is :  0.786573674623718"
> 
> paste("As we can see, the accuracy is",100*((477+237)/(105+72+477+237)),"%"," on the training set") 
[1] "As we can see, the accuracy is 80.1346801346801 %  on the training set"
> 
> # Table of predictions of test set
> (cm<-as.matrix(table(Actual = gender_submission$Survived,Predicted = as.numeric(predict(lin_reg,newdata = test ,type = "response")>0.5))))
      Predicted
Actual   0   1
     0 241  29
     1  24 124
> 
> # Create an ROC object 
>  ROC_test <- roc(gender_submission$Survived, as.numeric(predict(lin_reg,newdata = test ,type = "response")>0.5))
Setting levels: control = 0, case = 1
Setting direction: controls < cases
> 
> #Plot the ROC curve
>  plot(ROC_test, col = "blue")
> 
> # Find the Area under the curve for prediction of training set
> paste("The Area under the curve is : ", auc(ROC_test)) 
[1] "The Area under the curve is :  0.865215215215215"
> paste("As we can see, the accuracy is",100*(sum(diag(cm))/sum(cm)),"%"," on the test set")
[1] "As we can see, the accuracy is 87.3205741626794 %  on the test set"
> 
> #Dummy training set only with the required columns 
> x<-train %>% select(-c(Name,Cabin,Ticket,PassengerId))%>% filter(!is.na(Age) , !is.na(Embarked))
> 
>  knn_model<-knn(train = x %>% as.data.frame()%>% select(-Survived)%>% dummy.data.frame(dummy.class = "factor"),test =cbind(test,test_actual=gender_submission$Survived)[names(x %>% select(-Survived))]%>% filter(!is.na(Age),!is.na(Fare))%>% as.data.frame() %>% dummy.data.frame(),cl=x$Survived)
Warning messages:
1: In model.matrix.default(~x - 1, model.frame(~x - 1), contrasts = FALSE) :
  non-list contrasts argument ignored
2: In model.matrix.default(~x - 1, model.frame(~x - 1), contrasts = FALSE) :
  non-list contrasts argument ignored
3: In model.matrix.default(~x - 1, model.frame(~x - 1), contrasts = FALSE) :
  non-list contrasts argument ignored
4: In model.matrix.default(~x - 1, model.frame(~x - 1), contrasts = FALSE) :
  non-list contrasts argument ignored
5: In model.matrix.default(~x - 1, model.frame(~x - 1), contrasts = FALSE) :
  non-list contrasts argument ignored
6: In model.matrix.default(~x - 1, model.frame(~x - 1), contrasts = FALSE) :
  non-list contrasts argument ignored
> 
> 
> cm<-as.matrix(table( Actual= as.factor(as.vector(cbind(test,test_actual=gender_submission$Survived)[c(names(x %>% select(-Survived)),"test_actual")] %>% filter(!is.na(Age),!is.na(Fare)) %>% select(test_actual))[["test_actual"]]),Predicted = knn_model))
> paste("As we can see, the accuracy is",100*(sum(diag(cm))/sum(cm)),"%"," on the training set")
[1] "As we can see, the accuracy is 66.9856459330144 %  on the training set"
> 
> train1<-bind_cols(full[1:dim(train)[1],],Survived=train$Survived)
> test1 <-full[-(1:dim(train)[1]),]
> train1$Survived <- as.factor(train1$Survived)
> rf<-randomForest(formula = Survived ~ Pclass+Sex+Age+SibSp + Parch + Fare + Embarked, data= train1)
> (cm <- as.matrix(table(Actual = gender_submission[["Survived"]],Predicted = predict(rf,test1))))
      Predicted
Actual   0   1
     0 260  10
     1  24 124
> paste("As we can see, the accuracy is",100*(sum(diag(cm))/sum(cm)),"%"," on the test set")
[1] "As we can see, the accuracy is 91.866028708134 %  on the test set"
> 
> proc.time()
   user  system elapsed 
  6.864   0.826   7.575 
