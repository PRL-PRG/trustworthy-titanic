
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## ----setup, include=FALSE--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> knitr::opts_chunk$set(echo = TRUE)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> library(tidyr)
Warning message:
package ‘tidyr’ was built under R version 3.6.2 
> library(ggplot2)
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library('caret') 
Loading required package: lattice
> library('randomForest') 
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:ggplot2’:

    margin

The following object is masked from ‘package:dplyr’:

    combine

> library('rpart')
> library('rpart.plot')
> library('car')
Loading required package: carData

Attaching package: ‘car’

The following object is masked from ‘package:dplyr’:

    recode

Warning messages:
1: package ‘car’ was built under R version 3.6.2 
2: package ‘carData’ was built under R version 3.6.2 
> library('e1071')
> #setwd("C:/Users/Ashish/Desktop/DataSets/Titanic")
> train_t = read.csv("../input/train.csv" ,stringsAsFactors = F)
> #test_t = read.csv("test.csv",stringsAsFactors = F)
> str(train_t)
'data.frame':	891 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : chr  "male" "female" "female" "female" ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  "" "C85" "" "C123" ...
 $ Embarked   : chr  "S" "C" "S" "S" ...
> #head(test_t)
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Let's analyse Data and different variables
> # clearly Survived is a output (dependent variable) and others are independent variable.
> 
> # let's find out missing or NA values - 
> 
> colSums(is.na(train_t))
PassengerId    Survived      Pclass        Name         Sex         Age 
          0           0           0           0           0         177 
      SibSp       Parch      Ticket        Fare       Cabin    Embarked 
          0           0           0           0           0           0 
>  
> colSums(train_t == '')
PassengerId    Survived      Pclass        Name         Sex         Age 
          0           0           0           0           0          NA 
      SibSp       Parch      Ticket        Fare       Cabin    Embarked 
          0           0           0           0         687           2 
> ### Let's convert Empty embarked variable with max occuring one - 
> table(train_t$Embarked)

      C   Q   S 
  2 168  77 644 
> train_t$Embarked[train_t$Embarked == ""]="S"
> table(train_t$Embarked)

  C   Q   S 
168  77 646 
> ### Let's check number of values in each variable to distinguish them - 
> 
> apply(train_t,2, function(x) length(unique(x)))
PassengerId    Survived      Pclass        Name         Sex         Age 
        891           2           3         891           2          89 
      SibSp       Parch      Ticket        Fare       Cabin    Embarked 
          7           7         681         248         148           3 
> ### This clearly shows Survived , Pclass , Sex, Embarked are factor variable. 
> 
> cols=c("Survived","Pclass","Sex","Embarked")
> for (i in cols){
+   train_t[,i]=as.factor(train_t[,i])
+ }
> 
> str(train_t)
'data.frame':	891 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : Factor w/ 2 levels "0","1": 1 2 2 2 1 1 1 1 2 2 ...
 $ Pclass     : Factor w/ 3 levels "1","2","3": 3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  "" "C85" "" "C123" ...
 $ Embarked   : Factor w/ 3 levels "C","Q","S": 3 1 3 3 3 2 3 3 3 1 ...
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ### As we can see we can extract information from name variable. 
> train_t$title = gsub('(.*, )|(\\..*)', '', train_t$Name)
> table(train_t$title)

        Capt          Col          Don           Dr     Jonkheer         Lady 
           1            2            1            7            1            1 
       Major       Master         Miss         Mlle          Mme           Mr 
           2           40          182            2            1          517 
         Mrs           Ms          Rev          Sir the Countess 
         125            1            6            1            1 
> 
> # Titles with very low cell counts to be combined to "rare" level
> rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', 
+                 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
> 
> # Also reassign mlle, ms, and mme accordingly
> train_t$title[train_t$title == 'Mlle']        <- 'Miss' 
> train_t$title[train_t$title == 'Ms']          <- 'Miss'
> train_t$title[train_t$title == 'Mme']         <- 'Mrs' 
> train_t$title[train_t$title %in% rare_title]  <- 'Rare Title'
> 
> # Show title counts by sex again
> table(train_t$Sex, train_t$title)
        
         Master Miss  Mr Mrs Rare Title
  female      0  185   0 126          3
  male       40    0 517   0         20
> 
> str(train_t)
'data.frame':	891 obs. of  13 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : Factor w/ 2 levels "0","1": 1 2 2 2 1 1 1 1 2 2 ...
 $ Pclass     : Factor w/ 3 levels "1","2","3": 3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  "" "C85" "" "C123" ...
 $ Embarked   : Factor w/ 3 levels "C","Q","S": 3 1 3 3 3 2 3 3 3 1 ...
 $ title      : chr  "Mr" "Mrs" "Miss" "Mrs" ...
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Lets visualize the relationship between Sex & survival
> ggplot(train_t) + aes(Sex,fill = factor(Survived))+geom_bar()+
+ ggtitle("Sex v/s Survival Rate")+
+ xlab("Sex") +
+ ylab("Total Count") +
+ labs(fill = "Survived") 
> 
> # This clearly shows that Probablilty/chance of Survival for female is much more for than male. 
> 
> 
> # Lets visualize the relationship between Pclass & survival
> ggplot(train_t) + aes(Pclass,fill = factor(Survived))+geom_bar()+
+ ggtitle("Pclass v/s Survival Rate")+
+ xlab("Pclass") +
+ ylab("Total Count") +
+ labs(fill = "Survived")
> 
> ## First class Survival rate is far more better than the 3rd class  
> ## No doubt Rich peope having better Survival rate than the poor
> 
> # Let's Visualize the 3-way relationship of sex, pclass, and survival
> ggplot(train_t, aes(x = Sex, fill = Survived)) +
+ geom_bar() +
+ facet_wrap(~Pclass) + 
+ ggtitle("3D view of sex, pclass, and survival") +
+ xlab("Sex") +
+ ylab("Total Count") +
+ labs(fill = "Survived")
> 
> ##In all the class female Survival rate is better than Men
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> ggplot(train_t,aes(x = title,fill=factor(Survived))) +
+   geom_bar() +
+   ggtitle("Title V/S Survival rate")+
+   xlab("Title") +
+   ylab("Total Count") +
+   labs(fill = "Survived") 
> 
> ##In the titanic you are Mr then there is less chance of survival, Miss and Mrs having better survival rate then Master and Officer 
> 
> ### Visualize the 3-way of relationship of Title, Pclass, and Survival
> 
> ggplot(train_t, aes(x = title, fill = Survived)) +
+   geom_bar() +
+   facet_wrap(~Pclass) + 
+   ggtitle("3-way relationship of Title, Pclass, and Survival") +
+   xlab("Title") +
+   ylab("Total Count") +
+   labs(fill = "Survived")
> 
> ##Master in 1st and 2nd class has 100% Survival where has Mrs and Miss having 90% chance of Survival in 1st and 2nd class 
> ##Since Title mostly depending on Age (except few cases), I will use title in place of age which has 263 missing observation
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Lets create a Family size using Sibsp and Parch
> 
> 
> train_t$FamilySize <-train_t$SibSp + train_t$Parch + 1
> 
> train_t$FamilySized[train_t$FamilySize == 1]   <- 'Single'
> train_t$FamilySized[train_t$FamilySize < 5 & train_t$FamilySize >= 2]   <- 'Small'
> train_t$FamilySized[train_t$FamilySize >= 5]   <- 'Big'
> 
> train_t$FamilySized=as.factor(train_t$FamilySized)
> 
> 
> ###Lets Visualize the Survival rate by Family size 
> ggplot(train_t,aes(x = FamilySized,fill=factor(Survived))) +
+   geom_bar() +
+   ggtitle("Family Size V/S Survival Rate") +
+   xlab("FamilySize") +
+   ylab("Total Count") +
+   labs(fill = "Survived")
> 
> 
> ###Big Family in Titanic having worst survival rate then Smaller and Alone
> 
> ####Why Big Family has a probelm?, Check in the below visualization
> 
> ggplot(train_t, aes(x = FamilySized, fill = Survived)) +
+   geom_bar() +
+   facet_wrap(~title) + 
+   ggtitle("3D View of Fmily Size, Title and Survival rate") +
+   xlab("family.size") +
+   ylab("Total Count") +
+   ylim(0,300) +
+   labs(fill = "Survived")
Warning message:
Removed 1 rows containing missing values (geom_bar). 
> 
> 
> 
> ##You are a Master in the Big Family your Survival rate is absolutely nill even though overall survival rate of master is very good
> 
> 
> ggplot(train_t, aes(x = FamilySized, fill = Survived)) +
+   geom_bar() +
+   facet_wrap(~Pclass) + 
+   ggtitle("3D View of Fmily Size, Title and Survival rate") +
+   xlab("family.size") +
+   ylab("Total Count") +
+   ylim(0,300) +
+   labs(fill = "Survived")
Warning message:
Removed 1 rows containing missing values (geom_bar). 
> 
> ### Now this clearly shows that max big families are from class 3 and hence survival rate is least.
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> 
> ###is there any association between Survial rate and where he get into the Ship.   
>  ggplot(train_t,aes(x = Embarked,fill=factor(Survived))) +
+   geom_bar() +
+   ggtitle("Embarked vs Survival") +
+   xlab("Embarked") +
+   ylab("Total Count") +
+   labs(fill = "Survived") 
> 
> # There is no correlation between survival rate and embarked.
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> str(train_t)
'data.frame':	891 obs. of  15 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : Factor w/ 2 levels "0","1": 1 2 2 2 1 1 1 1 2 2 ...
 $ Pclass     : Factor w/ 3 levels "1","2","3": 3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  "" "C85" "" "C123" ...
 $ Embarked   : Factor w/ 3 levels "C","Q","S": 3 1 3 3 3 2 3 3 3 1 ...
 $ title      : chr  "Mr" "Mrs" "Miss" "Mrs" ...
 $ FamilySize : num  2 2 1 2 1 1 1 5 3 2 ...
 $ FamilySized: Factor w/ 3 levels "Big","Single",..: 3 3 2 3 2 2 2 1 3 3 ...
> feauter1<-train_t
> response <- as.factor(train_t$Survived) 
> feauter1$Survived=as.factor(train_t$Survived)
> 
> ###For Cross validation purpose will keep 20% of data aside from my orginal train set
> ##This is just to check how well my data works for unseen data
> set.seed(500)
> ind=createDataPartition(feauter1$Survived,times=1,p=0.8,list=FALSE)
> train_val=feauter1[ind,]
> test_val=feauter1[-ind,]
> 
> str(train_val)
'data.frame':	714 obs. of  15 variables:
 $ PassengerId: int  2 3 4 5 6 9 10 11 13 15 ...
 $ Survived   : Factor w/ 2 levels "0","1": 2 2 2 1 1 2 2 2 1 1 ...
 $ Pclass     : Factor w/ 3 levels "1","2","3": 1 3 1 3 3 3 2 3 3 3 ...
 $ Name       : chr  "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" "Allen, Mr. William Henry" ...
 $ Sex        : Factor w/ 2 levels "female","male": 1 1 1 2 2 1 1 1 2 1 ...
 $ Age        : num  38 26 35 35 NA 27 14 4 20 14 ...
 $ SibSp      : int  1 0 1 0 0 0 1 1 0 0 ...
 $ Parch      : int  0 0 0 0 0 2 0 1 0 0 ...
 $ Ticket     : chr  "PC 17599" "STON/O2. 3101282" "113803" "373450" ...
 $ Fare       : num  71.28 7.92 53.1 8.05 8.46 ...
 $ Cabin      : chr  "C85" "" "C123" "" ...
 $ Embarked   : Factor w/ 3 levels "C","Q","S": 1 3 3 3 2 3 1 3 3 3 ...
 $ title      : chr  "Mrs" "Miss" "Mrs" "Mr" ...
 $ FamilySize : num  2 1 2 1 1 3 2 3 1 1 ...
 $ FamilySized: Factor w/ 3 levels "Big","Single",..: 3 2 3 2 2 3 3 3 2 2 ...
> 
> #Lets run Logistic regression model
> log.mod <- glm(Survived ~ Pclass+Sex+title+FamilySize, family = binomial(link=logit), 
+                data = train_val)
> ###Check the summary
> summary(log.mod)

Call:
glm(formula = Survived ~ Pclass + Sex + title + FamilySize, family = binomial(link = logit), 
    data = train_val)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.3697  -0.6226  -0.4356   0.5589   2.3580  

Coefficients:
                 Estimate Std. Error z value Pr(>|z|)    
(Intercept)      19.11632  621.65218   0.031    0.975    
Pclass2          -1.17808    0.30082  -3.916 8.99e-05 ***
Pclass3          -2.02182    0.25784  -7.841 4.46e-15 ***
Sexmale         -15.14744  621.65187  -0.024    0.981    
titleMiss       -15.96198  621.65209  -0.026    0.980    
titleMr          -3.84536    0.55248  -6.960 3.40e-12 ***
titleMrs        -15.34309  621.65211  -0.025    0.980    
titleRare Title  -3.92441    0.82318  -4.767 1.87e-06 ***
FamilySize       -0.40883    0.08375  -4.882 1.05e-06 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 950.86  on 713  degrees of freedom
Residual deviance: 608.70  on 705  degrees of freedom
AIC: 626.7

Number of Fisher Scoring iterations: 13

> 
> confint(log.mod)
Waiting for profiling to be done...
                      2.5 %     97.5 %
(Intercept)     -77.6588978         NA
Pclass2          -1.7769285 -0.5957071
Pclass3          -2.5372927 -1.5248350
Sexmale                  NA 82.0396722
titleMiss                NA 80.9134018
titleMr          -4.9765463 -2.7990664
titleMrs                 NA 81.4940448
titleRare Title  -5.6308904 -2.3736409
FamilySize       -0.5803419 -0.2516179
There were 43 warnings (use warnings() to see them)
> 
> ###Predict train data
> train.probs <- predict(log.mod, data=train_val,type =  "response")
> table(train_val$Survived,train.probs>0.5)
   
    FALSE TRUE
  0   394   46
  1    79  195
> 
> (397+196)/(397+196+78+43)
[1] 0.8305322
> 
> ###Logistic regression predicted train data with accuracy rate of 0.83 
> 
> 
> test.probs <- predict(log.mod, newdata=test_val,type =  "response")
> table(test_val$Survived,test.probs>0.5)
   
    FALSE TRUE
  0   103    6
  1    20   48
> 
> (96+53)/(96+53+13+15)
[1] 0.8418079
> 
> ###Logistic regression predicted test data with accuracy rate of 0.84
> 
> 
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> # Let's visualize
> ggplot(train_t, aes(x = FamilySized, fill = Survived)) +
+   geom_bar() +
+   facet_wrap( title ~ Pclass) + 
+   ggtitle("3D View of Fmily Size, Title and Survival rate") +
+   xlab("family.size") +
+   ylab("Total Count") +
+   ylim(0,300) +
+   labs(fill = "Survived")
> 
> 
> 
> proc.time()
   user  system elapsed 
  5.191   0.254   5.541 
