{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "7ab0c29e-c100-e158-034e-2df7beb5c29b"
      },
      "source": [
        "Predicting the Survival on Titanic Disaster\n",
        "===============================================\n",
        "\n",
        "This is a predictive machine learning project using ```R``` based on Kaggle competition: [Titanic: Machine Learning from Disaster](https://www.kaggle.com/c/titanic). \n",
        "\n",
        "This is my first attempt at Kaggle. This work is influenced by [Becky Wang's](https://www.kaggle.com/beiqiwang/titanic/predictive-analysis-of-survival-rate-on-titanic) and [Amber Thomas's](https://www.kaggle.com/amberthomas/titanic/predicting-survival-on-the-titanic/) analysis.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "2fd61e78-1b90-57da-eacb-d09b91364494"
      },
      "source": [
        "## 1. Introduction\n",
        "\n",
        "The sinking of the RMS Titanic is one of the most infamous shipwrecks in history.\u00a0 On April 15, 1912, during her maiden voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew. This sensational tragedy shocked the international community and led to better safety regulations for ships.\n",
        "\n",
        "One of the reasons that the shipwreck led to such loss of life was that there were not enough lifeboats for the passengers and crew. Although there was some element of luck involved in surviving the sinking, some groups of people were more likely to survive than others, such as **women**, **children**, and the **upper-class**.\n",
        "\n",
        "In this challenge, we are required to complete to predict which passengers survived the tragedy, using the tools of machine learning.\n",
        "\n",
        "## 2. Data Overview\n",
        "the data for this analysis can be downloaded by clicking [here](https://www.kaggle.com/c/titanic/data)\n",
        "The data has been split into two groups:\n",
        "* training set (train.csv)\n",
        "* test set (test.csv)\n",
        "The training set is used to build machine learning models. For the training set, the outcome (also known as the \u201cground truth\u201d) for each passenger is also provided. \n",
        "The test set should be used to see how well our model performs on unseen data. For the test set, the outcome is not provided. For each passenger in the test set, we use the model we trained to predict whether or not they survived the sinking of the Titanic.\n",
        "\n",
        "**Data Dictionary**\n",
        "\n",
        "| Variable  |  Definition | Key  |   \n",
        "|-----------|-------------|---------|\n",
        "\n",
        "| survival  |  Survival   |  0 = No, 1 = Yes |  \n",
        "|  pclass\t |  Ticket class |  1 = 1st, 2 = 2nd, 3 = 3rd |  \n",
        "|  sex |  Sex |   |   \n",
        "|  Age |   Age in years |   |  \n",
        "|  sibsp |  # of siblings / spouses aboard the Titanic |   |   \n",
        "| parch  | # of parents / children aboard the Titanic  |   |   \n",
        "|  ticket | Ticket number  |   |  \n",
        "|  fare | Passenger fare  |   |   \n",
        "| cabin  |  Cabin number  |   |   \n",
        "| embarked  | Port of Embarkation  |C = Cherbourg, Q = Queenstown, S = Southampton   |   \n",
        "\n",
        "**Variable Notes**\n",
        "\n",
        "pclass: A proxy for socio-economic status (SES)\n",
        "1st = Upper\n",
        "2nd = Middle\n",
        "3rd = Lower\n",
        "\n",
        "age: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n",
        "\n",
        "sibsp: The dataset defines family relations in this way...\n",
        "Sibling = brother, sister, stepbrother, stepsister\n",
        "Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n",
        "\n",
        "parch: The dataset defines family relations in this way...\n",
        "Parent = mother, father\n",
        "Child = daughter, son, stepdaughter, stepson\n",
        "Some children travelled only with a nanny, therefore parch=0 for them.\n",
        "\n",
        "### 2.1. Loading and Checking Data\n",
        "\n",
        "We start by loading the libraries that are needed:\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "4394514a-ee5f-7ed7-9062-7fc4fb02beac"
      },
      "outputs": [],
      "source": [
        "#load libraries\n",
        "library(dtplyr) #data wrangling\n",
        "library('ggthemes') #visualization\n",
        "library(ggplot2) #visualization\n",
        "library(data.table)\n",
        "library(randomForest) #random forest\n",
        "library(e1071) #svm\n",
        "library(rpart) #decision tree"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "d271252b-3de8-2e16-7d9b-35bf0a493e9d"
      },
      "source": [
        "Then we load our data and have a look at it:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "bd5b95fb-841f-e6db-5ae2-8524adf826c6"
      },
      "outputs": [],
      "source": [
        "#load train.csv\n",
        "train <- read.csv('../input/train.csv', stringsAsFactors = FALSE)\n",
        "#load test.csv\n",
        "test  <- read.csv('../input/test.csv', stringsAsFactors = FALSE)\n",
        "\n",
        "#combine twp data sets\n",
        "test$Survived <- NA\n",
        "allData <- rbind(train,test)\n",
        "\n",
        "#show the column names\n",
        "colnames(allData)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "87998a82-b11a-7af7-ea04-a0e0755a5444"
      },
      "outputs": [],
      "source": [
        "#show first few rows of the data\n",
        "head(allData)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "b90579bf-3814-5305-2046-f029b5432671"
      },
      "outputs": [],
      "source": [
        "#check the structure of the data\n",
        "str(allData)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "27bae27a-2766-4646-3032-14aefa6e512c"
      },
      "source": [
        "We see that there are 1309 observations (891 from train dataset and 418 from test dataset.) and 12 variables. We also observe that some of the variables are categorical variables, so we make them factors:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "452781b4-15c0-b4bc-ff24-807efa89e002"
      },
      "outputs": [],
      "source": [
        "#converting categorical variables to factors\n",
        "categorical_variables <- c('Survived', 'Pclass', 'Sex', 'Embarked')\n",
        "allData[categorical_variables] <- lapply(allData[categorical_variables], function(x) as.factor(x))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "f8af14b9-bc5e-c5c1-8e83-a5661a38e3ba"
      },
      "source": [
        "## 3. Data Preparation\n",
        "\n",
        "In this section, we shall try to fill in the missing values in the data. Also the Name column in general, might not be useful, but we feel that the titles can be important since for example, **children** and **women** have more chance of survival. \n",
        "\n",
        "### 3.1. Extracting titles from the name column"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "87607fbf-7617-83bd-fa9f-7b74d287a67f"
      },
      "outputs": [],
      "source": [
        "#extracting titles from Name\n",
        "names <- allData$Name\n",
        "titles <-  gsub(\"^.*, (.*?)\\\\..*$\", \"\\\\1\", names)\n",
        "\n",
        "#adding the column Titles in the dataset\n",
        "allData$Titles <- titles\n",
        "table(allData$Sex, allData$Title)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "b36b4218-6aea-4983-a789-74eb25657122"
      },
      "outputs": [],
      "source": [
        "#replacing other titles to 'Others'\n",
        "allData$Titles[allData$Titles != 'Mr' & allData$Titles != 'Miss' & allData$Titles != 'Mrs' & allData$Titles != 'Master'] <- 'Others'\n",
        "table(allData$Sex, allData$Title)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "92a41596-3d04-8054-54ba-f0db58167662"
      },
      "source": [
        "### 3.1. Looking for missing values\n",
        "### We first try to find the columns with missing values:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "eca9ec51-33eb-d0d3-5a55-cd9ec51d4bd8"
      },
      "outputs": [],
      "source": [
        "#checking for columns with missing data\n",
        "MissingData <- c()\n",
        "for(column in names(allData)) {\n",
        "    missing <- sapply(allData[[column]], function(x) {return(x=='' | is.na(x))})\n",
        "    MissingData <- c(MissingData, sum(missing))\n",
        "}\n",
        "names(MissingData) <- names(allData)\n",
        "\n",
        "MissingData"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "8d710afe-6596-6ad0-10c0-050054ee264f"
      },
      "source": [
        "The missing values in Survived corresponds to the test data. We see that Cabin has so many missing rows, but we think that this is not an important variable anyway so we ignore it. We now fill in the missing data in Age, Fare and Embarked columns.\n",
        "\n",
        "###3.1.1. Fare"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "121de0c3-5872-62d4-38d9-e361fd908101"
      },
      "outputs": [],
      "source": [
        "#find the person with missing fare\n",
        "allData[is.na(allData$Fare),]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "809ef10e-75f2-2c98-0e3f-e1f2c6c2e29f"
      },
      "outputs": [],
      "source": [
        "#How much do people of Pclass=3 pay?\n",
        "thirdClass <- allData[allData$Pclass==3,]\n",
        "print(paste(\"The median fare of PClass=3 passengers is:\", median(thirdClass$Fare, na.rm=TRUE)))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "1273b051-e54c-2208-8d03-ec749748af04"
      },
      "outputs": [],
      "source": [
        "#Fill in missing fare\n",
        "allData$Fare[is.na(allData$Fare)] <- median(thirdClass$Fare, na.rm=TRUE)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "7332c66c-3c4c-50c0-1aa8-c1bc12e7a7d6"
      },
      "source": [
        "###3.1.2. Embarked"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "327ead47-0712-97a3-f6ea-b73a704fc104"
      },
      "outputs": [],
      "source": [
        "#find the persons with missing embarkment\n",
        "allData[allData$Embarked=='',]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "d2e307d9-f53b-b3f0-ed13-72df2f9d266c"
      },
      "source": [
        "They are both first class passengers and paid $80. We try to find their possible embarkment below:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "834bf958-1cde-88f9-837c-c1d4712d7270"
      },
      "outputs": [],
      "source": [
        "# Get rid of our missing values\n",
        "embarkFare <- allData[allData$Embarked!='',]\n",
        "\n",
        "# Use ggplot2 to visualize embarkment, passenger class, & median fare\n",
        "ggplot(embarkFare, aes(x = Embarked, y = Fare, fill = factor(Pclass))) +\n",
        "  geom_boxplot() +\n",
        "  geom_hline(aes(yintercept=80), \n",
        "    colour='orange', linetype='solid', lwd=1) +\n",
        "  labs(fill=\"Passenger Class\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "511cd430-7c57-2d93-9c2d-bc4f3a2dabd2"
      },
      "source": [
        "We see that the median of first class passengers is $80 for those who embarked from C. We can thus assume that both these persons from C also:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "a08521fb-8f9b-743d-b48c-effe1aa32ced"
      },
      "outputs": [],
      "source": [
        "#fill in missing embarkment\n",
        "allData$Embarked[allData$Embarked==''] <- 'C'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "aa41a1da-04cd-54ae-38c1-4b5b59da33f5"
      },
      "source": [
        "###3.1.3. Age\n",
        "Various methods can be used to fill age columns, for example, we can use mean value or we can use a random sample. But here we prefer to use a linear model for age prediction."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "7ccc72d6-9528-e5c1-3b3c-b52126857a37"
      },
      "outputs": [],
      "source": [
        "#Use stepwise selection for predictors for the linear model\n",
        "allDataAgeLM <- lm(Age~Pclass+Sex+SibSp+Parch+Fare+Embarked+Titles, data=allData)\n",
        "simplifiedAgeLM <- step(allDataAgeLM)\n",
        "predictedAge <- allData$Age\n",
        "predictedAge[is.na(predictedAge)] <- predict(simplifiedAgeLM, allData[is.na(allData$Age),])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "54824608-af38-b789-d038-fdaf67ce8a92"
      },
      "outputs": [],
      "source": [
        "#plotting age distributions\n",
        "par(mfrow=c(1,2))\n",
        "hist(allData$Age, freq=F, main='Original Age', \n",
        "  col='grey', ylim=c(0,0.04), breaks =20)\n",
        "hist(predictedAge, freq=F, main='Predicted Age', \n",
        "  col='lightgreen', ylim=c(0,0.04), breaks =20)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "63fefa8d-89c4-f877-4e92-8e3152bacb02"
      },
      "source": [
        "The distribution has changed a little bit, but it still looks fine. So we can go ahead with it. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "6cbb1f20-0074-47e6-643c-122fa4fedc9d"
      },
      "outputs": [],
      "source": [
        "#fill in missing ages\n",
        "allData$Age <- predictedAge"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "df269c56-8b76-97a4-c332-f66ef60e0f6a"
      },
      "source": [
        "## 3. Data Visualization\n",
        "In this section, we shall try to visualize our data and try to find out the impact of various factors on the survival rate. \n",
        "\n",
        "We shall not use absolute values for these graphs and use percentages instead. We think that it is easier to visualize the impact when the data is in percentages.\n",
        "\n",
        "We first check the percentage of person surviving the disaster:\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "78e33bbf-49c5-9e33-7fc2-5aca7b35e794"
      },
      "outputs": [],
      "source": [
        "#percentage of people surviving the disaster\n",
        "print(paste(\"The percentage of people surviving the disaster: \", round(mean(train$Survived) * 100, 2)))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "1bdf9450-2a92-ca93-196f-d8eb5486472f"
      },
      "source": [
        "### 3.1. Gender vs. Survival"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "74a510a3-1d8a-2fc0-f51e-c08ccd9845b1"
      },
      "outputs": [],
      "source": [
        "#Gender vs Survival\n",
        "genderImpact <- data.table(table(allData[1:891, \"Sex\"], train$Survived))\n",
        "names(genderImpact) <- c(\"Sex\",\"Survived\",\"Count\")\n",
        "genderImpact[, Percentage := sum(Count), by=list(Sex)]\n",
        "genderImpact[, Percentage := Count/Percentage*100]\n",
        "ggplot(genderImpact, aes(x=Sex, y=Percentage, fill=Survived)) + geom_histogram(stat = \"identity\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "da2b4c76-c944-523e-bdec-0ec637209202"
      },
      "source": [
        "We can clearly see from the histogram above that female's survival rate is greater than the average survival rate (38.38%).\n",
        "\n",
        "###3.2. Passenger class vs. Survival"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "97440e2f-d02e-0b2b-0dd6-0a66a2f3e383"
      },
      "outputs": [],
      "source": [
        "#Pclass vs Survived\n",
        "pclassImpact <- data.table(table(allData[1:891, \"Pclass\"], train$Survived))\n",
        "names(pclassImpact) <- c(\"Pclass\",\"Survived\",\"Count\")\n",
        "pclassImpact[, Percentage := sum(Count), by=list(Pclass)]\n",
        "pclassImpact[, Percentage := Count/Percentage*100]\n",
        "ggplot(pclassImpact, aes(x=Pclass, y=Percentage, fill=Survived)) + geom_histogram(stat = \"identity\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "1755abcc-5134-dc10-acec-2529e0b6220f"
      },
      "source": [
        "From the histogram, we notice that Pclass = 1 group has the highest survival rate. Pclass = 3 group has the lowest survival rate within these three groups, and it is even lower than the average survival rate of 38.38%.\n",
        "\n",
        "### 3.3. Family vs. Survival"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "e92cd9ba-b1b3-bf36-7027-7a7ca2765ff7"
      },
      "outputs": [],
      "source": [
        "#Parch vs Survived\n",
        "ParchImpact <- data.table(table(allData[1:891,\"Parch\"], train$Survived))\n",
        "names(ParchImpact) <- c(\"Parch\",\"Survived\",\"Count\")\n",
        "ParchImpact[, Percentage := sum(Count), by=list(Parch)]\n",
        "ParchImpact[, Percentage := Count/Percentage*100]\n",
        "ggplot(ParchImpact, aes(x=Parch, y=Percentage, fill=Survived)) + geom_histogram(stat = \"identity\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "de0fa165-9aea-e411-c843-4bcaee486c7c"
      },
      "outputs": [],
      "source": [
        "#Siblings vs Survived\n",
        "SiblingImpact <- data.table(table(allData[1:891,\"SibSp\"], train$Survived))\n",
        "names(SiblingImpact) <- c(\"SibSp\",\"Survived\",\"Count\")\n",
        "SiblingImpact[, Percentage := sum(Count), by=list(SibSp)]\n",
        "SiblingImpact[, Percentage := Count/Percentage*100]\n",
        "ggplot(SiblingImpact, aes(x=SibSp, y=Percentage, fill=Survived)) + geom_histogram(stat = \"identity\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "1b83c7d3-f01c-abd5-0d76-d5aa25f47ebd"
      },
      "source": [
        "We see similar trends in both the above histograms.\n",
        "\n",
        "###3.4. Place of Embarkment vs. Survival"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "b76ee8d3-4ebe-673b-0b29-f28da0b3eaf7"
      },
      "outputs": [],
      "source": [
        "#Embarked vs Survived\n",
        "EmbarkedImpact <- data.table(table(allData[1:891, \"Embarked\"], train$Survived))\n",
        "names(EmbarkedImpact) <- c(\"Embarked\",\"Survived\",\"Count\")\n",
        "EmbarkedImpact[, Percentage := sum(Count), by=list(Embarked)]\n",
        "EmbarkedImpact[, Percentage := Count/Percentage*100]\n",
        "ggplot(EmbarkedImpact, aes(x=Embarked, y=Percentage, fill=Survived)) + geom_histogram(stat = \"identity\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "93b4d47a-e08e-8602-dbd2-57aa266c966d"
      },
      "source": [
        "We see that people who embarked from Cherbourg have a greater chance of survival.\n",
        "\n",
        "###3.5. Fare vs. Survival"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "7d19d265-1b0a-a935-71c6-ebd79ca5c52e"
      },
      "outputs": [],
      "source": [
        "#Fare vs Survived\n",
        "FareImpact <- data.frame(allData[1:891,\"Fare\"], train$Survived)\n",
        "FareImpact[,1] <- cut(FareImpact[,1], 10)\n",
        "FareImpact <- data.table(table(FareImpact))\n",
        "names(FareImpact) <- c(\"Fare\",\"Survived\",\"Count\")\n",
        "FareImpact[, Percentage := sum(Count), by=list(Fare)]\n",
        "FareImpact[, Percentage := Count/Percentage*100]\n",
        "ggplot(FareImpact, aes(x=Fare, y=Percentage, fill=Survived)) + geom_histogram(stat = \"identity\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "9c97af1c-3027-1c30-c4a3-cf4bf9d845e5"
      },
      "source": [
        "We see that people with low fare have a lower chance of survival.\n",
        "\n",
        "###3.6. Age vs. Survival"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "e9ff7b18-f22c-488f-331e-14d1900ef610"
      },
      "outputs": [],
      "source": [
        "#Age vs Survived\n",
        "AgeImpact <- data.frame(allData[1:891, \"Age\"], train$Survived)\n",
        "AgeImpact[,1] <- cut(AgeImpact[,1], 10)\n",
        "AgeImpact <- data.table(table(AgeImpact))\n",
        "names(AgeImpact) <- c(\"Age\",\"Survived\",\"Count\")\n",
        "AgeImpact[, Percentage := sum(Count), by=list(Age)]\n",
        "AgeImpact[, Percentage := Count/Percentage*100]\n",
        "ggplot(AgeImpact, aes(x=Age, y=Percentage, fill=Survived)) + geom_histogram(stat = \"identity\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "e5cc2401-9aa3-b336-f500-15489347402f"
      },
      "source": [
        "We see that younger children have a higher rate of survival.\n",
        "\n",
        "###3.7. Titles vs. Survival"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "71195f49-cc5c-f484-6383-facb3f22da71"
      },
      "outputs": [],
      "source": [
        "#Title vs Survived\n",
        "TitleImpact <- data.table(table(allData[1:891, \"Titles\"], train$Survived))\n",
        "names(TitleImpact) <- c(\"Titles\",\"Survived\",\"Count\")\n",
        "TitleImpact[, Percentage := sum(Count), by=list(Titles)]\n",
        "TitleImpact[, Percentage := Count/Percentage*100]\n",
        "ggplot(TitleImpact, aes(x=Titles, y=Percentage, fill=Survived)) + geom_histogram(stat = \"identity\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "894fde4c-6751-846f-1b5e-1ddb26b25cf9"
      },
      "source": [
        "##4. Data Modelling\n",
        "We first choose our features that have significant effect on survival according to the visualization above. \n",
        "\n",
        "**Survived** is our dependent or response variable, whereas Age, Titles, Pclass, Sex, Parch, Sibsp, Fare, and Embarked are our independent variables. \n",
        "\n",
        "We first split the data into two parts again:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "c92ecb22-4451-a4da-fae4-b9a1be2501b5"
      },
      "outputs": [],
      "source": [
        "# Spliting the data back to a train and a test set\n",
        "train <- allData[1:891,]\n",
        "test <- allData[892:1309, -2]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "6ffc97f0-01f9-badf-5a67-740370a2a892"
      },
      "source": [
        "##4.1. Model Training\n",
        "We consider common machine learning model such as Logistic Regression, Decision Tree, Random Forest and SVM."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "f7fc9d71-d908-d76b-b82d-ad21ae648b1d"
      },
      "outputs": [],
      "source": [
        "#logistic regression\n",
        "logistic_model <- glm(factor(Survived) ~ Age + Fare + Sex + Embarked + Parch + SibSp \n",
        "                 + Titles + Pclass, data = train,family = binomial)\n",
        "\n",
        "#predicted result\n",
        "ans_logistic = rep(NA,891)\n",
        "for(i in 1:891){\n",
        "  ans_logistic[i] = round(logistic_model$fitted.values[[i]],0)\n",
        "}\n",
        "\n",
        "#check result\n",
        "mean(ans_logistic == train$Survived)\n",
        "table(ans_logistic)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "2d790207-cd32-03c7-a039-782666ce9e7a"
      },
      "outputs": [],
      "source": [
        "#random forest\n",
        "set.seed(123)\n",
        "rf_model <- randomForest(factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,\n",
        "                                          data = train)\n",
        "# predicted result of regression\n",
        "rf.fitted = predict(rf_model)\n",
        "ans_rf = rep(NA,891)\n",
        "for(i in 1:891){\n",
        "  ans_rf[i] = as.integer(rf.fitted[[i]]) - 1\n",
        "}\n",
        "    # check result\n",
        "mean(ans_rf == train$Survived)\n",
        "table(ans_rf)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "91946d39-559a-3a83-e23d-b92d12a1972d"
      },
      "outputs": [],
      "source": [
        "# decision tree\n",
        "dt_model <- rpart(factor(Survived) ~ Age + Fare + Sex + Embarked + Parch + SibSp \n",
        "                 + Titles + Pclass, data = train)\n",
        "\n",
        "# predicted result of regression\n",
        "dt.fitted = predict(dt_model)\n",
        "ans_dt = rep(NA,891)\n",
        "for(i in 1:891){\n",
        "  if(dt.fitted[i,1] >= dt.fitted[i,2] ){\n",
        "    ans_dt[i] = 0\n",
        "  } else{\n",
        "    ans_dt[i] = 1\n",
        "  }\n",
        "}\n",
        "#check result\n",
        "mean(ans_dt == train$Survived)\n",
        "table(ans_dt)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "3cbeb0cf-b8fc-3af8-c007-fdcfd6178561"
      },
      "outputs": [],
      "source": [
        "# svm\n",
        "svm_model <- svm(factor(Survived) ~ Age + Fare + Sex + Embarked + Parch + SibSp \n",
        "                 + Titles + Pclass, data = train)\n",
        "\n",
        "    # predicted result of regression\n",
        "svm.fitted = predict(svm_model)\n",
        "ans_svm = rep(NA,891)\n",
        "for(i in 1:891){\n",
        "  ans_svm[i] = as.integer(svm.fitted[[i]]) - 1\n",
        "}\n",
        "    # check result\n",
        "mean(ans_svm == train$Survived)\n",
        "table(ans_svm)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "467e9037-b217-546a-6eba-dfa7e24fcc6d"
      },
      "source": [
        "##4.2. Model Evaluation\n",
        "We now measure the model accuracy using the formula given below: \n",
        "\n",
        "**Accuracy = (True Positive + True Negative)/(All outcomes)**\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "62d15970-3661-8d39-fd22-70785fc67c33"
      },
      "source": [
        "###4.2.1. Logistic Regression Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "676edec7-a485-13e8-3f15-e55317f7cc3d"
      },
      "outputs": [],
      "source": [
        "#logistic regression model\n",
        "a = sum(ans_logistic ==1 & train$Survived == 1) #True Positive\n",
        "b = sum(ans_logistic ==1 & train$Survived == 0) #False Positive\n",
        "c = sum(ans_logistic ==0 & train$Survived == 1) #False Negative\n",
        "d = sum(ans_logistic ==0 & train$Survived == 0) #True Negative\n",
        "\n",
        "print(paste(\"The accuracy is \", round((a+d)/(a+b+c+d) * 100, 2),\"%.\"))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "f83cbf3d-42af-59b8-5456-e046a368db28"
      },
      "source": [
        "###4.2.2. Random Forest Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "3c7c9fba-1656-6ccd-87ed-d189ed3e2b87"
      },
      "outputs": [],
      "source": [
        "#Random Forest model\n",
        "a = sum(ans_rf ==1 & train$Survived == 1)\n",
        "b = sum(ans_rf ==1 & train$Survived == 0)\n",
        "c = sum(ans_rf ==0 & train$Survived == 1)\n",
        "d = sum(ans_rf ==0 & train$Survived == 0)\n",
        "\n",
        "print(paste(\"The accuracy is \", round((a+d)/(a+b+c+d) * 100, 2),\"%.\"))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "c94c2dcb-a2dd-93b4-9cc7-8bcdb23c9286"
      },
      "source": [
        "###4.2.3. Decision Tree Model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "ae19ac9b-2c1a-8e18-4ae4-673aacfc8cd7"
      },
      "outputs": [],
      "source": [
        "#Decision Tree model\n",
        "a = sum(ans_dt ==1 & train$Survived == 1)\n",
        "b = sum(ans_dt ==1 & train$Survived == 0)\n",
        "c = sum(ans_dt ==0 & train$Survived == 1)\n",
        "d = sum(ans_dt ==0 & train$Survived == 0)\n",
        "\n",
        "print(paste(\"The accuracy is \", round((a+d)/(a+b+c+d) * 100, 2),\"%.\"))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "a6b6d97d-7ff6-2009-f06f-fd884dddfa54"
      },
      "source": [
        "###4.2.4. SVM"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "201b013b-d0c3-6e29-274b-d69bec7fbd2b"
      },
      "outputs": [],
      "source": [
        "#SVM\n",
        "a = sum(ans_svm ==1 & train$Survived == 1)\n",
        "b = sum(ans_svm ==1 & train$Survived == 0)\n",
        "c = sum(ans_svm ==0 & train$Survived == 1)\n",
        "d = sum(ans_svm ==0 & train$Survived == 0)\n",
        "\n",
        "print(paste(\"The accuracy is \", round((a+d)/(a+b+c+d) * 100, 2),\"%.\"))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "8383ee01-a43b-4a8e-4edc-ae104534daa0"
      },
      "source": [
        "##5. Prediction of Survival\n",
        "Since all models have similar prediction accuracy, we can use all of them to predict the survival from Titanic disaster:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "eef14527-f2bd-3531-2650-f9cc66cbcbb3"
      },
      "outputs": [],
      "source": [
        "#prediction using logistic regression model\n",
        "prediction_logistic = predict(logistic_model, newdata = test)\n",
        "prediction_logistic = as.numeric(prediction_logistic > 0)\n",
        "table(prediction_logistic)\n",
        "\n",
        "#prediction using Random Forest model\n",
        "prediction_rf = predict(rf_model, newdata = test)\n",
        "prediction_rf = as.integer(prediction_rf) - 1\n",
        "table(prediction_rf)\n",
        "\n",
        "#prediction using decision tree model\n",
        "prediction_dt = predict(dt_model, newdata = test)\n",
        "prediction_dt = ifelse(prediction_dt[,1] >= prediction_dt[,2], 0, 1)\n",
        "table(prediction_dt)\n",
        "\n",
        "#prediction using svm\n",
        "prediction_svm = predict(svm_model, newdata = test)\n",
        "prediction_svm = as.integer(prediction_svm) - 1\n",
        "table(prediction_svm)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "_cell_guid": "5f354145-b9f7-5b6f-3bf4-8ba67fd0d9f9"
      },
      "source": [
        "##5.1. Creating files for submission"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "_cell_guid": "4b9dc5ef-72e6-8ee5-b4b8-4a850925c996"
      },
      "outputs": [],
      "source": [
        "# create a csv file for submittion\n",
        "data<-data.frame(PassengerId = test$PassengerId, Survived = prediction_logistic)\n",
        "write.csv(data,file = \"PredictionLogistic.csv\",row.names = FALSE)\n",
        "\n",
        "data<-data.frame(PassengerId = test$PassengerId, Survived = prediction_rf)\n",
        "write.csv(data,file = \"PredictionRF.csv\",row.names = FALSE)\n",
        "\n",
        "data<-data.frame(PassengerId = test$PassengerId, Survived = prediction_dt)\n",
        "write.csv(data,file = \"PredictionDT.csv\",row.names = FALSE)\n",
        "\n",
        "data<-data.frame(PassengerId = test$PassengerId, Survived = prediction_svm)\n",
        "write.csv(data,file = \"PredictionSVM.csv\",row.names = FALSE)"
      ]
    }
  ],
  "metadata": {
    "_change_revision": 0,
    "_is_fork": false,
    "kernelspec": {
      "display_name": "R",
      "language": "R",
      "name": "ir"
    },
    "language_info": {
      "codemirror_mode": "r",
      "file_extension": ".r",
      "mimetype": "text/x-r-source",
      "name": "R",
      "pygments_lexer": "r",
      "version": "3.3.3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}