
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> # This R environment comes with all of CRAN preinstalled, as well as many other helpful packages
> 
> # The environment is defined by the kaggle/rstats docker image: https://github.com/kaggle/docker-rstats
> 
> # For example, here's several helpful packages to load in 
> 
> #library(ggplot2) # Data visualization
> #library(readr) # CSV file I/O, e.g. the read_csv function
> #library('ggthemes') # visualization
> #library('ggridges') # visualization
> #library('ggforce') # visualization
> #library('ggExtra') # visualization
> #library('GGally') # visualisation
> #library('scales') # visualization
> #library('grid') # visualisation
> #library('gridExtra') # visualisation
> #library('corrplot') # visualisation
> #library('VIM') # missing values
> 
> # wrangle
> #library('dplyr') # data manipulation
> #library('tidyr') # data manipulation
> library('readr') # data input
> #library('stringr') # string manipulation
> #library('forcats') # factor manipulation
> #library('modelr') # factor manipulation
> 
> # model
> #library('randomForest') # classification
> #library('xgboost') # classification
> #library('ROCR') # model validation
> #library(data.table)
> #library(knitr)
> 
> 
> # Input data files are available in the "../input/" directory.
> 
> df.train <- read_csv('../input/train.csv')
Parsed with column specification:
cols(
  PassengerId = [32mcol_double()[39m,
  Survived = [32mcol_double()[39m,
  Pclass = [32mcol_double()[39m,
  Name = [31mcol_character()[39m,
  Sex = [31mcol_character()[39m,
  Age = [32mcol_double()[39m,
  SibSp = [32mcol_double()[39m,
  Parch = [32mcol_double()[39m,
  Ticket = [31mcol_character()[39m,
  Fare = [32mcol_double()[39m,
  Cabin = [31mcol_character()[39m,
  Embarked = [31mcol_character()[39m
)
> df.test  <- read_csv('../input/test.csv')
Parsed with column specification:
cols(
  PassengerId = [32mcol_double()[39m,
  Pclass = [32mcol_double()[39m,
  Name = [31mcol_character()[39m,
  Sex = [31mcol_character()[39m,
  Age = [32mcol_double()[39m,
  SibSp = [32mcol_double()[39m,
  Parch = [32mcol_double()[39m,
  Ticket = [31mcol_character()[39m,
  Fare = [32mcol_double()[39m,
  Cabin = [31mcol_character()[39m,
  Embarked = [31mcol_character()[39m
)
> 
> # For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory
> system("ls ../input")
gender_submission.csv
test.csv
train.csv
> 
> 
> #For train
> 
> head(df.train)
[90m# A tibble: 6 x 12[39m
  PassengerId Survived Pclass Name  Sex     Age SibSp Parch Ticket  Fare Cabin
        [3m[90m<dbl>[39m[23m    [3m[90m<dbl>[39m[23m  [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m [3m[90m<chr>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m  [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m
[90m1[39m           1        0      3 Brauâ€¦ male     22     1     0 A/5 2â€¦  7.25 [31mNA[39m   
[90m2[39m           2        1      1 Cumiâ€¦ femaâ€¦    38     1     0 PC 17â€¦ 71.3  C85  
[90m3[39m           3        1      3 Heikâ€¦ femaâ€¦    26     0     0 STON/â€¦  7.92 [31mNA[39m   
[90m4[39m           4        1      1 Futrâ€¦ femaâ€¦    35     1     0 113803 53.1  C123 
[90m5[39m           5        0      3 Alleâ€¦ male     35     0     0 373450  8.05 [31mNA[39m   
[90m6[39m           6        0      3 Moraâ€¦ male     [31mNA[39m     0     0 330877  8.46 [31mNA[39m   
[90m# â€¦ with 1 more variable: Embarked [3m[90m<chr>[90m[23m[39m
> str(df.train)
tibble [891 Ã— 12] (S3: spec_tbl_df/tbl_df/tbl/data.frame)
 $ PassengerId: num [1:891] 1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : num [1:891] 0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : num [1:891] 3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr [1:891] "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : chr [1:891] "male" "female" "female" "female" ...
 $ Age        : num [1:891] 22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : num [1:891] 1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : num [1:891] 0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr [1:891] "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num [1:891] 7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr [1:891] NA "C85" NA "C123" ...
 $ Embarked   : chr [1:891] "S" "C" "S" "S" ...
 - attr(*, "spec")=
  .. cols(
  ..   PassengerId = [32mcol_double()[39m,
  ..   Survived = [32mcol_double()[39m,
  ..   Pclass = [32mcol_double()[39m,
  ..   Name = [31mcol_character()[39m,
  ..   Sex = [31mcol_character()[39m,
  ..   Age = [32mcol_double()[39m,
  ..   SibSp = [32mcol_double()[39m,
  ..   Parch = [32mcol_double()[39m,
  ..   Ticket = [31mcol_character()[39m,
  ..   Fare = [32mcol_double()[39m,
  ..   Cabin = [31mcol_character()[39m,
  ..   Embarked = [31mcol_character()[39m
  .. )
> dim(df.train)
[1] 891  12
> summary(df.train)
  PassengerId       Survived          Pclass          Name          
 Min.   :  1.0   Min.   :0.0000   Min.   :1.000   Length:891        
 1st Qu.:223.5   1st Qu.:0.0000   1st Qu.:2.000   Class :character  
 Median :446.0   Median :0.0000   Median :3.000   Mode  :character  
 Mean   :446.0   Mean   :0.3838   Mean   :2.309                     
 3rd Qu.:668.5   3rd Qu.:1.0000   3rd Qu.:3.000                     
 Max.   :891.0   Max.   :1.0000   Max.   :3.000                     
                                                                    
     Sex                 Age            SibSp           Parch       
 Length:891         Min.   : 0.42   Min.   :0.000   Min.   :0.0000  
 Class :character   1st Qu.:20.12   1st Qu.:0.000   1st Qu.:0.0000  
 Mode  :character   Median :28.00   Median :0.000   Median :0.0000  
                    Mean   :29.70   Mean   :0.523   Mean   :0.3816  
                    3rd Qu.:38.00   3rd Qu.:1.000   3rd Qu.:0.0000  
                    Max.   :80.00   Max.   :8.000   Max.   :6.0000  
                    NA's   :177                                     
    Ticket               Fare           Cabin             Embarked        
 Length:891         Min.   :  0.00   Length:891         Length:891        
 Class :character   1st Qu.:  7.91   Class :character   Class :character  
 Mode  :character   Median : 14.45   Mode  :character   Mode  :character  
                    Mean   : 32.20                                        
                    3rd Qu.: 31.00                                        
                    Max.   :512.33                                        
                                                                          
> names(df.train)
 [1] "PassengerId" "Survived"    "Pclass"      "Name"        "Sex"        
 [6] "Age"         "SibSp"       "Parch"       "Ticket"      "Fare"       
[11] "Cabin"       "Embarked"   
> 
> #For test
> head(df.test)
[90m# A tibble: 6 x 11[39m
  PassengerId Pclass Name    Sex     Age SibSp Parch Ticket  Fare Cabin Embarked
        [3m[90m<dbl>[39m[23m  [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m   [3m[90m<chr>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m  [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m [3m[90m<chr>[39m[23m   
[90m1[39m         892      3 Kelly,â€¦ male   34.5     0     0 330911  7.83 [31mNA[39m    Q       
[90m2[39m         893      3 Wilkesâ€¦ femaâ€¦  47       1     0 363272  7    [31mNA[39m    S       
[90m3[39m         894      2 Myles,â€¦ male   62       0     0 240276  9.69 [31mNA[39m    Q       
[90m4[39m         895      3 Wirz, â€¦ male   27       0     0 315154  8.66 [31mNA[39m    S       
[90m5[39m         896      3 Hirvonâ€¦ femaâ€¦  22       1     1 31012â€¦ 12.3  [31mNA[39m    S       
[90m6[39m         897      3 Svenssâ€¦ male   14       0     0 7538    9.22 [31mNA[39m    S       
> str(df.test)
tibble [418 Ã— 11] (S3: spec_tbl_df/tbl_df/tbl/data.frame)
 $ PassengerId: num [1:418] 892 893 894 895 896 897 898 899 900 901 ...
 $ Pclass     : num [1:418] 3 3 2 3 3 3 3 2 3 3 ...
 $ Name       : chr [1:418] "Kelly, Mr. James" "Wilkes, Mrs. James (Ellen Needs)" "Myles, Mr. Thomas Francis" "Wirz, Mr. Albert" ...
 $ Sex        : chr [1:418] "male" "female" "male" "male" ...
 $ Age        : num [1:418] 34.5 47 62 27 22 14 30 26 18 21 ...
 $ SibSp      : num [1:418] 0 1 0 0 1 0 0 1 0 2 ...
 $ Parch      : num [1:418] 0 0 0 0 1 0 0 1 0 0 ...
 $ Ticket     : chr [1:418] "330911" "363272" "240276" "315154" ...
 $ Fare       : num [1:418] 7.83 7 9.69 8.66 12.29 ...
 $ Cabin      : chr [1:418] NA NA NA NA ...
 $ Embarked   : chr [1:418] "Q" "S" "Q" "S" ...
 - attr(*, "spec")=
  .. cols(
  ..   PassengerId = [32mcol_double()[39m,
  ..   Pclass = [32mcol_double()[39m,
  ..   Name = [31mcol_character()[39m,
  ..   Sex = [31mcol_character()[39m,
  ..   Age = [32mcol_double()[39m,
  ..   SibSp = [32mcol_double()[39m,
  ..   Parch = [32mcol_double()[39m,
  ..   Ticket = [31mcol_character()[39m,
  ..   Fare = [32mcol_double()[39m,
  ..   Cabin = [31mcol_character()[39m,
  ..   Embarked = [31mcol_character()[39m
  .. )
> dim(df.test)
[1] 418  11
> summary(df.test)
  PassengerId         Pclass          Name               Sex           
 Min.   : 892.0   Min.   :1.000   Length:418         Length:418        
 1st Qu.: 996.2   1st Qu.:1.000   Class :character   Class :character  
 Median :1100.5   Median :3.000   Mode  :character   Mode  :character  
 Mean   :1100.5   Mean   :2.266                                        
 3rd Qu.:1204.8   3rd Qu.:3.000                                        
 Max.   :1309.0   Max.   :3.000                                        
                                                                       
      Age            SibSp            Parch           Ticket         
 Min.   : 0.17   Min.   :0.0000   Min.   :0.0000   Length:418        
 1st Qu.:21.00   1st Qu.:0.0000   1st Qu.:0.0000   Class :character  
 Median :27.00   Median :0.0000   Median :0.0000   Mode  :character  
 Mean   :30.27   Mean   :0.4474   Mean   :0.3923                     
 3rd Qu.:39.00   3rd Qu.:1.0000   3rd Qu.:0.0000                     
 Max.   :76.00   Max.   :8.0000   Max.   :9.0000                     
 NA's   :86                                                          
      Fare            Cabin             Embarked        
 Min.   :  0.000   Length:418         Length:418        
 1st Qu.:  7.896   Class :character   Class :character  
 Median : 14.454   Mode  :character   Mode  :character  
 Mean   : 35.627                                        
 3rd Qu.: 31.500                                        
 Max.   :512.329                                        
 NA's   :1                                              
> names(df.test)
 [1] "PassengerId" "Pclass"      "Name"        "Sex"         "Age"        
 [6] "SibSp"       "Parch"       "Ticket"      "Fare"        "Cabin"      
[11] "Embarked"   
> 
> #Check missing value
> #install.packages("Amelia")
> library(Amelia)
Loading required package: Rcpp
## 
## Amelia II: Multiple Imputation
## (Version 1.7.6, built: 2019-11-24)
## Copyright (C) 2005-2020 James Honaker, Gary King and Matthew Blackwell
## Refer to http://gking.harvard.edu/amelia/ for more information
## 
> ?missmap
missmap                 package:Amelia                 R Documentation

_M_i_s_s_i_n_g_n_e_s_s _M_a_p

_D_e_s_c_r_i_p_t_i_o_n:

     Plots a missingness map showing where missingness occurs in the
     dataset passed to â€˜ameliaâ€™.

_U_s_a_g_e:

     missmap(obj, vars, legend = TRUE, col, main, y.cex = 0.8,
       x.cex = 0.8, y.labels, y.at, csvar = NULL, tsvar = NULL,
       rank.order = TRUE, margins = c(5, 5), gap.xaxis = 1, x.las = 2,
       ...)
     
_A_r_g_u_m_e_n_t_s:

     obj: an object of class "amelia"; typically output from the
          function â€˜ameliaâ€™, a matrix or a dataframe.

    vars: a vector of column numbers or column names of the data to
          include in the plot. The default is to plot all variables.

  legend: should a legend be drawn? (True or False)

     col: a vector of length two where the first element specifies the
          color for missing cells and the second element specifies

    main: main title of the plot. Defaults to "Missingness Map".

   y.cex: expansion for the variables names on the x-axis.

   x.cex: expansion for the unit names on the y-axis.

y.labels: a vector of row labels to print on the y-axis

    y.at: a vector of the same length as â€˜y.labelsâ€™ with row nmumbers
          associated with the labels.

   csvar: column number or name of the variable corresponding to the
          unit indicator. Only used when the â€˜objâ€™ is not of class
          â€˜ameliaâ€™.

   tsvar: column number or name of the variable corresponding to the
          time indicator. Only used when the â€˜objâ€™ is not of class
          â€˜ameliaâ€™.

rank.order: a logical value. If â€˜TRUEâ€™, the default, then the order of
          the variables along the the x-axis is sorted by the percent
          missing (from highest to lowest). If â€˜FALSEâ€™, it is simply
          the order of the variables in the data.

 margins: a vector of length two that specifies the bottom and left
          margins of the plot. Useful for when variable names or row
          names are long.

gap.xaxis: value to pass to the â€˜gap.axisâ€™ argument of the â€˜axisâ€™
          function that plots the x-axis. See â€˜axisâ€™ for more details.
          Ignored on R versions less than 4.0.0.

   x.las: value of the â€˜lasâ€™ argument to pass to the â€˜axisâ€™ function
          creating the x-axis.

     ...: further graphical arguments.

_D_e_t_a_i_l_s:

     â€˜missmapâ€™ draws a map of the missingness in a dataset using the
     â€˜imageâ€™ function. The columns are reordered to put the most
     missing variable farthest to the left. The rows are reordered to a
     unit-period order if the â€˜tsâ€™ and â€˜csâ€™ arguments were passed to
     â€˜ameliaâ€™. If not, the rows are not reordered.

     The â€˜y.labelsâ€™ and â€˜y.atâ€™ commands can be used to associate labels
     with rows in the data to identify them in the plot. The y-axis is
     internally inverted so that the first row of the data is
     associated with the top-most row of the missingness map. The
     values of â€˜y.atâ€™ should refer to the rows of the data, not to any
     point on the plotting region.

_S_e_e _A_l_s_o:

     â€˜compare.densityâ€™, â€˜overimputeâ€™, â€˜tscsPlotâ€™, â€˜imageâ€™, â€˜heatmapâ€™


> 
> missmap(df.train, main = 'Missing Map', col = c('yellow','black'), legend = FALSE)
Warning messages:
1: Unknown or uninitialised column: `arguments`. 
2: Unknown or uninitialised column: `arguments`. 
3: Unknown or uninitialised column: `imputations`. 
> 
> #Exploration
> library(ggplot2)
Warning message:
package â€˜ggplot2â€™ was built under R version 3.6.2 
> ggplot(df.train, aes(Survived)) + geom_bar()
> ggplot(df.train,aes(Pclass)) + geom_bar(aes(fill = factor(Pclass)))
> ggplot(df.train,aes(Sex)) + geom_bar(aes(fill = factor(Sex)))
> ggplot(df.train,aes(Age)) + geom_histogram(bins = 20, alpha = 0.5, fill = 'blue')
Warning message:
Removed 177 rows containing non-finite values (stat_bin). 
> ggplot(df.train,aes(SibSp)) + geom_bar()
> ggplot(df.train,aes(Fare)) + geom_histogram(fill = 'green', color = 'black', alpha = 0.5)
`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
> 
> #Impute the Missing value
> pl <- ggplot(df.train,aes(Pclass,Age))
> pl <- pl + geom_boxplot(aes(group = Pclass, fill = factor(Pclass), alpha = 0.4))
> pl + scale_y_continuous(breaks = seq(min(0), max(80), by = 2)) + theme_bw()
Warning message:
Removed 177 rows containing non-finite values (stat_boxplot). 
> 
> impute_age <- function(age,class){
+   out <- age
+   for (i in 1:length(age)) {
+     
+     if (is.na(age[i])){
+       
+       if (class[i] == 1) {
+         out[i]  <- 37
+         
+       }else if (class[i] == 2) {
+         out[i] <- 29
+         
+       }else {
+         out[i] <- 24
+       }
+       
+     }else {
+         out[i] <- age[i]
+       }
+       }
+         return(out)
+         
+ }
> 
> fixed.ages <- impute_age(df.train$Age,df.train$Pclass)
> df.train$Age <- fixed.ages
> 
> missmap(df.train, main = 'Imputation Checks', col = c('yellow', 'black'), legend = FALSE)
Warning messages:
1: Unknown or uninitialised column: `arguments`. 
2: Unknown or uninitialised column: `arguments`. 
3: Unknown or uninitialised column: `imputations`. 
> 
> ####
> #Remove unwanted column
> library(dplyr)

Attaching package: â€˜dplyrâ€™

The following objects are masked from â€˜package:statsâ€™:

    filter, lag

The following objects are masked from â€˜package:baseâ€™:

    intersect, setdiff, setequal, union

Warning message:
package â€˜dplyrâ€™ was built under R version 3.6.2 
> df.train <- select(df.train, - PassengerId, -Name, -Ticket, -Cabin)
> head(df.train)
[90m# A tibble: 6 x 8[39m
  Survived Pclass Sex      Age SibSp Parch  Fare Embarked
     [3m[90m<dbl>[39m[23m  [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m  [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<dbl>[39m[23m [3m[90m<chr>[39m[23m   
[90m1[39m        0      3 male      22     1     0  7.25 S       
[90m2[39m        1      1 female    38     1     0 71.3  C       
[90m3[39m        1      3 female    26     0     0  7.92 S       
[90m4[39m        1      1 female    35     1     0 53.1  S       
[90m5[39m        0      3 male      35     0     0  8.05 S       
[90m6[39m        0      3 male      24     0     0  8.46 Q       
> str(df.train)
tibble [891 Ã— 8] (S3: tbl_df/tbl/data.frame)
 $ Survived: num [1:891] 0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass  : num [1:891] 3 1 3 1 3 3 1 3 3 2 ...
 $ Sex     : chr [1:891] "male" "female" "female" "female" ...
 $ Age     : num [1:891] 22 38 26 35 35 24 54 2 27 14 ...
 $ SibSp   : num [1:891] 1 1 0 1 0 0 0 3 0 1 ...
 $ Parch   : num [1:891] 0 0 0 0 0 0 0 1 2 0 ...
 $ Fare    : num [1:891] 7.25 71.28 7.92 53.1 8.05 ...
 $ Embarked: chr [1:891] "S" "C" "S" "S" ...
> 
> #Changing the column to factor
> df.train$Survived <- as.factor(df.train$Survived)
> df.train$Pclass <- as.factor(df.train$Pclass)
> df.train$SibSp <- as.factor(df.train$SibSp)
> df.train$Parch <- as.factor(df.train$Parch)
> 
> str(df.train)
tibble [891 Ã— 8] (S3: tbl_df/tbl/data.frame)
 $ Survived: Factor w/ 2 levels "0","1": 1 2 2 2 1 1 1 1 2 2 ...
 $ Pclass  : Factor w/ 3 levels "1","2","3": 3 1 3 1 3 3 1 3 3 2 ...
 $ Sex     : chr [1:891] "male" "female" "female" "female" ...
 $ Age     : num [1:891] 22 38 26 35 35 24 54 2 27 14 ...
 $ SibSp   : Factor w/ 7 levels "0","1","2","3",..: 2 2 1 2 1 1 1 4 1 2 ...
 $ Parch   : Factor w/ 7 levels "0","1","2","3",..: 1 1 1 1 1 1 1 2 3 1 ...
 $ Fare    : num [1:891] 7.25 71.28 7.92 53.1 8.05 ...
 $ Embarked: chr [1:891] "S" "C" "S" "S" ...
> 
> ###Run logistic regression
> log.model <- glm(Survived ~ ., family = binomial(link = 'logit'), data = df.train)
> summary(log.model)

Call:
glm(formula = Survived ~ ., family = binomial(link = "logit"), 
    data = df.train)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.8158  -0.6139  -0.4206   0.5809   2.4896  

Coefficients:
              Estimate Std. Error z value Pr(>|z|)    
(Intercept)  3.872e+00  5.184e-01   7.470 8.01e-14 ***
Pclass2     -1.079e+00  3.092e-01  -3.490 0.000484 ***
Pclass3     -2.191e+00  3.161e-01  -6.930 4.20e-12 ***
Sexmale     -2.677e+00  2.040e-01 -13.123  < 2e-16 ***
Age         -3.971e-02  8.758e-03  -4.534 5.79e-06 ***
SibSp1       8.135e-02  2.245e-01   0.362 0.717133    
SibSp2      -2.897e-01  5.368e-01  -0.540 0.589361    
SibSp3      -2.241e+00  7.202e-01  -3.111 0.001862 ** 
SibSp4      -1.675e+00  7.620e-01  -2.198 0.027954 *  
SibSp5      -1.595e+01  9.588e+02  -0.017 0.986731    
SibSp8      -1.607e+01  7.578e+02  -0.021 0.983077    
Parch1       3.741e-01  2.895e-01   1.292 0.196213    
Parch2       3.862e-02  3.824e-01   0.101 0.919560    
Parch3       3.655e-01  1.056e+00   0.346 0.729318    
Parch4      -1.586e+01  1.055e+03  -0.015 0.988007    
Parch5      -1.152e+00  1.172e+00  -0.983 0.325771    
Parch6      -1.643e+01  2.400e+03  -0.007 0.994536    
Fare         2.109e-03  2.490e-03   0.847 0.397036    
EmbarkedQ    1.344e-02  3.862e-01   0.035 0.972232    
EmbarkedS   -2.872e-01  2.448e-01  -1.173 0.240624    
---
Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1182.82  on 888  degrees of freedom
Residual deviance:  763.41  on 869  degrees of freedom
  (2 observations deleted due to missingness)
AIC: 803.41

Number of Fisher Scoring iterations: 15

> 
> #####Split the data
> library(caTools)
> set.seed(101)
> split <- sample.split(df.train$Survived, SplitRatio = 0.7)
> final.train <- subset(df.train, split == TRUE)
> final.test <- subset(df.train, split == FALSE)
> 
> final.log.model <- glm(Survived ~ ., family = binomial(link = 'logit'), data = final.train)
> summary(final.log.model)

Call:
glm(formula = Survived ~ ., family = binomial(link = "logit"), 
    data = final.train)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.8288  -0.5611  -0.4099   0.6184   2.4898  

Coefficients:
              Estimate Std. Error z value Pr(>|z|)    
(Intercept)  3.796e+00  6.209e-01   6.114 9.74e-10 ***
Pclass2     -1.230e+00  3.814e-01  -3.225 0.001261 ** 
Pclass3     -2.160e+00  3.841e-01  -5.624 1.87e-08 ***
Sexmale     -2.660e+00  2.467e-01 -10.782  < 2e-16 ***
Age         -3.831e-02  1.034e-02  -3.705 0.000212 ***
SibSp1      -2.114e-02  2.755e-01  -0.077 0.938836    
SibSp2      -4.000e-01  6.463e-01  -0.619 0.536028    
SibSp3      -2.324e+00  8.994e-01  -2.584 0.009765 ** 
SibSp4      -1.196e+00  8.302e-01  -1.440 0.149839    
SibSp5      -1.603e+01  9.592e+02  -0.017 0.986666    
SibSp8      -1.633e+01  1.004e+03  -0.016 0.987019    
Parch1       7.290e-01  3.545e-01   2.056 0.039771 *  
Parch2       1.406e-01  4.504e-01   0.312 0.754892    
Parch3       7.919e-01  1.229e+00   0.645 0.519226    
Parch4      -1.498e+01  1.552e+03  -0.010 0.992300    
Parch5      -9.772e-03  1.378e+00  -0.007 0.994343    
Parch6      -1.635e+01  2.400e+03  -0.007 0.994563    
Fare         3.128e-03  3.091e-03   1.012 0.311605    
EmbarkedQ    1.011e-01  4.506e-01   0.224 0.822471    
EmbarkedS   -3.300e-01  2.905e-01  -1.136 0.256077    
---
Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 827.68  on 621  degrees of freedom
Residual deviance: 530.63  on 602  degrees of freedom
  (1 observation deleted due to missingness)
AIC: 570.63

Number of Fisher Scoring iterations: 15

> 
> ###Predict
> fitted.probability <- predict(final.log.model, final.test, type = 'response')
> fitted.results <- ifelse(fitted.probability>0.5, 1,0)
> 
> missclassError <- mean(fitted.results != final.test$Survived)
> print(1- missclassError)
[1] NA
> 
> ###Confusion Matrix
> table(final.test$Survived,fitted.probability>0.5)
   
    FALSE TRUE
  0   140   25
  1    29   73
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
  1.626   0.120   1.791 
