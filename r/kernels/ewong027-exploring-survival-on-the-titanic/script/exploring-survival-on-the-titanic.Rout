
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> train <- read.csv('../input/train.csv', header = TRUE)
> test <- read.csv('../input/test.csv', header = TRUE)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #Looking to see where the NAs are
> sapply(train,function(x) sum(is.na(x)))
PassengerId    Survived      Pclass        Name         Sex         Age 
          0           0           0           0           0         177 
      SibSp       Parch      Ticket        Fare       Cabin    Embarked 
          0           0           0           0           0           0 
> sapply(test,function(x) sum(is.na(x)))
PassengerId      Pclass        Name         Sex         Age       SibSp 
          0           0           0           0          86           0 
      Parch      Ticket        Fare       Cabin    Embarked 
          0           0           1           0           0 
> 
> #For train there are 177 missing values in Age, but Age seems to be important, so I can
> #set their age to the average age of the people to "fix" the NA coersion problem
> train$Age[is.na(train$Age)] <- mean(train$Age,na.rm=T)
> 
> #For test, there are 86 missing age values and 1 missing fare value, which I will
> #replace with the average once again
> test$Age[is.na(test$Age)] <- mean(test$Age,na.rm=T)
> test$Fare[is.na(test$Fare)] <- mean(test$Fare,na.rm=T)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> #deleting columns
> train$Name <- NULL
> test$Name <- NULL
> train$Ticket <- NULL
> test$Ticket <- NULL
> train$Cabin <- NULL
> test$Cabin <- NULL
> 
> #making variables into numbers
> train$Sex <- as.numeric(train$Sex)
> test$Sex <- as.numeric(test$Sex)
> train$Embarked <- as.numeric(train$Embarked)
> test$Embarked <- as.numeric(test$Embarked)
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> mod <- glm(Survived ~ ., family=binomial, data = train)
> step(mod)
Start:  AIC=802.7
Survived ~ PassengerId + Pclass + Sex + Age + SibSp + Parch + 
    Fare + Embarked

              Df Deviance     AIC
- PassengerId  1   784.77  800.77
- Fare         1   785.40  801.40
- Parch        1   785.46  801.46
<none>             784.70  802.70
- Embarked     1   788.66  804.66
- SibSp        1   795.04  811.04
- Age          1   812.19  828.19
- Pclass       1   845.34  861.34
- Sex          1  1022.12 1038.12

Step:  AIC=800.77
Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked

           Df Deviance     AIC
- Fare      1   785.46  799.46
- Parch     1   785.50  799.50
<none>          784.77  800.77
- Embarked  1   788.73  802.73
- SibSp     1   795.23  809.23
- Age       1   812.24  826.24
- Pclass    1   845.65  859.65
- Sex       1  1022.39 1036.39

Step:  AIC=799.46
Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked

           Df Deviance     AIC
- Parch     1   785.94  797.94
<none>          785.46  799.46
- Embarked  1   790.33  802.33
- SibSp     1   795.35  807.35
- Age       1   813.40  825.40
- Pclass    1   887.82  899.82
- Sex       1  1024.39 1036.39

Step:  AIC=797.94
Survived ~ Pclass + Sex + Age + SibSp + Embarked

           Df Deviance     AIC
<none>          785.94  797.94
- Embarked  1   790.84  800.84
- SibSp     1   798.75  808.75
- Age       1   813.57  823.57
- Pclass    1   888.09  898.09
- Sex       1  1031.25 1041.25

Call:  glm(formula = Survived ~ Pclass + Sex + Age + SibSp + Embarked, 
    family = binomial, data = train)

Coefficients:
(Intercept)       Pclass          Sex          Age        SibSp     Embarked  
    8.66669     -1.14015     -2.71124     -0.03942     -0.33785     -0.24806  

Degrees of Freedom: 890 Total (i.e. Null);  885 Residual
Null Deviance:	    1187 
Residual Deviance: 785.9 	AIC: 797.9
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> n = nrow(train)
> step(mod, k = log(n))
Start:  AIC=845.84
Survived ~ PassengerId + Pclass + Sex + Age + SibSp + Parch + 
    Fare + Embarked

              Df Deviance     AIC
- PassengerId  1   784.77  839.11
- Fare         1   785.40  839.74
- Parch        1   785.46  839.80
- Embarked     1   788.66  843.00
<none>             784.70  845.84
- SibSp        1   795.04  849.38
- Age          1   812.19  866.53
- Pclass       1   845.34  899.68
- Sex          1  1022.12 1076.46

Step:  AIC=839.11
Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked

           Df Deviance     AIC
- Fare      1   785.46  833.01
- Parch     1   785.50  833.05
- Embarked  1   788.73  836.27
<none>          784.77  839.11
- SibSp     1   795.23  842.78
- Age       1   812.24  859.78
- Pclass    1   845.65  893.20
- Sex       1  1022.39 1069.94

Step:  AIC=833.01
Survived ~ Pclass + Sex + Age + SibSp + Parch + Embarked

           Df Deviance     AIC
- Parch     1   785.94  826.70
- Embarked  1   790.33  831.09
<none>          785.46  833.01
- SibSp     1   795.35  836.10
- Age       1   813.40  854.15
- Pclass    1   887.82  928.57
- Sex       1  1024.39 1065.14

Step:  AIC=826.7
Survived ~ Pclass + Sex + Age + SibSp + Embarked

           Df Deviance     AIC
- Embarked  1   790.84  824.81
<none>          785.94  826.70
- SibSp     1   798.75  832.71
- Age       1   813.57  847.54
- Pclass    1   888.09  922.05
- Sex       1  1031.25 1065.21

Step:  AIC=824.81
Survived ~ Pclass + Sex + Age + SibSp

         Df Deviance     AIC
<none>        790.84  824.81
- SibSp   1   805.33  832.50
- Age     1   819.32  846.49
- Pclass  1   901.80  928.97
- Sex     1  1044.10 1071.27

Call:  glm(formula = Survived ~ Pclass + Sex + Age + SibSp, family = binomial, 
    data = train)

Coefficients:
(Intercept)       Pclass          Sex          Age        SibSp  
    7.93178     -1.17239     -2.73981     -0.03979     -0.35779  

Degrees of Freedom: 890 Total (i.e. Null);  886 Residual
Null Deviance:	    1187 
Residual Deviance: 790.8 	AIC: 800.8
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> m1 = glm(Survived ~ Pclass + Sex + Age + SibSp + Embarked, family = binomial, data = train) 
> m2 = glm(Survived ~ Pclass + Sex + Age + SibSp, family = binomial, data = train) 
> 
> cv.scores = rep(-999, 2)
> cv.scores[1] = sum((m1$residuals^2)/((1 - influence(m1)$hat)^2))
> cv.scores[2] = sum((m2$residuals^2)/((1 - influence(m2)$hat)^2))
> cv.scores
[1] 9154.778 9570.672
> which.min(cv.scores)
[1] 1
> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> m1 = glm(Survived ~ Pclass + Sex + Age + SibSp + Embarked, family = binomial, data = train)
> summary(m1)

Call:
glm(formula = Survived ~ Pclass + Sex + Age + SibSp + Embarked, 
    family = binomial, data = train)

Deviance Residuals: 
    Min       1Q   Median       3Q      Max  
-2.6226  -0.5981  -0.4110   0.6243   2.4470  

Coefficients:
             Estimate Std. Error z value Pr(>|z|)    
(Intercept)  8.666685   0.694864  12.472  < 2e-16 ***
Pclass      -1.140151   0.120693  -9.447  < 2e-16 ***
Sex         -2.711244   0.194347 -13.951  < 2e-16 ***
Age         -0.039425   0.007792  -5.060  4.2e-07 ***
SibSp       -0.337847   0.103918  -3.251  0.00115 ** 
Embarked    -0.248055   0.111949  -2.216  0.02671 *  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

(Dispersion parameter for binomial family taken to be 1)

    Null deviance: 1186.66  on 890  degrees of freedom
Residual deviance:  785.94  on 885  degrees of freedom
AIC: 797.94

Number of Fisher Scoring iterations: 5

> 
> 
> ## --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
> predictions <- predict(m1,test, type = 'response')
> predictions <- ifelse(predictions > 0.5,1,0)
> write.csv(predictions, file = 'predictions.csv', row.names = F)
> 
> 
> proc.time()
   user  system elapsed 
  0.376   0.083   0.456 
