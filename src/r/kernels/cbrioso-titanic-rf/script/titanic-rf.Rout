
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> # This R script will run on our backend. You can write arbitrary code here!
> 
> # Many standard libraries are already installed, such as randomForest
> library(caret)
Loading required package: lattice
Loading required package: ggplot2
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> library(stringr)
> library(xgboost)

Attaching package: ‘xgboost’

The following object is masked from ‘package:dplyr’:

    slice

Warning message:
package ‘xgboost’ was built under R version 3.6.2 
> library(mice)

Attaching package: ‘mice’

The following objects are masked from ‘package:base’:

    cbind, rbind

Warning message:
package ‘mice’ was built under R version 3.6.2 
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:dplyr’:

    combine

The following object is masked from ‘package:ggplot2’:

    margin

> library(Amelia)
Loading required package: Rcpp
## 
## Amelia II: Multiple Imputation
## (Version 1.7.6, built: 2019-11-24)
## Copyright (C) 2005-2020 James Honaker, Gary King and Matthew Blackwell
## Refer to http://gking.harvard.edu/amelia/ for more information
## 
> library(missForest)
Loading required package: foreach
Loading required package: itertools
Loading required package: iterators
Warning message:
package ‘foreach’ was built under R version 3.6.2 
> 
> 
> # The train and test data is stored in the ../input directory
> train <- read.csv("../input/train.csv")
> test  <- read.csv("../input/test.csv")
> 
> 
> # Examine structure of dataframe
> str(train)
'data.frame':	891 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : Factor w/ 891 levels "Abbing, Mr. Anthony",..: 109 191 358 277 16 559 520 629 417 581 ...
 $ Sex        : Factor w/ 2 levels "female","male": 2 1 1 1 2 2 2 2 1 1 ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : Factor w/ 681 levels "110152","110413",..: 524 597 670 50 473 276 86 396 345 133 ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : Factor w/ 148 levels "","A10","A14",..: 1 83 1 57 1 1 131 1 1 1 ...
 $ Embarked   : Factor w/ 4 levels "","C","Q","S": 4 2 4 4 4 3 4 4 4 2 ...
> 
> # Look at number of people who survived
> table(train$Survived)

  0   1 
549 342 
> prop.table(table(train$Survived))

        0         1 
0.6161616 0.3838384 
> 
> # Data wrangling
> 
> comb <- rbind(train, test %>% mutate(Survived = NA))
> comb <- comb %>% mutate(title = ifelse(grepl('Mr. ',Name),'Mr',
+                               ifelse(grepl('Mrs.',Name),'Mrs',
+                               ifelse(grepl('Rev.',Name),'Rev',
+                               ifelse(grepl('Col.',Name),'Col',
+                               ifelse(grepl('Miss.',Name),'Miss',
+                               ifelse(grepl('Dr.',Name),'Dr',
+                               ifelse(grepl('Master',Name), 'Master','Nothing'))))))),
+                         Ticket_ = ifelse(grepl('SC',Ticket),'SC',
+                                        ifelse(grepl('PC',Ticket),'PC',
+                                               ifelse(grepl('S.A.',Ticket),'S.A.',
+                                                      ifelse(grepl('SOTON',Ticket), 'SOTON',
+                                                             ifelse(grepl('A/5',Ticket),'A/5', 
+                                                                    ifelse(grepl('PP',Ticket),'PP', 
+                                                                           ifelse(grepl('W.C.',Ticket),'WC',
+                                                                                  ifelse(grepl('C.A.',Ticket),'CA',substr(Ticket,1,1))))))))),                    
+                         surname = word(Name,1, sep = ", "),
+                         FamSize = SibSp + Parch + 1, 
+                         Cabin_ = ifelse(substr(Cabin,1,1)=='','Z',substr(Cabin,1,1)),
+                         Age_ = ntile(Age, 5))
> comb <- comb %>% select(-SibSp , -Parch)
> 
> # write.csv(comb, 'combo.csv')
> # some plots
> ggplot(comb, aes(Survived), color = factor(Sex) ) + geom_bar() + facet_grid(Sex ~ .)
Warning message:
Removed 418 rows containing non-finite values (stat_count). 
> ggplot(comb, aes(Survived) ) + geom_bar() + facet_grid(Age_ ~ .)
Warning message:
Removed 418 rows containing non-finite values (stat_count). 
> ggplot(comb, aes(Survived) ) + geom_bar() + facet_grid(Embarked ~ .)
Warning message:
Removed 418 rows containing non-finite values (stat_count). 
> ggplot(comb, aes(Survived) ) + geom_bar() + facet_grid(Ticket_ ~ .)
Warning message:
Removed 418 rows containing non-finite values (stat_count). 
> 
> # inpute age
> age_ave <- comb %>% group_by(title) %>% summarize(ave_age = as.integer(median(Age, na.rm=TRUE)))
`summarise()` ungrouping output (override with `.groups` argument)
> comb <- comb %>% left_join(age_ave) %>% mutate(Age = ifelse(is.na(Age), ave_age, Age )) %>% select(-ave_age)
Joining, by = "title"
> 
> # train and validation
> 
> comb_ <- comb  %>% mutate(Pclass = as.numeric(Pclass)-1,
+                          Sex = as.numeric(Sex)-1, Age, Fare,
+                          Cabin = as.numeric(Cabin)-1,
+                          Embarked = as.numeric(Embarked)-1,
+                          title = as.numeric(as.factor(title))-1,
+                          Cabin_ = as.numeric(as.factor(Cabin_))-1,
+                          Ticket_ = as.numeric(Ticket)-1,
+                          surname = as.numeric(as.factor(surname))-1) %>%
+   select(-PassengerId, -Ticket, -Age_, -Name, -Cabin)
> 
> train_ <- comb_ %>% filter(!is.na(Survived))  %>% mutate(Survived = as.numeric(Survived))
> test_ <- comb_ %>% filter(is.na(Survived)) 
> 
> train_t <- sample_frac(train_, 0.8)
> train_v <- train_ %>% anti_join(train_t)
Joining, by = c("Survived", "Pclass", "Sex", "Age", "Fare", "Embarked", "title", "Ticket_", "surname", "FamSize", "Cabin_")
> 
> # XGBOOST
> 
> train_m <- as.matrix(train_t %>% select(-Survived))
> train_m_l <- as.matrix(train_t %>% select(Survived))
> val_m <- as.matrix(train_v %>% select(-Survived))
> val_m_l <- as.matrix(train_v %>% select(Survived))
> test_m <- as.matrix(test_ %>% select(-Survived))
> 
> dtrain <- xgb.DMatrix(data = train_m, label= train_m_l, missing=NA)
> dval <- xgb.DMatrix(data = as.matrix(train_v %>% select(-Survived)), label=as.matrix(train_v %>% select(Survived)), missing=NA)
> dtest <- xgb.DMatrix(data = as.matrix(test_ %>% select(-Survived)), label=as.matrix(test_ %>% select(Survived)), missing=NA)
> 
> param <- list("objective" = "binary:logistic")
> nround  = 20
> 
> watchlist <- list(val = dval, train = dtrain)
> bst <- xgb.train(param, dtrain, nthread = 12, nround = 20, watchlist, metric="error")
[12:13:44] WARNING: amalgamation/../src/learner.cc:516: 
Parameters: { metric } might not be used.

  This may not be accurate due to some parameters are only used in language bindings but
  passed down to XGBoost core.  Or some parameters are not used but slip through this
  verification. Please open an issue if you find above cases.


[1]	val-error:0.163842	train-error:0.126227 
[2]	val-error:0.135593	train-error:0.116410 
[3]	val-error:0.124294	train-error:0.106592 
[4]	val-error:0.129944	train-error:0.098177 
[5]	val-error:0.135593	train-error:0.091164 
[6]	val-error:0.124294	train-error:0.086957 
[7]	val-error:0.112994	train-error:0.088359 
[8]	val-error:0.118644	train-error:0.079944 
[9]	val-error:0.124294	train-error:0.078541 
[10]	val-error:0.129944	train-error:0.071529 
[11]	val-error:0.129944	train-error:0.068724 
[12]	val-error:0.129944	train-error:0.065919 
[13]	val-error:0.146893	train-error:0.058906 
[14]	val-error:0.152542	train-error:0.063114 
[15]	val-error:0.141243	train-error:0.057504 
[16]	val-error:0.135593	train-error:0.050491 
[17]	val-error:0.141243	train-error:0.053296 
[18]	val-error:0.141243	train-error:0.056101 
[19]	val-error:0.146893	train-error:0.047686 
[20]	val-error:0.152542	train-error:0.037868 
> names <- dimnames(train_m)[[2]]
> importance_matrix <- xgb.importance(names, model = bst)
> ggplot(data = as.data.frame(importance_matrix), aes(x= Feature, y= Gain)) + geom_bar(stat = "identity")
> 
> pred_bst_test <- predict(bst, test_m, missing = NA)
> predict <- as.data.frame(pred_bst_test) %>% mutate(Survived = ifelse(pred_bst_test>0.5,1,0)) %>% select(-pred_bst_test)
> #predict <- cbind(predict, over_name_tst) %>% mutate(Survived = ifelse(is.na(ss),Survived,ss)) %>% select(Survived)
> predict <- cbind(test$PassengerId, predict)
> colnames(predict) <- c('PassengerId','Survived')
> 
> write.csv(predict, 'bst_Titanic3.csv')
> 
> # Prepare the file
> 
> comb1_ <-  comb %>% mutate(Pclass = factor(Pclass),
+                            title = factor(title),
+                            Ticket_ = factor(Ticket_),
+                            surname = factor(surname),
+                            Cabin_ = factor(Cabin_))
> 
> set.seed(144)
> vars.for.imputation = setdiff(names(comb1_), c("PassengerId", "Survived",  "Age_", "Name", "Ticket", "Cabin", "surname"))
> comb1_.imp <- missForest(comb1_[vars.for.imputation], verbose = TRUE)
  missForest iteration 1 in progress...done!
    estimated error(s): 0.524699 0 
    difference(s): 0.000105967 0 
    time: 0.5 seconds

  missForest iteration 2 in progress...done!
    estimated error(s): 0.527101 0 
    difference(s): 4.303486e-09 0 
    time: 0.429 seconds

  missForest iteration 3 in progress...done!
    estimated error(s): 0.5131247 0 
    difference(s): 8.625693e-12 0 
    time: 0.427 seconds

  missForest iteration 4 in progress...done!
    estimated error(s): 0.5090281 0 
    difference(s): 1.321325e-09 0 
    time: 0.445 seconds

> comb1_[vars.for.imputation] <- comb1_.imp$ximp
> 
> train1_ <- comb1_ %>% filter(!is.na(Survived))  %>% mutate(Survived = as.numeric(Survived))
> test1_ <- comb1_ %>% filter(is.na(Survived)) 
> 
> train1_t <- sample_frac(train1_, 0.8)
> train1_v <- train1_ %>% anti_join(train1_t)
Joining, by = c("PassengerId", "Survived", "Pclass", "Name", "Sex", "Age", "Ticket", "Fare", "Cabin", "Embarked", "title", "Ticket_", "surname", "FamSize", "Cabin_", "Age_")
> 
> # Random Forest
> set.seed(123)
> library('randomForest')
> 
> fit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + FamSize + Fare +
+                       Embarked + title + Ticket_,
+                     data=train1_t, 
+                     importance=TRUE, 
+                     ntree=3000)
> val_pred <- as.data.frame(predict(fit, train1_v))
> val_comp <- cbind(pred = val_pred, Survived = train1_v$Survived)
> colnames(val_comp) <-c('pred','act')
> val_comp %>% mutate(correct = ifelse(pred==act,1,0)) %>% summarize(ratio = sum(correct)/n())
      ratio
1 0.8483146
> 
> varImpPlot(fit)
> 
> Prediction <- predict(fit, test1_)
> submit <- cbind(test$PassengerId,  Prediction)
> write.csv(submit, 'rf_Titanic5.csv', row.names=FALSE)
> 
> 
> 
> proc.time()
   user  system elapsed 
 13.385   0.325   9.044 
