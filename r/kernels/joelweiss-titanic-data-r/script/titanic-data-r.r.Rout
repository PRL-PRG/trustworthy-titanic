
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> library(ggplot2) # Data visualization
Warning message:
package ‘ggplot2’ was built under R version 3.6.2 
> library(readr) # CSV file I/O, e.g. the read_csv function
> 
> # Input data files are available in the "../input/" directory.
> # For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory
> 
> system("ls ../input")
gender_submission.csv
test.csv
train.csv
> 
> # Any results you write to the current directory are saved as output.
> 
> train <- read.csv("../input/train.csv",header=TRUE,stringsAsFactors = F)
> test  <- read.csv("../input/test.csv",header=TRUE,stringsAsFactors = F)
> dim(train)
[1] 891  12
> dim(test)
[1] 418  11
> 
> library('dplyr')

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 3.6.2 
> data  <- bind_rows(train,test)
> dim(data)
[1] 1309   12
> 
> str(data)
'data.frame':	1309 obs. of  12 variables:
 $ PassengerId: int  1 2 3 4 5 6 7 8 9 10 ...
 $ Survived   : int  0 1 1 1 0 0 0 0 1 1 ...
 $ Pclass     : int  3 1 3 1 3 3 1 3 3 2 ...
 $ Name       : chr  "Braund, Mr. Owen Harris" "Cumings, Mrs. John Bradley (Florence Briggs Thayer)" "Heikkinen, Miss. Laina" "Futrelle, Mrs. Jacques Heath (Lily May Peel)" ...
 $ Sex        : chr  "male" "female" "female" "female" ...
 $ Age        : num  22 38 26 35 35 NA 54 2 27 14 ...
 $ SibSp      : int  1 1 0 1 0 0 0 3 0 1 ...
 $ Parch      : int  0 0 0 0 0 0 0 1 2 0 ...
 $ Ticket     : chr  "A/5 21171" "PC 17599" "STON/O2. 3101282" "113803" ...
 $ Fare       : num  7.25 71.28 7.92 53.1 8.05 ...
 $ Cabin      : chr  "" "C85" "" "C123" ...
 $ Embarked   : chr  "S" "C" "S" "S" ...
> 
> data$Title <- gsub('(.*, )|(\\..*)', '', data$Name)
> 
> rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don', 
+                 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
> 
> # Also reassign mlle, ms, and mme accordingly
> data$Title[data$Title == 'Mlle']        <- 'Miss' 
> data$Title[data$Title == 'Ms']          <- 'Miss'
> data$Title[data$Title == 'Mme']         <- 'Mrs' 
> data$Title[data$Title %in% rare_title]  <- 'Rare Title'
> 
> data$Embarked[c(62, 830)] <- 'C'
> data$Fare[1044] <- median(data[data$Pclass == '3' & data$Embarked == 'S', ]$Fare, na.rm = TRUE)
> data$Fare[data$Fare <3.0] = NA
> data$Fare[data$Fare > 300] <- median(data[data$Pclass == '1' & data$Embarked == 'C', ]$Fare, na.rm = TRUE)
> 
> library('mice') # imputation

Attaching package: ‘mice’

The following objects are masked from ‘package:base’:

    cbind, rbind

Warning message:
package ‘mice’ was built under R version 3.6.2 
> 
> factor_vars <- c('Pclass','Sex','Age','SibSp','Parch','Fare','Embarked')
> 
> # Perform mice imputation, excluding certain less-than-useful variables:
> mice_mod <- mice(data[, names(data) %in% factor_vars], 
+                  method='rf')

 iter imp variable
  1   1  Age  Fare
  1   2  Age  Fare
  1   3  Age  Fare
  1   4  Age  Fare
  1   5  Age  Fare
  2   1  Age  Fare
  2   2  Age  Fare
  2   3  Age  Fare
  2   4  Age  Fare
  2   5  Age  Fare
  3   1  Age  Fare
  3   2  Age  Fare
  3   3  Age  Fare
  3   4  Age  Fare
  3   5  Age  Fare
  4   1  Age  Fare
  4   2  Age  Fare
  4   3  Age  Fare
  4   4  Age  Fare
  4   5  Age  Fare
  5   1  Age  Fare
  5   2  Age  Fare
  5   3  Age  Fare
  5   4  Age  Fare
  5   5  Age  Fare
Warning message:
Number of logged events: 2 
>                             
> # Save the complete output 
> mice_output <- complete(mice_mod)
> 
> # Replace Age variable from the mice model.
> for(ivar in factor_vars){
+     data[,ivar] <- mice_output[,ivar]
+ }
> 
> data$FamilySize <- data$SibSp + data$Parch + 1
> data$Fare_Per_Person <- data$Fare/as.numeric(data$FamilySize)
> data$Deck <- sapply(data$Cabin, function(x) strsplit(x, NULL)[[1]][1])
> data$Deck[is.na(data$Deck)] <- "Unknown"
> 
> # Discretize age
> data$Age_Group[data$Age <= 10] <- 'Kid'
> data$Age_Group[data$Age <= 20 & data$Age > 10] <- 'Teen'
> data$Age_Group[data$Age <= 30 & data$Age > 20] <- 'Young'
> data$Age_Group[data$Age <= 40 & data$Age > 30] <- 'Adult'
> data$Age_Group[data$Age <= 50 & data$Age > 40] <- 'Senior'
> data$Age_Group[data$Age > 50] <- 'old'
> 
> factor_vars <- c('Pclass','SibSp','Parch','FamilySize')
> data[factor_vars] <- lapply(data[factor_vars], function(x) as.factor(x))
>                             
> factor_vars <- c("Name","Sex","Ticket","Cabin","Embarked","Title","Deck","Age_Group")
> data[factor_vars] <- lapply(data[factor_vars], function(x) as.factor(x))
> 
> 
> # Split the data back into a train set and a test set
> train <- data[1:891,]
> test <- data[892:1309,]
> 
> train$PassengerId <- NULL
> train$Name <- NULL
> train$Ticket <- NULL
> train$Cabin <- NULL
> 
> # Build the model (note: not all possible variables are used)
> library('randomForest') 
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:dplyr’:

    combine

The following object is masked from ‘package:ggplot2’:

    margin

> rf_model <- randomForest(factor(Survived) ~ .,data = train)
> 
> importance(rf_model)
                MeanDecreaseGini
Pclass                 21.933506
Sex                    55.278370
Age                    40.984745
SibSp                  10.100697
Parch                   6.385123
Fare                   44.389104
Embarked                9.348780
Title                  70.543027
FamilySize             21.761221
Fare_Per_Person        46.697386
Deck                   21.654790
Age_Group              18.699700
> 
> # Predict using the test set
> prediction <- predict(rf_model, test)
> 
> # Save the solution to a dataframe with two columns: PassengerId and Survived (prediction)
> solution <- data.frame(PassengerID = test$PassengerId, Survived = prediction)
> 
> # Write the solution to file
> write.csv(solution, file = 'rf_mod_Solution.csv', row.names = F)
> 
> 
> 
> proc.time()
   user  system elapsed 
  3.532   0.320   3.898 
